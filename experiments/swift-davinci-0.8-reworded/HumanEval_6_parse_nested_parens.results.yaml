language: swift
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let input = paren_string.characters.split\
    \ { $0 == \" \" }.map(String.init)\n    for item in input {\n        result.append(get_max_nested_parens(item))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzy_g8mwh.swift:9:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let input = paren_string.characters.split { $0 == \"\
    \ \" }.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzy_g8mwh.swift:11:23: error: cannot find\
    \ 'get_max_nested_parens' in scope\n        result.append(get_max_nested_parens(item))\n\
    \                      ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = [Int]()\n    var local_max_nesting\
    \ = 0\n    var paren_stack = [Int]()\n    for paren in paren_string {\n      \
    \  if paren == \"(\" {\n            paren_stack.append(1)\n            local_max_nesting\
    \ += 1\n        } else if paren == \")\" {\n            paren_stack.popLast()\n\
    \            local_max_nesting -= 1\n        } else if paren == \" \" {\n    \
    \        if !paren_stack.isEmpty {\n                print(\"Error: unbalanced\
    \ parens\")\n                return []\n            }\n            max_nesting.append(local_max_nesting)\n\
    \            local_max_nesting = 0\n        }\n    }\n    if !paren_stack.isEmpty\
    \ {\n        print(\"Error: unbalanced parens\")\n        return []\n    }\n \
    \   return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpztqgaupg/tmpztqgaupg.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11af2f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11aefe9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11aefe9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11aefe87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztqgaupg                        0x000056229ed2e95e <unavailable> + 6494

    5    libc.so.6                          0x00002b11af4de460 __libc_start_main +
    245

    6    tmpztqgaupg                        0x000056229ed2e579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var ans: [Int] = []\n    let paren_string_ar = paren_string.split(separator:\
    \ \" \")\n    var stack = Stack<Character>()\n    for c in paren_string_ar {\n\
    \        var count = 0\n        for i in c {\n            if i == \"(\" {\n  \
    \              stack.push(i)\n                count += 1\n            } else if\
    \ i == \")\" {\n                stack.pop()\n                count -= 1\n    \
    \        }\n        }\n        ans.append(count)\n    }\n    return ans\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbl4z6vu9.swift:10:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  return paren_string.split(separator: \" \").map {\n  \
    \  var stack = [Int]()\n    var max_depth = 0\n    for char in $0 {\n      if\
    \ char == \"(\" {\n        stack.append(1)\n        max_depth = max(max_depth,\
    \ stack.count)\n      } else if stack.popLast() == nil {\n        return 0\n \
    \     }\n    }\n    return max_depth\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_res = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var count = 0\n        var max =\
    \ 0\n        for char in group {\n            if char == \"(\" {\n           \
    \     count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max {\n                max = count\n\
    \            }\n        }\n        paren_res.append(max)\n    }\n    return paren_res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmp_kptguxj/tmp_kptguxj.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f57b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f54adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f54ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f54ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kptguxj                        0x00005557de06043e <unavailable> + 5182

    5    libc.so.6                          0x00002ba7f59a2460 __libc_start_main +
    245

    6    tmp_kptguxj                        0x00005557de060059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups {\n\
    \        var current_level = 0\n        var max_level = 0\n        for char in\
    \ group {\n            if char == \"(\" {\n                current_level += 1\n\
    \            } else if char == \")\" {\n                current_level -= 1\n \
    \           }\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // convert string to array of characters\n    let paren_characters\
    \ = Array(paren_string)\n    var open_parens = 0\n    var paren_levels = [Int]()\n\
    \    var paren_level = 0\n    var paren_level_arr = [Int]()\n    var i = 0\n \
    \   while i < paren_characters.count {\n        // if an open paren is found\n\
    \        if paren_characters[i] == \"(\" {\n            // increase the number\
    \ of open parens\n            open_parens += 1\n            // if this is the\
    \ first open paren for this group\n            if paren_level == 0 {\n       \
    \         // start a new paren level array\n                paren_level_arr =\
    \ [Int]()\n            }\n            // update the paren level\n            paren_level\
    \ += 1\n            // add this paren level to the paren level array\n       \
    \     paren_level_arr.append(paren_level)\n        }\n        // if a closed paren\
    \ is found\n        else if paren_characters[i] == \")\" {\n            // decrease\
    \ the number of open parens\n            open_parens -= 1\n            // if all\
    \ the parens are closed, then the group is done\n            if open_parens ==\
    \ 0 {\n                // add the group's paren levels to the overall paren levels\n\
    \                paren_levels.append(contentsOf: paren_level_arr)\n          \
    \      // add a 1 to the overall paren levels to signify the end of the group\n\
    \                paren_levels.append(1)\n                // reset the paren level\n\
    \                paren_level = 0\n            }\n            // update the paren\
    \ level\n            paren_level -= 1\n        }\n        // if a space is found\n\
    \        else if paren_characters[i] == \" \" {\n            // if the current\
    \ paren level is not 0\n            if paren_level != 0 {\n                //\
    \ add this paren level to the paren level array\n                paren_level_arr.append(paren_level)\n\
    \            }\n        }\n        i += 1\n    }\n    // remove the last value\
    \ which is the end of the group\n    paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpw26120wv.swift:57:5: error: cannot find 'paren' in scope\n    paren\n\
    \    ^~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // Start with an array to hold all the groups\n    var\
    \ groups = [String]()\n    // Then split the string by spaces\n    for group in\
    \ paren_string.split(separator: \" \") {\n        groups.append(String(group))\n\
    \    }\n    var level_array = [Int]()\n    // Now that we have an array of individual\
    \ groups of parentheses,\n    // we can loop through them and count their levels\
    \ of nesting\n    for group in groups {\n        // Each group will have its own\
    \ array to hold the levels\n        var level_array_temp = [Int]()\n        var\
    \ level = 0\n        // Loop through each character in the group and increment\n\
    \        // or decrement the level accordingly\n        for char in group {\n\
    \            switch char {\n            case \"(\":\n                level +=\
    \ 1\n            case \")\":\n                level -= 1\n            default:\n\
    \                continue\n            }\n            level_array_temp.append(level)\n\
    \        }\n        // We have the array of levels, find the maximum value\n \
    \       if let max_level = level_array_temp.max() {\n            level_array.append(max_level)\n\
    \        }\n    }\n    return level_array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nested_parens: [Int] = []\n    var level: Int\
    \ = 0\n    var max_level: Int = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            level += 1\n            if level > max_level {\n\
    \                max_level = level\n            }\n        } else if char == \"\
    )\" {\n            level -= 1\n        } else if char == \" \" {\n           \
    \ max_nested_parens.append(max_level)\n            max_level = 0\n           \
    \ level = 0\n        }\n    }\n    max_nested_parens.append(max_level)\n    return\
    \ max_nested_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack = Stack<Character>()\n    var current_level\
    \ = 0\n    var max_levels = [Int]()\n    var temp_level = 0\n    for character\
    \ in paren_string {\n        if character == \"(\" {\n            stack.push(character)\n\
    \            current_level += 1\n        } else if character == \")\" {\n    \
    \        stack.pop()\n            temp_level = current_level\n            current_level\
    \ -= 1\n        } else if character == \" \" {\n            max_levels.append(temp_level)\n\
    \        }\n    }\n    return max_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf0qc_tq7.swift:8:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.split(separator: \" \").map {\n\
    \        var paren_stack = [Character]()\n        var max_nesting = 0\n      \
    \  var curr_nesting = 0\n        for char in $0 {\n            if char == \"(\"\
    \ {\n                curr_nesting += 1\n                max_nesting = max(max_nesting,\
    \ curr_nesting)\n            } else if char == \")\" {\n                curr_nesting\
    \ -= 1\n            }\n        }\n        return max_nesting\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result: [Int] = []\n    for group in groups {\n        var max_depth\
    \ = 0\n        var curr_depth = 0\n        for char in group {\n            if\
    \ char == \"(\" {\n                curr_depth += 1\n                if curr_depth\
    \ > max_depth {\n                    max_depth = curr_depth\n                }\n\
    \            } else if char == \")\" {\n                curr_depth -= 1\n    \
    \        }\n        }\n        result.append(max_depth)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp943k03xp.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    // 1. Parse parenthesis string into individual\
    \ strings for each group\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    \n    // 2. Evaluate each paren group for max level of nesting\n\
    \    var result = [Int]()\n    for paren_group in paren_groups {\n        result.append(\
    \ max_nested_level(paren_group: paren_group) )\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoems9njq.swift:10:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let split_strings = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_array = [Int]()\n    for curr_paren_string in split_strings\
    \ {\n        var count = 0\n        var max_count = 0\n        for curr_char in\
    \ curr_paren_string {\n            if curr_char == \"(\" {\n                count\
    \ += 1\n            } else if curr_char == \")\" {\n                count -= 1\n\
    \            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        max_nesting_array.append(max_count)\n\
    \    }\n    return max_nesting_array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var depth = 0\n    var max_depth = 0\n    var result\
    \ = [Int]()\n    for c in paren_string {\n        if c == \"(\" {\n          \
    \  depth += 1\n            max_depth = max(max_depth, depth)\n        } else if\
    \ c == \")\" {\n            depth -= 1\n        } else if c == \" \" {\n     \
    \       if depth == 0 {\n                result.append(max_depth)\n          \
    \      max_depth = 0\n            }\n        }\n    }\n    result.append(max_depth)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { (paren) -> Int in\n        var depth = 0\n        var max_depth = 0\n    \
    \    for c in paren {\n            if c == \"(\" {\n                depth += 1\n\
    \            } else if c == \")\" {\n                depth -= 1\n            }\n\
    \            max_depth = max(max_depth, depth)\n        }\n        return max_depth\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiha4ok73.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map { (paren)\
    \ -> Int in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_list = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    groups.forEach({\n        var level = 0\n        var max_level =\
    \ 0\n        for char in $0 {\n            if char == \"(\" {\n              \
    \  level += 1\n            } else if char == \")\" {\n                level -=\
    \ 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        paren_list.append(max_level)\n  \
    \  })\n    return paren_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq04u3vcd.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var nesting = 0\n        var max_nest\
    \ = 0\n        for paren in group {\n            if paren == \"(\" {\n       \
    \         nesting += 1\n            } else if paren == \")\" {\n             \
    \   nesting -= 1\n            }\n            if nesting > max_nest {\n       \
    \         max_nest = nesting\n            }\n        }\n        max_nesting.append(max_nest)\n\
    \    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_string_arr = paren_string.split(separator:\
    \ \" \")\n    var max_depth_arr = [Int]()\n    for paren_string in paren_string_arr\
    \ {\n        var left_paren_count = 0\n        var max_depth = 0\n        for\
    \ paren in paren_string {\n            if paren == \"(\" {\n                left_paren_count\
    \ += 1\n                if left_paren_count > max_depth {\n                  \
    \  max_depth = left_paren_count\n                }\n            } else if paren\
    \ == \")\" {\n                left_paren_count -= 1\n            }\n        }\n\
    \        max_depth_arr.append(max_depth)\n    }\n    return max_depth_arr\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpraztvutb/tmpraztvutb.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0878eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0878ba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0878ba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0878ba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraztvutb                        0x000056498adfa43e <unavailable> + 5182

    5    libc.so.6                          0x00002b087909b460 __libc_start_main +
    245

    6    tmpraztvutb                        0x000056498adfa059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var results = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        results.append(calculate_nested_parens(paren_string:\
    \ group))\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqcwp1jzh.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_paren_depth = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        max_paren_depth.append(max_paren_depth_in_paren_group(paren_group:\
    \ paren_group))\n    }\n    return max_paren_depth\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpw7rptaq1.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // We count the open parentheses and then subtract the\
    \ number of closed parentheses.\n    // The number of closed parentheses will\
    \ always be smaller or equal to the number of open parentheses.\n    // This subtraction\
    \ tells us the number of unmatched open parentheses.\n    // The maximum of this\
    \ value will tell us the maximum level of nesting.\n    let open_parens = \"(\"\
    \n    let closed_parens = \")\"\n    var results = [Int]()\n    for group in paren_string.split(separator:\
    \ \" \") {\n        var open_paren_count = 0\n        var close_paren_count =\
    \ 0\n        for char in group {\n            if open_parens.contains(char) {\n\
    \                open_paren_count += 1\n            } else if closed_parens.contains(char)\
    \ {\n                close_paren_count += 1\n            }\n        }\n      \
    \  results.append(open_paren_count - close_paren_count)\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpde4ac492/tmpde4ac492.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b346b9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b346b6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b346b6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b346b6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde4ac492                        0x00005580aaae595e <unavailable> + 6494

    5    libc.so.6                          0x00002b346bbc8460 __libc_start_main +
    245

    6    tmpde4ac492                        0x00005580aaae5579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpraztvutb/tmpraztvutb.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0878eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0878ba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0878ba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0878ba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraztvutb                        0x000056498adfa43e <unavailable> + 5182

    5    libc.so.6                          0x00002b087909b460 __libc_start_main +
    245

    6    tmpraztvutb                        0x000056498adfa059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_depth = [[Int]]()\n    var paren_count = [Int]()\n\
    \    var paren_max_depth = [Int]()\n    var inside_paren = 0\n    var paren_buffer\
    \ = [Int]()\n    for c in paren_string {\n        switch c {\n        case \"\
    (\":\n            inside_paren += 1\n            paren_buffer.append(inside_paren)\n\
    \        case \")\":\n            inside_paren -= 1\n            paren_buffer.append(inside_paren)\n\
    \        case \" \":\n            paren_depth.append(paren_buffer)\n         \
    \   paren_count.append(paren_buffer.count)\n            paren_max_depth.append(paren_buffer.max()!)\n\
    \            paren_buffer = [Int]()\n        default:\n            fatalError(\"\
    Invalid character\")\n        }\n    }\n    print(paren_depth)\n    print(paren_count)\n\
    \    print(paren_max_depth)\n    return paren_max_depth\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpuarjdp55/tmpuarjdp55.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabfda96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabfd78db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabfd78d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabfd78c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuarjdp55                        0x0000555f1af9d9de <unavailable> + 6622

    5    libc.so.6                          0x00002aabfdc82460 __libc_start_main +
    245

    6    tmpuarjdp55                        0x0000555f1af9d5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack = [Int]()\n    var output = [Int]()\n    var\
    \ max_count = 0\n    for c in paren_string {\n        if c == \"(\" {\n      \
    \      stack.append(c.asciiValue!)\n            max_count += 1\n        } else\
    \ if c == \")\" {\n            stack.removeLast()\n            max_count -= 1\n\
    \        } else if c == \" \" {\n            output.append(max_count)\n      \
    \      max_count = 0\n        }\n    }\n    output.append(max_count)\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyu799fv4.swift:13:38: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n            stack.append(c.asciiValue!)\n \
    \                                    ^\n                         Int(        \
    \ )\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    return paren_groups.map { group in\n        return group.reduce(0)\
    \ { max($0, $1 == \"(\" ? $0 + 1 : $0 - 1) }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuug9x96u.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009269
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nested_parens = [Int]()\n    for group in paren_string.split(separator:\
    \ \" \") {\n        var paren_stack = Stack<Character>()\n        var nested_parens\
    \ = 0\n        for c in group {\n            if c == \"(\" {\n               \
    \ paren_stack.push(c)\n                nested_parens += 1\n            } else\
    \ if c == \")\" {\n                _ = paren_stack.pop()\n            }\n    \
    \    }\n        max_nested_parens.append(nested_parens)\n    }\n    return max_nested_parens\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9hd9n4pf.swift:10:27: error: cannot find 'Stack' in scope\n   \
    \     var paren_stack = Stack<Character>()\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var parsed_parens: [Int] = []\n    for paren_group in paren_groups\
    \ {\n        parsed_parens.append(parse_parens(paren_group: paren_group))\n  \
    \  }\n    return parsed_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjjkwyo05.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var open_paren_count: [Int] = []\n    var max_count\
    \ = 0\n    var char_index = 0\n    for c in paren_string {\n        if c == \"\
    (\" {\n            max_count += 1\n        } else if c == \")\" {\n          \
    \  max_count -= 1\n        } else if c == \" \" {\n            open_paren_count.append(max_count)\n\
    \            max_count = 0\n        }\n        char_index += 1\n    }\n    open_paren_count.append(max_count)\n\
    \    return open_paren_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp9gur2923/tmp9gur2923.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25666e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25663dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25663dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25663db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9gur2923                        0x0000562c6df2763e <unavailable> + 5694

    5    libc.so.6                          0x00002b25668d1460 __libc_start_main +
    245

    6    tmp9gur2923                        0x0000562c6df27259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmp_kptguxj/tmp_kptguxj.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f57b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f54adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f54ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f54ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kptguxj                        0x00005557de06043e <unavailable> + 5182

    5    libc.so.6                          0x00002ba7f59a2460 __libc_start_main +
    245

    6    tmp_kptguxj                        0x00005557de060059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack = Array<Int>()\n    var max_nesting = 0\n\
    \    var result = Array<Int>()\n    var char_array = Array(paren_string)\n   \
    \ for i in 0..<char_array.count {\n        if char_array[i] == \"(\" {\n     \
    \       stack.append(1)\n            max_nesting += 1\n        } else if char_array[i]\
    \ == \")\" {\n            max_nesting -= 1\n            stack.removeLast()\n \
    \       } else if char_array[i] == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp885dzj02/tmp885dzj02.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae317230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae316f27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae316f27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae316f267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp885dzj02                        0x0000559643c54a0e <unavailable> + 6670

    5    libc.so.6                          0x00002ae31741c460 __libc_start_main +
    245

    6    tmp885dzj02                        0x0000559643c54629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // Initialize result array, and an array of characters\
    \ representing the input string\n    var nesting_array: [Int] = []\n    let paren_array\
    \ = Array(paren_string)\n    \n    // Iterate through the input array of characters\n\
    \    for (index, char) in paren_array.enumerated() {\n        // Only process\
    \ (, ignore all other characters\n        if char == \"(\" {\n            // Initialize\
    \ a count at 1 to track the current level of nesting\n            var count =\
    \ 1\n            // Keep looping until the closing parenthesis for this group\
    \ is found\n            for i in index+1..<paren_array.count {\n             \
    \   // If a nested opening parenthesis is found, increment the count of nesting\
    \ level\n                if paren_array[i] == \"(\" {\n                    count\
    \ += 1\n                }\n                // If a closing parenthesis is found,\
    \ decrement the count of nesting level\n                if paren_array[i] == \"\
    )\" {\n                    count -= 1\n                }\n                // If\
    \ the count reaches 0 after decrementing, then we reached the end of the current\
    \ group.\n                // Append the value of count to the result array, then\
    \ break out of the loop.\n                if count == 0 {\n                  \
    \  nesting_array.append(index)\n                    break\n                }\n\
    \            }\n        }\n    }\n    return nesting_array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmphhuxyqhc/tmphhuxyqhc.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b528401cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5283d13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5283d13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5283d127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhuxyqhc                        0x000055afbdbceaee <unavailable> + 6894

    5    libc.so.6                          0x00002b5284208460 __libc_start_main +
    245

    6    tmphhuxyqhc                        0x000055afbdbce709 <unavailable> + 5897

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result: [Int] = []\n    for group in groups {\n        var curr_max_level\
    \ = 0\n        var curr_level = 0\n        for char in group {\n            if\
    \ char == \"(\" {\n                curr_level += 1\n                if curr_level\
    \ > curr_max_level {\n                    curr_max_level = curr_level\n      \
    \          }\n            } else if char == \")\" {\n                curr_level\
    \ -= 1\n            }\n        }\n        result.append(curr_max_level)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_strs = paren_string.split(separator: \" \"\
    )\n    var max_nesting = [Int]()\n    for paren_str in paren_strs {\n        var\
    \ max_level = 0\n        var current_level = 0\n        for char in paren_str\
    \ {\n            if char == \"(\" {\n                current_level += 1\n    \
    \        } else if char == \")\" {\n                current_level -= 1\n     \
    \       }\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        }\n        max_nesting.append(max_level)\n\
    \    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { return $0.characters.reduce(0) { count, c in\n        if c == \"(\" {\n  \
    \          return count + 1\n        } else if c == \")\" {\n            return\
    \ count - 1\n        } else {\n            return count\n        }\n    } }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpngfcvnz6.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map { return\
    \ $0.characters.reduce(0) { count, c in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_strings = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_array: [Int] = []\n    for paren_string in paren_strings\
    \ {\n        var paren_count = 0\n        var current_max = 0\n        for char\
    \ in paren_string {\n            if char == \"(\" {\n                paren_count\
    \ += 1\n            } else if char == \")\" {\n                paren_count -=\
    \ 1\n            }\n            if paren_count > current_max {\n             \
    \   current_max = paren_count\n            }\n        }\n        paren_array.append(current_max)\n\
    \    }\n    return paren_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp634qaihw.swift:8:38: error: value of type 'String' has no member\
    \ 'components'\n    let paren_strings = paren_string.components(separatedBy: \"\
    \ \")\n                        ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // matches the string in paren_string that has one or\
    \ more nested parentheses\n    let pattern = \"\\\\(\\\\(+.*?\\\\)\\\\)\"\n  \
    \  let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let\
    \ range = NSRange(paren_string.startIndex..., in: paren_string)\n    let matches\
    \ = regex.matches(in: paren_string, options: [], range: range)\n    var paren_groups\
    \ = [Int]()\n    for match in matches {\n        let paren_group = paren_string[Range(match.range,\
    \ in: paren_string)!]\n        paren_groups.append(paren_group.filter { $0 ==\
    \ \"(\" }.count)\n    }\n    return paren_groups\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppx5cn14v.swift:10:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppx5cn14v.swift:11:17:\
    \ error: cannot find 'NSRange' in scope\n    let range = NSRange(paren_string.startIndex...,\
    \ in: paren_string)\n                ^~~~~~~\n/tmp/tmppx5cn14v.swift:15:45: error:\
    \ initializer expects a single parameter of type '(lower: Bound, upper: Bound)'\
    \ [with Bound = String.Index]\n        let paren_group = paren_string[Range(match.range,\
    \ in: paren_string)!]\n                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                                             (                            )\n\
    /tmp/tmppx5cn14v.swift:15:52: error: cannot convert value of type '(_, in: String)'\
    \ to expected argument type '(lower: String.Index, upper: String.Index)'\n   \
    \     let paren_group = paren_string[Range(match.range, in: paren_string)!]\n\
    \                                                   ^\n/tmp/tmppx5cn14v.swift:15:76:\
    \ error: cannot force unwrap value of non-optional type 'Range<_>'\n        let\
    \ paren_group = paren_string[Range(match.range, in: paren_string)!]\n        \
    \                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                                     \n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    return paren_groups.map(max_nested_parens)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq3lixrf5.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpq3lixrf5.swift:9:29:\
    \ error: cannot find 'max_nested_parens' in scope\n    return paren_groups.map(max_nested_parens)\n\
    \                            ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        var stack\
    \ = [Character]()\n        var max_depth = 0\n        var depth = 0\n        for\
    \ char in group {\n            if char == \"(\" {\n                stack.append(char)\n\
    \                depth += 1\n                if depth > max_depth {\n        \
    \            max_depth = depth\n                }\n            } else if char\
    \ == \")\" {\n                stack.popLast()\n                depth -= 1\n  \
    \          }\n        }\n        result.append(max_depth)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy22aosps.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  var indexes: [Int] = []\n  var paren_counter: Int = 0\n\
    \  var paren_depth: Int = 0\n  for c in paren_string {\n    if c == \"(\" {\n\
    \      paren_counter += 1\n      if paren_counter > paren_depth {\n        paren_depth\
    \ = paren_counter\n      }\n    } else if c == \")\" {\n      paren_counter -=\
    \ 1\n    } else if c == \" \" {\n      indexes.append(paren_depth)\n      paren_depth\
    \ = 0\n      paren_counter = 0\n    }\n  }\n  indexes.append(paren_depth)\n  return\
    \ indexes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var paren_depth = [Int]()\n    for group in groups {\n        let chars\
    \ = Array(group)\n        var stack = [Int]()\n        var max_depth = 0\n   \
    \     for c in chars {\n            if c == \"(\" {\n                stack.append(1)\n\
    \                max_depth = max(max_depth, stack.count)\n            } else if\
    \ c == \")\" {\n                stack.removeLast()\n            }\n        }\n\
    \        paren_depth.append(max_depth)\n    }\n    return paren_depth\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbmaq8qhq.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack: [Int] = []\n    var output: [Int] = []\n\
    \    var level = 0\n    var i = 0\n    var j = 0\n    while i < paren_string.count\
    \ {\n        if paren_string[i] == \"(\" {\n            level += 1\n         \
    \   stack.append(level)\n        } else if paren_string[i] == \")\" {\n      \
    \      stack.popLast()\n        } else if paren_string[i] == \" \" {\n       \
    \     output.append(stack.max() ?? 0)\n            stack = []\n            level\
    \ = 0\n        }\n        i += 1\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpynf0ztpf.swift:14:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if paren_string[i]\
    \ == \"(\" {\n           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpynf0ztpf.swift:17:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if paren_string[i] == \")\" {\n                  ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpynf0ztpf.swift:18:19:\
    \ warning: result of call to 'popLast()' is unused\n            stack.popLast()\n\
    \                  ^      ~~\n/tmp/tmpynf0ztpf.swift:19:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if paren_string[i] == \" \" {\n                  ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpynf0ztpf.swift:12:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // your code here\n    var result: [Int] = []\n    let\
    \ groups = paren_string.components(separatedBy: \" \")\n    for group in groups\
    \ {\n        var stack: [Character] = []\n        var inner_count = 0\n      \
    \  var max_count = 0\n        for char in group {\n            if char == \"(\"\
    \ {\n                stack.append(char)\n                inner_count += 1\n  \
    \              if inner_count > max_count {\n                    max_count = inner_count\n\
    \                }\n            } else if char == \")\" {\n                if\
    \ stack.count > 0 {\n                    stack.removeLast()\n                \
    \    inner_count -= 1\n                }\n            }\n        }\n        result.append(max_count)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpva8cdj28.swift:10:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var output: [Int] = []\n    let input = paren_string.split(separator:\
    \ \" \")\n    for paren in input {\n        var count = 0\n        var max_count\
    \ = 0\n        for char in paren {\n            if char == \"(\" {\n         \
    \       count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        output.append(max_count)\n    }\n\
    \    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_levels: [Int] = []\n    let paren_groups =\
    \ paren_string.components(separatedBy: \" \")\n    for group in paren_groups {\n\
    \        var group_max = 0\n        var group_curr = 0\n        for ch in group\
    \ {\n            if ch == \"(\" {\n                group_curr += 1\n         \
    \   } else if ch == \")\" {\n                group_curr -= 1\n            }\n\
    \            if group_curr > group_max {\n                group_max = group_curr\n\
    \            }\n        }\n        paren_levels.append(group_max)\n    }\n   \
    \ return paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4e5b7r2p.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_depth = [Int]()\n    for paren_group in paren_groups {\n\
    \        var current_depth = 0\n        var max_current_depth = 0\n        for\
    \ c in paren_group {\n            if c == \"(\" {\n                current_depth\
    \ += 1\n            } else if c == \")\" {\n                current_depth -= 1\n\
    \            }\n            if current_depth > max_current_depth {\n         \
    \       max_current_depth = current_depth\n            }\n        }\n        max_depth.append(max_current_depth)\n\
    \    }\n    return max_depth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkiq5fhvb.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // TODO: Implement\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpqttbw11o/tmpqttbw11o.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad505660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad505357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad505357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5053567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqttbw11o                        0x000056396450343e <unavailable> + 5182

    5    libc.so.6                          0x00002ad50584c460 __libc_start_main +
    245

    6    tmpqttbw11o                        0x0000563964503059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var max_level = 0\n    var count\
    \ = [Int]()\n    for ch in paren_string {\n        if ch == \"(\" {\n        \
    \    level += 1\n            max_level = max(max_level, level)\n        } else\
    \ if ch == \")\" {\n            level -= 1\n        } else if ch == \" \" {\n\
    \            count.append(max_level)\n            max_level = 0\n            level\
    \ = 0\n        }\n    }\n    count.append(max_level)\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        if let deepest_nesting\
    \ = deepest_nesting_parens(paren_string: group) {\n            result.append(deepest_nesting)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5xnvhfef.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5xnvhfef.swift:11:34: error:\
    \ cannot find 'deepest_nesting_parens' in scope\n        if let deepest_nesting\
    \ = deepest_nesting_parens(paren_string: group) {\n                          \
    \       ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nested_parens = [Int]()\n    for group in paren_string.split(separator:\
    \ \" \") {\n        max_nested_parens.append(find_max_nested_parens(group))\n\
    \    }\n    return max_nested_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpysonab64.swift:10:34: error: cannot find 'find_max_nested_parens'\
    \ in scope\n        max_nested_parens.append(find_max_nested_parens(group))\n\
    \                                 ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map({\
    \ (parens) -> Int in\n        var count = 0\n        var max = 0\n        for\
    \ char in parens {\n            if char == \"(\" {\n                count += 1\n\
    \            } else if char == \")\" {\n                count -= 1\n         \
    \   }\n            if count > max {\n                max = count\n           \
    \ }\n        }\n        return max\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9ohd6f_x.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map({ (parens)\
    \ -> Int in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // This function should return a list with all values\
    \ for the maximal depth in each group, in the same order.\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpzcqnrgsd/tmpzcqnrgsd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0c03ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0c00f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0c00f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0c00f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcqnrgsd                        0x000055558f7db43e <unavailable> + 5182

    5    libc.so.6                          0x00002ae0c05eb460 __libc_start_main +
    245

    6    tmpzcqnrgsd                        0x000055558f7db059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_helper(paren_string:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjow793eg.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result = [Int]()\n    for group in groups {\n        var count = 0\n\
    \        var max_count = 0\n        for character in group {\n            if character\
    \ == \"(\" {\n                count += 1\n            } else if character == \"\
    )\" {\n                count -= 1\n            }\n            if count > max_count\
    \ {\n                max_count = count\n            }\n        }\n        result.append(max_count)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwl665anj.swift:8:5: error: non-void function should return a value\n\
    \    return\n    ^\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  var stack = Stack<Int>()\n  var num_parens = 0\n  var\
    \ paren_group = [Int]()\n  paren_string.forEach {\n    switch $0 {\n    case \"\
    (\":\n      num_parens += 1\n    case \")\":\n      num_parens -= 1\n    case\
    \ \" \":\n      paren_group.append(num_parens)\n      num_parens = 0\n    default:\n\
    \      break\n    }\n  }\n  return paren_group\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8wxupg47.swift:8:15: error: cannot find 'Stack' in scope\n  var\
    \ stack = Stack<Int>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var results = [Int]()\n    let separated = paren_string.components(separatedBy:\
    \ \" \")\n    for str in separated {\n        var depth = 0\n        var maxDepth\
    \ = 0\n        for c in str {\n            if c == \"(\" {\n                depth\
    \ += 1\n            } else if c == \")\" {\n                depth -= 1\n     \
    \       }\n            if depth > maxDepth {\n                maxDepth = depth\n\
    \            }\n        }\n        results.append(maxDepth)\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeb6tyvd0.swift:9:34: error: value of type 'String' has no member\
    \ 'components'\n    let separated = paren_string.components(separatedBy: \" \"\
    )\n                    ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = 0\n    var depth = 0\n    var depth_buffer\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            depth_buffer.append(max_depth)\n            max_depth = 0\n\
    \            depth = 0\n        }\n    }\n    return depth_buffer\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp7hvirq5i/tmp7hvirq5i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b940a279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9409f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9409f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9409f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hvirq5i                        0x00005555743af71e <unavailable> + 5918

    5    libc.so.6                          0x00002b940a465460 __libc_start_main +
    245

    6    tmp7hvirq5i                        0x00005555743af339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var deepest_nesting = [Int]()\n    for paren_group in paren_groups\
    \ {\n        deepest_nesting.append(deepest_paren_level(paren_group: paren_group))\n\
    \    }\n    return deepest_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpetm6uex6.swift:11:32: error: cannot find 'deepest_paren_level'\
    \ in scope\n        deepest_nesting.append(deepest_paren_level(paren_group: paren_group))\n\
    \                               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    return groups.map { parse_single_group(paren_string: $0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4hnc4ft0.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4hnc4ft0.swift:9:25: error:\
    \ cannot find 'parse_single_group' in scope\n    return groups.map { parse_single_group(paren_string:\
    \ $0) }\n                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var levels = [Int]()\n    for group in paren_groups {\n        var\
    \ level_count = 0\n        var highest_count = 0\n        for paren in group {\n\
    \            if paren == \"(\" {\n                level_count += 1\n         \
    \   } else if paren == \")\" {\n                level_count -= 1\n           \
    \ }\n            if level_count > highest_count {\n                highest_count\
    \ = level_count\n            }\n        }\n        levels.append(highest_count)\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var results = [Int]()\n    let strings = paren_string.split(separator:\
    \ \" \")\n    for string in strings {\n        let result = parse_nested_parens(string:\
    \ String(string))\n        results.append(result)\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpioimt0n2.swift:11:41: error: incorrect argument label in call (have\
    \ 'string:', expected 'paren_string:')\n        let result = parse_nested_parens(string:\
    \ String(string))\n                                        ^~~~~~~\n         \
    \                                paren_string\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack = Stack<Int>()\n    stack.push(0)\n\n    var\
    \ max_depth = 0\n    for c in paren_string {\n        if c == \"(\" {\n      \
    \      stack.push(stack.peek()! + 1)\n            max_depth = max(max_depth, stack.peek()!)\n\
    \        } else if c == \")\" {\n            stack.pop()\n        }\n    }\n\n\
    \    return stack.stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp20wxmqok.swift:8:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Int>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    var res: [Int] = []\n    var paren_stack: [Character]\
    \ = []\n    var counter: Int = 0\n    for paren in paren_string {\n        if\
    \ paren == \"(\" {\n            paren_stack.append(paren)\n            counter\
    \ += 1\n        } else if paren == \")\" {\n            if paren_stack.last ==\
    \ \"(\" {\n                paren_stack.removeLast()\n                counter -=\
    \ 1\n            } else {\n                res.append(counter)\n             \
    \   counter = 0\n            }\n        }\n    }\n    if counter > 0 {\n     \
    \   res.append(counter)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpohv1baf5/tmpohv1baf5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab22fc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab22f98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab22f98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab22f98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohv1baf5                        0x000055e40ca5c80e <unavailable> + 6158

    5    libc.so.6                          0x00002ab22fe82460 __libc_start_main +
    245

    6    tmpohv1baf5                        0x000055e40ca5c429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        max_nesting.append(parse_group(group:\
    \ group))\n    }\n    return max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxax458qn.swift:11:28: error: cannot find 'parse_group' in scope\n\
    \        max_nesting.append(parse_group(group: group))\n                     \
    \      ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var group_levels = [Int]()\n    var group_level = 0\n\
    \    var group_parens = 0\n    var in_parens = false\n    for c in paren_string\
    \ {\n        if c == \"(\" {\n            group_parens += 1\n            in_parens\
    \ = true\n        } else if c == \")\" {\n            group_parens -= 1\n    \
    \        in_parens = false\n        } else if c == \" \" && !in_parens {\n   \
    \         group_levels.append(group_level)\n            group_level = 0\n    \
    \    } else if c == \" \" && in_parens {\n            if group_parens > group_level\
    \ {\n                group_level = group_parens\n            }\n        }\n  \
    \  }\n    if in_parens {\n        group_levels.append(group_level)\n    }\n  \
    \  return group_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpwwkafftq/tmpwwkafftq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6e7d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6e7a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6e7a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6e7a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwkafftq                        0x0000564b38b0568e <unavailable> + 5774

    5    libc.so.6                          0x00002ae6e7f7c460 __libc_start_main +
    245

    6    tmpwwkafftq                        0x0000564b38b052a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_levels = [Int]()\n    var group_level = 0\n\
    \    var current_max = 0\n    var char_iter = paren_string.makeIterator()\n  \
    \  while let char = char_iter.next() {\n        switch char {\n        case \"\
    (\":\n            group_level += 1\n            if group_level > current_max {\n\
    \                current_max = group_level\n            }\n        case \")\"\
    :\n            group_level -= 1\n        case \" \":\n            max_levels.append(current_max)\n\
    \            current_max = 0\n            group_level = 0\n        default:\n\
    \            print(\"Unexpected char in paren string.\")\n        }\n    }\n \
    \   return max_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpyns2iz_r/tmpyns2iz_r.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad710499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad710190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad710190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad71018f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyns2iz_r                        0x000055a8125937ee <unavailable> + 6126

    5    libc.so.6                          0x00002ad710685460 __libc_start_main +
    245

    6    tmpyns2iz_r                        0x000055a812593409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var current_level = 0\n    var max_level = 0\n    var\
    \ levels: [Int] = []\n    var depth_counter = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            depth_counter += 1\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == \")\" {\n        \
    \    depth_counter -= 1\n            current_level -= 1\n        } else if char\
    \ == \" \" {\n            // add current max_level and reset\n            levels.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    levels.append(max_level)\n    assert(depth_counter == 0, \"Mismatched depth_counter\"\
    )\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    return groups.map { group in\n        let group_copy = group\n        var\
    \ maximum_depth = 0\n        var counter = 0\n        for paren in group_copy\
    \ {\n            if paren == \"(\" {\n                counter += 1\n         \
    \   } else if paren == \")\" {\n                counter -= 1\n            }\n\
    \            maximum_depth = max(maximum_depth, counter)\n        }\n        return\
    \ maximum_depth\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n  var result = [Int]()\n  for group in paren_groups {\n    result.append(find_max_nesting(paren_group:\
    \ group))\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3n7236pw.swift:8:35: error: value of type 'String' has no member\
    \ 'components'\n  let paren_groups = paren_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.split(separator: \" \").map {\n\
    \        val in\n        parse_nested_parens(string: String(val))\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdu6ulpxv.swift:10:28: error: incorrect argument label in call (have\
    \ 'string:', expected 'paren_string:')\n        parse_nested_parens(string: String(val))\n\
    \                           ^~~~~~~\n                            paren_string\n\
    /tmp/tmpdu6ulpxv.swift:10:9: error: cannot convert value of type '[Int]' to closure\
    \ result type 'Int'\n        parse_nested_parens(string: String(val))\n      \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var nested_parens = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var level = 0\n        var max =\
    \ 0\n        for char in group {\n            if char == \"(\" {\n           \
    \     level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max {\n                max = level\n\
    \            }\n        }\n        nested_parens.append(max)\n    }\n    return\
    \ nested_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdyz9wuz4.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { $0.count_nested_parens() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoiayx7m4.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map { $0.count_nested_parens()\
    \ }\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var curr_max = 0\n    var curr_count = 0\n    var result\
    \ = [Int]()\n    for c in paren_string {\n        if c == \"(\" {\n          \
    \  curr_count += 1\n            curr_max = max(curr_max, curr_count)\n       \
    \ } else if c == \")\" {\n            curr_count -= 1\n        } else if c ==\
    \ \" \" {\n            result.append(curr_max)\n            curr_max = 0\n   \
    \         curr_count = 0\n        }\n    }\n    result.append(curr_max)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  var max_level = 0\n  var current_level = 0\n  var max_level_list\
    \ = [Int]()\n  let paren_array = paren_string.map { String($0) }\n  for paren\
    \ in paren_array {\n    if paren == \"(\" {\n      current_level += 1\n      if\
    \ current_level > max_level {\n        max_level = current_level\n      }\n  \
    \  } else if paren == \")\" {\n      if current_level > 0 {\n        current_level\
    \ -= 1\n      }\n    } else if paren == \" \" {\n      max_level_list.append(max_level)\n\
    \      max_level = 0\n      current_level = 0\n    }\n  }\n  max_level_list.append(max_level)\n\
    \  return max_level_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_string = paren_string\n    var result: [Int]\
    \ = []\n    while !paren_string.isEmpty {\n        var parent_count = 0\n    \
    \    var temp = 0\n        var current_string = \"\"\n        for c in paren_string\
    \ {\n            current_string.append(c)\n            if c == \"(\" {\n     \
    \           temp += 1\n            } else if c == \")\" {\n                temp\
    \ -= 1\n            }\n            if temp > parent_count {\n                parent_count\
    \ = temp\n            }\n            if temp == 0 {\n                break\n \
    \           }\n        }\n        paren_string.removeFirst(current_string.count)\n\
    \        result.append(parent_count)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpc2hd4yz0/tmpc2hd4yz0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac257badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2578a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2578a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2578a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2hd4yz0                        0x000055d8478e67fe <unavailable> + 6142

    5    libc.so.6                          0x00002ac257d99460 __libc_start_main +
    245

    6    tmpc2hd4yz0                        0x000055d8478e6419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels: [Int] = []\n    let paren_groups = paren_string.split(separator:\
    \ \" \")\n    for paren_group in paren_groups {\n        var nested_level = 0\n\
    \        var nesting_level = 0\n        for char in paren_group {\n          \
    \  if char == \"(\" {\n                nesting_level += 1\n            } else\
    \ if char == \")\" {\n                nesting_level -= 1\n            }\n    \
    \        if nesting_level > nested_level {\n                nested_level = nesting_level\n\
    \            }\n        }\n        levels.append(nested_level)\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var output = [Int]()\n    for parens in groups {\n        var parentheses\
    \ = \"\"\n        for paren in parens {\n            parentheses.append(paren)\n\
    \            if paren == \")\" {\n                let num_of_parens = ParenCounter().number_of_parens(string:\
    \ parentheses)\n                output.append(num_of_parens)\n               \
    \ parentheses = \"\"\n            }\n        }\n    }\n    return output\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvdpp9mgs.swift:15:37: error: cannot find 'ParenCounter' in scope\n\
    \                let num_of_parens = ParenCounter().number_of_parens(string: parentheses)\n\
    \                                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var indices: [Int] = []\n    for group in paren_string.split(separator:\
    \ \" \") {\n        var level = 0\n        var max_level = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                level += 1\n   \
    \         } else if char == \")\" {\n                level -= 1\n            }\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n        }\n        indices.append(max_level)\n    }\n    return indices\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  let paren_groups = paren_string.split(separator: \" \"\
    )\n  var result: [Int] = []\n  for group in paren_groups {\n    var open_parens\
    \ = 0\n    var max_open_parens = 0\n    for c in group {\n      if c == \"(\"\
    \ {\n        open_parens += 1\n        if open_parens > max_open_parens {\n  \
    \        max_open_parens = open_parens\n        }\n      } else if c == \")\"\
    \ {\n        open_parens -= 1\n      }\n    }\n    result.append(max_open_parens)\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    var list_of_depths = [Int]()\n    let list_of_paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    \n    for group in list_of_paren_groups\
    \ {\n        var stack = [Character]()\n        var max_depth = 0\n        var\
    \ curr_depth = 0\n        \n        for char in group {\n            if char ==\
    \ \"(\" {\n                stack.append(char)\n                curr_depth += 1\n\
    \            } else if char == \")\" {\n                if !stack.isEmpty {\n\
    \                    stack.removeLast()\n                    curr_depth -= 1\n\
    \                }\n            }\n            \n            if curr_depth > max_depth\
    \ {\n                max_depth = curr_depth\n            }\n        }\n      \
    \  \n        list_of_depths.append(max_depth)\n    }\n    \n    return list_of_depths\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa9u1ehxw.swift:10:45: error: value of type 'String' has no member\
    \ 'components'\n    let list_of_paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n                               ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var parent_levels = [Int]()\n    var paren_stack = Stack<String>()\n\
    \    let tokens = paren_string.components(separatedBy: \" \")\n    var paren_level\
    \ = 0\n    for token in tokens {\n        for char in token {\n            if\
    \ char == \"(\" {\n                paren_stack.push(element: String(char))\n \
    \               paren_level += 1\n            } else if char == \")\" {\n    \
    \            if paren_stack.peek() == \"(\" {\n                    paren_stack.pop()\n\
    \                    parent_levels.append(paren_level)\n                    paren_level\
    \ = 0\n                }\n            }\n        }\n    }\n    return parent_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9nfx6p7l.swift:9:23: error: cannot find 'Stack' in scope\n    var\
    \ paren_stack = Stack<String>()\n                      ^~~~~\n/tmp/tmp9nfx6p7l.swift:10:31:\
    \ error: value of type 'String' has no member 'components'\n    let tokens = paren_string.components(separatedBy:\
    \ \" \")\n                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var open_paren_count = 0\n      \
    \  var max_open_paren_count = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                open_paren_count += 1\n                if open_paren_count\
    \ > max_open_paren_count {\n                    max_open_paren_count = open_paren_count\n\
    \                }\n            } else if char == \")\" {\n                open_paren_count\
    \ -= 1\n            }\n        }\n        result.append(max_open_paren_count)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.split(separator: \" \").map(|s|\
    \ parse_nested_parens_group(paren_string: s))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq90uojup.swift:8:55: error: expected ',' separator\n    return\
    \ paren_string.split(separator: \" \").map(|s| parse_nested_parens_group(paren_string:\
    \ s))\n                                                      ^\n             \
    \                                        ,\n/tmp/tmpq90uojup.swift:8:51: error:\
    \ '|' is not a prefix unary operator\n    return paren_string.split(separator:\
    \ \" \").map(|s| parse_nested_parens_group(paren_string: s))\n               \
    \                                   ^\n/tmp/tmpq90uojup.swift:8:53: error: '|'\
    \ is not a postfix unary operator\n    return paren_string.split(separator: \"\
    \ \").map(|s| parse_nested_parens_group(paren_string: s))\n                  \
    \                                  ^\n/tmp/tmpq90uojup.swift:8:52: error: cannot\
    \ find 's' in scope\n    return paren_string.split(separator: \" \").map(|s| parse_nested_parens_group(paren_string:\
    \ s))\n                                                   ^\n/tmp/tmpq90uojup.swift:8:55:\
    \ error: cannot find 'parse_nested_parens_group' in scope\n    return paren_string.split(separator:\
    \ \" \").map(|s| parse_nested_parens_group(paren_string: s))\n               \
    \                                       ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq90uojup.swift:8:95:\
    \ error: cannot find 's' in scope\n    return paren_string.split(separator: \"\
    \ \").map(|s| parse_nested_parens_group(paren_string: s))\n                  \
    \                                                                            ^\n\
    /tmp/tmpq90uojup.swift:8:55: error: extra argument in call\n    return paren_string.split(separator:\
    \ \" \").map(|s| parse_nested_parens_group(paren_string: s))\n               \
    \                                  ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var level = 0\n    var result = [Int]()\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            level += 1\n    \
    \    } else if char == \")\" {\n            result.append(level)\n           \
    \ level -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmp7uv1am9i/tmp7uv1am9i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3300b8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3300884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3300884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33008837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uv1am9i                        0x0000564f37f4768e <unavailable> + 5774

    5    libc.so.6                          0x00002b3300d79460 __libc_start_main +
    245

    6    tmp7uv1am9i                        0x0000564f37f472a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max = 0\n        var curr = 0\n\
    \        for c in group {\n            if c == \"(\" {\n                curr +=\
    \ 1\n            } else if c == \")\" {\n                curr -= 1\n         \
    \   }\n            if curr > max {\n                max = curr\n            }\n\
    \        }\n        result.append(max)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp94ndm7zu.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var paren_depth = [Int]()\n    for paren_group in paren_groups {\n\
    \        paren_depth.append(depth_of_nested_parens(paren_group: paren_group))\n\
    \    }\n    return paren_depth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqv4klqui.swift:11:28: error: cannot find 'depth_of_nested_parens'\
    \ in scope\n        paren_depth.append(depth_of_nested_parens(paren_group: paren_group))\n\
    \                           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var curr_depth = 0\n    var max_depths = [Int]()\n    for char in paren_string\
    \ {\n        switch char {\n        case \"(\":\n            curr_depth += 1\n\
    \            paren_stack.push(char)\n        case \")\":\n            paren_stack.pop()\n\
    \            if curr_depth > max_depth {\n                max_depth = curr_depth\n\
    \            }\n            curr_depth -= 1\n        case \" \":\n           \
    \ if paren_stack.isEmpty() {\n                max_depths.append(max_depth)\n \
    \               max_depth = 0\n                curr_depth = 0\n            }\n\
    \        default:\n            break\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuhk59w3x.swift:8:23: error: cannot find 'Stack' in scope\n    var\
    \ paren_stack = Stack<Character>()\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var i =\
    \ 0\n    while i < paren_string.count {\n        let index = paren_string.index(paren_string.startIndex,\
    \ offsetBy: i)\n        if paren_string[index] == \"(\" {\n            level +=\
    \ 1\n        } else if paren_string[index] == \")\" {\n            level -= 1\n\
    \        } else if paren_string[index] == \" \" {\n            levels.append(level)\n\
    \            level = 0\n        }\n        i += 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmps2m3t_gl/tmps2m3t_gl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2704f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2701eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2701ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2701e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2m3t_gl                        0x0000559e02c5f73e <unavailable> + 5950

    5    libc.so.6                          0x00002ac2706df460 __libc_start_main +
    245

    6    tmps2m3t_gl                        0x0000559e02c5f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // collect nested parentheses into a list\n    let open_paren:\
    \ Character = \"(\"\n    let close_paren: Character = \")\"\n    var current_level\
    \ = 0\n    var max_level = 0\n    var nested_parens: [Int] = []\n    for char\
    \ in paren_string {\n        if char == open_paren {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == close_paren {\n  \
    \          nested_parens.append(max_level)\n            current_level -= 1\n \
    \       }\n    }\n    return nested_parens\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmp8xvrr43k/tmp8xvrr43k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72de2f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72ddfecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72ddfec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72ddfeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xvrr43k                        0x0000559483a6463e <unavailable> + 5694

    5    libc.so.6                          0x00002b72de4e1460 __libc_start_main +
    245

    6    tmp8xvrr43k                        0x0000559483a64259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    return groups.map {\n        // The nested parentheses can only be\
    \ in the format of \"(()...())\" or \"(())...((()))\"\n        // Find the level\
    \ of nesting with the smallest number of closing parentheses.\n        let (_,\
    \ min_close_paren) = $0.reduce((0, Int.max)) { (curr_max, ch) in\n           \
    \ if ch == \"(\" {\n                return (curr_max.0 + 1, curr_max.1)\n    \
    \        } else {\n                return (curr_max.0 - 1, min(curr_max.1, curr_max.0\
    \ - 1))\n            }\n        }\n        return min_close_paren\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6f5er55e.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp6f5er55e.swift:9:19: error:\
    \ type of expression is ambiguous without more context\n    return groups.map\
    \ {\n           ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var acc = [Int]()\n    for group in paren_string.split(separator:\
    \ \" \") {\n        acc.append(parse_nested_parens_inner(group: group))\n    }\n\
    \    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzihqnc9v.swift:10:20: error: cannot find 'parse_nested_parens_inner'\
    \ in scope\n        acc.append(parse_nested_parens_inner(group: group))\n    \
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  let nested_parens = paren_string.components(separatedBy:\
    \ \" \")\n  var results = [Int]()\n  for parens in nested_parens {\n    results.append(parse_nested_parens_helper(parens:\
    \ parens))\n  }\n  return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa9kcdjqv.swift:8:36: error: value of type 'String' has no member\
    \ 'components'\n  let nested_parens = paren_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var n_levels: [Int] = []\n    for group in groups {\n        n_levels.append(parse_paren_group(paren_string:\
    \ group))\n    }\n    return n_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkwgablff.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n  var paren_counts = [Int]()\n  for paren_group in paren_groups {\n\
    \    if paren_group.isEmpty {\n      paren_counts.append(0)\n      continue\n\
    \    }\n    var count = 0\n    var max_count = 0\n    for char in paren_group\
    \ {\n      if char == \"(\" {\n        count += 1\n      } else if char == \"\
    )\" {\n        count -= 1\n      }\n      if count > max_count {\n        max_count\
    \ = count\n      }\n    }\n    paren_counts.append(max_count)\n  }\n  return paren_counts\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfar_hd42.swift:8:35: error: value of type 'String' has no member\
    \ 'components'\n  let paren_groups = paren_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_depths = [Int]()\n    for group in paren_groups {\n    \
    \    var group_counter = 0\n        var group_max = 0\n        for paren in group\
    \ {\n            if paren == \"(\" {\n                group_counter += 1\n   \
    \         } else if paren == \")\" {\n                group_counter -= 1\n   \
    \         }\n            if group_counter > group_max {\n                group_max\
    \ = group_counter\n            }\n        }\n        max_depths.append(group_max)\n\
    \    }\n    return max_depths\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpedwzc2xq.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        levels.append(parse_nested_parens_single(paren_string:\
    \ paren_group))\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbk_t932y.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.split(separator:\
    \ \" \")\n    for group in groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for c in group {\n            if c == \"(\" {\n               \
    \ current_depth += 1\n            } else if c == \")\" {\n                if current_depth\
    \ > max_depth {\n                    max_depth = current_depth\n             \
    \   }\n                current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var array = [Int]()\n    var stack = [Character]()\n\
    \    var depth = 0\n    var paren_string = paren_string\n    while !paren_string.isEmpty\
    \ {\n        var char = paren_string.removeFirst()\n        if char == \"(\" {\n\
    \            stack.append(char)\n            depth += 1\n        } else if char\
    \ == \")\" {\n            stack.removeLast()\n            if stack.isEmpty {\n\
    \                array.append(depth)\n                depth = 0\n            }\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpvm1ivuda/tmpvm1ivuda.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9adf254c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9adef4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9adef4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9adef4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm1ivuda                        0x000055e6d7c5392e <unavailable> + 6446

    5    libc.so.6                          0x00002b9adf440460 __libc_start_main +
    245

    6    tmpvm1ivuda                        0x000055e6d7c53549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for group in groups {\n        let (_, result_value)\
    \ = parse_group(paren_string: group)\n        result.append(result_value)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpruzvoc1p.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpruzvoc1p.swift:11:33: error:\
    \ cannot find 'parse_group' in scope\n        let (_, result_value) = parse_group(paren_string:\
    \ group)\n                                ^~~~~~~~~~~\n/tmp/tmpruzvoc1p.swift:11:33:\
    \ error: type of expression is ambiguous without more context\n        let (_,\
    \ result_value) = parse_group(paren_string: group)\n                         \
    \       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var levels = [Int]()\n    var max = 0\n    var level\
    \ = 0\n    for character in paren_string {\n        if character == \"(\" {\n\
    \            level += 1\n            if level > max {\n                max = level\n\
    \            }\n        } else if character == \")\" {\n            level -= 1\n\
    \        } else if character == \" \" {\n            levels.append(max)\n    \
    \        max = 0\n            level = 0\n        }\n    }\n    levels.append(max)\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    return paren_groups.map { (group) -> Int in\n        var level =\
    \ 0\n        var max_level = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                level += 1\n            } else if char == \")\"\
    \ {\n                level -= 1\n            }\n            max_level = max(max_level,\
    \ level)\n        }\n        return max_level\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzm86nyly.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // TODO:\n    var max_level = 0\n    var level = 0\n\
    \    var result = [Int]()\n    var prev = \"\"\n    for paren in paren_string\
    \ {\n        if paren == \"(\" {\n            level += 1\n            if level\
    \ > max_level {\n                max_level = level\n            }\n        } else\
    \ if paren == \")\" {\n            level -= 1\n        } else if paren == \" \"\
    \ {\n            if prev == \")\" {\n                result.append(max_level)\n\
    \                max_level = 0\n                level = 0\n            }\n   \
    \     }\n        prev = String(paren)\n    }\n    if level == 0 {\n        result.append(max_level)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let components = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_counts = [Int]()\n    for paren in components {\n    \
    \    paren_counts.append(count_nested_parens(paren: paren))\n    }\n    return\
    \ paren_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsxyg9900.swift:8:35: error: value of type 'String' has no member\
    \ 'components'\n    let components = paren_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var output = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var parens = [String]()\n       \
    \ var chars = [Character](group)\n        for i in 0..<chars.count {\n       \
    \     if chars[i] == \"(\" {\n                parens.append(\"(\")\n         \
    \   } else if chars[i] == \")\" {\n                parens.removeLast()\n     \
    \       }\n        }\n        output.append(parens.count)\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdr6j2afd.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // TODO: Write your code here\n    var res: [Int] =\
    \ []\n    let stringArr = paren_string.split(separator: \" \")\n    stringArr.forEach\
    \ { (paren) in\n        var count = 0\n        var max = 0\n        paren.forEach\
    \ { (char) in\n            if char == \"(\" {\n                count += 1\n  \
    \          } else {\n                count -= 1\n            }\n            max\
    \ = max > count ? max : count\n        }\n        res.append(max)\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(nested_parens(group:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpiyh8v8qk.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // TODO: Implement me!\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpa0hpc0d8/tmpa0hpc0d8.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb71ff8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb71cefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb71cef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb71cee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa0hpc0d8                        0x0000560a3513143e <unavailable> + 5182

    5    libc.so.6                          0x00002abb721e4460 __libc_start_main +
    245

    6    tmpa0hpc0d8                        0x0000560a35131059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { return level_of_nesting(paren_string: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9n1msgz0.swift:8:67: error: cannot find 'level_of_nesting' in scope\n\
    \    return paren_string.components(separatedBy: \" \").map { return level_of_nesting(paren_string:\
    \ $0) }\n                                                                  ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    return paren_groups.map { Int(parse_nested_parens_for_group(group:\
    \ String($0))) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpixajkrh8.swift:9:35: error: cannot find 'parse_nested_parens_for_group'\
    \ in scope\n    return paren_groups.map { Int(parse_nested_parens_for_group(group:\
    \ String($0))) }\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  var char_array = Array(paren_string)\n  var max_stack:\
    \ [Int] = []\n  var max_level = 0\n  var current_level = 0\n  for char in char_array\
    \ {\n    if char == \"(\" {\n      current_level += 1\n      if current_level\
    \ > max_level {\n        max_level = current_level\n      }\n    } else if char\
    \ == \")\" {\n      current_level -= 1\n      if current_level == 0 {\n      \
    \  max_stack.append(max_level)\n        max_level = 0\n      }\n    }\n  }\n \
    \ return max_stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        result.append(parse_nested_parens_for_group(group:\
    \ group))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuv0ilrhc.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var start_parens = 0\n    var depth = 0\n    var max_depths\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        start_parens += 1\n            depth += 1\n        } else if char ==\
    \ \")\" {\n            depth -= 1\n            if depth == 0 {\n             \
    \   max_depths.append(start_parens)\n                start_parens = 0\n      \
    \      }\n        } else if char == \" \" {\n            if depth != 0 {\n   \
    \             fatalError(\"ERROR: Unbalanced parentheses, or malformed input.\"\
    )\n            }\n        }\n    }\n    return max_depths\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmp0f8wi4lq/tmp0f8wi4lq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0201164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0200e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0200e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0200e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f8wi4lq                        0x00005601e659868e <unavailable> + 5774

    5    libc.so.6                          0x00002b0201350460 __libc_start_main +
    245

    6    tmp0f8wi4lq                        0x00005601e65982a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var results = [Int]()\n    for group in groups {\n        results.append(parsing(string:\
    \ group))\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0uvd1wvf.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // Split the string into groups of parentheses\n   \
    \ let groups = paren_string.components(separatedBy: \" \")\n    var result = [Int]()\n\
    \    // Count the deepest level of nesting for each group\n    for group in groups\
    \ {\n        var counter = 0\n        var max = 0\n        for character in group\
    \ {\n            if character == \"(\" {\n                counter += 1\n     \
    \       } else if character == \")\" {\n                counter -= 1\n       \
    \     }\n            max = max > counter ? max : counter\n        }\n        result.append(max)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphx68wmg1.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map({\
    \ parse_parens($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm054_4x2.swift:8:60: error: cannot find 'parse_parens' in scope\n\
    \    return paren_string.components(separatedBy: \" \").map({ parse_parens($0)\
    \ })\n                                                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return [\"\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbu03oumh.swift:8:13: error: cannot convert value of type 'String'\
    \ to expected element type 'Int'\n    return [\"\"]\n            ^\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_array = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for i in 0..<paren_array.count {\n   \
    \     var stack = Stack<Character>()\n        for j in 0..<paren_array[i].count\
    \ {\n            let char = paren_array[i][j]\n            if char == \"(\" {\n\
    \                stack.push(char)\n            } else if char == \")\" {\n   \
    \             stack.pop()\n            }\n        }\n        result.append(stack.count)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkd4wyemq.swift:8:36: error: value of type 'String' has no member\
    \ 'components'\n    var paren_array = paren_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpkd4wyemq.swift:11:21:\
    \ error: cannot find 'Stack' in scope\n        var stack = Stack<Character>()\n\
    \                    ^~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // This function parses the string to find the nested\
    \ parentheses, and return\n    // the max nesting level\n    //\n    // Input:\
    \ \"(()()) ((())) () ((())()())\",\n    // Output: [2, 3, 1, 3]\n    let parenthesis_list\
    \ = paren_string.components(separatedBy: \" \")\n    var max_nested = [Int]()\n\
    \    for str in parenthesis_list {\n        var count = 0\n        var max_count\
    \ = 0\n        for char in str {\n            if char == \"(\" {\n           \
    \     count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        max_nested.append(max_count)\n  \
    \  }\n    return max_nested\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9gzz3nua.swift:13:41: error: value of type 'String' has no member\
    \ 'components'\n    let parenthesis_list = paren_string.components(separatedBy:\
    \ \" \")\n                           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for i in 0..<paren_groups.count\
    \ {\n        var temp_nesting_level = 0\n        var max_nesting_level = 0\n \
    \       for j in 0..<paren_groups[i].count {\n            let current_char = paren_groups[i][j]\n\
    \            if current_char == \"(\" {\n                temp_nesting_level +=\
    \ 1\n            } else if current_char == \")\" {\n                temp_nesting_level\
    \ -= 1\n            }\n            if temp_nesting_level > max_nesting_level {\n\
    \                max_nesting_level = temp_nesting_level\n            }\n     \
    \   }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6a_16hiz.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { paren_string in\n        if let number = Int(paren_string) {\n           \
    \ return number\n        } else {\n            return paren_string.reduce((level:\
    \ 0, max_level: 0), { (acc, char) -> (Int, Int) in\n                if char ==\
    \ \"(\" {\n                    return (acc.level + 1, max(acc.max_level, acc.level\
    \ + 1))\n                } else {\n                    return (acc.level - 1,\
    \ acc.max_level)\n                }\n            }).max_level\n        }\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuqn8d63p.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map { paren_string\
    \ in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_list = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_level_list = [Int]()\n    for paren in paren_list {\n\
    \        paren_level_list.append(determine_nested_paren_level(paren: paren))\n\
    \    }\n    return paren_level_list\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdj0rugvx.swift:8:35: error: value of type 'String' has no member\
    \ 'components'\n    let paren_list = paren_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var output: [Int] = []\n    for paren_group in paren_groups {\n   \
    \     output.append(parse_nested_parens_single_group(paren_group: paren_group))\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprpn7x8j8.swift:11:23: error: cannot find 'parse_nested_parens_single_group'\
    \ in scope\n        output.append(parse_nested_parens_single_group(paren_group:\
    \ paren_group))\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var max_levels: [Int] = []\n    for group in groups {\n        max_levels.append(get_max_nesting_level(group:\
    \ group))\n    }\n    return max_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwthd24bu.swift:11:27: error: cannot find 'get_max_nesting_level'\
    \ in scope\n        max_levels.append(get_max_nesting_level(group: group))\n \
    \                         ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack: [Int] = []\n    var max_level: Int = 0\n\
    \    var level: Int = 0\n    var result: [Int] = []\n    for char in paren_string\
    \ {\n        switch char {\n        case \"(\":\n            level += 1\n    \
    \        max_level = max(max_level, level)\n            stack.append(max_level)\n\
    \        case \")\":\n            stack.popLast()\n            level -= 1\n  \
    \      case \" \":\n            result.append(max_level)\n            max_level\
    \ = 0\n        default:\n            break\n        }\n    }\n    result.append(max_level)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009260
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var output = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        if group.isEmpty {\n            output.append(0)\n\
    \            continue\n        }\n        var max_depth = 0\n        var curr_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       curr_depth += 1\n                if curr_depth > max_depth {\n       \
    \             max_depth = curr_depth\n                }\n            } else if\
    \ char == \")\" {\n                curr_depth -= 1\n            }\n        }\n\
    \        output.append(max_depth)\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc2tevuj8.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var nest_levels = [Int]()\n    var nest_count = 0\n\
    \    var nest_max = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            nest_count += 1\n            if nest_count > nest_max {\n   \
    \             nest_max = nest_count\n            }\n        } else if char ==\
    \ \")\" {\n            nest_count -= 1\n        } else if char == \" \" {\n  \
    \          nest_levels.append(nest_max)\n            nest_max = 0\n          \
    \  nest_count = 0\n        }\n    }\n    return nest_levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpceyedk3m/tmpceyedk3m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28f781fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28f7516b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28f7516988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28f75157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpceyedk3m                        0x0000562893aaa68e <unavailable> + 5774

    5    libc.so.6                          0x00002b28f7a0b460 __libc_start_main +
    245

    6    tmpceyedk3m                        0x0000562893aaa2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var parse_results = [Int]()\n    for group in groups {\n        parse_results.append(parse_nested_parens_group(group:\
    \ group))\n    }\n    return parse_results\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5j6bf5jp.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let split_groups = paren_string.split(separator: \"\
    \ \")\n    var ret = [Int]()\n    for (index, char) in split_groups.enumerated()\
    \ {\n        print(\"Char: \\(char)\")\n        var max_level = 0\n        var\
    \ curr_level = 0\n        for (_, paren) in char.enumerated() {\n            if\
    \ paren == \"(\" {\n                curr_level += 1\n                if curr_level\
    \ > max_level {\n                    max_level = curr_level\n                }\n\
    \            } else if paren == \")\" {\n                curr_level -= 1\n   \
    \         }\n        }\n        ret.append(max_level)\n    }\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: 'Char: (()())

    Char: ((()))

    Char: ()

    Char: ((())()())

    Char: ()

    Char: (())

    Char: ((()))

    Char: (((())))

    Char: (()(())((())))

    '
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    func get_deepest_level(group: String) -> Int {\n   \
    \     var current_level = 0\n        var max_level = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                current_level += 1\n    \
    \            if current_level > max_level {\n                    max_level = current_level\n\
    \                }\n            } else if char == \")\" {\n                current_level\
    \ -= 1\n            }\n        }\n        return max_level\n    }\n    var groups\
    \ = paren_string.split(separator: \" \")\n    var result = [Int]()\n    for group\
    \ in groups {\n        result.append(get_deepest_level(group: String(group)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var output = [Int]()\n    for paren_group in paren_string.split(separator:\
    \ \" \") {\n        // state variables\n        var isNested = false\n       \
    \ var open_paren_count = 0\n        var max_depth = 0\n        for c in paren_group\
    \ {\n            if c == \"(\" {\n                isNested = true\n          \
    \      open_paren_count += 1\n                max_depth = max(max_depth, open_paren_count)\n\
    \            } else if c == \")\" {\n                open_paren_count -= 1\n \
    \           }\n        }\n        if isNested {\n            output.append(max_depth)\n\
    \        } else {\n            output.append(0)\n        }\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_result = 0\n \
    \   var current_char_index = paren_string.startIndex\n    while current_char_index\
    \ < paren_string.endIndex {\n        let current_char = paren_string[current_char_index]\n\
    \        if current_char == \"(\" {\n            current_result += 1\n       \
    \ } else if current_char == \")\" {\n            current_result -= 1\n       \
    \ } else if current_char == \" \" {\n            result.append(current_result)\n\
    \            current_result = 0\n        }\n        current_char_index = paren_string.index(after:\
    \ current_char_index)\n    }\n    result.append(current_result)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp57_n10zu/tmp57_n10zu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1280a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1280772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1280772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12807717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57_n10zu                        0x0000562598bcf79e <unavailable> + 6046

    5    libc.so.6                          0x00002b1280c67460 __libc_start_main +
    245

    6    tmp57_n10zu                        0x0000562598bcf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var output = [Int]()\n    var current_parens_level =\
    \ 0\n    var max_parens_level = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            current_parens_level += 1\n            if current_parens_level\
    \ > max_parens_level {\n                max_parens_level = current_parens_level\n\
    \            }\n        } else if char == \")\" {\n            current_parens_level\
    \ -= 1\n        } else if char == \" \" {\n            output.append(max_parens_level)\n\
    \            max_parens_level = 0\n            current_parens_level = 0\n    \
    \    }\n    }\n    output.append(max_parens_level)\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var parsed_list = [Int]()\n    let tokens = paren_string.split(separator:\
    \ \" \")\n    for token in tokens {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in token {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n                if current_depth > max_depth {\n \
    \                   max_depth = current_depth\n                }\n           \
    \ } else if char == \")\" {\n                current_depth -= 1\n            }\n\
    \        }\n        parsed_list.append(max_depth)\n    }\n    return parsed_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var max_depth_by_group = [Int]()\n    var max_depth = 0\n    var current_depth\
    \ = 0\n    for group in groups {\n        max_depth = 0\n        current_depth\
    \ = 0\n        for paren in group {\n            if paren == \"(\" {\n       \
    \         current_depth += 1\n            } else if paren == \")\" {\n       \
    \         current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     max_depth_by_group.append(max_depth)\n    }\n    return max_depth_by_group\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_depth = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var current_count = 0\n   \
    \     var maximum_count = 0\n        for i in group.characters {\n           \
    \ if i == \"(\" {\n                current_count += 1\n            } else if i\
    \ == \")\" {\n                if current_count > maximum_count {\n           \
    \         maximum_count = current_count\n                }\n                current_count\
    \ -= 1\n            }\n        }\n        max_depth.append(maximum_count)\n  \
    \  }\n    return max_depth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpstbeyfif.swift:9:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var group_depth = [Int]()\n    var group_string = \"\
    \"\n    let paren_string_vec = paren_string.split(separator: \" \")\n    for s\
    \ in paren_string_vec {\n        var depth = 0\n        var prev_depth = 0\n \
    \       for c in s {\n            if c == \"(\" {\n                depth += 1\n\
    \            } else if c == \")\" {\n                depth -= 1\n            }\n\
    \            prev_depth = max(prev_depth, depth)\n        }\n        group_depth.append(prev_depth)\n\
    \    }\n    return group_depth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var depth_arr = [Int]()\n    for paren_group in paren_groups {\n  \
    \      var depth = 0\n        var max_depth = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                depth += 1\n           \
    \ } else if paren == \")\" {\n                depth -= 1\n            }\n    \
    \        if depth > max_depth {\n                max_depth = depth\n         \
    \   }\n        }\n        depth_arr.append(max_depth)\n    }\n    return depth_arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var nested_parens: [Int] = []\n    var count: Int =\
    \ 0\n    var tmp_count: Int = 0\n    for ch in paren_string {\n        if ch ==\
    \ \"(\" {\n            count += 1\n            tmp_count += 1\n        } else\
    \ if ch == \")\" {\n            count -= 1\n            tmp_count -= 1\n     \
    \   } else if ch == \" \" {\n            if tmp_count > 0 {\n                nested_parens.append(tmp_count)\n\
    \            }\n            tmp_count = 0\n        }\n    }\n    return nested_parens\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmppdkxqmjo/tmppdkxqmjo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13171e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1316ed8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1316ed8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1316ed77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdkxqmjo                        0x000055be53dac63e <unavailable> + 5694

    5    libc.so.6                          0x00002b13173cd460 __libc_start_main +
    245

    6    tmppdkxqmjo                        0x000055be53dac259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var paren_level_counters = [Int]()\n    for group in paren_groups {\n\
    \        paren_level_counters.append(parse_nested_parens_helper(paren_str: String(group)))\n\
    \    }\n    return paren_level_counters\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1z1yeywr.swift:11:37: error: cannot find 'parse_nested_parens_helper'\
    \ in scope\n        paren_level_counters.append(parse_nested_parens_helper(paren_str:\
    \ String(group)))\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { compute_nested_parens($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfn3ecwjz.swift:8:60: error: cannot find 'compute_nested_parens'\
    \ in scope\n    return paren_string.components(separatedBy: \" \").map { compute_nested_parens($0)\
    \ }\n                                                           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack = [Int]()\n    var max_depth = 0\n    var\
    \ paren_levels = [Int]()\n    var paren_count = 0\n    for (index, paren) in paren_string.enumerated()\
    \ {\n        if paren == \"(\" {\n            paren_count += 1\n            stack.append(paren_count)\n\
    \            max_depth = max(max_depth, paren_count)\n        } else if paren\
    \ == \")\" {\n            let removed_paren = stack.removeLast()\n           \
    \ if removed_paren == paren_count {\n                paren_levels.append(paren_count)\n\
    \                paren_count = 0\n            }\n        } else if index == paren_string.count\
    \ - 1 {\n            paren_levels.append(max_depth)\n        }\n    }\n    return\
    \ paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp_253v6zg/tmp_253v6zg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5001a88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500177fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500177f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500177e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_253v6zg                        0x000056137a2f8a2e <unavailable> + 6702

    5    libc.so.6                          0x00002b5001c74460 __libc_start_main +
    245

    6    tmp_253v6zg                        0x000056137a2f8649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return parse_parens(paren_string: paren_string, open_paren:\
    \ \"(\", close_paren: \")\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9fqaoazy.swift:8:12: error: cannot find 'parse_parens' in scope\n\
    \    return parse_parens(paren_string: paren_string, open_paren: \"(\", close_paren:\
    \ \")\")\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_items = paren_string.components(separatedBy:\
    \ \" \")\n    return paren_items.map { parse_single_nested_parens(paren_string:\
    \ $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwgaa8z0p.swift:8:36: error: value of type 'String' has no member\
    \ 'components'\n    var paren_items = paren_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwgaa8z0p.swift:9:30:\
    \ error: cannot find 'parse_single_nested_parens' in scope\n    return paren_items.map\
    \ { parse_single_nested_parens(paren_string: $0) }\n                         \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { (parens) -> Int in\n        var stack = Stack<Character>()\n        var max_depth\
    \ = 0\n        var current_depth = 0\n        for char in parens {\n         \
    \   if char == \"(\" {\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            } else if char == \")\" {\n   \
    \             current_depth -= 1\n            }\n        }\n        return max_depth\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6u1gxk24.swift:9:21: error: cannot find 'Stack' in scope\n    \
    \    var stack = Stack<Character>()\n                    ^~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  var stack: [Int] = []\n  var count: Int = 0\n  var result:\
    \ [Int] = []\n  let chars = paren_string.characters\n  for char in chars {\n \
    \   if char == \"(\" {\n      stack.append(1)\n      count += 1\n    } else if\
    \ char == \")\" {\n      stack.removeLast()\n      count -= 1\n    } else if char\
    \ == \" \" {\n      result.append(count)\n      count = 0\n    }\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy9r3ec3m.swift:11:28: error: 'characters' is unavailable: Please\
    \ use String directly\n  let chars = paren_string.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var parsed_nested_parens: [Int] = []\n    // Your code\
    \ here\n    return parsed_nested_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpahapy9n8/tmpahapy9n8.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fe3d6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fe3a64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fe3a64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fe3a637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahapy9n8                        0x000056490e6d443e <unavailable> + 5182

    5    libc.so.6                          0x00002b2fe3f59460 __libc_start_main +
    245

    6    tmpahapy9n8                        0x000056490e6d4059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    return groups.map { group in\n        var level = 0\n        var max_level\
    \ = 0\n        for c in group {\n            if c == \"(\" {\n               \
    \ level += 1\n            } else if c == \")\" {\n                level -= 1\n\
    \            }\n            max_level = max(max_level, level)\n        }\n   \
    \     return max_level\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var nested_levels = [Int]()\n    for group in groups {\n        nested_levels.append(get_deepest_nested_level(group))\n\
    \    }\n    return nested_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpj2nhjcll.swift:11:30: error: cannot find 'get_deepest_nested_level'\
    \ in scope\n        nested_levels.append(get_deepest_nested_level(group))\n  \
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { paren_string in\n        var depth = 0\n        var max_depth = 0\n      \
    \  for i in paren_string {\n            if i == \"(\" {\n                depth\
    \ += 1\n            } else if i == \")\" {\n                depth -= 1\n     \
    \       }\n            max_depth = max(max_depth, depth)\n        }\n        return\
    \ max_depth\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplkebgp3s.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map { paren_string\
    \ in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_level = [Int]()\n    for paren in paren_groups {\n   \
    \     var open_count = 0\n        var level = 0\n        for char in paren {\n\
    \            if char == \"(\" {\n                open_count += 1\n           \
    \     level = max(level, open_count)\n            } else if char == \")\" {\n\
    \                open_count -= 1\n            }\n        }\n        paren_level.append(level)\n\
    \    }\n    return paren_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq0n_w_t1.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    /// Converts a string representation of an expression\
    \ to a vector of parenthesized groups.\n    /// e.g. \"(()()) ((())) () ((())()())\"\
    \ -> [\"(()())\", \"((()))\", \"()\", \"((())()())\"]\n    func get_paren_groups(paren_string:\
    \ String) -> [String] {\n        var paren_groups: [String] = []\n        var\
    \ paren_string = paren_string.replacingOccurrences(of: \" \", with: \"\")\n  \
    \      while paren_string.count > 0 {\n            if let idx = paren_string.firstIndex(of:\
    \ \")\") {\n                let right_substr = paren_string[...idx]\n        \
    \        paren_string = String(paren_string[idx...])\n                paren_string.removeFirst()\n\
    \                if let idx = right_substr.lastIndex(of: \"(\") {\n          \
    \          let left_substr = right_substr[...idx]\n                    paren_groups.append(String(left_substr))\n\
    \                }\n            }\n        }\n        return paren_groups\n  \
    \  }\n    \n    /// Calculates the level of nesting for a string containing a\
    \ single group of nested parentheses.\n    /// e.g. \"(()())\" -> 3\n    func\
    \ get_nested_parens_level(paren_group: String) -> Int {\n        var level: Int\
    \ = 0\n        var max_level: Int = 0\n        for char in paren_group {\n   \
    \         if char == \"(\" {\n                level += 1\n            } else if\
    \ char == \")\" {\n                if level > max_level {\n                  \
    \  max_level = level\n                }\n                level -= 1\n        \
    \    }\n        }\n        return max_level\n    }\n    \n    let paren_groups\
    \ = get_paren_groups(paren_string: paren_string)\n    var nested_parens_levels:\
    \ [Int] = []\n    for paren_group in paren_groups {\n        nested_parens_levels.append(get_nested_parens_level(paren_group:\
    \ paren_group))\n    }\n    return nested_parens_levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpx7ddp2s5.swift:12:41: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        var paren_string = paren_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_string_array = paren_string.split(separator:\
    \ \" \")\n    var maximum_nested_levels = [Int]()\n    for paren_group in paren_string_array\
    \ {\n        maximum_nested_levels.append(calculate_max_nested_paren_level(paren_group:\
    \ paren_group))\n    }\n    return maximum_nested_levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkwdg65fa.swift:11:38: error: cannot find 'calculate_max_nested_paren_level'\
    \ in scope\n        maximum_nested_levels.append(calculate_max_nested_paren_level(paren_group:\
    \ paren_group))\n                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var pairs = [(Int, Int)]()\n    var paren_vec = [Character]()\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            paren_vec.append(char)\n\
    \        } else if char == \")\" {\n            if paren_vec.count > 0 {\n   \
    \             paren_vec.removeLast()\n                pairs.append((paren_vec.count,\
    \ paren_vec.count + 1))\n            }\n        }\n    }\n    var result = [Int]()\n\
    \    for pair in pairs {\n        result.append(pair.1 - pair.0)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmps_m_vdep/tmps_m_vdep.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af246f89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af246c80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af246c80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af246c7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_m_vdep                        0x00005640aa2e1a8e <unavailable> + 6798

    5    libc.so.6                          0x00002af247175460 __libc_start_main +
    245

    6    tmps_m_vdep                        0x00005640aa2e16a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map(paren_to_level_of_nesting)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa1oix1ck.swift:8:58: error: cannot find 'paren_to_level_of_nesting'\
    \ in scope\n    return paren_string.components(separatedBy: \" \").map(paren_to_level_of_nesting)\n\
    \                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpa1oix1ck.swift:8:25: error: value of type 'String' has no member 'components'\n\
    \    return paren_string.components(separatedBy: \" \").map(paren_to_level_of_nesting)\n\
    \           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  let length = paren_string.count\n  var output = [Int]()\n\
    \  var index = 0\n  while index < length {\n    var stack = Stack<Character>()\n\
    \    var depth = 0\n    var local_index = index\n    while local_index < length\
    \ {\n      let char = paren_string[paren_string.index(paren_string.startIndex,\
    \ offsetBy: local_index)]\n      if char == \"(\" {\n        stack.push(item:\
    \ char)\n        depth += 1\n      } else if char == \")\" {\n        stack.pop()\n\
    \        depth -= 1\n      } else if char == \" \" {\n        if stack.isEmpty()\
    \ {\n          index = local_index + 1\n          break\n        }\n      }\n\
    \      local_index += 1\n    }\n    output.append(depth)\n  }\n  return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmoqzybmb.swift:12:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    var max_depth_of_parens = [Int]()\n    var temp_depth_of_parens\
    \ = 0\n    var current_depth_of_parens = 0\n    \n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_depth_of_parens += 1\n  \
    \      } else if char == \")\" {\n            current_depth_of_parens -= 1\n \
    \       } else if char == \" \" {\n            temp_depth_of_parens = max(temp_depth_of_parens,\
    \ current_depth_of_parens)\n            current_depth_of_parens = 0\n        }\n\
    \    }\n    \n    max_depth_of_parens.append(temp_depth_of_parens)\n    \n   \
    \ return max_depth_of_parens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpjprws0n2/tmpjprws0n2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ba02ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01b9d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01b9d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01b9d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjprws0n2                        0x000055fe789df71e <unavailable> + 5918

    5    libc.so.6                          0x00002b01ba216460 __libc_start_main +
    245

    6    tmpjprws0n2                        0x000055fe789df339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_string_components = paren_string.components(separatedBy:\
    \ \" \")\n    var paren_string_array = [String]()\n    for str in paren_string_components\
    \ {\n        if str != \"\" {\n            paren_string_array.append(str)\n  \
    \      }\n    }\n    var levels_array = [Int]()\n    for paren_str in paren_string_array\
    \ {\n        levels_array.append(get_nested_parens_level(paren_str: paren_str))\n\
    \    }\n    return levels_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6otu_a81.swift:8:48: error: value of type 'String' has no member\
    \ 'components'\n    let paren_string_components = paren_string.components(separatedBy:\
    \ \" \")\n                                  ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp6otu_a81.swift:17:29:\
    \ error: cannot find 'get_nested_parens_level' in scope\n        levels_array.append(get_nested_parens_level(paren_str:\
    \ paren_str))\n                            ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for group in groups {\n     \
    \   var max_level = 0\n        var nesting_level = 0\n        for paren in group\
    \ {\n            if paren == \"(\" {\n                nesting_level += 1\n   \
    \         } else if paren == \")\" {\n                nesting_level -= 1\n   \
    \         }\n            if nesting_level > max_level {\n                max_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7hoogqo5.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let group_strings = paren_string.split(separator: \"\
    \ \")\n    var max_levels = [Int]()\n    var level = 0\n    for group_string in\
    \ group_strings {\n        var l = 0\n        for c in group_string {\n      \
    \      if c == \"(\" {\n                l += 1\n            } else if c == \"\
    )\" {\n                l -= 1\n            }\n        }\n        max_levels.append(level)\n\
    \        level = l\n    }\n    return max_levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpf_en1nln/tmpf_en1nln.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a7bdf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a7baeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a7baee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a7baed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_en1nln                        0x000056471577090e <unavailable> + 6414

    5    libc.so.6                          0x00002b1a7bfe3460 __libc_start_main +
    245

    6    tmpf_en1nln                        0x0000564715770529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack: [Character] = []\n    var open_paren_count\
    \ = 0\n    var results: [Int] = []\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            stack.append(char)\n            open_paren_count\
    \ += 1\n        } else if char == \")\" {\n            open_paren_count -= 1\n\
    \            stack.popLast()\n        } else if char == \" \" && open_paren_count\
    \ == 0 {\n            results.append(stack.count)\n        }\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpm_j1ukqq/tmpm_j1ukqq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b679a2dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6799fd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6799fd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6799fd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_j1ukqq                        0x000055eaf45ac80e <unavailable> + 6158

    5    libc.so.6                          0x00002b679a4c6460 __libc_start_main +
    245

    6    tmpm_j1ukqq                        0x000055eaf45ac429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.split(separator: \"\
    \ \")\n    var max_nesting_levels = [Int]()\n    for group in paren_groups {\n\
    \        let level = find_max_nesting_level(paren_string: String(group))\n   \
    \     max_nesting_levels.append(level)\n    }\n    return max_nesting_levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8xptq57i.swift:11:21: error: cannot find 'find_max_nesting_level'\
    \ in scope\n        let level = find_max_nesting_level(paren_string: String(group))\n\
    \                    ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.split(separator: \"\
    \ \")\n    var results = [Int]()\n    for group in paren_groups {\n        results.append(parse_nested_parens_helper(paren_group:\
    \ group))\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpy2ecw013.swift:11:24: error: cannot find 'parse_nested_parens_helper'\
    \ in scope\n        results.append(parse_nested_parens_helper(paren_group: group))\n\
    \                       ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_nesting = [Int]()\n    for paren in paren_string.split(separator:\
    \ \" \") {\n        var count = 0\n        var max_count = 0\n        for char\
    \ in paren {\n            if char == \"(\" {\n                count += 1\n   \
    \         } else if char == \")\" {\n                count -= 1\n            }\n\
    \            if count > max_count {\n                max_count = count\n     \
    \       }\n        }\n        max_nesting.append(max_count)\n    }\n    return\
    \ max_nesting\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var current_max = 0\n    var max_values = [Int]()\n\
    \    var paren_stack = [Character]()\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            paren_stack.append(char)\n            current_max\
    \ += 1\n        } else if char == \")\" {\n            paren_stack.popLast()\n\
    \            current_max -= 1\n        } else if char == \" \" {\n           \
    \ max_values.append(current_max)\n            current_max = 0\n        }\n   \
    \ }\n    return max_values\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp4155ket9/tmp4155ket9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eeb87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eeb576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eeb576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eeb5757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4155ket9                        0x0000560f7ec5482e <unavailable> + 6190

    5    libc.so.6                          0x00002b5eeba6b460 __libc_start_main +
    245

    6    tmp4155ket9                        0x0000560f7ec54449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var parsed = [Int]()\n    for group in groups {\n        parsed.append(max_nesting_parens(group:\
    \ String(group)))\n    }\n    return parsed\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa_roi9ce.swift:11:23: error: cannot find 'max_nesting_parens' in\
    \ scope\n        parsed.append(max_nesting_parens(group: String(group)))\n   \
    \                   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    // TODO: Implement parse_nested_parens\n    var groups\
    \ = paren_string.components(separatedBy: \" \")\n    var answers = [Int]()\n \
    \   var stack: Stack<Character> = Stack<Character>()\n    for i in 0..<groups.count\
    \ {\n        stack.clear()\n        var count = 0\n        var max = 0\n     \
    \   for x in groups[i] {\n            if x == \"(\" {\n                stack.push(x)\n\
    \                count += 1\n                if count > max {\n              \
    \      max = count\n                }\n            } else if x == \")\" {\n  \
    \              if let value = stack.pop() {\n                    if value == \"\
    (\" {\n                        count -= 1\n                    }\n           \
    \     }\n            }\n        }\n        answers.append(max)\n    }\n    return\
    \ answers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpl_7vf8wg.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    var groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpl_7vf8wg.swift:11:16: error:\
    \ cannot find type 'Stack' in scope\n    var stack: Stack<Character> = Stack<Character>()\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var depths = [Int]()\n    for group in paren_groups {\n        depths.append(deepest_level_of_nesting(group:\
    \ group))\n    }\n    return depths\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwqlu6z8m.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    var paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    return groups.map { $0.parse_nested_parens() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptumpva2r.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.components(separatedBy: \"\
    \ \")\n    return groups.map { group in\n        count_nested_parens(paren_string:\
    \ group)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmp7i_lbe.swift:8:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmp7i_lbe.swift:10:9: error:\
    \ cannot find 'count_nested_parens' in scope\n        count_nested_parens(paren_string:\
    \ group)\n        ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var count_list = [Int]()\n    var stack = Stack<Character>()\n\
    \    var temp_count = 0\n    for c in paren_string {\n        if c == \"(\" {\n\
    \            stack.push(c)\n            temp_count += 1\n        } else if c ==\
    \ \")\" {\n            stack.pop()\n            temp_count -= 1\n        } else\
    \ if c == \" \" {\n            count_list.append(temp_count)\n            temp_count\
    \ = 0\n        }\n    }\n    return count_list\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm4n5okaw.swift:9:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var res = [Int]()\n    for group in groups {\n        var current_max = 0\n\
    \        var n_in_paren = 0\n        for c in group {\n            if c == \"\
    (\" {\n                n_in_paren += 1\n                current_max = max(current_max,\
    \ n_in_paren)\n            } else if c == \")\" {\n                n_in_paren\
    \ -= 1\n            }\n        }\n        res.append(current_max)\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_stack = Stack<Character>()\n    var level_stack\
    \ = Stack<Int>()\n    var level = 0\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            level += 1\n            paren_stack.push(element:\
    \ char)\n            level_stack.push(element: level)\n        } else if char\
    \ == \")\" {\n            level -= 1\n            paren_stack.pop()\n        \
    \    level_stack.pop()\n        }\n    }\n    return level_stack.array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpswzaaufa.swift:8:23: error: cannot find 'Stack' in scope\n    var\
    \ paren_stack = Stack<Character>()\n                      ^~~~~\n/tmp/tmpswzaaufa.swift:9:23:\
    \ error: cannot find 'Stack' in scope\n    var level_stack = Stack<Int>()\n  \
    \                    ^~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ { $0.count_nested_parens() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoiayx7m4.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map { $0.count_nested_parens()\
    \ }\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009260
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var depth = 0\n    var res = [Int]()\n    var max_depth\
    \ = 0\n    for c in paren_string {\n        if c == \"(\" {\n            depth\
    \ += 1\n            max_depth = max(max_depth, depth)\n        } else if c ==\
    \ \")\" {\n            depth -= 1\n        } else if c == \" \" {\n          \
    \  res.append(max_depth)\n            max_depth = 0\n            depth = 0\n \
    \       }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpms9ywb29/tmpms9ywb29.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9df1969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9df1660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9df1660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9df165f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpms9ywb29                        0x00005640bb28771e <unavailable> + 5918

    5    libc.so.6                          0x00002b9df1b55460 __libc_start_main +
    245

    6    tmpms9ywb29                        0x00005640bb287339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result: [Int] = []\n    for group in groups {\n        result.append(get_max_nesting_level(paren_string:\
    \ String(group)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyntiq9jq.swift:11:23: error: cannot find 'get_max_nesting_level'\
    \ in scope\n        result.append(get_max_nesting_level(paren_string: String(group)))\n\
    \                      ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_levels = [Int]()\n    let group_strings =\
    \ paren_string.split(separator: \" \")\n    for i in 0..<group_strings.count {\n\
    \        var curr_max = 0\n        var curr_level = 0\n        let chars = group_strings[i].characters\n\
    \        for c in chars {\n            if c == \"(\" {\n                curr_level\
    \ += 1\n                if curr_level > curr_max {\n                    curr_max\
    \ = curr_level\n                }\n            } else if c == \")\" {\n      \
    \          curr_level -= 1\n            }\n        }\n        paren_levels.append(curr_max)\n\
    \    }\n    return paren_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoenl17dk.swift:13:38: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = group_strings[i].characters\n  \
    \                                   ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    let groups = paren_string.split(separator: \"\
    \ \")\n    var results: [Int] = []\n    \n    for group in groups {\n        var\
    \ max_stack = 0\n        var current_stack = 0\n        \n        for letter in\
    \ group {\n            if letter == \"(\" {\n                current_stack +=\
    \ 1\n                if current_stack > max_stack {\n                    max_stack\
    \ = current_stack\n                }\n            } else if letter == \")\" {\n\
    \                current_stack -= 1\n            }\n        }\n        results.append(max_stack)\n\
    \    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.split(separator: \" \").map(max_depth_of_paren)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt3b8uee_.swift:8:51: error: cannot find 'max_depth_of_paren' in\
    \ scope\n    return paren_string.split(separator: \" \").map(max_depth_of_paren)\n\
    \                                                  ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map({group\
    \ -> Int in\n        return deepest_nesting_parens(paren_string: group)\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm7tg34d9.swift:9:16: error: cannot find 'deepest_nesting_parens'\
    \ in scope\n        return deepest_nesting_parens(paren_string: group)\n     \
    \          ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nested_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        max_nested_levels.append(get_nested_parens_count(paren_string: paren_group))\n\
    \    }\n    return max_nested_levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpv42i7m37.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var paren_stack = [Character]()\n    var max_paren_level\
    \ = 0\n    var current_paren_level = 0\n    var paren_level_list = [Int]()\n \
    \   for char in paren_string {\n        switch char {\n        case \"(\":\n \
    \           paren_stack.append(char)\n            current_paren_level += 1\n \
    \           if current_paren_level > max_paren_level {\n                max_paren_level\
    \ = current_paren_level\n            }\n        case \")\":\n            if paren_stack.count\
    \ == 0 {\n                // Closing a paren without an opening paren: invalid\n\
    \                return []\n            }\n            if current_paren_level\
    \ > 0 {\n                current_paren_level -= 1\n            }\n           \
    \ paren_stack.removeLast()\n        case \" \":\n            if paren_stack.count\
    \ == 0 {\n                // Closing all open parens before space: valid\n   \
    \             paren_level_list.append(max_paren_level)\n                max_paren_level\
    \ = 0\n                current_paren_level = 0\n            } else {\n       \
    \         // Closing some parens before space: invalid\n                return\
    \ []\n            }\n        default:\n            // Only allowed chars are (\
    \ and )\n            return []\n        }\n    }\n    // Closing all open parens\
    \ before string end: valid\n    if paren_stack.count == 0 {\n        paren_level_list.append(max_paren_level)\n\
    \    }\n    return paren_level_list\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n  let paren_groups = paren_string.split(separator: \" \"\
    )\n  var nested_parens: [Int] = []\n  for paren_group in paren_groups {\n    let\
    \ paren_counts = paren_group.split(separator: \"(\")\n    let left_paren_count\
    \ = paren_counts.count - 1\n    let closing_paren_count = paren_counts.last?.count\
    \ ?? 0\n    let open_paren_count = left_paren_count - closing_paren_count\n  \
    \  nested_parens.append(open_paren_count)\n  }\n  return nested_parens\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmp4zmajwig/tmp4zmajwig.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ad406cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ad3d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ad3d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ad3d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4zmajwig                        0x000055e619c5294e <unavailable> + 6478

    5    libc.so.6                          0x00002b1ad4258460 __libc_start_main +
    245

    6    tmp4zmajwig                        0x000055e619c52569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map({\
    \ get_max_nesting($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptpq8v7hq.swift:8:60: error: cannot find 'get_max_nesting' in scope\n\
    \    return paren_string.components(separatedBy: \" \").map({ get_max_nesting($0)\
    \ })\n                                                           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return [2, 3, 1, 3]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpasgmgc0o/tmpasgmgc0o.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15540bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1553db1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1553db1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1553db07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasgmgc0o                        0x000056055034154f <unavailable> + 5455

    5    libc.so.6                          0x00002b15542a6460 __libc_start_main +
    245

    6    tmpasgmgc0o                        0x0000560550341059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_list = paren_string.components(separatedBy:\
    \ \" \")\n    var max_depth = 0\n    var depth = 0\n    var curr_paren_list: [Int]\
    \ = []\n    for paren in paren_list {\n        for curr_paren in paren {\n   \
    \         switch curr_paren {\n            case \"(\":\n                depth\
    \ += 1\n            case \")\":\n                depth -= 1\n            default:\n\
    \                continue\n            }\n        }\n        if depth > max_depth\
    \ {\n            max_depth = depth\n        }\n        curr_paren_list.append(max_depth)\n\
    \        depth = 0\n    }\n    return curr_paren_list\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcobb4hnb.swift:8:35: error: value of type 'String' has no member\
    \ 'components'\n    let paren_list = paren_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.components(separatedBy: \" \").map\
    \ {\n        var opened = 0\n        var max_opened = 0\n        for c in $0 {\n\
    \            if c == \"(\" {\n                opened += 1\n                max_opened\
    \ = max(max_opened, opened)\n            } else if c == \")\" {\n            \
    \    opened -= 1\n            }\n        }\n        return max_opened\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp258wq79d.swift:8:25: error: value of type 'String' has no member\
    \ 'components'\n    return paren_string.components(separatedBy: \" \").map {\n\
    \           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    return paren_string.split(separator: \" \").map { (paren_string)\
    \ -> Int in\n        var stack = Stack<Character>()\n        var max_depth = 0\n\
    \        var current_depth = 0\n        for paren in paren_string {\n        \
    \    if paren == \"(\" {\n                current_depth += 1\n               \
    \ max_depth = max(max_depth, current_depth)\n            } else if paren == \"\
    )\" {\n                current_depth -= 1\n            }\n        }\n        return\
    \ max_depth\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9ffz7p38.swift:9:21: error: cannot find 'Stack' in scope\n    \
    \    var stack = Stack<Character>()\n                    ^~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var max_level_per_grp: [Int] = []\n    var level: Int\
    \ = 0\n    var grp_idx: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            level += 1\n        } else if char == \")\" {\n    \
    \        level -= 1\n        } else if char == \" \" {\n            max_level_per_grp.append(level)\n\
    \            level = 0\n            grp_idx += 1\n        }\n    }\n    max_level_per_grp.append(level)\n\
    \    return max_level_per_grp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmppnkxg14m/tmppnkxg14m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf8c1a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf8be9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf8be9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf8be997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnkxg14m                        0x0000555b5418763e <unavailable> + 5694

    5    libc.so.6                          0x00002adf8c38f460 __libc_start_main +
    245

    6    tmppnkxg14m                        0x0000555b54187259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var res: [Int] = []\n    for char in paren_string.characters\
    \ {\n        if char == \"(\" {\n            res.append(0)\n        } else if\
    \ char == \")\" {\n            res[res.count - 1] += 1\n        } else if char\
    \ == \" \" {\n            continue\n        } else {\n            print(\"Unexpected\
    \ character in the string\")\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpwa9g02cw.swift:9:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in paren_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    // use a stack to keep track of parenthesis\n\
    \    var stack: [String] = []\n    var result: [Int] = []\n    var current_max:\
    \ Int = 0\n    \n    // loop through each character in the string\n    for char\
    \ in paren_string {\n        \n        // if the character is a opening parenthesis\n\
    \        if char == \"(\" {\n            \n            // add it to the stack\n\
    \            stack.append(String(char))\n            \n            // and update\
    \ the current_max\n            current_max += 1\n            \n        } else\
    \ if char == \")\" {\n            \n            // once we reach a closing parenthesis,\
    \ remove the last element in the stack and update the current_max\n          \
    \  stack.removeLast()\n            current_max -= 1\n            \n          \
    \  // if there is no more elements in the stack,\n            // we have reached\
    \ the last parenthesis of a group\n            if stack.isEmpty {\n          \
    \      \n                // append the current_max to the result and reset it\n\
    \                result.append(current_max)\n                current_max = 0\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpnxqbfwgb/tmpnxqbfwgb.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3f3b85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3f387cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3f387c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3f387b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxqbfwgb                        0x00005635963df89e <unavailable> + 6302

    5    libc.so.6                          0x00002af3f3d71460 __libc_start_main +
    245

    6    tmpnxqbfwgb                        0x00005635963df4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    return paren_groups.map({ paren_group in\n        var max_nesting_level\
    \ = 0\n        var curr_nesting_level = 0\n        for char in paren_group {\n\
    \            if char == \"(\" {\n                curr_nesting_level += 1\n   \
    \         } else if char == \")\" {\n                curr_nesting_level -= 1\n\
    \            }\n            max_nesting_level = max(max_nesting_level, curr_nesting_level)\n\
    \        }\n        return max_nesting_level\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0e03j7dk.swift:8:37: error: value of type 'String' has no member\
    \ 'components'\n    let paren_groups = paren_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let split = paren_string.split(separator:\
    \ \" \")\n    for s in split {\n        result.append(parse_nested_parens_in_string(s:\
    \ String(s)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6419aoa6.swift:11:23: error: cannot find 'parse_nested_parens_in_string'\
    \ in scope\n        result.append(parse_nested_parens_in_string(s: String(s)))\n\
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    let groups = paren_string.split(separator: \" \")\n\
    \    var result = [Int]()\n    for group in groups {\n        var max_nesting\
    \ = 0\n        var current_nesting = 0\n        for paren in group {\n       \
    \     if paren == \"(\" {\n                current_nesting += 1\n            }\
    \ else if paren == \")\" {\n                current_nesting -= 1\n           \
    \ }\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var output = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = [Character]()\n     \
    \   var maxDepth = 0\n        var currentDepth = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                stack.append(char)\n    \
    \            currentDepth += 1\n                if currentDepth > maxDepth {\n\
    \                    maxDepth = currentDepth\n                }\n            }\
    \ else if char == \")\" {\n                _ = stack.popLast()\n             \
    \   currentDepth -= 1\n            }\n        }\n        output.append(maxDepth)\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpo49cjxdf.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    let groups = paren_string.components(separatedBy: \" \")\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: 0
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    \n    let words = paren_string.split(separator: \" \"\
    )\n    var nested_group = [Int]()\n    \n    for word in words {\n        var\
    \ stack = [Character]()\n        var max_nested = 0\n        var current_nested\
    \ = 0\n        \n        for char in word {\n            if char == \"(\" {\n\
    \                stack.append(char)\n                current_nested += 1\n   \
    \             if current_nested > max_nested {\n                    max_nested\
    \ = current_nested\n                }\n            } else if char == \")\" {\n\
    \                stack.popLast()\n                current_nested -= 1\n      \
    \      }\n        }\n        nested_group.append(max_nested)\n    }\n    return\
    \ nested_group\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for paren in paren_string.components(separatedBy:\
    \ \" \") {\n        result.append(parse_nested_parens(paren: paren))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpocoswh70.swift:9:31: error: value of type 'String' has no member\
    \ 'components'\n    for paren in paren_string.components(separatedBy: \" \") {\n\
    \                 ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009261
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string:\
    \ String) -> [Int] {\n    var stack: [Character] = []\n    var count: Int = 0\n\
    \    var result: [Int] = []\n    var maxCount: Int = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            stack.append(char)\n            count\
    \ += 1\n        } else if char == \")\" {\n            stack.removeLast()\n  \
    \          count -= 1\n        } else if char == \" \" {\n            result.append(count)\n\
    \            count = 0\n        }\n    }\n    if result.count > 0 {\n        maxCount\
    \ = result.max()!\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: Exception
  stderr: 'tmpn7jeqd83/tmpn7jeqd83.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9edd1d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9edcecdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9edcecd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9edcecc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7jeqd83                        0x0000561bd62a393e <unavailable> + 6462

    5    libc.so.6                          0x00002b9edd3c2460 __libc_start_main +
    245

    6    tmpn7jeqd83                        0x0000561bd62a3559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1660009261
