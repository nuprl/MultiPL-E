language: swift
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map {\n        switch $0 {\n \
    \       case \"a\"...\"z\":\n            return String($0).uppercased()\n    \
    \    case \"A\"...\"Z\":\n            return String($0).lowercased()\n       \
    \ default:\n            return String($0)\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqn0kfqtf.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map {\n           ^\nSwift.String:3:17: note: found\
    \ candidate with type 'String'\n    public func uppercased() -> String\n     \
    \           ^\nSwift.String:3:17: note: found candidate with type 'String'\n \
    \   public func uppercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjx1daq.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { char in\n \
    \          ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevb7rb6r.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { (char: Character) -> Character\
    \ in\n        return char.isLowercase ? char.uppercased() : char.lowercased()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpe_z5zln1.swift:6:19: error: cannot convert return expression of\
    \ type '[Character]' to return type 'String'\n    return string.map { (char: Character)\
    \ -> Character in\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe_z5zln1.swift:6:46: error: declared closure result 'Character' is incompatible\
    \ with return type 'String'\n    return string.map { (char: Character) -> Character\
    \ in\n                                             ^~~~~~~~~\n               \
    \                              String\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2nllhj5y.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map {\n        if $0.isLowercase\
    \ { return $0.uppercased() }\n        else { return $0.lowercased() }\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp0zb8v_mb.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map {\n           ^\nSwift.Character:12:17: note:\
    \ found candidate with type 'String'\n    public func uppercased() -> String\n\
    \                ^\nSwift.Character:12:17: note: found candidate with type 'String'\n\
    \    public func uppercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for letter in string {\n  \
    \      flipped += String(letter.lowercased() == letter ? letter.uppercased() :\
    \ letter.lowercased())\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplvgddg0x.swift:8:47: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        flipped += String(letter.lowercased()\
    \ == letter ? letter.uppercased() : letter.lowercased())\n                   \
    \       ~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~\n/tmp/tmplvgddg0x.swift:8:47: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        flipped += String(letter.lowercased() == letter ?\
    \ letter.uppercased() : letter.lowercased())\n                               \
    \               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return String(string.characters.map {\n    $0.isLowercase\
    \ ? Character($0.uppercased()) : Character($0.lowercased())\n  })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpaqkooqpt.swift:6:24: error: 'characters' is unavailable: Please\
    \ use String directly\n  return String(string.characters.map {\n             \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for letter in string {\n   \
    \     if letter.isUppercase {\n            result.append(letter.lowercased())\n\
    \        } else {\n            result.append(letter.uppercased())\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var new_string = \"\"\n    for character in string\
    \ {\n        let string = String(character)\n        let upper = string.uppercased()\n\
    \        let lower = string.lowercased()\n        if string == upper {\n     \
    \       new_string += lower\n        } else if string == lower {\n           \
    \ new_string += upper\n        } else {\n            new_string += string\n  \
    \      }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevb7rb6r.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphrzwkjah.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isLowercase ? Character($0.uppercased())\
    \ : Character($0.lowercased()) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map({\n        let character\
    \ = String($0)\n        if character.lowercased() == character {\n           \
    \ return character.uppercased()\n        } else {\n            return character.lowercased()\n\
    \        }\n    }).joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp64pcwbl0.swift:6:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.map({\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4l4nk6us.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map {\n        if $0.isUppercase\
    \ {\n            return $0.lowercased()\n        } else {\n            return\
    \ $0.uppercased()\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa6r0xbrc.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map {\n           ^\nSwift.Character:13:17: note:\
    \ found candidate with type 'String'\n    public func lowercased() -> String\n\
    \                ^\nSwift.Character:13:17: note: found candidate with type 'String'\n\
    \    public func lowercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result: String = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for character in string {\n\
    \        if character.isUppercase {\n            newString.append(character.lowercased())\n\
    \        } else {\n            newString.append(character.uppercased())\n    \
    \    }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    \n    var newString = \"\"\n    \n    for char in string\
    \ {\n        let str = String(char)\n        if str.lowercased() == str {\n  \
    \          newString += str.uppercased()\n        } else {\n            newString\
    \ += str.lowercased()\n        }\n    }\n    \n    return newString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var word = \"\"\n    for character in string {\n  \
    \      if character.isUppercase {\n            word.append(character.lowercased())\n\
    \        } else {\n            word.append(character.uppercased())\n        }\n\
    \    }\n    return word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map {\n        if \"a\"...\"z\"\
    \ ~= $0 {\n            return Character(UnicodeScalar(UInt8(ascii: \"A\")! + UInt8(ascii:\
    \ $0)! - UInt8(ascii: \"a\")!)!)\n        } else if \"A\"...\"Z\" ~= $0 {\n  \
    \          return Character(UnicodeScalar(UInt8(ascii: \"a\")! + UInt8(ascii:\
    \ $0)! - UInt8(ascii: \"A\")!)!)\n        } else {\n            return $0\n  \
    \      }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplbgktgax.swift:8:78: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Unicode.Scalar'\n            return\
    \ Character(UnicodeScalar(UInt8(ascii: \"A\")! + UInt8(ascii: $0)! - UInt8(ascii:\
    \ \"a\")!)!)\n                                                               \
    \              ^\n"
  stdout: ''
  timestamp: 1659978931
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    // TODO: Flip the case of a given string\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpvf9qa01l/tmpvf9qa01l.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac31f786c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac31f47db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac31f47d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac31f47c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf9qa01l                        0x0000557b5568d3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002ac31f972460 __libc_start_main +
    245

    6    tmpvf9qa01l                        0x0000557b5568cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    for character in string {\n\
    \        if(character.isUppercase) {\n            output.append(character.lowercased())\n\
    \        } else {\n            output.append(character.uppercased())\n       \
    \ }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for character in string {\n\
    \        let string = String(character)\n        if string.uppercased() == string\
    \ {\n            flipped += string.lowercased()\n        } else {\n          \
    \  flipped += string.uppercased()\n        }\n    }\n    return flipped\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.map { $0.value < 96 ?\
    \ Character(UnicodeScalar($0.value + 32)!) : Character(UnicodeScalar($0.value\
    \ - 32)!) }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfiz_1ajd.swift:6:54: error: cannot convert value of type 'Character'\
    \ to closure result type 'String'\n    return string.unicodeScalars.map { $0.value\
    \ < 96 ? Character(UnicodeScalar($0.value + 32)!) : Character(UnicodeScalar($0.value\
    \ - 32)!) }.reduce(\"\", +)\n                                       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      let stringChar = String(char)\n        if stringChar == stringChar.uppercased()\
    \ {\n            newString += stringChar.lowercased()\n        } else {\n    \
    \        newString += stringChar.uppercased()\n        }\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased().map {\n        $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxzwm6s_l.swift:6:32: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.lowercased().map\
    \ {\n           ~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu1e5b40r.swift:6:17: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n  return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   result += isupper(char: char) ? tolower(char: char) : toupper(char: char)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnurju4v4.swift:8:19: error: cannot find 'isupper' in scope\n  \
    \      result += isupper(char: char) ? tolower(char: char) : toupper(char: char)\n\
    \                  ^~~~~~~\n/tmp/tmpnurju4v4.swift:8:41: error: cannot find 'tolower'\
    \ in scope\n        result += isupper(char: char) ? tolower(char: char) : toupper(char:\
    \ char)\n                                        ^~~~~~~\n/tmp/tmpnurju4v4.swift:8:63:\
    \ error: cannot find 'toupper' in scope\n        result += isupper(char: char)\
    \ ? tolower(char: char) : toupper(char: char)\n                              \
    \                                ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var string = string\n    for index in string.indices\
    \ {\n        if string[index].isUppercase {\n            string.replaceSubrange(index...index,\
    \ with: String(string[index]).lowercased())\n        } else {\n            string.replaceSubrange(index...index,\
    \ with: String(string[index]).uppercased())\n        }\n    }\n    return string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = string.map { c -> Character in\n      \
    \  if c.isLowercase {\n            return c.uppercased()\n        } else {\n \
    \           return c.lowercased()\n        }\n    }\n    return String(chars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpvecaaam9.swift:8:22: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n            return c.uppercased()\n\
    \                   ~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  //TODO: Add implementation here\n  return \"\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp7mguev3u/tmp7mguev3u.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75e0e25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75e0b1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75e0b1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75e0b1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mguev3u                        0x000055f429e403f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b75e1011460 __libc_start_main +
    245

    6    tmp7mguev3u                        0x000055f429e3ff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.unicodeScalars.map {\n    \
    \    let char = $0\n        let isUppercase = char.value >= 65 && char.value <=\
    \ 90\n        let isLowercase = char.value >= 97 && char.value <= 122\n      \
    \  return isUppercase ? Character(UnicodeScalar(char.value + 32)!) : isLowercase\
    \ ? Character(UnicodeScalar(char.value - 32)!) : Character(char)\n    }\n    return\
    \ String(characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let original = Array(string)\n    var new = [Character]()\n\
    \    for letter in original {\n        if letter.isUppercase {\n            new.append(letter.lowercased())\n\
    \        } else {\n            new.append(letter.uppercased())\n        }\n  \
    \  }\n    return String(new)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpm92lgfg0.swift:10:17: error: no exact matches in call to instance\
    \ method 'append'\n            new.append(letter.lowercased())\n             \
    \   ^\nSwift.Array:7:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf newElements:\
    \ __owned S) where Element == S.Element, S : Sequence\n                      \
    \              ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public\
    \ mutating func append<S>(contentsOf newElements: __owned S) where S : Sequence,\
    \ Self.Element == S.Element\n                                    ^\n/tmp/tmpm92lgfg0.swift:12:17:\
    \ error: no exact matches in call to instance method 'append'\n            new.append(letter.uppercased())\n\
    \                ^\nSwift.Array:7:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      if char.isLowercase {\n            newString.append(char.uppercased())\n\
    \        } else {\n            newString.append(char.lowercased())\n        }\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ c.isUppercase {\n            result.append(c.lowercased())\n        } else {\n\
    \            result.append(c.uppercased())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphrzwkjah.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercased = string.lowercased()\n    let uppercased\
    \ = string.uppercased()\n    var result = \"\"\n    for (index, char) in string.enumerated()\
    \ {\n        let lowercasedChar = lowercased[lowercased.index(lowercased.startIndex,\
    \ offsetBy: index)]\n        let uppercasedChar = uppercased[uppercased.index(uppercased.startIndex,\
    \ offsetBy: index)]\n        if char == lowercasedChar {\n            result.append(uppercasedChar)\n\
    \        } else {\n            result.append(lowercasedChar)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isLowercase ? Character($0.uppercased())\
    \ : Character($0.lowercased()) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let str = string.characters.map({$0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()})\n    return String(str)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpl1q9v2o4.swift:6:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let str = string.characters.map({$0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()})\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpl1q9v2o4.swift:7:12: error: no exact matches\
    \ in call to initializer \n    return String(str)\n           ^\nSwift.String:4:12:\
    \ note: candidate requires that the types 'String' and 'Character' be equivalent\
    \ (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_\
    \ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.map { char in\n    return String(char).range(of:\
    \ \"A..Z\", options: .regularExpression) != nil ? String(char).lowercased() :\
    \ String(char).uppercased()\n  }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6od33ps4.swift:7:25: error: value of type 'String' has no member\
    \ 'range'\n    return String(char).range(of: \"A..Z\", options: .regularExpression)\
    \ != nil ? String(char).lowercased() : String(char).uppercased()\n           ~~~~~~~~~~~~\
    \ ^~~~~\n/tmp/tmp6od33ps4.swift:7:53: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return String(char).range(of: \"A..Z\", options:\
    \ .regularExpression) != nil ? String(char).lowercased() : String(char).uppercased()\n\
    \                                                   ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map {$0.isLowercase ? Character($0.uppercased())\
    \ : Character($0.lowercased())})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let flipped = string.map {\n        char in\n     \
    \   if char.isUppercase {\n            return char.lowercased()\n        } else\
    \ {\n            return char.uppercased()\n        }\n    }\n    return String(flipped)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5jw9ffqb.swift:14:12: error: no exact matches in call to initializer\
    \ \n    return String(flipped)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String' and 'Character' be equivalent (requirement\
    \ specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S)\
    \ where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  var characters = Array(string)\n  for i in 0..<characters.count\
    \ {\n    let c = characters[i]\n    let s = String(c)\n    if s.lowercased() ==\
    \ s {\n      characters[i] = Character(s.uppercased())\n    } else {\n      characters[i]\
    \ = Character(s.lowercased())\n    }\n  }\n  return String(characters)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        let c = character.uppercased()\n        if c == character {\n       \
    \     result.append(character.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmph1acu6hq.swift:9:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if c == character {\n\
    \           ~ ^  ~~~~~~~~~\n/tmp/tmph1acu6hq.swift:9:14: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == character {\n             ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.characters.map {\n    if $0.isLetter {\n\
    \      return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n    }\n    return\
    \ $0\n  }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuqx0zvt1.swift:10:12: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n    return\
    \ $0\n           ^~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { Character(String($0).uppercased())\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp45bipqt6/tmp45bipqt6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4d781cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4d7513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4d7513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4d75127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45bipqt6                        0x0000564d23e17665 <unavailable> + 5733

    5    libc.so.6                          0x00002ac4d7a08460 __libc_start_main +
    245

    6    tmp45bipqt6                        0x0000564d23e171b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map {\n        $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_bnqr99j.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.characters.map {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpum6fpclh/tmpum6fpclh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b0194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45afe8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45afe8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45afe8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum6fpclh                        0x000055d4e630b445 <unavailable> + 5189

    5    libc.so.6                          0x00002b45b0380460 __libc_start_main +
    245

    6    tmpum6fpclh                        0x000055d4e630af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevb7rb6r.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpeneav5q7.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map { char in\n           ^\nSwift.Character:13:17:\
    \ note: found candidate with type 'String'\n    public func lowercased() -> String\n\
    \                ^\nSwift.Character:13:17: note: found candidate with type 'String'\n\
    \    public func lowercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.map { char in\n    let str = String(char)\n\
    \    if str.uppercased() == str {\n      return str.lowercased()\n    } else {\n\
    \      return str.uppercased()\n    }\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpejaaqw6t.swift:6:17: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n  return string.map { char in\n   \
    \      ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.reversed().map {String($0).lowercased()\
    \ == String($0) ? String($0).uppercased() : String($0).lowercased()}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmph5sid5vp.swift:6:30: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.reversed().map {String($0).lowercased()\
    \ == String($0) ? String($0).uppercased() : String($0).lowercased()}\n       \
    \    ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevb7rb6r.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for letter in string\
    \ {\n        flippedString += String(letter).lowercased() == String(letter) ?\
    \ String(letter).uppercased() : String(letter).lowercased()\n    }\n    return\
    \ flippedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for s in string {\n        result\
    \ += s.isUppercase ? s.lowercased() : s.uppercased()\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { (char) -> Character in\n\
    \        if char.isUppercase {\n            return Character(char.lowercased())\n\
    \        } else {\n            return Character(char.uppercased())\n        }\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphrzwkjah.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let letters = string.map { letter -> String in\n  \
    \      if let lowercasedLetter = letter.lowercased().first, letter == lowercasedLetter\
    \ {\n            return String(letter).uppercased()\n        } else if let uppercasedLetter\
    \ = letter.uppercased().first, letter == uppercasedLetter {\n            return\
    \ String(letter).lowercased()\n        } else {\n            return String(letter)\n\
    \        }\n    }\n    return letters.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        if character.isLowercase {\n            result.append(character.uppercased())\n\
    \        } else {\n            result.append(character.lowercased())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if let char = $0.lowercased().first\
    \ {\n            return char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        }\n        return $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprs0fi1s7.swift:6:19: error: no 'map' candidates produce the expected\
    \ contextual result type 'String'\n    return string.map {\n                 \
    \ ^\nSwift.Collection:2:28: note: 'map' produces '[String]', not the expected\
    \ contextual result type 'String'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n\
    Swift.Sequence:2:28: note: 'map' produces '[String]', not the expected contextual\
    \ result type 'String'\n    @inlinable public func map<T>(_ transform: (Self.Element)\
    \ throws -> T) rethrows -> [T]\n                           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if \"a\"...\"z\" ~= char {\n            flipped_string.append(char.uppercased())\n\
    \        } else if \"A\"...\"Z\" ~= char {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char)\n        }\n    }\n\
    \    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.lowercased().map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5v6aengq.swift:6:32: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.lowercased().map\
    \ { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        char in\n        if char.isLowercase\
    \ {\n            return char.uppercased()\n        } else {\n            return\
    \ char.lowercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpwxaxznk9.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpum6fpclh/tmpum6fpclh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b0194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45afe8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45afe8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45afe8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum6fpclh                        0x000055d4e630b445 <unavailable> + 5189

    5    libc.so.6                          0x00002b45b0380460 __libc_start_main +
    245

    6    tmpum6fpclh                        0x000055d4e630af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let characters = string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n    return String(characters)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp74if03d4.swift:7:12: error: no exact matches in call to initializer\
    \ \n    return String(characters)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String' and 'Character' be equivalent (requirement\
    \ specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S)\
    \ where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let uppercase = CharacterSet.uppercaseLetters\n   \
    \ let lowercase = CharacterSet.lowercaseLetters\n    var chars = [Character]()\n\
    \    for char in string.characters {\n        let stringChar = String(char)\n\
    \        if uppercase.contains(stringChar.unicodeScalars.first!) {\n         \
    \   chars.append(Character(stringChar.lowercased()))\n        } else if lowercase.contains(stringChar.unicodeScalars.first!)\
    \ {\n            chars.append(Character(stringChar.uppercased()))\n        } else\
    \ {\n            chars.append(char)\n        }\n    }\n    return String(chars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp1rqc83e_.swift:6:21: error: cannot find 'CharacterSet' in scope\n\
    \    let uppercase = CharacterSet.uppercaseLetters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmp1rqc83e_.swift:7:21: error: cannot find 'CharacterSet' in scope\n    let\
    \ lowercase = CharacterSet.lowercaseLetters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmp1rqc83e_.swift:9:24: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in string.characters {\n                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map({ $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuqy07wug.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map({ $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = String()\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped.append(char.lowercased())\n\
    \        } else {\n            flipped.append(char.uppercased())\n        }\n\
    \    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newStr = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            newStr.append(char.lowercased())\n    \
    \    } else {\n            newStr.append(char.uppercased())\n        }\n    }\n\
    \    return newStr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result: String = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevb7rb6r.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  var output = \"\"\n  for char in string {\n    if char.isUppercase\
    \ {\n      output.append(char.lowercased())\n    } else {\n      output.append(char.uppercased())\n\
    \    }\n  }\n  return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphrzwkjah.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpum6fpclh/tmpum6fpclh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b0194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45afe8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45afe8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45afe8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum6fpclh                        0x000055d4e630b445 <unavailable> + 5189

    5    libc.so.6                          0x00002b45b0380460 __libc_start_main +
    245

    6    tmpum6fpclh                        0x000055d4e630af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.unicodeScalars.reduce(\"\") { current,\
    \ char in\n        let flipped: String\n        if char.isASCII {\n          \
    \  let flippedScalar = char.isUppercase ? char.lowercaseASCIIScalar : char.uppercaseASCIIScalar\n\
    \            flipped = String(Character(flippedScalar))\n        } else {\n  \
    \          flipped = String(char)\n        }\n        return current + flipped\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpwsswpm3m.swift:9:38: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n            let flippedScalar = char.isUppercase ?\
    \ char.lowercaseASCIIScalar : char.uppercaseASCIIScalar\n                    \
    \            ~~~~ ^~~~~~~~~~~\n/tmp/tmpwsswpm3m.swift:9:57: error: value of type\
    \ 'Unicode.Scalar' has no member 'lowercaseASCIIScalar'\n            let flippedScalar\
    \ = char.isUppercase ? char.lowercaseASCIIScalar : char.uppercaseASCIIScalar\n\
    \                                                   ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwsswpm3m.swift:9:85: error: value of type 'Unicode.Scalar' has no member\
    \ 'uppercaseASCIIScalar'\n            let flippedScalar = char.isUppercase ? char.lowercaseASCIIScalar\
    \ : char.uppercaseASCIIScalar\n                                              \
    \                                 ~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var new_string = \"\"\n    for char in string {\n \
    \       if char.isUppercase {\n            new_string.append(char.lowercased())\n\
    \        } else {\n            new_string.append(char.uppercased())\n        }\n\
    \    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isLowercase {\n\
    \            return $0.uppercased()\n        } else {\n            return $0.lowercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpme9txvtw.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.characters.map { c in\n    switch c {\n\
    \    case \"a\"...\"z\":\n      return String(c).uppercased()\n    case \"A\"\
    ...\"Z\":\n      return String(c).lowercased()\n    default:\n      return String(c)\n\
    \    }\n  }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9oiny9iz.swift:6:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.map { c in\n               \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let aStr = string.characters.map({\n        switch\
    \ $0 {\n        case \"a\"...\"z\":\n            return Character(String($0).uppercased())\n\
    \        case \"A\"...\"Z\":\n            return Character(String($0).lowercased())\n\
    \        default:\n            return $0\n        }\n    })\n    return String(aStr)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpf0adfmu9.swift:6:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let aStr = string.characters.map({\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for ch in string {\n       \
    \ if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else\
    \ {\n            result.append(ch.uppercased())\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for c in string {\n       \
    \ if (c.isLowercase) {\n            flipped.append(c.uppercased())\n        }\
    \ else {\n            flipped.append(c.lowercased())\n        }\n    }\n    return\
    \ flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpevb7rb6r.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var string = string\n    for index in string.indices\
    \ {\n        let lowercase = CharacterSet.lowercaseLetters\n        let uppercase\
    \ = CharacterSet.uppercaseLetters\n        if lowercase.contains(UnicodeScalar(String(string[index]))!)\
    \ {\n            string.replaceSubrange(index...index, with: String(string[index]).uppercased())\n\
    \        } else if uppercase.contains(UnicodeScalar(String(string[index]))!) {\n\
    \            string.replaceSubrange(index...index, with: String(string[index]).lowercased())\n\
    \        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprjle6drw.swift:8:25: error: cannot find 'CharacterSet' in scope\n\
    \        let lowercase = CharacterSet.lowercaseLetters\n                     \
    \   ^~~~~~~~~~~~\n/tmp/tmprjle6drw.swift:9:25: error: cannot find 'CharacterSet'\
    \ in scope\n        let uppercase = CharacterSet.uppercaseLetters\n          \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    //let a = string.uppercased()\n    //let b = string.lowercased()\n\
    \    var c = \"\"\n    for ch in string {\n        if ch.isUppercase {\n     \
    \       c.append(ch.lowercased())\n        } else {\n            c.append(ch.uppercased())\n\
    \        }\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map({\n        char\
    \ in\n        if char.lowercased() == char {\n            return char.uppercased()\n\
    \        } else {\n            return char.lowercased()\n        }\n    }))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp88xb32cs.swift:8:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \  if char.lowercased() == char {\n           ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp88xb32cs.swift:8:30:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if char.lowercased() == char\
    \ {\n                             ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var changedString = string\n    for (i, char) in string.enumerated()\
    \ {\n        if char.isUppercase {\n            changedString.replaceSubrange(i...i,\
    \ with: String(char).lowercased())\n        } else if char.isLowercase {\n   \
    \         changedString.replaceSubrange(i...i, with: String(char).uppercased())\n\
    \        }\n    }\n    return changedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpecju7j_f.swift:9:13: error: instance method 'replaceSubrange(_:with:)'\
    \ requires the types 'String.Index' and 'Int' be equivalent\n            changedString.replaceSubrange(i...i,\
    \ with: String(char).lowercased())\n            ^\nSwift.RangeReplaceableCollection:2:37:\
    \ note: where 'Self.Index' = 'String.Index', 'R.Bound' = 'Int'\n    @inlinable\
    \ public mutating func replaceSubrange<C, R>(_ subrange: R, with newElements:\
    \ __owned C) where C : Collection, R : RangeExpression, Self.Element == C.Element,\
    \ Self.Index == R.Bound\n                                    ^\n/tmp/tmpecju7j_f.swift:11:13:\
    \ error: instance method 'replaceSubrange(_:with:)' requires the types 'String.Index'\
    \ and 'Int' be equivalent\n            changedString.replaceSubrange(i...i, with:\
    \ String(char).uppercased())\n            ^\nSwift.RangeReplaceableCollection:2:37:\
    \ note: where 'Self.Index' = 'String.Index', 'R.Bound' = 'Int'\n    @inlinable\
    \ public mutating func replaceSubrange<C, R>(_ subrange: R, with newElements:\
    \ __owned C) where C : Collection, R : RangeExpression, Self.Element == C.Element,\
    \ Self.Index == R.Bound\n                                    ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  var result = string\n  for (idx, character) in string.enumerated()\
    \ {\n    result.replaceSubrange(idx...idx, with: (character.isUppercase ? String(character).lowercased()\
    \ : String(character).uppercased()))\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6mf77l5d.swift:8:5: error: instance method 'replaceSubrange(_:with:)'\
    \ requires the types 'String.Index' and 'Int' be equivalent\n    result.replaceSubrange(idx...idx,\
    \ with: (character.isUppercase ? String(character).lowercased() : String(character).uppercased()))\n\
    \    ^\nSwift.RangeReplaceableCollection:2:37: note: where 'Self.Index' = 'String.Index',\
    \ 'R.Bound' = 'Int'\n    @inlinable public mutating func replaceSubrange<C, R>(_\
    \ subrange: R, with newElements: __owned C) where C : Collection, R : RangeExpression,\
    \ Self.Element == C.Element, Self.Index == R.Bound\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.reversed().map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp412q3d1b/tmp412q3d1b.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2065b0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2065806b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2065806988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20658057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp412q3d1b                        0x000055ea3b542795 <unavailable> + 6037

    5    libc.so.6                          0x00002b2065cfb460 __libc_start_main +
    245

    6    tmp412q3d1b                        0x000055ea3b5422e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        switch $0 {\n        case\
    \ \"a\"...\"z\":\n            return String($0).uppercased()\n        case \"\
    A\"...\"Z\":\n            return String($0).lowercased()\n        default:\n \
    \           return String($0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpzbisg2ky.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphrzwkjah.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map {\n        char in\n \
    \       if char.isUppercase {\n            return char.lowercased()\n        }\
    \ else {\n            return char.uppercased()\n        }\n    }.reduce(\"\",\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(flip_case(string: \"\") == \"\
    \")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyoz8kxg.swift:6:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.map {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var string_characters = Array(string)\n    for (index,\
    \ char) in string_characters.enumerated() {\n        if CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n            string_characters[index] = Character(String(char).lowercased())\n\
    \        } else if CharacterSet.lowercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n            string_characters[index] = Character(String(char).uppercased())\n\
    \        }\n    }\n    return String(string_characters)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmppmrus4kj.swift:8:12: error: cannot find 'CharacterSet' in scope\n\
    \        if CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n           ^~~~~~~~~~~~\n/tmp/tmppmrus4kj.swift:10:19: error: cannot find\
    \ 'CharacterSet' in scope\n        } else if CharacterSet.lowercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        return $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq8v4xkd6.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      switch char {\n        case \"a\"...\"z\":\n            newString.append(char.uppercased())\n\
    \        case \"A\"...\"Z\":\n            newString.append(char.lowercased())\n\
    \        default:\n            newString.append(char)\n        }\n    }\n    return\
    \ newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let flipped_string = string.map { char in\n       \
    \ return char.isLowercase ? char.uppercased() : char.lowercased()\n    }\n   \
    \ return String(flipped_string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpggcy_dn7.swift:9:12: error: no exact matches in call to initializer\
    \ \n    return String(flipped_string)\n           ^\nSwift.String:4:12: note:\
    \ candidate requires that the types 'String' and 'Character' be equivalent (requirement\
    \ specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S)\
    \ where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        switch $0 {\n        case\
    \ \"a\"...\"z\":\n            return String($0).uppercased()\n        case \"\
    A\"...\"Z\":\n            return String($0).lowercased()\n        default:\n \
    \           return String($0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpzbisg2ky.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let chars = string.map {\n        $0.isUppercase ?\
    \ Character($0.lowercased()) : Character($0.uppercased())\n    }\n    return String(chars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercased = string.lowercased()\n    var flipped\
    \ = \"\"\n    for (index, char) in string.enumerated() {\n        flipped.append(lowercased[index]\
    \ == char ? char.uppercased() : char.lowercased())\n    }\n    return flipped\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3w8syps_.swift:9:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        flipped.append(lowercased[index]\
    \ == char ? char.uppercased() : char.lowercased())\n                       ^~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let array = string.map { (char) -> Character in\n \
    \       if char.isUppercase {\n            return char.lowercased()\n        }\
    \ else {\n            return char.uppercased()\n        }\n    }\n    return String(array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpi9rr0djq.swift:8:25: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n            return char.lowercased()\n\
    \                   ~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      if char.isUppercase {\n            newString.append(char.lowercased())\n\
    \        } else {\n            newString.append(char.uppercased())\n        }\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map { char in\n   \
    \     if char.isUppercase {\n            return char.lowercased()\n        } else\
    \ {\n            return char.uppercased()\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpvhfxjn6s.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.characters.map { char in\n           ^\nSwift.Character:13:17:\
    \ note: found candidate with type 'String'\n    public func lowercased() -> String\n\
    \                ^\nSwift.Character:13:17: note: found candidate with type 'String'\n\
    \    public func lowercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpeneav5q7.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map { char in\n           ^\nSwift.Character:13:17:\
    \ note: found candidate with type 'String'\n    public func lowercased() -> String\n\
    \                ^\nSwift.Character:13:17: note: found candidate with type 'String'\n\
    \    public func lowercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for s in string {\n     \
    \   let c = String(s)\n        if c.lowercased() == c {\n            newString.append(c.uppercased())\n\
    \        } else {\n            newString.append(c.lowercased())\n        }\n \
    \   }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { (string) -> Character in\n    \
    \    if string.isLowercase {\n            return string.uppercased()\n       \
    \ } else {\n            return string.lowercased()\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpyz5ml3th.swift:6:19: error: no 'map' candidates produce the expected\
    \ contextual result type 'String'\n    return string.map { (string) -> Character\
    \ in\n                  ^\nSwift.Collection:2:28: note: 'map' produces '[Character]',\
    \ not the expected contextual result type 'String'\n    @inlinable public func\
    \ map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n          \
    \                 ^\nSwift.Sequence:2:28: note: 'map' produces '[Character]',\
    \ not the expected contextual result type 'String'\n    @inlinable public func\
    \ map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n          \
    \                 ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpum6fpclh/tmpum6fpclh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b0194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45afe8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45afe8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45afe8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum6fpclh                        0x000055d4e630b445 <unavailable> + 5189

    5    libc.so.6                          0x00002b45b0380460 __libc_start_main +
    245

    6    tmpum6fpclh                        0x000055d4e630af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    \n    var flippedString = \"\"\n    \n    for letter\
    \ in string {\n        if letter.isLowercase {\n            flippedString.append(letter.uppercased())\n\
    \        } else {\n            flippedString.append(letter.lowercased())\n   \
    \     }\n    }\n    \n    return flippedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var new_string = \"\"\n    for i in string {\n    \
    \    if(i.isUppercase){\n            new_string += String(i).lowercased()\n  \
    \      } else {\n            new_string += String(i).uppercased()\n        }\n\
    \    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var out = \"\"\n    for c in string {\n        let\
    \ cl = Character(String(c).lowercased())\n        if (cl == c) {\n           \
    \ out.append(Character(String(c).uppercased()))\n        } else {\n          \
    \  out.append(cl)\n        }\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_str = \"\"\n    for ch in string {\n  \
    \      if ch.isUppercase {\n            flipped_str.append(ch.lowercased())\n\
    \        } else {\n            flipped_str.append(ch.uppercased())\n        }\n\
    \    }\n    return flipped_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      newString += String(char.flipCase())\n    }\n    return newString\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa4547hj_.swift:8:34: error: value of type 'Character' has no member\
    \ 'flipCase'\n        newString += String(char.flipCase())\n                 \
    \           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { (character) -> Character in\n \
    \       let lowercased = character.lowercased()\n        if character == lowercased\
    \ {\n            return character.uppercased()\n        } else {\n           \
    \ return lowercased\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkg66hoyz.swift:8:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'String'\n      \
    \  if character == lowercased {\n           ~~~~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpkg66hoyz.swift:8:22:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if character == lowercased\
    \ {\n                     ^\n/tmp/tmpkg66hoyz.swift:6:19: error: cannot convert\
    \ return expression of type '[Character]' to return type 'String'\n    return\
    \ string.map { (character) -> Character in\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmphrzwkjah.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2stj_96a/tmp2stj_96a.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b65d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b62c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b62c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b62c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2stj_96a                        0x0000556b6cfc23f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b48b67bd460 __libc_start_main +
    245

    6    tmp2stj_96a                        0x0000556b6cfc1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   let scalar = char.unicodeScalars.first!\n        if scalar.isASCII {\n   \
    \         if scalar.isUppercase {\n                result.append(String(char).lowercased())\n\
    \            } else if scalar.isLowercase {\n                result.append(String(char).uppercased())\n\
    \            } else {\n                result.append(char)\n            }\n  \
    \      } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmps2xtor83.swift:10:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n            if scalar.isUppercase {\n             \
    \  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmps2xtor83.swift:12:30: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowercase'\n            } else if scalar.isLowercase {\n  \
    \                    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    \n    var flipped = \"\"\n    \n    for c in string\
    \ {\n        if c.isUppercase {\n            flipped.append(c.lowercased())\n\
    \        } else {\n            flipped.append(c.uppercased())\n        }\n   \
    \ }\n    \n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { char in\n        switch char {\n\
    \        case \"a\"...\"z\":\n            return String(char).uppercased()\n \
    \       case \"A\"...\"Z\":\n            return String(char).lowercased()\n  \
    \      default:\n            return String(char)\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa1wt6b82.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { char in\n \
    \          ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped: String = \"\"\n    for character in string\
    \ {\n        if is_upper(character: character) {\n            flipped.append(String(character).lowercased())\n\
    \        } else {\n            flipped.append(String(character).uppercased())\n\
    \        }\n    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmppfyhy2h1.swift:8:12: error: cannot find 'is_upper' in scope\n \
    \       if is_upper(character: character) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var new_string = \"\"\n    for char in string {\n \
    \       if let lowercase = char.lowercased().first, char == lowercase {\n    \
    \        new_string.append(char.uppercased())\n        } else if let uppercase\
    \ = char.uppercased().first, char == uppercase {\n            new_string.append(char.lowercased())\n\
    \        } else {\n            new_string.append(char)\n        }\n    }\n   \
    \ return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map { $0.isUpper ?\
    \ String($0).lowercased() : String($0).uppercased() })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpw0ldqpik.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.characters.map { $0.isUpper ? String($0).lowercased()\
    \ : String($0).uppercased() })\n           ^\n/tmp/tmpw0ldqpik.swift:6:12: note:\
    \ found candidate with type '([Character]) -> String'\n    return String(string.characters.map\
    \ { $0.isUpper ? String($0).lowercased() : String($0).uppercased() })\n      \
    \     ^\n/tmp/tmpw0ldqpik.swift:6:12: note: found candidate with type '([String])\
    \ -> String'\n    return String(string.characters.map { $0.isUpper ? String($0).lowercased()\
    \ : String($0).uppercased() })\n           ^\n/tmp/tmpw0ldqpik.swift:6:12: note:\
    \ found candidate with type '([String]) -> String'\n    return String(string.characters.map\
    \ { $0.isUpper ? String($0).lowercased() : String($0).uppercased() })\n      \
    \     ^\n/tmp/tmpw0ldqpik.swift:6:46: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isUpper'\n    return String(string.characters.map\
    \ { $0.isUpper ? String($0).lowercased() : String($0).uppercased() })\n      \
    \                                    ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { char in\n        if char.isLowercase\
    \ {\n            return char.uppercased()\n        } else {\n            return\
    \ char.lowercased()\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpie3xnj6a.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map { char in\n           ^\nSwift.Character:12:17:\
    \ note: found candidate with type 'String'\n    public func uppercased() -> String\n\
    \                ^\nSwift.Character:12:17: note: found candidate with type 'String'\n\
    \    public func uppercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2nllhj5y.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { character in\n        if character.isLowercase\
    \ {\n            return character.uppercased()\n        } else {\n           \
    \ return character.lowercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5c0i3x7s.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { character in\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for c in string {\n        if\
    \ c.isUppercase {\n            result.append(c.lowercased())\n        } else {\n\
    \            result.append(c.uppercased())\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      if let newChar = Character(flip_case(char: char)) {\n            newString.append(newChar)\n\
    \        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcjutut5l.swift:8:45: error: incorrect argument label in call (have\
    \ 'char:', expected 'string:')\n        if let newChar = Character(flip_case(char:\
    \ char)) {\n                                            ^~~~~\n              \
    \                               string\n/tmp/tmpcjutut5l.swift:8:52: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   if let newChar = Character(flip_case(char: char)) {\n                    \
    \                               ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpeneav5q7.swift:6:12: error: no exact matches in call to initializer\
    \ \n    return String(string.map { char in\n           ^\nSwift.Character:13:17:\
    \ note: found candidate with type 'String'\n    public func lowercased() -> String\n\
    \                ^\nSwift.Character:13:17: note: found candidate with type 'String'\n\
    \    public func lowercased() -> String\n                ^\nSwift.String:2:12:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4l4nk6us.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    let length = string.count\n\
    \    for i in 0..<length {\n        let character = string[string.index(string.startIndex,\
    \ offsetBy: i)]\n        let unicode = character.unicodeScalars\n        let flipped_character\
    \ = Character(unicode.first!.value ^ 1 << 5)\n        flipped_string.append(flipped_character)\n\
    \    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpe4708762.swift:11:33: error: no exact matches in call to initializer\
    \ \n        let flipped_character = Character(unicode.first!.value ^ 1 << 5)\n\
    \                                ^\nSwift.Character:2:23: note: candidate expects\
    \ value of type 'Unicode.Scalar' for parameter #1 (got 'UInt32')\n    @inlinable\
    \ public init(_ content: Unicode.Scalar)\n                      ^\nSwift.Character:6:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'UInt32')\n\
    \    @inlinable public init(_ s: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flip: String = \"\"\n    for char in string {\n\
    \        switch char {\n        case \"a\"...\"z\":\n            flip.append(char.uppercased())\n\
    \        case \"A\"...\"Z\":\n            flip.append(char.lowercased())\n   \
    \     default:\n            flip.append(char)\n        }\n    }\n    return flip\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  let uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var result = String()\n\
    \    for char in string {\n        if let index = lowercase.index(of: char) {\n\
    \            result.append(uppercase[index])\n        } else if let index = uppercase.index(of:\
    \ char) {\n            result.append(lowercase[index])\n        } else {\n   \
    \         result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  let chars = Array(string)\n  let flipped: [Character]\
    \ = chars.map {\n    if $0.isLowercase {\n      return Character($0.uppercased())\n\
    \    } else {\n      return Character($0.lowercased())\n    }\n  }\n  return String(flipped)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ lower = \"abcdefghijklmnopqrstuvwxyz\"\n    var result = \"\"\n    for char\
    \ in string {\n        if let index = upper.index(of: char) {\n            result.append(lower[index])\n\
    \        } else if let index = lower.index(of: char) {\n            result.append(upper[index])\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.uppercased().characters.map {\n\
    \        if CharacterSet.uppercaseLetters.contains($0.unicodeScalars.first!) {\n\
    \            return Character(String($0).lowercased())\n        } else {\n   \
    \         return Character(String($0).uppercased())\n        }\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkgiwn_e6.swift:7:12: error: cannot find 'CharacterSet' in scope\n\
    \        if CharacterSet.uppercaseLetters.contains($0.unicodeScalars.first!) {\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.reduce(\"\") { (result, char) in\n    let\
    \ stringChar = String(char)\n    if stringChar == stringChar.uppercased() {\n\
    \      return result + stringChar.lowercased()\n    } else {\n      return result\
    \ + stringChar.uppercased()\n    }\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { letter in\n        let lowercased\
    \ = String(letter).lowercased()\n        let uppercased = String(letter).uppercased()\n\
    \        if lowercased == String(letter) {\n            return uppercased\n  \
    \      } else {\n            return lowercased\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp92njcv3x.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { letter in\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let flipped = string.characters.map { character ->\
    \ Character in\n        if character.isUppercase {\n            return character.lowercased()\n\
    \        } else {\n            return character.uppercased()\n        }\n    }\n\
    \    return String(flipped)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8bvd5_k.swift:8:30: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n            return character.lowercased()\n\
    \                   ~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        switch $0 {\n        case\
    \ \"a\"...\"z\":\n            return String($0).uppercased()\n        case \"\
    A\"...\"Z\":\n            return String($0).lowercased()\n        default:\n \
    \           return String($0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpzbisg2ky.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpwe02md59.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let myString = string\n    let newString = String(myString.map\
    \ { $0.isUppercase ? $0.lowercased() : $0.uppercased() })\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpt_v1xien.swift:7:21: error: type of expression is ambiguous without\
    \ more context\n    let newString = String(myString.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4l4nk6us.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {$0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpeo9ayna9.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {$0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()}\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for char in string {\n\
    \        if isLowerCase(char: char) {\n            flippedString.append(String(char).uppercased())\n\
    \        } else {\n            flippedString.append(String(char).lowercased())\n\
    \        }\n    }\n    return flippedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcw13z8dp.swift:8:12: error: cannot find 'isLowerCase' in scope\n\
    \        if isLowerCase(char: char) {\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map({ (character) -> Character in\n \
    \       let lowercase = CharacterSet.lowercaseLetters\n        let uppercase =\
    \ CharacterSet.uppercaseLetters\n        let isLowercase = lowercase.contains(character.unicodeScalars.first!)\n\
    \        let isUppercase = uppercase.contains(character.unicodeScalars.first!)\n\
    \        if isLowercase {\n            return character.uppercased()\n       \
    \ } else if isUppercase {\n            return character.lowercased()\n       \
    \ } else {\n            return character\n        }\n    }).reduce(\"\", +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpx4hj5cif.swift:7:25: error: cannot find 'CharacterSet' in scope\n\
    \        let lowercase = CharacterSet.lowercaseLetters\n                     \
    \   ^~~~~~~~~~~~\n/tmp/tmpx4hj5cif.swift:8:25: error: cannot find 'CharacterSet'\
    \ in scope\n        let uppercase = CharacterSet.uppercaseLetters\n          \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp4l4nk6us.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    \n    var result = \"\"\n    \n    for char in string\
    \ {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    \n    let characters = Array(string)\n    var output\
    \ = [Character]()\n    \n    for char in characters {\n        let char = char.uppercased()\
    \ == char ? char.lowercased() : char.uppercased()\n        output.append(char)\n\
    \    }\n    \n    return String(output)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpyzdzxx65.swift:11:38: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \  let char = char.uppercased() == char ? char.lowercased() : char.uppercased()\n\
    \                   ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmpyzdzxx65.swift:11:38: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        let char = char.uppercased() == char ?\
    \ char.lowercased() : char.uppercased()\n                                    \
    \ ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpoq6wbjcc.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpz8gtfgd3.swift:6:17: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n  return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let flip: (Character) -> Character = { char in\n  \
    \      if char.isLowercase {\n            return char.uppercased()\n        }\
    \ else {\n            return char.lowercased()\n        }\n    }\n    return String(string.map(flip))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpvab6mthz.swift:8:25: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n            return char.uppercased()\n\
    \                   ~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu1e5b40r.swift:6:17: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n  return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var string_copy = string\n    for character in string_copy.characters\
    \ {\n        string_copy = string_copy.replacingOccurrences(of: String(character),\
    \ with: String(character).flip_case())\n    }\n    return string_copy\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmper2z7k11.swift:7:34: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in string_copy.characters {\n       \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmper2z7k11.swift:8:35: error: value of type 'String' has\
    \ no member 'replacingOccurrences'\n        string_copy = string_copy.replacingOccurrences(of:\
    \ String(character), with: String(character).flip_case())\n                  \
    \    ~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmper2z7k11.swift:8:103: error: value\
    \ of type 'String' has no member 'flip_case'\n        string_copy = string_copy.replacingOccurrences(of:\
    \ String(character), with: String(character).flip_case())\n                  \
    \                                                                  ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var str = string\n    str = str.lowercased()\n    return\
    \ str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp51h6bw24/tmp51h6bw24.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6364eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6364be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6364be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6364be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51h6bw24                        0x000055e9babd1445 <unavailable> + 5189

    5    libc.so.6                          0x00002b63650db460 __libc_start_main +
    245

    6    tmp51h6bw24                        0x000055e9babd0f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let letters = string.map { (letter) -> String in\n\
    \        return letter.isLowercase ? letter.uppercased() : letter.lowercased()\n\
    \    }\n    return letters.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    \n    return string.map { character -> Character in\n\
    \        if character.isUppercase {\n            return character.lowercased()\n\
    \        } else {\n            return character.uppercased()\n        }\n    }\n\
    \    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\"\
    ) == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_h6kkqks.swift:7:19: error: no 'map' candidates produce the expected\
    \ contextual result type 'String'\n    return string.map { character -> Character\
    \ in\n                  ^\nSwift.Collection:2:28: note: 'map' produces '[Character]',\
    \ not the expected contextual result type 'String'\n    @inlinable public func\
    \ map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n          \
    \                 ^\nSwift.Sequence:2:28: note: 'map' produces '[Character]',\
    \ not the expected contextual result type 'String'\n    @inlinable public func\
    \ map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n          \
    \                 ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  var flippedString = \"\"\n  for char in string {\n  \
    \  if char.isUppercase {\n      flippedString.append(char.lowercased())\n    }\
    \ else {\n      flippedString.append(char.uppercased())\n    }\n  }\n  return\
    \ flippedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { (char: Character) -> Character\
    \ in\n        if char.isLowercase {\n            return char.uppercased()\n  \
    \      } else {\n            return char.lowercased()\n        }\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpp1vwymvl.swift:6:19: error: no 'map' candidates produce the expected\
    \ contextual result type 'String'\n    return string.map { (char: Character) ->\
    \ Character in\n                  ^\nSwift.Collection:2:28: note: 'map' produces\
    \ '[Character]', not the expected contextual result type 'String'\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\nSwift.Sequence:2:28: note: 'map' produces '[Character]',\
    \ not the expected contextual result type 'String'\n    @inlinable public func\
    \ map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n          \
    \                 ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result: String = \"\"\n    for letter in string\
    \ {\n        switch letter {\n        case \"a\"...\"z\":\n            result.append(letter.uppercased())\n\
    \        case \"A\"...\"Z\":\n            result.append(letter.lowercased())\n\
    \        default:\n            result.append(letter)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpum6fpclh/tmpum6fpclh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b0194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45afe8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45afe8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45afe8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum6fpclh                        0x000055d4e630b445 <unavailable> + 5189

    5    libc.so.6                          0x00002b45b0380460 __libc_start_main +
    245

    6    tmpum6fpclh                        0x000055d4e630af99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ldc0ezp.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  var result = \"\"\n  for char in string {\n    let str\
    \ = String(char)\n    result += str.lowercased() == str ? str.uppercased() : str.lowercased()\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result: String = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  return String(string.map { (character) -> Character in\n\
    \    var result = character\n    if result.isUppercase {\n      result = result.lowercased()\n\
    \    } else if result.isLowercase {\n      result = result.uppercased()\n    }\n\
    \    return result\n  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp8f1cx6hp.swift:9:23: error: cannot assign value of type 'String'\
    \ to type 'String.Element' (aka 'Character')\n      result = result.lowercased()\n\
    \               ~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let flipped = string.map {\n        $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased()\n    }\n    return String(flipped)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsnvp837.swift:9:12: error: no exact matches in call to initializer\
    \ \n    return String(flipped)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String' and 'Character' be equivalent (requirement\
    \ specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S)\
    \ where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map({$0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()}))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3h79b0b1.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map({$0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()}))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let components = string.components(separatedBy: CharacterSet.letters.inverted)\n\
    \    let reversed = components.map { String($0.reversed()) }\n    return reversed.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpjuayjisr.swift:6:53: error: cannot find 'CharacterSet' in scope\n\
    \    let components = string.components(separatedBy: CharacterSet.letters.inverted)\n\
    \                                                    ^~~~~~~~~~~~\n/tmp/tmpjuayjisr.swift:6:29:\
    \ error: value of type 'String' has no member 'components'\n    let components\
    \ = string.components(separatedBy: CharacterSet.letters.inverted)\n          \
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let to_flip = { s in s.lowercased() == s ? s.uppercased()\
    \ : s.lowercased() }\n    return string.map { to_flip($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfg9p6x3d.swift:7:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { to_flip($0)\
    \ }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfg9p6x3d.swift:7:33: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n    return string.map { to_flip($0) }\n            \
    \                    ^\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var new_string = \"\"\n    for char in string {\n \
    \       switch char {\n        case \"a\"...\"z\":\n            new_string.append(String(char).uppercased())\n\
    \        case \"A\"...\"Z\":\n            new_string.append(String(char).lowercased())\n\
    \        default:\n            new_string.append(char)\n        }\n    }\n   \
    \ return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n  let chars = string.compactMap { char -> Character? in\n\
    \    switch char {\n    case \"a\"...\"z\":\n      return Character(char.uppercased())\n\
    \    case \"A\"...\"Z\":\n      return Character(char.lowercased())\n    default:\n\
    \      return nil\n    }\n  }\n  return String(chars)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp6a0sf4w1/tmp6a0sf4w1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6e8480c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6e8177b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6e8177988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6e81767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6a0sf4w1                        0x00005616d95338e5 <unavailable> + 6373

    5    libc.so.6                          0x00002ac6e866c460 __libc_start_main +
    245

    6    tmp6a0sf4w1                        0x00005616d9533439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { char in\n        if char.isLowercase\
    \ {\n            return String(char).uppercased()\n        } else {\n        \
    \    return String(char).lowercased()\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmlhi3w96.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { char in\n \
    \          ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for ch in string {\n      \
    \  if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\
    \ else {\n            flipped.append(ch.uppercased())\n        }\n    }\n    return\
    \ flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isLowercase {\n\
    \            return $0.uppercased()\n        } else {\n            return $0.lowercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpme9txvtw.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for letter in string {\n\
    \        if letter.isUppercase {\n            newString.append(letter.lowercased())\n\
    \        } else {\n            newString.append(letter.uppercased())\n       \
    \ }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpoq6wbjcc.swift:6:12: error: type of expression is ambiguous without\
    \ more context\n    return String(string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    // TODO: Implement\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmps8pvcx4z/tmps8pvcx4z.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc5a2e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc59fdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc59fda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc59fd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8pvcx4z                        0x0000562e225343f5 <unavailable> + 5109

    5    libc.so.6                          0x00002adc5a4cf460 __libc_start_main +
    245

    6    tmps8pvcx4z                        0x0000562e22533f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map({\n        $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased()\n    }).joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map { $0.isUpper ?\
    \ Character($0.lowercased()) : Character($0.uppercased()) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9brwbsr_.swift:6:46: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isUpper'\n    return String(string.characters.map\
    \ { $0.isUpper ? Character($0.lowercased()) : Character($0.uppercased()) })\n\
    \                                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result: String = \"\"\n    for c in string {\n\
    \        let upper = String(c).uppercased()\n        if upper == String(c) {\n\
    \            result.append(contentsOf: String(c).lowercased())\n        } else\
    \ {\n            result.append(contentsOf: upper)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978928
