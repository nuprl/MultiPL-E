name: HumanEval_153_Strongest_Extension
language: swift
prompt: "\n/// You will be given the name of a class (a string) and an array of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ array.\n/// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name:\
  \ \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc\
  \ Strongest_Extension(class_name: String, extensions: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\"\
  , extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
  \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
  ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
  , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
  ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
  \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
  \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
  )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\",\
  \ \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\
  assert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"\
  NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
  \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
  \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
completions: ["    let CAPs = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let SMs = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var strengths = [Float]()\n    for i in 0..<extensions.count {\n       \
    \ var CAP = 0\n        var SM = 0\n        for j in 0..<extensions[i].count {\n\
    \            for a in 0..<CAPs.count {\n                if extensions[i][j] ==\
    \ CAPs[a] {\n                    CAP += 1\n                }\n            }\n\
    \            for b in 0..<SMs.count {\n                if extensions[i][j] ==\
    \ SMs[b] {\n                    SM += 1\n                }\n            }\n  \
    \      }\n        strengths.append(Float(CAP - SM))\n    }\n    let max = strengths.max()\n\
    \    let index = strengths.firstIndex(of: max!)\n    return class_name + \".\"\
    \ + extensions[index!]", "    var fraction = 0.0\n    var fraction_ind = 0\n \
    \   for i in 0..<extensions.count {\n        let cap = Double(extensions[i].uppercased().filter\
    \ {\n            CharacterSet.uppercaseLetters.contains($0.unicodeScalars.first!)\n\
    \        }.count)\n        let sm = Double(extensions[i].lowercased().filter {\n\
    \            CharacterSet.lowercaseLetters.contains($0.unicodeScalars.first!)\n\
    \        }.count)\n        let extension_fraction = cap - sm\n        if extension_fraction\
    \ > fraction {\n            fraction = extension_fraction\n            fraction_ind\
    \ = i\n        }\n    }\n    return \"\\(class_name).\\(extensions[fraction_ind])\"",
  "    var strongest = [String]()\n    var strongest_score = 0\n    for extension_\
    \ in extensions {\n        var score = 0\n        for letter in extension_ {\n\
    \            if letter.isUppercase {\n                score += 1\n           \
    \ } else {\n                score -= 1\n            }\n        }\n        if score\
    \ == strongest_score {\n            strongest.append(extension_)\n        } else\
    \ if score > strongest_score {\n            strongest = [extension_]\n       \
    \     strongest_score = score\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest[0])\"", "    var strongest_extension = \"\"\n    var strongest_strength\
    \ = -100000\n    for extension_name in extensions {\n        var capital_letter_count\
    \ = 0\n        var small_letter_count = 0\n        for letter in extension_name\
    \ {\n            if String(letter).uppercased() == String(letter) {\n        \
    \        capital_letter_count += 1\n            } else {\n                small_letter_count\
    \ += 1\n            }\n        }\n        let strength = Double(capital_letter_count)\
    \ - Double(small_letter_count)\n        if strength > strongest_strength {\n \
    \           strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", "\t\
    return \"Implement this\"", "    var strongest_extension = extensions[0]\n   \
    \ var strongest_strength = 0\n    for i in 0..<extensions.count {\n        var\
    \ cap = 0\n        var sm = 0\n        for j in 0..<extensions[i].count {\n  \
    \          if \"A\"...\"Z\" ~= extensions[i][extensions[i].index(extensions[i].startIndex,\
    \ offsetBy: j)] {\n                cap += 1\n            } else {\n          \
    \      sm += 1\n            }\n        }\n        if cap - sm > strongest_strength\
    \ {\n            strongest_strength = cap - sm\n            strongest_extension\
    \ = extensions[i]\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension: String = \"null\"\n    var strongest_extension_strength:\
    \ Double = 0.0\n    for extension_name in extensions {\n        var extension_strength:\
    \ Double = 0.0\n        for character in extension_name {\n            if character.isUppercase\
    \ {\n                extension_strength += 1\n            } else {\n         \
    \       extension_strength -= 1\n            }\n        }\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension", "    var max: String\
    \ = extensions[0]\n    var num_cap = 0\n    var num_low = 0\n    for char in max\
    \ {\n        if char.isUppercase {\n            num_cap += 1\n        } else {\n\
    \            num_low += 1\n        }\n    }\n    var biggest = num_cap - num_low\n\
    \    for ext in extensions {\n        var cap = 0\n        var low = 0\n     \
    \   for char in ext {\n            if char.isUppercase {\n                cap\
    \ += 1\n            } else {\n                low += 1\n            }\n      \
    \  }\n        let strength = cap - low\n        if strength > biggest {\n    \
    \        biggest = strength\n            max = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(max)\"", "    let cap_regex = \"([A-Z])\"\n    let sm_regex\
    \ = \"([a-z])\"\n    var strength = -Double.infinity\n    var strongest_extension\
    \ = \"\"\n    for extension_ in extensions {\n        var cap_matches = find_all_matches(input:\
    \ extension_, regex: cap_regex)\n        var sm_matches = find_all_matches(input:\
    \ extension_, regex: sm_regex)\n        var cap_count = Double(cap_matches.count)\n\
    \        var sm_count = Double(sm_matches.count)\n        var current_strength\
    \ = cap_count - sm_count\n        if current_strength > strength {\n         \
    \   strength = current_strength\n            strongest_extension = extension_\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", '    return
    ""', "  var strongest_extension = \"\";\n  var strongest_strength = 0.0;\n  for\
    \ extension_ in extensions {\n    var strength = 0.0;\n    for letter in extension_\
    \ {\n      if letter.isUppercase {\n        strength += 1.0;\n      } else {\n\
    \        strength -= 1.0;\n      }\n    }\n    if strength > strongest_strength\
    \ {\n      strongest_strength = strength;\n      strongest_extension = extension_;\n\
    \    }\n  }\n  return \"\\(class_name).\\(strongest_extension)\";", '    // Put
    your code here.', '    // You code here!', "    var strongest_extension: String\
    \ = \"\";\n    var max_strength: Double = -1.0;\n    for ext in extensions {\n\
    \        let cap = ext.uppercased().characters.filter {$0 >= \"A\" && $0 <= \"\
    Z\"}.count;\n        let sm = ext.characters.filter {$0 >= \"a\" && $0 <= \"z\"\
    }.count;\n        let strength = Double(cap) - Double(sm);\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = ext;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    var max = -1.0\n    var s = \"\"\n    for i in extensions {\n        var upper\
    \ = 0\n        var lower = 0\n        for char in i {\n            if char.isUppercase\
    \ {\n                upper += 1\n            } else {\n                lower +=\
    \ 1\n            }\n        }\n        let current = Double(upper) - Double(lower)\n\
    \        if current > max {\n            max = current\n            s = i\n  \
    \      }\n    }\n    return \"\\(class_name).\\(s)\"", "    let class_name = class_name\n\
    \    var extensions = extensions\n    var strong = extensions[0]\n    var strong_num\
    \ = 0.0\n    var ext_num = 0.0\n    for extension_name in extensions {\n     \
    \   for letter in extension_name {\n            if letter.isUppercase {\n    \
    \            ext_num += 1\n            } else {\n                ext_num -= 1\n\
    \            }\n        }\n        if ext_num > strong_num {\n            strong_num\
    \ = ext_num\n            strong = extension_name\n        }\n        ext_num =\
    \ 0\n    }\n    let result = \"\\(class_name).\\(strong)\"\n    return result",
  "    // Write your code here.\n    return \"\"", "    var strongest = [\"class\"\
    \ : class_name, \"extension\" : \"\", \"strength\" : 0]\n    for ext in extensions\
    \ {\n        var capital_count = 0\n        var small_count = 0\n        for letter\
    \ in ext {\n            if letter.isUppercase {\n                capital_count\
    \ += 1\n            } else {\n                small_count += 1\n            }\n\
    \        }\n        let strength = capital_count - small_count\n        if strength\
    \ > strongest[\"strength\"]! {\n            strongest[\"extension\"] = ext\n \
    \           strongest[\"strength\"] = strength\n        }\n    }\n    return strongest[\"\
    class\"]! + \".\" + strongest[\"extension\"]!", "    var strongest_extension:\
    \ String = \"\"\n    var strongest_strength: Float = 0.0\n    for extension_name\
    \ in extensions {\n        var num_upper: Int = 0\n        var num_lower: Int\
    \ = 0\n        for char in extension_name {\n            if char.isUppercase {\n\
    \                num_upper += 1\n            } else {\n                num_lower\
    \ += 1\n            }\n        }\n        let strength: Float = Float(num_upper)\
    \ - Float(num_lower)\n        if strength > strongest_strength {\n           \
    \ strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", " \
    \   let upp = \"[A-Z]\"\n    let low = \"[a-z]\"\n    var strongest = 0.0\n  \
    \  var strongest_str = String()\n    for ext in extensions {\n        let reg\
    \ = try! NSRegularExpression(pattern: upp, options: [])\n        let uppercase_number\
    \ = reg.numberOfMatches(in: ext, options: [], range: NSRange(location: 0, length:\
    \ ext.count))\n        let reg2 = try! NSRegularExpression(pattern: low, options:\
    \ [])\n        let lowercase_number = reg2.numberOfMatches(in: ext, options: [],\
    \ range: NSRange(location: 0, length: ext.count))\n        let strength = Double(uppercase_number)\
    \ - Double(lowercase_number)\n        if strength > strongest {\n            strongest\
    \ = strength\n            strongest_str = ext\n        }\n    }\n    return \"\
    \\(class_name).\\(strongest_str)\"", "    // Get strength of each extensions\n\
    \    var strengths = [Double]()\n    for ext in extensions {\n        var CAP_count\
    \ = 0\n        var SM_count = 0\n        for char in ext {\n            if char.isUppercase\
    \ {\n                CAP_count += 1\n            } else {\n                SM_count\
    \ += 1\n            }\n        }\n        let strength = Double(CAP_count) - Double(SM_count)\n\
    \        strengths.append(strength)\n    }\n    // Get the max strength and the\
    \ index\n    var (max_strength, idx) = (strengths[0], 0)\n    for i in 1..<strengths.count\
    \ {\n        if strengths[i] > max_strength {\n            max_strength = strengths[i]\n\
    \            idx = i\n        }\n    }\n    // Return the string\n    return \"\
    \\(class_name).\\(extensions[idx])\"", "    let uppercase_reg_ex = \"([A-Z])\"\
    \n    let lowercase_reg_ex = \"([a-z])\"\n    var uppercase_cap = 0\n    var lowercase_sm\
    \ = 0\n    var curr_extension = \"\"\n    var strongest_extension = \"\"\n   \
    \ var strength = 0.0\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        let uppercase_matches = matches_for_reg_ex(reg_ex:\
    \ uppercase_reg_ex, string: extension_name)\n        let lowercase_matches = matches_for_reg_ex(reg_ex:\
    \ lowercase_reg_ex, string: extension_name)\n        uppercase_cap = uppercase_matches.count\n\
    \        lowercase_sm = lowercase_matches.count\n        strength = Double(uppercase_cap)\
    \ - Double(lowercase_sm)\n        if strength > strongest_strength {\n       \
    \     strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", " \
    \   let strength = extensions.map { (str) -> Int in\n        var numOfUpper =\
    \ 0\n        var numOfLower = 0\n        for char in str {\n            if char.isUppercase\
    \ {\n                numOfUpper += 1\n            } else {\n                numOfLower\
    \ += 1\n            }\n        }\n        return numOfUpper - numOfLower\n   \
    \ }\n    let strongestIndex = strength.firstIndex(of: strength.max()!)!\n    return\
    \ \"\\(class_name).\\(extensions[strongestIndex])\"", "    var strength = 0\n\
    \    var answer = \"\"\n    for extension_ in extensions {\n        var cap =\
    \ 0\n        var sm = 0\n        for letter in extension_ {\n            if String(letter).uppercased()\
    \ == String(letter) {\n                cap += 1\n            } else {\n      \
    \          sm += 1\n            }\n        }\n        if strength < cap - sm {\n\
    \            strength = cap - sm\n            answer = extension_\n        }\n\
    \    }\n    return class_name + \".\" + answer", "    if extensions.count == 0\
    \ {\n        return \"\\(class_name)\"\n    }\n    var strongestExtension: String\
    \ = extensions[0]\n    var maxStrength: Double = -Double.infinity\n    for ext\
    \ in extensions {\n        let cap = ext.filter { $0.isUppercase }.count\n   \
    \     let sm = ext.filter { $0.isLowercase }.count\n        let strength = Double(cap)\
    \ - Double(sm)\n        if strength > maxStrength {\n            maxStrength =\
    \ strength\n            strongestExtension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongestExtension)\"", "    var strongest = \".\"\n   \
    \ var strongest_strength = 0\n    for extension_name in extensions {\n       \
    \ var cap = 0\n        var sm = 0\n        for char in extension_name {\n    \
    \        if char.isUppercase {\n                cap += 1\n            } else {\n\
    \                sm += 1\n            }\n        }\n        let strength = cap\
    \ - sm\n        if strength > strongest_strength {\n            strongest = extension_name\n\
    \            strongest_strength = strength\n        }\n    }\n    return class_name\
    \ + \".\" + strongest", "    var strongest_extension = \"\"\n    var strongest_extension_strength\
    \ = 0.0\n    for ext in extensions {\n        var number_of_uppercase_letters\
    \ = 0\n        var number_of_lowercase_letters = 0\n        for c in ext {\n \
    \           if c.isUppercase {\n                number_of_uppercase_letters +=\
    \ 1\n            } else if c.isLowercase {\n                number_of_lowercase_letters\
    \ += 1\n            }\n        }\n        let strength = Double(number_of_uppercase_letters)\
    \ - Double(number_of_lowercase_letters)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = ext\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest = extensions[0]\n    var strongest_strength = 0\n    var current_strength\
    \ = 0\n    for name in extensions {\n        for char in name {\n            if\
    \ char.isUppercase {\n                current_strength += 1\n            } else\
    \ {\n                current_strength -= 1\n            }\n        }\n       \
    \ if current_strength > strongest_strength {\n            strongest = name\n \
    \           strongest_strength = current_strength\n        }\n        current_strength\
    \ = 0\n    }\n    return \"\\(class_name).\\(strongest)\"", "    var res = class_name\n\
    \    var max = -100\n    for e in extensions {\n        var cap = 0\n        var\
    \ sm = 0\n        for i in e {\n            if i.isUppercase {\n             \
    \   cap += 1\n            } else {\n                sm += 1\n            }\n \
    \       }\n        if max < (cap - sm) {\n            max = cap - sm\n       \
    \     res += \".\" + e\n        }\n    }\n    return res", "    var strongest_ext\
    \ = \"\"\n    var strongest_ext_str = 0\n    for ext in extensions {\n       \
    \ var cap = 0\n        var sm = 0\n        for ch in ext {\n            if String(ch).uppercased()\
    \ == String(ch) {\n                cap += 1\n            } else {\n          \
    \      sm += 1\n            }\n        }\n        if abs(cap - sm) > strongest_ext_str\
    \ {\n            strongest_ext_str = abs(cap - sm)\n            strongest_ext\
    \ = ext\n        }\n    }\n    return class_name + \".\" + strongest_ext", "\t\
    let class_name = class_name\n\tvar strongest = 0\n\tvar str = \"\"\n\tfor i in\
    \ extensions {\n\t\tvar str_length = i.count\n\t\tvar upp_count = 0\n\t\tvar low_count\
    \ = 0\n\t\tfor j in i {\n\t\t\tif j.isUppercase {\n\t\t\t\tupp_count += 1\n\t\t\
    \t} else {\n\t\t\t\tlow_count += 1\n\t\t\t}\n\t\t}\n\t\tlet strength = Float(upp_count\
    \ - low_count) / Float(str_length)\n\t\tif strength >= strongest {\n\t\t\tstrongest\
    \ = strength\n\t\t\tstr = i\n\t\t}\n\t}\n\treturn \"\\(class_name).\\(str)\"",
  "    var strongestExtension = extensions[0]\n    var strongestExtensionCapCount\
    \ = 0\n    var strongestExtensionSmallCount = 0\n    for i in 0..<extensions.count\
    \ {\n        var capsCount = 0\n        var smallCount = 0\n        for j in 0..<extensions[i].count\
    \ {\n            let strArr = Array(extensions[i])\n            if isUpperCase(str:\
    \ strArr[j]) {\n                capsCount += 1\n            } else {\n       \
    \         smallCount += 1\n            }\n        }\n        if (capsCount - smallCount)\
    \ > (strongestExtensionCapCount - strongestExtensionSmallCount) {\n          \
    \  strongestExtension = extensions[i]\n            strongestExtensionCapCount\
    \ = capsCount\n            strongestExtensionSmallCount = smallCount\n       \
    \ }\n    }\n    return class_name + \".\" + strongestExtension", "  var strength_and_name\
    \ = [\"\", class_name, 0.0]\n  for ext in extensions {\n    var strength = 0.0\n\
    \    for char in ext {\n      if char.isUppercase {\n        strength += 1\n \
    \     } else {\n        strength -= 1\n      }\n    }\n    if strength > strength_and_name[2]\
    \ {\n      strength_and_name = [ext, class_name, strength]\n    }\n  }\n  return\
    \ strength_and_name[1] + \".\" + strength_and_name[0]", "    var strongest: String\
    \ = \"\"\n    var strongest_strength: Float = 0.0\n    for extension_ in extensions\
    \ {\n        let strength = strength_of_extension(extension_: extension_)\n  \
    \      if strength > strongest_strength {\n            strongest = extension_\n\
    \            strongest_strength = strength\n        }\n    }\n    return class_name\
    \ + \".\" + strongest", "    let strongest_extension_index = strongest_extension_index_helper(extensions:\
    \ extensions)\n    return class_name + \".\" + extensions[strongest_extension_index]",
  '    return ""', "    let sorted = extensions.sorted(by: {extension_name in \n \
    \       let a = extension_name.uppercased().filter{$0.isUppercase}.count\n   \
    \     let b = extension_name.lowercased().filter{$0.isLowercase}.count\n     \
    \   return a - b\n    })\n    return class_name + \".\" + sorted.last!", "   \
    \ if extensions.count < 1 { return \"There are no extensions to \\(class_name)\"\
    \ }\n    if extensions.count == 1 { return \"\\(class_name).\\(extensions[0])\"\
    \ }\n    var differences = [Int]()\n    var extension_dict = [String: Int]()\n\
    \    var strongest_extension = \"\"\n    var strongest_score = 0\n    var extension_score\
    \ = 0\n    for ext in extensions {\n        for char in ext {\n            if\
    \ char.isUppercase { extension_score += 1 }\n            if char.isLowercase {\
    \ extension_score -= 1 }\n        }\n        differences.append(extension_score)\n\
    \        extension_dict[ext] = extension_score\n        extension_score = 0\n\
    \    }\n    for (key, value) in extension_dict {\n        if value > strongest_score\
    \ {\n            strongest_score = value\n            strongest_extension = key\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", "\t\
    var output = class_name + \".\"\n\tvar strongest_strength = 0.0\n\tvar strongest_index\
    \ = 0\n\tfor (index, extension) in extensions.enumerated() {\n\t\tvar strength\
    \ = 0.0\n\t\tfor i in extension {\n\t\t\tif i.isUppercase {\n\t\t\t\tstrength\
    \ += 1\n\t\t\t} else {\n\t\t\t\tstrength -= 1\n\t\t\t}\n\t\t}\n\t\tif strength\
    \ > strongest_strength {\n\t\t\tstrongest_strength = strength\n\t\t\tstrongest_index\
    \ = index\n\t\t}\n\t}\n\toutput += extensions[strongest_index]\n\treturn output",
  "    var strongest = \"\"\n    var strongest_strength = 0\n    for extension in\
    \ extensions {\n        var strength = 0\n        for letter in extension {\n\
    \            if letter.isUppercase {\n                strength += 1\n        \
    \    } else {\n                strength -= 1\n            }\n        }\n     \
    \   if strength > strongest_strength {\n            strongest = extension\n  \
    \          strongest_strength = strength\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", '    return ""', "    let extensions = extensions.map { ($0, strength($0))\
    \ }\n    let (strongest, _) = extensions.max(by: { $0.1 < $1.1 }) ?? (\"\", 0)\n\
    \    return \"\\(class_name).\\(strongest ?? \"\")\"", "    var strongest = \"\
    \"\n    var strength = 0\n    for extension_name in extensions {\n        var\
    \ current_strength = 0\n        for char in extension_name {\n            if char.isUppercase\
    \ {\n                current_strength += 1\n            } else {\n           \
    \     current_strength -= 1\n            }\n        }\n        if current_strength\
    \ > strength {\n            strength = current_strength\n            strongest\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest)\"",
  "\tvar strength = -9999\n\tvar strongest_extension = \"\"\n\tvar current_strength\
    \ = 0\n\tfor ext in extensions {\n\t\tcurrent_strength = ext.filter({$0.isUppercase}).count\
    \ - ext.filter({$0.isLowercase}).count\n\t\tif current_strength > strength {\n\
    \t\t\tstrength = current_strength\n\t\t\tstrongest_extension = ext\n\t\t}\n\t\
    }\n\treturn \"\\(class_name).\\(strongest_extension)\"", "    let cap_sm_dict\
    \ = [Character: Int]()\n    var strongest = extensions[0]\n    var max_strength\
    \ = 0.0\n    for extension in extensions {\n        var cap = 0\n        var sm\
    \ = 0\n        for letter in extension {\n            if letter.isUppercase {\n\
    \                cap += 1\n            } else {\n                sm += 1\n   \
    \         }\n        }\n        let strength = Double(cap) - Double(sm)\n    \
    \    if strength > max_strength {\n            max_strength = strength\n     \
    \       strongest = extension\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", "    var strongest_index = 0\n    var strongest_strength = 0\n\
    \    for (index, ext) in extensions.enumerated() {\n        let caps = ext.uppercased().replacingOccurrences(of:\
    \ \"[^A-Z]\", with: \"\", options: .regularExpression)\n        let sm = ext.lowercased().replacingOccurrences(of:\
    \ \"[^a-z]\", with: \"\", options: .regularExpression)\n        let strength =\
    \ caps.count - sm.count\n        if strength > strongest_strength {\n        \
    \    strongest_index = index\n            strongest_strength = strength\n    \
    \    }\n    }\n    return \"\\(class_name).\\(extensions[strongest_index])\"",
  "    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_\
    \ in extensions {\n        let cap = extension_.uppercased().filter({ $0 >= \"\
    A\" && $0 <= \"Z\" }).count\n        let sm = extension_.lowercased().filter({\
    \ $0 >= \"a\" && $0 <= \"z\" }).count\n        let strength = Double(cap) - Double(sm)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_\n        }\n    }\n \
    \   return \"\\(class_name).\\(strongest_extension)\"", "    var strongest_extension\
    \ = extensions[0]\n    var strength = 0\n    var strength_of_current_extension\
    \ = 0\n    for ext in extensions {\n        strength_of_current_extension = strength_of_extension(extension:\
    \ ext)\n        if strength_of_current_extension > strength {\n            strength\
    \ = strength_of_current_extension\n            strongest_extension = ext\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension", "    var\
    \ max_strength = 0.0\n    var min_index = 0\n    for (index, extension) in extensions.enumerated()\
    \ {\n        var upper_case_letters = 0\n        var lower_case_letters = 0\n\
    \        for char in extension {\n            switch char {\n            case\
    \ \"A\"...\"Z\":\n                upper_case_letters += 1\n            case \"\
    a\"...\"z\":\n                lower_case_letters += 1\n            default:\n\
    \                break\n            }\n        }\n        if (Double(upper_case_letters)\
    \ - Double(lower_case_letters)) > max_strength {\n            max_strength = Double(upper_case_letters)\
    \ - Double(lower_case_letters)\n            min_index = index\n        }\n   \
    \ }\n    return \"\\(class_name).\\(extensions[min_index])\"", "    let sorted\
    \ = extensions.sorted { (first, second) -> Bool in\n        let numUpFirst = first.filter{\
    \ $0.isUppercase }.count\n        let numLoFirst = first.filter{ $0.isLowercase\
    \ }.count\n        let strengthFirst = Double(numUpFirst - numLoFirst) / Double(first.count)\n\
    \        \n        let numUpSecond = second.filter{ $0.isUppercase }.count\n \
    \       let numLoSecond = second.filter{ $0.isLowercase }.count\n        let strengthSecond\
    \ = Double(numUpSecond - numLoSecond) / Double(second.count)\n        \n     \
    \   return strengthFirst > strengthSecond\n    }\n    return \"\\(class_name).\\\
    (sorted.first!)\"", "\treturn class_name + \".\" + extensions.reduce((\"\", 0),\
    \ { (prev, curr) -> (String, Int) in\n\t\tlet a = curr.filter { $0.isUppercase\
    \ }.count\n\t\tlet b = curr.filter { $0.isLowercase }.count\n\t\tif a - b > prev.1\
    \ {\n\t\t\treturn (curr, a - b)\n\t\t}\n\t\treturn prev\n\t}).0", "    var strongest\
    \ = 0\n    var index = 0\n    for (i, letter) in extensions.enumerated() {\n \
    \       var cap = 0\n        var small = 0\n        for each in letter {\n   \
    \         if each.isUppercase {\n                cap += 1\n            } else\
    \ {\n                small += 1\n            }\n        }\n        let x = cap\
    \ - small\n        if x > strongest {\n            strongest = x\n           \
    \ index = i\n        }\n    }\n    return class_name + \".\" + extensions[index]",
  "  let strength = strength_extensions(extensions: extensions)\n  let max_strength\
    \ = strength.max { a, b in a.value < b.value }\n  return \"\\(class_name).\\(max_strength!.key)\"",
  "  var strongest = 0.0\n  var strongest_index = 0\n  for (index, ext) in extensions.enumerated()\
    \ {\n    let cap = ext.filter{$0.isUppercase}.count\n    let sm = ext.filter{$0.isLowercase}.count\n\
    \    let fraction = Double(cap) - Double(sm)\n    if fraction > strongest {\n\
    \      strongest = fraction\n      strongest_index = index\n    }\n  }\n  return\
    \ \"\\(class_name).\\(extensions[strongest_index])\"", "    var strongest_extension:\
    \ String = \"\"\n    var strongest_extension_strength: Double = 0.0\n    var index:\
    \ Int = 0\n    while index < extensions.count {\n        var extension_name: String\
    \ = extensions[index]\n        var capital_count: Int = 0\n        var small_count:\
    \ Int = 0\n        for letter in extension_name {\n            if letter.isUppercase\
    \ {\n                capital_count += 1\n            } else {\n              \
    \  small_count += 1\n            }\n        }\n        var extension_strength:\
    \ Double = Double(capital_count) - Double(small_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \      index += 1\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    let count_upper = CAP(my_string: class_name)\n    let count_lower = SM(my_string:\
    \ class_name)\n    let fraction = Float(count_upper - count_lower)\n    let strongest_extension\
    \ = extensions.min{CAP(my_string: $0) - SM(my_string: $0) < CAP(my_string: $1)\
    \ - SM(my_string: $1)}\n    return \"\\(class_name).\\(strongest_extension!)\"",
  "    var temp_strongest = -10\n    var temp_strongest_ext = \"\"\n    for ext in\
    \ extensions {\n        var uppercase_letters = 0\n        var lowercase_letters\
    \ = 0\n        for character in ext {\n            if character.isUppercase {\n\
    \                uppercase_letters += 1\n            } else {\n              \
    \  lowercase_letters += 1\n            }\n        }\n        let temp_ext_strength\
    \ = uppercase_letters - lowercase_letters\n        if temp_ext_strength > temp_strongest\
    \ {\n            temp_strongest = temp_ext_strength\n            temp_strongest_ext\
    \ = ext\n        }\n    }\n    return class_name + \".\" + temp_strongest_ext",
  "    var strongest: String = \"\"\n    var strength: Double = 0\n    var name: String\
    \ = \"\"\n    var cap: Int = 0\n    var sm: Int = 0\n    for i in extensions {\n\
    \        name = i\n        cap = count_caps(word: name)\n        sm = count_small(word:\
    \ name)\n        if (Double(cap) - Double(sm)) > strength {\n            strength\
    \ = Double(cap) - Double(sm)\n            strongest = name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest)\"", "    var strongest_extension =\
    \ \"\"\n    var strongest_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.count { $0.isUppercase }) -\
    \ Double(extension_name.count { $0.isLowercase })\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strength = 0\n    var strong_class = \"\"\n    for extension in extensions\
    \ {\n        let extension_str = extension.components(separatedBy: CharacterSet.uppercaseLetters)\n\
    \        let extension_cap = extension.components(separatedBy: CharacterSet.lowercaseLetters)\n\
    \        if (extension_str.count - extension_cap.count) > strength {\n       \
    \     strength = extension_str.count - extension_cap.count\n            strong_class\
    \ = extension\n        }\n    }\n    return \"\\(class_name).\\(strong_class)\"",
  "    let ext_strength = extensions.map({ (extension_name) -> (String, Int) in\n\
    \        return (extension_name, extension_name.components(separatedBy: CharacterSet.uppercaseLetters).count\
    \ - extension_name.components(separatedBy: CharacterSet.lowercaseLetters).count)\n\
    \    })\n    let max_strength = ext_strength.map({$0.1}).max()\n    let max_strength_extensions\
    \ = ext_strength.filter({$0.1 == max_strength})\n    let sorted_extensions = max_strength_extensions.sorted(by:\
    \ {$0.0 < $1.0})\n    return \"\\(class_name).\\(sorted_extensions[0].0)\"", " \
    \   let number_upper = extensions.map({String($0.filter({$0.isUppercase}))})\n\
    \    let number_lower = extensions.map({String($0.filter({$0.isLowercase}))})\n\
    \    let strength = zip(number_upper, number_lower).map({Double($0.count - $1.count)})\n\
    \    let strongest = zip(extensions, strength).sorted(by: {$0.1 > $1.1}).first!.0\n\
    \    return \"\\(class_name).\\(strongest)\"", "\tvar strongest_extension = \"\
    \"\n\tvar strongest_extension_value = 0.0\n\tvar current_extension_value = 0.0\n\
    \t\n\tfor extension_name in extensions {\n\t\tcurrent_extension_value = Double(extension_name.filter{\
    \ $0.isUppercase }.count)\n\t\tcurrent_extension_value -= Double(extension_name.filter{\
    \ $0.isLowercase }.count)\n\t\t\n\t\tif strongest_extension_value < current_extension_value\
    \ {\n\t\t\tstrongest_extension_value = current_extension_value\n\t\t\tstrongest_extension\
    \ = extension_name\n\t\t}\n\t}\n\t\n\treturn \"\\(class_name).\\(strongest_extension)\"",
  "    var class_extension = \"\"\n    var strength = 0\n    var class_extension_strength\
    \ = 0\n    for (i, ext) in extensions.enumerated() {\n        for c in ext {\n\
    \            if c.isUppercase {\n                strength += 1\n            }\
    \ else {\n                strength -= 1\n            }\n        }\n        if\
    \ i == 0 {\n            class_extension = ext\n            class_extension_strength\
    \ = strength\n        } else if strength > class_extension_strength {\n      \
    \      class_extension = ext\n            class_extension_strength = strength\n\
    \        }\n        strength = 0\n    }\n    return \"\\(class_name).\\(class_extension)\"",
  '    return "You should have implemented this task"', "    var strongest_extension\
    \ = extensions[0]\n    var strongest_strength = Int.min\n    for extension_ in\
    \ extensions {\n        let strength = Strength(extension_: extension_)\n    \
    \    if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension_\n        }\n    }\n    return \"\
    \\(class_name).\\(strongest_extension)\"", "    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = calculate_strength(extension_name: extensions[0])\n\
    \    for i in 1..<extensions.count {\n        let strength = calculate_strength(extension_name:\
    \ extensions[i])\n        if strength > strongest_extension_strength {\n     \
    \       strongest_extension = extensions[i]\n            strongest_extension_strength\
    \ = strength\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest_extension = \"\", strongest_strength = 0\n    for ext in extensions\
    \ {\n        var uppercase_count = 0, lowercase_count = 0\n        for character\
    \ in ext {\n            if character.isUppercase {\n                uppercase_count\
    \ += 1\n            } else if character.isLowercase {\n                lowercase_count\
    \ += 1\n            }\n        }\n        let strength = uppercase_count - lowercase_count\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"", "    var max_strength = 0.0\n \
    \   var strongest_extension = \"\"\n    for ext in extensions {\n        let uppers\
    \ = ext.filter { (char) -> Bool in return char.isUppercase }\n        let lowers\
    \ = ext.filter { (char) -> Bool in return char.isLowercase }\n        let strength\
    \ = Double(uppers.count) - Double(lowers.count)\n        if strength > max_strength\
    \ {\n            max_strength = strength\n            strongest_extension = ext\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", " \
    \   var extended_class_name = class_name\n    var strongest_extension_name = \"\
    \"\n    var extension_strength = Double(0)\n    for extension_name in extensions\
    \ {\n        var strength = Double(0)\n        for extension_char in extension_name\
    \ {\n            if extension_char.isUppercase {\n                strength +=\
    \ 1\n            } else {\n                strength -= 1\n            }\n    \
    \    }\n        if strength > extension_strength {\n            extension_strength\
    \ = strength\n            strongest_extension_name = extension_name\n        }\n\
    \    }\n    extended_class_name += \".\" + strongest_extension_name\n    return\
    \ extended_class_name", "    let cap = CharacterSet.uppercaseLetters\n    let\
    \ sm = CharacterSet.lowercaseLetters\n    var strongest_extension = \"\"\n   \
    \ var strongest_strength = 0.0\n    for extension_word in extensions {\n     \
    \   var strength = 0.0\n        for letter in extension_word.characters {\n  \
    \          if cap.contains(UnicodeScalar(String(letter))!) {\n               \
    \ strength += 1\n            } else if sm.contains(UnicodeScalar(String(letter))!)\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ >= strongest_strength {\n            strongest_strength = strength\n       \
    \     strongest_extension = extension_word\n        }\n    }\n    return \"\\\
    (class_name).\\(strongest_extension)\"", '    return ""', '    return ""', " \
    \   let uppercase = CharacterSet.uppercaseLetters\n    let lowercase = CharacterSet.lowercaseLetters\n\
    \    var strongest = \"\"\n    var strength = -1.0\n    for ext in extensions\
    \ {\n        var uppercase_count = 0\n        var lowercase_count = 0\n      \
    \  for char in ext.unicodeScalars {\n            if uppercase.contains(char) {\n\
    \                uppercase_count += 1\n            } else if lowercase.contains(char)\
    \ {\n                lowercase_count += 1\n            }\n        }\n        let\
    \ string_strength = Double(uppercase_count) - Double(lowercase_count)\n      \
    \  if string_strength > strength {\n            strength = string_strength\n \
    \           strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", "    let upperCaseRegEx = try! NSRegularExpression(pattern: \"\
    [A-Z]\", options: .caseInsensitive)\n    let lowerCaseRegEx = try! NSRegularExpression(pattern:\
    \ \"[a-z]\", options: .caseInsensitive)\n    var max_strength: Float = 0.0\n \
    \   var strength: Float = 0.0\n    var strongest_extension = \"\"\n    for extension_name\
    \ in extensions {\n        let upperCaseMatches = upperCaseRegEx.matches(in: extension_name,\
    \ options: [], range: NSRange(location: 0, length: extension_name.count))\n  \
    \      let lowerCaseMatches = lowerCaseRegEx.matches(in: extension_name, options:\
    \ [], range: NSRange(location: 0, length: extension_name.count))\n        strength\
    \ = Float(upperCaseMatches.count) - Float(lowerCaseMatches.count)\n        if\
    \ strength > max_strength {\n            max_strength = strength\n           \
    \ strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    if extensions.count == 0 {\n        return\
    \ class_name\n    }\n    var strongest_extension = extensions[0]\n    var strongest_strength\
    \ = strength(of: extensions[0])\n    for i in 1..<extensions.count {\n       \
    \ let next_strength = strength(of: extensions[i])\n        if next_strength >\
    \ strongest_strength {\n            strongest_strength = next_strength\n     \
    \       strongest_extension = extensions[i]\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var score = 0\n    var strong = \"\"\n\
    \    for e in extensions {\n        let cap = e.filter{ $0.isUppercase }.count\n\
    \        let sm = e.filter{ $0.isLowercase }.count\n        let result = cap -\
    \ sm\n        if result > score {\n            score = result\n            strong\
    \ = e\n        }\n    }\n    return class_name + \".\" + strong", "    let arr\
    \ = extensions.map { (ext) -> (String, Double) in\n        let caps = ext.filter({\
    \ $0.isUppercase }).count\n        let smalls = ext.filter({ $0.isLowercase }).count\n\
    \        return (ext, Double(caps - smalls))\n    }\n    let sorted = arr.sorted\
    \ { (first, second) -> Bool in\n        if first.1 == second.1 {\n           \
    \ return first.0 < second.0\n        }\n        return first.1 > second.1\n  \
    \  }\n    return class_name + \".\" + sorted.first!.0", "    let strongest_extension\
    \ = extensions.max { (ext1, ext2) -> Bool in\n        let ext1_uppercase_count\
    \ = ext1.reduce(0) { $1.isUppercase ? $0 + 1 : $0 }\n        let ext1_lowercase_count\
    \ = ext1.reduce(0) { $1.isLowercase ? $0 + 1 : $0 }\n        let ext1_strength\
    \ = ext1_uppercase_count - ext1_lowercase_count\n        \n        let ext2_uppercase_count\
    \ = ext2.reduce(0) { $1.isUppercase ? $0 + 1 : $0 }\n        let ext2_lowercase_count\
    \ = ext2.reduce(0) { $1.isLowercase ? $0 + 1 : $0 }\n        let ext2_strength\
    \ = ext2_uppercase_count - ext2_lowercase_count\n        \n        return ext1_strength\
    \ > ext2_strength\n    }\n    \n    return \"\\(class_name).\\(strongest_extension!)\"",
  "    // Write your code here.\n    return \"\"", "    var strongest: String = \"\
    \"\n    var strongest_score: Double = 0\n    for ex in extensions {\n        var\
    \ score: Double = 0\n        for c in ex {\n            if c.isUppercase {\n \
    \               score += 1\n            } else {\n                score -= 1\n\
    \            }\n        }\n        if score > strongest_score {\n            strongest_score\
    \ = score\n            strongest = ex\n        }\n    }\n    return class_name\
    \ + \".\" + strongest", '    return "Hello world!"', "  var strongest_extension\
    \ = \"\"\n  var strongest_strength = 0.0\n  for extension_name in extensions {\n\
    \    let cap = extension_name.filter{$0.isUppercase}.count\n    let sm = extension_name.filter{$0.isLowercase}.count\n\
    \    let strength = Double(cap) - Double(sm)\n    if strength > strongest_strength\
    \ {\n      strongest_strength = strength\n      strongest_extension = extension_name\n\
    \    }\n  }\n  return \"\\(class_name).\\(strongest_extension)\"", "    var cap\
    \ = 0\n    var sm = 0\n    var strength = 0\n    var strongest_extension = \"\"\
    \n    for var i in 0..<extensions.count {\n        cap = 0\n        sm = 0\n \
    \       strength = 0\n        for j in extensions[i].characters {\n          \
    \  if j.isUpperCase() {\n                cap += 1\n            } else {\n    \
    \            sm += 1\n            }\n        }\n        strength = cap - sm\n\
    \        if strongest_extension == \"\" {\n            strongest_extension = extensions[i]\n\
    \        } else if strength > 0 {\n            if strength > cap - sm {\n    \
    \            strongest_extension = extensions[i]\n            }\n        } else\
    \ if strength < 0 {\n            if strength < cap - sm {\n                strongest_extension\
    \ = extensions[i]\n            }\n        }\n    }\n    return class_name + \"\
    .\" + strongest_extension", "    //! It is a good approach to first find the strength\
    \ of the strongest extension.\n    //! Then once you find it, to return \"class_name.strongest_extension\"\
    \n    return \"\"", "    let class_name = class_name\n    var strengths: [Double]\
    \ = []\n    for string in extensions {\n        let uppercase_letters = string.uppercased().filter\
    \ { $0.isUppercase }\n        let lowercase_letters = string.lowercased().filter\
    \ { $0.isLowercase }\n        strengths.append(Double(uppercase_letters.count)\
    \ - Double(lowercase_letters.count))\n    }\n    let strongest_extension = extensions[strengths.firstIndex(of:\
    \ strengths.max()!)!]\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest: String = \"my_class.Be\"\n    var strength: Double = 0.0\n \
    \   for extension in extensions {\n        let strength_temp = Double(String(extension.uppercased().filter{$0.isUppercase}).count\
    \ - String(extension.lowercased().filter{$0.isLowercase}).count)\n        if strength_temp\
    \ > strength {\n            strength = strength_temp\n            strongest =\
    \ \"\\(class_name).\\(extension)\"\n        }\n    }\n    return strongest", "\t\
    // Write your code here.\n\treturn \"\"", "    // \u2193\u2193\u2193\u2193 your\
    \ code goes here \u2193\u2193\u2193\u2193\n    var new_class = [String]()\n  \
    \  var max = 0\n    var value = 0\n    for ext in extensions {\n        for letter\
    \ in ext {\n            if letter.isUppercase {\n                value += 1\n\
    \            }\n            else {\n                value -= 1\n            }\n\
    \        }\n        if value > max {\n            max = value\n            new_class.removeAll()\n\
    \            new_class.append(ext)\n        }\n        else if value == max {\n\
    \            new_class.append(ext)\n        }\n        value = 0\n    }\n    new_class.sort()\n\
    \    return \"\\(class_name).\\(new_class[0])\"", "    let className = class_name\n\
    \    var biggestDiff = 0\n    var strongestExtension = \"\"\n    for element in\
    \ extensions {\n        let upperCaseCount = element.filter{ $0.isUppercase }.count\n\
    \        let lowerCaseCount = element.filter{ $0.isLowercase }.count\n       \
    \ let difference = upperCaseCount - lowerCaseCount\n        if difference > biggestDiff\
    \ {\n            biggestDiff = difference\n            strongestExtension = element\n\
    \        }\n    }\n    return \"\\(className).\\(strongestExtension)\"", "\treturn\
    \ \"\"", "    var strongest_extension = extensions[0]\n    var strongest_extension_strength\
    \ = Strength(extension: extensions[0])\n    for ext in extensions[1..<extensions.count]\
    \ {\n        let strength = Strength(extension: ext)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension = ext\n            strongest_extension_strength\
    \ = strength\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    let class_name = class_name\n    var strengths = [Double]()\n    var names\
    \ = [String]()\n    var max_strength = 0.0\n    var max_strength_name = \"\"\n\
    \    for (index, element) in extensions.enumerated() {\n        var upper_case_count\
    \ = 0\n        var lower_case_count = 0\n        for letter in element {\n   \
    \         if letter.isUppercase {\n                upper_case_count += 1\n   \
    \         } else {\n                lower_case_count += 1\n            }\n   \
    \     }\n        var strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        strength = strength == 0 ? 0.0 : strength\n        strengths.append(strength)\n\
    \        names.append(element)\n        if strength == max_strength {\n      \
    \      let name_length_1 = names[index - 1].count\n            let name_length_2\
    \ = names[index].count\n            if name_length_1 > name_length_2 {\n     \
    \           max_strength_name = names[index]\n            } else {\n         \
    \       max_strength_name = names[index - 1]\n            }\n        } else if\
    \ strength > max_strength {\n            max_strength = strength\n           \
    \ max_strength_name = names[index]\n        }\n    }\n    let final_result = \"\
    \\(class_name).\\(max_strength_name)\"\n    return final_result", "    let num_uppercase\
    \ = { (word: String) -> Int in\n        return word.filter({ (char: Character)\
    \ -> Bool in\n            return char.isUppercase\n        }).count\n    }\n \
    \   let num_lowercase = { (word: String) -> Int in\n        return word.filter({\
    \ (char: Character) -> Bool in\n            return char.isLowercase\n        }).count\n\
    \    }\n    var strongest_extension = extensions[0]\n    var strongest_strength\
    \ = (Double(num_uppercase(strongest_extension)) / Double(num_lowercase(strongest_extension)))\n\
    \    for index in 1..<extensions.count {\n        let strength = (Double(num_uppercase(extensions[index]))\
    \ / Double(num_lowercase(extensions[index])))\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extensions[index]\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest: Int = 0\n    var strongest_extension: String = \"\"\n    for\
    \ extension_name in extensions {\n        var cap_count: Int = 0\n        var\
    \ sm_count: Int = 0\n        for char in extension_name {\n            if char.isUppercase\
    \ {\n                cap_count += 1\n            } else {\n                sm_count\
    \ += 1\n            }\n        }\n        if cap_count - sm_count > strongest\
    \ {\n            strongest = cap_count - sm_count\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var ret_ext = \"my_class.AA\"\n    var ret_stre = -100.0\n    for ext in extensions\
    \ {\n        let cap = Double(ext.filter { $0.isUppercase }.count)\n        let\
    \ sm = Double(ext.filter { $0.isLowercase }.count)\n        let stre = cap - sm\n\
    \        if stre > ret_stre {\n            ret_stre = stre\n            ret_ext\
    \ = class_name + \".\" + ext\n        }\n    }\n    return ret_ext", "    let\
    \ class_extensions = extensions.map({ (extension_name) -> ClassExtension in\n\
    \        ClassExtension(name: extension_name)\n    })\n    class_extensions.sort\
    \ { (class_extension_left, class_extension_right) -> Bool in\n        class_extension_left.strength\
    \ > class_extension_right.strength\n    }\n    return \"\\(class_name).\\(class_extensions.first!.name)\"",
  "    var result: (String, Float) = (\"\", 0)\n    for extension_name in extensions\
    \ {\n        var c_count = 0\n        var s_count = 0\n        for c in extension_name\
    \ {\n            if c >= \"A\" && c <= \"Z\" {\n                c_count += 1\n\
    \            } else if c >= \"a\" && c <= \"z\" {\n                s_count +=\
    \ 1\n            }\n        }\n        let strength = Float(c_count) - Float(s_count)\n\
    \        if strength > result.1 {\n            result = (extension_name, strength)\n\
    \        }\n    }\n    return \"\\(class_name).\\(result.0)\"", "    var extension_strength\
    \ = [String:Int]()\n    var strongest_extension = 0\n    var strongest_extension_name\
    \ = \"\"\n    for item in extensions {\n        var strength = 0\n        for\
    \ character in item {\n            if String(character).rangeOfCharacter(from:\
    \ CharacterSet.uppercaseLetters) != nil {\n                strength += 1\n   \
    \         } else if String(character).rangeOfCharacter(from: CharacterSet.lowercaseLetters)\
    \ != nil {\n                strength -= 1\n            }\n        }\n        extension_strength[item]\
    \ = strength\n        if strongest_extension < strength {\n            strongest_extension\
    \ = strength\n            strongest_extension_name = item\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension_name)\"", "    var strongestExtension:\
    \ String = \"\"\n    var strength: Double = 0\n    for extension_ in extensions\
    \ {\n        let upperCaseCount = extension_.components(separatedBy: .uppercaseLetters).count\
    \ - 1\n        let lowerCaseCount = extension_.components(separatedBy: .lowercaseLetters).count\
    \ - 1\n        if upperCaseCount - lowerCaseCount > strength {\n            strength\
    \ = Double(upperCaseCount - lowerCaseCount)\n            strongestExtension =\
    \ extension_\n        }\n    }\n    return \"\\(class_name).\\(strongestExtension)\"",
  "    var strength = extensions.map { (extension_name) -> (String, Double) in\n \
    \       var upper = 0\n        var lower = 0\n        for char in extension_name\
    \ {\n            switch char {\n            case \"A\"...\"Z\":\n            \
    \    upper += 1\n            case \"a\"...\"z\":\n                lower += 1\n\
    \            default:\n                continue\n            }\n        }\n  \
    \      return (extension_name, Double(upper - lower))\n    }\n    strength.sort\
    \ { (extension1, extension2) -> Bool in\n        if extension1.1 == extension2.1\
    \ {\n            return extension1.0 < extension2.0\n        }\n        return\
    \ extension1.1 > extension2.1\n    }\n    if let strongest = strength.first {\n\
    \        return \"\\(class_name).\\(strongest.0)\"\n    }\n    return \"\\(class_name).null\"",
  "    var strongestExtension = \"\"\n    var strongExtensionStrength = -2\n    for\
    \ ext in extensions {\n        var extensionStrength = -1\n        var cap = 0\n\
    \        var sm = 0\n        for char in ext {\n            if char.isUppercase\
    \ {\n                cap += 1\n            } else {\n                sm += 1\n\
    \            }\n        }\n        extensionStrength = cap - sm\n        if extensionStrength\
    \ > strongExtensionStrength {\n            strongExtensionStrength = extensionStrength\n\
    \            strongestExtension = ext\n        }\n    }\n    return class_name\
    \ + \".\" + strongestExtension", "    let upperCaseCount: (String) -> Int = {\n\
    \        $0.filter {$0.isUppercase}.count\n    }\n    let lowerCaseCount: (String)\
    \ -> Int = {\n        $0.filter {$0.isLowercase}.count\n    }\n    let totalCount:\
    \ (String) -> Int = {\n        upperCaseCount($0) - lowerCaseCount($0)\n    }\n\
    \    let extensionWithMaxStrength = extensions.max(by: {totalCount($0) < totalCount($1)})\n\
    \    let strength = totalCount(extensionWithMaxStrength!)\n    let finalExtension\
    \ = strength > 0 ? extensionWithMaxStrength! : extensions[0]\n    return \"\\\
    (class_name).\\(finalExtension)\"", "    var strongest_extension: String = \"\"\
    \n    var current_extension_strength: Double = 0.0\n    var strongest_extension_strength:\
    \ Double = 0.0\n    var CAP: Int = 0\n    var SM: Int = 0\n    var strength: Double\
    \ = 0.0\n    for extension_name in extensions {\n        CAP = 0\n        SM =\
    \ 0\n        strength = 0.0\n        for char in extension_name {\n          \
    \  if char.isUppercase {\n                CAP += 1\n            } else {\n   \
    \             SM += 1\n            }\n        }\n        strength = Double(CAP)\
    \ - Double(SM)\n        if strongest_extension_strength == 0.0 {\n           \
    \ strongest_extension_strength = strength\n            strongest_extension = extension_name\n\
    \        } else if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"", "    let num_upper\
    \ = { (str: String) -> Int in\n        var count = 0\n        for c in str {\n\
    \            if c.isUppercase {\n                count += 1\n            }\n \
    \       }\n        return count\n    }\n    let num_lower = { (str: String) ->\
    \ Int in\n        var count = 0\n        for c in str {\n            if c.isLowercase\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n    var strongest_extension = \"\"\n    var strongest_strength = Double.leastNormalMagnitude\n\
    \    for ext in extensions {\n        let str = Double(num_upper(ext) - num_lower(ext))\n\
    \        if str > strongest_strength {\n            strongest_strength = str\n\
    \            strongest_extension = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"", "    var strongestExt = extensions[0]\n    var strongestExtStrength\
    \ = 0\n    for ext in extensions {\n        let strength = ext.filter({ $0.isUppercase\
    \ }).count - ext.filter({ $0.isLowercase }).count\n        if strength > strongestExtStrength\
    \ {\n            strongestExtStrength = strength\n            strongestExt = ext\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongestExt)\"", "  let strongest_extension_strength\
    \ = extensions.reduce(0.0) { \n    max($0, Double(extensions[0].uppercased().filter{\
    \ $0 >= \"A\" && $0 <= \"Z\" }.count) - Double(extensions[0].lowercased().filter{\
    \ $0 >= \"a\" && $0 <= \"z\" }.count))\n  }\n  return \"\\(class_name).\\(extensions.first(where:\
    \ {\n    (Double($0.uppercased().filter{ $0 >= \"A\" && $0 <= \"Z\" }.count) -\
    \ Double($0.lowercased().filter{ $0 >= \"a\" && $0 <= \"z\" }.count)) == strongest_extension_strength\n\
    \  }))\"", "    var strongest_extension: String = \"\";\n    var strongest_extension_strength:\
    \ Double = 0;\n    for ext in extensions {\n        let ext_strength = Double(ext.uppercased().count)\
    \ - Double(ext.lowercased().count);\n        if ext_strength > strongest_extension_strength\
    \ {\n            strongest_extension = ext;\n            strongest_extension_strength\
    \ = ext_strength;\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    ;", "    var strength = 0\n    var strongest = \"\"\n    for ext in extensions\
    \ {\n        let cap = ext.filter { Int(String($0)) != nil || String($0) == \"\
    _\" }.count\n        let sm = ext.filter { Int(String($0)) == nil && String($0)\
    \ != \"_\" }.count\n        if cap - sm > strength {\n            strength = cap\
    \ - sm\n            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", "    var current_strongest = 0.0\n    var current_strongest_extension\
    \ = \"\"\n    for ext in extensions {\n        let uppercase_count = Double(ext.filter\
    \ { $0.isUppercase }.count)\n        let lowercase_count = Double(ext.filter {\
    \ $0.isLowercase }.count)\n        let strength = uppercase_count - lowercase_count\n\
    \        if strength > current_strongest {\n            current_strongest = strength\n\
    \            current_strongest_extension = ext\n        }\n    }\n    return \"\
    \\(class_name).\\(current_strongest_extension)\"", "    // Write your code here.\n\
    \    return \"\"", "    let capital_counts = extensions.map { $0.filter { $0.isUppercase\
    \ }.count }\n    let small_counts = extensions.map { $0.filter { $0.isLowercase\
    \ }.count }\n    let strength = zip(capital_counts, small_counts).map { $0.0 -\
    \ $0.1 }\n    return class_name + \".\" + extensions[strength.firstIndex(of: strength.max()!)!]",
  "    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        let lower_case_chars = extension_name.filter({$0.isLowercase})\n\
    \        let upper_case_chars = extension_name.filter({$0.isUppercase})\n    \
    \    let strength = Float(upper_case_chars.count) - Float(lower_case_chars.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"", "    var strongest =\
    \ extensions[0]\n    var strongest_value = strength(strongest)\n    for extension\
    \ in extensions {\n        let value = strength(extension)\n        if value >\
    \ strongest_value {\n            strongest = extension\n            strongest_value\
    \ = value\n        }\n    }\n    return \"\\(class_name).\\(strongest)\"", " \
    \   var strongest_extension: (strength: Double, ext: String) = (0, \"\")\n   \
    \ for ext in extensions {\n        var CAP = 0\n        var SM = 0\n        for\
    \ c in ext {\n            if CharacterSet.uppercaseLetters.contains(UnicodeScalar(String(c))!)\
    \ {\n                CAP += 1\n            } else {\n                SM += 1\n\
    \            }\n        }\n        if (Double(CAP) - Double(SM)) > strongest_extension.strength\
    \ {\n            strongest_extension = (Double(CAP) - Double(SM), ext)\n     \
    \   }\n    }\n    return class_name + \".\" + strongest_extension.ext", "    let\
    \ count = (extensions.count)\n    if count == 0 {\n        return \"\"\n    }\n\
    \    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for\
    \ extension_name in extensions {\n        let cap = extension_name.filter {$0.isUppercase}.count\n\
    \        let sm = extension_name.filter {$0.isLowercase}.count\n        let strength\
    \ = Double(cap - sm)\n        if strength > strongest_strength {\n           \
    \ strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", " \
    \   let className = \"my_class\"\n    let exts = [\"AA\", \"Be\", \"CC\"]\n  \
    \  var strongestExt = \"\"\n    var strongestStrength = 0.0\n    for ext in exts\
    \ {\n        let strength = calculateStrength(ext)\n        if strength > strongestStrength\
    \ {\n            strongestStrength = strength\n            strongestExt = ext\n\
    \        }\n    }\n    return className + \".\" + strongestExt", "    var strongest:\
    \ Int = 0\n    var strongest_extension: String = \"\"\n    for each in extensions\
    \ {\n        var count_upper: Int = 0\n        var count_lower: Int = 0\n    \
    \    for char in each {\n            if char.isUppercase {\n                count_upper\
    \ += 1\n            } else {\n                count_lower += 1\n            }\n\
    \        }\n        let strength: Int = count_upper - count_lower\n        if\
    \ strength > strongest {\n            strongest = strength\n            strongest_extension\
    \ = each\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension: String = \"\"\n    var strongest_extension_strength:\
    \ Float = 0.0\n    for item in extensions {\n        let upper_count = item.uppercased().filter({\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".contains($0) }).count\n        let lower_count\
    \ = item.lowercased().filter({ \"abcdefghijklmnopqrstuvwxyz\".contains($0) }).count\n\
    \        let current_strength = Float(upper_count) - Float(lower_count)\n    \
    \    if current_strength > strongest_extension_strength {\n            strongest_extension\
    \ = item\n            strongest_extension_strength = current_strength\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension:\
    \ String = \"\"\n    var strongest_extension_strength: Float = -5\n    for item\
    \ in extensions {\n        let lowercase_letters = item.filter { $0.isLowercase\
    \ }\n        let uppercase_letters = item.filter { $0.isUppercase }\n        let\
    \ strength = Float(uppercase_letters.count) - Float(lowercase_letters.count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension\
    \ = item\n            strongest_extension_strength = strength\n        }\n   \
    \ }\n    return \"\\(class_name).\\(strongest_extension)\"", "    var strongest:\
    \ String = \"\"\n    var strongest_strength: Double = 0\n    for (i, ext) in extensions.enumerated()\
    \ {\n        var CAP: Int = 0\n        var SM: Int = 0\n        for c in ext {\n\
    \            if c.isUppercase {\n                CAP += 1\n            } else\
    \ {\n                SM += 1\n            }\n        }\n        let strength:\
    \ Double = Double(CAP) - Double(SM)\n        if strength > strongest_strength\
    \ {\n            strongest = ext\n            strongest_strength = strength\n\
    \        } else if strength == strongest_strength {\n            if extensions.firstIndex(of:\
    \ ext) ?? 0 < extensions.firstIndex(of: strongest) ?? 0 {\n                strongest\
    \ = ext\n                strongest_strength = strength\n            }\n      \
    \  }\n    }\n    return \"\\(class_name).\\(strongest)\"", "    var strongestExtension\
    \ = extensions[0]\n    var strongestStrength = 0\n    for i in 0..<extensions.count\
    \ {\n        let strength = strengthOfExtension(string: extensions[i])\n     \
    \   if strength > strongestStrength {\n            strongestStrength = strength\n\
    \            strongestExtension = extensions[i]\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongestExtension)\"", "    var strongest_extension = \"\
    \"\n    var strongest_extension_strength = Int.min\n    for extension_name in\
    \ extensions {\n        let strength = extension_name.filter { $0.isUppercase\
    \ }.count -\n            extension_name.filter { $0.isLowercase }.count\n    \
    \    if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"", "    // Your code\
    \ here\n    return \"\"", "  var strongestExtension = \"\"\n  var strongestExtensionStrength\
    \ = 0.0\n  for extension in extensions {\n    let cap = Double(extension.uppercased().filter\
    \ { $0.isUppercase }.count)\n    let sm = Double(extension.lowercased().filter\
    \ { $0.isLowercase }.count)\n    let strength = cap - sm\n    if strength > strongestExtensionStrength\
    \ {\n      strongestExtensionStrength = strength\n      strongestExtension = extension\n\
    \    }\n  }\n  return \"\\(class_name).\\(strongestExtension)\"", "  var strength\
    \ = 0\n  var strongest_extension = \"\"\n  for extension_name in extensions {\n\
    \    let uppercase_count = extension_name.uppercased().filter { $0.isUppercase\
    \ }.count\n    let lowercase_count = extension_name.lowercased().filter { $0.isLowercase\
    \ }.count\n    let new_strength = uppercase_count - lowercase_count\n    if new_strength\
    \ > strength {\n      strength = new_strength\n      strongest_extension = extension_name\n\
    \    }\n  }\n  return \"\\(class_name).\\(strongest_extension)\"", "    let strongest\
    \ = extensions.map { (ext) -> (Int, Int, String) in\n        let count_upper =\
    \ ext.filter({$0.isUppercase}).count\n        let count_lower = ext.filter({$0.isLowercase}).count\n\
    \        return (count_upper, count_lower, ext)\n    }.sorted { (a, b) -> Bool\
    \ in\n        let a_strength = (a.0 - a.1)\n        let b_strength = (b.0 - b.1)\n\
    \        if a_strength == b_strength {\n            return a.2 < b.2\n       \
    \ }\n        return a_strength > b_strength\n    }\n    return class_name + \"\
    .\" + strongest.first!.2", "    var highest: Int = 0\n    var highestIndex: Int\
    \ = 0\n    var i: Int = 0\n    for ext in extensions {\n        var strength:\
    \ Int = 0\n        for ch in ext {\n            if(CharacterSet.uppercaseLetters.contains(UnicodeScalar(String(ch))!))\
    \ {\n                strength += 1\n            } else {\n                strength\
    \ -= 1\n            }\n        }\n        if(strength > highest) {\n         \
    \   highest = strength\n            highestIndex = i\n        }\n        i +=\
    \ 1\n    }\n    return \"\\(class_name).\\(extensions[highestIndex])\"", '    return
    ""', "    var strongest_extension: (strength: Float, extension: String) = (0,\
    \ \"\")\n    for ext in extensions {\n        var cap_count = 0\n        var sm_count\
    \ = 0\n        for char in ext {\n            if char.isUppercase {\n        \
    \        cap_count += 1\n            } else {\n                sm_count += 1\n\
    \            }\n        }\n        let strength = Float(cap_count) - Float(sm_count)\n\
    \        if strength > strongest_extension.strength {\n            strongest_extension\
    \ = (strength, ext)\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension.extension)\"",
  "    var temp: (extension_name: String, extension_score: Double)?\n    for extension_name\
    \ in extensions {\n        let cap_count = extension_name.filter({ (char) -> Bool\
    \ in\n            return char.isUppercase\n        }).count\n        let sm_count\
    \ = extension_name.filter({ (char) -> Bool in\n            return char.isLowercase\n\
    \        }).count\n        let extension_score = Double(cap_count) - Double(sm_count)\n\
    \        if temp == nil {\n            temp = (extension_name, extension_score)\n\
    \        } else {\n            if extension_score > temp!.extension_score {\n\
    \                temp = (extension_name, extension_score)\n            }\n   \
    \     }\n    }\n    return \"\\(class_name).\\(temp!.extension_name)\"", "   \
    \ let uppCase = CharacterSet.uppercaseLetters\n    let lowCase = CharacterSet.lowercaseLetters\n\
    \    var strengths = [String: Double]()\n    for ext in extensions {\n       \
    \ var uppCount = 0\n        var lowCount = 0\n        for char in ext.unicodeScalars\
    \ {\n            if uppCase.contains(char) {\n                uppCount += 1\n\
    \            } else if lowCase.contains(char) {\n                lowCount += 1\n\
    \            }\n        }\n        strengths[ext] = Double(uppCount - lowCount)\n\
    \    }\n    let strongest = extensions.sorted {(ext1, ext2) in\n        return\
    \ strengths[ext1]! > strengths[ext2]!\n    }\n    return \"\\(class_name).\\(strongest[0])\"",
  "    var extension_strength = [Float]()\n    var upper_count = 0\n    var lower_count\
    \ = 0\n    var extension_name = [String]()\n    var strength = 0.0\n    var extension_total\
    \ = \"\"\n    for extension in extensions {\n        upper_count = 0\n       \
    \ lower_count = 0\n        for value in extension {\n            if value.isUppercase\
    \ {\n                upper_count += 1\n            } else {\n                lower_count\
    \ += 1\n            }\n        }\n        strength = Float(upper_count) - Float(lower_count)\n\
    \        extension_strength.append(strength)\n        extension_name.append(extension)\n\
    \    }\n    let index = extension_strength.firstIndex(of: extension_strength.max()!)\n\
    \    extension_total = class_name + \".\" + extension_name[index!]\n    return\
    \ extension_total", "    var max_strength = 0.0\n    var max_index = 0\n    for\
    \ index in 0..<extensions.count {\n        let current_strength = Strength(extensions[index])\n\
    \        if current_strength > max_strength {\n            max_strength = current_strength\n\
    \            max_index = index\n        }\n    }\n    return \"\\(class_name).\\\
    (extensions[max_index])\"", "    var strongest: Double = 0.0\n    var strongestIndex:\
    \ Int = 0\n    for (index, extension) in extensions.enumerated() {\n        var\
    \ capital: Double = 0.0\n        var small: Double = 0.0\n        for char in\
    \ extension {\n            if \"A\"...\"Z\" ~= char {\n                capital\
    \ += 1\n            } else if \"a\"...\"z\" ~= char {\n                small +=\
    \ 1\n            }\n        }\n        let currentStrength = capital - small\n\
    \        if currentStrength > strongest {\n            strongest = currentStrength\n\
    \            strongestIndex = index\n        }\n    }\n    return \"\\(class_name).\\\
    (extensions[strongestIndex])\"", "    var strongest_extension = extensions[0]\n\
    \    var strongest_strength = 0\n    for extension_name in extensions {\n    \
    \    var strength = 0\n        for char in extension_name {\n            if char.isUppercase\
    \ {\n                strength += 1\n            } else {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        var CAP = 0\n        var SM = 0\n        for letter\
    \ in extension_name {\n            if letter.isUppercase {\n                CAP\
    \ += 1\n            } else {\n                SM += 1\n            }\n       \
    \ }\n        let strength = Double(CAP) - Double(SM)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "\tvar fraction = 0.0\n\tvar strongest_extension = \"\"\n\tfor ext in extensions\
    \ {\n\t\tlet capital_letters = ext.filter { $0.isUppercase }\n\t\tlet small_letters\
    \ = ext.filter { $0.isLowercase }\n\t\tlet s = Double(capital_letters.count) -\
    \ Double(small_letters.count)\n\t\tif s > fraction {\n\t\t\tfraction = s\n\t\t\
    \tstrongest_extension = ext\n\t\t}\n\t}\n\treturn \"\\(class_name).\\(strongest_extension)\"",
  "\tvar dict = [String: Float]()\n\tvar cap = 0\n\tvar sm = 0\n\tfor i in extensions\
    \ {\n\t\tfor _ in i {\n\t\t\tif \"A\"...\"Z\" ~= i.characters.first! {\n\t\t\t\
    \tcap += 1\n\t\t\t} else {\n\t\t\t\tsm += 1\n\t\t\t}\n\t\t}\n\t\tdict[i] = Float(cap\
    \ - sm)\n\t\tcap = 0\n\t\tsm = 0\n\t}\n\tlet orderedArray = dict.sort{ $0.0 <\
    \ $1.0 }\n\treturn \"\\(class_name).\\(orderedArray.last!.0)\"", "    // Determine\
    \ the strongest extension name in the array\n    var strongest_name = \"\";\n\
    \    var strongest_strength = -2;\n    for extension_name in extensions {\n  \
    \      var letters = 0;\n        var uppercase = 0;\n        for char in extension_name\
    \ {\n            if char.isLetter {\n                letters += 1;\n         \
    \       if char.isUppercase {\n                    uppercase += 1;\n         \
    \       }\n            }\n        }\n        let strength = uppercase - (letters\
    \ - uppercase);\n        if strength > strongest_strength {\n            strongest_name\
    \ = extension_name;\n            strongest_strength = strength;\n        }\n \
    \   }\n    // Concatenate the class name and the strongest extension name\n  \
    \  return class_name + \".\" + strongest_name;", "    let sorted_extensions =\
    \ extensions.sorted(by: { (ext1, ext2) -> Bool in\n        let ext1_strength =\
    \ calculate_strength(extension_name: ext1)\n        let ext2_strength = calculate_strength(extension_name:\
    \ ext2)\n        return ext1_strength > ext2_strength\n    })\n    let strongest_extension\
    \ = sorted_extensions.first!\n    return \"\\(class_name).\\(strongest_extension)\"",
  "  return class_name + \".\" + extensions.max { (a, b) -> Bool in\n    let aStrength\
    \ = (a.components(separatedBy: CharacterSet.uppercaseLetters).joined()).count\
    \ -\n                    (a.components(separatedBy: CharacterSet.lowercaseLetters).joined()).count\n\
    \    let bStrength = (b.components(separatedBy: CharacterSet.uppercaseLetters).joined()).count\
    \ -\n                    (b.components(separatedBy: CharacterSet.lowercaseLetters).joined()).count\n\
    \    return aStrength < bStrength\n  }!", '    return ""', "    var strongest\
    \ = \"\"\n    var strength = 0\n    for ext in extensions {\n        let cap =\
    \ ext.filter{$0.isUppercase}.count\n        let sm = ext.filter{$0.isLowercase}.count\n\
    \        let str = cap - sm\n        if str > strength {\n            strength\
    \ = str\n            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", "    let capital_count = { (string: String) -> Int in\n      \
    \  var counter = 0\n        for letter in string {\n            let char = String(letter)\n\
    \            if char.uppercased() == char {\n                counter += 1\n  \
    \          }\n        }\n        return counter\n    }\n    let small_count =\
    \ { (string: String) -> Int in\n        var counter = 0\n        for letter in\
    \ string {\n            let char = String(letter)\n            if char.lowercased()\
    \ == char {\n                counter += 1\n            }\n        }\n        return\
    \ counter\n    }\n    var max_strength = 0.0\n    var max_strength_class = \"\"\
    \n    for extension_class in extensions {\n        let strength = Double(capital_count(extension_class)\
    \ - small_count(extension_class))\n        if strength > max_strength {\n    \
    \        max_strength = strength\n            max_strength_class = extension_class\n\
    \        }\n    }\n    return \"\\(class_name).\\(max_strength_class)\"", "  \
    \  // Write your solution below.\n    var max_string: String = \"\";\n    var\
    \ max_strength: Double = -1;\n    for extension_name in extensions {\n       \
    \ let strength = get_strength(str: extension_name);\n        if strength > max_strength\
    \ {\n            max_strength = strength;\n            max_string = extension_name;\n\
    \        }\n    }\n    return class_name + \".\" + max_string;", '    return ""',
  "    var strongest_extension: String = \"\"\n    var strongest_extension_strength:\
    \ Double = 0.0\n    for extension_name in extensions {\n        var uppercase_letters_count:\
    \ Int = 0\n        var lowercase_letters_count: Int = 0\n        for letter in\
    \ extension_name {\n            if letter.isUppercase {\n                uppercase_letters_count\
    \ += 1\n            } else if letter.isLowercase {\n                lowercase_letters_count\
    \ += 1\n            }\n        }\n        let extension_strength: Double = Double(uppercase_letters_count)\
    \ - Double(lowercase_letters_count)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    let capRegEx = \"([A-Z])\"\n    let smRegEx\
    \ = \"([a-z])\"\n    var strongestExtension: String = \"\"\n    var strongestStrength:\
    \ Double = 0.0\n    for extensionName in extensions {\n        let capCharacters\
    \ = matches(for: capRegEx, in: extensionName)\n        let smCharacters = matches(for:\
    \ smRegEx, in: extensionName)\n        let cap = Double(capCharacters.count)\n\
    \        let sm = Double(smCharacters.count)\n        let strength = cap - sm\n\
    \        if strength > strongestStrength {\n            strongestStrength = strength\n\
    \            strongestExtension = extensionName\n        }\n    }\n    return\
    \ class_name + \".\" + strongestExtension", "    var best_extension = \"\"\n \
    \   var best_strength = 0.0\n    var cap = 0\n    var sm = 0\n    var strength\
    \ = 0.0\n    for extension in extensions {\n        cap = 0\n        sm = 0\n\
    \        for letter in extension {\n            if letter >= \"A\" && letter <=\
    \ \"Z\" {\n                cap += 1\n            } else if letter >= \"a\" &&\
    \ letter <= \"z\" {\n                sm += 1\n            }\n        }\n     \
    \   strength = Double(cap) - Double(sm)\n        if strength > best_strength {\n\
    \            best_strength = strength\n            best_extension = extension\n\
    \        }\n    }\n    return \"\\(class_name).\\(best_extension)\"", "    var\
    \ strongest: String = \"\"\n    var strongestStrength: Double = 0\n    for ext\
    \ in extensions {\n        var caps: Int = 0\n        var smal: Int = 0\n    \
    \    for c in ext {\n            if c.isUppercase {\n                caps += 1\n\
    \            } else {\n                smal += 1\n            }\n        }\n \
    \       if strongestStrength == 0 || (Double(caps) - Double(smal)) > strongestStrength\
    \ {\n            strongestStrength = Double(caps) - Double(smal)\n           \
    \ strongest = ext\n        }\n    }\n    return \"\\(class_name).\\(strongest)\"",
  "    var strongest_extension = extensions[0]\n    for index in 1..<extensions.count\
    \ {\n        if strength(extension_name: extensions[index]) > strength(extension_name:\
    \ strongest_extension) {\n            strongest_extension = extensions[index]\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", " \
    \   // Enter your code between the two comment markers\n    let class_name = \"\
    my_class\"\n    let extensions = [\"AA\", \"Be\", \"CC\"]\n    let strengthArray\
    \ = extensions.map { (extension) -> (String, Double) in\n        let upperArray\
    \ = Array(extension.uppercased().characters)\n        let lowerArray = Array(extension.lowercased().characters)\n\
    \        let upperCount = upperArray.reduce(0, { $0 + ($1 >= \"A\" && $1 <= \"\
    Z\" ? 1 : 0) })\n        let lowerCount = lowerArray.reduce(0, { $0 + ($1 >= \"\
    a\" && $1 <= \"z\" ? 1 : 0) })\n        return (extension, Double(upperCount -\
    \ lowerCount))\n    }\n    let result = strengthArray.sorted { $0.1 < $1.1 }.last!.0\n\
    \    return \"\\(class_name).\\(result)\"\n    // End code", "    var strongest_extension\
    \ = extensions[0]\n    var strongest_extension_strength = 0.0\n    for ext in\
    \ extensions {\n        let ext_strength = Double(ext.filter{$0.isUppercase}.count)\
    \ - Double(ext.filter{$0.isLowercase}.count)\n        if ext_strength > strongest_extension_strength\
    \ {\n            strongest_extension = ext\n            strongest_extension_strength\
    \ = ext_strength\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strength = 0\n    var strongest = \"\"\n    for i in extensions {\n   \
    \     var cap = 0\n        var sm = 0\n        for j in i {\n            if j\
    \ >= \"A\" && j <= \"Z\" {\n                cap += 1\n            } else if j\
    \ >= \"a\" && j <= \"z\" {\n                sm += 1\n            }\n        }\n\
    \        let st = cap - sm\n        if st > strength {\n            strength =\
    \ st\n            strongest = i\n        }\n    }\n    return class_name + \"\
    .\" + strongest", "    var strongest_extension = extensions[0]\n    var strongest_extension_strength\
    \ = 0.0\n    var current_extension_strength = 0.0\n    var uppercase_letters =\
    \ 0\n    var lowercase_letters = 0\n    for extension_name in extensions {\n \
    \       uppercase_letters = 0\n        lowercase_letters = 0\n        for character\
    \ in extension_name {\n            if String(character).uppercased() == String(character)\
    \ {\n                uppercase_letters += 1\n            } else {\n          \
    \      lowercase_letters += 1\n            }\n        }\n        current_extension_strength\
    \ = Double(uppercase_letters) - Double(lowercase_letters)\n        if current_extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ current_extension_strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension", '    return
    "my_class.AA"', "    // Write your code here!\n    return \"\"", "    var extension_strength:\
    \ [String: Int] = [:]\n    for ext in extensions {\n        let capital_letters\
    \ = ext.filter { $0.isUppercase }\n        let small_letters = ext.filter { $0.isLowercase\
    \ }\n        extension_strength[ext] = capital_letters.count - small_letters.count\n\
    \    }\n    // Find max value in the dictionary\n    let strongest_extension =\
    \ extension_strength.values.max()\n    // Find the keys with the strongest values\n\
    \    let strongest_extension_names = extension_strength.filter { $0.value == strongest_extension\
    \ }\n    // Find the first element in the dictionary\n    let strongest_extension_name\
    \ = strongest_extension_names.first?.key\n    return class_name + \".\" + strongest_extension_name!",
  "    var max_strength = Float(Int.min)\n    var strongest_class_extension = \"\"\
    \n    for ext in extensions {\n        let cap = ext.filter{$0.isUppercase}.count\n\
    \        let sm = ext.filter{$0.isLowercase}.count\n        let strength = Float(cap\
    \ - sm)\n        if strength > max_strength {\n            max_strength = strength\n\
    \            strongest_class_extension = ext\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_class_extension", '    return ""', "\tvar strongestExtension:\
    \ String = \"\"\n\tvar strongestExtensionStrength: Double = 0\n\tfor extension_\
    \ in extensions {\n\t\tlet extensionStrength = strength(of: extension_)\n\t\t\
    if extensionStrength > strongestExtensionStrength {\n\t\t\tstrongestExtensionStrength\
    \ = extensionStrength\n\t\t\tstrongestExtension = extension_\n\t\t}\n\t}\n\treturn\
    \ \"\\(class_name).\\(strongestExtension)\"", "    var strength = 0\n    var index\
    \ = 0\n    for i in 0...extensions.count - 1 {\n        let uppercase_letters\
    \ = Array(extensions[i]).filter({(char: Character) -> Bool in\n            return\
    \ char.isUppercase\n        })\n        let lowercase_letters = Array(extensions[i]).filter({(char:\
    \ Character) -> Bool in\n            return char.isLowercase\n        })\n   \
    \     if ((uppercase_letters.count - lowercase_letters.count) > strength) {\n\
    \            strength = uppercase_letters.count - lowercase_letters.count\n  \
    \          index = i\n        }\n    }\n    return \"\\(class_name).\\(extensions[index])\"",
  "    let result = extensions.enumerated().reduce((\"\", 0.0)) {(first, second) in\n\
    \        let value = second.element.uppercased().count - second.element.lowercased().count\n\
    \        return value > first.1 ? (second.element, value) : first\n    }\n   \
    \ return \"\\(class_name).\\(result.0)\"", "    let class_name = class_name\n\
    \    var ext_strength = 0.0\n    var strongest_ext = \"\"\n    for ext in extensions\
    \ {\n        let capital_count = ext.count { $0.isUppercase }\n        let small_count\
    \ = ext.count { $0.isLowercase }\n        let strength = (Double(capital_count)\
    \ - Double(small_count))\n        if strength > ext_strength {\n            ext_strength\
    \ = strength\n            strongest_ext = ext\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_ext", "    var class_extensions = [String: Int]()\n    for\
    \ item in extensions {\n        let capital_letters = item.filter { $0.isUppercase\
    \ }\n        let small_letters = item.filter { $0.isLowercase }\n        class_extensions[item]\
    \ = capital_letters.count - small_letters.count\n    }\n    let sorted_class_extensions\
    \ = class_extensions.sorted { $0.value > $1.value }\n    return class_name + \"\
    .\" + sorted_class_extensions[0].key", "    // Fill out this function!\n    var\
    \ strongest = extensions[0]\n    var strongestStrength = strongest.count_upper_case()\
    \ - strongest.count_lower_case()\n    var currentStrength = 0\n    for (i, current)\
    \ in extensions.enumerated() {\n        currentStrength = current.count_upper_case()\
    \ - current.count_lower_case()\n        if currentStrength > strongestStrength\
    \ {\n            strongest = current\n            strongestStrength = currentStrength\n\
    \        }\n    }\n    let className = class_name\n    let strongestExtension\
    \ = strongest\n    return className + \".\" + strongestExtension", "    var strongest_class_extension\
    \ = \"\"\n    var strongest_strength = Double.infinity\n    var current_strength\
    \ = 0.0\n    for extension_name in extensions {\n        current_strength = Double(extension_name.filter({$0.isUppercase}).count\
    \ - extension_name.filter({$0.isLowercase}).count)\n        if current_strength\
    \ == 0 { continue }\n        if current_strength < strongest_strength {\n    \
    \        strongest_strength = current_strength\n            strongest_class_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_class_extension",
  "    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        let strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if strength >\
    \ strongest_strength {\n            strongest_strength = strength\n          \
    \  strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest = \"\"\n    var greatest\
    \ = 0\n    for ext in extensions {\n        var strength = 0\n        for letter\
    \ in ext {\n            if letter.isUppercase {\n                strength += 1\n\
    \            } else {\n                strength -= 1\n            }\n        }\n\
    \        if strength >= greatest {\n            greatest = strength\n        \
    \    strongest = ext\n        }\n    }\n    return class_name + \".\" + strongest",
  "    return class_name + \".\" + extensions.sorted(by: { (s1, s2) -> Bool in\n \
    \       let s1strength = s1.filter({ $0.isUppercase }).count - s1.filter({ $0.isLowercase\
    \ }).count\n        let s2strength = s2.filter({ $0.isUppercase }).count - s2.filter({\
    \ $0.isLowercase }).count\n        return s1strength > s2strength\n    }).first!",
  "    var strongest_extension = extensions[0]\n    var strength = 0\n    var upper_case_count\
    \ = 0\n    var lower_case_count = 0\n    for index in 0..<extensions.count {\n\
    \        var ext = extensions[index]\n        for letter in ext {\n          \
    \  if letter.isUppercase {\n                upper_case_count += 1\n          \
    \  } else {\n                lower_case_count += 1\n            }\n        }\n\
    \        var new_strength = upper_case_count - lower_case_count\n        if strength\
    \ < new_strength {\n            strength = new_strength\n            strongest_extension\
    \ = ext\n        }\n        upper_case_count = 0\n        lower_case_count = 0\n\
    \    }\n    return \"\\(class_name).\\(strongest_extension)\"", "    var max_strength:\
    \ Double = -1\n    var strongest_extension = \"\"\n    for extension_ in extensions\
    \ {\n        var cap_num = 0\n        var sm_num = 0\n        for char in extension_\
    \ {\n            if char.isUppercase {\n                cap_num += 1\n       \
    \     } else {\n                sm_num += 1\n            }\n        }\n      \
    \  if Double(cap_num - sm_num) > max_strength {\n            max_strength = Double(cap_num\
    \ - sm_num)\n            strongest_extension = extension_\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension", "    var current_strength\
    \ = -Double.infinity\n    var strongest_extension = \"\"\n    for extension_name\
    \ in extensions {\n        let capitals = extension_name.filter { $0.isUppercase\
    \ }\n        let smalls = extension_name.filter { $0.isLowercase }\n        let\
    \ strength = Double(capitals.count) - Double(smalls.count)\n        if strength\
    \ > current_strength {\n            current_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    let strength = extensions.map { extension_name in\n        let capital_count\
    \ = extension_name.filter { $0.isUppercase }.count\n        let small_count =\
    \ extension_name.filter { $0.isLowercase }.count\n        return (extension_name,\
    \ capital_count - small_count)\n    }\n    var strongest_extension_name = \"\"\
    \n    var strongest_extension_strength = Int.min\n    for ext in strength {\n\
    \        if ext.1 > strongest_extension_strength {\n            strongest_extension_name\
    \ = ext.0\n            strongest_extension_strength = ext.1\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension_name)\"", '  return class_name
    + "." + find_strongest_extension(extensions)', "    let strongest_extension =\
    \ extensions.enumerated().max(by: {(extension1, extension2) -> Bool in\n     \
    \   let strength1 = (extension1.element.filter({$0.isUppercase}).count - extension1.element.filter({$0.isLowercase}).count)\n\
    \        let strength2 = (extension2.element.filter({$0.isUppercase}).count -\
    \ extension2.element.filter({$0.isLowercase}).count)\n        return strength1\
    \ < strength2\n    })\n    return class_name + \".\" + strongest_extension!.element",
  '    return ""', "    var strongest = \"\"\n    var strength = 0\n    for extension_name\
    \ in extensions {\n        var caps = 0\n        var sms = 0\n        for c in\
    \ extension_name {\n            if c.isUppercase {\n                caps += 1\n\
    \            } else {\n                sms += 1\n            }\n        }\n  \
    \      let strength_of_extension = caps - sms\n        if strength_of_extension\
    \ > strength {\n            strength = strength_of_extension\n            strongest\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest)\"",
  "    let class_name = class_name\n    let extensions = extensions\n    let new_array\
    \ = extensions.map { [$0,($0.filter{$0.isUppercase}.count) - ($0.filter{$0.isLowercase}.count)]\
    \ }\n    let sorted_array = new_array.sorted { ($0[1] > $1[1]) || ($0[1] == $1[1]\
    \ && $0[0] < $1[0]) }\n    let strong_extension = sorted_array[0][0]\n    return\
    \ \"\\(class_name).\\(strong_extension)\"", "    var strg: [String: Double] =\
    \ [:]\n    for i in extensions {\n        var num = 0\n        for j in i {\n\
    \            if j.isUppercase {\n                num += 1\n            }\n   \
    \     }\n        for j in i {\n            if j.isLowercase {\n              \
    \  num -= 1\n            }\n        }\n        strg[i] = Double(num)\n    }\n\
    \    let value = strg.max { a, b in a.value < b.value }\n    if value != nil {\n\
    \        return \"\\(class_name).\\(value!.key)\"\n    }\n    return \"\"", " \
    \   let class_strength = Class_Strength(class_name: class_name)\n    var strongest_extension\
    \ = \"\"\n    var strongest_extension_name = \"\"\n    var strongest_extension_strength\
    \ = class_strength\n    for i in 0..<extensions.count {\n        let extension_strength\
    \ = Extension_Strength(extension_name: extensions[i])\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extensions[i]\n\
    \            strongest_extension_name = extensions[i]\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension_name)\"",
  "    var strongest = 0.0\n    var new_ext = \"\"\n    for ext in extensions {\n\
    \        var uppercase_count = 0\n        var lowercase_count = 0\n        for\
    \ char in ext {\n            if String(char).uppercased() == String(char) {\n\
    \                uppercase_count += 1\n            } else {\n                lowercase_count\
    \ += 1\n            }\n        }\n        let strength = Double(uppercase_count)\
    \ - Double(lowercase_count)\n        if strength > strongest {\n            strongest\
    \ = strength\n            new_ext = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (new_ext)\"", '    return ""', "    // enter code here\n    var strength = Double(0)\n\
    \    var strongest = String()\n    for ext in extensions {\n        var cap =\
    \ 0\n        var sm = 0\n        for ch in ext {\n            if CharacterSet.uppercaseLetters.contains(ch.unicodeScalars.first!)\
    \ {\n                cap += 1\n            } else {\n                sm += 1\n\
    \            }\n        }\n        if Double(cap) - Double(sm) > strength {\n\
    \            strength = Double(cap) - Double(sm)\n            strongest = ext\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest)\"", "  let strength\
    \ = extensions.map({ (extension_name) -> (extension_name: String, strength: Double)\
    \ in\n    return (extension_name: extension_name, strength: Double(extension_name.filter({\
    \ char in char.isUppercase }).count) - Double(extension_name.filter({ char in\
    \ char.isLowercase }).count))\n  })\n  var strongest_extension = \"\"\n  var strongest_strength\
    \ = 0.0\n  for i in 0..<strength.count {\n    if (strongest_strength < strength[i].strength)\
    \ {\n      strongest_strength = strength[i].strength\n      strongest_extension\
    \ = strength[i].extension_name\n    }\n  }\n  return class_name + \".\" + strongest_extension",
  "    var best_extension: String = \"\"\n    var best_extension_strength: Double\
    \ = 0.0\n    for e in extensions {\n        let regex = try! NSRegularExpression(pattern:\
    \ \"[A-Z]\", options: .caseInsensitive)\n        let cap = regex.matches(in: e,\
    \ options: [], range: NSRange(location: 0, length: e.count)).count\n        let\
    \ sm = e.count - cap\n        let strength = Double(cap) - Double(sm)\n      \
    \  if strength > best_extension_strength {\n            best_extension = e\n \
    \           best_extension_strength = strength\n        }\n    }\n    return \"\
    \\(class_name).\\(best_extension)\"", "    var upperCase: Int = 0\n    var lowerCase:\
    \ Int = 0\n    var strongest: Int = 0\n    var strongestIndex: Int = 0\n    for\
    \ i in 0..<extensions.count {\n        for letter in extensions[i] {\n       \
    \     if letter.isUppercase {\n                upperCase += 1\n            } else\
    \ {\n                lowerCase += 1\n            }\n        }\n        if upperCase\
    \ - lowerCase > strongest {\n            strongest = upperCase - lowerCase\n \
    \           strongestIndex = i\n        }\n        upperCase = 0\n        lowerCase\
    \ = 0\n    }\n    return \"\\(class_name).\\(extensions[strongestIndex])\"", " \
    \   var strongest_extension = \"\";\n    var strongest_strength = 0;\n    for\
    \ extension_name in extensions {\n        let num_uppercase = extension_name.filter\
    \ { $0.isUppercase }.count;\n        let num_lowercase = extension_name.filter\
    \ { $0.isLowercase }.count;\n        let strength = num_uppercase - num_lowercase;\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension_name;\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\";", "    // Your code\
    \ here\n    var class_name = class_name\n    var extensions = extensions\n   \
    \ var mx: Int = 0\n    var mx_string: String = \"\"\n    for i in extensions {\n\
    \        var strength: Int = 0\n        for j in i {\n            if j.isLowercase\
    \ {\n                strength -= 1\n            } else {\n                strength\
    \ += 1\n            }\n        }\n        if abs(strength) > mx {\n          \
    \  mx = abs(strength)\n            mx_string = i\n        }\n    }\n    class_name\
    \ += \".\" + mx_string\n    return class_name", '    return ""', '    return "my_class.AA"',
  "    var strongest = (\"\", 0)\n    var diff: Float = 0\n    for ext in extensions\
    \ {\n        diff = 0\n        for char in ext {\n            if char.isUppercase\
    \ {\n                diff += 1\n            } else {\n                diff -=\
    \ 1\n            }\n        }\n        if diff > strongest.1 {\n            strongest\
    \ = (ext, diff)\n        }\n    }\n    return \"\\(class_name).\\(strongest.0)\"",
  "    var strongest = \"\"\n    var strongestStrength = 0.0\n    for extension in\
    \ extensions {\n        var numUpper = 0\n        var numLower = 0\n        for\
    \ letter in extension {\n            if letter.isUppercase {\n               \
    \ numUpper += 1\n            } else {\n                numLower += 1\n       \
    \     }\n        }\n        let strength = Double(numUpper) - Double(numLower)\n\
    \        if strength > strongestStrength {\n            strongestStrength = strength\n\
    \            strongest = extension\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", "    let upperCase = CharacterSet.uppercaseLetters\n    let lowerCase\
    \ = CharacterSet.lowercaseLetters\n    var return_string = class_name\n    var\
    \ max_strength = 0.0\n    for extension_name in extensions {\n        var caps_strength\
    \ = 0\n        var small_strength = 0\n        for character in extension_name.characters\
    \ {\n            if character.isLowercase {\n                small_strength +=\
    \ 1\n            } else if character.isUppercase {\n                caps_strength\
    \ += 1\n            }\n        }\n        let current_strength = Double(caps_strength)\
    \ - Double(small_strength)\n        if max_strength < current_strength {\n   \
    \         max_strength = current_strength\n            return_string = return_string\
    \ + \".\" + extension_name\n        }\n    }\n    return return_string", "   \
    \ var strongest_extension: String = \"\"\n    var strength: Float = 0\n    for\
    \ extension_name in extensions {\n        let letters = Array(extension_name)\n\
    \        var sm: Float = 0\n        var cap: Float = 0\n        for letter in\
    \ letters {\n            if letter.lowercased() == letter {\n                sm\
    \ += 1\n            } else {\n                cap += 1\n            }\n      \
    \  }\n        let extension_strength = cap - sm\n        if strength < extension_strength\
    \ {\n            strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest = extensions[0]\n    for i in 1..<extensions.count {\n      \
    \  let strength1 = strength(string: strongest)\n        let strength2 = strength(string:\
    \ extensions[i])\n        if (strength1 < strength2) {\n            strongest\
    \ = extensions[i]\n        }\n    }\n    return class_name + \".\" + strongest",
  '    return ""', "    var strongestExt = \"\"\n    var strength = 0\n    for ext\
    \ in extensions {\n        let countOfUpper = ext.filter{ $0.isUppercase }.count\n\
    \        let countOfLower = ext.filter{ $0.isLowercase }.count\n        let currentStrength\
    \ = countOfUpper - countOfLower\n        if currentStrength > strength {\n   \
    \         strength = currentStrength\n            strongestExt = ext\n       \
    \ }\n    }\n    return \"\\(class_name).\\(strongestExt)\"", "    var extension_strength\
    \ = 0\n    var strongest_extension = \"\"\n    for extension in extensions {\n\
    \        var num_capital = 0\n        var num_lowercase = 0\n        for char\
    \ in extension {\n            if char.isUppercase {\n                num_capital\
    \ += 1\n            } else {\n                num_lowercase += 1\n           \
    \ }\n        }\n        if num_capital - num_lowercase > extension_strength {\n\
    \            extension_strength = num_capital - num_lowercase\n            strongest_extension\
    \ = extension\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\""]
stop_tokens:
- "\n}"
