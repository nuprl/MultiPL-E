name: HumanEval_114_minSubArraySum
language: swift
prompt: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4, 1,\
  \ 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4])\
  \ == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
  \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
  \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) == 0)\n\
  assert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
  \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13, 8,\
  \ 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
  assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
  \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
completions: ["    var minSum = nums[0]\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    guard nums.count > 0 else { return 0 }\n    var minSum = Int.max\n\
    \    var currentSum = 0\n    for i in 0..<nums.count {\n        currentSum +=\
    \ nums[i]\n        minSum = min(minSum, currentSum)\n        if currentSum > 0\
    \ {\n            currentSum = 0\n        }\n    }\n    return minSum", "    var\
    \ sum = 0\n    var minSum = Int.max\n    for num in nums {\n        sum += num\n\
    \        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum", "    guard nums.count > 0 else { return\
    \ 0 }\n    var currentMin = nums[0]\n    var sum = 0\n    var temp = 0\n    for\
    \ num in nums {\n        sum += num\n        temp = min(sum, temp + num)\n   \
    \     currentMin = min(currentMin, temp)\n    }\n    return currentMin", "   \
    \ var sum = 0\n    var min = Int.max\n    for num in nums {\n        sum += num\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min", "    var minSum =\
    \ Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum +=\
    \ num\n        minSum = min(minSum, currentSum)\n        currentSum = min(currentSum,\
    \ 0)\n    }\n    return minSum", "    var result = Int.max\n    var total = 0\n\
    \    var left = 0\n    for (right, num) in nums.enumerated() {\n        total\
    \ += num\n        while total >= 0 {\n            result = min(result, total)\n\
    \            total -= nums[left]\n            left += 1\n        }\n    }\n  \
    \  return result", "    var min: Int = Int.max\n    var sum: Int = 0\n    for\
    \ i in 0..<nums.count {\n        sum += nums[i]\n        if sum < min {\n    \
    \        min = sum\n        }\n        if sum > 0 {\n            sum = 0\n   \
    \     }\n    }\n    return min", "    var sum = 0\n    var min = Int.max\n   \
    \ for num in nums {\n        sum += num\n        if sum < min {\n            min\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return min", "    var sum = 0\n    var minSum = Int.max\n    var i =\
    \ 0\n    var j = 0\n    while j < nums.count {\n        sum += nums[j]\n     \
    \   if sum < minSum {\n            minSum = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n            i = j + 1\n        }\n        j += 1\n \
    \   }\n    return minSum", "    var minSum = nums[0]\n    var sum = 0\n    for\
    \ i in 0..<nums.count {\n        sum += nums[i]\n        if sum < minSum {\n \
    \           minSum = sum\n        }\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum", "    guard !nums.isEmpty else { return\
    \ 0 }\n    var currSum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        currSum += num\n        minSum = min(minSum, currSum)\n        currSum\
    \ = min(currSum, 0)\n    }\n    return minSum", "    var sum = 0\n    var minSum\
    \ = Int.max\n    var i = 0\n    while i < nums.count {\n        if sum < 0 {\n\
    \            sum = 0\n        }\n        sum += nums[i]\n        minSum = min(minSum,\
    \ sum)\n        i += 1\n    }\n    return minSum", "    var minSum = Int.max\n\
    \    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n    \
    \    minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n    }\n    return minSum", "    guard nums.count > 0 else { return 0\
    \ }\n    var minSum = nums[0]\n    var currentSum = nums[0]\n    for num in nums[1...]\
    \ {\n        currentSum = min(currentSum + num, num)\n        minSum = min(minSum,\
    \ currentSum)\n    }\n    return minSum", "    guard nums.count > 0 else { return\
    \ 0 }\n    var curr = nums[0]\n    var minSum = nums[0]\n    for i in 1..<nums.count\
    \ {\n        curr = max(nums[i], curr + nums[i])\n        minSum = min(minSum,\
    \ curr)\n    }\n    return minSum", "  guard nums.count > 0 else { return 0 }\n\
    \  guard nums.count > 1 else { return nums[0] }\n  var minSum = nums[0]\n  var\
    \ currSum = nums[0]\n  for i in 1..<nums.count {\n    currSum = min(nums[i], currSum\
    \ + nums[i])\n    minSum = min(minSum, currSum)\n  }\n  return minSum", "    guard\
    \ !nums.isEmpty else { return 0 }\n    var minSum = nums[0]\n    var currentSum\
    \ = 0\n    for i in 0..<nums.count {\n        currentSum += nums[i]\n        if\
    \ currentSum < minSum {\n            minSum = currentSum\n        }\n        if\
    \ currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum",
  "    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n     \
    \   currentSum += num\n        minSum = min(minSum, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return minSum", "    guard !nums.isEmpty else\
    \ { return 0 }\n    var sum = nums[0]\n    var minSum = sum\n    for i in 1..<nums.count\
    \ {\n        sum = min(nums[i], sum + nums[i])\n        minSum = min(minSum, sum)\n\
    \    }\n    return minSum", "    var minSum = Int.max\n    var currSum = 0\n \
    \   for num in nums {\n        currSum += num\n        minSum = min(minSum, currSum)\n\
    \        currSum = max(currSum, 0)\n    }\n    return minSum", "    var min_sum\
    \ = Int.max\n    var sum = 0\n    for (i, v) in nums.enumerated() {\n        sum\
    \ += v\n        if i != 0 {\n            min_sum = min(min_sum, sum)\n       \
    \ }\n    }\n    return min_sum", "    var minSum = Int.max\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        minSum = min(minSum, sum)\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum",
  "    var minSum = Int.max\n    var currSum = 0\n    var startIndex = 0\n    for\
    \ (index, num) in nums.enumerated() {\n        currSum += num\n        while startIndex\
    \ <= index && currSum > 0 {\n            currSum -= nums[startIndex]\n       \
    \     startIndex += 1\n        }\n        minSum = min(minSum, currSum)\n    }\n\
    \    return minSum", "    guard nums.count > 0 else { return 0 }\n    guard nums.count\
    \ > 1 else { return nums[0] }\n    var minimum = Int.max\n    var current = 0\n\
    \    var maxNegative = nums[0]\n    for num in nums {\n        current += num\n\
    \        maximum = max(maximum, current)\n        if current < 0 {\n         \
    \   current = 0\n        }\n        maxNegative = max(maxNegative, num)\n    }\n\
    \    return maximum == 0 ? maxNegative : maximum", "    // Implement your solution\
    \ here\n    var minSum = Int.max\n    var currSum = 0\n    for num in nums {\n\
    \        currSum += num\n        minSum = min(minSum, currSum)\n        currSum\
    \ = max(currSum, 0)\n    }\n    return minSum", "    guard nums.count > 0 else\
    \ { return 0 }\n    var currentSum = 0\n    var minimumSum = Int.max\n    for\
    \ num in nums {\n        currentSum += num\n        minimumSum = min(minimumSum,\
    \ currentSum)\n        currentSum = max(currentSum, 0)\n    }\n    return minimumSum",
  "    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n     \
    \   currentSum += num\n        minSum = min(minSum, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return minSum", "    guard !nums.isEmpty else\
    \ { return 0 }\n    var currentMinSum = Int.max\n    var currentSum = 0\n    for\
    \ num in nums {\n        currentSum += num\n        currentMinSum = min(currentMinSum,\
    \ currentSum)\n        currentSum = max(currentSum, 0)\n    }\n    return currentMinSum",
  "    var min = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n       \
    \ sum += nums[i]\n        if sum < min {\n            min = sum\n        }\n \
    \       if sum > 0 {\n            sum = 0\n        }\n    }\n    return min",
  "    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n    \
    \    sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum", "    var minSubArraySum\
    \ = Int.max\n    var currentMin = 0\n    for num in nums {\n        currentMin\
    \ = min(currentMin + num, num)\n        minSubArraySum = min(minSubArraySum, currentMin)\n\
    \    }\n    return minSubArraySum", "    var currentSum = 0\n    var minSum =\
    \ Int.max\n    for num in nums {\n        currentSum += num\n        minSum =\
    \ min(minSum, currentSum)\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum", "    // edge case\n    guard nums.count\
    \ > 0 else { return 0 }\n    \n    // initialize the minimal sum to be the first\
    \ element\n    var minSum = nums[0]\n    // initialize the sum of subarray from\
    \ the beginning to be the first element\n    var currentSum = nums[0]\n    \n\
    \    // for loop to go through each element in the array\n    for i in 1..<nums.count\
    \ {\n        // for each element, compare the current sum with the min sum, and\
    \ assign minSum to be the smaller value\n        minSum = min(minSum, currentSum)\n\
    \        // after comparing the current sum with the min sum, if the current sum\
    \ is negative,\n        // just replace it by the current element, otherwise,\
    \ add the current element to the sum\n        currentSum = max(currentSum + nums[i],\
    \ nums[i])\n    }\n    \n    // after the for loop, compare the last current sum\
    \ with the min sum\n    // and return the smaller one\n    return min(minSum,\
    \ currentSum)", "    var start = 0\n    var end = 0\n    var minSum = Int.max\n\
    \    var currSum = 0\n    \n    while end < nums.count {\n        currSum += nums[end]\n\
    \        while currSum > 0 {\n            minSum = min(minSum, currSum)\n    \
    \        currSum -= nums[start]\n            start += 1\n        }\n        end\
    \ += 1\n    }\n    \n    return minSum", "    guard nums.count > 0 else { return\
    \ 0 }\n    let firstSum = nums.first!\n    guard nums.count > 1 else { return\
    \ firstSum }\n    var curSum = firstSum\n    var minSum = curSum\n    for index\
    \ in 1..<nums.count {\n        curSum = min(nums[index], curSum + nums[index])\n\
    \        minSum = min(minSum, curSum)\n    }\n    return minSum", "    guard nums.count\
    \ > 0 else { return 0 }\n    var minSum = Int.max\n    var sum = 0\n    for i\
    \ in 0..<nums.count {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum",
  "    // TODO: implement\n    return 0", "    guard nums.count > 0 else { return\
    \ 0 }\n    var globalMin = Int.max\n    var localMin = 0\n    for i in 0..<nums.count\
    \ {\n        localMin = min(nums[i], localMin + nums[i])\n        globalMin =\
    \ min(globalMin, localMin)\n    }\n    return globalMin", "    var currentMinimum\
    \ = Int.max\n    var currentSum = 0\n    for number in nums {\n        currentSum\
    \ += number\n        if currentSum < currentMinimum {\n            currentMinimum\
    \ = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return currentMinimum", "    var currSum = 0\n  \
    \  var minSum = Int.max\n    for num in nums {\n        currSum += num\n     \
    \   minSum = min(minSum, currSum)\n        currSum = max(currSum, 0)\n    }\n\
    \    return minSum", "    var minSum = Int.max\n    var currentSum = 0\n    for\
    \ num in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum", "    var\
    \ minSum = nums[0]\n    var currentSum = nums[0]\n    for index in 1..<nums.count\
    \ {\n        currentSum = min(nums[index], currentSum + nums[index])\n       \
    \ minSum = min(minSum, currentSum)\n    }\n    return minSum", "    var min =\
    \ nums[0]\n    var current = nums[0]\n    for i in 1..<nums.count {\n        current\
    \ = min(current + nums[i], nums[i])\n        min = min(min, current)\n    }\n\
    \    return min", "    var minSum = nums[0]\n    var currentSum = nums[0]\n  \
    \  for i in 1..<nums.count {\n        currentSum = min(nums[i], currentSum + nums[i])\n\
    \        minSum = min(minSum, currentSum)\n    }\n    return minSum", "  var minimumSum\
    \ = Int.max\n  var sum = 0\n  for num in nums {\n    sum += num\n    minimumSum\
    \ = min(minimumSum, sum)\n    if sum > 0 {\n      sum = 0\n    }\n  }\n  return\
    \ minimumSum", "    var minSum = nums[0]\n    var currentSum = 0\n    for i in\
    \ 0..<nums.count {\n        currentSum += nums[i]\n        if currentSum < minSum\
    \ {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n\
    \            currentSum = 0\n        }\n    }\n    return minSum", "    var (ans,\
    \ currentSum) = (Int.max, 0)\n    for num in nums {\n        currentSum += num\n\
    \        ans = min(ans, currentSum)\n        currentSum = max(currentSum, 0)\n\
    \    }\n    return ans", "  var minSum = Int.max\n  var sum = 0\n  for num in\
    \ nums {\n    sum += num\n    minSum = min(minSum, sum)\n    if sum > 0 {\n  \
    \    sum = 0\n    }\n  }\n  return minSum", "    var sum = 0\n    var minSum =\
    \ Int.max\n    for num in nums {\n        sum += num\n        minSum = min(minSum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    var minSum = Int.max\n    var sum = 0\n    var min = Int.max\n\
    \    for num in nums {\n        sum += num\n        min = min < num ? min : num\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum == Int.max ?\
    \ min : minSum", "    var minSum = Int.max\n    var currSum = 0\n    for i in\
    \ 0..<nums.count {\n        currSum += nums[i]\n        if currSum < minSum {\n\
    \            minSum = currSum\n        }\n        if currSum > 0 {\n         \
    \   currSum = 0\n        }\n    }\n    return minSum", "    var total = 0\n  \
    \  var minTotal = Int.max\n    for num in nums {\n        total += num\n     \
    \   minTotal = min(total, minTotal)\n        if total > 0 {\n            total\
    \ = 0\n        }\n    }\n    return minTotal", "    var min = Int.max\n    var\
    \ sum = 0\n    var left = 0\n    for (right, num) in nums.enumerated() {\n   \
    \     sum += num\n        if sum < min {\n            min = sum\n        }\n \
    \       if sum > 0 {\n            sum = 0\n            left = right + 1\n    \
    \    }\n    }\n    return min", "    var minSum = Int.max\n    var currentSum\
    \ = 0\n    for num in nums {\n        currentSum += num\n        minSum = min(minSum,\
    \ currentSum)\n        currentSum = min(currentSum, 0)\n    }\n    return minSum",
  "    // Guard: Check for empty array\n    guard !nums.isEmpty else { return 0 }\n\
    \    \n    // 1. Initialize variables\n    var subarraySum = 0\n    var minSum\
    \ = Int.max\n    \n    // 2. Iterate through the array to find minSum\n    for\
    \ i in 0..<nums.count {\n        // 2.a. add current element to subarraySum\n\
    \        subarraySum += nums[i]\n        \n        // 2.b. If subarraySum is smaller\
    \ than minSum\n        //      Update minSum to subarraySum\n        if subarraySum\
    \ < minSum {\n            minSum = subarraySum\n        }\n        \n        //\
    \ 2.c. If subarraySum is greater than 0\n        //      Reset subarraySum to\
    \ 0\n        if subarraySum > 0 {\n            subarraySum = 0\n        }\n  \
    \  }\n    \n    // 3. Return minimum sum of the subarray\n    return minSum",
  "    // brute force: is O(n^2) time complexity, O(1) space\n    // var minSum =\
    \ Int.max\n    // for i in 0..<nums.count {\n    //     var currentSum = 0\n \
    \   //     for j in i..<nums.count {\n    //         currentSum += nums[j]\n \
    \   //         if currentSum < minSum {\n    //             minSum = currentSum\n\
    \    //         }\n    //     }\n    // }\n    // return minSum\n    \n    //\
    \ kadane's algo: is O(n) time complexity, O(1) space\n    var minSum = Int.max\n\
    \    var currentSum = 0\n    for i in 0..<nums.count {\n        currentSum +=\
    \ nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n\
    \        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n\
    \    }\n    return minSum", "  var minSum = Int.max\n  var currentSum = 0\n  for\
    \ num in nums {\n    currentSum += num\n    minSum = min(minSum, currentSum)\n\
    \    currentSum = max(currentSum, 0)\n  }\n  return minSum", "    guard !nums.isEmpty\
    \ else { return 0 }\n    var minSum = Int.max\n    var currentSum = 0\n    for\
    \ num in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = currentSum < 0 ? 0 : currentSum\n    }\n    return minSum",
  "    var min = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min", "    guard nums.count\
    \ > 0 else { return 0 }\n    var minSum = nums[0]\n    var localSum = nums[0]\n\
    \    for i in 1..<nums.count {\n        localSum = max(nums[i], localSum + nums[i])\n\
    \        minSum = min(minSum, localSum)\n    }\n    return minSum", "    guard\
    \ !nums.isEmpty else { return 0 }\n    var globalMinSum = Int.max\n    var localMinSum\
    \ = 0\n    for num in nums {\n        localMinSum = min(localMinSum + num, num)\n\
    \        globalMinSum = min(globalMinSum, localMinSum)\n    }\n    return globalMinSum",
  "    let sorted = nums.sorted()\n    var min = sorted[0]\n    var sum = 0\n    for\
    \ num in sorted {\n        sum += num\n        if sum < min {\n            min\
    \ = sum\n        }\n    }\n    return min", "    var min = nums[0]\n    var sum\
    \ = nums[0]\n    for i in 1..<nums.count {\n        if sum > 0 {\n           \
    \ sum = nums[i]\n        } else {\n            sum += nums[i]\n        }\n   \
    \     min = min < sum ? min : sum\n    }\n    return min", "    var min = Int.max\n\
    \    var current = 0\n    for num in nums {\n        current += num\n        if\
    \ current < min {\n            min = current\n        }\n        if current >\
    \ 0 {\n            current = 0\n        }\n    }\n    return min", "    var minSum\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        minSum = min(minSum, currentSum)\n        currentSum = min(currentSum,\
    \ 0)\n    }\n    return minSum", "    var minSum = Int.max\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        minSum = min(minSum, sum)\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum",
  "    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    return minSum", "    var localMax = nums[0]\n   \
    \ var result = nums[0]\n    for i in 1..<nums.count {\n        localMax = max(nums[i],\
    \ localMax + nums[i])\n        result = min(result, localMax)\n    }\n    return\
    \ result", "    if nums.count == 0 { return 0 }\n    var minSum = Int.max\n  \
    \  var currSum = 0\n    for i in 0..<nums.count {\n        currSum += nums[i]\n\
    \        minSum = min(minSum, currSum)\n        if currSum > 0 {\n           \
    \ currSum = 0\n        }\n    }\n    return minSum", "    guard nums.count > 0\
    \ else { return 0 }\n    guard nums.count > 1 else { return nums[0] }\n    var\
    \ minSum = nums[0]\n    var currentSum = nums[0]\n    for num in nums[1...] {\n\
    \        currentSum = min(currentSum + num, num)\n        minSum = min(minSum,\
    \ currentSum)\n    }\n    return minSum", "    var minimumSum = Int.max\n    var\
    \ currentSum = 0\n    for num in nums {\n        currentSum += num\n        minimumSum\
    \ = min(minimumSum, currentSum)\n        currentSum = max(currentSum, 0)\n   \
    \ }\n    return minimumSum", "    // NOTE: the `nums` is the given array with\
    \ at least one positive integer.\n    var minSum = nums[0]\n    var sum = 0\n\
    \    for num in nums {\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        sum += num\n        minSum = min(minSum, sum)\n    }\n    return minSum",
  "    var minValue = Int.max\n    var currValue = 0\n    for num in nums {\n    \
    \    currValue += num\n        minValue = min(minValue, currValue)\n        currValue\
    \ = max(currValue, 0)\n    }\n    return minValue", "    var min = Int.max\n \
    \   var sum = 0\n    for num in nums {\n        sum += num\n        if sum < min\
    \ {\n            min = sum\n        }\n        if sum > 0 {\n            sum =\
    \ 0\n        }\n    }\n    return min", "    var minSum = Int.max\n    var sum\
    \ = 0\n    var left = 0\n    for right in 0..<nums.count {\n        sum += nums[right]\n\
    \        while sum >= 0 {\n            minSum = min(minSum, sum)\n           \
    \ sum -= nums[left]\n            left += 1\n        }\n    }\n    return minSum",
  "    // 1. If the array is empty, then return 0.\n    guard !nums.isEmpty else {\
    \ return 0 }\n    // 2. Iterate through the array from the start and keep summing\
    \ elements in a subarray\n    // that is contiguous.\n    var minSum = nums[0]\n\
    \    var currentSum = 0\n    for num in nums {\n        currentSum += num\n  \
    \      minSum = min(minSum, currentSum)\n        if currentSum > 0 {\n       \
    \     currentSum = 0\n        }\n    }\n    return minSum", "    var currentSum\
    \ = 0\n    var minSum = Int.max\n    var i = 0\n    while i < nums.count {\n \
    \       currentSum += nums[i]\n        if currentSum < minSum {\n            minSum\
    \ = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n        i += 1\n    }\n    return minSum", "    var min = Int.max\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        if sum <\
    \ min {\n            min = sum\n        }\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    return min", "    var min = Int.max\n    var sum\
    \ = 0\n    var start = 0\n    var end = 0\n    while end < nums.count {\n    \
    \    sum += nums[end]\n        end += 1\n        while sum >= 0 {\n          \
    \  min = min < sum ? min : sum\n            sum -= nums[start]\n            start\
    \ += 1\n        }\n    }\n    return min", "    guard nums.count > 0 else { return\
    \ 0 }\n    guard nums.count > 1 else { return nums[0] }\n    var result = nums[0]\n\
    \    var previous = nums[0]\n    for i in 1..<nums.count {\n        previous =\
    \ min(previous + nums[i], nums[i])\n        result = min(result, previous)\n \
    \   }\n    return result", "    if nums.count == 0 { return 0 }\n    var minSum\
    \ = nums[0]\n    var currentSum = nums[0]\n    for index in 1..<nums.count {\n\
    \        if currentSum < 0 {\n            currentSum = nums[index]\n        }\
    \ else {\n            currentSum += nums[index]\n        }\n        minSum = min(minSum,\
    \ currentSum)\n    }\n    return minSum", "    if nums.count == 0 { return 0 }\n\
    \    let n = nums.count\n    var minSum = Int.max\n    var globalSum = 0\n   \
    \ var start = 0\n    for i in 0..<n {\n        globalSum += nums[i]\n        if\
    \ globalSum < minSum {\n            minSum = globalSum\n        }\n        if\
    \ globalSum > 0 {\n            globalSum = 0\n            start = i + 1\n    \
    \    }\n    }\n    return minSum", "    // TODO: Implement it\n    return 0",
  "    // TODO: - Test cases\n    var current = nums[0]\n    var min = nums[0]\n \
    \   for i in 1..<nums.count {\n        current = min(nums[i], current + nums[i])\n\
    \        min = min(current, min)\n    }\n    return min", "    guard !nums.isEmpty\
    \ else { return 0 }\n    var result = nums[0]\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        result = min(result, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return result", "    // TODO: - Fill\
    \ this in.\n    return 0", "    var sum = 0\n    var minSum = Int.max\n    for\
    \ num in nums {\n        sum += num\n        minSum = min(minSum, sum)\n     \
    \   if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum", " \
    \   var low = 0\n    var high = 0\n    var total = nums[0]\n    var min = total\n\
    \    while high < nums.count {\n        if total < 0 {\n            low = high\n\
    \            total = 0\n        }\n        total += nums[high]\n        min =\
    \ min > total ? total : min\n        high += 1\n    }\n    return min", "    guard\
    \ !nums.isEmpty else { return 0 }\n    var sum = 0\n    var minSum = Int.max\n\
    \    for num in nums {\n        sum += num\n        minSum = min(minSum, sum)\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum",
  "    var min = Int.max\n    var sum = 0\n    var i = 0, j = 0\n    while j < nums.count\
    \ {\n        sum += nums[j]\n        if sum < min {\n            min = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n            i = j + 1\n\
    \        }\n        j += 1\n    }\n    return min", "    var currentSum = 0\n\
    \    var minSum = Int.max\n    for num in nums {\n        currentSum += num\n\
    \        minSum = min(minSum, currentSum)\n        if currentSum > 0 {\n     \
    \       currentSum = 0\n        }\n    }\n    return minSum", "    var minSum\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        minSum = min(minSum, currentSum)\n        currentSum = max(currentSum,\
    \ 0)\n    }\n    return minSum", "    guard !nums.isEmpty else { return 0 }\n\
    \    var minSum = Int.max\n    var currSum = 0\n    for num in nums {\n      \
    \  currSum += num\n        minSum = min(minSum, currSum)\n        currSum = max(currSum,\
    \ 0)\n    }\n    return minSum", "    var minimum = Int.max\n    var sum = 0\n\
    \    var i = 0\n    var j = 0\n    while j < nums.count {\n        sum += nums[j]\n\
    \        while sum >= 0 {\n            minimum = min(minimum, sum)\n         \
    \   sum -= nums[i]\n            i += 1\n        }\n        j += 1\n    }\n   \
    \ return minimum", "    guard nums.count > 0 else { return -1 }\n    var start\
    \ = 0\n    var currentMin = Int.max\n    var currentSum = 0\n    for (index, num)\
    \ in nums.enumerated() {\n        currentSum += num\n        if currentSum < currentMin\
    \ {\n            currentMin = currentSum\n            start = index\n        }\n\
    \        while currentSum > 0 {\n            currentSum -= nums[start]\n     \
    \       start += 1\n            if currentSum < currentMin {\n               \
    \ currentMin = currentSum\n            }\n        }\n    }\n    return currentMin",
  "    let n = nums.count\n    if n == 0 { return 0 }\n    var minSum = nums[0]\n\
    \    var sum = 0\n    for i in 0..<n {\n        sum += nums[i]\n        minSum\
    \ = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n        }\n \
    \   }\n    return minSum", "    let nums = nums.map { $0 }\n    var minSum = Int.max\n\
    \    var currentSum = 0\n    for i in 0..<nums.count {\n        for j in i..<nums.count\
    \ {\n            currentSum += nums[j]\n            if currentSum < minSum {\n\
    \                minSum = currentSum\n            }\n        }\n        currentSum\
    \ = 0\n    }\n    return minSum", "    var minSum = Int.max\n    var sum = 0\n\
    \    for i in 0..<nums.count {\n        sum += nums[i]\n        minSum = min(minSum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    let length = nums.count\n    var result = Int.max\n    var sum\
    \ = 0\n    var left = 0\n    for right in 0..<length {\n        sum += nums[right]\n\
    \        while sum >= 0 {\n            result = min(result, sum)\n           \
    \ sum -= nums[left]\n            left += 1\n        }\n    }\n    return result",
  "    var minSum = Int.max\n    var tempSum = 0\n    for num in nums {\n        tempSum\
    \ += num\n        if tempSum < minSum {\n            minSum = tempSum\n      \
    \  }\n        if tempSum > 0 {\n            tempSum = 0\n        }\n    }\n  \
    \  return minSum", "    var minSum = Int.max\n    var sum = 0\n    var minStart\
    \ = 0\n    var minEnd = 0\n    var start = 0\n    for end in 0 ..< nums.count\
    \ {\n        sum += nums[end]\n        if sum < minSum {\n            minSum =\
    \ sum\n            minStart = start\n            minEnd = end\n        }\n   \
    \     if sum > 0 {\n            sum = 0\n            start = end + 1\n       \
    \ }\n    }\n    print(\"\\(minStart) \\(minEnd)\")\n    return minSum", "    var\
    \ minSum = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum", "    var minSum = Int.max\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        minSum = min(minSum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    if nums.count == 0 { return 0 }\n    var start = 0\n    var end\
    \ = 0\n    var minSum = Int.max\n    var sum = 0\n    while end < nums.count {\n\
    \        sum += nums[end]\n        end += 1\n        while sum >= 0 {\n      \
    \      minSum = min(minSum, sum)\n            sum -= nums[start]\n           \
    \ start += 1\n        }\n    }\n    return minSum", "    var res = Int.max\n \
    \   var sum = 0\n    var left = 0\n    for i in 0..<nums.count {\n        sum\
    \ += nums[i]\n        res = min(res, sum - left)\n        left = min(left, sum)\n\
    \    }\n    return res", "    var minimum = Int.max\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n        minimum = min(minimum, sum)\n   \
    \     if sum > 0 {\n            sum = 0\n        }\n    }\n    return minimum",
  "    guard nums.count > 0 else { return 0 }\n    var i = 0\n    var j = 0\n    var\
    \ minSum = Int.max\n    var total = 0\n    while j < nums.count {\n        total\
    \ += nums[j]\n        while total < 0 {\n            minSum = min(minSum, total)\n\
    \            total -= nums[i]\n            i += 1\n        }\n        j += 1\n\
    \    }\n    return minSum == Int.max ? 0 : minSum", "  guard nums.count > 0 else\
    \ { return 0 }\n  var minSum = Int.max\n  var currentSum = 0\n  for num in nums\
    \ {\n    currentSum += num\n    minSum = min(minSum, currentSum)\n    currentSum\
    \ = max(currentSum, 0)\n  }\n  return minSum", "    // write your code in Swift\
    \ 3.0 (Linux)\n    guard nums.count > 0 else { return 0 }\n    var min = nums[0]\n\
    \    var sum = nums[0]\n    for i in 1..<nums.count {\n        sum = nums[i] >\
    \ sum + nums[i] ? nums[i] : sum + nums[i]\n        min = min > sum ? sum : min\n\
    \    }\n    return min", "    guard nums.count > 0 else { return 0 }\n    var\
    \ minSum = Int.max\n    var sum = 0\n    for n in nums {\n        sum += n\n \
    \       minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum", "    var minSum = Int.max\n    var tempSum\
    \ = 0\n    for num in nums {\n        tempSum += num\n        if tempSum < minSum\
    \ {\n            minSum = tempSum\n        }\n        if tempSum > 0 {\n     \
    \       tempSum = 0\n        }\n    }\n    return minSum", "    let n = nums.count\n\
    \    if n == 0 { return 0 }\n    var result = Int.max\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n        result = min(result, sum)\n     \
    \   if sum > 0 {\n            sum = 0\n        }\n    }\n    return result", " \
    \   let n = nums.count\n    var left = 0\n    var sum = 0\n    var ans = Int.max\n\
    \    for right in 0..<n {\n        sum += nums[right]\n        while sum >= 0\
    \ {\n            ans = min(ans, sum)\n            sum -= nums[left]\n        \
    \    left += 1\n        }\n    }\n    return ans", "    guard !nums.isEmpty else\
    \ { return 0 }\n    var maxSoFar = Int.max\n    var currMax = 0\n    for num in\
    \ nums {\n        currMax = max(currMax + num, num)\n        maxSoFar = min(maxSoFar,\
    \ currMax)\n    }\n    return maxSoFar", "    let size = nums.count\n    var result\
    \ = Int.max\n    var sum = 0\n    var left = 0\n    for i in 0..<size {\n    \
    \    sum += nums[i]\n        while sum >= 0 {\n            result = min(result,\
    \ sum)\n            sum -= nums[left]\n            left += 1\n        }\n    }\n\
    \    return result", "    // TODO: Write some code to solve this coding challenge\n\
    \    return 0", "  if nums.count == 0 { return 0 }\n  var minSoFar = nums[0]\n\
    \  var current = nums[0]\n  for num in nums[1...] {\n    current = min(current\
    \ + num, num)\n    minSoFar = min(minSoFar, current)\n  }\n  return minSoFar",
  "    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n     \
    \   currentSum += num\n        minSum = min(minSum, currentSum)\n        currentSum\
    \ = min(currentSum, 0)\n    }\n    return minSum", "    guard nums.count > 0 else\
    \ { return 0 }\n    var localMin = nums[0]\n    var globalMin = nums[0]\n    for\
    \ i in 1..<nums.count {\n        localMin = max(nums[i], localMin + nums[i])\n\
    \        globalMin = min(localMin, globalMin)\n    }\n    return globalMin", " \
    \   // TODO: Implement\n    fatalError(\"TODO: Implement\")", "    var min = Int.max\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        if sum <\
    \ min {\n            min = sum\n        }\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    return min", "    guard nums.count > 0 else { return\
    \ 0 }\n    var min = nums[0]\n    var sum = 0\n    for num in nums {\n       \
    \ sum += num\n        if sum < min {\n            min = sum\n        }\n     \
    \   if sum > 0 {\n            sum = 0\n        }\n    }\n    return min", "  \
    \  let n = nums.count\n    var minSum = Int.max\n    var sum = 0\n    var left\
    \ = 0\n    for i in 0..<n {\n        sum += nums[i]\n        minSum = min(minSum,\
    \ sum - left)\n        left = min(left, sum)\n    }\n    return minSum", "   \
    \ var min = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n        sum\
    \ += nums[i]\n        if min > sum {\n            min = sum\n        }\n     \
    \   if sum > 0 {\n            sum = 0\n        }\n    }\n    return min", "  \
    \  var minSum = nums[0]\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        if sum < minSum {\n            minSum = sum\n        }\n      \
    \  if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum", " \
    \   var minSubArraySum = Int.max\n    var sum = 0\n    for num in nums {\n   \
    \     sum += num\n        minSubArraySum = min(minSubArraySum, sum)\n        if\
    \ sum > 0 {\n            sum = 0\n        }\n    }\n    return minSubArraySum",
  "    guard nums.count > 0 else { return 0 }\n    var minSum = Int.max\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        minSum = min(minSum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    // TODO: Implement me!\n    return 0", "    var minSum = Int.max\n\
    \    var currentSum = 0\n    for num in nums {\n        currentSum += num\n  \
    \      minSum = min(minSum, currentSum)\n        currentSum = max(currentSum,\
    \ 0)\n    }\n    return minSum", "    guard nums.count > 0 else { return 0 }\n\
    \    guard nums.count > 1 else { return nums[0] }\n    var minValue = nums[0]\n\
    \    var sumValue = nums[0]\n    for i in 1..<nums.count {\n        let num =\
    \ nums[i]\n        if num < minValue {\n            minValue = num\n        }\n\
    \        if sumValue < 0 {\n            sumValue = num\n        } else {\n   \
    \         sumValue += num\n        }\n        if sumValue < minValue {\n     \
    \       minValue = sumValue\n        }\n    }\n    return minValue", "    var\
    \ minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n        sum\
    \ += nums[i]\n        minSum = min(minSum, sum)\n        if sum > 0 {\n      \
    \      sum = 0\n        }\n    }\n    return minSum", "    var minSum = Int.max\n\
    \    var sum = 0\n    var j = 0\n    for i in 0..<nums.count {\n        sum +=\
    \ nums[i]\n        while sum >= 0 {\n            minSum = min(minSum, sum)\n \
    \           sum -= nums[j]\n            j += 1\n        }\n    }\n    return minSum",
  "    guard nums.count > 0 else { return 0 }\n    var minSum = Int.max\n    var currentSum\
    \ = 0\n    for num in nums {\n        currentSum += num\n        minSum = min(minSum,\
    \ currentSum)\n        currentSum = max(currentSum, 0)\n    }\n    return minSum",
  "    guard !nums.isEmpty else { return 0 }\n    guard nums.count > 1 else { return\
    \ nums[0] }\n    var minSum = nums[0]\n    var sum = nums[0]\n    for i in 1..<nums.count\
    \ {\n        sum = Swift.min(nums[i], sum + nums[i])\n        minSum = Swift.min(minSum,\
    \ sum)\n    }\n    return minSum", "    guard !nums.isEmpty else { return 0 }\n\
    \    var _sum = 0\n    var _min = Int.max\n    for num in nums {\n        _sum\
    \ += num\n        _min = min(_min, _sum)\n        _sum = min(_sum, 0)\n    }\n\
    \    return _min", "    guard !nums.isEmpty else { return 0 }\n    var minSum\
    \ = nums[0]\n    var sum = 0\n    for value in nums {\n        sum += value\n\
    \        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum", "    guard !nums.isEmpty else { return\
    \ 0 }\n    var result = nums[0]\n    var prev = nums[0]\n    for i in 1..<nums.count\
    \ {\n        if prev > 0 {\n            prev += nums[i]\n        } else {\n  \
    \          prev = nums[i]\n        }\n        result = min(result, prev)\n   \
    \ }\n    return result", "    var minSum = Int.max\n    var currSum = 0\n    for\
    \ num in nums {\n        currSum += num\n        minSum = min(minSum, currSum)\n\
    \        currSum = max(currSum, 0)\n    }\n    return minSum", "    var minSum\
    \ = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n    }\n    return minSum", "    var minSum = Int.max\n    var sum =\
    \ 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n        minSum = min(minSum,\
    \ sum)\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    var minSum = nums[0]\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    var minSum = Int.max\n    var minStart = 0\n    var minEnd = 0\n\
    \    var currentSum = 0\n    var start = 0\n    var end = 0\n    for i in 0..<nums.count\
    \ {\n        currentSum += nums[i]\n        end = i\n        if currentSum < minSum\
    \ {\n            minSum = currentSum\n            minStart = start\n         \
    \   minEnd = end\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n            start = i + 1\n        }\n    }\n    print(\"\\(minStart) \\\
    (minEnd)\")\n    return minSum", "    var subArray = nums\n    var result = 0\n\
    \    var temp = 0\n    for i in 0..<subArray.count {\n        temp += subArray[i]\n\
    \        if temp < result {\n            result = temp\n        }\n        if\
    \ temp > 0 {\n            temp = 0\n        }\n    }\n    return result", "  \
    \  var minimum = nums[0]\n    var previous = nums[0]\n    var result = nums[0]\n\
    \    for i in 1..<nums.count {\n        let current = nums[i]\n        previous\
    \ = min(current, previous + current)\n        minimum = min(minimum, previous)\n\
    \        result = min(result, current)\n    }\n    return min(minimum, result)",
  "    // Write your code here.\n    var minSoFar = Int.max\n    var currentMin =\
    \ 0\n    \n    for num in nums {\n        currentMin = Math.min(currentMin + num,\
    \ num)\n        minSoFar = Math.min(minSoFar, currentMin)\n    }\n    \n    return\
    \ minSoFar", "    var minSum = Int.max\n    var currSum = 0\n    var beg = 0\n\
    \    var end = 0\n    while end < nums.count {\n        currSum += nums[end]\n\
    \        while currSum >= 0 {\n            minSum = min(minSum, currSum)\n   \
    \         currSum -= nums[beg]\n            beg += 1\n        }\n        end +=\
    \ 1\n    }\n    return minSum", "    let len = nums.count\n    var min = Int.max\n\
    \    var sum = 0\n    for i in 0..<len {\n        sum += nums[i]\n        min\
    \ = min < sum ? min : sum\n        if sum < 0 {\n            sum = 0\n       \
    \ }\n    }\n    return min", "    var minSum = nums[0]\n    var currentSum = nums[0]\n\
    \    for i in 1..<nums.count {\n        currentSum = min(nums[i], currentSum +\
    \ nums[i])\n        minSum = min(minSum, currentSum)\n    }\n    return minSum",
  "    var result = Int.max\n    var sum = 0\n    var start = 0\n    var end = 0\n\
    \    while end < nums.count {\n        sum += nums[end]\n        while sum >=\
    \ 0 {\n            result = min(result, sum)\n            sum -= nums[start]\n\
    \            start += 1\n        }\n        end += 1\n    }\n    return result",
  "    var minSum = Int.max\n    var currentSum = 0\n    for item in nums {\n    \
    \    currentSum += item\n        if minSum > currentSum {\n            minSum\
    \ = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum", "    var res = Int.max\n    var sum\
    \ = 0\n    for i in 0..<nums.count {\n        if sum < 0 {\n            sum =\
    \ 0\n        }\n        sum += nums[i]\n        res = min(res, sum)\n    }\n \
    \   return res", "    var minSum = nums[0]\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        if sum < minSum {\n            minSum = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    var minSum = Int.max\n    var tempSum = 0\n    for num in nums\
    \ {\n        tempSum += num\n        if tempSum < minSum {\n            minSum\
    \ = tempSum\n        }\n        if tempSum > 0 {\n            tempSum = 0\n  \
    \      }\n    }\n    return minSum", "    var ans = nums[0]\n    var sum = 0\n\
    \    for num in nums {\n        if sum > 0 {\n            sum += num\n       \
    \ } else {\n            sum = num\n        }\n        ans = min(ans, sum)\n  \
    \  }\n    return ans", "    var minSum = Int.max\n    var sum = 0\n    for i in\
    \ 0..<nums.count {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum",
  "    var minSum = Int.max\n    var subSum = 0\n    for num in nums {\n        subSum\
    \ += num\n        minSum = min(minSum, subSum)\n        if subSum > 0 {\n    \
    \        subSum = 0\n        }\n    }\n    return minSum", "    var minSum = Int.max\n\
    \    var sum = 0\n    var left = 0\n    for right in 0..<nums.count {\n      \
    \  sum += nums[right]\n        while sum >= 0 {\n            minSum = min(minSum,\
    \ sum)\n            sum -= nums[left]\n            left += 1\n        }\n    }\n\
    \    return minSum", "    guard !nums.isEmpty else { return 0 }\n    var currentMax\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        currentMax = min(currentMax, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return currentMax", "    guard nums.count >\
    \ 0 else { return 0 }\n    var arr = nums\n    var minVal = nums[0]\n    var sumVal\
    \ = nums[0]\n    for i in 1..<nums.count {\n        arr[i] = min(arr[i], arr[i]\
    \ + arr[i - 1])\n        minVal = min(minVal, arr[i])\n        sumVal += arr[i]\n\
    \    }\n    return minVal", "    var minSoFar = Int.max\n    var minEndingHere\
    \ = 0\n    for num in nums {\n        minEndingHere = min(num, minEndingHere +\
    \ num)\n        minSoFar = min(minSoFar, minEndingHere)\n    }\n    return minSoFar",
  "    var minSum = Int.max\n    var currentSum = 0\n    for number in nums {\n  \
    \      currentSum += number\n        if currentSum < minSum {\n            minSum\
    \ = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum", "    var sum = nums[0]\n    var min\
    \ = sum\n    for i in 1..<nums.count {\n        sum = min(nums[i], sum + nums[i])\n\
    \        min = min(min, sum)\n    }\n    return min", "    guard !nums.isEmpty\
    \ else { return 0 }\n    var minSum = Int.max\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum", "    var min\
    \ = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min", "    var minSum =\
    \ Int.max\n    var currSum = 0\n    var start = 0\n    for (index, num) in nums.enumerated()\
    \ {\n        currSum += num\n        while currSum > minSum {\n            currSum\
    \ -= nums[start]\n            start += 1\n        }\n        minSum = min(minSum,\
    \ currSum)\n    }\n    return minSum", "    var minSum = Int.max\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        minSum = min(minSum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum", "    var min = Int.max\n    var sum = 0\n    var i = 0\n    while i\
    \ < nums.count {\n        sum += nums[i]\n        if sum < min {\n           \
    \ min = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n\
    \        i += 1\n    }\n    return min", "    guard nums.count > 0 else { return\
    \ 0 }\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n    \
    \    sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n   \
    \         sum = 0\n        }\n    }\n    return minSum", "    var minimum = Int.max\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        minimum =\
    \ Swift.min(minimum, sum)\n        if sum < 0 {\n            sum = 0\n       \
    \ }\n    }\n    return minimum", "  // Edge case.\n  guard nums.count > 0 else\
    \ { return 0 }\n  // Divide and conquer: We're going to use a dynamic programming\
    \ approach, using\n  // a \"memo\" array to track the minimum sum of sub-arrays\
    \ ending at each index\n  // in the input array.\n  var memo = [Int](repeating:\
    \ 0, count: nums.count)\n  memo[0] = nums[0]\n  var min = memo[0]\n  // For each\
    \ index in the array (i.e. element), check if the sub-array sum\n  // starting\
    \ from the previous element is less than the current element. If so,\n  // use\
    \ it. Otherwise, use the current element.\n  for i in 1..<nums.count {\n    memo[i]\
    \ = min(memo[i - 1], 0) + nums[i]\n    min = min(min, memo[i])\n  }\n  return\
    \ min", "    var result = Int.max\n    var sum = 0\n    for num in nums {\n  \
    \      sum += num\n        result = min(result, sum)\n        if sum > 0 {\n \
    \           sum = 0\n        }\n    }\n    return result", "    guard nums.count\
    \ > 0 else { return 0 }\n    var minSoFar = nums[0]\n    var minEndingHere = nums[0]\n\
    \    for index in 1..<nums.count {\n        minEndingHere = min(nums[index], minEndingHere\
    \ + nums[index])\n        minSoFar = min(minSoFar, minEndingHere)\n    }\n   \
    \ return minSoFar", "    var minSum = Int.max\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum", "    guard\
    \ nums.count > 0 else { return 0 }\n    var total = 0\n    var sum = Int.max\n\
    \    for n in nums {\n        total += n\n        sum = min(total, sum)\n    \
    \    total = max(total, 0)\n    }\n    return sum", "    var currentMin = nums[0]\n\
    \    var maxTillIndex = nums[0]\n    for i in 1..<nums.count {\n        maxTillIndex\
    \ = max(nums[i], maxTillIndex + nums[i])\n        currentMin = min(currentMin,\
    \ maxTillIndex)\n    }\n    return currentMin", "    var end = 0\n    var start\
    \ = 0\n    var sum = 0\n    var minSum = Int.max\n    \n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        end += 1\n        \n        while sum >=\
    \ 0 {\n            minSum = min(minSum, sum)\n            sum -= nums[start]\n\
    \            start += 1\n        }\n    }\n    \n    return minSum", "    var\
    \ min = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min", "    guard nums.count\
    \ > 0 else { return 0 }\n    var minSum = nums[0]\n    var currSum = 0\n    for\
    \ val in nums {\n        currSum += val\n        minSum = min(minSum, currSum)\n\
    \        currSum = max(currSum, 0)\n    }\n    return minSum", "    guard nums.count\
    \ > 0 else { return 0 }\n    var minSum = Int.max\n    var tmpSum = 0\n    for\
    \ num in nums {\n        tmpSum += num\n        minSum = min(minSum, tmpSum)\n\
    \        tmpSum = max(tmpSum, 0)\n    }\n    return minSum", "    var min = Int.max\n\
    \    var sum = 0\n    var start = 0\n    var end = 0\n    while end < nums.count\
    \ {\n        sum += nums[end]\n        end += 1\n        while sum >= 0 {\n  \
    \          min = min < sum ? min : sum\n            sum -= nums[start]\n     \
    \       start += 1\n        }\n    }\n    return min", "    guard nums.count >\
    \ 0 else { return 0 }\n    var minSum = nums[0]\n    var tempSum = nums[0]\n \
    \   for i in 1..<nums.count {\n        tempSum = tempSum + nums[i]\n        if\
    \ nums[i] < tempSum {\n            tempSum = nums[i]\n        }\n        if tempSum\
    \ < minSum {\n            minSum = tempSum\n        }\n    }\n    return minSum",
  "    var minSum = Int.max\n    var sum = 0\n    var minStartIndex = 0\n    var minEndIndex\
    \ = 0\n    var currentStartIndex = 0\n    for (i, num) in nums.enumerated() {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \         minStartIndex = currentStartIndex\n            minEndIndex = i\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n            currentStartIndex\
    \ = i + 1\n        }\n    }\n    return minSum", "    guard nums.count > 0 else\
    \ { return 0 }\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum", "    var\
    \ min: Int = 0\n    var index = 0\n    var sum = 0\n    while index < nums.count\
    \ {\n        sum += nums[index]\n        if sum < min {\n            min = sum\n\
    \        }\n        index += 1\n    }\n    return min", "    var currentSum =\
    \ 0\n    var minSum = Int.max\n    for num in nums {\n        currentSum += num\n\
    \        minSum = min(minSum, currentSum)\n        if currentSum > 0 {\n     \
    \       currentSum = 0\n        }\n    }\n    return minSum", "    var minimum\
    \ = Int.max\n    var current = 0\n    for num in nums {\n        current += num\n\
    \        if current < minimum {\n            minimum = current\n        }\n  \
    \      if current > 0 {\n            current = 0\n        }\n    }\n    return\
    \ minimum", "    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum", "    if nums.count\
    \ == 0 { return 0 }\n    var result = nums[0]\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        result = min(result, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return result", "    guard\
    \ nums.count > 0 else { return -1 }\n    var minSum = Int.max\n    var sum = 0\n\
    \    var j = 0\n    for i in 0..<nums.count {\n        while j < nums.count &&\
    \ sum < 0 {\n            sum += nums[j]\n            j += 1\n        }\n     \
    \   minSum = min(minSum, sum)\n        sum -= nums[i]\n    }\n    return minSum",
  "    if nums.count == 0 { return 0 }\n    var minSum = nums[0]\n    var currSum\
    \ = 0\n    for num in nums {\n        currSum += num\n        minSum = min(minSum,\
    \ currSum)\n        currSum = max(currSum, 0)\n    }\n    return minSum", "  \
    \  guard nums.count > 0 else { return 0 }\n    var result = nums[0]\n    var currentSum\
    \ = 0\n    for num in nums {\n        currentSum += num\n        result = min(result,\
    \ currentSum)\n        if currentSum > 0 {\n            currentSum = 0\n     \
    \   }\n    }\n    return result", "    var minSum = Int.max\n    var currSum =\
    \ 0\n    for num in nums {\n        currSum += num\n        minSum = min(minSum,\
    \ currSum)\n        currSum = max(currSum, 0)\n    }\n    return minSum", "  \
    \  var minSum = nums[0]\n    var currSum = 0\n    for num in nums {\n        currSum\
    \ += num\n        if currSum < minSum {\n            minSum = currSum\n      \
    \  }\n        if currSum > 0 {\n            currSum = 0\n        }\n    }\n  \
    \  return minSum", "    var currentMin = Int.max\n    var currentSum = 0\n   \
    \ for num in nums {\n        currentSum += num\n        currentMin = min(currentMin,\
    \ currentSum)\n        currentSum = max(currentSum, 0)\n    }\n    return currentMin",
  "    var minSum = Int.max\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    return minSum", "    guard nums.count > 0 else {\
    \ return 0 }\n    var currentSum = 0\n    var minSum = Int.max\n    for num in\
    \ nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum", "    guard\
    \ nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        minSum = min(minSum, sum)\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum",
  "    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n     \
    \   currentSum += num\n        minSum = min(minSum, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return minSum", "    var minSum = Int.max\n\
    \    var minTemp = 0\n    for num in nums {\n        minTemp += num\n        if\
    \ minTemp < minSum {\n            minSum = minTemp\n        }\n        if minTemp\
    \ > 0 {\n            minTemp = 0\n        }\n    }\n    return minSum"]
stop_tokens:
- "\n}"
