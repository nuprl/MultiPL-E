language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var digitSum = [Int: Int]()\n    for i in 0..<nums.count {\n        digitSum[i]\
    \ = sum_of_digits(nums[i])\n    }\n    var result = nums\n    result.sort { (a,\
    \ b) -> Bool in\n        if digitSum[a]! > digitSum[b]! {\n            return\
    \ false\n        } else if digitSum[a]! < digitSum[b]! {\n            return true\n\
    \        } else {\n            return a < b\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwsarekoq.swift:14:23: error: cannot find 'sum_of_digits' in scope\n\
    \        digitSum[i] = sum_of_digits(nums[i])\n                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var index: [Int] = []\n    var nums = nums\n\
    \    while nums.count > 0 {\n        var max_value = nums[0]\n        var max_index\
    \ = 0\n        for (i,value) in nums.enumerated() {\n            if value_sum(num:\
    \ value) > value_sum(num: max_value) {\n                max_value = value\n  \
    \              max_index = i\n            }\n        }\n        result.append(max_value)\n\
    \        index.append(max_index)\n        nums.remove(at: max_index)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2k_q2c7t.swift:19:16: error: cannot find 'value_sum' in scope\n\
    \            if value_sum(num: value) > value_sum(num: max_value) {\n        \
    \       ^~~~~~~~~\n/tmp/tmp2k_q2c7t.swift:19:40: error: cannot find 'value_sum'\
    \ in scope\n            if value_sum(num: value) > value_sum(num: max_value) {\n\
    \                                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sorted_nums = [Int]()\n    let sums = nums.map { $0.sum_of_digits() }\n\
    \    var indices = 0 ..< nums.count\n    indices.sort { sums[$0] < sums[$1] }\n\
    \    for index in indices {\n        sorted_nums.append(nums[index])\n    }\n\
    \    return sorted_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcowhpi_e.swift:13:30: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    let sums = nums.map { $0.sum_of_digits() }\n          \
    \                ~~ ^~~~~~~~~~~~~\n/tmp/tmpcowhpi_e.swift:15:13: error: value\
    \ of type 'Range<Int>' has no member 'sort'\n    indices.sort { sums[$0] < sums[$1]\
    \ }\n    ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return nums.sorted(by: { (num1, num2) -> Bool in\n    var num1Copy = num1\n\
    \    var num2Copy = num2\n    var sum1 = 0\n    var sum2 = 0\n    while num1Copy\
    \ != 0 {\n      sum1 += num1Copy % 10\n      num1Copy /= 10\n    }\n    while\
    \ num2Copy != 0 {\n      sum2 += num2Copy % 10\n      num2Copy /= 10\n    }\n\
    \    return sum1 < sum2\n  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpigms_3u6/tmpigms_3u6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfa837cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfa8073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfa8073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfa80727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigms_3u6                        0x00005649b02d44f4 <unavailable> + 5364

    5    libc.so.6                          0x00002adfa8568460 __libc_start_main +
    245

    6    tmpigms_3u6                        0x00005649b02d40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  let sum = nums.map{ return $0.sumOfDigits() }\n  return sum.enumerated().sorted(by:\
    \ { $0.element < $1.element }).map{ return nums[$0.offset] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpggnwwa1w.swift:12:33: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n  let sum = nums.map{ return $0.sumOfDigits() }\n           \
    \                  ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  if nums.isEmpty {\n    return []\n  }\n  return nums.map { return ($0, nums.reduce(0,\
    \ { $0 + $1 })) }\n    .sorted { $0.1 < $1.1 }\n    .map { $0.0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpyaodam9x/tmpyaodam9x.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1dce0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d1d9d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d1d9d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d1d9d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyaodam9x                        0x000055d691d895c4 <unavailable> + 5572

    5    libc.so.6                          0x00002b2d1decc460 __libc_start_main +
    245

    6    tmpyaodam9x                        0x000055d691d891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var copy_of_nums = nums\n    while copy_of_nums.count\
    \ > 0 {\n        var temp_dic = [Int: Int]()\n        for j in 0..<copy_of_nums.count\
    \ {\n            var temp_sum = 0\n            for i in String(copy_of_nums[j])\
    \ {\n                temp_sum += Int(String(i))!\n            }\n            temp_dic[copy_of_nums[j]]\
    \ = temp_sum\n        }\n        var temp_array = temp_dic.sorted(by: {$0.value\
    \ < $1.value})\n        result.append(temp_array[0].key)\n        copy_of_nums.remove(at:\
    \ copy_of_nums.index(of: temp_array[0].key)!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmprudtbfkz/tmprudtbfkz.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002addc2b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc2805561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002addc2805286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002addc280513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002addc2804bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprudtbfkz                        0x000055aef13aa838 <unavailable> + 10296

    6    tmprudtbfkz                        0x000055aef13a9ae4 <unavailable> + 6884

    7    libc.so.6                          0x00002addc2cfa460 __libc_start_main +
    245

    8    tmprudtbfkz                        0x000055aef13a97b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // your code here\n    return nums.sorted { (i, j) -> Bool in\n        sum_of_digits(i)\
    \ == sum_of_digits(j) ? nums.firstIndex(of: i)! < nums.firstIndex(of: j)! : sum_of_digits(i)\
    \ < sum_of_digits(j)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpt8c2q6at.swift:14:9: error: cannot find 'sum_of_digits' in scope\n\
    \        sum_of_digits(i) == sum_of_digits(j) ? nums.firstIndex(of: i)! < nums.firstIndex(of:\
    \ j)! : sum_of_digits(i) < sum_of_digits(j)\n        ^~~~~~~~~~~~~\n/tmp/tmpt8c2q6at.swift:14:29:\
    \ error: cannot find 'sum_of_digits' in scope\n        sum_of_digits(i) == sum_of_digits(j)\
    \ ? nums.firstIndex(of: i)! < nums.firstIndex(of: j)! : sum_of_digits(i) < sum_of_digits(j)\n\
    \                            ^~~~~~~~~~~~~\n/tmp/tmpt8c2q6at.swift:14:100: error:\
    \ cannot find 'sum_of_digits' in scope\n        sum_of_digits(i) == sum_of_digits(j)\
    \ ? nums.firstIndex(of: i)! < nums.firstIndex(of: j)! : sum_of_digits(i) < sum_of_digits(j)\n\
    \                                                                            \
    \                       ^~~~~~~~~~~~~\n/tmp/tmpt8c2q6at.swift:14:119: error: cannot\
    \ find 'sum_of_digits' in scope\n        sum_of_digits(i) == sum_of_digits(j)\
    \ ? nums.firstIndex(of: i)! < nums.firstIndex(of: j)! : sum_of_digits(i) < sum_of_digits(j)\n\
    \                                                                            \
    \                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // guard nums.count > 0 else { return nums }\n    // return nums.sorted(by:\
    \ { $0.digitsSum == $1.digitsSum ? $0 < $1 : $0.digitsSum < $1.digitsSum })\n\
    \    return nums.sorted(by: { ($0.digitsSum, $0) < ($1.digitsSum, $1) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpf6f41jc3.swift:14:34: error: value of type 'Int' has no member\
    \ 'digitsSum'\n    return nums.sorted(by: { ($0.digitsSum, $0) < ($1.digitsSum,\
    \ $1) })\n                              ~~ ^~~~~~~~~\n/tmp/tmpf6f41jc3.swift:14:55:\
    \ error: value of type 'Int' has no member 'digitsSum'\n    return nums.sorted(by:\
    \ { ($0.digitsSum, $0) < ($1.digitsSum, $1) })\n                             \
    \                      ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmcaqujxb.swift:12:30: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1)\
    \ })\n                             ^~~~~~~~~~~~~\n/tmp/tmpmcaqujxb.swift:12:55:\
    \ error: cannot find 'sum_of_digits' in scope\n    return nums.sorted(by: { sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1) })\n                                          \
    \            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num\
    \ in nums {\n        dict[num] = num.abs.sum_of_digits()\n    }\n    \n    dict.keys.sorted\
    \ {\n        if dict[$0] == dict[$1] {\n            return nums.firstIndex(of:\
    \ $0)! < nums.firstIndex(of: $1)!\n        }\n        return dict[$0]! < dict[$1]!\n\
    \    }.forEach {\n        result.append($0)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm7xpu5ae.swift:17:25: error: value of type 'Int' has no member\
    \ 'abs'\n        dict[num] = num.abs.sum_of_digits()\n                    ~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    var nums = nums\n    var sumOfDigits = [Int]()\n    \n    for num in\
    \ nums {\n        var digits = 0\n        var num = num\n        while num !=\
    \ 0 {\n            digits += num % 10\n            num /= 10\n        }\n    \
    \    sumOfDigits.append(digits)\n    }\n    \n    for i in 0..<nums.count {\n\
    \        for j in i+1..<nums.count {\n            if sumOfDigits[i] > sumOfDigits[j]\
    \ {\n                (sumOfDigits[i], sumOfDigits[j]) = (sumOfDigits[j], sumOfDigits[i])\n\
    \                (nums[i], nums[j]) = (nums[j], nums[i])\n            }\n    \
    \    }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpcf0tpaqe/tmpcf0tpaqe.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5842af4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58427ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58427eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58427ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf0tpaqe                        0x0000556f185bf884 <unavailable> + 6276

    5    libc.so.6                          0x00002b5842ce0460 __libc_start_main +
    245

    6    tmpcf0tpaqe                        0x0000556f185bf469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { lhs, rhs in\n        sumOfDigits(lhs) < sumOfDigits(rhs)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmri145qz.swift:13:9: error: cannot find 'sumOfDigits' in scope\n\
    \        sumOfDigits(lhs) < sumOfDigits(rhs)\n        ^~~~~~~~~~~\n/tmp/tmpmri145qz.swift:13:28:\
    \ error: cannot find 'sumOfDigits' in scope\n        sumOfDigits(lhs) < sumOfDigits(rhs)\n\
    \                           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    else {\n        var arrayOfTuples\
    \ = [(Int, Int)]()\n        for item in nums {\n            var count = 0\n  \
    \          if item < 0 {\n                item *= -1\n            }\n        \
    \    for item2 in String(item) {\n                count += Int(String(item2))!\n\
    \            }\n            arrayOfTuples.append((item, count))\n        }\n \
    \       arrayOfTuples.sort { $0.1 < $1.1 }\n        var result = [Int]()\n   \
    \     for item in arrayOfTuples {\n            result.append(item.0)\n       \
    \ }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyor__xbz.swift:20:22: error: left side of mutating operator isn't\
    \ mutable: 'item' is a 'let' constant\n                item *= -1\n          \
    \      ~~~~ ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // return nums.sorted {\n    //     var a = $0, b = $1\n    //     while\
    \ a > 0 {\n    //         $0 += a % 10\n    //         a /= 10\n    //     }\n\
    \    //     while b > 0 {\n    //         $1 += b % 10\n    //         b /= 10\n\
    \    //     }\n    //     return $0 < $1\n    // }\n    return nums.sorted {\n\
    \        var a = 0, b = 0\n        for c in String($0).map({Int(String($0))!})\
    \ {\n            a += c\n        }\n        for c in String($1).map({Int(String($0))!})\
    \ {\n            b += c\n        }\n        return a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1467sx7a/tmp1467sx7a.swift:26: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b72f9e36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72f9b2d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72f9b2d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72f9b2d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72f9b2cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1467sx7a                        0x00005598ccdf0651 <unavailable> + 9809

    6    libswiftCore.so                    0x00002b72f9b15820 Collection.map<A>(_:)
    + 426

    7    tmp1467sx7a                        0x00005598ccdf025f <unavailable> + 8799

    8    libswiftCore.so                    0x00002b72f9c4ec90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b72f9c4f110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b72f9c4dd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b72f9c4dd15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b72f9d7365a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b72f9b62720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b72f9b6270f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b72f9c4d460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b72f9c4d370 Sequence.sorted(by:)
    + 193

    17   tmp1467sx7a                        0x00005598ccdf0160 <unavailable> + 8544

    18   tmp1467sx7a                        0x00005598ccdef814 <unavailable> + 6164

    19   libc.so.6                          0x00002b72fa022460 __libc_start_main +
    245

    20   tmp1467sx7a                        0x00005598ccdef4e9 <unavailable'
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // TODO: Write your solution here\n    return nums\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfaq8gwuo/tmpfaq8gwuo.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7974e27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7974b1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7974b1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7974b1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfaq8gwuo                        0x000055a3a48c83e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b7975013460 __libc_start_main +
    245

    6    tmpfaq8gwuo                        0x000055a3a48c7fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        var sum_a = 0\n        var\
    \ sum_b = 0\n        for c in String(a) {\n            sum_a += Int(String(c))!\n\
    \        }\n        for c in String(b) {\n            sum_b += Int(String(c))!\n\
    \        }\n        return sum_a < sum_b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp30icpmy3/tmp30icpmy3.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f21304c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f20ffb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5f20ffb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5f20ffb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5f20ffabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp30icpmy3                        0x000055aa4275f2b5 <unavailable> + 8885

    6    libswiftCore.so                    0x00002b5f2111cc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b5f2111d110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b5f2111bd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b5f2111bd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b5f2124165a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b5f21030720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b5f2103070f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b5f2111b460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b5f2111b370 Sequence.sorted(by:)
    + 193

    15   tmp30icpmy3                        0x000055aa4275efc0 <unavailable> + 8128

    16   tmp30icpmy3                        0x000055aa4275e674 <unavailable> + 5748

    17   libc.so.6                          0x00002b5f214f0460 __libc_start_main +
    245

    18   tmp30icpmy3                        0x000055aa4275e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sumOfDigits(n: $0) < sumOfDigits(n: $1) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpijpk7s08.swift:12:30: error: cannot find 'sumOfDigits' in scope\n\
    \    return nums.sorted(by: { sumOfDigits(n: $0) < sumOfDigits(n: $1) })\n   \
    \                          ^~~~~~~~~~~\n/tmp/tmpijpk7s08.swift:12:51: error: cannot\
    \ find 'sumOfDigits' in scope\n    return nums.sorted(by: { sumOfDigits(n: $0)\
    \ < sumOfDigits(n: $1) })\n                                                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let sum1 = sum_of_digits(num:\
    \ a)\n        let sum2 = sum_of_digits(num: b)\n        if sum1 != sum2 {\n  \
    \          return sum1 < sum2\n        } else {\n            return a < b\n  \
    \      }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyd8jeqhl.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum1 = sum_of_digits(num: a)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpyd8jeqhl.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum2 = sum_of_digits(num: b)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    //TODO: write your function here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp5xqwvd89/tmp5xqwvd89.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21bae55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21bab4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21bab4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21bab4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xqwvd89                        0x0000558dc4f2c3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b21bb041460 __libc_start_main +
    245

    6    tmp5xqwvd89                        0x0000558dc4f2bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = [(Int, Int)]()\n    for (i, num) in nums.enumerated() {\n     \
    \   sum.append((num, i))\n    }\n    sum.sort { a, b in\n        if a.0 >= 0 {\n\
    \            a.0 % 10 + a.0 / 10 > b.0 % 10 + b.0 / 10\n        } else {\n   \
    \         a.0 % 10 + a.0 / 10 < b.0 % 10 + b.0 / 10\n        }\n    }\n    var\
    \ result = [Int]()\n    for (_, i) in sum {\n        result.append(nums[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpzrylo9wl.swift:18:33: warning: result of operator '>' is unused\n\
    \            a.0 % 10 + a.0 / 10 > b.0 % 10 + b.0 / 10\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzrylo9wl.swift:20:33: warning: result of operator\
    \ '<' is unused\n            a.0 % 10 + a.0 / 10 < b.0 % 10 + b.0 / 10\n     \
    \       ~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzrylo9wl.swift:22:5:\
    \ error: missing return in closure expected to return 'Bool'\n    }\n    ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let n1 = $0 > 0 ? $0 : -$0\n        let\
    \ n2 = $1 > 0 ? $1 : -$1\n        let (d1, r1) = n1.quotientAndRemainder(dividingBy:\
    \ 10)\n        let (d2, r2) = n2.quotientAndRemainder(dividingBy: 10)\n      \
    \  if (d1 + r1) == (d2 + r2) {\n            return $0 < $1\n        }\n      \
    \  return (d1 + r1) < (d2 + r2)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpqilvnar9/tmpqilvnar9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b669905ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6698d55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6698d55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6698d547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqilvnar9                        0x0000555bb650d514 <unavailable> + 5396

    5    libc.so.6                          0x00002b669924a460 __libc_start_main +
    245

    6    tmpqilvnar9                        0x0000555bb650d0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // your code here\n    return nums.sorted(by: {\n        let digits = Array(String($0).map({\
    \ Int(String($0))! }))\n        let digits2 = Array(String($1).map({ Int(String($0))!\
    \ }))\n        return digits.reduce(0, +) < digits2.reduce(0, +)\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpnc008pyv/tmpnc008pyv.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8f125ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8f0f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8f0f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8f0f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8f0f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnc008pyv                        0x0000555e4b2b55e1 <unavailable> + 9697

    6    libswiftCore.so                    0x00002ba8f0f39820 Collection.map<A>(_:)
    + 426

    7    tmpnc008pyv                        0x0000555e4b2b519e <unavailable> + 8606

    8    libswiftCore.so                    0x00002ba8f1072c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002ba8f1073110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002ba8f1071d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002ba8f1071d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002ba8f119765a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002ba8f0f86720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002ba8f0f8670f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002ba8f1071460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002ba8f1071370 Sequence.sorted(by:)
    + 193

    17   tmpnc008pyv                        0x0000555e4b2b50d0 <unavailable> + 8400

    18   tmpnc008pyv                        0x0000555e4b2b4784 <unavailable> + 6020

    19   libc.so.6                          0x00002ba8f1446460 __libc_start_main +
    245

    20   tmpnc008pyv                        0x0000555e4b2b4459 <unavailable'
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sumOfNumbers = [Int: Int]()\n    for i in 0..<nums.count {\n        let\
    \ sum = nums[i].sumDigits()\n        sumOfNumbers[i] = sum\n    }\n    let result\
    \ = sumOfNumbers.sorted { $0.value < $1.value }\n    var sortedArray = [Int]()\n\
    \    for i in 0..<result.count {\n        sortedArray.append(nums[result[i].key])\n\
    \    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyiw0rrxo.swift:14:27: error: value of type 'Int' has no member\
    \ 'sumDigits'\n        let sum = nums[i].sumDigits()\n                  ~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var maxDigitSum = 0\n    var sumToIndex = [Int: Int]()\n    var sortedArr\
    \ = [Int]()\n    \n    for (i, num) in nums.enumerated() {\n        var digitSum\
    \ = 0\n        var temp = num\n        while temp != 0 {\n            digitSum\
    \ += temp % 10\n            temp /= 10\n        }\n        sumToIndex[digitSum]\
    \ = i\n        maxDigitSum = max(maxDigitSum, digitSum)\n    }\n    \n    for\
    \ i in 0...maxDigitSum {\n        if let index = sumToIndex[i] {\n           \
    \ sortedArr.append(nums[index])\n        }\n    }\n    \n    return sortedArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpm_wx_i3n/tmpm_wx_i3n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6508d71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6508a68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6508a68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6508a677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_wx_i3n                        0x0000563648152a44 <unavailable> + 6724

    5    libc.so.6                          0x00002b6508f5d460 __libc_start_main +
    245

    6    tmpm_wx_i3n                        0x0000563648152629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let newNums = nums.map { toSum($0) }\n    let combo = zip(newNums, nums)\n\
    \    let sorted = combo.sorted { $0.0 < $1.0 }\n    return sorted.map { $0.1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsxjibrc0.swift:12:30: error: cannot find 'toSum' in scope\n   \
    \ let newNums = nums.map { toSum($0) }\n                             ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        if nums.isEmpty {\n            return false\n\
    \        }\n        let first = \"\\($0)\".compactMap { Int(String($0)) }.reduce(0,\
    \ +)\n        let second = \"\\($1)\".compactMap { Int(String($0)) }.reduce(0,\
    \ +)\n        return first < second\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpjh7vezsn/tmpjh7vezsn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b217a561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b217a258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b217a258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b217a2577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7vezsn                        0x000055d4f79f5a34 <unavailable> + 6708

    5    libc.so.6                          0x00002b217a74d460 __libc_start_main +
    245

    6    tmpjh7vezsn                        0x000055d4f79f5619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sorted = nums.enumerated().sorted { (x, y) -> Bool in\n        let xDigits\
    \ = String(x.element).compactMap { Int(String($0)) }\n        let yDigits = String(y.element).compactMap\
    \ { Int(String($0)) }\n        return xDigits.reduce(0, +) < yDigits.reduce(0,\
    \ +)\n    }\n    return sorted.map { $0.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmph0c8rs3w/tmph0c8rs3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2011b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2011878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2011878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20118777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0c8rs3w                        0x000055884676d934 <unavailable> + 6452

    5    libc.so.6                          0x00002b2011d6d460 __libc_start_main +
    245

    6    tmph0c8rs3w                        0x000055884676d519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    for _ in 0..<nums.count {\n        for j in 1..<nums.count\
    \ {\n            let v1 = sum_of_digits(nums[j - 1])\n            let v2 = sum_of_digits(nums[j])\n\
    \            if v1 > v2 {\n                swap(&nums[j - 1], &nums[j])\n    \
    \        }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpugzubrrj.swift:15:22: error: cannot find 'sum_of_digits' in scope\n\
    \            let v1 = sum_of_digits(nums[j - 1])\n                     ^~~~~~~~~~~~~\n\
    /tmp/tmpugzubrrj.swift:16:22: error: cannot find 'sum_of_digits' in scope\n  \
    \          let v2 = sum_of_digits(nums[j])\n                     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    return nums.sorted { x,\
    \ y in\n        let a = sum_of_digits(x)\n        let b = sum_of_digits(y)\n \
    \       if a == b {\n            return x < y\n        }\n        return a < b\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2tuac8ox.swift:16:17: error: cannot find 'sum_of_digits' in scope\n\
    \        let a = sum_of_digits(x)\n                ^~~~~~~~~~~~~\n/tmp/tmp2tuac8ox.swift:17:17:\
    \ error: cannot find 'sum_of_digits' in scope\n        let b = sum_of_digits(y)\n\
    \                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        var aDigits = 0\n       \
    \ var bDigits = 0\n        for i in 0..<numDigits(n: a) {\n            aDigits\
    \ += (a / Int(pow(10, Double(i)))) % 10\n        }\n        for i in 0..<numDigits(n:\
    \ b) {\n            bDigits += (b / Int(pow(10, Double(i)))) % 10\n        }\n\
    \        return aDigits < bDigits\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmprny8hg6g.swift:15:22: error: cannot find 'numDigits' in scope\n\
    \        for i in 0..<numDigits(n: a) {\n                     ^~~~~~~~~\n/tmp/tmprny8hg6g.swift:16:33:\
    \ error: cannot find 'pow' in scope\n            aDigits += (a / Int(pow(10, Double(i))))\
    \ % 10\n                                ^~~\n/tmp/tmprny8hg6g.swift:18:22: error:\
    \ cannot find 'numDigits' in scope\n        for i in 0..<numDigits(n: b) {\n \
    \                    ^~~~~~~~~\n/tmp/tmprny8hg6g.swift:19:33: error: cannot find\
    \ 'pow' in scope\n            bDigits += (b / Int(pow(10, Double(i)))) % 10\n\
    \                                ^~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sorted = nums.sorted { (left, right) -> Bool in\n        let leftSum\
    \ = abs(left).digits.reduce(0, +)\n        let rightSum = abs(right).digits.reduce(0,\
    \ +)\n        return leftSum == rightSum ? left < right : leftSum < rightSum\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpya3k6_r7.swift:13:33: error: value of type 'Int' has no member\
    \ 'digits'\n        let leftSum = abs(left).digits.reduce(0, +)\n            \
    \          ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else { return [] }\n    return nums.sorted { (lhs, rhs)\
    \ -> Bool in\n        let l = lhs.digits.reduce(0, +)\n        let r = rhs.digits.reduce(0,\
    \ +)\n        return l < r\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpr6k67up6.swift:14:21: error: value of type 'Int' has no member\
    \ 'digits'\n        let l = lhs.digits.reduce(0, +)\n                ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpm1zt5kow/tmpm1zt5kow.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cea39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cea091b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cea091988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cea0907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1zt5kow                        0x000055862b1d93e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b0cea586460 __libc_start_main +
    245

    6    tmpm1zt5kow                        0x000055862b1d8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {(a: Int, b: Int) -> Bool in return get_sum_of_digits(a)\
    \ < get_sum_of_digits(b)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp5je_9zor.swift:12:64: error: cannot find 'get_sum_of_digits' in\
    \ scope\n    return nums.sorted(by: {(a: Int, b: Int) -> Bool in return get_sum_of_digits(a)\
    \ < get_sum_of_digits(b)})\n                                                 \
    \              ^~~~~~~~~~~~~~~~~\n/tmp/tmp5je_9zor.swift:12:87: error: cannot\
    \ find 'get_sum_of_digits' in scope\n    return nums.sorted(by: {(a: Int, b: Int)\
    \ -> Bool in return get_sum_of_digits(a) < get_sum_of_digits(b)})\n          \
    \                                                                            ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    var numsCopy = nums\n  \
    \  var sums: [Int] = []\n    for i in 0..<nums.count {\n        let sum = nums[i].sumOfDigits()\n\
    \        sums.append(sum)\n    }\n    let sortedSums: [Int] = sortArray(nums:\
    \ sums)\n    var sortedArray: [Int] = []\n    var index: Int = 0\n    for j in\
    \ 0..<sortedSums.count {\n        for k in 0..<nums.count {\n            if nums[k].sumOfDigits()\
    \ == sortedSums[j] {\n                sortedArray.append(nums[k])\n          \
    \      index = k\n                break\n            }\n        }\n        numsCopy.remove(at:\
    \ index)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphucpwa2l.swift:18:27: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n        let sum = nums[i].sumOfDigits()\n                  ~~~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmphucpwa2l.swift:21:29: error: cannot find 'sortArray' in\
    \ scope\n    let sortedSums: [Int] = sortArray(nums: sums)\n                 \
    \           ^~~~~~~~~\n/tmp/tmphucpwa2l.swift:26:24: error: value of type 'Int'\
    \ has no member 'sumOfDigits'\n            if nums[k].sumOfDigits() == sortedSums[j]\
    \ {\n               ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (num1, num2) -> Bool in\n        let a = abs(num1)\n\
    \        let b = abs(num2)\n        let sumA = sumDigits(of: a)\n        let sumB\
    \ = sumDigits(of: b)\n        return sumA == sumB ? a < b : sumA < sumB\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpw46rq_ul.swift:15:20: error: cannot find 'sumDigits' in scope\n\
    \        let sumA = sumDigits(of: a)\n                   ^~~~~~~~~\n/tmp/tmpw46rq_ul.swift:16:20:\
    \ error: cannot find 'sumDigits' in scope\n        let sumB = sumDigits(of: b)\n\
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return nums.sorted {\n    var s1 = 0\n    var s2 = 0\n    for char in \"\\\
    ($0)\".characters {\n      s1 += Int(String(char))!\n    }\n    for char in \"\
    \\($1)\".characters {\n      s2 += Int(String(char))!\n    }\n    return s1 <\
    \ s2\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcuanyxna.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in \"\\($0)\".characters {\n             \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpcuanyxna.swift:18:25: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in \"\\($1)\".characters {\n                        ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    let sorted = nums.sorted { (a, b) -> Bool in\n     \
    \   return a.digitSum() < b.digitSum()\n    }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0e1vv9ng.swift:14:18: error: value of type 'Int' has no member\
    \ 'digitSum'\n        return a.digitSum() < b.digitSum()\n               ~ ^~~~~~~~\n\
    /tmp/tmp0e1vv9ng.swift:14:33: error: value of type 'Int' has no member 'digitSum'\n\
    \        return a.digitSum() < b.digitSum()\n                              ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let a = String($0).map({ Int(String($0))\
    \ ?? 0 }).reduce(0, +)\n        let b = String($1).map({ Int(String($0)) ?? 0\
    \ }).reduce(0, +)\n        return a < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpd8n0zeom/tmpd8n0zeom.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab442a0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab442705b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab442705988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4427047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8n0zeom                        0x000055b0c670e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ab442bfa460 __libc_start_main +
    245

    6    tmpd8n0zeom                        0x000055b0c670e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var sumDict: [Int: Int] = [:]\n    for (index,\
    \ value) in nums.enumerated() {\n        let sum = sumDigits(num: value)\n   \
    \     sumDict[sum] = index\n    }\n    for sum in sumDict.keys.sorted() {\n  \
    \      let index = sumDict[sum]!\n        result.append(nums[index])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpt73xt161.swift:15:19: error: cannot find 'sumDigits' in scope\n\
    \        let sum = sumDigits(num: value)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sum_digits = { $0.digits.reduce(0, +) }\n    return nums.sorted { (sum_digits($0)\
    \ == sum_digits($1)) ? ($0 < $1) : (sum_digits($0) < sum_digits($1)) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpoym2s0dx.swift:12:22: error: unable to infer type of a closure\
    \ parameter '$0' in the current context\n    let sum_digits = { $0.digits.reduce(0,\
    \ +) }\n                     ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    return nums.sorted(by: { (left, right) -> Bool in\n        let leftSum\
    \ = left < 0 ? left * -1 : left\n        let rightSum = right < 0 ? right * -1\
    \ : right\n        return leftSum < rightSum\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp7ykkxzqp/tmp7ykkxzqp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a32c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3293bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3293b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3293a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ykkxzqp                        0x00005562c42e7454 <unavailable> + 5204

    5    libc.so.6                          0x00002b0a32e30460 __libc_start_main +
    245

    6    tmp7ykkxzqp                        0x00005562c42e7039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    } else {\n        var nums = nums\n\
    \        for i in 0...nums.count - 1 {\n            for j in 0...nums.count -\
    \ 1 {\n                if sumOfDigits(nums[i]) < sumOfDigits(nums[j]) {\n    \
    \                let tmp = nums[i]\n                    nums[i] = nums[j]\n  \
    \                  nums[j] = tmp\n                }\n            }\n        }\n\
    \        return nums\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm2omzzbh.swift:18:20: error: cannot find 'sumOfDigits' in scope\n\
    \                if sumOfDigits(nums[i]) < sumOfDigits(nums[j]) {\n          \
    \         ^~~~~~~~~~~\n/tmp/tmpm2omzzbh.swift:18:43: error: cannot find 'sumOfDigits'\
    \ in scope\n                if sumOfDigits(nums[i]) < sumOfDigits(nums[j]) {\n\
    \                                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var dict = [Int: [Int]]()\n    for (idx, i) in nums.enumerated() {\n    \
    \    let sum = i < 0 ? -i.digits.reduce(0, +) : i.digits.reduce(0, +)\n      \
    \  if dict[sum] == nil {\n            dict[sum] = [i]\n        } else {\n    \
    \        dict[sum]?.append(i)\n        }\n    }\n    let keys = dict.keys.sorted()\n\
    \    var res = [Int]()\n    for k in keys {\n        res.append(contentsOf: dict[k]!)\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm2hwtyku.swift:14:30: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum = i < 0 ? -i.digits.reduce(0, +) : i.digits.reduce(0,\
    \ +)\n                           ~ ^~~~~~\n/tmp/tmpm2hwtyku.swift:14:54: error:\
    \ value of type 'Int' has no member 'digits'\n        let sum = i < 0 ? -i.digits.reduce(0,\
    \ +) : i.digits.reduce(0, +)\n                                               \
    \    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { $0.digits.reduce(0, +) < $1.digits.reduce(0, +) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp00snv_ee.swift:12:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return nums.sorted { $0.digits.reduce(0, +) < $1.digits.reduce(0,\
    \ +) }\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009254
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aLength = a.description.count\n\
    \        let bLength = b.description.count\n        return aLength < bLength\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpvyky4t_p/tmpvyky4t_p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b247ee65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b247eb5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b247eb5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b247eb5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyky4t_p                        0x00005567e5317544 <unavailable> + 5444

    5    libc.so.6                          0x00002b247f051460 __libc_start_main +
    245

    6    tmpvyky4t_p                        0x00005567e5317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // Dictionary to hold (key, value) pairs\n    var dict = [Int: Int]()\n \
    \   // Retrieve the sum of the digits for each integer and store it in dict\n\
    \    for num in nums {\n        dict[num] = sumOfDigits(num: num)\n    }\n   \
    \ // Sort the dictionary from low to high key values\n    let sortedDict = dict.sorted\
    \ { $0.key < $1.key }\n    // Print the sorted dictionary\n    for (key, value)\
    \ in sortedDict {\n        print(\"\\(key): \\(value)\")\n    }\n    // Create\
    \ a new array to hold the sorted values\n    var sortedArray = [Int]()\n    //\
    \ Add the array values to the sortedArray in ascending order by sum of digits\n\
    \    for num in nums {\n        if sumOfDigits(num: num) == sortedDict[0].value\
    \ {\n            sortedArray.append(num)\n        }\n    }\n    // Print the sorted\
    \ array\n    print(sortedArray)\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfgrkbeyz.swift:16:21: error: cannot find 'sumOfDigits' in scope\n\
    \        dict[num] = sumOfDigits(num: num)\n                    ^~~~~~~~~~~\n\
    /tmp/tmpfgrkbeyz.swift:28:12: error: cannot find 'sumOfDigits' in scope\n    \
    \    if sumOfDigits(num: num) == sortedDict[0].value {\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    var nums = nums\n    var\
    \ newNums = [Int]()\n    var sumNums = [Int]()\n    for i in 0..<nums.count {\n\
    \        let newNum = nums[i]\n        let sumNum = newNum.arrayOfDigits().reduce(0,\
    \ +)\n        sumNums.append(sumNum)\n    }\n    for _ in 0..<nums.count {\n \
    \       let index = sumNums.firstIndex(of: sumNums.min()!)!\n        newNums.append(nums[index])\n\
    \        sumNums.remove(at: index)\n        nums.remove(at: index)\n    }\n  \
    \  return newNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpxbdxpqxt.swift:20:29: error: value of type 'Int' has no member\
    \ 'arrayOfDigits'\n        let sumNum = newNum.arrayOfDigits().reduce(0, +)\n\
    \                     ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else { return nums }\n    return nums.sorted(by: {\n\
    \        return sum_digits(num: $0) < sum_digits(num: $1)\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp681ltr9j.swift:14:16: error: cannot find 'sum_digits' in scope\n\
    \        return sum_digits(num: $0) < sum_digits(num: $1)\n               ^~~~~~~~~~\n\
    /tmp/tmp681ltr9j.swift:14:38: error: cannot find 'sum_digits' in scope\n     \
    \   return sum_digits(num: $0) < sum_digits(num: $1)\n                       \
    \              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    let arr = nums.enumerated().sorted\
    \ { first, second in\n        (getDigitsSum(value: first.element) < getDigitsSum(value:\
    \ second.element))\n            || (getDigitsSum(value: first.element) == getDigitsSum(value:\
    \ second.element) && first.offset < second.offset)\n    }\n    return arr.map\
    \ { $0.element }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmmt4zbw_.swift:16:10: error: cannot find 'getDigitsSum' in scope\n\
    \        (getDigitsSum(value: first.element) < getDigitsSum(value: second.element))\n\
    \         ^~~~~~~~~~~~\n/tmp/tmpmmt4zbw_.swift:16:47: error: cannot find 'getDigitsSum'\
    \ in scope\n        (getDigitsSum(value: first.element) < getDigitsSum(value:\
    \ second.element))\n                                              ^~~~~~~~~~~~\n\
    /tmp/tmpmmt4zbw_.swift:17:17: error: cannot find 'getDigitsSum' in scope\n   \
    \         || (getDigitsSum(value: first.element) == getDigitsSum(value: second.element)\
    \ && first.offset < second.offset)\n                ^~~~~~~~~~~~\n/tmp/tmpmmt4zbw_.swift:17:55:\
    \ error: cannot find 'getDigitsSum' in scope\n            || (getDigitsSum(value:\
    \ first.element) == getDigitsSum(value: second.element) && first.offset < second.offset)\n\
    \                                                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsDict: [Int: Int] = [:]\n    for i in 0..<nums.count {\n        let\
    \ numStr = String(nums[i])\n        var sum = 0\n        for j in 0..<numStr.count\
    \ {\n            sum += Int(String(numStr[numStr.index(numStr.startIndex, offsetBy:\
    \ j)]))!\n        }\n        numsDict[nums[i]] = sum\n    }\n    return nums.sorted\
    \ { numsDict[$0]! < numsDict[$1]! }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpux58icqo/tmpux58icqo.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abf8175fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf81456561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf81456286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf8145613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf81455bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpux58icqo                        0x000055ca8c7fa7ce <unavailable> + 10190

    6    tmpux58icqo                        0x000055ca8c7f9a14 <unavailable> + 6676

    7    libc.so.6                          0x00002abf8194b460 __libc_start_main +
    245

    8    tmpux58icqo                        0x000055ca8c7f96e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // FIXME: Implement!\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmph_m7u5lb/tmph_m7u5lb.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5197a3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5197733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5197733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51977327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_m7u5lb                        0x00005590ed9493e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b5197c28460 __libc_start_main +
    245

    6    tmph_m7u5lb                        0x00005590ed948fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var sums: [Int] = []\n    var dictionary = [Int:\
    \ Int]()\n    var sum = 0\n    for (index, num) in nums.enumerated() {\n     \
    \   if num >= 0 {\n            sum = num % 10 + num / 10\n        } else {\n \
    \           sum = -(num % 10 + num / 10)\n        }\n        sums.append(sum)\n\
    \        dictionary[sum] = index\n    }\n    sums.sort()\n    for sum in sums\
    \ {\n        result.append(nums[dictionary[sum]!])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpcq8a3q15/tmpcq8a3q15.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adca2367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adca205eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adca205e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adca205d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq8a3q15                        0x00005603d91c3af4 <unavailable> + 6900

    5    libc.so.6                          0x00002adca2553460 __libc_start_main +
    245

    6    tmpcq8a3q15                        0x00005603d91c36d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { sum_of_digits(nums: $0) == sum_of_digits(nums: $1) ?\
    \ $0 < $1 : sum_of_digits(nums: $0) < sum_of_digits(nums: $1) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0z1lu27p.swift:12:26: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted { sum_of_digits(nums: $0) == sum_of_digits(nums: $1) ?\
    \ $0 < $1 : sum_of_digits(nums: $0) < sum_of_digits(nums: $1) }\n            \
    \             ^~~~~~~~~~~~~\n/tmp/tmp0z1lu27p.swift:12:53: error: cannot find\
    \ 'sum_of_digits' in scope\n    return nums.sorted { sum_of_digits(nums: $0) ==\
    \ sum_of_digits(nums: $1) ? $0 < $1 : sum_of_digits(nums: $0) < sum_of_digits(nums:\
    \ $1) }\n                                                    ^~~~~~~~~~~~~\n/tmp/tmp0z1lu27p.swift:12:89:\
    \ error: cannot find 'sum_of_digits' in scope\n    return nums.sorted { sum_of_digits(nums:\
    \ $0) == sum_of_digits(nums: $1) ? $0 < $1 : sum_of_digits(nums: $0) < sum_of_digits(nums:\
    \ $1) }\n                                                                    \
    \                    ^~~~~~~~~~~~~\n/tmp/tmp0z1lu27p.swift:12:115: error: cannot\
    \ find 'sum_of_digits' in scope\n    return nums.sorted { sum_of_digits(nums:\
    \ $0) == sum_of_digits(nums: $1) ? $0 < $1 : sum_of_digits(nums: $0) < sum_of_digits(nums:\
    \ $1) }\n                                                                    \
    \                                              ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let lhsScore = $0.digits.reduce(0, +)\n   \
    \     let rhsScore = $1.digits.reduce(0, +)\n        if lhsScore == rhsScore {\n\
    \            return nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n    \
    \    }\n        return lhsScore < rhsScore\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpichthed9.swift:13:27: error: value of type 'Int' has no member\
    \ 'digits'\n        let lhsScore = $0.digits.reduce(0, +)\n                  \
    \     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else {\n        return []\n    }\n    var result: [Int]\
    \ = []\n    var dict: [Int: [Int]] = [:]\n    var totalSum = 0\n    for num in\
    \ nums {\n        totalSum = 0\n        for char in String(num) {\n          \
    \  let d = Int(String(char))!\n            totalSum += d\n        }\n        if\
    \ dict[totalSum] == nil {\n            dict[totalSum] = [num]\n        } else\
    \ {\n            dict[totalSum]?.append(num)\n        }\n    }\n    for i in dict.keys.sorted()\
    \ {\n        let v = dict[i]\n        result.append(contentsOf: v!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp8xku7y61/tmp8xku7y61.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b873af02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b873abf9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b873abf9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b873abf913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b873abf8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8xku7y61                        0x00005565351cc888 <unavailable> + 10376

    6    tmp8xku7y61                        0x00005565351cbbc4 <unavailable> + 7108

    7    libc.so.6                          0x00002b873b0ee460 __libc_start_main +
    245

    8    tmp8xku7y61                        0x00005565351cb899 <unavailable> + 6297

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        func sumDigits(number: Int) -> Int {\n\
    \            return String(number).map { Int(String($0))! }.reduce(0, +)\n   \
    \     }\n        return sumDigits(number: $0) < sumDigits(number: $1)\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp3njzbhtb/tmp3njzbhtb.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ec2588c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ec227f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3ec227f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3ec227f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3ec227ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3njzbhtb                        0x000055ba347b6331 <unavailable> + 9009

    6    libswiftCore.so                    0x00002b3ec2267820 Collection.map<A>(_:)
    + 426

    7    tmp3njzbhtb                        0x000055ba347b614d <unavailable> + 8525

    8    tmp3njzbhtb                        0x000055ba347b60b3 <unavailable> + 8371

    9    libswiftCore.so                    0x00002b3ec23a0c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    10   libswiftCore.so                    0x00002b3ec23a1110 MutableCollection<>._insertionSort(within:by:)
    + 356

    11   libswiftCore.so                    0x00002b3ec239fd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    12   libswiftCore.so                    0x00002b3ec239fd15 <unavailable> + 2616597

    13   libswiftCore.so                    0x00002b3ec24c565a <unavailable> + 3819098

    14   libswiftCore.so                    0x00002b3ec22b4720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    15   libswiftCore.so                    0x00002b3ec22b470f <unavailable> + 1652495

    16   libswiftCore.so                    0x00002b3ec239f460 MutableCollection<>.sort(by:)
    + 771

    17   libswiftCore.so                    0x00002b3ec239f370 Sequence.sorted(by:)
    + 193

    18   tmp3njzbhtb                        0x000055ba347b6060 <unavailable> + 8288

    19   tmp3njzbhtb                        0x000055ba347b5714 <unavailable> + 5908

    20   libc.so.6                          0x00002b3ec2774460 __libc_start_ma'
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sum = nums.map { Int(String($0).reduce(0, +))! }\n    return nums.enumerated().sorted\
    \ { sum[$0.offset] < sum[$1.offset] }.map { $0.element }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpn4jemhof.swift:12:30: error: missing argument label 'exactly:'\
    \ in call\n    let sum = nums.map { Int(String($0).reduce(0, +))! }\n        \
    \                     ^\n                             exactly: \n/tmp/tmpn4jemhof.swift:12:51:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, String.Element) throws -> Int' (aka '(Int, Character) throws -> Int')\n\
    \    let sum = nums.map { Int(String($0).reduce(0, +))! }\n                  \
    \                                ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { $0.digits.reduce(0, +) < $1.digits.reduce(0, +)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphsy0knig.swift:12:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return nums.sorted(by: { $0.digits.reduce(0, +) < $1.digits.reduce(0,\
    \ +) })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009254
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (first, second) -> Bool in\n        return first.sumOfDigits()\
    \ < second.sumOfDigits()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmppggh4201.swift:13:22: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n        return first.sumOfDigits() < second.sumOfDigits()\n \
    \              ~~~~~ ^~~~~~~~~~~\n/tmp/tmppggh4201.swift:13:45: error: value of\
    \ type 'Int' has no member 'sumOfDigits'\n        return first.sumOfDigits() <\
    \ second.sumOfDigits()\n                                     ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    return nums.sorted { (first: Int, second: Int) -> Bool\
    \ in\n        var i = first, j = second\n        var sum_i = 0, sum_j = 0\n  \
    \      while i != 0 {\n            sum_i += i % 10\n            i /= 10\n    \
    \    }\n        while j != 0 {\n            sum_j += j % 10\n            j /=\
    \ 10\n        }\n        return sum_i < sum_j\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp0cyixilc/tmp0cyixilc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67a87ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67a84e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67a84e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67a84e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cyixilc                        0x00005642329734f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b67a89d8460 __libc_start_main +
    245

    6    tmp0cyixilc                        0x00005642329730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { digitSum(a: $0) < digitSum(a: $1) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyu9g_h3x.swift:12:30: error: cannot find 'digitSum' in scope\n\
    \    return nums.sorted(by: { digitSum(a: $0) < digitSum(a: $1) })\n         \
    \                    ^~~~~~~~\n/tmp/tmpyu9g_h3x.swift:12:48: error: cannot find\
    \ 'digitSum' in scope\n    return nums.sorted(by: { digitSum(a: $0) < digitSum(a:\
    \ $1) })\n                                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (i1, i2) -> Bool in\n        return i1.digits.reduce(0,\
    \ +) < i2.digits.reduce(0, +)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpofzl18kz.swift:12:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return nums.sorted(by: { (i1, i2) -> Bool in\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009254
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {$0.digits.sum() < $1.digits.sum()})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1tzo1s4m.swift:12:32: error: value of type 'Int' has no member\
    \ 'digits'\n    return nums.sorted(by: {$0.digits.sum() < $1.digits.sum()})\n\
    \                            ~~ ^~~~~~\n/tmp/tmp1tzo1s4m.swift:12:50: error: value\
    \ of type 'Int' has no member 'digits'\n    return nums.sorted(by: {$0.digits.sum()\
    \ < $1.digits.sum()})\n                                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var m = [Int: [Int]]()\n    for num in nums {\n        let digits = Array(String(num)).map{\
    \ Int(String($0))! }\n        let sum = digits.reduce(0, +)\n        if m[sum]\
    \ == nil {\n            m[sum] = [num]\n        } else {\n            m[sum]!.append(num)\n\
    \        }\n    }\n    var sums = Array(m.keys)\n    sums.sort()\n    var res\
    \ = [Int]()\n    for sum in sums {\n        m[sum]!.sort()\n        res.append(contentsOf:\
    \ m[sum]!)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpan4zqj8u/tmpan4zqj8u.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b524a1cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5249ec5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5249ec5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5249ec513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5249ec4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpan4zqj8u                        0x000055c26d47c0e1 <unavailable> + 12513

    6    libswiftCore.so                    0x00002b5249ead820 Collection.map<A>(_:)
    + 426

    7    tmpan4zqj8u                        0x000055c26d47b888 <unavailable> + 10376

    8    tmpan4zqj8u                        0x000055c26d47ad64 <unavailable> + 7524

    9    libc.so.6                          0x00002b524a3ba460 __libc_start_main +
    245

    10   tmpan4zqj8u                        0x000055c26d47aa39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpupwvss33/tmpupwvss33.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b584d0c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b584cdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b584cdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b584cdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupwvss33                        0x00005640375de3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b584d2ae460 __libc_start_main +
    245

    6    tmpupwvss33                        0x00005640375ddfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sorted = nums.enumerated().sorted(by: { (arg0, arg1) -> Bool in\n   \
    \     let (index0, num0) = arg0\n        let (index1, num1) = arg1\n        let\
    \ digitSum0 = digitSum(num: num0)\n        let digitSum1 = digitSum(num: num1)\n\
    \        if digitSum0 == digitSum1 {\n            return index0 < index1\n   \
    \     }\n        return digitSum0 < digitSum1\n    })\n    return sorted.map {\
    \ $0.element }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpi6i04n5z.swift:15:25: error: cannot find 'digitSum' in scope\n\
    \        let digitSum0 = digitSum(num: num0)\n                        ^~~~~~~~\n\
    /tmp/tmpi6i04n5z.swift:16:25: error: cannot find 'digitSum' in scope\n       \
    \ let digitSum1 = digitSum(num: num1)\n                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (first, second) -> Bool in\n        if first.digitSum()\
    \ == second.digitSum() {\n            return first < second\n        }\n     \
    \   return first.digitSum() < second.digitSum()\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpy_828_wm.swift:13:18: error: value of type 'Int' has no member\
    \ 'digitSum'\n        if first.digitSum() == second.digitSum() {\n           ~~~~~\
    \ ^~~~~~~~\n/tmp/tmpy_828_wm.swift:13:39: error: value of type 'Int' has no member\
    \ 'digitSum'\n        if first.digitSum() == second.digitSum() {\n           \
    \                    ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp8zka4yr2/tmp8zka4yr2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f8366bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f83362b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f83362988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f833617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zka4yr2                        0x00005592efd193e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b9f83857460 __libc_start_main +
    245

    6    tmp8zka4yr2                        0x00005592efd18fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let x = $0.digits.reduce(0, +)\n        let\
    \ y = $1.digits.reduce(0, +)\n        return x < y\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp2i6881q.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let x = $0.digits.reduce(0, +)\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // your code goes here\n    return nums.sorted(by: {\n        let s1 = $0.digits.reduce(0,\
    \ +)\n        let s2 = $1.digits.reduce(0, +)\n        return s1 < s2\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdhzoth58.swift:14:21: error: value of type 'Int' has no member\
    \ 'digits'\n        let s1 = $0.digits.reduce(0, +)\n                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let sumOfDigitsOfLhs\
    \ = lhs.digits.reduce(0, +)\n        let sumOfDigitsOfRhs = rhs.digits.reduce(0,\
    \ +)\n        return sumOfDigitsOfLhs == sumOfDigitsOfRhs ? lhs < rhs : sumOfDigitsOfLhs\
    \ < sumOfDigitsOfRhs\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvidc4_97.swift:13:36: error: value of type 'Int' has no member\
    \ 'digits'\n        let sumOfDigitsOfLhs = lhs.digits.reduce(0, +)\n         \
    \                      ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpm1zt5kow/tmpm1zt5kow.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cea39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cea091b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cea091988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cea0907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1zt5kow                        0x000055862b1d93e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b0cea586460 __libc_start_main +
    245

    6    tmpm1zt5kow                        0x000055862b1d8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else { return nums }\n    var result = nums\n    let\
    \ points = nums.map { $0.digits.reduce(0, +) }\n    let tuples = zip(points, result)\n\
    \    let sortedTuples = tuples.sorted { $0.0 < $1.0 }\n    for (index, item) in\
    \ sortedTuples.enumerated() {\n        result[index] = item.1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmps0fix15d.swift:14:32: error: value of type 'Int' has no member\
    \ 'digits'\n    let points = nums.map { $0.digits.reduce(0, +) }\n           \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var newArr = [Int]()\n    var keys = [Int]()\n    var index = 0\n    var\
    \ sum = 0\n    var newDict = [Int: Int]()\n    var sortedDict = [Int: Int]()\n\
    \    var newDictKeys = [Int]()\n    var newDictValues = [Int]()\n    \n    for\
    \ i in nums {\n        keys.append(i)\n        newDict[i] = 0\n        for j in\
    \ String(i) {\n            if j != \"-\" {\n                sum += Int(String(j))!\n\
    \            }\n        }\n        newDict[i] = sum\n        sum = 0\n    }\n\
    \    \n    sortedDict = newDict.sorted(by: { $0.value < $1.value })\n    \n  \
    \  for (key, _) in sortedDict {\n        newDictKeys.append(key)\n    }\n    \n\
    \    for _ in newDictKeys {\n        newDictValues.append(newDict[newDictKeys[index]]!)\n\
    \        index += 1\n    }\n    \n    for _ in keys {\n        for _ in newDictValues\
    \ {\n            if keys[index] == newDictKeys[index] {\n                newArr.append(keys[index])\n\
    \            }\n        }\n        index += 1\n    }\n    \n    return newArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbw__4q9w.swift:33:26: error: cannot assign value of type '[Dictionary<Int,\
    \ Int>.Element]' (aka 'Array<(key: Int, value: Int)>') to type '[Int : Int]'\n\
    \    sortedDict = newDict.sorted(by: { $0.value < $1.value })\n              \
    \   ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sum($0) < sum($1) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9pvyhaxz.swift:12:30: error: cannot find 'sum' in scope\n    return\
    \ nums.sorted(by: { sum($0) < sum($1) })\n                             ^~~\n/tmp/tmp9pvyhaxz.swift:12:40:\
    \ error: cannot find 'sum' in scope\n    return nums.sorted(by: { sum($0) < sum($1)\
    \ })\n                                       ^~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // TODO: your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp5xsvkln3/tmp5xsvkln3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade0782ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade07525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade07525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade075247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xsvkln3                        0x000055ebab21f3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ade07a1a460 __libc_start_main +
    245

    6    tmp5xsvkln3                        0x000055ebab21efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var list = nums\n    list.sort {(lhs, rhs) -> Bool in\n        var lhs_digits\
    \ = digits(num: lhs)\n        var rhs_digits = digits(num: rhs)\n        let lhs_total\
    \ = sum_digits(lhs_digits)\n        let rhs_total = sum_digits(rhs_digits)\n \
    \       if lhs_total == rhs_total {\n            return lhs < rhs\n        }\n\
    \        return lhs_total < rhs_total\n    }\n    return list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpu3dnrkca.swift:14:26: error: cannot find 'digits' in scope\n  \
    \      var lhs_digits = digits(num: lhs)\n                         ^~~~~~\n/tmp/tmpu3dnrkca.swift:15:26:\
    \ error: cannot find 'digits' in scope\n        var rhs_digits = digits(num: rhs)\n\
    \                         ^~~~~~\n/tmp/tmpu3dnrkca.swift:16:25: error: cannot\
    \ find 'sum_digits' in scope\n        let lhs_total = sum_digits(lhs_digits)\n\
    \                        ^~~~~~~~~~\n/tmp/tmpu3dnrkca.swift:17:25: error: cannot\
    \ find 'sum_digits' in scope\n        let rhs_total = sum_digits(rhs_digits)\n\
    \                        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var tupleArray: [(value: Int, sum: Int)] = []\n    for num in nums {\n  \
    \      var sum = 0\n        var tempNum = num\n        while tempNum != 0 {\n\
    \            sum += tempNum % 10\n            tempNum /= 10\n        }\n     \
    \   tupleArray.append((num, sum))\n    }\n    tupleArray.sort {\n        if $0.sum\
    \ == $1.sum {\n            return $0.value < $1.value\n        }\n        return\
    \ $0.sum < $1.sum\n    }\n    return tupleArray.map { $0.value }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp6jc51rw6/tmp6jc51rw6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73ea3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73e734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73e734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73e7337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jc51rw6                        0x000055e25b0b6794 <unavailable> + 6036

    5    libc.so.6                          0x00002ba73ec29460 __libc_start_main +
    245

    6    tmp6jc51rw6                        0x000055e25b0b6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        var a_n = abs(a)\n      \
    \  var b_n = abs(b)\n        var a_sum = 0\n        var b_sum = 0\n        while\
    \ a_n > 0 {\n            a_sum += a_n % 10\n            a_n /= 10\n        }\n\
    \        while b_n > 0 {\n            b_sum += b_n % 10\n            b_n /= 10\n\
    \        }\n        return a_sum < b_sum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpwme6e20m/tmpwme6e20m.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4891f7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4891c75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4891c75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4891c747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwme6e20m                        0x0000563ceb8035d4 <unavailable> + 5588

    5    libc.so.6                          0x00002b489216a460 __libc_start_main +
    245

    6    tmpwme6e20m                        0x0000563ceb8031b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let result = nums.enumerated().sorted(by: { (a, b) -> Bool in\n        let\
    \ digitsSumA = a.element.digitsSum()\n        let digitsSumB = b.element.digitsSum()\n\
    \        return digitsSumA < digitsSumB || (digitsSumA == digitsSumB && a.offset\
    \ < b.offset)\n    })\n    return result.map({ $0.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjdyiyrpa.swift:13:36: error: value of type 'Int' has no member\
    \ 'digitsSum'\n        let digitsSumA = a.element.digitsSum()\n              \
    \           ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let result = nums.sorted { n1, n2 in\n        let n1Sum = sum_of_digits(n1)\n\
    \        let n2Sum = sum_of_digits(n2)\n        if n1Sum == n2Sum {\n        \
    \    return n1 < n2\n        }\n        return n1Sum < n2Sum\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2hm1q69j.swift:13:21: error: cannot find 'sum_of_digits' in scope\n\
    \        let n1Sum = sum_of_digits(n1)\n                    ^~~~~~~~~~~~~\n/tmp/tmp2hm1q69j.swift:14:21:\
    \ error: cannot find 'sum_of_digits' in scope\n        let n2Sum = sum_of_digits(n2)\n\
    \                    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sumOfDigits = nums.map{ abs($0) }.map{ $0.digits.reduce(0, +) }\n   \
    \ return zip(nums, sumOfDigits).sorted(by: {$0.1 < $1.1}).map{ $0.0 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2fpkviyi.swift:12:51: error: value of type 'Int' has no member\
    \ 'digits'\n    let sumOfDigits = nums.map{ abs($0) }.map{ $0.digits.reduce(0,\
    \ +) }\n                                               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // fill in your code here\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_0_nrxvh/tmp_0_nrxvh.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b256bb8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b256b884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b256b884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b256b8837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0_nrxvh                        0x00005601c73903e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b256bd79460 __libc_start_main +
    245

    6    tmp_0_nrxvh                        0x00005601c738ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let digits = nums.map { sumOfDigits(int: $0) }\n    var result = [Int]()\n\
    \    var i = 0\n    while result.count < nums.count {\n        var min = digits[i]\n\
    \        var minIndex = i\n        for j in i..<digits.count {\n            if\
    \ digits[j] < min {\n                min = digits[j]\n                minIndex\
    \ = j\n            }\n        }\n        result.append(nums[minIndex])\n     \
    \   i = minIndex + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7l3yckh9.swift:12:29: error: cannot find 'sumOfDigits' in scope\n\
    \    let digits = nums.map { sumOfDigits(int: $0) }\n                        \
    \    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    var result = nums\n    for\
    \ i in 0...result.count-1 {\n        for j in 0...result.count-2 {\n         \
    \   if (result[j] < 0 && result[j+1] > 0) || (result[j] < 0 && result[j+1] < 0\
    \ && sum_of_digits(result[j]) > sum_of_digits(result[j+1])) || (result[j] > 0\
    \ && result[j+1] > 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1]))\
    \ {\n                result.swapAt(j, j+1)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0zvpmpwu.swift:18:91: error: cannot find 'sum_of_digits' in scope\n\
    \            if (result[j] < 0 && result[j+1] > 0) || (result[j] < 0 && result[j+1]\
    \ < 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1])) || (result[j]\
    \ > 0 && result[j+1] > 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1]))\
    \ {\n                                                                        \
    \                  ^~~~~~~~~~~~~\n/tmp/tmp0zvpmpwu.swift:18:118: error: cannot\
    \ find 'sum_of_digits' in scope\n            if (result[j] < 0 && result[j+1]\
    \ > 0) || (result[j] < 0 && result[j+1] < 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1]))\
    \ || (result[j] > 0 && result[j+1] > 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1]))\
    \ {\n                                                                        \
    \                                             ^~~~~~~~~~~~~\n/tmp/tmp0zvpmpwu.swift:18:186:\
    \ error: cannot find 'sum_of_digits' in scope\n            if (result[j] < 0 &&\
    \ result[j+1] > 0) || (result[j] < 0 && result[j+1] < 0 && sum_of_digits(result[j])\
    \ > sum_of_digits(result[j+1])) || (result[j] > 0 && result[j+1] > 0 && sum_of_digits(result[j])\
    \ > sum_of_digits(result[j+1])) {\n                                          \
    \                                                                            \
    \                                                                   ^~~~~~~~~~~~~\n\
    /tmp/tmp0zvpmpwu.swift:18:213: error: cannot find 'sum_of_digits' in scope\n \
    \           if (result[j] < 0 && result[j+1] > 0) || (result[j] < 0 && result[j+1]\
    \ < 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1])) || (result[j]\
    \ > 0 && result[j+1] > 0 && sum_of_digits(result[j]) > sum_of_digits(result[j+1]))\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var dict: [Int: [Int]] = [:]\n    var result: [Int] = []\n    var currentSum:\
    \ Int = 0\n    var currentInt: Int = 0\n    var currentKey: Int = 0\n    var key:\
    \ Int = 0\n    for num in nums {\n        currentSum = 0\n        currentInt =\
    \ abs(num)\n        while currentInt != 0 {\n            currentSum += currentInt\
    \ % 10\n            currentInt /= 10\n        }\n        dict[currentSum] = []\n\
    \    }\n    for num in nums {\n        currentSum = 0\n        currentInt = abs(num)\n\
    \        while currentInt != 0 {\n            currentSum += currentInt % 10\n\
    \            currentInt /= 10\n        }\n        dict[currentSum]?.append(num)\n\
    \    }\n    for key in dict.keys.sorted() {\n        result += dict[key]!\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp1wc7hd2_/tmp1wc7hd2_.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac31e151c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac31de48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac31de48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac31de477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wc7hd2_                        0x000056189f44ea64 <unavailable> + 6756

    5    libc.so.6                          0x00002ac31e33d460 __libc_start_main +
    245

    6    tmp1wc7hd2_                        0x000056189f44e649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        if num_digits(num: $0) == num_digits(num:\
    \ $1) {\n            return $0 < $1\n        }\n        return num_digits(num:\
    \ $0) < num_digits(num: $1)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnwuvu4sm.swift:13:12: error: cannot find 'num_digits' in scope\n\
    \        if num_digits(num: $0) == num_digits(num: $1) {\n           ^~~~~~~~~~\n\
    /tmp/tmpnwuvu4sm.swift:13:35: error: cannot find 'num_digits' in scope\n     \
    \   if num_digits(num: $0) == num_digits(num: $1) {\n                        \
    \          ^~~~~~~~~~\n/tmp/tmpnwuvu4sm.swift:16:16: error: cannot find 'num_digits'\
    \ in scope\n        return num_digits(num: $0) < num_digits(num: $1)\n       \
    \        ^~~~~~~~~~\n/tmp/tmpnwuvu4sm.swift:16:38: error: cannot find 'num_digits'\
    \ in scope\n        return num_digits(num: $0) < num_digits(num: $1)\n       \
    \                              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sums = nums.map { $0 < 0 ? abs($0) : $0 }.map { String($0).compactMap\
    \ { Int(String($0)) }.reduce(0, +) }\n    var result = nums\n    for i in (0..<result.count).reversed()\
    \ {\n        for j in 1..<i {\n            if sums[j - 1] > sums[j] {\n      \
    \          sums.swapAt(j - 1, j)\n                result.swapAt(j - 1, j)\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp04i6556m.swift:17:22: error: cannot use mutating member on immutable\
    \ value: 'sums' is a 'let' constant\n                sums.swapAt(j - 1, j)\n \
    \               ~~~~ ^\n/tmp/tmp04i6556m.swift:12:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let sums = nums.map { $0 < 0 ? abs($0) : $0 }.map {\
    \ String($0).compactMap { Int(String($0)) }.reduce(0, +) }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // Write your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpop7f24_x/tmpop7f24_x.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08d4a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08d473cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08d473c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08d473b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop7f24_x                        0x00005636317ec3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b08d4c31460 __libc_start_main +
    245

    6    tmpop7f24_x                        0x00005636317ebfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    var newNums = nums\n   \
    \ for index in 0...newNums.count - 1 {\n        for j in 0...newNums.count - 1\
    \ - index {\n            if sumDigits(num: newNums[j]) > sumDigits(num: newNums[j\
    \ + 1]) {\n                let temp = newNums[j]\n                newNums[j] =\
    \ newNums[j + 1]\n                newNums[j + 1] = temp\n            }\n     \
    \   }\n    }\n    return newNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0gnkjrhw.swift:18:16: error: cannot find 'sumDigits' in scope\n\
    \            if sumDigits(num: newNums[j]) > sumDigits(num: newNums[j + 1]) {\n\
    \               ^~~~~~~~~\n/tmp/tmp0gnkjrhw.swift:18:45: error: cannot find 'sumDigits'\
    \ in scope\n            if sumDigits(num: newNums[j]) > sumDigits(num: newNums[j\
    \ + 1]) {\n                                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return nums.sorted {\n    let firstSum = abs($0).digits.reduce(0, +)\n    let\
    \ secondSum = abs($1).digits.reduce(0, +)\n    return firstSum == secondSum ?\
    \ nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)! : firstSum < secondSum\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpafjaot9h.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    let firstSum = abs($0).digits.reduce(0, +)\n                 \
    \  ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpupwvss33/tmpupwvss33.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b584d0c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b584cdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b584cdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b584cdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupwvss33                        0x00005640375de3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b584d2ae460 __libc_start_main +
    245

    6    tmpupwvss33                        0x00005640375ddfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (x, y) -> Bool in\n        let sumX = sum_of_digits(num:\
    \ x)\n        let sumY = sum_of_digits(num: y)\n        if sumX == sumY {\n  \
    \          return nums.firstIndex(of: x)! < nums.firstIndex(of: y)!\n        }\n\
    \        return sumX < sumY\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2cyo3pir.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sumX = sum_of_digits(num: x)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmp2cyo3pir.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sumY = sum_of_digits(num: y)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        return Sum(a: nums[$0]) < Sum(a: nums[$1])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp43dcluts.swift:13:16: error: cannot find 'Sum' in scope\n     \
    \   return Sum(a: nums[$0]) < Sum(a: nums[$1])\n               ^~~\n/tmp/tmp43dcluts.swift:13:35:\
    \ error: cannot find 'Sum' in scope\n        return Sum(a: nums[$0]) < Sum(a:\
    \ nums[$1])\n                                  ^~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var temp: [Int] = []\n    for i in nums {\n        temp.append(i)\n    }\n\
    \    return temp.sorted{sum(of: $0) < sum(of: $1)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpr_987iwl.swift:16:24: error: cannot find 'sum' in scope\n    return\
    \ temp.sorted{sum(of: $0) < sum(of: $1)}\n                       ^~~\n/tmp/tmpr_987iwl.swift:16:38:\
    \ error: cannot find 'sum' in scope\n    return temp.sorted{sum(of: $0) < sum(of:\
    \ $1)}\n                                     ^~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // Write your solution here\n    return nums.sorted { (left, right) -> Bool\
    \ in\n        let leftSum = left.digits.reduce(0, +)\n        let rightSum = right.digits.reduce(0,\
    \ +)\n        return leftSum == rightSum ? left < right : leftSum < rightSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6vf6wdf0.swift:14:28: error: value of type 'Int' has no member\
    \ 'digits'\n        let leftSum = left.digits.reduce(0, +)\n                 \
    \     ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        sum_of_digits(of: $0) < sum_of_digits(of:\
    \ $1)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9e057n41.swift:13:9: error: cannot find 'sum_of_digits' in scope\n\
    \        sum_of_digits(of: $0) < sum_of_digits(of: $1)\n        ^~~~~~~~~~~~~\n\
    /tmp/tmp9e057n41.swift:13:33: error: cannot find 'sum_of_digits' in scope\n  \
    \      sum_of_digits(of: $0) < sum_of_digits(of: $1)\n                       \
    \         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp8zka4yr2/tmp8zka4yr2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f8366bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f83362b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f83362988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f833617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zka4yr2                        0x00005592efd193e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b9f83857460 __libc_start_main +
    245

    6    tmp8zka4yr2                        0x00005592efd18fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let dict = nums.reduce(into: [Int: Int]()) { (dict, num) in\n        dict[num]\
    \ = num.digits.reduce(0, +)\n    }\n    return nums.sorted { dict[$0]! < dict[$1]!\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1lhd5m__.swift:13:25: error: value of type 'Int' has no member\
    \ 'digits'\n        dict[num] = num.digits.reduce(0, +)\n                    ~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // TODO: Solve the challenge here!\n    return nums\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpzv_h1f_l/tmpzv_h1f_l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89a113cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89a0e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89a0e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89a0e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzv_h1f_l                        0x0000556fec6813e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b89a1328460 __libc_start_main +
    245

    6    tmpzv_h1f_l                        0x0000556fec680fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // TODO: implement the task\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpgvrkxk06/tmpgvrkxk06.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba59afd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba59acc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba59acc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba59acc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgvrkxk06                        0x0000562cf18723e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ba59b1be460 __libc_start_main +
    245

    6    tmpgvrkxk06                        0x0000562cf1871fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (left, right) -> Bool in\n        let left_sum = left.digits.reduce(0,\
    \ +)\n        let right_sum = right.digits.reduce(0, +)\n        return left_sum\
    \ < right_sum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp59c9u3uh.swift:13:29: error: value of type 'Int' has no member\
    \ 'digits'\n        let left_sum = left.digits.reduce(0, +)\n                \
    \       ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // your code goes here...\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: '/tmp/tmpumd770dr.swift:13:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sumOfDigits = nums.map { (value) -> (Int, Int) in\n        var sum =\
    \ 0\n        var num = value\n        while num != 0 {\n            sum += num\
    \ % 10\n            num /= 10\n        }\n        return (value, sum)\n    }\n\
    \    return sumOfDigits.sorted(by: { $0.1 < $1.1 }).map { $0.0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmphnteo5n1/tmphnteo5n1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefdf9a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefdf697b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefdf697988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefdf6967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnteo5n1                        0x0000561ff69cd594 <unavailable> + 5524

    5    libc.so.6                          0x00002aefdfb8c460 __libc_start_main +
    245

    6    tmphnteo5n1                        0x0000561ff69cd179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        var aVal = abs(a)\n        var bVal = abs(b)\n\
    \        var aSum = 0\n        var bSum = 0\n        while aVal > 0 {\n      \
    \      aSum += aVal % 10\n            aVal /= 10\n        }\n        while bVal\
    \ > 0 {\n            bSum += bVal % 10\n            bVal /= 10\n        }\n  \
    \      return aSum < bSum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1kh0u4a1.swift:13:24: error: cannot find 'a' in scope\n       \
    \ var aVal = abs(a)\n                       ^\n/tmp/tmp1kh0u4a1.swift:14:24: error:\
    \ cannot find 'b' in scope\n        var bVal = abs(b)\n                      \
    \ ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    var numbers = nums\n   \
    \ numbers.sort { a, b in\n        let digitA = Array(String(a)).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let digitB = Array(String(b)).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return digitA < digitB\n    }\n    return numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_gbt25pu/tmp_gbt25pu.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb9f65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb9c5c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7fb9c5c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7fb9c5c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7fb9c5bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_gbt25pu                        0x00005599717bc731 <unavailable> + 10033

    6    libswiftCore.so                    0x00002b7fb9c44820 Collection.map<A>(_:)
    + 426

    7    tmp_gbt25pu                        0x00005599717bc33d <unavailable> + 9021

    8    libswiftSwiftOnoneSupport.so       0x00002b7fb9a48020 specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 152

    9    libswiftSwiftOnoneSupport.so       0x00002b7fb9a4f04d <unavailable> + 135245

    10   libswiftSwiftOnoneSupport.so       0x00002b7fb9a4a0d2 <unavailable> + 114898

    11   libswiftSwiftOnoneSupport.so       0x00002b7fb9a497b0 specialized MutableCollection<>.sort(by:)
    + 27

    12   tmp_gbt25pu                        0x00005599717bc208 <unavailable> + 8712

    13   tmp_gbt25pu                        0x00005599717bb864 <unavailable> + 6244

    14   libc.so.6                          0x00002b7fba151460 __libc_start_main +
    245

    15   tmp_gbt25pu                        0x00005599717bb539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        sum_of_digits(num: $0) == sum_of_digits(num:\
    \ $1) ? $0 < $1 : sum_of_digits(num: $0) < sum_of_digits(num: $1)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpf8zrdn4x.swift:13:9: error: cannot find 'sum_of_digits' in scope\n\
    \        sum_of_digits(num: $0) == sum_of_digits(num: $1) ? $0 < $1 : sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1)\n        ^~~~~~~~~~~~~\n/tmp/tmpf8zrdn4x.swift:13:35:\
    \ error: cannot find 'sum_of_digits' in scope\n        sum_of_digits(num: $0)\
    \ == sum_of_digits(num: $1) ? $0 < $1 : sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)\n                                  ^~~~~~~~~~~~~\n/tmp/tmpf8zrdn4x.swift:13:70:\
    \ error: cannot find 'sum_of_digits' in scope\n        sum_of_digits(num: $0)\
    \ == sum_of_digits(num: $1) ? $0 < $1 : sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)\n                                                                     ^~~~~~~~~~~~~\n\
    /tmp/tmpf8zrdn4x.swift:13:95: error: cannot find 'sum_of_digits' in scope\n  \
    \      sum_of_digits(num: $0) == sum_of_digits(num: $1) ? $0 < $1 : sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1)\n                                             \
    \                                                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let ad = a.digits.reduce(0,\
    \ +)\n        let bd = b.digits.reduce(0, +)\n        return ad < bd\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsjhtnoua.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n        let ad = a.digits.reduce(0, +)\n                 ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { lhs, rhs in\n        return Int(String(abs(lhs)).reduce(0,\
    \ +)) < Int(String(abs(rhs)).reduce(0, +))\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpttx5kscv.swift:13:47: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, String.Element) throws -> Int' (aka\
    \ '(Int, Character) throws -> Int')\n        return Int(String(abs(lhs)).reduce(0,\
    \ +)) < Int(String(abs(rhs)).reduce(0, +))\n                                 \
    \             ^\n/tmp/tmpttx5kscv.swift:13:84: error: cannot convert value of\
    \ type '(Int) -> Int' to expected argument type '(Int, String.Element) throws\
    \ -> Int' (aka '(Int, Character) throws -> Int')\n        return Int(String(abs(lhs)).reduce(0,\
    \ +)) < Int(String(abs(rhs)).reduce(0, +))\n                                 \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (x, y) -> Bool in\n        var xSum = 0\n        var\
    \ ySum = 0\n        for i in x.description {\n            guard let xNext = Int(String(i))\
    \ else { return false }\n            xSum += xNext\n        }\n        for i in\
    \ y.description {\n            guard let yNext = Int(String(i)) else { return\
    \ false }\n            ySum += yNext\n        }\n        return xSum < ySum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpgmq7z8op/tmpgmq7z8op.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a09682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a09379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a09379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a093787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmq7z8op                        0x000055bf0acb16a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6a0986e460 __libc_start_main +
    245

    6    tmpgmq7z8op                        0x000055bf0acb1289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let s1 = String($0)\n        let s2 = String($1)\n\
    \        let d1 = s1.digits.reduce(0, +)\n        let d2 = s2.digits.reduce(0,\
    \ +)\n        return d1 < d2 || (d1 == d2 && s1.compare(s2) == .orderedAscending)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp92v4p7fs.swift:15:21: error: value of type 'String' has no member\
    \ 'digits'\n        let d1 = s1.digits.reduce(0, +)\n                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var mutableNums = nums\n    for i in 0..<mutableNums.count - 1 {\n      \
    \  for j in 0..<mutableNums.count - i - 1 {\n            if sumOfDigits(num: mutableNums[j])\
    \ > sumOfDigits(num: mutableNums[j + 1]) {\n                mutableNums.swapAt(j,\
    \ j + 1)\n            }\n        }\n    }\n    return mutableNums\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpr026141g.swift:15:16: error: cannot find 'sumOfDigits' in scope\n\
    \            if sumOfDigits(num: mutableNums[j]) > sumOfDigits(num: mutableNums[j\
    \ + 1]) {\n               ^~~~~~~~~~~\n/tmp/tmpr026141g.swift:15:51: error: cannot\
    \ find 'sumOfDigits' in scope\n            if sumOfDigits(num: mutableNums[j])\
    \ > sumOfDigits(num: mutableNums[j + 1]) {\n                                 \
    \                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let left = String($0).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let right = String($1).reduce(0) { $0 + Int(String($1))! }\n    \
    \    return left < right\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpmngkt9cx/tmpmngkt9cx.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab338e27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab338b1e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab338b1e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab338b1e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab338b1dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmngkt9cx                        0x000055dde59312fa <unavailable> + 8954

    6    libswiftCore.so                    0x00002ab338c2d410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpmngkt9cx                        0x000055dde59310d3 <unavailable> + 8403

    8    libswiftCore.so                    0x00002ab338c3fc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002ab338c40110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002ab338c3ed30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002ab338c3ed15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002ab338d6465a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002ab338b53720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002ab338b5370f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002ab338c3e460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002ab338c3e370 Sequence.sorted(by:)
    + 193

    17   tmpmngkt9cx                        0x000055dde5931000 <unavailable> + 8192

    18   tmpmngkt9cx                        0x000055dde59306b4 <unavailable> + 5812

    19   libc.so.6                          0x00002ab339013460 __libc_start_main +
    245

    20   tmpmngkt9cx                        0x000055dde5930389 <unavaila'
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (int1, int2) -> Bool in\n        var a = 0\n       \
    \ var b = 0\n        var num = int1\n        while num != 0 {\n            a +=\
    \ num % 10\n            num /= 10\n        }\n        num = int2\n        while\
    \ num != 0 {\n            b += num % 10\n            num /= 10\n        }\n  \
    \      return a < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjnjfmizh/tmpjnjfmizh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ff42f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ff3fedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ff3fed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ff3fec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnjfmizh                        0x0000559d6715a4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b4ff44e2460 __libc_start_main +
    245

    6    tmpjnjfmizh                        0x0000559d6715a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sum_of_digits(n: $0) < sum_of_digits(n: $1) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpy_jkj93x.swift:12:30: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted(by: { sum_of_digits(n: $0) < sum_of_digits(n: $1) })\n\
    \                             ^~~~~~~~~~~~~\n/tmp/tmpy_jkj93x.swift:12:53: error:\
    \ cannot find 'sum_of_digits' in scope\n    return nums.sorted(by: { sum_of_digits(n:\
    \ $0) < sum_of_digits(n: $1) })\n                                            \
    \        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        sum_of_digits(num: lhs)\
    \ < sum_of_digits(num: rhs)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpuj589w_1.swift:13:9: error: cannot find 'sum_of_digits' in scope\n\
    \        sum_of_digits(num: lhs) < sum_of_digits(num: rhs)\n        ^~~~~~~~~~~~~\n\
    /tmp/tmpuj589w_1.swift:13:35: error: cannot find 'sum_of_digits' in scope\n  \
    \      sum_of_digits(num: lhs) < sum_of_digits(num: rhs)\n                   \
    \               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else {\n        return []\n    }\n    let res = nums.enumerated().sorted\
    \ { (arg0, arg1) -> Bool in\n        let (index1, num1) = arg0\n        let (index2,\
    \ num2) = arg1\n        let num1 = String(abs(num1))\n        let num2 = String(abs(num2))\n\
    \        if num1.reduce(0, {$0 + Int(String($1))!}) == num2.reduce(0, {$0 + Int(String($1))!})\
    \ {\n            return index1 < index2\n        }\n        return num1.reduce(0,\
    \ {$0 + Int(String($1))!}) < num2.reduce(0, {$0 + Int(String($1))!})\n    }\n\
    \    return res.map { $0.element }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpal09rkc4.swift:18:13: error: invalid redeclaration of 'num1'\n\
    \        let num1 = String(abs(num1))\n            ^\n/tmp/tmpal09rkc4.swift:16:22:\
    \ note: 'num1' previously declared here\n        let (index1, num1) = arg0\n \
    \                    ^\n/tmp/tmpal09rkc4.swift:19:13: error: invalid redeclaration\
    \ of 'num2'\n        let num2 = String(abs(num2))\n            ^\n/tmp/tmpal09rkc4.swift:17:22:\
    \ note: 'num2' previously declared here\n        let (index2, num2) = arg1\n \
    \                    ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { lhs, rhs in\n        lhs.digitsSum < rhs.digitsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3nlt97yg.swift:13:13: error: value of type 'Int' has no member\
    \ 'digitsSum'\n        lhs.digitsSum < rhs.digitsSum\n        ~~~ ^~~~~~~~~\n\
    /tmp/tmp3nlt97yg.swift:13:29: error: value of type 'Int' has no member 'digitsSum'\n\
    \        lhs.digitsSum < rhs.digitsSum\n                        ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    let sorted = nums.sorted\
    \ { abs($0) % 10 + abs($0) / 10 < abs($1) % 10 + abs($1) / 10 }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp0y7qyyam/tmp0y7qyyam.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6d21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6a18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6a18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6a177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0y7qyyam                        0x0000563477821674 <unavailable> + 5748

    5    libc.so.6                          0x00002b30c6f0d460 __libc_start_main +
    245

    6    tmp0y7qyyam                        0x0000563477821259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = nums\n    result.sort { a, b in\n        (a.digits.reduce(0,\
    \ +) > b.digits.reduce(0, +)) || (a.digits.reduce(0, +) == b.digits.reduce(0,\
    \ +) && a < b)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfoi66fya.swift:13:5: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    result.sort { a, b in\n    ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009242
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    for i in 0..<nums.count {\n        for j in i..<nums.count\
    \ {\n            let numsI = Array(String(nums[i]).map{Int(String($0))!})\n  \
    \          let numsJ = Array(String(nums[j]).map{Int(String($0))!})\n        \
    \    if numsI.reduce(0, +) > numsJ.reduce(0, +) {\n                nums.swapAt(i,\
    \ j)\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpomfsduaa/tmpomfsduaa.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c5cac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c5c7bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c5c7bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c5c7bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c5c7bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpomfsduaa                        0x000055eba72f7c31 <unavailable> + 11313

    6    libswiftCore.so                    0x00002b0c5c7a5820 Collection.map<A>(_:)
    + 426

    7    tmpomfsduaa                        0x000055eba72f772a <unavailable> + 10026

    8    tmpomfsduaa                        0x000055eba72f6954 <unavailable> + 6484

    9    libc.so.6                          0x00002b0c5ccb2460 __libc_start_main +
    245

    10   tmpomfsduaa                        0x000055eba72f6629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sumOfDigits(num: $0) < sumOfDigits(num: $1) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpz8yt7tkx.swift:12:30: error: cannot find 'sumOfDigits' in scope\n\
    \    return nums.sorted(by: { sumOfDigits(num: $0) < sumOfDigits(num: $1) })\n\
    \                             ^~~~~~~~~~~\n/tmp/tmpz8yt7tkx.swift:12:53: error:\
    \ cannot find 'sumOfDigits' in scope\n    return nums.sorted(by: { sumOfDigits(num:\
    \ $0) < sumOfDigits(num: $1) })\n                                            \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  if nums.isEmpty {\n    return []\n  }\n  var result: [(Int, Int)] = nums.map\
    \ { ($0, $0.digits.reduce(0, +)) }\n  result.sort { (first, second) -> Bool in\n\
    \    if first.1 == second.1 {\n      return first.0 < second.0\n    }\n    return\
    \ first.1 < second.1\n  }\n  return result.map { $0.0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0xxrc9j2.swift:15:49: error: value of type 'Int' has no member\
    \ 'digits'\n  var result: [(Int, Int)] = nums.map { ($0, $0.digits.reduce(0, +))\
    \ }\n                                             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // Your code here\n    return nums.sorted(by: {sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpec83jjmc.swift:13:29: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted(by: {sum_of_digits(num: $0) < sum_of_digits(num: $1)})\n\
    \                            ^~~~~~~~~~~~~\n/tmp/tmpec83jjmc.swift:13:54: error:\
    \ cannot find 'sum_of_digits' in scope\n    return nums.sorted(by: {sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1)})\n                                           \
    \          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    let sumDigits = nums.map { $0.digitsSum }\n    let sortedSumDigits\
    \ = sumDigits.sorted()\n    var temp: [Int] = []\n    \n    for i in sortedSumDigits\
    \ {\n        for j in nums {\n            if j.digitsSum == i {\n            \
    \    temp.append(j)\n            }\n        }\n    }\n    return temp\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpptooqbvo.swift:13:35: error: value of type 'Int' has no member\
    \ 'digitsSum'\n    let sumDigits = nums.map { $0.digitsSum }\n               \
    \                ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    return nums.sorted(by: { (a, b) -> Bool in\n       \
    \ let l1 = String(a).compactMap{Int(String($0))}.reduce(0, +)\n        let l2\
    \ = String(b).compactMap{Int(String($0))}.reduce(0, +)\n        return l1 < l2\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpzi8zkksm/tmpzi8zkksm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6616f6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6616c63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6616c63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6616c627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi8zkksm                        0x0000558c83d95784 <unavailable> + 6020

    5    libc.so.6                          0x00002b6617158460 __libc_start_main +
    245

    6    tmpzi8zkksm                        0x0000558c83d95369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (num1, num2) -> Bool in\n        sumOfDigits(n: num1)\
    \ < sumOfDigits(n: num2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6p32p6o8.swift:13:9: error: cannot find 'sumOfDigits' in scope\n\
    \        sumOfDigits(n: num1) < sumOfDigits(n: num2)\n        ^~~~~~~~~~~\n/tmp/tmp6p32p6o8.swift:13:32:\
    \ error: cannot find 'sumOfDigits' in scope\n        sumOfDigits(n: num1) < sumOfDigits(n:\
    \ num2)\n                               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    return nums.sorted { (a,\
    \ b) -> Bool in\n        var aSum = 0\n        var bSum = 0\n        a.digits.forEach\
    \ { aSum += $0 }\n        b.digits.forEach { bSum += $0 }\n        if aSum ==\
    \ bSum {\n            return a < b\n        }\n        return aSum < bSum\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptwhf3j9i.swift:18:11: error: value of type 'Int' has no member\
    \ 'digits'\n        a.digits.forEach { aSum += $0 }\n        ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return [1, 2, 3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpex6ce80n/tmpex6ce80n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae80cd83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80ca7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae80ca7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae80ca797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpex6ce80n                        0x0000555e019b73e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ae80cf6f460 __libc_start_main +
    245

    6    tmpex6ce80n                        0x0000555e019b6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        var n1 = $0\n        var n2 = $1\n    \
    \    var s1 = 0\n        var s2 = 0\n        while n1 != 0 {\n            s1 +=\
    \ n1 % 10\n            n1 /= 10\n        }\n        while n2 != 0 {\n        \
    \    s2 += n2 % 10\n            n2 /= 10\n        }\n        return s1 < s2\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpa5x3f_cj/tmpa5x3f_cj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b498baccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b498b7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b498b7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b498b7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5x3f_cj                        0x00005590f32234f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b498bcb8460 __libc_start_main +
    245

    6    tmpa5x3f_cj                        0x00005590f32230d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  guard nums.count > 0 else { return nums }\n  var nums = nums\n  return nums.sorted(by:\
    \ { sum_of_digits(num: $0) < sum_of_digits(num: $1) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp006lpfn3.swift:14:28: error: cannot find 'sum_of_digits' in scope\n\
    \  return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1) })\n\
    \                           ^~~~~~~~~~~~~\n/tmp/tmp006lpfn3.swift:14:53: error:\
    \ cannot find 'sum_of_digits' in scope\n  return nums.sorted(by: { sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1) })\n                                          \
    \          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    for number in nums {\n        var tempArr: [Int]\
    \ = []\n        var index = 0\n        for char in String(number) {\n        \
    \    tempArr.append(Int(String(char))!)\n            index += 1\n        }\n \
    \       var sum = 0\n        for number in tempArr {\n            sum += number\n\
    \        }\n        result.append(sum)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp5n_sa97b/tmp5n_sa97b.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae53c450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae53c147561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae53c147286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae53c14713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae53c146bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5n_sa97b                        0x000056270e9c042d <unavailable> + 9261

    6    tmp5n_sa97b                        0x000056270e9bf7d4 <unavailable> + 6100

    7    libc.so.6                          0x00002ae53c63c460 __libc_start_main +
    245

    8    tmp5n_sa97b                        0x000056270e9bf4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum = sumOfDigits(n:\
    \ lhs)\n        let rhsSum = sumOfDigits(n: rhs)\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpoo9elnlm.swift:13:22: error: cannot find 'sumOfDigits' in scope\n\
    \        let lhsSum = sumOfDigits(n: lhs)\n                     ^~~~~~~~~~~\n\
    /tmp/tmpoo9elnlm.swift:14:22: error: cannot find 'sumOfDigits' in scope\n    \
    \    let rhsSum = sumOfDigits(n: rhs)\n                     ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sorted = nums.sorted { (first, second) -> Bool in\n        if sum_of_digits(number:\
    \ first) == sum_of_digits(number: second) {\n            return first < second\n\
    \        }\n        return sum_of_digits(number: first) < sum_of_digits(number:\
    \ second)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_71nk3f7.swift:13:12: error: cannot find 'sum_of_digits' in scope\n\
    \        if sum_of_digits(number: first) == sum_of_digits(number: second) {\n\
    \           ^~~~~~~~~~~~~\n/tmp/tmp_71nk3f7.swift:13:44: error: cannot find 'sum_of_digits'\
    \ in scope\n        if sum_of_digits(number: first) == sum_of_digits(number: second)\
    \ {\n                                           ^~~~~~~~~~~~~\n/tmp/tmp_71nk3f7.swift:16:16:\
    \ error: cannot find 'sum_of_digits' in scope\n        return sum_of_digits(number:\
    \ first) < sum_of_digits(number: second)\n               ^~~~~~~~~~~~~\n/tmp/tmp_71nk3f7.swift:16:47:\
    \ error: cannot find 'sum_of_digits' in scope\n        return sum_of_digits(number:\
    \ first) < sum_of_digits(number: second)\n                                   \
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {$0.sumOfDigits() == $1.sumOfDigits() ? $0 < $1 :\
    \ $0.sumOfDigits() < $1.sumOfDigits()})\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp081rjxm8.swift:12:32: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n    return nums.sorted(by: {$0.sumOfDigits() == $1.sumOfDigits()\
    \ ? $0 < $1 : $0.sumOfDigits() < $1.sumOfDigits()})\n                        \
    \    ~~ ^~~~~~~~~~~\n/tmp/tmp081rjxm8.swift:12:52: error: value of type 'Int'\
    \ has no member 'sumOfDigits'\n    return nums.sorted(by: {$0.sumOfDigits() ==\
    \ $1.sumOfDigits() ? $0 < $1 : $0.sumOfDigits() < $1.sumOfDigits()})\n       \
    \                                         ~~ ^~~~~~~~~~~\n/tmp/tmp081rjxm8.swift:12:81:\
    \ error: value of type 'Int' has no member 'sumOfDigits'\n    return nums.sorted(by:\
    \ {$0.sumOfDigits() == $1.sumOfDigits() ? $0 < $1 : $0.sumOfDigits() < $1.sumOfDigits()})\n\
    \                                                                            \
    \ ~~ ^~~~~~~~~~~\n/tmp/tmp081rjxm8.swift:12:100: error: value of type 'Int' has\
    \ no member 'sumOfDigits'\n    return nums.sorted(by: {$0.sumOfDigits() == $1.sumOfDigits()\
    \ ? $0 < $1 : $0.sumOfDigits() < $1.sumOfDigits()})\n                        \
    \                                                                        ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        lhs.digitsSum() < rhs.digitsSum()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm8kw_gqa.swift:13:13: error: value of type 'Int' has no member\
    \ 'digitsSum'\n        lhs.digitsSum() < rhs.digitsSum()\n        ~~~ ^~~~~~~~~\n\
    /tmp/tmpm8kw_gqa.swift:13:31: error: value of type 'Int' has no member 'digitsSum'\n\
    \        lhs.digitsSum() < rhs.digitsSum()\n                          ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort {\n        if sum_of_digits(num: $0) == sum_of_digits(num:\
    \ $1) {\n            return $0 < $1\n        }\n        return sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1)\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphe7ndacf.swift:14:12: error: cannot find 'sum_of_digits' in scope\n\
    \        if sum_of_digits(num: $0) == sum_of_digits(num: $1) {\n           ^~~~~~~~~~~~~\n\
    /tmp/tmphe7ndacf.swift:14:38: error: cannot find 'sum_of_digits' in scope\n  \
    \      if sum_of_digits(num: $0) == sum_of_digits(num: $1) {\n               \
    \                      ^~~~~~~~~~~~~\n/tmp/tmphe7ndacf.swift:17:16: error: cannot\
    \ find 'sum_of_digits' in scope\n        return sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)\n               ^~~~~~~~~~~~~\n/tmp/tmphe7ndacf.swift:17:41: error: cannot\
    \ find 'sum_of_digits' in scope\n        return sum_of_digits(num: $0) < sum_of_digits(num:\
    \ $1)\n                                        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        return sum_of_digits(n: a)\
    \ < sum_of_digits(n: b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptajxmis4.swift:13:16: error: cannot find 'sum_of_digits' in scope\n\
    \        return sum_of_digits(n: a) < sum_of_digits(n: b)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmptajxmis4.swift:13:38: error: cannot find 'sum_of_digits' in scope\n  \
    \      return sum_of_digits(n: a) < sum_of_digits(n: b)\n                    \
    \                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { getSum($0) < getSum($1) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpauqo4t9u.swift:12:30: error: cannot find 'getSum' in scope\n  \
    \  return nums.sorted(by: { getSum($0) < getSum($1) })\n                     \
    \        ^~~~~~\n/tmp/tmpauqo4t9u.swift:12:43: error: cannot find 'getSum' in\
    \ scope\n    return nums.sorted(by: { getSum($0) < getSum($1) })\n           \
    \                               ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let lhs = $0.sum_of_digits()\n        let rhs\
    \ = $1.sum_of_digits()\n        if lhs == rhs {\n            return nums.firstIndex(of:\
    \ $0)! < nums.firstIndex(of: $1)!\n        }\n        return lhs < rhs\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigbzqdy1.swift:13:22: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n        let lhs = $0.sum_of_digits()\n                  ~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    for i in 0..<nums.count {\n        for j in 0..<nums.count\
    \ {\n            if (sum_of_digits(nums[i]) < sum_of_digits(nums[j])) {\n    \
    \            swap(&nums[i], &nums[j])\n            }\n        }\n    }\n    return\
    \ nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpukp0i307.swift:15:17: error: cannot find 'sum_of_digits' in scope\n\
    \            if (sum_of_digits(nums[i]) < sum_of_digits(nums[j])) {\n        \
    \        ^~~~~~~~~~~~~\n/tmp/tmpukp0i307.swift:15:42: error: cannot find 'sum_of_digits'\
    \ in scope\n            if (sum_of_digits(nums[i]) < sum_of_digits(nums[j])) {\n\
    \                                         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp8zka4yr2/tmp8zka4yr2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f8366bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f83362b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f83362988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f833617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zka4yr2                        0x00005592efd193e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b9f83857460 __libc_start_main +
    245

    6    tmp8zka4yr2                        0x00005592efd18fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    var arr = [(Int, Int)]()\n\
    \    for i in 0..<nums.count {\n        arr.append((nums[i], getSumOfDigits(num:\
    \ nums[i])))\n    }\n    return arr.sorted(by: { a, b in\n        if a.1 == b.1\
    \ {\n            return a.0 < b.0\n        }\n        return a.1 < b.1\n    }).map\
    \ { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpx9o02xw9.swift:17:30: error: cannot find 'getSumOfDigits' in scope\n\
    \        arr.append((nums[i], getSumOfDigits(num: nums[i])))\n               \
    \              ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        let num = $0\n        let sum0 = sum_of_digits(num:\
    \ num)\n        let num1 = $1\n        let sum1 = sum_of_digits(num: num1)\n \
    \       if sum0 != sum1 {\n            return sum0 < sum1\n        }\n       \
    \ return num < num1\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpy5xw4yuo.swift:14:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum0 = sum_of_digits(num: num)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmpy5xw4yuo.swift:16:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let sum1 = sum_of_digits(num: num1)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums_sort: [Int] = []\n    var points: [Int] = []\n    var all_points:\
    \ [Int] = []\n    var count: Int = 0\n    for i in nums {\n        count = 0\n\
    \        for j in String(i) {\n            if let j = Int(String(j)) {\n     \
    \           count += j\n            }\n        }\n        points.append(count)\n\
    \    }\n    for i in points {\n        var temp: Int = 0\n        var flag: Bool\
    \ = false\n        for j in all_points {\n            if i < j {\n           \
    \     temp = j\n                all_points[all_points.index(of: j)!] = i\n   \
    \             flag = true\n                break\n            }\n        }\n \
    \       if flag {\n            all_points.append(temp)\n        } else {\n   \
    \         all_points.append(i)\n        }\n    }\n    for i in all_points {\n\
    \        for j in points {\n            if i == j {\n                nums_sort.append(nums[points.index(of:\
    \ j)!])\n                points[points.index(of: j)!] = -100000\n            \
    \    break\n            }\n        }\n    }\n    return nums_sort\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpx7qkj57e/tmpx7qkj57e.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a0b44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a083bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a083b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a083a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7qkj57e                        0x000055e1bc1b39d4 <unavailable> + 6612

    5    libc.so.6                          0x00002b07a0d30460 __libc_start_main +
    245

    6    tmpx7qkj57e                        0x000055e1bc1b35b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (num1, num2) -> Bool in\n        let s1 = String(num1).map\
    \ { String($0) }.map { Int($0)! }.reduce(0, +)\n        let s2 = String(num2).map\
    \ { String($0) }.map { Int($0)! }.reduce(0, +)\n        return s1 < s2\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp2d4sxdh3/tmp2d4sxdh3.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b80aedb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80aeaa9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b80aeaa9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b80aeaa913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b80aeaa8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2d4sxdh3                        0x00005573d708368c <unavailable> + 9868

    6    libswiftCore.so                    0x00002b80aea91820 Collection.map<A>(_:)
    + 426

    7    tmp2d4sxdh3                        0x00005573d7083203 <unavailable> + 8707

    8    libswiftCore.so                    0x00002b80aebcac90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b80aebcb110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b80aebc9d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b80aebc9d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b80aecef65a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b80aeade720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b80aeade70f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b80aebc9460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b80aebc9370 Sequence.sorted(by:)
    + 193

    17   tmp2d4sxdh3                        0x00005573d70830a0 <unavailable> + 8352

    18   tmp2d4sxdh3                        0x00005573d7082754 <unavailable> + 5972

    19   libc.so.6                          0x00002b80aef9e460 __libc_start_main +
    245

    20   tmp2d4sxdh3                        0x00005573d7082429 <unavailable'
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // WRITE YOUR CODE HERE\n    var sortedDict = [Int: Int]()\n    for num in\
    \ nums {\n        var digits = [Int]()\n        var currentNum = num\n       \
    \ while currentNum > 0 {\n            digits.append(currentNum % 10)\n       \
    \     currentNum /= 10\n        }\n        let digitSum = digits.reduce(0, +)\n\
    \        sortedDict[num] = digitSum\n    }\n    let sorted = sortedDict.sorted(by:\
    \ { (arg0, arg1) -> Bool in\n        let (_, value0) = arg0\n        let (_, value1)\
    \ = arg1\n        return value0 < value1\n    })\n    return sorted.map { $0.key\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjkwd7lwx/tmpjkwd7lwx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca5cb98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca5c88fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca5c88f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca5c88e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkwd7lwx                        0x000055e052c7d904 <unavailable> + 6404

    5    libc.so.6                          0x00002aca5cd84460 __libc_start_main +
    245

    6    tmpjkwd7lwx                        0x000055e052c7d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aDigits = a.digits\n\
    \        let bDigits = b.digits\n        return aDigits.reduce(0, +) < bDigits.reduce(0,\
    \ +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjudegt0i.swift:13:25: error: value of type 'Int' has no member\
    \ 'digits'\n        let aDigits = a.digits\n                      ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { get_sum(number: $0) < get_sum(number: $1) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm_g8qi65.swift:12:26: error: cannot find 'get_sum' in scope\n \
    \   return nums.sorted { get_sum(number: $0) < get_sum(number: $1) }\n       \
    \                  ^~~~~~~\n/tmp/tmpm_g8qi65.swift:12:48: error: cannot find 'get_sum'\
    \ in scope\n    return nums.sorted { get_sum(number: $0) < get_sum(number: $1)\
    \ }\n                                               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var newArray = nums\n    let key = nums.map { abs($0) }.map { $0 % 10 + $0\
    \ / 10 }\n    let zipped = zip(nums, key)\n    let sorted = zipped.sorted { $0.1\
    \ < $1.1 }\n    newArray = sorted.map { $0.0 }\n    return newArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpxmumq4gf/tmpxmumq4gf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e3b97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e388eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e388e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e388d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmumq4gf                        0x000055d83272d6d4 <unavailable> + 5844

    5    libc.so.6                          0x00002b78e3d83460 __libc_start_main +
    245

    6    tmpxmumq4gf                        0x000055d83272d2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sorted = nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp160534d4.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSum = a.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    /// Write your code here.\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpb2aonxor/tmpb2aonxor.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94407bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94404b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94404b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94404b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2aonxor                        0x0000555f59a403e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b94409a9460 __libc_start_main +
    245

    6    tmpb2aonxor                        0x0000555f59a3ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var dict = [Int: [Int]]()\n    for num in nums {\n        var num = num\n\
    \        var sum = 0\n        while num != 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        if dict[sum] == nil {\n           \
    \ dict[sum] = [num]\n        } else {\n            dict[sum]?.append(num)\n  \
    \      }\n    }\n    var arr = [Int]()\n    let keys = dict.keys.sorted()\n  \
    \  for key in keys {\n        for num in dict[key]! {\n            arr.append(num)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp1iqlq_gk/tmp1iqlq_gk.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2eba62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2eb759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2eb759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2eb7587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1iqlq_gk                        0x000055ad4e2fa994 <unavailable> + 6548

    5    libc.so.6                          0x00002ad2ebc4e460 __libc_start_main +
    245

    6    tmp1iqlq_gk                        0x000055ad4e2fa579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        var lhsNum = lhs\n  \
    \      var rhsNum = rhs\n        var lhsSum = 0\n        var rhsSum = 0\n    \
    \    while lhsNum != 0 {\n            lhsSum += lhsNum % 10\n            lhsNum\
    \ /= 10\n        }\n        while rhsNum != 0 {\n            rhsSum += rhsNum\
    \ % 10\n            rhsNum /= 10\n        }\n        return lhsSum < rhsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp2x4q8c8c/tmp2x4q8c8c.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16bba2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16bb726b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16bb726988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16bb7257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2x4q8c8c                        0x00005650763fe4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b16bbc1b460 __libc_start_main +
    245

    6    tmp2x4q8c8c                        0x00005650763fe0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    /// Fill in here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdroubcat/tmpdroubcat.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba60b2f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba60afedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba60afed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba60afec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdroubcat                        0x00005636e6f193e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ba60b4e2460 __libc_start_main +
    245

    6    tmpdroubcat                        0x00005636e6f18fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sortedNums = nums\n    // create a map that stores the sum of the digits\
    \ per number\n    var sumDigitsMap = [Int: Int]()\n    // create a map that stores\
    \ the index per number\n    var idxMap = [Int: Int]()\n    for (idx, num) in nums.enumerated()\
    \ {\n        // calculate the sum of the digits\n        var sum = 0\n       \
    \ var numToCheck = num\n        while numToCheck != 0 {\n            sum += numToCheck\
    \ % 10\n            numToCheck /= 10\n        }\n        // update the maps\n\
    \        sumDigitsMap[num] = sum\n        idxMap[num] = idx\n    }\n    // sort\
    \ the list based on the sum of the digits in ascending order\n    sortedNums.sort\
    \ { (num1, num2) -> Bool in\n        if sumDigitsMap[num1] == sumDigitsMap[num2]\
    \ {\n            return idxMap[num1]! < idxMap[num2]!\n        }\n        return\
    \ sumDigitsMap[num1]! < sumDigitsMap[num2]!\n    }\n    return sortedNums\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpoyjyt0ie/tmpoyjyt0ie.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9271004c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9270cfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9270cfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9270cfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyjyt0ie                        0x000055fb21df9844 <unavailable> + 6212

    5    libc.so.6                          0x00002b92711f0460 __libc_start_main +
    245

    6    tmpoyjyt0ie                        0x000055fb21df9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // Sort the array based on sum of their digits\n    return nums.sorted(by:\
    \ { (lhs, rhs) -> Bool in\n        // Get sum of digits of each item\n       \
    \ let lhsSum = sum_of_digits(num: lhs)\n        let rhsSum = sum_of_digits(num:\
    \ rhs)\n        // Compare sums of each item\n        return lhsSum < rhsSum\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq3v3ooei.swift:15:22: error: cannot find 'sum_of_digits' in scope\n\
    \        let lhsSum = sum_of_digits(num: lhs)\n                     ^~~~~~~~~~~~~\n\
    /tmp/tmpq3v3ooei.swift:16:22: error: cannot find 'sum_of_digits' in scope\n  \
    \      let rhsSum = sum_of_digits(num: rhs)\n                     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var tmp: [(Int, Int)] = []\n    for (index, num)\
    \ in nums.enumerated() {\n        var sum = 0\n        var number = num\n    \
    \    while number != 0 {\n            sum += number % 10\n            number /=\
    \ 10\n        }\n        tmp.append((sum, index))\n    }\n    tmp.sort { (lhs,\
    \ rhs) -> Bool in\n        if lhs.0 < rhs.0 {\n            return true\n     \
    \   } else if lhs.0 == rhs.0 {\n            return lhs.1 < rhs.1\n        } else\
    \ {\n            return false\n        }\n    }\n    for item in tmp {\n     \
    \   result.append(nums[item.1])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpk3ddvteo/tmpk3ddvteo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7312a09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7312700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7312700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73126ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3ddvteo                        0x0000558cb9c9a9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b7312bf5460 __libc_start_main +
    245

    6    tmpk3ddvteo                        0x0000558cb9c9a5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        $0.digitSum == $1.digitSum ? $0 < $1 : $0.digitSum\
    \ < $1.digitSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9ocxt78a.swift:13:12: error: value of type 'Int' has no member\
    \ 'digitSum'\n        $0.digitSum == $1.digitSum ? $0 < $1 : $0.digitSum < $1.digitSum\n\
    \        ~~ ^~~~~~~~\n/tmp/tmp9ocxt78a.swift:13:27: error: value of type 'Int'\
    \ has no member 'digitSum'\n        $0.digitSum == $1.digitSum ? $0 < $1 : $0.digitSum\
    \ < $1.digitSum\n                       ~~ ^~~~~~~~\n/tmp/tmp9ocxt78a.swift:13:51:\
    \ error: value of type 'Int' has no member 'digitSum'\n        $0.digitSum ==\
    \ $1.digitSum ? $0 < $1 : $0.digitSum < $1.digitSum\n                        \
    \                       ~~ ^~~~~~~~\n/tmp/tmp9ocxt78a.swift:13:65: error: value\
    \ of type 'Int' has no member 'digitSum'\n        $0.digitSum == $1.digitSum ?\
    \ $0 < $1 : $0.digitSum < $1.digitSum\n                                      \
    \                       ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        var lhsSum = 0\n    \
    \    var rhsSum = 0\n        for ch in String(lhs) {\n            lhsSum += Int(String(ch))!\n\
    \        }\n        for ch in String(rhs) {\n            rhsSum += Int(String(ch))!\n\
    \        }\n        return lhsSum < rhsSum\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdwjpbp_2/tmpdwjpbp_2.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b845f544c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845f23b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b845f23b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b845f23b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b845f23abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdwjpbp_2                        0x0000560ee34e32b5 <unavailable> + 8885

    6    libswiftCore.so                    0x00002b845f35cc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002b845f35d110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002b845f35bd30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002b845f35bd15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002b845f48165a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002b845f270720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002b845f27070f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002b845f35b460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002b845f35b370 Sequence.sorted(by:)
    + 193

    15   tmpdwjpbp_2                        0x0000560ee34e2fc0 <unavailable> + 8128

    16   tmpdwjpbp_2                        0x0000560ee34e2674 <unavailable> + 5748

    17   libc.so.6                          0x00002b845f730460 __libc_start_main +
    245

    18   tmpdwjpbp_2                        0x0000560ee34e2349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  var result = nums\n  result.sort(by: {(x: Int, y: Int) -> Bool in\n    return\
    \ sum_of_digits(x) < sum_of_digits(y)\n  })\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpu2p2smtp.swift:14:12: error: cannot find 'sum_of_digits' in scope\n\
    \    return sum_of_digits(x) < sum_of_digits(y)\n           ^~~~~~~~~~~~~\n/tmp/tmpu2p2smtp.swift:14:31:\
    \ error: cannot find 'sum_of_digits' in scope\n    return sum_of_digits(x) < sum_of_digits(y)\n\
    \                              ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {\n        var (a1, b1) = getSumAndNum(a: $0)\n  \
    \      var (a2, b2) = getSumAndNum(a: $1)\n        if a1 < a2 {\n            return\
    \ true\n        } else if a1 > a2 {\n            return false\n        } else\
    \ {\n            return b1 < b2\n        }\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvmofkisx.swift:13:24: error: cannot find 'getSumAndNum' in scope\n\
    \        var (a1, b1) = getSumAndNum(a: $0)\n                       ^~~~~~~~~~~~\n\
    /tmp/tmpvmofkisx.swift:14:24: error: cannot find 'getSumAndNum' in scope\n   \
    \     var (a2, b2) = getSumAndNum(a: $1)\n                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {sum_of_digits(num: $0) < sum_of_digits(num: $1)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpygzf90a4.swift:12:29: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted(by: {sum_of_digits(num: $0) < sum_of_digits(num: $1)})\n\
    \                            ^~~~~~~~~~~~~\n/tmp/tmpygzf90a4.swift:12:54: error:\
    \ cannot find 'sum_of_digits' in scope\n    return nums.sorted(by: {sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1)})\n                                           \
    \          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  let res = nums.sorted { (lhs, rhs) -> Bool in\n    let lhsDigits = lhs.digits\n\
    \    let rhsDigits = rhs.digits\n    if lhsDigits.sum() == rhsDigits.sum() {\n\
    \      return lhs < rhs\n    }\n    return lhsDigits.sum() < rhsDigits.sum()\n\
    \  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp543r1r27.swift:13:25: error: value of type 'Int' has no member\
    \ 'digits'\n    let lhsDigits = lhs.digits\n                    ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sumDict: [Int: Int] = [:]\n    var output: [Int] = []\n    var index:\
    \ Int = 0\n    \n    for number in nums {\n        let n = number < 0 ? (number\
    \ * -1) : number\n        let numSum = n.description.reduce(0) { $0 + Int(String($1))!\
    \ }\n        sumDict[index] = numSum\n        index += 1\n    }\n    \n    let\
    \ sortedDict = sumDict.sorted { $0.value < $1.value }\n    for sortedNumber in\
    \ sortedDict {\n        output.append(nums[sortedNumber.key])\n    }\n    \n \
    \   return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpsx5wwh9p/tmpsx5wwh9p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6a2170c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6a1e67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6a1e67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6a1e667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx5wwh9p                        0x000055a9d394dac4 <unavailable> + 6852

    5    libc.so.6                          0x00002af6a235c460 __libc_start_main +
    245

    6    tmpsx5wwh9p                        0x000055a9d394d6a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    // TODO:\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptd9wu_ug/tmptd9wu_ug.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a8eadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a8ba4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a8ba4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a8ba37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptd9wu_ug                        0x00005649c68c43e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b56a9099460 __libc_start_main +
    245

    6    tmptd9wu_ug                        0x00005649c68c3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let s1 = String($0).map { String($0) }.map\
    \ { Int($0)! }.reduce(0, +)\n        let s2 = String($1).map { String($0) }.map\
    \ { Int($0)! }.reduce(0, +)\n        return s1 < s2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp2d6wyiz0/tmp2d6wyiz0.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b86147ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86144e3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b86144e3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b86144e313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b86144e2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2d6wyiz0                        0x000056012d21f68c <unavailable> + 9868

    6    libswiftCore.so                    0x00002b86144cb820 Collection.map<A>(_:)
    + 426

    7    tmp2d6wyiz0                        0x000056012d21f203 <unavailable> + 8707

    8    libswiftCore.so                    0x00002b8614604c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b8614605110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b8614603d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b8614603d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b861472965a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b8614518720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b861451870f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b8614603460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b8614603370 Sequence.sorted(by:)
    + 193

    17   tmp2d6wyiz0                        0x000056012d21f0a0 <unavailable> + 8352

    18   tmp2d6wyiz0                        0x000056012d21e754 <unavailable> + 5972

    19   libc.so.6                          0x00002b86149d8460 __libc_start_main +
    245

    20   tmp2d6wyiz0                        0x000056012d21e429 <unavailable'
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { Int(String($0))!.digits.reduce(0, +) < Int(String($1))!.digits.reduce(0,\
    \ +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptiqxnvrv.swift:12:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return nums.sorted(by: { Int(String($0))!.digits.reduce(0,\
    \ +) < Int(String($1))!.digits.reduce(0, +) })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009257
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    var arr = nums\n    var aux_arr = [Int]()\n    var sum_arr = [Int]()\n\
    \    \n    var length = nums.count\n    \n    if length == 0 {\n        return\
    \ nums\n    }\n    \n    //Create an array and get the sum of all digits\n   \
    \ for i in 0..<length {\n        var num = nums[i]\n        var sum = 0\n    \
    \    if num < 0 {\n            num = -num\n        }\n        while num > 0 {\n\
    \            var digit = num % 10\n            sum += digit\n            num =\
    \ num / 10\n        }\n        sum_arr.append(sum)\n    }\n    \n    //Sort by\
    \ sum\n    for i in 0..<length {\n        var min = i\n        for j in i+1..<length\
    \ {\n            if sum_arr[j] < sum_arr[min] {\n                min = j\n   \
    \         }\n        }\n        var temp = sum_arr[i]\n        sum_arr[i] = sum_arr[min]\n\
    \        sum_arr[min] = temp\n        \n        temp = arr[i]\n        arr[i]\
    \ = arr[min]\n        arr[min] = temp\n    }\n    \n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvdoj1mwp/tmpvdoj1mwp.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39b6ef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39b6bf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39b6bf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39b6bef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdoj1mwp                        0x000055ed65790724 <unavailable> + 5924

    5    libc.so.6                          0x00002b39b70e5460 __libc_start_main +
    245

    6    tmpvdoj1mwp                        0x000055ed65790309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        var x = $0\n        var x_sum = 0\n       \
    \ while x != 0 {\n            x_sum += x % 10\n            x /= 10\n        }\n\
    \        var y = $1\n        var y_sum = 0\n        while y != 0 {\n         \
    \   y_sum += y % 10\n            y /= 10\n        }\n        if x_sum == y_sum\
    \ {\n            return $0 < $1\n        }\n        return x_sum < y_sum\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpzepjwhfg/tmpzepjwhfg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cb19cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cb16c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cb16c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cb16c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepjwhfg                        0x000055cceb7cf4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b4cb1bba460 __libc_start_main +
    245

    6    tmpzepjwhfg                        0x000055cceb7cf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var array = nums\n    var intToSum = [Int: Int]()\n    var indexToOriginalIndex\
    \ = [Int: Int]()\n    for i in 0..<array.count {\n        var num = array[i]\n\
    \        var sum = 0\n        if (num < 0) {\n            num = num * -1\n   \
    \     }\n        while (num > 0) {\n            sum += num % 10\n            num\
    \ = num / 10\n        }\n        intToSum[array[i]] = sum\n        indexToOriginalIndex[array[i]]\
    \ = i\n    }\n    array.sort(by: { intToSum[$0]! < intToSum[$1]!})\n    array.sort(by:\
    \ { indexToOriginalIndex[$0]! < indexToOriginalIndex[$1]!})\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp5q_v40ma/tmp5q_v40ma.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f1d182c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f1ce79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f1ce79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f1ce787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5q_v40ma                        0x00005572b70cd7c4 <unavailable> + 6084

    5    libc.so.6                          0x00002b4f1d36e460 __libc_start_main +
    245

    6    tmp5q_v40ma                        0x00005572b70cd3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { first, second in\n        sum_of_digits(num: first)\
    \ < sum_of_digits(num: second)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp04rsy0o1.swift:13:9: error: cannot find 'sum_of_digits' in scope\n\
    \        sum_of_digits(num: first) < sum_of_digits(num: second)\n        ^~~~~~~~~~~~~\n\
    /tmp/tmp04rsy0o1.swift:13:37: error: cannot find 'sum_of_digits' in scope\n  \
    \      sum_of_digits(num: first) < sum_of_digits(num: second)\n              \
    \                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (lhs, rhs) -> Bool in\n        return sumOfDigits(value:\
    \ lhs) < sumOfDigits(value: rhs)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3l4vz2hw.swift:13:16: error: cannot find 'sumOfDigits' in scope\n\
    \        return sumOfDigits(value: lhs) < sumOfDigits(value: rhs)\n          \
    \     ^~~~~~~~~~~\n/tmp/tmp3l4vz2hw.swift:13:42: error: cannot find 'sumOfDigits'\
    \ in scope\n        return sumOfDigits(value: lhs) < sumOfDigits(value: rhs)\n\
    \                                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + $1.wholeNumberValue! }\n        let bSum = String(b).reduce(0) { $0 +\
    \ $1.wholeNumberValue! }\n        return aSum < bSum\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvnjd7isu/tmpvnjd7isu.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9362039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9361d30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9361d30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9361d3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9361d2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvnjd7isu                        0x000055a4729461f5 <unavailable> + 8693

    6    libswiftCore.so                    0x00002b9361e3f410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpvnjd7isu                        0x000055a472946023 <unavailable> + 8227

    8    libswiftCore.so                    0x00002b9361e51c90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    9    libswiftCore.so                    0x00002b9361e52110 MutableCollection<>._insertionSort(within:by:)
    + 356

    10   libswiftCore.so                    0x00002b9361e50d30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    11   libswiftCore.so                    0x00002b9361e50d15 <unavailable> + 2616597

    12   libswiftCore.so                    0x00002b9361f7665a <unavailable> + 3819098

    13   libswiftCore.so                    0x00002b9361d65720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    14   libswiftCore.so                    0x00002b9361d6570f <unavailable> + 1652495

    15   libswiftCore.so                    0x00002b9361e50460 MutableCollection<>.sort(by:)
    + 771

    16   libswiftCore.so                    0x00002b9361e50370 Sequence.sorted(by:)
    + 193

    17   tmpvnjd7isu                        0x000055a472945f50 <unavailable> + 8016

    18   tmpvnjd7isu                        0x000055a472945604 <unavailable> + 5636

    19   libc.so.6                          0x00002b9362225460 __libc_start_main +
    245

    20   tmpvnjd7isu                        0x000055a4729452d9 <unavaila'
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return nums.sorted {\n    sumDigits(i: $0) < sumDigits(i: $1)\n  }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwpeorp4y.swift:13:5: error: cannot find 'sumDigits' in scope\n\
    \    sumDigits(i: $0) < sumDigits(i: $1)\n    ^~~~~~~~~\n/tmp/tmpwpeorp4y.swift:13:24:\
    \ error: cannot find 'sumDigits' in scope\n    sumDigits(i: $0) < sumDigits(i:\
    \ $1)\n                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { lhs, rhs in\n        lhs.digitSum() < rhs.digitSum()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvypfhqbu.swift:13:13: error: value of type 'Int' has no member\
    \ 'digitSum'\n        lhs.digitSum() < rhs.digitSum()\n        ~~~ ^~~~~~~~\n\
    /tmp/tmpvypfhqbu.swift:13:30: error: value of type 'Int' has no member 'digitSum'\n\
    \        lhs.digitSum() < rhs.digitSum()\n                         ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var dict = [Int: [Int]]()\n    for num in nums\
    \ {\n        let sum = get_sum_of_digits(num: num)\n        if dict[sum] == nil\
    \ {\n            dict[sum] = [num]\n        } else {\n            dict[sum]?.append(num)\n\
    \        }\n    }\n    for i in nums {\n        let sum = get_sum_of_digits(num:\
    \ i)\n        if dict[sum] != nil {\n            if let array = dict[sum] {\n\
    \                for elem in array {\n                    result.append(elem)\n\
    \                }\n            }\n            dict[sum] = nil\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptllbvn17.swift:15:19: error: cannot find 'get_sum_of_digits' in\
    \ scope\n        let sum = get_sum_of_digits(num: num)\n                  ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmptllbvn17.swift:23:19: error: cannot find 'get_sum_of_digits' in scope\n\
    \        let sum = get_sum_of_digits(num: i)\n                  ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        return sum_of_digits(a)\
    \ < sum_of_digits(b)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpswb6yx2b.swift:13:16: error: cannot find 'sum_of_digits' in scope\n\
    \        return sum_of_digits(a) < sum_of_digits(b)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpswb6yx2b.swift:13:35: error: cannot find 'sum_of_digits' in scope\n  \
    \      return sum_of_digits(a) < sum_of_digits(b)\n                          \
    \        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsWithPoints = nums.map { (num: Int) -> (Int, Int) in\n        var\
    \ absNum = abs(num)\n        var sum = 0\n        while absNum > 0 {\n       \
    \     sum += absNum % 10\n            absNum /= 10\n        }\n        return\
    \ (num, sum)\n    }\n    return numsWithPoints.sorted { $0.1 < $1.1 }.map { $0.0\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpsbutigha/tmpsbutigha.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab743cf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7439ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7439ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7439eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsbutigha                        0x00005648eb128684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab743ee1460 __libc_start_main +
    245

    6    tmpsbutigha                        0x00005648eb128269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums = nums\n    nums.sort {\n        if $0.digits.reduce(0, +) == $1.digits.reduce(0,\
    \ +) {\n            return $0 < $1\n        }\n        return $0.digits.reduce(0,\
    \ +) < $1.digits.reduce(0, +)\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwyl7lipj.swift:13:5: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    nums.sort {\n    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009244
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (first, second) -> Bool in\n        if sum_of_digits(num:\
    \ first) == sum_of_digits(num: second) {\n            return first < second\n\
    \        }\n        return sum_of_digits(num: first) < sum_of_digits(num: second)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqwcl1gkj.swift:13:12: error: cannot find 'sum_of_digits' in scope\n\
    \        if sum_of_digits(num: first) == sum_of_digits(num: second) {\n      \
    \     ^~~~~~~~~~~~~\n/tmp/tmpqwcl1gkj.swift:13:41: error: cannot find 'sum_of_digits'\
    \ in scope\n        if sum_of_digits(num: first) == sum_of_digits(num: second)\
    \ {\n                                        ^~~~~~~~~~~~~\n/tmp/tmpqwcl1gkj.swift:16:16:\
    \ error: cannot find 'sum_of_digits' in scope\n        return sum_of_digits(num:\
    \ first) < sum_of_digits(num: second)\n               ^~~~~~~~~~~~~\n/tmp/tmpqwcl1gkj.swift:16:44:\
    \ error: cannot find 'sum_of_digits' in scope\n        return sum_of_digits(num:\
    \ first) < sum_of_digits(num: second)\n                                      \
    \     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let result = nums.enumerated().sorted { (i1, i2) -> Bool in\n        let\
    \ (v1, _) = i1\n        let (v2, _) = i2\n        return sum_of_digits(of: v1)\
    \ < sum_of_digits(of: v2)\n    }\n    return result.map { $0.element }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp818_xqu.swift:15:16: error: cannot find 'sum_of_digits' in scope\n\
    \        return sum_of_digits(of: v1) < sum_of_digits(of: v2)\n              \
    \ ^~~~~~~~~~~~~\n/tmp/tmpp818_xqu.swift:15:40: error: cannot find 'sum_of_digits'\
    \ in scope\n        return sum_of_digits(of: v1) < sum_of_digits(of: v2)\n   \
    \                                    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (a, b) -> Bool in\n        a.sumDigits() < b.sumDigits()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4y4vdxo7.swift:13:11: error: value of type 'Int' has no member\
    \ 'sumDigits'\n        a.sumDigits() < b.sumDigits()\n        ~ ^~~~~~~~~\n/tmp/tmp4y4vdxo7.swift:13:27:\
    \ error: value of type 'Int' has no member 'sumDigits'\n        a.sumDigits()\
    \ < b.sumDigits()\n                        ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    \n    var numbers = [(number: Int, sum: Int)]()\n    \n    for (index, i)\
    \ in nums.enumerated() {\n        var sum = 0\n        var num = i\n        while\
    \ num != 0 {\n            sum += num % 10\n            num /= 10\n        }\n\
    \        numbers.append((i, sum))\n    }\n    \n    numbers.sort(by: { $0.sum\
    \ == $1.sum ? $0.number < $1.number : $0.sum < $1.sum })\n    \n    return numbers.map\
    \ { $0.number }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp70br2oks/tmp70br2oks.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f81e42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f81b39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f81b39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f81b387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70br2oks                        0x000055b9228ac8c4 <unavailable> + 6340

    5    libc.so.6                          0x00002b6f8202e460 __libc_start_main +
    245

    6    tmp70br2oks                        0x000055b9228ac4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let nums_with_sum_of_digits = nums.map { ($0, sum_of_digits(n: $0)) }\n \
    \   let sorted_nums_with_sum_of_digits = nums_with_sum_of_digits.sorted {\n  \
    \      (left, right) in\n        if left.1 != right.1 {\n            return left.1\
    \ < right.1\n        } else {\n            return left.0 < right.0\n        }\n\
    \    }\n    return sorted_nums_with_sum_of_digits.map { $0.0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbfvsqykg.swift:12:51: error: cannot find 'sum_of_digits' in scope\n\
    \    let nums_with_sum_of_digits = nums.map { ($0, sum_of_digits(n: $0)) }\n \
    \                                                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { lhs, rhs in\n        lhs.digitSum() < rhs.digitSum()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvypfhqbu.swift:13:13: error: value of type 'Int' has no member\
    \ 'digitSum'\n        lhs.digitSum() < rhs.digitSum()\n        ~~~ ^~~~~~~~\n\
    /tmp/tmpvypfhqbu.swift:13:30: error: value of type 'Int' has no member 'digitSum'\n\
    \        lhs.digitSum() < rhs.digitSum()\n                         ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \  return nums.sorted(by: { (lhs, rhs) -> Bool in\n    return lhs.digitsSum()\
    \ < rhs.digitsSum()\n  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp06upjmlf.swift:13:16: error: value of type 'Int' has no member\
    \ 'digitsSum'\n    return lhs.digitsSum() < rhs.digitsSum()\n           ~~~ ^~~~~~~~~\n\
    /tmp/tmp06upjmlf.swift:13:34: error: value of type 'Int' has no member 'digitsSum'\n\
    \    return lhs.digitsSum() < rhs.digitsSum()\n                             ~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let sumOfDigits: (Int) -> Int = {\n        var num = $0\n        var sum\
    \ = 0\n        while num != 0 {\n            sum += num % 10\n            num\
    \ /= 10\n        }\n        return sum\n    }\n    return nums.sorted { a, b in\n\
    \        let aSum = sumOfDigits(a)\n        let bSum = sumOfDigits(b)\n      \
    \  if aSum == bSum {\n            return a < b\n        }\n        return aSum\
    \ < bSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmplyu7bso3/tmplyu7bso3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4532cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf45023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf45023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf450227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyu7bso3                        0x000055d2c18aa4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002adf45518460 __libc_start_main +
    245

    6    tmplyu7bso3                        0x000055d2c18aa0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted {\n        let sumDigits = { (n: Int) -> Int in\n    \
    \        return n.digits.reduce(0, +)\n        }\n        let sum0 = sumDigits($0)\n\
    \        let sum1 = sumDigits($1)\n        if sum0 == sum1 {\n            return\
    \ nums.firstIndex(of: $0)! < nums.firstIndex(of: $1)!\n        }\n        return\
    \ sum0 < sum1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1gr7lna6.swift:14:22: error: value of type 'Int' has no member\
    \ 'digits'\n            return n.digits.reduce(0, +)\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var dict = [Int: [Int]]()\n    for n in nums {\n        let key = n.digits.reduce(0,\
    \ +)\n        if var array = dict[key] {\n            array.append(n)\n      \
    \      dict[key] = array\n        } else {\n            dict[key] = [n]\n    \
    \    }\n    }\n    let sortedDict = dict.sorted { $0.key < $1.key }\n    return\
    \ sortedDict.reduce([Int](), { $0 + $1.value })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkysfg0iq.swift:14:21: error: value of type 'Int' has no member\
    \ 'digits'\n        let key = n.digits.reduce(0, +)\n                  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: {sumOfDigits(number: $0) < sumOfDigits(number: $1)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdrih1_ae.swift:12:29: error: cannot find 'sumOfDigits' in scope\n\
    \    return nums.sorted(by: {sumOfDigits(number: $0) < sumOfDigits(number: $1)})\n\
    \                            ^~~~~~~~~~~\n/tmp/tmpdrih1_ae.swift:12:55: error:\
    \ cannot find 'sumOfDigits' in scope\n    return nums.sorted(by: {sumOfDigits(number:\
    \ $0) < sumOfDigits(number: $1)})\n                                          \
    \            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { num1, num2 in\n        let num1Digits = digits(num:\
    \ num1)\n        let num2Digits = digits(num: num2)\n        return sum(of: num1Digits)\
    \ < sum(of: num2Digits)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpltpc0a4z.swift:13:26: error: cannot find 'digits' in scope\n  \
    \      let num1Digits = digits(num: num1)\n                         ^~~~~~\n/tmp/tmpltpc0a4z.swift:14:26:\
    \ error: cannot find 'digits' in scope\n        let num2Digits = digits(num: num2)\n\
    \                         ^~~~~~\n/tmp/tmpltpc0a4z.swift:15:16: error: cannot\
    \ find 'sum' in scope\n        return sum(of: num1Digits) < sum(of: num2Digits)\n\
    \               ^~~\n/tmp/tmpltpc0a4z.swift:15:38: error: cannot find 'sum' in\
    \ scope\n        return sum(of: num1Digits) < sum(of: num2Digits)\n          \
    \                           ^~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmcaqujxb.swift:12:30: error: cannot find 'sum_of_digits' in scope\n\
    \    return nums.sorted(by: { sum_of_digits(num: $0) < sum_of_digits(num: $1)\
    \ })\n                             ^~~~~~~~~~~~~\n/tmp/tmpmcaqujxb.swift:12:55:\
    \ error: cannot find 'sum_of_digits' in scope\n    return nums.sorted(by: { sum_of_digits(num:\
    \ $0) < sum_of_digits(num: $1) })\n                                          \
    \            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return []\n    }\n    return nums.sorted(by: {\
    \ (first: Int, second: Int) -> Bool in\n        let firstSum = first.digits.reduce(0,\
    \ +)\n        let secondSum = second.digits.reduce(0, +)\n        if firstSum\
    \ == secondSum {\n            return nums.firstIndex(of: first)! < nums.firstIndex(of:\
    \ second)!\n        }\n        return firstSum < secondSum\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpc92atxjq.swift:16:30: error: value of type 'Int' has no member\
    \ 'digits'\n        let firstSum = first.digits.reduce(0, +)\n               \
    \        ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var nums: [Int] = nums\n    nums.sort {\n        if $0.sum_of_digits() ==\
    \ $1.sum_of_digits() {\n            return $0 < $1\n        }\n        return\
    \ $0.sum_of_digits() < $1.sum_of_digits()\n    }\n    return nums\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvioyd160.swift:14:15: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n        if $0.sum_of_digits() == $1.sum_of_digits() {\n   \
    \        ~~ ^~~~~~~~~~~~~\n/tmp/tmpvioyd160.swift:14:37: error: value of type\
    \ 'Int' has no member 'sum_of_digits'\n        if $0.sum_of_digits() == $1.sum_of_digits()\
    \ {\n                                 ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (item1, item2) -> Bool in\n        var item1Sum\
    \ = 0\n        var item2Sum = 0\n        for item in String(item1).unicodeScalars\
    \ {\n            item1Sum += Int(item.value) - 48\n        }\n        for item\
    \ in String(item2).unicodeScalars {\n            item2Sum += Int(item.value) -\
    \ 48\n        }\n        return item1Sum < item2Sum\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpxuwwz0wm/tmpxuwwz0wm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac852333c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac85202ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac85202a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8520297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxuwwz0wm                        0x000056344b627854 <unavailable> + 6228

    5    libc.so.6                          0x00002ac85251f460 __libc_start_main +
    245

    6    tmpxuwwz0wm                        0x000056344b627439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted { (x, y) -> Bool in\n        let xSum = sum_of_digits(num:\
    \ x)\n        let ySum = sum_of_digits(num: y)\n        if xSum == ySum {\n  \
    \          return nums.firstIndex(of: x)! < nums.firstIndex(of: y)!\n        }\n\
    \        return xSum < ySum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp5qfvjov3.swift:13:20: error: cannot find 'sum_of_digits' in scope\n\
    \        let xSum = sum_of_digits(num: x)\n                   ^~~~~~~~~~~~~\n\
    /tmp/tmp5qfvjov3.swift:14:20: error: cannot find 'sum_of_digits' in scope\n  \
    \      let ySum = sum_of_digits(num: y)\n                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Write a function which sorts the given array of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result: [Int] = []\n    var nums = nums\n    let numsCount = nums.count\n\
    \    for _ in 0..<numsCount {\n        var maxSumDigits: Int = 0\n        var\
    \ index: Int = 0\n        for i in 0..<nums.count {\n            let sum = Int(String(nums[i]).map({Int(String($0))!}).reduce(0,\
    \ +))\n            if sum > maxSumDigits {\n                maxSumDigits = sum\n\
    \                index = i\n            }\n        }\n        result.append(nums[index])\n\
    \        nums.remove(at: index)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpen6878hf/tmpen6878hf.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b94ae0bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94addb3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b94addb3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b94addb313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b94addb2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpen6878hf                        0x00005566f85bba41 <unavailable> + 10817

    6    libswiftCore.so                    0x00002b94add9b820 Collection.map<A>(_:)
    + 426

    7    tmpen6878hf                        0x00005566f85bb6a1 <unavailable> + 9889

    8    tmpen6878hf                        0x00005566f85ba9e4 <unavailable> + 6628

    9    libc.so.6                          0x00002b94ae2a8460 __libc_start_main +
    245

    10   tmpen6878hf                        0x00005566f85ba6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660009189
