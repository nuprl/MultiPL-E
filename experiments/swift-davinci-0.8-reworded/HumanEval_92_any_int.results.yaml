language: swift
name: HumanEval_92_any_int
results:
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) + Int(y)\
    \ == Int(z) || Int(x) + Int(z) == Int(y) || Int(y) + Int(z) == Int(x)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpol6wpezh/tmpol6wpezh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27c3633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27c332ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27c332a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27c33297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpol6wpezh                        0x000055e108ab072d <unavailable> + 5933

    5    libc.so.6                          0x00002b27c381f460 __libc_start_main +
    245

    6    tmpol6wpezh                        0x000055e108aafef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        return (x == y + z || y == x + z || z == x + y)\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp995orq0i/tmp995orq0i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadde06ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadddd65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadddd65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadddd647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp995orq0i                        0x0000559907c8877d <unavailable> + 6013

    5    libc.so.6                          0x00002aadde25a460 __libc_start_main +
    245

    6    tmp995orq0i                        0x0000559907c87f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x == y +\
    \ z) || (y == x + z) || (z == x + y)) && (floor(x) == x) && (floor(y) == y) &&\
    \ (floor(z) == z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8iq0bucu.swift:15:63: error: cannot find 'floor' in scope\n   \
    \ return ((x == y + z) || (y == x + z) || (z == x + y)) && (floor(x) == x) &&\
    \ (floor(y) == y) && (floor(z) == z)\n                                       \
    \                       ^~~~~\n/tmp/tmp8iq0bucu.swift:15:82: error: cannot find\
    \ 'floor' in scope\n    return ((x == y + z) || (y == x + z) || (z == x + y))\
    \ && (floor(x) == x) && (floor(y) == y) && (floor(z) == z)\n                 \
    \                                                                ^~~~~\n/tmp/tmp8iq0bucu.swift:15:101:\
    \ error: cannot find 'floor' in scope\n    return ((x == y + z) || (y == x + z)\
    \ || (z == x + y)) && (floor(x) == x) && (floor(y) == y) && (floor(z) == z)\n\
    \                                                                            \
    \                        ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let (x, y, z) = (Int(x),\
    \ Int(y), Int(z))\n    return x + y == z || x + z == y || y + z == x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqiwza3o4/tmpqiwza3o4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23afe1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23afb11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23afb11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23afb107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqiwza3o4                        0x00005646877d772d <unavailable> + 5933

    5    libc.so.6                          0x00002b23b0006460 __libc_start_main +
    245

    6    tmpqiwza3o4                        0x00005646877d6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x == y +\
    \ z) || (y == x + z) || (z == x + y)) && (x.truncatingRemainder(dividingBy: 1)\
    \ == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpiupzgg2e/tmpiupzgg2e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d08fb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d08caeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d08cae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d08cad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiupzgg2e                        0x000055c3273c377d <unavailable> + 6013

    5    libc.so.6                          0x00002b3d091a3460 __libc_start_main +
    245

    6    tmpiupzgg2e                        0x000055c3273c2f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpi12keeyb/tmpi12keeyb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16b0debc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16b0ae2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16b0ae2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16b0ae17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi12keeyb                        0x000055c4c718f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b16b0fd7460 __libc_start_main +
    245

    6    tmpi12keeyb                        0x000055c4c718ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if  !(x - Double(Int(x))).isZero\
    \ && !(y - Double(Int(y))).isZero && !(z - Double(Int(z))).isZero{\n        return\
    \ false\n    }\n    return (x + y == z) || (x + z == y) || (y + z == x)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpxr3x4gxs/tmpxr3x4gxs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38abb50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38ab847b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38ab847988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38ab8467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr3x4gxs                        0x00005586cf95b3b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b38abd3c460 __libc_start_main +
    245

    6    tmpxr3x4gxs                        0x00005586cf95af49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Int(x) +\
    \ Int(y) == Int(z)) || (Int(x) + Int(z) == Int(y)) || (Int(y) + Int(z) == Int(x))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7lq_v6d8/tmp7lq_v6d8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6357bafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63578a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63578a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63578a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lq_v6d8                        0x000056257c70072d <unavailable> + 5933

    5    libc.so.6                          0x00002b6357d9b460 __libc_start_main +
    245

    6    tmp7lq_v6d8                        0x000056257c6ffef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (Double(Int(x))\
    \ == x && Double(Int(y)) == y && Double(Int(z)) == z) {\n        if (x + y ==\
    \ z || x + z == y || y + z == x) {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpd5ld9iwz/tmpd5ld9iwz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28022dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2801fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2801fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2801fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5ld9iwz                        0x000055782df2672d <unavailable> + 5933

    5    libc.so.6                          0x00002b28024cb460 __libc_start_main +
    245

    6    tmpd5ld9iwz                        0x000055782df25ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    return ((floor(x) == x) && (floor(y) == y) && (floor(z) == z))\n    \
    \    && ((x == sum - y - z) || (y == sum - x - z) || (z == sum - x - y))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7dl8ol4p.swift:16:14: error: cannot find 'floor' in scope\n   \
    \ return ((floor(x) == x) && (floor(y) == y) && (floor(z) == z))\n           \
    \  ^~~~~\n/tmp/tmp7dl8ol4p.swift:16:33: error: cannot find 'floor' in scope\n\
    \    return ((floor(x) == x) && (floor(y) == y) && (floor(z) == z))\n        \
    \                        ^~~~~\n/tmp/tmp7dl8ol4p.swift:16:52: error: cannot find\
    \ 'floor' in scope\n    return ((floor(x) == x) && (floor(y) == y) && (floor(z)\
    \ == z))\n                                                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\
    \ || x + z == y || y + z == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkgmncsu4/tmpkgmncsu4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39bd93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac39ba8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac39ba8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac39ba897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgmncsu4                        0x000055e027be12d6 <unavailable> + 4822

    5    libc.so.6                          0x00002ac39bf7f460 __libc_start_main +
    245

    6    tmpkgmncsu4                        0x000055e027be0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let summ: Double\
    \ = x + y + z\n    if (summ).truncatingRemainder(dividingBy: 1) == 0 {\n     \
    \   return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp22zlwj_b/tmp22zlwj_b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba7261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba6f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba6f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba6f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp22zlwj_b                        0x00005563c443d3b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b4ba744d460 __libc_start_main +
    245

    6    tmp22zlwj_b                        0x00005563c443cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n    if y.truncatingRemainder(dividingBy: 1) == 0 {\n      if z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return (x + y == z) || (x + z == y) || (y + z == x)\n   \
    \   }\n    }\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpbccoo0bo/tmpbccoo0bo.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b425319bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4252e92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4252e92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4252e917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbccoo0bo                        0x000055b6916d977d <unavailable> + 6013

    5    libc.so.6                          0x00002b4253387460 __libc_start_main +
    245

    6    tmpbccoo0bo                        0x000055b6916d8f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && floor(x) == x && floor(y) == y && floor(z)\
    \ == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ljz76qu.swift:15:56: error: cannot find 'floor' in scope\n   \
    \ return (x + y == z || x + z == y || y + z == x) && floor(x) == x && floor(y)\
    \ == y && floor(z) == z\n                                                    \
    \   ^~~~~\n/tmp/tmp1ljz76qu.swift:15:73: error: cannot find 'floor' in scope\n\
    \    return (x + y == z || x + z == y || y + z == x) && floor(x) == x && floor(y)\
    \ == y && floor(z) == z\n                                                    \
    \                    ^~~~~\n/tmp/tmp1ljz76qu.swift:15:90: error: cannot find 'floor'\
    \ in scope\n    return (x + y == z || x + z == y || y + z == x) && floor(x) ==\
    \ x && floor(y) == y && floor(z) == z\n                                      \
    \                                                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (Int(x) == Int(y\
    \ + z)) || (Int(y) == Int(x + z)) || (Int(z) == Int(x + y)) {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpw98y01q4/tmpw98y01q4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49bb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49bb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49bb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49bb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw98y01q4                        0x000055f0e6f14366 <unavailable> + 4966

    5    libc.so.6                          0x00002b49bb92b460 __libc_start_main +
    245

    6    tmpw98y01q4                        0x000055f0e6f13ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  // YOUR CODE GOES HERE\n\
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpxf9lr5_z/tmpxf9lr5_z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d2ad05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d2a9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d2a9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d2a9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxf9lr5_z                        0x00005639619fa1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b4d2aef1460 __libc_start_main +
    245

    6    tmpxf9lr5_z                        0x00005639619f9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (floor(x)\
    \ == x && floor(y) == y && floor(z) == z) &&\n        ((x + y == z) || (x + z\
    \ == y) || (y + z == x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvs4fogi1.swift:15:13: error: cannot find 'floor' in scope\n   \
    \ return (floor(x) == x && floor(y) == y && floor(z) == z) &&\n            ^~~~~\n\
    /tmp/tmpvs4fogi1.swift:15:30: error: cannot find 'floor' in scope\n    return\
    \ (floor(x) == x && floor(y) == y && floor(z) == z) &&\n                     \
    \        ^~~~~\n/tmp/tmpvs4fogi1.swift:15:47: error: cannot find 'floor' in scope\n\
    \    return (floor(x) == x && floor(y) == y && floor(z) == z) &&\n           \
    \                                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (floor(x)\
    \ == x && floor(y) == y && floor(z) == z) && ((x + y == z) || (x + z == y) ||\
    \ (y + z == x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2uz6st20.swift:15:13: error: cannot find 'floor' in scope\n   \
    \ return (floor(x) == x && floor(y) == y && floor(z) == z) && ((x + y == z) ||\
    \ (x + z == y) || (y + z == x))\n            ^~~~~\n/tmp/tmp2uz6st20.swift:15:30:\
    \ error: cannot find 'floor' in scope\n    return (floor(x) == x && floor(y) ==\
    \ y && floor(z) == z) && ((x + y == z) || (x + z == y) || (y + z == x))\n    \
    \                         ^~~~~\n/tmp/tmp2uz6st20.swift:15:47: error: cannot find\
    \ 'floor' in scope\n    return (floor(x) == x && floor(y) == y && floor(z) ==\
    \ z) && ((x + y == z) || (x + z == y) || (y + z == x))\n                     \
    \                         ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x - y == z ||\
    \ y - x == z || x - z == y || z - x == y || y - z == x || z - y == x) && x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpezq04tpj/tmpezq04tpj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f95f5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f95c52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f95c52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f95c517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezq04tpj                        0x000055cccf8d077d <unavailable> + 6013

    5    libc.so.6                          0x00002b5f96147460 __libc_start_main +
    245

    6    tmpezq04tpj                        0x000055cccf8cff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((Int(x) ==\
    \ (Int(y) + Int(z))) || (Int(y) == (Int(x) + Int(z))) || (Int(z) == (Int(x) +\
    \ Int(y))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpvad2adnx/tmpvad2adnx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafbc0d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafbbdcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafbbdca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafbbdc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvad2adnx                        0x0000564405de172d <unavailable> + 5933

    5    libc.so.6                          0x00002aafbc2bf460 __libc_start_main +
    245

    6    tmpvad2adnx                        0x0000564405de0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var test_1 = Int(x)\
    \ == Int(y) + Int(z)\n    var test_2 = Int(y) == Int(x) + Int(z)\n    var test_3\
    \ = Int(z) == Int(x) + Int(y)\n    return test_1 || test_2 || test_3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp4h4dbcc0/tmp4h4dbcc0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b048347ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0483171b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0483171988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04831707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4h4dbcc0                        0x000056473fffa72d <unavailable> + 5933

    5    libc.so.6                          0x00002b0483666460 __libc_start_main +
    245

    6    tmp4h4dbcc0                        0x000056473fff9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result = false\n\
    \    if x == y + z || y == x + z || z == x + y {\n        result = true\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp_mcg3oq8/tmp_mcg3oq8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1360994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b136068bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b136068b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b136068a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mcg3oq8                        0x00005555f1ca12d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b1360b80460 __libc_start_main +
    245

    6    tmp_mcg3oq8                        0x00005555f1ca0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == y + z\
    \ || y == x + z || z == x + y) && (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu8ja0t59.swift:15:57: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n  return (x == y + z || y == x + z\
    \ || z == x + y) && (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n               \
    \                                         ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmpu8ja0t59.swift:15:71: error:\
    \ '%' is unavailable: For floating point numbers use truncatingRemainder instead\n\
    \  return (x == y + z || y == x + z || z == x + y) && (x % 1 == 0 && y % 1 ==\
    \ 0 && z % 1 == 0)\n                                                         \
    \             ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpu8ja0t59.swift:15:85: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n  return (x == y + z || y ==\
    \ x + z || z == x + y) && (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n         \
    \                                                                           ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == Int(x)\
    \ && y == Int(y) && z == Int(z)) && ((x + y == z) || (x + z == y) || (y + z ==\
    \ x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4vukdbyt.swift:15:13: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return (x == Int(x) && y == Int(y) && z\
    \ == Int(z)) && ((x + y == z) || (x + z == y) || (y + z == x))\n            ^\n\
    \            Int( )\n/tmp/tmp4vukdbyt.swift:15:28: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n    return (x == Int(x) &&\
    \ y == Int(y) && z == Int(z)) && ((x + y == z) || (x + z == y) || (y + z == x))\n\
    \                           ^\n                           Int( )\n/tmp/tmp4vukdbyt.swift:15:43:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return (x == Int(x) && y == Int(y) && z == Int(z)) && ((x + y == z) || (x\
    \ + z == y) || (y + z == x))\n                                          ^\n  \
    \                                        Int( )\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        return ((x + y == z) || (x + z == y) || (y + z == x))\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkhvb8447/tmpkhvb8447.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cf7dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cf7ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cf7ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cf7ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkhvb8447                        0x000056084da3c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b0cf7fa8460 __libc_start_main +
    245

    6    tmpkhvb8447                        0x000056084da3bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if x == y + z || y == x + z || z == x + y {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp2wcqlqtd/tmp2wcqlqtd.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f19d14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f19a0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f19a0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f19a0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wcqlqtd                        0x00005647a033577d <unavailable> + 6013

    5    libc.so.6                          0x00002b2f19f00460 __libc_start_main +
    245

    6    tmp2wcqlqtd                        0x00005647a0334f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z) || (x + z == y) || (y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpd4s2ewo8/tmpd4s2ewo8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd7ac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd77b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd77b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd77b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4s2ewo8                        0x000055ddcfa682d6 <unavailable> + 4822

    5    libc.so.6                          0x00002abdd7cad460 __libc_start_main +
    245

    6    tmpd4s2ewo8                        0x000055ddcfa67e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == (y + z) &&\
    \ z == (x + y) && y == (x + z) {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpc5prkh29/tmpc5prkh29.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59dde84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ddb7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ddb7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ddb7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5prkh29                        0x0000562a5fbaa1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b59de070460 __libc_start_main +
    245

    6    tmpc5prkh29                        0x0000562a5fba9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return [x, y, z].allSatisfy({\
    \ $0.isInteger }) && [x, y, z].sorted().doesSumToDouble(x + y + z)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp171vxdms.swift:15:38: error: value of type 'Double' has no member\
    \ 'isInteger'\n    return [x, y, z].allSatisfy({ $0.isInteger }) && [x, y, z].sorted().doesSumToDouble(x\
    \ + y + z)\n                                  ~~ ^~~~~~~~~\n/tmp/tmp171vxdms.swift:15:73:\
    \ error: value of type '[Double]' has no member 'doesSumToDouble'\n    return\
    \ [x, y, z].allSatisfy({ $0.isInteger }) && [x, y, z].sorted().doesSumToDouble(x\
    \ + y + z)\n                                                     ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (x == y + z || y == x + z || z == x + y)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp1kfnko6u/tmp1kfnko6u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada58460c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada58157b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada58157988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada581567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kfnko6u                        0x000055cfbb1b077d <unavailable> + 6013

    5    libc.so.6                          0x00002ada5864c460 __libc_start_main +
    245

    6    tmp1kfnko6u                        0x000055cfbb1aff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\
    \ || x + z == y || y + z == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkgmncsu4/tmpkgmncsu4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39bd93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac39ba8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac39ba8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac39ba897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgmncsu4                        0x000055e027be12d6 <unavailable> + 4822

    5    libc.so.6                          0x00002ac39bf7f460 __libc_start_main +
    245

    6    tmpkgmncsu4                        0x000055e027be0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    \n    //return ((x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0)) && ( (x == y + z) || (y == x + z) || (z == x + y) )\n    \n    return\
    \ (((x % 1) == 0) && ((y % 1) == 0) && ((z % 1) == 0)) && ( (x == y + z) || (y\
    \ == x + z) || (z == x + y) )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwkrrsxw0.swift:18:17: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    return (((x % 1) == 0) && ((y %\
    \ 1) == 0) && ((z % 1) == 0)) && ( (x == y + z) || (y == x + z) || (z == x + y)\
    \ )\n                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpwkrrsxw0.swift:18:35: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    return (((x % 1) == 0) &&\
    \ ((y % 1) == 0) && ((z % 1) == 0)) && ( (x == y + z) || (y == x + z) || (z ==\
    \ x + y) )\n                                  ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmpwkrrsxw0.swift:18:53: error:\
    \ '%' is unavailable: For floating point numbers use truncatingRemainder instead\n\
    \    return (((x % 1) == 0) && ((y % 1) == 0) && ((z % 1) == 0)) && ( (x == y\
    \ + z) || (y == x + z) || (z == x + y) )\n                                   \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x % 1 != 0 ||\
    \ y % 1 != 0 || z % 1 != 0 {\n        return false\n    }\n    if x + y == z ||\
    \ x + z == y || y + z == x {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi89luxxp.swift:15:10: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if x % 1 != 0 || y % 1 != 0 ||\
    \ z % 1 != 0 {\n         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpi89luxxp.swift:15:24: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    if x % 1 != 0 || y % 1 !=\
    \ 0 || z % 1 != 0 {\n                       ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmpi89luxxp.swift:15:38: error:\
    \ '%' is unavailable: For floating point numbers use truncatingRemainder instead\n\
    \    if x % 1 != 0 || y % 1 != 0 || z % 1 != 0 {\n                           \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result = false\n\
    \    let absX = x.truncatingRemainder(dividingBy: 1)\n    let absY = y.truncatingRemainder(dividingBy:\
    \ 1)\n    let absZ = z.truncatingRemainder(dividingBy: 1)\n    if x != 0 && y\
    \ != 0 && z != 0 && (absX + absY + absZ) == 0 {\n        if (x + y == z) || (x\
    \ + z == y) || (y + z == x) {\n            result = true\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpivj00l2t/tmpivj00l2t.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbb2441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbb2138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbb2138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbb21377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivj00l2t                        0x0000560b5c42c77d <unavailable> + 6013

    5    libc.so.6                          0x00002abbb262d460 __libc_start_main +
    245

    6    tmpivj00l2t                        0x0000560b5c42bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp41h456ih/tmp41h456ih.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c2decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c2ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c2ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c2ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41h456ih                        0x0000564c7efcd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b62c2fd8460 __libc_start_main +
    245

    6    tmp41h456ih                        0x0000564c7efccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x - y ==\
    \ z) || (x - z == y) || (y - x == z) || (y - z == x) || (z - x == y) || (z - y\
    \ == x)) && (x == floor(x)) && (y == floor(y)) && (z == floor(z))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpag5y3qy_.swift:15:116: error: cannot find 'floor' in scope\n  \
    \  return ((x - y == z) || (x - z == y) || (y - x == z) || (y - z == x) || (z\
    \ - x == y) || (z - y == x)) && (x == floor(x)) && (y == floor(y)) && (z == floor(z))\n\
    \                                                                            \
    \                                       ^~~~~\n/tmp/tmpag5y3qy_.swift:15:135:\
    \ error: cannot find 'floor' in scope\n    return ((x - y == z) || (x - z == y)\
    \ || (y - x == z) || (y - z == x) || (z - x == y) || (z - y == x)) && (x == floor(x))\
    \ && (y == floor(y)) && (z == floor(z))\n                                    \
    \                                                                            \
    \                      ^~~~~\n/tmp/tmpag5y3qy_.swift:15:154: error: cannot find\
    \ 'floor' in scope\n    return ((x - y == z) || (x - z == y) || (y - x == z) ||\
    \ (y - z == x) || (z - x == y) || (z - y == x)) && (x == floor(x)) && (y == floor(y))\
    \ && (z == floor(z))\n                                                       \
    \                                                                            \
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Double(Int(x))\
    \ == x && Double(Int(y)) == y && Double(Int(z)) == z) && (x + y == z || x + z\
    \ == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpggjnelp4/tmpggjnelp4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9b808ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9b7d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9b7d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9b7d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjnelp4                        0x0000557fe1e2a72d <unavailable> + 5933

    5    libc.so.6                          0x00002ad9b827a460 __libc_start_main +
    245

    6    tmpggjnelp4                        0x0000557fe1e29ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var A = x + y\n \
    \   var B = y + z\n    var C = x + z\n    var D = A\n    if A == z {\n       \
    \ D = A\n    } else if B == x {\n        D = B\n    } else if C == y {\n     \
    \   D = C\n    }\n    if D.truncatingRemainder(dividingBy: 1) == 0 {\n       \
    \ return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp9dlzo3ts/tmp9dlzo3ts.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a5a395c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a5a08cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a5a08c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a5a08b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dlzo3ts                        0x000055aae2e513b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b3a5a581460 __libc_start_main +
    245

    6    tmp9dlzo3ts                        0x000055aae2e50f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x + y == z || x + z == y || y + z == x {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpslxb194f/tmpslxb194f.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39fa9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac39f793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac39f793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac39f7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpslxb194f                        0x00005590233e077d <unavailable> + 6013

    5    libc.so.6                          0x00002ac39fc88460 __libc_start_main +
    245

    6    tmpslxb194f                        0x00005590233dff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 && (x == y + z || y == x + z || z == x + y)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpa3iwzbrs/tmpa3iwzbrs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba45fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba42f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba42f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba42f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3iwzbrs                        0x000055a5c378277d <unavailable> + 6013

    5    libc.so.6                          0x00002afba47e7460 __libc_start_main +
    245

    6    tmpa3iwzbrs                        0x000055a5c3781f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x + y == z || x + z == y || y + z == x {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpslxb194f/tmpslxb194f.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39fa9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac39f793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac39f793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac39f7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpslxb194f                        0x00005590233e077d <unavailable> + 6013

    5    libc.so.6                          0x00002ac39fc88460 __libc_start_main +
    245

    6    tmpslxb194f                        0x00005590233dff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp41h456ih/tmp41h456ih.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c2decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c2ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c2ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c2ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41h456ih                        0x0000564c7efcd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b62c2fd8460 __libc_start_main +
    245

    6    tmp41h456ih                        0x0000564c7efccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  let sum = x + y + z\n\
    \  if sum.truncatingRemainder(dividingBy: 1) == 0 {\n    return true\n  } else\
    \ {\n    return false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp075byc9o/tmp075byc9o.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09c35bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09c32b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09c32b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09c32b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp075byc9o                        0x000055fcf90cb3b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b09c37a9460 __libc_start_main +
    245

    6    tmp075byc9o                        0x000055fcf90caf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x+y == z\
    \ || x+z == y || y+z == x) && x == Double(Int(x)) && y == Double(Int(y)) && z\
    \ == Double(Int(z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpjboyf_66/tmpjboyf_66.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04f01f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04efeedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04efeed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04efeec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjboyf_66                        0x000055e8f5a1472d <unavailable> + 5933

    5    libc.so.6                          0x00002b04f03e2460 __libc_start_main +
    245

    6    tmpjboyf_66                        0x000055e8f5a13ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && ((x + y == z) || (x + z == y) || (y + z == x))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpeqwe_sha/tmpeqwe_sha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f053ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f050c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f050c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f050c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqwe_sha                        0x000055ab3ea5877d <unavailable> + 6013

    5    libc.so.6                          0x00002b4f055b8460 __libc_start_main +
    245

    6    tmpeqwe_sha                        0x000055ab3ea57f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x + y == z) &&\
    \ (floor(x) == x) && (floor(y) == y) && (floor(z) == z) {\n        return true\n\
    \    } else if (x + z == y) && (floor(x) == x) && (floor(y) == y) && (floor(z)\
    \ == z) {\n        return true\n    } else if (y + z == x) && (floor(x) == x)\
    \ && (floor(y) == y) && (floor(z) == z) {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgdrzzs4e.swift:15:25: error: cannot find 'floor' in scope\n   \
    \ if (x + y == z) && (floor(x) == x) && (floor(y) == y) && (floor(z) == z) {\n\
    \                        ^~~~~\n/tmp/tmpgdrzzs4e.swift:15:44: error: cannot find\
    \ 'floor' in scope\n    if (x + y == z) && (floor(x) == x) && (floor(y) == y)\
    \ && (floor(z) == z) {\n                                           ^~~~~\n/tmp/tmpgdrzzs4e.swift:15:63:\
    \ error: cannot find 'floor' in scope\n    if (x + y == z) && (floor(x) == x)\
    \ && (floor(y) == y) && (floor(z) == z) {\n                                  \
    \                            ^~~~~\n/tmp/tmpgdrzzs4e.swift:17:32: error: cannot\
    \ find 'floor' in scope\n    } else if (x + z == y) && (floor(x) == x) && (floor(y)\
    \ == y) && (floor(z) == z) {\n                               ^~~~~\n/tmp/tmpgdrzzs4e.swift:17:51:\
    \ error: cannot find 'floor' in scope\n    } else if (x + z == y) && (floor(x)\
    \ == x) && (floor(y) == y) && (floor(z) == z) {\n                            \
    \                      ^~~~~\n/tmp/tmpgdrzzs4e.swift:17:70: error: cannot find\
    \ 'floor' in scope\n    } else if (x + z == y) && (floor(x) == x) && (floor(y)\
    \ == y) && (floor(z) == z) {\n                                               \
    \                      ^~~~~\n/tmp/tmpgdrzzs4e.swift:19:32: error: cannot find\
    \ 'floor' in scope\n    } else if (y + z == x) && (floor(x) == x) && (floor(y)\
    \ == y) && (floor(z) == z) {\n                               ^~~~~\n/tmp/tmpgdrzzs4e.swift:19:51:\
    \ error: cannot find 'floor' in scope\n    } else if (y + z == x) && (floor(x)\
    \ == x) && (floor(y) == y) && (floor(z) == z) {\n                            \
    \                      ^~~~~\n/tmp/tmpgdrzzs4e.swift:19:70: error: cannot find\
    \ 'floor' in scope\n    } else if (y + z == x) && (floor(x) == x) && (floor(y)\
    \ == y) && (floor(z) == z) {\n                                               \
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpoey0541y/tmpoey0541y.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de7a95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de778cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de778c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de778b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoey0541y                        0x0000564c4e97177d <unavailable> + 6013

    5    libc.so.6                          0x00002b6de7c81460 __libc_start_main +
    245

    6    tmpoey0541y                        0x0000564c4e970f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x == (y + z))\
    \ && (x - floor(x) == 0) && (y - floor(y) == 0) && (z - floor(z) == 0) {\n   \
    \     return true\n    } else if (y == (x + z)) && (x - floor(x) == 0) && (y -\
    \ floor(y) == 0) && (z - floor(z) == 0) {\n        return true\n    } else if\
    \ (z == (x + y)) && (x - floor(x) == 0) && (y - floor(y) == 0) && (z - floor(z)\
    \ == 0) {\n        return true\n    } else {\n        return false\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx_j6grh4.swift:15:31: error: cannot find 'floor' in scope\n   \
    \ if (x == (y + z)) && (x - floor(x) == 0) && (y - floor(y) == 0) && (z - floor(z)\
    \ == 0) {\n                              ^~~~~\n/tmp/tmpx_j6grh4.swift:15:54:\
    \ error: cannot find 'floor' in scope\n    if (x == (y + z)) && (x - floor(x)\
    \ == 0) && (y - floor(y) == 0) && (z - floor(z) == 0) {\n                    \
    \                                 ^~~~~\n/tmp/tmpx_j6grh4.swift:15:77: error:\
    \ cannot find 'floor' in scope\n    if (x == (y + z)) && (x - floor(x) == 0) &&\
    \ (y - floor(y) == 0) && (z - floor(z) == 0) {\n                             \
    \                                               ^~~~~\n/tmp/tmpx_j6grh4.swift:17:38:\
    \ error: cannot find 'floor' in scope\n    } else if (y == (x + z)) && (x - floor(x)\
    \ == 0) && (y - floor(y) == 0) && (z - floor(z) == 0) {\n                    \
    \                 ^~~~~\n/tmp/tmpx_j6grh4.swift:17:61: error: cannot find 'floor'\
    \ in scope\n    } else if (y == (x + z)) && (x - floor(x) == 0) && (y - floor(y)\
    \ == 0) && (z - floor(z) == 0) {\n                                           \
    \                 ^~~~~\n/tmp/tmpx_j6grh4.swift:17:84: error: cannot find 'floor'\
    \ in scope\n    } else if (y == (x + z)) && (x - floor(x) == 0) && (y - floor(y)\
    \ == 0) && (z - floor(z) == 0) {\n                                           \
    \                                        ^~~~~\n/tmp/tmpx_j6grh4.swift:19:38:\
    \ error: cannot find 'floor' in scope\n    } else if (z == (x + y)) && (x - floor(x)\
    \ == 0) && (y - floor(y) == 0) && (z - floor(z) == 0) {\n                    \
    \                 ^~~~~\n/tmp/tmpx_j6grh4.swift:19:61: error: cannot find 'floor'\
    \ in scope\n    } else if (z == (x + y)) && (x - floor(x) == 0) && (y - floor(y)\
    \ == 0) && (z - floor(z) == 0) {\n                                           \
    \                 ^~~~~\n/tmp/tmpx_j6grh4.swift:19:84: error: cannot find 'floor'\
    \ in scope\n    } else if (z == (x + y)) && (x - floor(x) == 0) && (y - floor(y)\
    \ == 0) && (z - floor(z) == 0) {\n                                           \
    \                                        ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (abs(x) ==\
    \ floor(abs(x))) && (abs(y) == floor(abs(y))) && (abs(z) == floor(abs(z))) &&\
    \ ((x == y + z) || (y == x + z) || (z == x + y))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2p1b4kz5.swift:15:23: error: cannot find 'floor' in scope\n   \
    \ return (abs(x) == floor(abs(x))) && (abs(y) == floor(abs(y))) && (abs(z) ==\
    \ floor(abs(z))) && ((x == y + z) || (y == x + z) || (z == x + y))\n         \
    \             ^~~~~\n/tmp/tmp2p1b4kz5.swift:15:52: error: cannot find 'floor'\
    \ in scope\n    return (abs(x) == floor(abs(x))) && (abs(y) == floor(abs(y)))\
    \ && (abs(z) == floor(abs(z))) && ((x == y + z) || (y == x + z) || (z == x + y))\n\
    \                                                   ^~~~~\n/tmp/tmp2p1b4kz5.swift:15:81:\
    \ error: cannot find 'floor' in scope\n    return (abs(x) == floor(abs(x))) &&\
    \ (abs(y) == floor(abs(y))) && (abs(z) == floor(abs(z))) && ((x == y + z) || (y\
    \ == x + z) || (z == x + y))\n                                               \
    \                                 ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0{\n        if x == y + z || y == x + z || z == x + y {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpi3p484o4/tmpi3p484o4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b975e26dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b975df64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b975df64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b975df637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3p484o4                        0x0000557306a6677d <unavailable> + 6013

    5    libc.so.6                          0x00002b975e459460 __libc_start_main +
    245

    6    tmpi3p484o4                        0x0000557306a65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return !((x.truncatingRemainder(dividingBy:\
    \ 1) != 0 || y.truncatingRemainder(dividingBy: 1) != 0 || z.truncatingRemainder(dividingBy:\
    \ 1) != 0) || x + y != z && x + z != y && y + z != x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7xzec30e/tmp7xzec30e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c023cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c020c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c020c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c020c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xzec30e                        0x000055a47776477d <unavailable> + 6013

    5    libc.so.6                          0x00002b6c025b7460 __libc_start_main +
    245

    6    tmp7xzec30e                        0x000055a477763f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ || x == y - z || x == z - y || y == x + z || y == x - z || y == z - x || z ==\
    \ x + y || z == x - y || z == y - x\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpvf1oebqo/tmpvf1oebqo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842395fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8423656b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8423656988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84236557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf1oebqo                        0x000056381dfac2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b8423b4b460 __libc_start_main +
    245

    6    tmpvf1oebqo                        0x000056381dfabe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp41h456ih/tmp41h456ih.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c2decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c2ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c2ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c2ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41h456ih                        0x0000564c7efcd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b62c2fd8460 __libc_start_main +
    245

    6    tmp41h456ih                        0x0000564c7efccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var sum = x + y +\
    \ z\n    let diff = [x - z, y - z, z - x, z - y]\n    for number in diff {\n \
    \       if number == 0 {\n            return false\n        }\n        if floor(number)\
    \ == ceil(number) {\n            sum -= number\n        }\n    }\n    return floor(sum)\
    \ == ceil(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzdffykwt.swift:21:12: error: cannot find 'floor' in scope\n   \
    \     if floor(number) == ceil(number) {\n           ^~~~~\n/tmp/tmpzdffykwt.swift:21:29:\
    \ error: cannot find 'ceil' in scope\n        if floor(number) == ceil(number)\
    \ {\n                            ^~~~\n/tmp/tmpzdffykwt.swift:25:12: error: cannot\
    \ find 'floor' in scope\n    return floor(sum) == ceil(sum)\n           ^~~~~\n\
    /tmp/tmpzdffykwt.swift:25:26: error: cannot find 'ceil' in scope\n    return floor(sum)\
    \ == ceil(sum)\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let ints = [x, y,\
    \ z].map({ Int($0) })\n    guard ints.reduce(true, { (res, int) -> Bool in res\
    \ && int != nil }) else { return false }\n    let ints_sorted = ints.sorted()\n\
    \    return ints_sorted[0]! + ints_sorted[1]! == ints_sorted[2]!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpglns_12c.swift:16:64: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns true\n    guard ints.reduce(true, { (res,\
    \ int) -> Bool in res && int != nil }) else { return false }\n               \
    \                                            ~~~ ^  ~~~\n/tmp/tmpglns_12c.swift:18:26:\
    \ error: cannot force unwrap value of non-optional type 'Int'\n    return ints_sorted[0]!\
    \ + ints_sorted[1]! == ints_sorted[2]!\n           ~~~~~~~~~~~~~~^\n         \
    \                \n/tmp/tmpglns_12c.swift:18:44: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n    return ints_sorted[0]! + ints_sorted[1]! ==\
    \ ints_sorted[2]!\n                             ~~~~~~~~~~~~~~^\n            \
    \                               \n/tmp/tmpglns_12c.swift:18:63: error: cannot\
    \ force unwrap value of non-optional type 'Int'\n    return ints_sorted[0]! +\
    \ ints_sorted[1]! == ints_sorted[2]!\n                                       \
    \         ~~~~~~~~~~~~~~^\n                                                  \
    \            \n"
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && (x == round(x) && y == round(y) && z == round(z))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpst2qcwks.swift:15:62: error: cannot find 'round' in scope\n   \
    \ return (x + y == z || x + z == y || y + z == x) && (x == round(x) && y == round(y)\
    \ && z == round(z))\n                                                        \
    \     ^~~~~\n/tmp/tmpst2qcwks.swift:15:79: error: cannot find 'round' in scope\n\
    \    return (x + y == z || x + z == y || y + z == x) && (x == round(x) && y ==\
    \ round(y) && z == round(z))\n                                               \
    \                               ^~~~~\n/tmp/tmpst2qcwks.swift:15:96: error: cannot\
    \ find 'round' in scope\n    return (x + y == z || x + z == y || y + z == x) &&\
    \ (x == round(x) && y == round(y) && z == round(z))\n                        \
    \                                                                       ^~~~~\n"
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == y + z\
    \ || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0 &&\
    \ y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp_ew8r81a/tmp_ew8r81a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9df56bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9df262b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9df262988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9df2617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ew8r81a                        0x00005639d5bfd77d <unavailable> + 6013

    5    libc.so.6                          0x00002ad9df757460 __libc_start_main +
    245

    6    tmp_ew8r81a                        0x00005639d5bfcf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y + z || y\
    \ == x + z || z == x + y {\n    return true\n  } else {\n    return false\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpfdgmbp36/tmpfdgmbp36.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10d6b7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10d6876b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10d6876988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10d68757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfdgmbp36                        0x000055d7928e82d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b10d6d6b460 __libc_start_main +
    245

    6    tmpfdgmbp36                        0x000055d7928e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let summ = x + y\
    \ + z\n    if(summ == Int(summ)){\n        return true\n    }else{\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvexdncgm.swift:16:13: error: binary operator '==' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if(summ == Int(summ)){\n       ~~~~\
    \ ^  ~~~~~~~~~\n/tmp/tmpvexdncgm.swift:16:13: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if(summ == Int(summ)){\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.isInteger &&\
    \ y.isInteger && z.isInteger {\n        if x == y + z || y == x + z || z == x\
    \ + y {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ed1xlr2.swift:15:10: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if x.isInteger && y.isInteger && z.isInteger {\n       ~ ^~~~~~~~~\n\
    /tmp/tmp7ed1xlr2.swift:15:25: error: value of type 'Double' has no member 'isInteger'\n\
    \    if x.isInteger && y.isInteger && z.isInteger {\n                      ~ ^~~~~~~~~\n\
    /tmp/tmp7ed1xlr2.swift:15:40: error: value of type 'Double' has no member 'isInteger'\n\
    \    if x.isInteger && y.isInteger && z.isInteger {\n                        \
    \             ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) + Int(y)\
    \ == Int(z) || Int(x) + Int(z) == Int(y) || Int(y) + Int(z) == Int(x)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpol6wpezh/tmpol6wpezh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27c3633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27c332ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27c332a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27c33297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpol6wpezh                        0x000055e108ab072d <unavailable> + 5933

    5    libc.so.6                          0x00002b27c381f460 __libc_start_main +
    245

    6    tmpol6wpezh                        0x000055e108aafef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprngpigx6.swift:15:15: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    return (x % 1 == 0 && y % 1 ==\
    \ 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n             \
    \ ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmprngpigx6.swift:15:29: error: '%' is unavailable: For floating point numbers\
    \ use truncatingRemainder instead\n    return (x % 1 == 0 && y % 1 == 0 && z %\
    \ 1 == 0) && (x + y == z || x + z == y || y + z == x)\n                      \
    \      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmprngpigx6.swift:15:43: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    return (x % 1 == 0 && y %\
    \ 1 == 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n        \
    \                                  ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let list = [x, y,\
    \ z]\n    if list.contains(x + y) || list.contains(x + z) || list.contains(y +\
    \ z) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp9c6yvg7d/tmp9c6yvg7d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5a02c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59ffc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59ffc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59ffbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c6yvg7d                        0x0000562f75d4a4b6 <unavailable> + 5302

    5    libc.so.6                          0x00002ae5a04b5460 __libc_start_main +
    245

    6    tmp9c6yvg7d                        0x0000562f75d4a049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x - y ==\
    \ z || x - z == y || y - x == z || y - z == x || z - x == y || z - y == x) &&\n\
    \        x.truncatingRemainder(dividingBy: 1) == 0 &&\n        y.truncatingRemainder(dividingBy:\
    \ 1) == 0 &&\n        z.truncatingRemainder(dividingBy: 1) == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpyoyozhhf/tmpyoyozhhf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3be298fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3be2686b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3be2686988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3be26857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyoyozhhf                        0x000055adff63b77d <unavailable> + 6013

    5    libc.so.6                          0x00002b3be2b7b460 __libc_start_main +
    245

    6    tmpyoyozhhf                        0x000055adff63af49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.isInteger &&\
    \ y.isInteger && z.isInteger {\n        return x + y == z || x + z == y || y +\
    \ z == x\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptpp2hvcz.swift:15:10: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if x.isInteger && y.isInteger && z.isInteger {\n       ~ ^~~~~~~~~\n\
    /tmp/tmptpp2hvcz.swift:15:25: error: value of type 'Double' has no member 'isInteger'\n\
    \    if x.isInteger && y.isInteger && z.isInteger {\n                      ~ ^~~~~~~~~\n\
    /tmp/tmptpp2hvcz.swift:15:40: error: value of type 'Double' has no member 'isInteger'\n\
    \    if x.isInteger && y.isInteger && z.isInteger {\n                        \
    \             ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !x.isInteger ||\
    \ !y.isInteger || !z.isInteger {\n        return false\n    }\n    return (x +\
    \ y == z) || (x + z == y) || (y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmuig7ndf.swift:15:11: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if !x.isInteger || !y.isInteger || !z.isInteger {\n       \
    \ ~ ^~~~~~~~~\n/tmp/tmpmuig7ndf.swift:15:27: error: value of type 'Double' has\
    \ no member 'isInteger'\n    if !x.isInteger || !y.isInteger || !z.isInteger {\n\
    \                        ~ ^~~~~~~~~\n/tmp/tmpmuig7ndf.swift:15:43: error: value\
    \ of type 'Double' has no member 'isInteger'\n    if !x.isInteger || !y.isInteger\
    \ || !z.isInteger {\n                                        ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !is_int(x) ||\
    \ !is_int(y) || !is_int(z) {\n        return false\n    }\n    return x == y +\
    \ z || y == x + z || z == x + y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp54fueenb.swift:15:9: error: cannot find 'is_int' in scope\n   \
    \ if !is_int(x) || !is_int(y) || !is_int(z) {\n        ^~~~~~\n/tmp/tmp54fueenb.swift:15:23:\
    \ error: cannot find 'is_int' in scope\n    if !is_int(x) || !is_int(y) || !is_int(z)\
    \ {\n                      ^~~~~~\n/tmp/tmp54fueenb.swift:15:37: error: cannot\
    \ find 'is_int' in scope\n    if !is_int(x) || !is_int(y) || !is_int(z) {\n  \
    \                                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0.0 && y.truncatingRemainder(dividingBy: 1) == 0.0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0.0 {\n        if x == y + z || y == x + z || z == x + y {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpa2wwptrq/tmpa2wwptrq.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc058b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc055adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc055ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc055ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2wwptrq                        0x000055da7ab7c77d <unavailable> + 6013

    5    libc.so.6                          0x00002afc05aa2460 __libc_start_main +
    245

    6    tmpa2wwptrq                        0x000055da7ab7bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z ||\
    \ y == x + z || z == x + y {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpmthnv2cg/tmpmthnv2cg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cfd9c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cfd6b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cfd6b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cfd6b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmthnv2cg                        0x0000555b465e72d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b2cfdbae460 __libc_start_main +
    245

    6    tmpmthnv2cg                        0x0000555b465e6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp41h456ih/tmp41h456ih.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c2decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c2ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c2ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c2ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41h456ih                        0x0000564c7efcd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b62c2fd8460 __libc_start_main +
    245

    6    tmp41h456ih                        0x0000564c7efccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if ((x == (y + z))\
    \ || (y == (x + z)) || (z == (x + y))) && (x.isInteger && y.isInteger && z.isInteger)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptam4jxc9.swift:15:67: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if ((x == (y + z)) || (y == (x + z)) || (z == (x + y))) &&\
    \ (x.isInteger && y.isInteger && z.isInteger) {\n                            \
    \                                    ~ ^~~~~~~~~\n/tmp/tmptam4jxc9.swift:15:82:\
    \ error: value of type 'Double' has no member 'isInteger'\n    if ((x == (y +\
    \ z)) || (y == (x + z)) || (z == (x + y))) && (x.isInteger && y.isInteger && z.isInteger)\
    \ {\n                                                                        \
    \       ~ ^~~~~~~~~\n/tmp/tmptam4jxc9.swift:15:97: error: value of type 'Double'\
    \ has no member 'isInteger'\n    if ((x == (y + z)) || (y == (x + z)) || (z ==\
    \ (x + y))) && (x.isInteger && y.isInteger && z.isInteger) {\n               \
    \                                                                            \
    \   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x % 1 == 0 &&\
    \ y % 1 == 0 && z % 1 == 0 {\n        if (x + y == z) || (x + z == y) || (y +\
    \ z == x) {\n            return true\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmutsac4o.swift:15:10: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if x % 1 == 0 && y % 1 == 0 &&\
    \ z % 1 == 0 {\n         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpmutsac4o.swift:15:24: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    if x % 1 == 0 && y % 1 ==\
    \ 0 && z % 1 == 0 {\n                       ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmpmutsac4o.swift:15:38: error:\
    \ '%' is unavailable: For floating point numbers use truncatingRemainder instead\n\
    \    if x % 1 == 0 && y % 1 == 0 && z % 1 == 0 {\n                           \
    \          ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return ((x == y + z)\
    \ || (y == x + z) || (z == x + y)) && (x.truncatingRemainder(dividingBy: 1) ==\
    \ 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmphihyzmzd/tmphihyzmzd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46cfcb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46cf9adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46cf9ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46cf9ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphihyzmzd                        0x000055a3afe9c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b46cfea2460 __libc_start_main +
    245

    6    tmphihyzmzd                        0x000055a3afe9bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let nums = [x, y,\
    \ z]\n    for i in 0...2 {\n        for j in 0...2 {\n            if i != j {\n\
    \                for k in 0...2 {\n                    if k != i && k != j {\n\
    \                        if nums[i] == nums[j] + nums[k] {\n                 \
    \           return true\n                        }\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpfrvxd3nb/tmpfrvxd3nb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca191b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca18eb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca18eb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca18eaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrvxd3nb                        0x0000564fd8a84556 <unavailable> + 5462

    5    libc.so.6                          0x00002aca193a5460 __libc_start_main +
    245

    6    tmpfrvxd3nb                        0x0000564fd8a840e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Int(x) +\
    \ Int(y) == Int(z)) || (Int(x) + Int(z) == Int(y)) || (Int(y) + Int(z) == Int(x))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7lq_v6d8/tmp7lq_v6d8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6357bafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63578a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63578a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63578a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lq_v6d8                        0x000056257c70072d <unavailable> + 5933

    5    libc.so.6                          0x00002b6357d9b460 __libc_start_main +
    245

    6    tmp7lq_v6d8                        0x000056257c6ffef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp2omnkrz8/tmp2omnkrz8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17cb698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17cb38fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17cb38f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17cb38e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2omnkrz8                        0x000055ddb056577d <unavailable> + 6013

    5    libc.so.6                          0x00002b17cb884460 __libc_start_main +
    245

    6    tmp2omnkrz8                        0x000055ddb0564f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0.0 && y.truncatingRemainder(dividingBy: 1) == 0.0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0.0 {\n        if x + y == z || x + z == y || y + z == x {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp8p_dpw33/tmp8p_dpw33.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fc6c45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fc693cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fc693c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fc693b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p_dpw33                        0x000055b29b59a77d <unavailable> + 6013

    5    libc.so.6                          0x00002b4fc6e31460 __libc_start_main +
    245

    6    tmp8p_dpw33                        0x000055b29b599f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let xi = floor(x)\n\
    \    let yi = floor(y)\n    let zi = floor(z)\n    return xi == yi + zi || yi\
    \ == xi + zi || zi == xi + yi\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwo0bjf0b.swift:15:14: error: cannot find 'floor' in scope\n   \
    \ let xi = floor(x)\n             ^~~~~\n/tmp/tmpwo0bjf0b.swift:16:14: error:\
    \ cannot find 'floor' in scope\n    let yi = floor(y)\n             ^~~~~\n/tmp/tmpwo0bjf0b.swift:17:14:\
    \ error: cannot find 'floor' in scope\n    let zi = floor(z)\n             ^~~~~\n"
  stdout: ''
  timestamp: 1659979042
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let result = x ==\
    \ y + z || y == x + z || z == x + y\n    if result {\n        return true\n  \
    \  } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp59kxct31/tmp59kxct31.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d55a5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d55752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d55752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d557517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59kxct31                        0x0000563d293a42d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b8d55c47460 __libc_start_main +
    245

    6    tmp59kxct31                        0x0000563d293a3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x.truncatingRemainder(dividingBy:\
    \ 1) == 0 || y.truncatingRemainder(dividingBy: 1) == 0 || z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (x + y == z || x + z == y || y + z == x))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5gjnpbjv/tmp5gjnpbjv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7797901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77975f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77975f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77975f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gjnpbjv                        0x0000564a34da23b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b7797aed460 __libc_start_main +
    245

    6    tmp5gjnpbjv                        0x0000564a34da1f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    if (sum - x).isInteger && x.isInteger && y.isInteger && z.isInteger {\n\
    \        return true\n    } else if (sum - y).isInteger && x.isInteger && y.isInteger\
    \ && z.isInteger {\n        return true\n    } else if (sum - z).isInteger &&\
    \ x.isInteger && y.isInteger && z.isInteger {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9w7fu5um.swift:16:18: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if (sum - x).isInteger && x.isInteger && y.isInteger && z.isInteger\
    \ {\n       ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:16:33: error: value of\
    \ type 'Double' has no member 'isInteger'\n    if (sum - x).isInteger && x.isInteger\
    \ && y.isInteger && z.isInteger {\n                              ~ ^~~~~~~~~\n\
    /tmp/tmp9w7fu5um.swift:16:48: error: value of type 'Double' has no member 'isInteger'\n\
    \    if (sum - x).isInteger && x.isInteger && y.isInteger && z.isInteger {\n \
    \                                            ~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:16:63:\
    \ error: value of type 'Double' has no member 'isInteger'\n    if (sum - x).isInteger\
    \ && x.isInteger && y.isInteger && z.isInteger {\n                           \
    \                                 ~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:18:25: error:\
    \ value of type 'Double' has no member 'isInteger'\n    } else if (sum - y).isInteger\
    \ && x.isInteger && y.isInteger && z.isInteger {\n              ~~~~~~~~~ ^~~~~~~~~\n\
    /tmp/tmp9w7fu5um.swift:18:40: error: value of type 'Double' has no member 'isInteger'\n\
    \    } else if (sum - y).isInteger && x.isInteger && y.isInteger && z.isInteger\
    \ {\n                                     ~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:18:55:\
    \ error: value of type 'Double' has no member 'isInteger'\n    } else if (sum\
    \ - y).isInteger && x.isInteger && y.isInteger && z.isInteger {\n            \
    \                                        ~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:18:70:\
    \ error: value of type 'Double' has no member 'isInteger'\n    } else if (sum\
    \ - y).isInteger && x.isInteger && y.isInteger && z.isInteger {\n            \
    \                                                       ~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:20:25:\
    \ error: value of type 'Double' has no member 'isInteger'\n    } else if (sum\
    \ - z).isInteger && x.isInteger && y.isInteger && z.isInteger {\n            \
    \  ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp9w7fu5um.swift:20:40: error: value of type 'Double'\
    \ has no member 'isInteger'\n    } else if (sum - z).isInt"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // Implement your\
    \ code here.\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpxhrf6fjj/tmpxhrf6fjj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ffa38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ffa083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ffa083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ffa0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhrf6fjj                        0x00005632a9ef41c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b1ffa578460 __libc_start_main +
    245

    6    tmpxhrf6fjj                        0x00005632a9ef3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if round(x) == round(y)\
    \ + round(z) || round(y) == round(x) + round(z) || round(z) == round(x) + round(y)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp78pwf2dw.swift:15:8: error: cannot find 'round' in scope\n    if\
    \ round(x) == round(y) + round(z) || round(y) == round(x) + round(z) || round(z)\
    \ == round(x) + round(y) {\n       ^~~~~\n/tmp/tmp78pwf2dw.swift:15:20: error:\
    \ cannot find 'round' in scope\n    if round(x) == round(y) + round(z) || round(y)\
    \ == round(x) + round(z) || round(z) == round(x) + round(y) {\n              \
    \     ^~~~~\n/tmp/tmp78pwf2dw.swift:15:31: error: cannot find 'round' in scope\n\
    \    if round(x) == round(y) + round(z) || round(y) == round(x) + round(z) ||\
    \ round(z) == round(x) + round(y) {\n                              ^~~~~\n/tmp/tmp78pwf2dw.swift:15:43:\
    \ error: cannot find 'round' in scope\n    if round(x) == round(y) + round(z)\
    \ || round(y) == round(x) + round(z) || round(z) == round(x) + round(y) {\n  \
    \                                        ^~~~~\n/tmp/tmp78pwf2dw.swift:15:55:\
    \ error: cannot find 'round' in scope\n    if round(x) == round(y) + round(z)\
    \ || round(y) == round(x) + round(z) || round(z) == round(x) + round(y) {\n  \
    \                                                    ^~~~~\n/tmp/tmp78pwf2dw.swift:15:66:\
    \ error: cannot find 'round' in scope\n    if round(x) == round(y) + round(z)\
    \ || round(y) == round(x) + round(z) || round(z) == round(x) + round(y) {\n  \
    \                                                               ^~~~~\n/tmp/tmp78pwf2dw.swift:15:78:\
    \ error: cannot find 'round' in scope\n    if round(x) == round(y) + round(z)\
    \ || round(y) == round(x) + round(z) || round(z) == round(x) + round(y) {\n  \
    \                                                                           ^~~~~\n\
    /tmp/tmp78pwf2dw.swift:15:90: error: cannot find 'round' in scope\n    if round(x)\
    \ == round(y) + round(z) || round(y) == round(x) + round(z) || round(z) == round(x)\
    \ + round(y) {\n                                                             \
    \                            ^~~~~\n/tmp/tmp78pwf2dw.swift:15:101: error: cannot\
    \ find 'round' in scope\n    if round(x) == round(y) + round(z) || round(y) ==\
    \ round(x) + round(z) || round(z) == round(x) + round(y) {\n                 \
    \       "
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x % 1 == 0 &&\
    \ y % 1 == 0 && z % 1 == 0 && ((x + y == z) || (x + z == y) || (y + z == x)) {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_mxzzx_y.swift:15:10: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    if x % 1 == 0 && y % 1 == 0 &&\
    \ z % 1 == 0 && ((x + y == z) || (x + z == y) || (y + z == x)) {\n         ^\n\
    Swift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func\
    \ % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp_mxzzx_y.swift:15:24:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n    if x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && ((x + y == z) || (x\
    \ + z == y) || (y + z == x)) {\n                       ^\nSwift.%:2:13: note:\
    \ '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs:\
    \ T) -> T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp_mxzzx_y.swift:15:38:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n    if x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && ((x + y == z) || (x\
    \ + z == y) || (y + z == x)) {\n                                     ^\nSwift.%:2:13:\
    \ note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs:\
    \ T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var sum = x + y +\
    \ z\n    if (x + y == z || x + z == y || y + z == x) && sum == sum.rounded(.toNearestOrAwayFromZero)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp30q_oj1_.swift:15:9: warning: variable 'sum' was never mutated;\
    \ consider changing to 'let' constant\n    var sum = x + y + z\n    ~~~ ^\n  \
    \  let\nerror: link command failed with exit code 1 (use -v to see invocation)\n\
    /tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF:\
    \ error: undefined reference to 'round'\n/tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function\
    \ $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF: error: undefined reference to 'rint'\n\
    /tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF:\
    \ error: undefined reference to 'trunc'\n/tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function\
    \ $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF: error: undefined reference to 'ceil'\n\
    /tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF:\
    \ error: undefined reference to 'floor'\n/tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function\
    \ $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF: error: undefined reference to 'floor'\n\
    /tmp/TemporaryDirectory.lgNjTj/tmp30q_oj1_-1.o:tmp30q_oj1_-1.o:function $s11tmp30q_oj1_7any_int1x1y1zSbSd_S2dtF:\
    \ error: undefined reference to 'ceil'\nclang-13: error: linker command failed\
    \ with exit code 1 (use -v to see invocation)\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if (x == y + z) ||\
    \ (y == x + z) || (z == x + y) {\n    return true\n  } else {\n    return false\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) ==\
    \ true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5,\
    \ y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpvz6v4v98/tmpvz6v4v98.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af97de74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af97db6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af97db6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af97db6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz6v4v98                        0x00005601ad81a2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002af97e060460 __libc_start_main +
    245

    6    tmpvz6v4v98                        0x00005601ad819e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 && (x == y + z || y == x + z || z == x + y)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpa3iwzbrs/tmpa3iwzbrs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba45fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba42f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba42f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba42f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3iwzbrs                        0x000055a5c378277d <unavailable> + 6013

    5    libc.so.6                          0x00002afba47e7460 __libc_start_main +
    245

    6    tmpa3iwzbrs                        0x000055a5c3781f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 && (x + y == z || x + z == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmprgufs9qp/tmprgufs9qp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c4414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c410bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c410b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c410a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgufs9qp                        0x00005564894c977d <unavailable> + 6013

    5    libc.so.6                          0x00002ba3c4600460 __libc_start_main +
    245

    6    tmprgufs9qp                        0x00005564894c8f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z ||\
    \ y == x + z || z == x + y {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpmthnv2cg/tmpmthnv2cg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cfd9c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cfd6b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cfd6b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cfd6b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmthnv2cg                        0x0000555b465e72d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b2cfdbae460 __libc_start_main +
    245

    6    tmpmthnv2cg                        0x0000555b465e6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    if floor(sum) == sum {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprwshrap2.swift:16:8: error: cannot find 'floor' in scope\n    if\
    \ floor(sum) == sum {\n       ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let xInt = Int(x)\n\
    \    let yInt = Int(y)\n    let zInt = Int(z)\n    return ((xInt == x) && (yInt\
    \ == y) && (zInt == z)) && (xInt + yInt == zInt || xInt + zInt == yInt || yInt\
    \ + zInt == xInt)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfhq3ux_k.swift:18:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return ((xInt == x) && (yInt == y) && (zInt\
    \ == z)) && (xInt + yInt == zInt || xInt + zInt == yInt || yInt + zInt == xInt)\n\
    \                     ^\n                     Int( )\n/tmp/tmpfhq3ux_k.swift:18:37:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return ((xInt == x) && (yInt == y) && (zInt == z)) && (xInt + yInt == zInt\
    \ || xInt + zInt == yInt || yInt + zInt == xInt)\n                           \
    \         ^\n                                    Int( )\n/tmp/tmpfhq3ux_k.swift:18:52:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return ((xInt == x) && (yInt == y) && (zInt == z)) && (xInt + yInt == zInt\
    \ || xInt + zInt == yInt || yInt + zInt == xInt)\n                           \
    \                        ^\n                                                 \
    \  Int( )\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && ((x + y == z) || (x + z == y) || (y + z == x))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpoqocdcgp/tmpoqocdcgp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fa4945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fa463cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fa463c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fa463b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqocdcgp                        0x000055d3f622777d <unavailable> + 6013

    5    libc.so.6                          0x00002b9fa4b31460 __libc_start_main +
    245

    6    tmpoqocdcgp                        0x000055d3f6226f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result: Bool\
    \ = false\n    if x.truncatingRemainder(dividingBy: 1) == 0, y.truncatingRemainder(dividingBy:\
    \ 1) == 0, z.truncatingRemainder(dividingBy: 1) == 0 {\n        if x == y + z\
    \ || y == x + z || z == x + y {\n            result = true\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmprnsu8xsr/tmprnsu8xsr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d4b398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d4b08fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d4b08f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d4b08e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnsu8xsr                        0x000056231968577d <unavailable> + 6013

    5    libc.so.6                          0x00002b8d4b584460 __libc_start_main +
    245

    6    tmprnsu8xsr                        0x0000562319684f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n    return (x + y == z || x + z == y || y + z == x)\n  }\n  return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7rbj026c/tmp7rbj026c.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbd8224c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbd7f1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbd7f1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbd7f1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rbj026c                        0x0000557760a1477d <unavailable> + 6013

    5    libc.so.6                          0x00002abbd8410460 __libc_start_main +
    245

    6    tmp7rbj026c                        0x0000557760a13f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if (floor(x) == x &&\
    \ floor(y) == y && floor(z) == z) {\n    return (x == y + z || y == x + z || z\
    \ == x + y)\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_hkvhzbu.swift:15:7: error: cannot find 'floor' in scope\n  if\
    \ (floor(x) == x && floor(y) == y && floor(z) == z) {\n      ^~~~~\n/tmp/tmp_hkvhzbu.swift:15:24:\
    \ error: cannot find 'floor' in scope\n  if (floor(x) == x && floor(y) == y &&\
    \ floor(z) == z) {\n                       ^~~~~\n/tmp/tmp_hkvhzbu.swift:15:41:\
    \ error: cannot find 'floor' in scope\n  if (floor(x) == x && floor(y) == y &&\
    \ floor(z) == z) {\n                                        ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result = false\n\
    \    if (x == y + z || x == y - z || x == z - y) && x.isInteger && y.isInteger\
    \ && z.isInteger {\n        result = true\n    } else if (y == x + z || y == x\
    \ - z || y == z - x) && x.isInteger && y.isInteger && z.isInteger {\n        result\
    \ = true\n    } else if (z == x + y || z == x - y || z == y - x) && x.isInteger\
    \ && y.isInteger && z.isInteger {\n        result = true\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjdowec8m.swift:16:54: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if (x == y + z || x == y - z || x == z - y) && x.isInteger\
    \ && y.isInteger && z.isInteger {\n                                          \
    \         ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:16:69: error: value of type 'Double'\
    \ has no member 'isInteger'\n    if (x == y + z || x == y - z || x == z - y) &&\
    \ x.isInteger && y.isInteger && z.isInteger {\n                              \
    \                                    ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:16:84:\
    \ error: value of type 'Double' has no member 'isInteger'\n    if (x == y + z\
    \ || x == y - z || x == z - y) && x.isInteger && y.isInteger && z.isInteger {\n\
    \                                                                            \
    \     ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:18:61: error: value of type 'Double'\
    \ has no member 'isInteger'\n    } else if (y == x + z || y == x - z || y == z\
    \ - x) && x.isInteger && y.isInteger && z.isInteger {\n                      \
    \                                    ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:18:76:\
    \ error: value of type 'Double' has no member 'isInteger'\n    } else if (y ==\
    \ x + z || y == x - z || y == z - x) && x.isInteger && y.isInteger && z.isInteger\
    \ {\n                                                                        \
    \ ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:18:91: error: value of type 'Double' has\
    \ no member 'isInteger'\n    } else if (y == x + z || y == x - z || y == z - x)\
    \ && x.isInteger && y.isInteger && z.isInteger {\n                           \
    \                                                             ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:20:61:\
    \ error: value of type 'Double' has no member 'isInteger'\n    } else if (z ==\
    \ x + y || z == x - y || z == y - x) && x.isInteger && y.isInteger && z.isInteger\
    \ {\n                                                          ~ ^~~~~~~~~\n/tmp/tmpjdowec8m.swift:20:76:\
    \ error: value of type 'Double' has no member 'isInteger'\n    } else if (z ==\
    \ x + y || z == x - y || z == y - x) && x.isInteger && y.isInteger && z.isInteger\
    \ {\n      "
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x - y == z) ||\
    \ (x - z == y) || (y - z == x) {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp_6x4tao0/tmp_6x4tao0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f3de3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f3db32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f3db32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f3db317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_6x4tao0                        0x00005585fb5972d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b1f3e027460 __libc_start_main +
    245

    6    tmp_6x4tao0                        0x00005585fb596e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var sum: Double =\
    \ 0\n    if x.isInteger && y.isInteger && z.isInteger {\n        if (x == y +\
    \ z) || (y == x + z) || (z == x + y) {\n            return true\n        }\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6b4w9ih2.swift:16:10: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if x.isInteger && y.isInteger && z.isInteger {\n       ~ ^~~~~~~~~\n\
    /tmp/tmp6b4w9ih2.swift:16:25: error: value of type 'Double' has no member 'isInteger'\n\
    \    if x.isInteger && y.isInteger && z.isInteger {\n                      ~ ^~~~~~~~~\n\
    /tmp/tmp6b4w9ih2.swift:16:40: error: value of type 'Double' has no member 'isInteger'\n\
    \    if x.isInteger && y.isInteger && z.isInteger {\n                        \
    \             ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x == y + z || y == x + z || z == x + y {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp71h5e18i/tmp71h5e18i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e01a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dfe9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dfe9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dfe9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71h5e18i                        0x0000559f23b0777d <unavailable> + 6013

    5    libc.so.6                          0x00002ad1e0391460 __libc_start_main +
    245

    6    tmp71h5e18i                        0x0000559f23b06f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpp8f6es9_/tmpp8f6es9_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa0d95ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa0d655b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa0d655988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa0d6547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8f6es9_                        0x0000562638ed577d <unavailable> + 6013

    5    libc.so.6                          0x00002baa0db4a460 __libc_start_main +
    245

    6    tmpp8f6es9_                        0x0000562638ed4f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x == y + z || y == x + z || z == x + y {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp71h5e18i/tmp71h5e18i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e01a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dfe9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dfe9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dfe9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71h5e18i                        0x0000559f23b0777d <unavailable> + 6013

    5    libc.so.6                          0x00002ad1e0391460 __libc_start_main +
    245

    6    tmp71h5e18i                        0x0000559f23b06f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0x9xe93a/tmp0x9xe93a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d578e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d575d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d575d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d575d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x9xe93a                        0x000055a68801c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9d57acd460 __libc_start_main +
    245

    6    tmp0x9xe93a                        0x000055a68801bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Double(Int(x))\
    \ == x && Double(Int(y)) == y && Double(Int(z)) == z)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp1ol6yoli/tmp1ol6yoli.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6b311c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f6b008b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f6b008988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f6b0077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ol6yoli                        0x0000560f03c7d3ea <unavailable> + 5098

    5    libc.so.6                          0x00002b6f6b4fd460 __libc_start_main +
    245

    6    tmp1ol6yoli                        0x0000560f03c7cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x + y == z\
    \ || x + z == y || y + z == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkgmncsu4/tmpkgmncsu4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39bd93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac39ba8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac39ba8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac39ba897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgmncsu4                        0x000055e027be12d6 <unavailable> + 4822

    5    libc.so.6                          0x00002ac39bf7f460 __libc_start_main +
    245

    6    tmpkgmncsu4                        0x000055e027be0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0x9xe93a/tmp0x9xe93a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d578e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d575d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d575d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d575d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x9xe93a                        0x000055a68801c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9d57acd460 __libc_start_main +
    245

    6    tmp0x9xe93a                        0x000055a68801bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z ||\
    \ x == y - z || x == z - y {\n        return true\n    } else if y == x + z ||\
    \ y == x - z || y == z - x {\n        return true\n    } else if z == x + y ||\
    \ z == x - y || z == y - x {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpal0r1wd9/tmpal0r1wd9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6bd136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6bce2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6bce2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6bce2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal0r1wd9                        0x00005601f6fe82d6 <unavailable> + 4822

    5    libc.so.6                          0x00002af6bd322460 __libc_start_main +
    245

    6    tmpal0r1wd9                        0x00005601f6fe7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if floor(x) == x\
    \ && floor(y) == y && floor(z) == z {\n        if x == y + z || y == x + z ||\
    \ z == x + y {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqlu1wfug.swift:15:8: error: cannot find 'floor' in scope\n    if\
    \ floor(x) == x && floor(y) == y && floor(z) == z {\n       ^~~~~\n/tmp/tmpqlu1wfug.swift:15:25:\
    \ error: cannot find 'floor' in scope\n    if floor(x) == x && floor(y) == y &&\
    \ floor(z) == z {\n                        ^~~~~\n/tmp/tmpqlu1wfug.swift:15:42:\
    \ error: cannot find 'floor' in scope\n    if floor(x) == x && floor(y) == y &&\
    \ floor(z) == z {\n                                         ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if Int(x) == Int(y)\
    \ + Int(z) || Int(x) == Int(y) + Int(z) || Int(x) == Int(y) + Int(z) {\n     \
    \   return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp1m3r5szc/tmp1m3r5szc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae386432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae386129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae386129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3861287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1m3r5szc                        0x000055604f164254 <unavailable> + 4692

    5    libc.so.6                          0x00002ae38661e460 __libc_start_main +
    245

    6    tmp1m3r5szc                        0x000055604f163ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (y + z ==\
    \ x) || (x + z == y) || (x + y == z)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmprk04iple/tmprk04iple.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5237055c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5236d4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5236d4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5236d4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprk04iple                        0x000055c75676a2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b5237241460 __libc_start_main +
    245

    6    tmprk04iple                        0x000055c756769e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && floor(x) == x && floor(y) == y && floor(z)\
    \ == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwk3uy40l.swift:15:56: error: cannot find 'floor' in scope\n   \
    \ return (x == y + z || y == x + z || z == x + y) && floor(x) == x && floor(y)\
    \ == y && floor(z) == z\n                                                    \
    \   ^~~~~\n/tmp/tmpwk3uy40l.swift:15:73: error: cannot find 'floor' in scope\n\
    \    return (x == y + z || y == x + z || z == x + y) && floor(x) == x && floor(y)\
    \ == y && floor(z) == z\n                                                    \
    \                    ^~~~~\n/tmp/tmpwk3uy40l.swift:15:90: error: cannot find 'floor'\
    \ in scope\n    return (x == y + z || y == x + z || z == x + y) && floor(x) ==\
    \ x && floor(y) == y && floor(z) == z\n                                      \
    \                                                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) || (y.truncatingRemainder(dividingBy: 1) == 0) || (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if x + y == z || x + z == y || y + z == x {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpsmvmlmg9/tmpsmvmlmg9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b223ec85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b223e97cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b223e97c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b223e97b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmvmlmg9                        0x000055b65ea373b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b223ee71460 __libc_start_main +
    245

    6    tmpsmvmlmg9                        0x000055b65ea36f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == Int(x) &&\
    \ y == Int(y) && z == Int(z) {\n        if x == y + z || y == x + z || z == x\
    \ + y {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0qjalm5v.swift:15:8: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    if x == Int(x) && y == Int(y) && z == Int(z)\
    \ {\n       ^\n       Int( )\n/tmp/tmp0qjalm5v.swift:15:23: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n    if x == Int(x) &&\
    \ y == Int(y) && z == Int(z) {\n                      ^\n                    \
    \  Int( )\n/tmp/tmp0qjalm5v.swift:15:38: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    if x == Int(x) && y == Int(y) && z == Int(z)\
    \ {\n                                     ^\n                                \
    \     Int( )\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let array = [x, y,\
    \ z]\n    let sortedArray = array.sorted()\n    let max = sortedArray[2]\n   \
    \ let sum = sortedArray[0] + sortedArray[1]\n    return max == sum && array.filter({x\
    \ in x.truncatingRemainder(dividingBy: 1) == 0}).count == 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpb_xirkpe/tmpb_xirkpe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b874e892c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b874e589b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b874e589988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b874e5887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_xirkpe                        0x0000557146eeb8e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b874ea7e460 __libc_start_main +
    245

    6    tmpb_xirkpe                        0x0000557146eeb269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ || y == x + z || z == x + y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmps1qwg9r8/tmps1qwg9r8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b567f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b564e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b564e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b564e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1qwg9r8                        0x000055fae02b62d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b7b569dc460 __libc_start_main +
    245

    6    tmps1qwg9r8                        0x000055fae02b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x + y == z) ||\
    \ (x + z == y) || (y + z == x) {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpv45rqy24/tmpv45rqy24.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc4b77fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4b476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4b476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4b4757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv45rqy24                        0x0000557d028f02d6 <unavailable> + 4822

    5    libc.so.6                          0x00002adc4b96b460 __libc_start_main +
    245

    6    tmpv45rqy24                        0x0000557d028efe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z) || (x + z == y) || (y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpd4s2ewo8/tmpd4s2ewo8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd7ac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd77b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd77b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd77b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4s2ewo8                        0x000055ddcfa682d6 <unavailable> + 4822

    5    libc.so.6                          0x00002abdd7cad460 __libc_start_main +
    245

    6    tmpd4s2ewo8                        0x000055ddcfa67e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if(x.truncatingRemainder(dividingBy:\
    \ 1) == 0.0 && y.truncatingRemainder(dividingBy: 1) == 0.0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0.0) {\n        if((x + y == z) || (x + z == y) || (y + z == x)) {\n \
    \           return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpeqqbfddx/tmpeqqbfddx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd14413c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd1410ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd1410a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd141097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqqbfddx                        0x0000557646f7877d <unavailable> + 6013

    5    libc.so.6                          0x00002acd145ff460 __libc_start_main +
    245

    6    tmpeqqbfddx                        0x0000557646f77f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Double(Int(x))\
    \ == x && Double(Int(y)) == y && Double(Int(z)) == z) &&\n        (x == y + z\
    \ || y == x + z || z == x + y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcwb5ibc1/tmpcwb5ibc1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab632c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6328fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6328fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6328fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcwb5ibc1                        0x000055817ad4e72d <unavailable> + 5933

    5    libc.so.6                          0x00002ab632df1460 __libc_start_main +
    245

    6    tmpcwb5ibc1                        0x000055817ad4def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x - y - z).rounded()\
    \ == 0 || (x + y - z).rounded() == 0 || (x - y + z).rounded() == 0 {\n       \
    \ return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.YtmOFU/tmp6oif_oo0-1.o:tmp6oif_oo0-1.o:function $s11tmp6oif_oo07any_int1x1y1zSbSd_S2dtF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirec'
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpi12keeyb/tmpi12keeyb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16b0debc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16b0ae2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16b0ae2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16b0ae17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi12keeyb                        0x000055c4c718f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b16b0fd7460 __libc_start_main +
    245

    6    tmpi12keeyb                        0x000055c4c718ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Int(x) +\
    \ Int(y) == Int(z)) || (Int(x) + Int(z) == Int(y)) || (Int(y) + Int(z) == Int(x))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7lq_v6d8/tmp7lq_v6d8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6357bafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63578a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63578a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63578a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lq_v6d8                        0x000056257c70072d <unavailable> + 5933

    5    libc.so.6                          0x00002b6357d9b460 __libc_start_main +
    245

    6    tmp7lq_v6d8                        0x000056257c6ffef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && floor(x) == x && floor(y) == y && floor(z)\
    \ == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwk3uy40l.swift:15:56: error: cannot find 'floor' in scope\n   \
    \ return (x == y + z || y == x + z || z == x + y) && floor(x) == x && floor(y)\
    \ == y && floor(z) == z\n                                                    \
    \   ^~~~~\n/tmp/tmpwk3uy40l.swift:15:73: error: cannot find 'floor' in scope\n\
    \    return (x == y + z || y == x + z || z == x + y) && floor(x) == x && floor(y)\
    \ == y && floor(z) == z\n                                                    \
    \                    ^~~~~\n/tmp/tmpwk3uy40l.swift:15:90: error: cannot find 'floor'\
    \ in scope\n    return (x == y + z || y == x + z || z == x + y) && floor(x) ==\
    \ x && floor(y) == y && floor(z) == z\n                                      \
    \                                                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    //   let result:\
    \ Bool\n    //    if (x + y == z || x + z == y || y + z == x) && x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n    //        result = true\n    //    } else {\n    //        result\
    \ = false\n    //    }\n    return (x + y == z || x + z == y || y + z == x) &&\
    \ x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwzlc2yl2/tmpwzlc2yl2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade67b2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade67826b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade67826988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade678257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzlc2yl2                        0x0000562d35fad77d <unavailable> + 6013

    5    libc.so.6                          0x00002ade67d1b460 __libc_start_main +
    245

    6    tmpwzlc2yl2                        0x0000562d35facf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x.isInteger\
    \ && y.isInteger && z.isInteger) && ((x == y + z) || (y == x + z) || (z == x +\
    \ y))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpprio8_j3.swift:15:13: error: value of type 'Double' has no member\
    \ 'isInteger'\n  return (x.isInteger && y.isInteger && z.isInteger) && ((x ==\
    \ y + z) || (y == x + z) || (z == x + y))\n          ~ ^~~~~~~~~\n/tmp/tmpprio8_j3.swift:15:28:\
    \ error: value of type 'Double' has no member 'isInteger'\n  return (x.isInteger\
    \ && y.isInteger && z.isInteger) && ((x == y + z) || (y == x + z) || (z == x +\
    \ y))\n                         ~ ^~~~~~~~~\n/tmp/tmpprio8_j3.swift:15:43: error:\
    \ value of type 'Double' has no member 'isInteger'\n  return (x.isInteger && y.isInteger\
    \ && z.isInteger) && ((x == y + z) || (y == x + z) || (z == x + y))\n        \
    \                                ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ || x == y - z || x == z - y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpk3u14se0/tmpk3u14se0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96871c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9686eb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9686eb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9686eb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3u14se0                        0x000055ac5ad122d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b96873ae460 __libc_start_main +
    245

    6    tmpk3u14se0                        0x000055ac5ad11e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((Int(x) ==\
    \ Int(y) + Int(z)) || (Int(y) == Int(x) + Int(z)) || (Int(z) == Int(x) + Int(y)))\
    \ && (Int(x) == x) && (Int(y) == y) && (Int(z) == z)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9aqnpf8y.swift:15:118: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return ((Int(x) == Int(y) + Int(z)) ||\
    \ (Int(y) == Int(x) + Int(z)) || (Int(z) == Int(x) + Int(y))) && (Int(x) == x)\
    \ && (Int(y) == y) && (Int(z) == z)\n                                        \
    \                                                                            \
    \ ^\n                                                                        \
    \                                             Int( )\n/tmp/tmp9aqnpf8y.swift:15:135:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return ((Int(x) == Int(y) + Int(z)) || (Int(y) == Int(x) + Int(z)) || (Int(z)\
    \ == Int(x) + Int(y))) && (Int(x) == x) && (Int(y) == y) && (Int(z) == z)\n  \
    \                                                                            \
    \                                                        ^\n                 \
    \                                                                            \
    \                                         Int( )\n/tmp/tmp9aqnpf8y.swift:15:152:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return ((Int(x) == Int(y) + Int(z)) || (Int(y) == Int(x) + Int(z)) || (Int(z)\
    \ == Int(x) + Int(y))) && (Int(x) == x) && (Int(y) == y) && (Int(z) == z)\n  \
    \                                                                            \
    \                                                                         ^\n\
    \                                                                            \
    \                                                                           Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let ints = [x, y,\
    \ z].map { floor($0) }\n    let sum = ints.reduce(0, +)\n    return ints.contains(sum)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl_at4qdz.swift:15:32: error: cannot find 'floor' in scope\n   \
    \ let ints = [x, y, z].map { floor($0) }\n                               ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprngpigx6.swift:15:15: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    return (x % 1 == 0 && y % 1 ==\
    \ 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n             \
    \ ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmprngpigx6.swift:15:29: error: '%' is unavailable: For floating point numbers\
    \ use truncatingRemainder instead\n    return (x % 1 == 0 && y % 1 == 0 && z %\
    \ 1 == 0) && (x + y == z || x + z == y || y + z == x)\n                      \
    \      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmprngpigx6.swift:15:43: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    return (x % 1 == 0 && y %\
    \ 1 == 0 && z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n        \
    \                                  ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x + y == z\
    \ || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0 &&\
    \ y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmptqwhqfka/tmptqwhqfka.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14274efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14271e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14271e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14271e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqwhqfka                        0x00005631ff20577d <unavailable> + 6013

    5    libc.so.6                          0x00002b14276db460 __libc_start_main +
    245

    6    tmptqwhqfka                        0x00005631ff204f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if (x == y + z || y == x + z || z == x + y) {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpzi94u4st/tmpzi94u4st.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b910bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi94u4st                        0x00005643b6ea377d <unavailable> + 6013

    5    libc.so.6                          0x00002b2b912a9460 __libc_start_main +
    245

    6    tmpzi94u4st                        0x00005643b6ea2f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z) || (x == y - z) || (x == z - y)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpruvpe6_n/tmpruvpe6_n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5e69b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5e66aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5e66ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5e66ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpruvpe6_n                        0x000055850274d2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002ba5e6ba3460 __libc_start_main +
    245

    6    tmpruvpe6_n                        0x000055850274ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let result = x +\
    \ y == z || x + z == y || y + z == x\n    return result && x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpbmqertp6/tmpbmqertp6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dec098c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5debd8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5debd8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5debd8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmqertp6                        0x000055677a78d77d <unavailable> + 6013

    5    libc.so.6                          0x00002b5dec284460 __libc_start_main +
    245

    6    tmpbmqertp6                        0x000055677a78cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  let sumOfXY = x + y\n\
    \  let sumOfYZ = y + z\n  let sumOfXZ = x + z\n  let sumOfXYZ = x + y + z\n  if\
    \ x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0 && sumOfXY == z || sumOfYZ\
    \ == x || sumOfXZ == y || sumOfXYZ == 0 {\n    return true\n  } else {\n    return\
    \ false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp76kc7a3o/tmp76kc7a3o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab2df67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab2dc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab2dc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab2dc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76kc7a3o                        0x000055578cd0e3b6 <unavailable> + 5046

    5    libc.so.6                          0x00002aab2e153460 __libc_start_main +
    245

    6    tmp76kc7a3o                        0x000055578cd0df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (x + y == z || x + z == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwpttp4bz/tmpwpttp4bz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6846923c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b684661ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b684661a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68466197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpttp4bz                        0x0000562b8564077d <unavailable> + 6013

    5    libc.so.6                          0x00002b6846b0f460 __libc_start_main +
    245

    6    tmpwpttp4bz                        0x0000562b8563ff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var array = [x, y,\
    \ z]\n    for i in 0..<array.count - 1 {\n        let sum = array[i] + array[i\
    \ + 1]\n        if sum.truncatingRemainder(dividingBy: 1) == 0 {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp98guc7q2/tmp98guc7q2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba47e6e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba47e3ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba47e3dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba47e3dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98guc7q2                        0x000055da8c1ee66d <unavailable> + 5741

    5    libc.so.6                          0x00002ba47e8d2460 __libc_start_main +
    245

    6    tmp98guc7q2                        0x000055da8c1ee289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x + y == z) ||\
    \ (x + z == y) || (y + z == x) {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpv45rqy24/tmpv45rqy24.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc4b77fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4b476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4b476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4b4757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv45rqy24                        0x0000557d028f02d6 <unavailable> + 4822

    5    libc.so.6                          0x00002adc4b96b460 __libc_start_main +
    245

    6    tmpv45rqy24                        0x0000557d028efe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z ||\
    \ y == x + z || z == x + y {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpmthnv2cg/tmpmthnv2cg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cfd9c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cfd6b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cfd6b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cfd6b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmthnv2cg                        0x0000555b465e72d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b2cfdbae460 __libc_start_main +
    245

    6    tmpmthnv2cg                        0x0000555b465e6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 && (x + y == z || x + z == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmprgufs9qp/tmprgufs9qp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c4414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c410bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c410b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c410a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgufs9qp                        0x00005564894c977d <unavailable> + 6013

    5    libc.so.6                          0x00002ba3c4600460 __libc_start_main +
    245

    6    tmprgufs9qp                        0x00005564894c8f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    return sum == Int(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzsxi44j.swift:16:16: error: binary operator '==' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    return sum == Int(sum)\n       \
    \    ~~~ ^  ~~~~~~~~\n/tmp/tmptzsxi44j.swift:16:16: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    return sum ==\
    \ Int(sum)\n               ^\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let a = x == y+z\n\
    \    let b = y == x+z\n    let c = z == x+y\n    let d = floor(x) == x\n    let\
    \ e = floor(y) == y\n    let f = floor(z) == z\n    return (a || b || c) && d\
    \ && e && f\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptr5fopl4.swift:18:13: error: cannot find 'floor' in scope\n   \
    \ let d = floor(x) == x\n            ^~~~~\n/tmp/tmptr5fopl4.swift:19:13: error:\
    \ cannot find 'floor' in scope\n    let e = floor(y) == y\n            ^~~~~\n\
    /tmp/tmptr5fopl4.swift:20:13: error: cannot find 'floor' in scope\n    let f =\
    \ floor(z) == z\n            ^~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x == y +\
    \ z) || (y == x + z) || (z == x + y)) && (x == floor(x)) && (y == floor(y)) &&\
    \ (z == floor(z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8jjpima.swift:15:68: error: cannot find 'floor' in scope\n   \
    \ return ((x == y + z) || (y == x + z) || (z == x + y)) && (x == floor(x)) &&\
    \ (y == floor(y)) && (z == floor(z))\n                                       \
    \                            ^~~~~\n/tmp/tmpr8jjpima.swift:15:87: error: cannot\
    \ find 'floor' in scope\n    return ((x == y + z) || (y == x + z) || (z == x +\
    \ y)) && (x == floor(x)) && (y == floor(y)) && (z == floor(z))\n             \
    \                                                                         ^~~~~\n\
    /tmp/tmpr8jjpima.swift:15:106: error: cannot find 'floor' in scope\n    return\
    \ ((x == y + z) || (y == x + z) || (z == x + y)) && (x == floor(x)) && (y == floor(y))\
    \ && (z == floor(z))\n                                                       \
    \                                                  ^~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // x + y == z ||\
    \ y + z == x || x + z == y\n    var numbers: [Double] = [x, y, z]\n    numbers.sort()\n\
    \    if numbers[0] + numbers[1] == numbers[2] {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpy0nygiz6/tmpy0nygiz6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b086c8c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b086c5beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b086c5be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b086c5bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0nygiz6                        0x000055c6a84c3586 <unavailable> + 5510

    5    libc.so.6                          0x00002b086cab3460 __libc_start_main +
    245

    6    tmpy0nygiz6                        0x000055c6a84c3119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0x9xe93a/tmp0x9xe93a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d578e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d575d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d575d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d575d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x9xe93a                        0x000055a68801c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9d57acd460 __libc_start_main +
    245

    6    tmp0x9xe93a                        0x000055a68801bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if is_int(x) && is_int(y)\
    \ && is_int(z) {\n        if x + y == z || x + z == y || y + z == x {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptl188xcb.swift:15:8: error: cannot find 'is_int' in scope\n   \
    \ if is_int(x) && is_int(y) && is_int(z) {\n       ^~~~~~\n/tmp/tmptl188xcb.swift:15:21:\
    \ error: cannot find 'is_int' in scope\n    if is_int(x) && is_int(y) && is_int(z)\
    \ {\n                    ^~~~~~\n/tmp/tmptl188xcb.swift:15:34: error: cannot find\
    \ 'is_int' in scope\n    if is_int(x) && is_int(y) && is_int(z) {\n          \
    \                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (x + y == z || x + z == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwpttp4bz/tmpwpttp4bz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6846923c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b684661ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b684661a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68466197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpttp4bz                        0x0000562b8564077d <unavailable> + 6013

    5    libc.so.6                          0x00002b6846b0f460 __libc_start_main +
    245

    6    tmpwpttp4bz                        0x0000562b8563ff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp_sf30zh3/tmp_sf30zh3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d4d884c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d4d57bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d4d57b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d4d57a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sf30zh3                        0x0000558e2daaf1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b6d4da70460 __libc_start_main +
    245

    6    tmp_sf30zh3                        0x0000558e2daaee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result = false\n\
    \    if x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0{\n        if x == y + z\
    \ || y == x + z || z == x + y {\n            result = true\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpq20casok/tmpq20casok.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c9fc0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c9f904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c9f904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c9f9037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq20casok                        0x000055cb9ccbd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b0c9fdf9460 __libc_start_main +
    245

    6    tmpq20casok                        0x000055cb9ccbcf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if (x == y + z || y == x + z || z == x + y) {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpzi94u4st/tmpzi94u4st.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b910bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi94u4st                        0x00005643b6ea377d <unavailable> + 6013

    5    libc.so.6                          0x00002b2b912a9460 __libc_start_main +
    245

    6    tmpzi94u4st                        0x00005643b6ea2f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    let areInts = x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0\n    return areInts &&\
    \ (x == sum - y - z || y == sum - x - z || z == sum - x - y)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5txizett/tmp5txizett.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade29e70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade29b67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade29b67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade29b667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5txizett                        0x000055bf96eaf43a <unavailable> + 5178

    5    libc.so.6                          0x00002ade2a05c460 __libc_start_main +
    245

    6    tmp5txizett                        0x000055bf96eaef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqj0n2gyu/tmpqj0n2gyu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfb531bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfb5012b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfb5012988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfb50117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqj0n2gyu                        0x0000563a8cb6d43a <unavailable> + 5178

    5    libc.so.6                          0x00002acfb5507460 __libc_start_main +
    245

    6    tmpqj0n2gyu                        0x0000563a8cb6cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpoey0541y/tmpoey0541y.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de7a95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de778cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de778c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de778b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoey0541y                        0x0000564c4e97177d <unavailable> + 6013

    5    libc.so.6                          0x00002b6de7c81460 __libc_start_main +
    245

    6    tmpoey0541y                        0x0000564c4e970f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == (y +\
    \ z) || y == (x + z) || z == (x + y)) && (x.truncatingRemainder(dividingBy: 1)\
    \ == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpfju01_d0/tmpfju01_d0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b403c3abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b403c0a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b403c0a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b403c0a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfju01_d0                        0x0000558d0bbf777d <unavailable> + 6013

    5    libc.so.6                          0x00002b403c597460 __libc_start_main +
    245

    6    tmpfju01_d0                        0x0000558d0bbf6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result = false\n\
    \    if Int(x) + Int(y) == Int(z) {\n        result = true\n    } else if Int(x)\
    \ + Int(z) == Int(y) {\n        result = true\n    } else if Int(y) + Int(z) ==\
    \ Int(x) {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwd5ybj_8/tmpwd5ybj_8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66fe809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66fe500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66fe500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66fe4ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwd5ybj_8                        0x00005607de13272d <unavailable> + 5933

    5    libc.so.6                          0x00002b66fe9f5460 __libc_start_main +
    245

    6    tmpwd5ybj_8                        0x00005607de131ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0x9xe93a/tmp0x9xe93a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d578e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d575d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d575d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d575d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x9xe93a                        0x000055a68801c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9d57acd460 __libc_start_main +
    245

    6    tmp0x9xe93a                        0x000055a68801bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x.isInteger\
    \ && y.isInteger && z.isInteger && x + y == z || x + z == y || y + z == x\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2v8nfdls.swift:15:14: error: value of type 'Double' has no member\
    \ 'isInteger'\n    return x.isInteger && y.isInteger && z.isInteger && x + y ==\
    \ z || x + z == y || y + z == x\n           ~ ^~~~~~~~~\n/tmp/tmp2v8nfdls.swift:15:29:\
    \ error: value of type 'Double' has no member 'isInteger'\n    return x.isInteger\
    \ && y.isInteger && z.isInteger && x + y == z || x + z == y || y + z == x\n  \
    \                        ~ ^~~~~~~~~\n/tmp/tmp2v8nfdls.swift:15:44: error: value\
    \ of type 'Double' has no member 'isInteger'\n    return x.isInteger && y.isInteger\
    \ && z.isInteger && x + y == z || x + z == y || y + z == x\n                 \
    \                        ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpi12keeyb/tmpi12keeyb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16b0debc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16b0ae2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16b0ae2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16b0ae17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi12keeyb                        0x000055c4c718f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b16b0fd7460 __libc_start_main +
    245

    6    tmpi12keeyb                        0x000055c4c718ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && ((x + y == z) || (x + z == y) || (y + z == x))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpoqocdcgp/tmpoqocdcgp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fa4945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fa463cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fa463c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fa463b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqocdcgp                        0x000055d3f622777d <unavailable> + 6013

    5    libc.so.6                          0x00002b9fa4b31460 __libc_start_main +
    245

    6    tmpoqocdcgp                        0x000055d3f6226f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z || x == y - z || y == x + z || y == x - z || z == x + y || z == x - y) &&\
    \ (x.truncatingRemainder(dividingBy: 1) == 0 || y.truncatingRemainder(dividingBy:\
    \ 1) == 0 || z.truncatingRemainder(dividingBy: 1) == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpzgndo39m/tmpzgndo39m.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac251937c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac25162eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac25162e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac25162d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgndo39m                        0x0000557ab0c7f3b6 <unavailable> + 5046

    5    libc.so.6                          0x00002ac251b23460 __libc_start_main +
    245

    6    tmpzgndo39m                        0x0000557ab0c7ef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x - y ==\
    \ z || x - z == y || y - x == z || y - z == x || z - x == y || z - y == x) &&\
    \ (Int(x) == x && Int(y) == y && Int(z) == z)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcnmub804.swift:15:109: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return (x - y == z || x - z == y || y -\
    \ x == z || y - z == x || z - x == y || z - y == x) && (Int(x) == x && Int(y)\
    \ == y && Int(z) == z)\n                                                     \
    \                                                       ^\n                  \
    \                                                                            \
    \              Int( )\n/tmp/tmpcnmub804.swift:15:124: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n    return (x - y == z ||\
    \ x - z == y || y - x == z || y - z == x || z - x == y || z - y == x) && (Int(x)\
    \ == x && Int(y) == y && Int(z) == z)\n                                      \
    \                                                                            \
    \         ^\n                                                                \
    \                                                           Int( )\n/tmp/tmpcnmub804.swift:15:139:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return (x - y == z || x - z == y || y - x == z || y - z == x || z - x ==\
    \ y || z - y == x) && (Int(x) == x && Int(y) == y && Int(z) == z)\n          \
    \                                                                            \
    \                                                    ^\n                     \
    \                                                                            \
    \                                         Int( )\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == Double(Int(x))\
    \ && y == Double(Int(y)) && z == Double(Int(z)) && (x + y == z || x + z == y ||\
    \ y + z == x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpmugx9kht/tmpmugx9kht.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1a2e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1a2b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1a2b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1a2b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmugx9kht                        0x0000561e6fdf172d <unavailable> + 5933

    5    libc.so.6                          0x00002ac1a2ffc460 __libc_start_main +
    245

    6    tmpmugx9kht                        0x0000561e6fdf0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp41h456ih/tmp41h456ih.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c2decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c2ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c2ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c2ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41h456ih                        0x0000564c7efcd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b62c2fd8460 __libc_start_main +
    245

    6    tmp41h456ih                        0x0000564c7efccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == (y +\
    \ z) || y == (x + z) || z == (x + y)) && x == floor(x) && y == floor(y) && z ==\
    \ floor(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu7bqvvih.swift:15:67: error: cannot find 'floor' in scope\n   \
    \ return (x == (y + z) || y == (x + z) || z == (x + y)) && x == floor(x) && y\
    \ == floor(y) && z == floor(z)\n                                             \
    \                     ^~~~~\n/tmp/tmpu7bqvvih.swift:15:84: error: cannot find\
    \ 'floor' in scope\n    return (x == (y + z) || y == (x + z) || z == (x + y))\
    \ && x == floor(x) && y == floor(y) && z == floor(z)\n                       \
    \                                                            ^~~~~\n/tmp/tmpu7bqvvih.swift:15:101:\
    \ error: cannot find 'floor' in scope\n    return (x == (y + z) || y == (x + z)\
    \ || z == (x + y)) && x == floor(x) && y == floor(y) && z == floor(z)\n      \
    \                                                                            \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x == y + z || y == x + z || z == x + y {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp71h5e18i/tmp71h5e18i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e01a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dfe9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dfe9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dfe9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71h5e18i                        0x0000559f23b0777d <unavailable> + 6013

    5    libc.so.6                          0x00002ad1e0391460 __libc_start_main +
    245

    6    tmp71h5e18i                        0x0000559f23b06f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y ==\
    \ z) || (x + z == y) || (y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpd4s2ewo8/tmpd4s2ewo8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd7ac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd77b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd77b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd77b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4s2ewo8                        0x000055ddcfa682d6 <unavailable> + 4822

    5    libc.so.6                          0x00002abdd7cad460 __libc_start_main +
    245

    6    tmpd4s2ewo8                        0x000055ddcfa67e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x == y + z ||\
    \ y == x + z || z == x + y) && (isInteger(x) && isInteger(y) && isInteger(z))\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplkf93bz1.swift:15:53: error: cannot find 'isInteger' in scope\n\
    \    if (x == y + z || y == x + z || z == x + y) && (isInteger(x) && isInteger(y)\
    \ && isInteger(z)) {\n                                                    ^~~~~~~~~\n\
    /tmp/tmplkf93bz1.swift:15:69: error: cannot find 'isInteger' in scope\n    if\
    \ (x == y + z || y == x + z || z == x + y) && (isInteger(x) && isInteger(y) &&\
    \ isInteger(z)) {\n                                                          \
    \          ^~~~~~~~~\n/tmp/tmplkf93bz1.swift:15:85: error: cannot find 'isInteger'\
    \ in scope\n    if (x == y + z || y == x + z || z == x + y) && (isInteger(x) &&\
    \ isInteger(y) && isInteger(z)) {\n                                          \
    \                                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !x.isInteger ||\
    \ !y.isInteger || !z.isInteger {\n        return false\n    }\n    let sum = x\
    \ + y + z\n    if x == sum / 2 || y == sum / 2 || z == sum / 2 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjpk9g72k.swift:15:11: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if !x.isInteger || !y.isInteger || !z.isInteger {\n       \
    \ ~ ^~~~~~~~~\n/tmp/tmpjpk9g72k.swift:15:27: error: value of type 'Double' has\
    \ no member 'isInteger'\n    if !x.isInteger || !y.isInteger || !z.isInteger {\n\
    \                        ~ ^~~~~~~~~\n/tmp/tmpjpk9g72k.swift:15:43: error: value\
    \ of type 'Double' has no member 'isInteger'\n    if !x.isInteger || !y.isInteger\
    \ || !z.isInteger {\n                                        ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    if (fmod(sum, 1) == 0) {\n        return true\n    }\n    else {\n  \
    \      return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdcz9eikw.swift:16:9: error: cannot find 'fmod' in scope\n    if\
    \ (fmod(sum, 1) == 0) {\n        ^~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x.truncatingRemainder(dividingBy:\
    \ 1) == 0 || y.truncatingRemainder(dividingBy: 1) == 0 || z.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (x + y == z || x + z == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmptko2vgk6/tmptko2vgk6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17e3cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17e39f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17e39f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17e39f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptko2vgk6                        0x000055b91d4723b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b17e3eea460 __libc_start_main +
    245

    6    tmptko2vgk6                        0x000055b91d471f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let x_is_int = floor(x)\
    \ == x\n    let y_is_int = floor(y) == y\n    let z_is_int = floor(z) == z\n \
    \   let left_sum = x + y\n    let right_sum = y + z\n    let x_sum = x + z\n \
    \   let sum_test = (x_sum == z) || (left_sum == z) || (right_sum == x)\n    return\
    \ x_is_int && y_is_int && z_is_int && sum_test\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6jxt1ppt.swift:15:20: error: cannot find 'floor' in scope\n   \
    \ let x_is_int = floor(x) == x\n                   ^~~~~\n/tmp/tmp6jxt1ppt.swift:16:20:\
    \ error: cannot find 'floor' in scope\n    let y_is_int = floor(y) == y\n    \
    \               ^~~~~\n/tmp/tmp6jxt1ppt.swift:17:20: error: cannot find 'floor'\
    \ in scope\n    let z_is_int = floor(z) == z\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var result = false\n\
    \    if x == y + z {\n        result = true\n    } else if y == x + z {\n    \
    \    result = true\n    } else if z == x + y {\n        result = true\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpin7vu2qc/tmpin7vu2qc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37b45a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37b429ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37b429a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37b42997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin7vu2qc                        0x000055cb2d55e2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b37b478f460 __libc_start_main +
    245

    6    tmpin7vu2qc                        0x000055cb2d55de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x == y + z) ||\
    \ (y == x + z) || (z == x + y) {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpologo7yz/tmpologo7yz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b501a011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5019d08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5019d08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5019d077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpologo7yz                        0x00005638ffc5a2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b501a1fd460 __libc_start_main +
    245

    6    tmpologo7yz                        0x00005638ffc59e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !is_int(num: x)\
    \ || !is_int(num: y) || !is_int(num: z) {\n        return false\n    }\n    if\
    \ x == y + z || y == x + z || z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp83hdgy6q.swift:15:9: error: cannot find 'is_int' in scope\n   \
    \ if !is_int(num: x) || !is_int(num: y) || !is_int(num: z) {\n        ^~~~~~\n\
    /tmp/tmp83hdgy6q.swift:15:28: error: cannot find 'is_int' in scope\n    if !is_int(num:\
    \ x) || !is_int(num: y) || !is_int(num: z) {\n                           ^~~~~~\n\
    /tmp/tmp83hdgy6q.swift:15:47: error: cannot find 'is_int' in scope\n    if !is_int(num:\
    \ x) || !is_int(num: y) || !is_int(num: z) {\n                               \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x + y ==\
    \ z || x + z == y || y + z == x) && x.truncatingRemainder(dividingBy: 1) == 0\
    \ && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpdkjkl93c/tmpdkjkl93c.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e87af6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e877edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e877ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e877ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkjkl93c                        0x00005572d69a377d <unavailable> + 6013

    5    libc.so.6                          0x00002b2e87ce2460 __libc_start_main +
    245

    6    tmpdkjkl93c                        0x00005572d69a2f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if (x+y == z) ||\
    \ (x+z == y) || (y+z == x) {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp1mc_tk6q/tmp1mc_tk6q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bae4afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bae1a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bae1a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bae1a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mc_tk6q                        0x0000558e4be132d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b2bae69b460 __libc_start_main +
    245

    6    tmp1mc_tk6q                        0x0000558e4be12e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    if sum.truncatingRemainder(dividingBy: 1) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpbo5xonko/tmpbo5xonko.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7913545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b791323cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b791323c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b791323b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbo5xonko                        0x00005631eb47f3b6 <unavailable> + 5046

    5    libc.so.6                          0x00002b7913731460 __libc_start_main +
    245

    6    tmpbo5xonko                        0x00005631eb47ef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcbdgqjvd/tmpcbdgqjvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606a78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606a485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606a485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606a4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbdgqjvd                        0x000055f9957891c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b606a97a460 __libc_start_main +
    245

    6    tmpcbdgqjvd                        0x000055f995788e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979039
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ || y == x + z || z == x + y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmps1qwg9r8/tmps1qwg9r8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b567f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b564e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b564e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b564e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1qwg9r8                        0x000055fae02b62d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b7b569dc460 __libc_start_main +
    245

    6    tmps1qwg9r8                        0x000055fae02b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return  x.truncatingRemainder(dividingBy:\
    \ 1) == 0 &&\n            y.truncatingRemainder(dividingBy: 1) == 0 &&\n     \
    \       z.truncatingRemainder(dividingBy: 1) == 0 &&\n            (x + y == z\
    \ || x + z == y || y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpexnsx1ft/tmpexnsx1ft.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a527b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a524aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a524aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a524a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexnsx1ft                        0x00005606c19ba77d <unavailable> + 6013

    5    libc.so.6                          0x00002b7a5299f460 __libc_start_main +
    245

    6    tmpexnsx1ft                        0x00005606c19b9f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !x.isInteger ||\
    \ !y.isInteger || !z.isInteger {\n        return false\n    }\n    return (x +\
    \ y == z) || (x + z == y) || (y + z == x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmuig7ndf.swift:15:11: error: value of type 'Double' has no member\
    \ 'isInteger'\n    if !x.isInteger || !y.isInteger || !z.isInteger {\n       \
    \ ~ ^~~~~~~~~\n/tmp/tmpmuig7ndf.swift:15:27: error: value of type 'Double' has\
    \ no member 'isInteger'\n    if !x.isInteger || !y.isInteger || !z.isInteger {\n\
    \                        ~ ^~~~~~~~~\n/tmp/tmpmuig7ndf.swift:15:43: error: value\
    \ of type 'Double' has no member 'isInteger'\n    if !x.isInteger || !y.isInteger\
    \ || !z.isInteger {\n                                        ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979040
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return (x == y + z) || (y == x + z) || (z == x + y)\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmps9gfry3a/tmps9gfry3a.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab022ee5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab022bdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab022bdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab022bdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps9gfry3a                        0x000055a8084f077d <unavailable> + 6013

    5    libc.so.6                          0x00002ab0230d1460 __libc_start_main +
    245

    6    tmps9gfry3a                        0x000055a8084eff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return x + y == z || x + z == y || y + z == x\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpjyd9c0sc/tmpjyd9c0sc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b383a8c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383a5bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b383a5bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b383a5ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyd9c0sc                        0x0000563741d9477d <unavailable> + 6013

    5    libc.so.6                          0x00002b383aab0460 __libc_start_main +
    245

    6    tmpjyd9c0sc                        0x0000563741d93f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x % 1 ==\
    \ 0 || y % 1 == 0 || z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkjito01.swift:15:15: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n    return (x % 1 == 0 || y % 1 ==\
    \ 0 || z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n             \
    \ ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmpzkjito01.swift:15:29: error: '%' is unavailable: For floating point numbers\
    \ use truncatingRemainder instead\n    return (x % 1 == 0 || y % 1 == 0 || z %\
    \ 1 == 0) && (x + y == z || x + z == y || y + z == x)\n                      \
    \      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzkjito01.swift:15:43: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n    return (x % 1 == 0 || y %\
    \ 1 == 0 || z % 1 == 0) && (x + y == z || x + z == y || y + z == x)\n        \
    \                                  ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if (x % 1 == 0) &&\
    \ (y % 1 == 0) && (z % 1 == 0) {\n    if (x + y == z) || (x + z == y) || (y +\
    \ z == x) {\n      return true\n    }\n  }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp265s4s1d.swift:15:9: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n  if (x % 1 == 0) && (y % 1 == 0) &&\
    \ (z % 1 == 0) {\n        ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp265s4s1d.swift:15:25: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n  if (x % 1 == 0) && (y % 1 ==\
    \ 0) && (z % 1 == 0) {\n                        ^\nSwift.%:2:13: note: '%' has\
    \ been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) ->\
    \ T where T : BinaryFloatingPoint\n            ^\n/tmp/tmp265s4s1d.swift:15:41:\
    \ error: '%' is unavailable: For floating point numbers use truncatingRemainder\
    \ instead\n  if (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0) {\n             \
    \                           ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == (y + z) ||\
    \ y == (x + z) || z == (x + y) {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp568x53np/tmp568x53np.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf57302c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf56ff9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf56ff9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf56ff87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp568x53np                        0x0000557e8bbfb2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002adf574ee460 __libc_start_main +
    245

    6    tmp568x53np                        0x0000557e8bbfae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if Int(x) == Int(y)\
    \ + Int(z) || Int(x) == Int(y) - Int(z) || Int(x) == Int(z) - Int(y) {\n     \
    \   return true\n    } else if Int(y) == Int(x) + Int(z) || Int(y) == Int(x) -\
    \ Int(z) || Int(y) == Int(z) - Int(x) {\n        return true\n    } else if Int(z)\
    \ == Int(x) + Int(y) || Int(z) == Int(x) - Int(y) || Int(z) == Int(y) - Int(x)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp41xrf3l9/tmp41xrf3l9.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b266a780c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266a477b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b266a477988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b266a4767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41xrf3l9                        0x000055908c38c72d <unavailable> + 5933

    5    libc.so.6                          0x00002b266a96c460 __libc_start_main +
    245

    6    tmp41xrf3l9                        0x000055908c38bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979041
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if (x == y + z) || (y == x + z) || (z == x + y) {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpd_r5ndf1/tmpd_r5ndf1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35f9028c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35f8d1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35f8d1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35f8d1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_r5ndf1                        0x000056339e37a77d <unavailable> + 6013

    5    libc.so.6                          0x00002b35f9214460 __libc_start_main +
    245

    6    tmpd_r5ndf1                        0x000056339e379f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659979041
