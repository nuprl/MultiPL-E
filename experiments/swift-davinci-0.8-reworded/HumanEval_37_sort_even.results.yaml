language: swift
name: HumanEval_37_sort_even
results:
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l1: [Int] = []\n\
    \    var l2: [Int] = []\n    for (index, _) in l.enumerated() {\n        if index\
    \ % 2 == 0 {\n            l1.append(l[index])\n        } else {\n            l2.append(l[index])\n\
    \        }\n    }\n    l2.sort()\n    return l1 + l2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp05gqltho/tmp05gqltho.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9978088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9977d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9977d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9977d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp05gqltho                        0x00005633137f9894 <unavailable> + 6292

    5    libc.so.6                          0x00002b9978274460 __libc_start_main +
    245

    6    tmp05gqltho                        0x00005633137f9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if (l.count == 0) {\n\
    \        return l\n    } else {\n        let e = l.count % 2 == 0\n        var\
    \ r = l\n        var i = 0\n        if e {\n            i = 1\n        }\n   \
    \     for _ in 0..<(l.count/2) {\n            let low = r[i]\n            let\
    \ hi = r[i+1]\n            if low > hi {\n                r[i] = hi\n        \
    \        r[i+1] = low\n            }\n            i += 2\n        }\n        return\
    \ r\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmppnqa_zgr/tmppnqa_zgr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08365a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083629ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083629a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08362997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnqa_zgr                        0x000055d8a3ed1803 <unavailable> + 6147

    5    libc.so.6                          0x00002b083678f460 __libc_start_main +
    245

    6    tmppnqa_zgr                        0x000055d8a3ed1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var lr = l // init\
    \ new array\n    var left = [Int]() // init temporary array\n    var right = [Int]()\
    \ // init temporary array\n    if l.count == 1 { // if l contains only one element\n\
    \        return lr // return lr\n    }\n    else { // if l contains more than\
    \ one element\n        var i = 0 // init counter\n        while i < l.count {\
    \ // while i is less than the length of l\n            if i % 2 == 0 { // if i\
    \ is even\n                left.append(l[i]) // add l[i] to left\n           \
    \ }\n            else { // if i is odd\n                right.append(l[i]) //\
    \ add l[i] to right\n            }\n            i += 1 // increment i\n      \
    \  }\n        left = insertion_sort(l: left) // sort left\n        var j = 0 //\
    \ init counter\n        while j < left.count { // while j is less than the length\
    \ of left\n            lr[j*2] = left[j] // set lr[2*j] equal to left[j]\n   \
    \         j += 1 // increment j\n        }\n        return lr // return lr\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvtflugkf.swift:27:16: error: cannot find 'insertion_sort' in scope\n\
    \        left = insertion_sort(l: left) // sort left\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var evens = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            l_copy[i] = evens[i/2]\n\
    \        }\n    }\n    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let even = l.enumerated().filter{$0.offset\
    \ % 2 == 0}.map{$0.element}\n    let even_sorted = even.sorted()\n    var i =\
    \ 0\n    return l.map { (x) -> Int in\n        let res = i % 2 == 0 ? even_sorted[i/2]\
    \ : x\n        i += 1\n        return res\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count <= 1 {\n\
    \        return l\n    } else {\n        var even = [Int]()\n        var odd =\
    \ [Int]()\n        for (i, e) in l.enumerated() {\n            if i % 2 == 0 {\n\
    \                odd.append(e)\n            } else {\n                even.append(e)\n\
    \            }\n        }\n        even.sort()\n        var result = [Int]()\n\
    \        for (i, _) in l.enumerated() {\n            if i % 2 == 0 {\n       \
    \         result.append(odd[i / 2])\n            } else {\n                result.append(even[i\
    \ / 2])\n            }\n        }\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpg7fu635k/tmpg7fu635k.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37a5c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37a58fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37a58fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37a58f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7fu635k                        0x000055c41fe9faa3 <unavailable> + 6819

    5    libc.so.6                          0x00002b37a5def460 __libc_start_main +
    245

    6    tmpg7fu635k                        0x000055c41fe9f4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var arr1 = [Int]()\n\
    \    var arr2 = [Int]()\n    for (index, item) in l.enumerated() {\n        if\
    \ index % 2 == 0 {\n            arr1.append(item)\n        } else {\n        \
    \    arr2.append(item)\n        }\n    }\n    arr2.sort()\n    var a = 0\n   \
    \ for (index, item) in l.enumerated() {\n        if index % 2 == 0 {\n       \
    \     arr1.insert(arr2[a], at: index)\n            a += 1\n        }\n    }\n\
    \    return arr1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad878a4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad878745561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad878745286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad87874513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad878744bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad878544e83 <unavailable> + 188035

    6    tmpjr9i37bz                        0x000056312ad1e146 <unavailable> + 8518

    7    tmpjr9i37bz                        0x000056312ad1d814 <unavailable> + 6164

    8    libc.so.6                          0x00002ad878c3a460 __libc_start_main +
    245

    9    tmpjr9i37bz                        0x000056312ad1d4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  var array = l\n  for\
    \ i in 0..<l.count {\n    if(i % 2 == 0) {\n      array[i] = l[i]\n    } else\
    \ {\n      var temp = l[i]\n      var j = i\n      while(j > 0 && array[j - 1]\
    \ > temp) {\n        array[j] = array[j - 1]\n        j -= 1\n      }\n      array[j]\
    \ = temp\n    }\n  }\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7epxl0yu/tmp7epxl0yu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab01f228c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab01ef1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab01ef1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab01ef1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7epxl0yu                        0x0000559f8277a803 <unavailable> + 6147

    5    libc.so.6                          0x00002ab01f414460 __libc_start_main +
    245

    6    tmp7epxl0yu                        0x0000559f8277a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n\
    \        return []\n    } else if l.count == 1 {\n        return l\n    } else\
    \ {\n        var l = l\n        l[1...l.count-1] = sort_even(l: Array(l[1...l.count-1]))\n\
    \        if l[0] > l[1] {\n            swap(&l[0], &l[1])\n        }\n       \
    \ return l\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpjmeo7hct.swift:16:28: error: cannot assign value of type '[Int]'\
    \ to subscript of type 'ArraySlice<Int>'\n        l[1...l.count-1] = sort_even(l:\
    \ Array(l[1...l.count-1]))\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var temp = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for i in 0...l.count-1 {\n    \
    \    if (i%2 == 0) {\n            evens.append(l[i])\n        } else {\n     \
    \       odds.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0...evens.count-1\
    \ {\n        temp[2*i] = evens[i]\n    }\n    for i in 0...odds.count-1 {\n  \
    \      temp[2*i+1] = odds[i]\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n\
    \        return []\n    } else if l.count == 1 {\n        return l\n    } else\
    \ {\n        var evens = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element\
    \ }\n        var odds = l.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element\
    \ }\n        evens.sort()\n        var result = [Int]()\n        for i in 0..<odds.count\
    \ {\n            result.append(evens[i])\n            result.append(odds[i])\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr37i3lx2/tmpr37i3lx2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a0f9eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a0f6e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a0f6e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a0f6e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr37i3lx2                        0x000055fbc1f479e4 <unavailable> + 6628

    5    libc.so.6                          0x00002b9a0fbda460 __libc_start_main +
    245

    6    tmpr37i3lx2                        0x000055fbc1f475e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_odd: [Int] =\
    \ []\n    var l_even: [Int] = []\n    for (i, value) in l.enumerated() {\n   \
    \     if i % 2 == 0 {\n            l_odd.append(value)\n        } else {\n   \
    \         l_even.append(value)\n        }\n    }\n    l_even.sort()\n    var l_output:\
    \ [Int] = []\n    for (i, value) in l_odd.enumerated() {\n        l_output.append(value)\n\
    \        l_output.append(l_even[i])\n    }\n    return l_output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b408ed4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b408ea45561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b408ea45286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b408ea4513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b408ea44bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b408e844e83 <unavailable> + 188035

    6    tmprjxr8ogx                        0x000055eaaab75042 <unavailable> + 8258

    7    tmprjxr8ogx                        0x000055eaaab74764 <unavailable> + 5988

    8    libc.so.6                          0x00002b408ef3a460 __libc_start_main +
    245

    9    tmprjxr8ogx                        0x000055eaaab74449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    var l_new = [Int]()\n    for (index, i) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odd.append(i)\n        } else {\n\
    \            even.append(i)\n        }\n    }\n    even.sort()\n    for (index,\
    \ i) in l.enumerated() {\n        if index % 2 == 0 {\n            l_new.append(i)\n\
    \        } else {\n            l_new.append(even[0])\n            even.remove(at:\
    \ 0)\n        }\n    }\n    return l_new\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpb2n934nx/tmpb2n934nx.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b244e0b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b244ddafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b244ddaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b244ddae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2n934nx                        0x00005576f8fe4aa3 <unavailable> + 6819

    5    libc.so.6                          0x00002b244e2a4460 __libc_start_main +
    245

    6    tmpb2n934nx                        0x00005576f8fe44f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmppfsbh8rm.swift:10:6: error: expected pattern\n  var \n     ^\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var arr = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    var newArr = [Int]()\n    for (index,\
    \ num) in arr.enumerated() {\n        if index % 2 == 0 {\n            odds.append(num)\n\
    \        } else {\n            evens.append(num)\n        }\n    }\n    evens.sort()\n\
    \    for (index, num) in arr.enumerated() {\n        if index % 2 == 0 {\n   \
    \         newArr.append(odds[index/2])\n        } else {\n            newArr.append(evens[index/2])\n\
    \        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpy8kcx5e2/tmpy8kcx5e2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f27fc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f27cbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f27cbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f27cbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8kcx5e2                        0x00005608ad583a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b6f281b4460 __libc_start_main +
    245

    6    tmpy8kcx5e2                        0x00005608ad583499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var arr = l\n    var\
    \ evenIndexArr: [Int] = []\n    for i in 0..<arr.count {\n        if i % 2 ==\
    \ 0 {\n            evenIndexArr.append(arr[i])\n        }\n    }\n    var evenIndexArrSorted\
    \ = evenIndexArr.sorted(by: <)\n    let evenIndexArrCount = evenIndexArr.count\n\
    \    for i in 0..<evenIndexArrCount {\n        arr[2*i] = evenIndexArrSorted[i]\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return l.enumerated().map\
    \ { $0.offset % 2 == 0 ? $0.element : l[$0.offset-1] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpwg0378vy/tmpwg0378vy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9b8785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9b847cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9b847c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9b847b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwg0378vy                        0x00005609fc84b634 <unavailable> + 5684

    5    libc.so.6                          0x00002ac9b8971460 __libc_start_main +
    245

    6    tmpwg0378vy                        0x00005609fc84b239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n\t\n\t// If the array is\
    \ empty, just return the empty array\n\tif l.count == 0 {\n\t\treturn l\n\t}\n\
    \t\n\t// Initialize the new array with the first element\n\tvar newL = [l[0]]\n\
    \t\n\t// Loop through the rest of the array\n\tfor i in 1..<l.count {\n\t\t\n\t\
    \t// If this is an even index, we need to insert the value in its proper position\n\
    \t\tif i % 2 == 0 {\n\t\t\t\n\t\t\t// If the value is less than the last value\
    \ in the array, then we need to insert it at the end of the array\n\t\t\tif l[i]\
    \ > newL[newL.count - 1] {\n\t\t\t\tnewL.append(l[i])\n\t\t\t}\n\t\t\t\n\t\t\t\
    // Otherwise, we need to insert the value in its proper position\n\t\t\telse {\n\
    \t\t\t\t// Search for the correct index in the array\n\t\t\t\tvar index = newL.count\
    \ - 1\n\t\t\t\twhile newL[index] > l[i] {\n\t\t\t\t\tindex -= 1\n\t\t\t\t}\n\t\
    \t\t\t\n\t\t\t\t// Insert the value at the found index\n\t\t\t\tnewL.insert(l[i],\
    \ at: index + 1)\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Otherwise, just append the value\
    \ to the end of the array\n\t\telse {\n\t\t\tnewL.append(l[i])\n\t\t}\n\t}\n\t\
    \n\treturn newL\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b44603a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44600a0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b44600a0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b44600a013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b446009fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b445fe9fe83 <unavailable> + 188035

    6    tmpzsfoi4st                        0x00005638d3f52e02 <unavailable> + 7682

    7    tmpzsfoi4st                        0x00005638d3f5273f <unavailable> + 5951

    8    libc.so.6                          0x00002b4460595460 __libc_start_main +
    245

    9    tmpzsfoi4st                        0x00005638d3f522b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var s = l\n    let\
    \ evens = l.enumerated().filter({$0.offset % 2 == 0}).map({$0.element})\n    let\
    \ sorted = evens.sorted()\n    var index = 0\n    for i in 0..<s.count {\n   \
    \     if i % 2 == 0 {\n            s[i] = sorted[index]\n            index +=\
    \ 1\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even_unsorted:\
    \ [Int] = []\n    var l_even_sorted: [Int] = []\n    var l_odd: [Int] = []\n \
    \   var l_prime: [Int] = []\n    \n    if l.count <= 1 {\n        return l\n \
    \   }\n    \n    for i in 0..<l.count {\n        if i % 2 == 0 {\n           \
    \ l_odd.append(l[i])\n        } else {\n            l_even_unsorted.append(l[i])\n\
    \        }\n    }\n    \n    l_even_sorted = merge_sort(l: l_even_unsorted)\n\
    \    \n    var k = 0\n    for i in 0..<l_odd.count {\n        l_prime.append(l_odd[i])\n\
    \        l_prime.append(l_even_sorted[k])\n        k += 1\n    }\n    \n    return\
    \ l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_urz8h_0.swift:27:21: error: cannot find 'merge_sort' in scope\n\
    \    l_even_sorted = merge_sort(l: l_even_unsorted)\n                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return l.reduce(into:\
    \ [Int](), { res, next in\n        if res.count % 2 == 0 {\n            res.append(next)\n\
    \        } else {\n            let toInsert = sorted(l: res[res.count - 1..<res.count\
    \ + 1] + [next])[1]\n            res.append(toInsert)\n        }\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpacm5dt_b.swift:14:28: error: cannot find 'sorted' in scope\n  \
    \          let toInsert = sorted(l: res[res.count - 1..<res.count + 1] + [next])[1]\n\
    \                           ^~~~~~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_p = l\n    var\
    \ l_even = [Int]()\n    var l_odd = [Int]()\n    // For every index in l_p.\n\
    \    for index in 0...l_p.count - 1 {\n        // If the index is even, add it\
    \ to l_even.\n        if index % 2 == 0 {\n            l_even.append(l_p[index])\n\
    \        }\n        // If the index is odd, add it to l_odd.\n        else {\n\
    \            l_odd.append(l_p[index])\n        }\n    }\n    // Sort l_even.\n\
    \    l_even.sort()\n    // Replace the values of l_p's even indicies with the\
    \ values of l_even.\n    for index in 0...l_even.count - 1 {\n        l_p[index\
    \ * 2] = l_even[index]\n    }\n    // Return l_p.\n    return l_p\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let newArray: [Int]\
    \ = l.enumerated().map { (x, element) in\n        if x % 2 == 0 {\n          \
    \  return element\n        } else {\n            let temp: [Int] = l.enumerated().map\
    \ { ($0.offset % 2 != 0) ? $0.element : 0 }\n            return temp.sorted()[x/2]\n\
    \        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpi8eg9b3q/tmpi8eg9b3q.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad97f3f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad97f0edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad97f0ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad97f0ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8eg9b3q                        0x000055625fa606d4 <unavailable> + 5844

    5    libc.so.6                          0x00002ad97f5e2460 __libc_start_main +
    245

    6    tmpi8eg9b3q                        0x000055625fa602d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count < 2 {\n\
    \        return l\n    } else {\n        let evens = l.enumerated().filter{ $0.offset\
    \ % 2 == 0 }.map{ $0.element }\n        let odds = l.enumerated().filter{ $0.offset\
    \ % 2 == 1 }.map{ $0.element }\n        let sortedEvens = evens.sorted()\n   \
    \     var new_l = [Int]()\n        for i in 0..<sortedEvens.count {\n        \
    \    new_l.append(sortedEvens[i])\n            new_l.append(odds[i])\n       \
    \ }\n        return new_l\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3103232c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3102f29561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3102f29286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3102f2913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3102f28bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3102d28e83 <unavailable> + 188035

    6    tmpr_pipf36                        0x000055b4c53591e1 <unavailable> + 8673

    7    tmpr_pipf36                        0x000055b4c5358894 <unavailable> + 6292

    8    libc.so.6                          0x00002b310341e460 __libc_start_main +
    245

    9    tmpr_pipf36                        0x000055b4c5358579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n   \
    \ if l.count < 2 {\n        return l\n    }\n    let even_indicies = Array(stride(from:\
    \ 0, to: l.count, by: 2))\n    let odd_indicies = Array(stride(from: 1, to: l.count,\
    \ by: 2))\n    var even_array = [Int]()\n    var odd_array = [Int]()\n    for\
    \ i in even_indicies {\n        even_array.append(l[i])\n    }\n    for i in odd_indicies\
    \ {\n        odd_array.append(l[i])\n    }\n    even_array.sort()\n    new_l.removeSubrange(even_indicies)\n\
    \    new_l.insert(contentsOf: even_array, at: even_indicies[0])\n    return new_l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbtvbxki_.swift:25:26: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Range<Array<Int>.Index>' (aka 'Range<Int>')\n   \
    \ new_l.removeSubrange(even_indicies)\n                         ^\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens: [Int] =\
    \ []\n    var ret: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 ==\
    \ 0 {\n            ret.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    return ret + evens\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp40xrl07x/tmp40xrl07x.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612bf2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b612bc25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b612bc25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b612bc247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40xrl07x                        0x000055dfb4b697d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b612c11a460 __libc_start_main +
    245

    6    tmp40xrl07x                        0x000055dfb4b693d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return l.enumerated().map\
    \ { $0.offset % 2 == 0 ? $0.element : -1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2aclk17j/tmp2aclk17j.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab05de60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab05db57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab05db57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab05db567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2aclk17j                        0x00005575295ed5d4 <unavailable> + 5588

    5    libc.so.6                          0x00002ab05e04c460 __libc_start_main +
    245

    6    tmp2aclk17j                        0x00005575295ed1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // Implement here\n\
    \    var l1: [Int] = []\n    var i = 0\n    while i < l.count {\n        if i\
    \ % 2 == 0 {\n            l1.append(l[i])\n        } else {\n            var l_even\
    \ = l.dropFirst(i).prefix(2)\n            l_even.sort()\n            l1.append(l_even[0])\n\
    \            l1.append(l_even[1])\n        }\n        i += 1\n    }\n    return\
    \ l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/SliceBuffer.swift:287: Fatal error: Index out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dbf225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dbef1c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4dbef1c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4dbef1c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4dbef1bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b4dbef1329a <unavailable> + 1397402

    6    tmpwbaq7mjy                        0x0000557ecf2ebedb <unavailable> + 7899

    7    tmpwbaq7mjy                        0x0000557ecf2eb7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b4dbf411460 __libc_start_main +
    245

    9    tmpwbaq7mjy                        0x0000557ecf2eb499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] =\
    \ []\n    var even: [Int] = []\n    for (index, value) in l.enumerated() {\n \
    \       if index % 2 == 0 {\n            result.append(value)\n        } else\
    \ {\n            even.append(value)\n        }\n    }\n    even.sort()\n    for\
    \ (index, value) in even.enumerated() {\n        result.insert(value, at: 2 *\
    \ index + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmppnnfm2vx/tmppnnfm2vx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eb9796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eb948db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eb948d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eb948c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnnfm2vx                        0x000055b095b5a9f3 <unavailable> + 6643

    5    libc.so.6                          0x00002b0eb9982460 __libc_start_main +
    245

    6    tmppnnfm2vx                        0x000055b095b5a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = l.filter(is_even)\n\
    \    var l_odd = l.filter(is_odd)\n    l_even.sort(<)\n    var l_copy = l_even\n\
    \    for i in l_odd {\n        l_copy.append(i)\n    }\n    return l_copy\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmph6wxxzwn.swift:10:27: error: cannot find 'is_even' in scope\n \
    \   var l_even = l.filter(is_even)\n                          ^~~~~~~\n/tmp/tmph6wxxzwn.swift:10:27:\
    \ error: converting non-escaping value to '(Int) throws -> Bool' may allow it\
    \ to escape\n    var l_even = l.filter(is_even)\n                          ^\n\
    /tmp/tmph6wxxzwn.swift:11:26: error: cannot find 'is_odd' in scope\n    var l_odd\
    \ = l.filter(is_odd)\n                         ^~~~~~\n/tmp/tmph6wxxzwn.swift:11:26:\
    \ error: converting non-escaping value to '(Int) throws -> Bool' may allow it\
    \ to escape\n    var l_odd = l.filter(is_odd)\n                         ^\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l1 = l\n    var\
    \ even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }\n   \
    \ even.sort()\n    var i = 0\n    for j in 0..<l.count {\n        if j % 2 ==\
    \ 0 {\n            l1[j] = even[i]\n            i += 1\n        }\n    }\n   \
    \ return l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var lcopy = l\n   \
    \ let ns = NSMutableArray(array: l)\n    var evens = [Int]()\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        evens.append(l[i])\n    }\n    let sortedEvens\
    \ = evens.sorted()\n    for i in stride(from: 0, to: l.count, by: 2) {\n     \
    \   ns.replaceObject(at: i, with: sortedEvens[i/2])\n    }\n    return ns as!\
    \ [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpaok6jqr_.swift:11:14: error: cannot find 'NSMutableArray' in scope\n\
    \    let ns = NSMutableArray(array: l)\n             ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n\n \
    \   for i in stride(from: 0, to: l.count, by: 2) {\n        new_l[i] = l[i]\n\
    \    }\n\n    for i in stride(from: 1, to: l.count, by: 2) {\n        new_l[i]\
    \ = l[i].sorted()[0]\n    }\n\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp3guq13l0.swift:17:21: error: no exact matches in call to subscript\
    \ \n        new_l[i] = l[i].sorted()[0]\n                    ^\nSwift.Array:17:23:\
    \ note: candidate expects value of type 'Range<Int>' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get set }\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // This function uses\
    \ an approach known as 'destructuring assignment' in order to\n    // pick apart\
    \ the first two elements of an array and do something with them.\n    // Try using\
    \ the parameter l: [Int] -> (Int, Int) + l instead of\n    // l: [Int] -> [Int]\
    \ to see how it works.\n    var evens = [Int]()\n    for (i,x) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            evens.append(x)\n        }\n    }\n\
    \    evens.sort()\n    var res = [Int]()\n    for (i,x) in l.enumerated() {\n\
    \        if i % 2 == 0 {\n            res.append(evens.removeFirst())\n      \
    \  } else {\n            res.append(x)\n        }\n    }\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // FIXME\n    return\
    \ [1,2,3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpps1vyrks/tmpps1vyrks.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa15d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa15a29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa15a29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa15a287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpps1vyrks                        0x0000556a1b18c573 <unavailable> + 5491

    5    libc.so.6                          0x00002baa15f1e460 __libc_start_main +
    245

    6    tmpps1vyrks                        0x0000556a1b18bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res: [Int] = []\n\
    \    for i in 0..<l.count {\n        if i % 2 == 0 {\n            res.append(l[i])\n\
    \        } else {\n            var temp = l[i]\n            for j in i..<l.count\
    \ {\n                if l[j] < temp {\n                    temp = l[j]\n     \
    \           }\n            }\n            res.append(temp)\n        }\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpvyzw4cxb/tmpvyzw4cxb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adac5f4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adac5c45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adac5c45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adac5c447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyzw4cxb                        0x000055f19bd68803 <unavailable> + 6147

    5    libc.so.6                          0x00002adac613a460 __libc_start_main +
    245

    6    tmpvyzw4cxb                        0x000055f19bd68259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return zip(0..., l).map\
    \ { index, element in\n        if index % 2 == 0 {\n            return element\n\
    \        } else {\n            return l[index - 1] < l[index] ? l[index - 1] :\
    \ l[index]\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpk_wztymb/tmpk_wztymb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16ab878c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16ab56fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16ab56f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16ab56e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_wztymb                        0x000055cedf887694 <unavailable> + 5780

    5    libc.so.6                          0x00002b16aba64460 __libc_start_main +
    245

    6    tmpk_wztymb                        0x000055cedf887299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] =\
    \ []\n    var evens: [Int] = []\n    var odds: [Int] = []\n    for (index, value)\
    \ in l.enumerated() {\n        if (index + 1) % 2 == 0 {\n            evens.append(value)\n\
    \        } else {\n            odds.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in odds.enumerated() {\n        result.append(value)\n\
    \        result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6d8553c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6d824a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad6d824a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad6d824a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad6d8249bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad6d8049e83 <unavailable> + 188035

    6    tmplhh1jk_a                        0x0000564d6ebca052 <unavailable> + 8274

    7    tmplhh1jk_a                        0x0000564d6ebc9764 <unavailable> + 5988

    8    libc.so.6                          0x00002ad6d873f460 __libc_start_main +
    245

    9    tmplhh1jk_a                        0x0000564d6ebc9449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var l_even = l_copy.filter{ $0 % 2 == 0 }\n    l_even.sort()\n    var l_odd\
    \ = l_copy.filter{ $0 % 2 == 1 }\n    var l_prime = l_even + l_odd\n    l_prime.sort()\n\
    \    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfpk0lg0w/tmpfpk0lg0w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b397bed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b397bbcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b397bbcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b397bbca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpk0lg0w                        0x000055fb8eabe853 <unavailable> + 6227

    5    libc.so.6                          0x00002b397c0c0460 __libc_start_main +
    245

    6    tmpfpk0lg0w                        0x000055fb8eabe2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var output = l\n  \
    \  var even_array = [Int]()\n    for (index, num) in l.enumerated() {\n      \
    \  if index % 2 == 0 {\n            even_array.append(num)\n        }\n    }\n\
    \    even_array.sort()\n    for (index, num) in l.enumerated() {\n        if index\
    \ % 2 == 0 {\n            output[index] = even_array[index / 2]\n        }\n \
    \   }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n\n\
    \    let even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element\
    \ }\n    let sorted = even.sorted()\n\n    for (index, number) in even.enumerated()\
    \ {\n        let indexEven = l.index(of: number)!\n        result[indexEven] =\
    \ sorted[index]\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count < 2 {\n\
    \        return l\n    }\n    var sortedOddList = sort_even(l: Array(l[1...l.count-1]))\n\
    \    var sortedEvenList = sortedOddList.filter({$0 % 2 == 0})\n    sortedEvenList.sort()\n\
    \    sortedOddList[1] = sortedEvenList[0]\n    return sortedOddList\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f56f6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f56c63561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f56c63286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f56c6313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f56c62bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6f56a62e83 <unavailable> + 188035

    6    tmp6pcywk99                        0x00005624f4cfcf5b <unavailable> + 8027

    7    tmp6pcywk99                        0x00005624f4cfce42 <unavailable> + 7746

    8    tmp6pcywk99                        0x00005624f4cfc824 <unavailable> + 6180

    9    libc.so.6                          0x00002b6f57158460 __libc_start_main +
    245

    10   tmp6pcywk99                        0x00005624f4cfc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n   \
    \ for i in stride(from: 0, to: l.count, by: 2) {\n        for j in stride(from:\
    \ i + 2, to: l.count, by: 2) {\n            if new_l[i] > new_l[j] {\n       \
    \         new_l.swapAt(i, j)\n            }\n        }\n    }\n    return new_l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n\tvar result = [Int]()\n\
    \tvar evens = [Int]()\n\tfor i in 0..<l.count {\n\t\tif i % 2 == 0 {\n\t\t\tresult.append(l[i])\n\
    \t\t} else {\n\t\t\tevens.append(l[i])\n\t\t}\n\t}\n\tevens.sort()\n\tfor i in\
    \ 0..<evens.count {\n\t\tresult.insert(evens[i], at: 2*i+1)\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp94rwyfsk/tmp94rwyfsk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0735106c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0734dfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0734dfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0734dfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94rwyfsk                        0x00005572117329d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b07352f2460 __libc_start_main +
    245

    6    tmp94rwyfsk                        0x0000557211732429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var odd = [Int]()\n\
    \    var even = [Int]()\n    for (index, value) in l.enumerated() {\n        if\
    \ index % 2 == 0 {\n            odd.append(value)\n        } else {\n        \
    \    even.append(value)\n        }\n    }\n    even.sort()\n    var result = [Int]()\n\
    \    for (index, value) in odd.enumerated() {\n        result.append(value)\n\
    \        result.append(even[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b7540ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b75101561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1b75101286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1b7510113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1b75100bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1b74f00e83 <unavailable> + 188035

    6    tmpul_ntiqr                        0x00005635a6ebf071 <unavailable> + 8305

    7    tmpul_ntiqr                        0x00005635a6ebe7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b1b755f6460 __libc_start_main +
    245

    9    tmpul_ntiqr                        0x00005635a6ebe499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var ix = 0\n    var\
    \ l_prime = l\n    while ix < l.count {\n        if ix % 2 == 0 {\n          \
    \  let l_even = l.filter { l.index(of: $0)! % 2 == 0 }\n            l_prime[ix]\
    \ = l_even.sorted()[l_even.index(of: l[ix])!]\n        }\n        ix += 1\n  \
    \  }\n    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let even = l.enumerated().filter({\
    \ index, _ in index % 2 == 0 }).map({ $0.element })\n    let odd = l.enumerated().filter({\
    \ index, _ in index % 2 == 1 }).map({ $0.element })\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmppl6u9402/tmppl6u9402.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2347eb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2347bafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2347baf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2347bae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppl6u9402                        0x0000556aa90c0784 <unavailable> + 6020

    5    libc.so.6                          0x00002b23480a4460 __libc_start_main +
    245

    6    tmppl6u9402                        0x0000556aa90c0389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var results = l\n \
    \   var evenIndexes = [Int]()\n    var evens = [Int]()\n    // Finds even indicies\
    \ and adds them to evenIndexes array\n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            evenIndexes.append(i)\n        }\n    }\n    // Add\
    \ values in evenIndexes to evens array\n    for j in evenIndexes {\n        evens.append(l[j])\n\
    \    }\n    // Sort the evens array\n    var sortedEvens = evens.sorted()\n  \
    \  // Add sortedEvens array values to evenIndexes, and replace values in results\
    \ with values from sortedEvens\n    for (k, v) in zip(evenIndexes, sortedEvens)\
    \ {\n        results[k] = v\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_list = [Int]()\n\
    \    var odd_list = [Int]()\n    var output_list = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_list.append(l[i])\n        } else\
    \ {\n            odd_list.append(l[i])\n        }\n    }\n    even_list.sort()\n\
    \    var i = 0\n    var j = 0\n    while i < even_list.count || j < odd_list.count\
    \ {\n        if i < even_list.count {\n            output_list.append(even_list[i])\n\
    \            i += 1\n        }\n        if j < odd_list.count {\n            output_list.append(odd_list[j])\n\
    \            j += 1\n        }\n    }\n    return output_list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // TODO\n    let odd_l\
    \ = l.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element }\n    let even_l\
    \ = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.sorted()\n\
    \    var res = [Int]()\n    for (idx, x) in l.enumerated() {\n        if idx %\
    \ 2 == 0 {\n            res.append(even_l[idx / 2])\n        } else {\n      \
    \      res.append(odd_l[idx / 2])\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    for (index, element) in l.enumerated() {\n     \
    \   if index % 2 == 0 {\n            l_even.append(element)\n        } else {\n\
    \            l_odd.append(element)\n        }\n    }\n    return [Int](zip(l_even.sorted(),\
    \ l_odd).flatMap{$0})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpkxu4ty6n.swift:19:54: error: cannot convert value of type '(Array<Int>.Element,\
    \ Array<Int>.Element)' to closure result type 'Int?'\n    return [Int](zip(l_even.sorted(),\
    \ l_odd).flatMap{$0})\n                                                     ^~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var lastSortedIndex\
    \ = -1\n    var l = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n \
    \           let minIndex = minIndexInUnsortedEven(l: l, lastSortedIndex: lastSortedIndex)\n\
    \            swap(l: &l, i: i, j: minIndex)\n            lastSortedIndex = i\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpkwvygf97.swift:14:28: error: cannot find 'minIndexInUnsortedEven'\
    \ in scope\n            let minIndex = minIndexInUnsortedEven(l: l, lastSortedIndex:\
    \ lastSortedIndex)\n                           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkwvygf97.swift:15:34:\
    \ error: extra argument 'j' in call\n            swap(l: &l, i: i, j: minIndex)\n\
    \                ~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpkwvygf97.swift:15:28: error:\
    \ cannot convert value of type 'Int' to expected argument type '[Int]'\n     \
    \       swap(l: &l, i: i, j: minIndex)\n                           ^\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  var l = l\n  let evenIndicies\
    \ = l.indices.filter { $0 % 2 == 0 }\n  for i in evenIndicies {\n    for j in\
    \ (i + 1)..<l.count {\n      if l[i] > l[j] {\n        let temp = l[i]\n     \
    \   l[i] = l[j]\n        l[j] = temp\n      }\n    }\n  }\n  return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpaxavmtw4/tmpaxavmtw4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ced828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ced51fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ced51f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ced51e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxavmtw4                        0x000056528643cb23 <unavailable> + 6947

    5    libc.so.6                          0x00002b9ceda14460 __libc_start_main +
    245

    6    tmpaxavmtw4                        0x000056528643c579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newList = l\n \
    \   var count = 0\n    while count <= l.count - 1 {\n        if count % 2 == 0\
    \ {\n            newList[count] = l[count]\n        } else {\n            let\
    \ sorted = sort_odd(l: l[count - 1 ... count]).first\n            newList[count]\
    \ = sorted!\n        }\n        count += 1\n    }\n    return newList\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpqg6uyoub.swift:16:26: error: cannot find 'sort_odd' in scope\n\
    \            let sorted = sort_odd(l: l[count - 1 ... count]).first\n        \
    \                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980094
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = l.enumerated().filter({$0.offset\
    \ % 2 == 0}).map({$0.element})\n    l_even.sort()\n    var l_new = [Int]()\n \
    \   for index in 0..<l.count {\n        if index % 2 == 0 {\n            l_new.append(l_even.removeFirst())\n\
    \        } else {\n            l_new.append(l[index])\n        }\n    }\n    return\
    \ l_new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        if l.count > i+1 {\n   \
    \         let first = l[i]\n            let second = l[i+1]\n            if first\
    \ > second {\n                l[i] = second\n                l[i+1] = first\n\
    \            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx1u7th2g/tmpx1u7th2g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cfbdb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cfbaacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cfbaac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cfbaab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1u7th2g                        0x0000558ffc264883 <unavailable> + 6275

    5    libc.so.6                          0x00002b2cfbfa1460 __libc_start_main +
    245

    6    tmpx1u7th2g                        0x0000558ffc2642d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return Array(zip(l.enumerated(),\
    \ l.enumerated().dropFirst())\n        .map { idx, element in\n            if\
    \ idx % 2 == 0 {\n                return l[idx]\n            } else {\n      \
    \          return element.element\n            }\n        })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpxmnbzh7t.swift:12:16: error: cannot convert value of type 'EnumeratedSequence<[Int]>.Iterator.Element'\
    \ (aka '(offset: Int, element: Int)') to expected argument type 'Int'\n      \
    \      if idx % 2 == 0 {\n               ^\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var list = l\n    for\
    \ i in 0..<list.count-1 {\n        if i % 2 == 0 {\n            list[i+1] = list[i]\n\
    \        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpyujo9bgw/tmpyujo9bgw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44632a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4462fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4462fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4462f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyujo9bgw                        0x000056162da6d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b4463495460 __libc_start_main +
    245

    6    tmpyujo9bgw                        0x000056162da6d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            even_indicies.append(i)\n        }\n    }\n    for i in\
    \ even_indicies {\n        l_copy[i] = sort_indicies(l: l, indecies: even_indicies)[i]\n\
    \    }\n    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpz99xg5lk.swift:18:21: error: cannot find 'sort_indicies' in scope\n\
    \        l_copy[i] = sort_indicies(l: l, indecies: even_indicies)[i]\n       \
    \             ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    if l.count\
    \ > 1 {\n        for i in stride(from: 2, to: l.count, by: 2) {\n            for\
    \ j in stride(from: i - 1, to: 0, by: -2) {\n                if l[j] > l[j + 2]\
    \ {\n                    l.swapAt(j, j + 2)\n                }\n            }\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b934fc23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b934f91a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b934f91a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b934f91a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b934f919bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b934f719e83 <unavailable> + 188035

    6    tmpbeielf0f                        0x000055dc61182dff <unavailable> + 7679

    7    tmpbeielf0f                        0x000055dc61182644 <unavailable> + 5700

    8    libc.so.6                          0x00002b934fe0f460 __libc_start_main +
    245

    9    tmpbeielf0f                        0x000055dc61182329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var cpy = l\n    var\
    \ even: [Int] = []\n    for i in 1..<cpy.count {\n        if i % 2 == 0 {\n  \
    \          even.append(cpy[i])\n        }\n    }\n    even.sort()\n    for i in\
    \ 1..<cpy.count {\n        if i % 2 == 0 {\n            cpy[i] = even.removeFirst()\n\
    \        }\n    }\n    return cpy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpsklh381d/tmpsklh381d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b135499bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1354692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1354692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13546917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsklh381d                        0x000055f76e2f5a13 <unavailable> + 6675

    5    libc.so.6                          0x00002b1354b87460 __libc_start_main +
    245

    6    tmpsklh381d                        0x000055f76e2f5469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for (i, v) in l.enumerated() {\n        if i % 2 == 0 {\n\
    \            even.append(v)\n        }\n    }\n    even.sort()\n    for (i, v)\
    \ in even.enumerated() {\n        l[i*2] = v\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var tmp = [Int]()\n\
    \    for i in stride(from: 0, to: l.count, by: 2) {\n        tmp.append(l[i])\n\
    \    }\n    tmp.sort()\n    var result = [Int]()\n    for i in stride(from: 0,\
    \ to: l.count, by: 2) {\n        result.append(l[i])\n        result.append(tmp[i/2])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpg8jzhnvd/tmpg8jzhnvd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3abdaadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3abd7a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3abd7a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3abd7a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8jzhnvd                        0x0000558a19be18e4 <unavailable> + 6372

    5    libc.so.6                          0x00002b3abdc99460 __libc_start_main +
    245

    6    tmpg8jzhnvd                        0x0000558a19be14e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var arr = l\n    var\
    \ evens: [Int] = []\n    for (i, v) in arr.enumerated() {\n        if i % 2 ==\
    \ 0 {\n            evens.append(v)\n        }\n    }\n    evens.sort()\n    for\
    \ (i, v) in arr.enumerated() {\n        if i % 2 == 0 {\n            arr[i] =\
    \ evens[0]\n            evens.remove(at: 0)\n        }\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n   \
    \ var i = 0\n    var even_values: [Int] = []\n    while i < l.count {\n      \
    \  if (i % 2 == 0) {\n            even_values.append(l[i])\n        }\n      \
    \  i += 1\n    }\n    even_values.sort()\n    var j = 0\n    var k = 0\n    while\
    \ j < l.count {\n        if (j % 2 == 0) {\n            new_l[j] = even_values[k]\n\
    \            k += 1\n        }\n        j += 1\n    }\n    return new_l\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_prime = l\n \
    \   for (index, element) in l.enumerated() {\n        if index % 2 == 0 {\n  \
    \          l_prime[index] = element\n        } else {\n            let sorted_element\
    \ = l.filter { $0 % 2 == 0 }.sorted()[index / 2]\n            l_prime[index] =\
    \ sorted_element\n        }\n    }\n    return l_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b473d18ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b473ce81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b473ce81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b473ce8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b473ce80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b473cc80e83 <unavailable> + 188035

    6    tmpgncsav2h                        0x000056449eeccf9d <unavailable> + 8093

    7    tmpgncsav2h                        0x000056449eecc90f <unavailable> + 6415

    8    libc.so.6                          0x00002b473d376460 __libc_start_main +
    245

    9    tmpgncsav2h                        0x000056449eecc489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var array = l\n   \
    \ for i in stride(from: 0, to: array.count, by: 2) {\n        let end = min(i\
    \ + 2, array.count)\n        let slice = array[i..<end]\n        let sortedSlice\
    \ = slice.sorted()\n        array.replaceSubrange(i..<end, with: sortedSlice)\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpg48hvm02/tmpg48hvm02.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1657061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1656d58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1656d58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1656d577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg48hvm02                        0x000055bd1769db23 <unavailable> + 6947

    5    libc.so.6                          0x00002b165724d460 __libc_start_main +
    245

    6    tmpg48hvm02                        0x000055bd1769d579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  let even_l = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element\
    \ }\n    var even_l_sorted = even_l\n    even_l_sorted.sort()\n    var index =\
    \ 0\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            result[i]\
    \ = even_l_sorted[index]\n            index += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var evens = [Int]()\n    for index in stride(from: 0, to: l.count, by: 2) {\n\
    \        evens.append(l[index])\n    }\n    evens.sort()\n    for index in stride(from:\
    \ 0, to: l.count, by: 2) {\n        l_copy[index] = evens[index / 2]\n    }\n\
    \    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var i = 0\n    var\
    \ l = l\n    while i < l.count {\n        if i % 2 == 0 {\n            l.insert(sorted(l.removeRange(i..<i+2))[0],\
    \ atIndex: i)\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpncea242f.swift:14:22: error: cannot find 'sorted' in scope\n  \
    \          l.insert(sorted(l.removeRange(i..<i+2))[0], atIndex: i)\n         \
    \            ^~~~~~\n/tmp/tmpncea242f.swift:14:15: error: no exact matches in\
    \ call to instance method 'insert'\n            l.insert(sorted(l.removeRange(i..<i+2))[0],\
    \ atIndex: i)\n              ^\n/tmp/tmpncea242f.swift:14:15: note: found candidate\
    \ with type '(__owned Int, Int) -> ()'\n            l.insert(sorted(l.removeRange(i..<i+2))[0],\
    \ atIndex: i)\n              ^\n/tmp/tmpncea242f.swift:14:31: error: value of\
    \ type '[Int]' has no member 'removeRange'\n            l.insert(sorted(l.removeRange(i..<i+2))[0],\
    \ atIndex: i)\n                            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var odd_indicies =\
    \ [Int]()\n    var even_indicies = [Int]()\n    var l_prime = [Int]()\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        even_indicies.append(l[i])\n\
    \    }\n    even_indicies.sort()\n    for i in stride(from: 1, to: l.count, by:\
    \ 2) {\n        odd_indicies.append(l[i])\n    }\n    for i in 0..<odd_indicies.count\
    \ {\n        l_prime.append(even_indicies[i])\n        l_prime.append(odd_indicies[i])\n\
    \    }\n    if l.count % 2 == 1 {\n        l_prime.append(even_indicies[even_indicies.count\
    \ - 1])\n    }\n    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return l.enumerated().map\
    \ { $0.offset % 2 == 0 ? $0.element : $0.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpluurz93p/tmpluurz93p.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b771aadac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b771a7d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b771a7d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b771a7d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluurz93p                        0x00005580a784a783 <unavailable> + 6019

    5    libc.so.6                          0x00002b771acc6460 __libc_start_main +
    245

    6    tmpluurz93p                        0x00005580a784a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res: [Int] = []\n\
    \    var evens: [Int] = []\n    var count = 0\n    for elem in l {\n        if\
    \ count % 2 == 0 {\n            evens.append(elem)\n        } else {\n       \
    \     res.append(elem)\n        }\n        count += 1\n    }\n    evens.sort()\n\
    \    count = 0\n    for elem in evens {\n        res.insert(elem, at: count)\n\
    \        count += 2\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var arr = l\n    for\
    \ i in stride(from: 0, to: arr.count, by: 2) {\n        arr[i] = min(arr[i], arr[i+1])\n\
    \        arr[i+1] = max(arr[i], arr[i+1])\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6df9e51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6df9b48561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6df9b48286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6df9b4813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6df9b47bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6df9947e83 <unavailable> + 188035

    6    tmpybliws0f                        0x0000563e1270cd35 <unavailable> + 7477

    7    tmpybliws0f                        0x0000563e1270c6e4 <unavailable> + 5860

    8    libc.so.6                          0x00002b6dfa03d460 __libc_start_main +
    245

    9    tmpybliws0f                        0x0000563e1270c3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_prime = [Int]()\n\
    \    var even_l = [Int]()\n    for (index, element) in l.enumerated() {\n    \
    \    if (index % 2 == 0) {\n            even_l.append(element)\n        }\n  \
    \      l_prime.append(element)\n    }\n    even_l.sort()\n    for (index, element)\
    \ in even_l.enumerated() {\n        l_prime[index * 2] = element\n    }\n    return\
    \ l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var r = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        for j in i+2..<l.count {\n\
    \            if r[i] > r[j] {\n                r.swapAt(i, j)\n            }\n\
    \        }\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af84b55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84b252561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af84b252286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af84b25213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af84b251bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpp4pvxlv9                        0x0000563d91482ea2 <unavailable> + 7842

    6    tmpp4pvxlv9                        0x0000563d914827c4 <unavailable> + 6084

    7    libc.so.6                          0x00002af84b747460 __libc_start_main +
    245

    8    tmpp4pvxlv9                        0x0000563d914824a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var ls = l\n    var\
    \ temp = ls[0]\n    var temp2 = ls[1]\n    ls[0] = min(temp, temp2)\n    ls[1]\
    \ = max(temp, temp2)\n    var i = 2\n    while i < ls.count {\n        temp =\
    \ ls[i]\n        temp2 = ls[i+1]\n        ls[i] = min(temp, temp2)\n        ls[i+1]\
    \ = max(temp, temp2)\n        i += 2\n    }\n    return ls\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b477bbeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b477b8e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b477b8e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b477b8e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b477b8e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b477b6e4e83 <unavailable> + 188035

    6    tmpbvpzhuy0                        0x000055dd72162b6b <unavailable> + 7019

    7    tmpbvpzhuy0                        0x000055dd721624d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b477bdda460 __libc_start_main +
    245

    9    tmpbvpzhuy0                        0x000055dd721621b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        for j in stride(from: i\
    \ + 2, to: l.count, by: 2) {\n            if l[i] > l[j] {\n                let\
    \ t = l[i]\n                l[i] = l[j]\n                l[j] = t\n          \
    \  }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp__ihwml5/tmp__ihwml5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5af80e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5af7ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5af7ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5af7dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__ihwml5                        0x000055c7a77e43c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b5af82d0460 __libc_start_main +
    245

    6    tmp__ihwml5                        0x000055c7a77e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res = l\n    let\
    \ i = 2\n    let j = i+1\n    let _ = j\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp99_fs5dd/tmp99_fs5dd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae23e0c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae23ddb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae23ddb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae23ddb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99_fs5dd                        0x000055d1fef1a573 <unavailable> + 5491

    5    libc.so.6                          0x00002ae23e2ad460 __libc_start_main +
    245

    6    tmp99_fs5dd                        0x000055d1fef19fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if (i % 2 == 0) {\n            sort(&l,\
    \ i, l.count)\n        }\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphdhg9uoa.swift:14:13: error: cannot find 'sort' in scope\n    \
    \        sort(&l, i, l.count)\n            ^~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let evens = l.enumerated().filter({\
    \ $0.offset % 2 == 0 }).map({ $0.element })\n    let odds = l.enumerated().filter({\
    \ $0.offset % 2 == 1 }).map({ $0.element })\n    return evens.sorted() + odds\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcfgr76mh/tmpcfgr76mh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6294cf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62949e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62949e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62949e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfgr76mh                        0x0000563adbf31784 <unavailable> + 6020

    5    libc.so.6                          0x00002b6294edc460 __libc_start_main +
    245

    6    tmpcfgr76mh                        0x0000563adbf31389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newl = l\n    var\
    \ evenl: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n   \
    \         evenl.append(l[i])\n        }\n    }\n    evenl.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            newl[i] = evenl[i/2]\n \
    \       }\n    }\n    return newl\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  // TODO: Write your code\
    \ here.\n  var ret = [Int]()\n  var sortedEven = [Int]()\n  var i = 0\n  while\
    \ i < l.count {\n    if i % 2 == 0 {\n      ret.append(l[i])\n    } else {\n \
    \     sortedEven.append(l[i])\n    }\n    i += 1\n  }\n  sortedEven.sort()\n \
    \ var j = 0\n  for i in 0..<ret.count {\n    if i % 2 == 1 {\n      ret[i] = sortedEven[j]\n\
    \      j += 1\n    }\n  }\n  return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpicrodlc6/tmpicrodlc6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc54356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc5404db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc5404d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc5404c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicrodlc6                        0x000055f07133b824 <unavailable> + 6180

    5    libc.so.6                          0x00002acc54542460 __libc_start_main +
    245

    6    tmpicrodlc6                        0x000055f07133b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = l.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }\n    evens.sort()\n    var odds =\
    \ l.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element }\n    return\
    \ evens + odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpok_0u2bm/tmpok_0u2bm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0bf984c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0bf67bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0bf67b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0bf67a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok_0u2bm                        0x000055b88dfc97f4 <unavailable> + 6132

    5    libc.so.6                          0x00002ac0bfb70460 __libc_start_main +
    245

    6    tmpok_0u2bm                        0x000055b88dfc93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  for i in stride(from: 1, to: l.count, by: 2) {\n        result[i] = l[i-1]\n\
    \    }\n    for i in stride(from: 2, to: l.count, by: 2) {\n        result[i]\
    \ = l[i+1]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b73dc451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73dc148561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73dc148286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73dc14813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73dc147bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b73dbf47e83 <unavailable> + 188035

    6    tmp1zzqj38t                        0x0000560fa7af0d8f <unavailable> + 7567

    7    tmp1zzqj38t                        0x0000560fa7af05f4 <unavailable> + 5620

    8    libc.so.6                          0x00002b73dc63d460 __libc_start_main +
    245

    9    tmp1zzqj38t                        0x0000560fa7af02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] =\
    \ l\n    let count = l.count\n    for i in stride(from: 0, to: count, by: 2) {\n\
    \        for j in stride(from: i, to: count, by: 2) {\n            if l[i] > l[j]\
    \ {\n                result[i] = l[j]\n                result[j] = l[i]\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmphqoq9ib5/tmphqoq9ib5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3770728c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b377041fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b377041f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b377041e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqoq9ib5                        0x000056325bba9883 <unavailable> + 6275

    5    libc.so.6                          0x00002b3770914460 __libc_start_main +
    245

    6    tmphqoq9ib5                        0x000056325bba92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_prime = l\n \
    \   var evens = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            l_prime[i] = evens[0]\n\
    \            evens.remove(at: 0)\n        }\n    }\n    return l_prime\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var output = [Int]()\n    var isEven = true\n    var isOdd = false\n    for\
    \ i in l {\n        if isEven {\n            evens.append(i)\n            isEven\
    \ = false\n            isOdd = true\n        } else if isOdd {\n            output.append(i)\n\
    \            isEven = true\n            isOdd = false\n        }\n    }\n    evens.sort()\n\
    \    for i in evens {\n        output.append(i)\n    }\n    return output\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpwjhjeenj/tmpwjhjeenj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00247d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00244cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00244cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00244ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjhjeenj                        0x000055c944d8a704 <unavailable> + 5892

    5    libc.so.6                          0x00002b00249c0460 __libc_start_main +
    245

    6    tmpwjhjeenj                        0x000055c944d8a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var A = l\n    for\
    \ i in 0..<A.count {\n        if i % 2 == 0 {\n            continue\n        }\n\
    \        for j in stride(from: 0, to: i - 1, by: 2) {\n            if A[j] > A[i]\
    \ {\n                let temp = A[j]\n                A[j] = A[i]\n          \
    \      A[i] = temp\n            }\n        }\n    }\n    return A\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp686hdoij/tmp686hdoij.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afabab0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaba803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaba803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaba8027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp686hdoij                        0x000055a1a4cb0a13 <unavailable> + 6675

    5    libc.so.6                          0x00002afabacf8460 __libc_start_main +
    245

    6    tmp686hdoij                        0x000055a1a4cb0469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var output: [Int] =\
    \ []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            output.append(l[i])\n\
    \        } else {\n            output.append(contentsOf: l[i].digits.sorted())\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps7c_jrw3.swift:15:44: error: value of type 'Int' has no member\
    \ 'digits'\n            output.append(contentsOf: l[i].digits.sorted())\n    \
    \                                  ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // write your code\
    \ here\n    var temp = l\n    let len = l.count\n    var mid = len / 2\n    var\
    \ i = 0\n    while i < mid {\n        if temp[2 * i] > temp[2 * i + 1] {\n   \
    \         temp.swapAt(2 * i, 2 * i + 1)\n        }\n        i += 1\n    }\n  \
    \  return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp5x4j2p_g/tmp5x4j2p_g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1ce2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1cdfa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1cdfa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1cdfa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5x4j2p_g                        0x0000560a987f0753 <unavailable> + 5971

    5    libc.so.6                          0x00002ab1ce49a460 __libc_start_main +
    245

    6    tmp5x4j2p_g                        0x0000560a987f01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 1, to: l.count, by: 2) {\n        let sorted = l[i].sorted()\n\
    \        for j in 0..<sorted.count {\n            l[i + j] = sorted[j]\n     \
    \   }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpkyva53hs.swift:12:23: error: no exact matches in call to subscript\
    \ \n        let sorted = l[i].sorted()\n                      ^\nSwift.Array:17:23:\
    \ note: candidate expects value of type 'Range<Int>' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get set }\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  var e = [Int]()\n    for (idx, item) in l.enumerated() {\n        if idx %\
    \ 2 == 0 {\n            e.append(item)\n        }\n    }\n    e.sort()\n    for\
    \ (idx, item) in l.enumerated() {\n        if idx % 2 == 0 {\n            result[idx]\
    \ = e.first!\n            e.removeFirst()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    //    return []\n \
    \   var l1 = l\n    for i in 1..<l.count {\n        if i % 2 == 0 {\n        \
    \    for j in 0..<i {\n                if l1[i] < l1[j] {\n                  \
    \  l1.swapAt(i, j)\n                }\n            }\n        }\n    }\n    return\
    \ l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2wkllw7p/tmp2wkllw7p.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a39c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a39c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a39bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wkllw7p                        0x000055ad214f0853 <unavailable> + 6227

    5    libc.so.6                          0x00002ba2a3eb5460 __libc_start_main +
    245

    6    tmp2wkllw7p                        0x000055ad214f02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count < 2 {\n\
    \        return l\n    }\n    var l = l\n    for i in 0...l.count-1 {\n      \
    \  if i % 2 == 0 {\n            for j in i+1...l.count-1 {\n                if\
    \ j % 2 == 0 {\n                    if l[i] > l[j] {\n                       \
    \ let temp = l[i]\n                        l[i] = l[j]\n                     \
    \   l[j] = temp\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b24279aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24276a1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24276a1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24276a113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24276a0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnb1fpqpg                        0x0000563b936b1dc4 <unavailable> + 7620

    6    tmpnb1fpqpg                        0x0000563b936b1574 <unavailable> + 5492

    7    libc.so.6                          0x00002b2427b96460 __libc_start_main +
    245

    8    tmpnb1fpqpg                        0x0000563b936b1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_ = l\n    let\
    \ even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }\n   \
    \ let sorted = even.sorted(by: <)\n    for (i, el) in even.enumerated() {\n  \
    \      l_[i * 2] = sorted[i]\n    }\n    return l_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res: [Int] = []\n\
    \    var sub: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            sub.append(l[i])\n        } else {\n            sub.sort()\n    \
    \        res.append(contentsOf: sub)\n            sub = []\n            res.append(l[i])\n\
    \        }\n    }\n    if sub.count != 0 {\n        sub.sort()\n        res.append(contentsOf:\
    \ sub)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmph31wfmb7/tmph31wfmb7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535e11bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b535de12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b535de12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b535de117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph31wfmb7                        0x000056017afa89a3 <unavailable> + 6563

    5    libc.so.6                          0x00002b535e307460 __libc_start_main +
    245

    6    tmph31wfmb7                        0x000056017afa83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var copy_l = l\n  \
    \  let even_indicies = Array(l.indices.filter {$0 % 2 == 0})\n    for i in even_indicies\
    \ {\n        copy_l[i] = l[i]\n    }\n    return copy_l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmphsgtqn26/tmphsgtqn26.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c9a1cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c99ec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c99ec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c99ec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsgtqn26                        0x0000558592720a43 <unavailable> + 6723

    5    libc.so.6                          0x00002b9c9a3b9460 __libc_start_main +
    245

    6    tmphsgtqn26                        0x0000558592720499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // TODO: Implement\
    \ this function.\n    var new_l = [Int]()\n    var even = [Int]()\n    var odd\
    \ = [Int]()\n    for (index, num) in l.enumerated() {\n        if index % 2 ==\
    \ 0 {\n            even.append(num)\n        } else {\n            odd.append(num)\n\
    \        }\n    }\n    even.sort()\n    return odd + even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpoakbqhwx/tmpoakbqhwx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea0d8f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0d5efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea0d5ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea0d5ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoakbqhwx                        0x000055eb8fde6894 <unavailable> + 6292

    5    libc.so.6                          0x00002aea0dae4460 __libc_start_main +
    245

    6    tmpoakbqhwx                        0x000055eb8fde6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count <= 1 {\n\
    \        return l\n    }\n    var left = [Int]()\n    var right = [Int]()\n  \
    \  var middle = [Int]()\n    let pivot = l[l.count/2]\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            if l[i] < pivot {\n                left.append(l[i])\n\
    \            } else if l[i] > pivot {\n                right.append(l[i])\n  \
    \          } else {\n                middle.append(l[i])\n            }\n    \
    \    } else {\n            middle.append(l[i])\n        }\n    }\n    return sort_even(l:\
    \ left) + middle + sort_even(l: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpublrcyce/tmpublrcyce.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe91a76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe9176db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe9176d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9176c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpublrcyce                        0x0000555a3aeeb8b3 <unavailable> + 6323

    5    libc.so.6                          0x00002abe91c62460 __libc_start_main +
    245

    6    tmpublrcyce                        0x0000555a3aeeb309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var a = l\n    let\
    \ odd = a.indices.filter { $0 % 2 == 1 }\n    let even = a.indices.filter { $0\
    \ % 2 == 0 }\n    for i in even {\n        let min = a[i..<a.count].min()\n  \
    \      let minInd = a[i..<a.count].firstIndex(of: min!)\n        a.swapAt(i, minInd!)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpl0a6xn2u/tmpl0a6xn2u.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad32921dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad328f14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad328f14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad328f137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0a6xn2u                        0x000055e2c431bc73 <unavailable> + 7283

    5    libc.so.6                          0x00002ad329409460 __libc_start_main +
    245

    6    tmpl0a6xn2u                        0x000055e2c431b6c9 <unavailable> + 5833

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l1 = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(l[i])\n        }\n    }\n    even_indicies.sort()\n\
    \    var j = 0\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n        \
    \    l1[i] = even_indicies[j]\n            j += 1\n        }\n    }\n    return\
    \ l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var sorted_even = [Int]()\n\
    \    var even_l = [Int]()\n    for (i, value) in l.enumerated() {\n        if\
    \ i % 2 == 0 {\n            even_l.append(value)\n        }\n    }\n    even_l.sort()\n\
    \    var counter = 0\n    for (i, value) in l.enumerated() {\n        if i % 2\
    \ == 0 {\n            sorted_even.append(even_l[counter])\n            counter\
    \ += 1\n        } else {\n            sorted_even.append(value)\n        }\n \
    \   }\n    return sorted_even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // Get the odd and\
    \ even indicies of l\n    let (odd_indicies, even_indicies) = indicies(l: l)\n\
    \    \n    // Create an array l' of the odd indicies\n    var l_prime = Array(l[odd_indicies])\n\
    \    \n    // Create an array of the even indicies of l\n    var even_indicies_array\
    \ = Array(l[even_indicies])\n    \n    // Sort the array of the even indicies\
    \ of l\n    even_indicies_array.sort()\n    \n    // Insert the values of the\
    \ even indicies of l into l'\n    for i in 0..<even_indicies_array.count {\n \
    \       l_prime.insert(even_indicies_array[i], at: i * 2)\n    }\n    \n    return\
    \ l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp75ggtu72.swift:11:41: error: cannot find 'indicies' in scope\n\
    \    let (odd_indicies, even_indicies) = indicies(l: l)\n                    \
    \                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var odds: [Int] = []\n\
    \    var evens: [Int] = []\n    var sorted: [Int] = []\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            sorted.append(odds[i/2])\n\
    \        } else {\n            sorted.append(evens[i/2])\n        }\n    }\n \
    \   return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpg9jo_kuq/tmpg9jo_kuq.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba581ee5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba581bdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba581bdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba581bdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9jo_kuq                        0x000055f6dd78c923 <unavailable> + 6435

    5    libc.so.6                          0x00002ba5820d1460 __libc_start_main +
    245

    6    tmpg9jo_kuq                        0x000055f6dd78c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659980095
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newList = l\n \
    \   var tempList: [Int] = []\n    for (index, value) in l.enumerated() {\n   \
    \     if index % 2 == 0 {\n            tempList.append(value)\n        }\n   \
    \ }\n    tempList.sort()\n    for (index, value) in l.enumerated() {\n       \
    \ if index % 2 == 0 {\n            newList[index] = tempList[0]\n            tempList.remove(at:\
    \ 0)\n        }\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_list = [Int]()\n\
    \    for (index, item) in l.enumerated() {\n        if index % 2 == 0 {\n    \
    \        new_list.append(item)\n        } else {\n            new_list.append(contentsOf:\
    \ l[index].sorted())\n        }\n    }\n    return new_list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp81o1ya6_.swift:15:42: error: no exact matches in call to subscript\
    \ \n            new_list.append(contentsOf: l[index].sorted())\n             \
    \                            ^\nSwift.Array:17:23: note: candidate expects value\
    \ of type 'Range<Int>' for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds:\
    \ Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\nSwift.MutableCollection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_ = l\n    for\
    \ i in 0..<l.count {\n        if i % 2 == 0 {\n            l_[i] = l[i]\n    \
    \    } else {\n            l_[i] = sort(l: [l[i-1], l[i]])[0]\n        }\n   \
    \ }\n    return l_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8wt55nty.swift:15:21: error: cannot find 'sort' in scope\n    \
    \        l_[i] = sort(l: [l[i-1], l[i]])[0]\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1_tpvjno/tmp1_tpvjno.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5897867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b589755eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b589755e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b589755d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_tpvjno                        0x00005595888aa3c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b5897a53460 __libc_start_main +
    245

    6    tmp1_tpvjno                        0x00005595888a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var ret: [Int] = []\n\
    \    for i in 0..<l.count {\n        if i % 2 == 0 {\n            ret.append(l[i])\n\
    \        } else {\n            let slice = l[i - 1..<i + 1]\n            ret.append(contentsOf:\
    \ slice.sorted())\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpmbjmh2zd/tmpmbjmh2zd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b33233c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b32f2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b32f2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b32f297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmbjmh2zd                        0x00005598fdb98864 <unavailable> + 6244

    5    libc.so.6                          0x00002b2b3341f460 __libc_start_main +
    245

    6    tmpmbjmh2zd                        0x00005598fdb98469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return l.enumerated().map\
    \ { (i, x) in\n        if i % 2 == 0 {\n            return x\n        } else {\n\
    \            return sorted(l.slice(i, i + 1))[0]\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp7bwskkl5.swift:14:20: error: cannot find 'sorted' in scope\n  \
    \          return sorted(l.slice(i, i + 1))[0]\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newList: [Int]\
    \ = []\n    if l.count == 0 {\n        return []\n    }\n    if l.count == 1 {\n\
    \        return l\n    }\n    var evens: [Int] = []\n    var odds: [Int] = []\n\
    \    for i in 0...l.count - 1 {\n        if i % 2 == 0 {\n            odds.append(l[i])\n\
    \        } else {\n            evens.append(l[i])\n        }\n    }\n    evens.sort()\n\
    \    var j = 0\n    for i in 0...l.count - 1 {\n        if i % 2 == 0 {\n    \
    \        newList.append(odds[j])\n            j += 1\n        } else {\n     \
    \       newList.append(evens[j])\n            j += 1\n        }\n    }\n    return\
    \ newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4965b9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4965896561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4965896286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b496589613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4965895bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4965695e83 <unavailable> + 188035

    6    tmp8g1losz7                        0x000055bec80aa143 <unavailable> + 8515

    7    tmp8g1losz7                        0x000055bec80a9694 <unavailable> + 5780

    8    libc.so.6                          0x00002b4965d8b460 __libc_start_main +
    245

    9    tmp8g1losz7                        0x000055bec80a9379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count < 2 {\n\
    \        return l\n    }\n    var l = l\n    let m = l.remove(at: 0)\n    let\
    \ n = l.remove(at: 0)\n    if m < n {\n        return [m, n] + sort_even(l: l)\n\
    \    } else {\n        return [n, m] + sort_even(l: l)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpdl8tf1rd/tmpdl8tf1rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5a3c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5a3996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5a3996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5a39957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl8tf1rd                        0x0000558d7f592683 <unavailable> + 5763

    5    libc.so.6                          0x00002ac5a3e8b460 __libc_start_main +
    245

    6    tmpdl8tf1rd                        0x0000558d7f5920d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // Write your implementation\
    \ here.\n    var l_even = [Int]()\n    var l_odd = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l_even.append(l[i])\n        } else\
    \ {\n            l_odd.append(l[i])\n        }\n    }\n    l_even.sort()\n   \
    \ var result = [Int]()\n    for i in 0..<l_even.count {\n        result.append(l_even[i])\n\
    \        result.append(l_odd[i])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5186f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5183eb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5183eb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5183eb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5183eabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae5181eae83 <unavailable> + 188035

    6    tmphas60p2k                        0x0000562a17359ff2 <unavailable> + 8178

    7    tmphas60p2k                        0x0000562a173596f4 <unavailable> + 5876

    8    libc.so.6                          0x00002ae5188e0460 __libc_start_main +
    245

    9    tmphas60p2k                        0x0000562a173593d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ newL: [Int] = []\n    for i in stride(from: 0, to: l.count, by: 2) {\n     \
    \   newL.append(l[i])\n        newL.append(sort_even_helper(l: l[i...i+1]))\n\
    \    }\n    return newL\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmppdm0lls9.swift:14:21: error: cannot find 'sort_even_helper' in\
    \ scope\n        newL.append(sort_even_helper(l: l[i...i+1]))\n              \
    \      ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980095
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var sorted_arr = l\n\
    \    for i in stride(from: 0, to: l.count, by: 2) {\n        for j in stride(from:\
    \ i, to: l.count, by: 2) {\n            if l[i] > l[j] {\n                sorted_arr[i]\
    \ = l[j]\n                sorted_arr[j] = l[i]\n            }\n        }\n   \
    \ }\n    return sorted_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpomgwysmx/tmpomgwysmx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf2694ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf26641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf26641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf266407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomgwysmx                        0x0000560f0bf36883 <unavailable> + 6275

    5    libc.so.6                          0x00002adf26b36460 __libc_start_main +
    245

    6    tmpomgwysmx                        0x0000560f0bf362d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    guard l.count >= 2\
    \ else {\n        return l\n    }\n    var sortedEvens = l.enumerated().filter({\
    \ $0.offset % 2 == 0 }).map({ $0.element }).sorted()\n    var lPrime = [Int]()\n\
    \    var sortedIndex = 0\n    for (index, num) in l.enumerated() {\n        if\
    \ index % 2 == 0 {\n            lPrime.append(sortedEvens[sortedIndex])\n    \
    \        sortedIndex += 1\n        } else {\n            lPrime.append(num)\n\
    \        }\n    }\n    return lPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var arr = l\n    var\
    \ evens = arr.filter { $0 % 2 == 0 }\n    evens.sort()\n    var i = 0\n    var\
    \ j = 0\n    while i < arr.count {\n        if arr[i] % 2 == 0 {\n           \
    \ arr[i] = evens[j]\n            j += 1\n        }\n        i += 1\n    }\n  \
    \  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmppdusp1hv/tmppdusp1hv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aff242c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7afef39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7afef39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7afef387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdusp1hv                        0x000055cd9ae6f8f3 <unavailable> + 6387

    5    libc.so.6                          0x00002b7aff42e460 __libc_start_main +
    245

    6    tmppdusp1hv                        0x000055cd9ae6f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var x = l\n    var\
    \ i = 0\n    while i < x.count {\n        if i % 2 == 0 {\n            x.swapAt(i,\
    \ i + 1)\n        }\n        i += 2\n    }\n    return x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7730a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae772d98561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae772d98286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae772d9813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae772d97bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae772d828a2 <unavailable> + 1345698

    6    libswiftCore.so                    0x00002ae772d82815 <unavailable> + 1345557

    7    libswiftCore.so                    0x00002ae772d82450 MutableCollection.swapAt(_:_:)
    + 377

    8    tmp9x3n_575                        0x0000561213884a82 <unavailable> + 6786

    9    tmp9x3n_575                        0x0000561213884474 <unavailable> + 5236

    10   libc.so.6                          0x00002ae77328d460 __libc_start_main +
    245

    11   tmp9x3n_575                        0x0000561213884159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l: [Int] = l\n\
    \    var s: [Int] = []\n    var e: [Int] = []\n    var o: [Int] = []\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        s.append(l[i])\n    }\n\
    \    e = s.sorted()\n    for i in stride(from: 1, to: l.count, by: 2) {\n    \
    \    o.append(l[i])\n    }\n    for i in stride(from: 0, to: l.count, by: 2) {\n\
    \        l[i] = e[i/2]\n    }\n    for i in stride(from: 1, to: l.count, by: 2)\
    \ {\n        l[i] = o[i/2]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var ans = l\n    var\
    \ even = [Int]()\n    for (index, item) in l.enumerated() {\n        if index\
    \ % 2 == 0 {\n            even.append(item)\n        }\n    }\n    even.sort()\n\
    \    for (index, item) in even.enumerated() {\n        ans[index * 2] = item\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n\tvar result = l\n\t//\
    \ implement this function!\n\tvar sorted_evens = l.enumerated().filter({ (index,\
    \ _) -> Bool in\n\t\tindex % 2 == 0\n\t}).map({ (index, val) -> Int in\n\t\tval\n\
    \t}).sorted()\n\t\n\tfor (index, val) in result.enumerated() {\n\t\tif index %\
    \ 2 == 0 {\n\t\t\tresult[index] = sorted_evens.first!\n\t\t\tsorted_evens.removeFirst()\n\
    \t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count < 2 {\n\
    \        return l\n    } else {\n        var odd = [Int]()\n        var even =\
    \ [Int]()\n        for i in l.indices {\n            if i % 2 == 0 {\n       \
    \         odd.append(l[i])\n            } else {\n                even.append(l[i])\n\
    \            }\n        }\n        even.sort()\n        var sorted = [Int]()\n\
    \        for i in 0...(l.count - 1) {\n            if i % 2 == 0 {\n         \
    \       sorted.append(odd[i/2])\n            } else {\n                sorted.append(even[i/2])\n\
    \            }\n        }\n        return sorted\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpv7r5x5pm/tmpv7r5x5pm.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b56561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b56258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b56258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b562577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7r5x5pm                        0x000055872a4c0b03 <unavailable> + 6915

    5    libc.so.6                          0x00002b1b5674d460 __libc_start_main +
    245

    6    tmpv7r5x5pm                        0x000055872a4c0559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    l.swapAt(0,\
    \ l.count-1)\n    l[2] = Int.random(in: 1..<Int.max)\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpkf4e_zwd/tmpkf4e_zwd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48adba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48ad89ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48ad89a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48ad8997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkf4e_zwd                        0x0000562cab00e5d4 <unavailable> + 5588

    5    libc.so.6                          0x00002b48add8f460 __libc_start_main +
    245

    6    tmpkf4e_zwd                        0x0000562cab00e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    for i in stride(from: 0, to: l.count, by: 2) {\n        res.append(l[i])\n\
    \        let tmp = l[i+1]\n        if (tmp < res[i]) {\n            res.append(res[i])\n\
    \            res[i] = tmp\n        } else {\n            res.append(tmp)\n   \
    \     }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b2442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b2139561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba4b2139286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba4b213913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba4b2138bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba4b1f38e83 <unavailable> + 188035

    6    tmpfjx85owp                        0x0000563c42328cea <unavailable> + 7402

    7    tmpfjx85owp                        0x0000563c423286a4 <unavailable> + 5796

    8    libc.so.6                          0x00002ba4b262e460 __libc_start_main +
    245

    9    tmpfjx85owp                        0x0000563c42328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var odds: [Int] = []\n\
    \    var evens: [Int] = []\n    var result: [Int] = []\n    for (index, num) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            odds.append(num)\n\
    \        } else {\n            evens.append(num)\n        }\n    }\n    evens.sort()\n\
    \    for (index, num) in odds.enumerated() {\n        result.append(num)\n   \
    \     result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b68456d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68453c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b68453c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b68453c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b68453c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b68451c7e83 <unavailable> + 188035

    6    tmprhrirub2                        0x000055b453daa042 <unavailable> + 8258

    7    tmprhrirub2                        0x000055b453da9764 <unavailable> + 5988

    8    libc.so.6                          0x00002b68458bd460 __libc_start_main +
    245

    9    tmprhrirub2                        0x000055b453da9449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evenOnly = [Int]()\n\
    \    var evenOnlySorted = [Int]()\n    var oddOnly = [Int]()\n    var evenOdd\
    \ = [Int]()\n    \n    var i = 0\n    while i < l.count {\n        if l[i] % 2\
    \ == 0 {\n            evenOnly.append(l[i])\n        } else {\n            oddOnly.append(l[i])\n\
    \        }\n        i += 1\n    }\n    \n    i = 0\n    evenOnlySorted = evenOnly.sorted()\n\
    \    \n    while i < l.count {\n        if l[i] % 2 == 0 {\n            evenOdd.append(evenOnlySorted[i/2])\n\
    \        } else {\n            evenOdd.append(oddOnly[i/2])\n        }\n     \
    \   i += 1\n    }\n    \n    return evenOdd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eccf6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eccc63561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4eccc63286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4eccc6313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4eccc62bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4ecca62e83 <unavailable> + 188035

    6    tmp2yykkwab                        0x000056390c186e0d <unavailable> + 7693

    7    tmp2yykkwab                        0x000056390c1866ef <unavailable> + 5871

    8    libc.so.6                          0x00002b4ecd158460 __libc_start_main +
    245

    9    tmp2yykkwab                        0x000056390c186269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count <= 1 {\n\
    \        return l\n    }\n    var l1: [Int] = []\n    var l2: [Int] = []\n   \
    \ for i in 0..<l.count {\n        if i % 2 == 0 {\n            l1.append(l[i])\n\
    \        } else {\n            l2.append(l[i])\n        }\n    }\n    l2 = sort(l:\
    \ l2)\n    var lr: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 ==\
    \ 0 {\n            lr.append(l1[i / 2])\n        } else {\n            lr.append(l2[i\
    \ / 2])\n        }\n    }\n    return lr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpox4_zfok.swift:22:10: error: cannot find 'sort' in scope\n    l2\
    \ = sort(l: l2)\n         ^~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res = l\n    var\
    \ l_even = l.filter({ $0 % 2 == 0 })\n    l_even.sort()\n    for i in stride(from:\
    \ 0, to: l.count, by: 2) {\n        res[i] = l_even[i / 2]\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b091f905c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091f5fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b091f5fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b091f5fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b091f5fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b091f3fbe83 <unavailable> + 188035

    6    tmp47i6wf6c                        0x0000558d85ca6f7b <unavailable> + 8059

    7    tmp47i6wf6c                        0x0000558d85ca6874 <unavailable> + 6260

    8    libc.so.6                          0x00002b091faf1460 __libc_start_main +
    245

    9    tmp47i6wf6c                        0x0000558d85ca6559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    if\
    \ l.count < 2 {\n        return l\n    }\n    else if l.count % 2 == 0 {\n   \
    \     var l2 = l\n        var i = 1\n        while i < l.count {\n           \
    \ for j in stride(from: 1, to: i, by: 2) {\n                if l2[j] < l2[j-1]\
    \ {\n                    swap(&l2[j], &l2[j-1])\n                }\n         \
    \   }\n            i += 2\n        }\n        return l2\n    }\n    else {\n \
    \       var l2 = l\n        var i = 1\n        while i < l.count-1 {\n       \
    \     for j in stride(from: 1, to: i, by: 2) {\n                if l2[j] < l2[j-1]\
    \ {\n                    swap(&l2[j], &l2[j-1])\n                }\n         \
    \   }\n            i += 2\n        }\n        return l2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpdtj7xi2j.swift:10:9: warning: initialization of variable 'l2' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ l2 = l\n    ~~~~^~\n    _\n/tmp/tmpdtj7xi2j.swift:33:26: error: overlapping\
    \ accesses to 'l2', but modification requires exclusive access; consider calling\
    \ MutableCollection.swapAt(_:_:)\n                    swap(&l2[j], &l2[j-1])\n\
    \                    ~~~~~^~~~~~~~~~~~~~~~~\n                    l2.swapAt(j,\
    \ j-1)\n/tmp/tmpdtj7xi2j.swift:33:34: note: conflicting access is here\n     \
    \               swap(&l2[j], &l2[j-1])\n                                 ^~~~~~~~\n\
    /tmp/tmpdtj7xi2j.swift:20:26: error: overlapping accesses to 'l2', but modification\
    \ requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \                    swap(&l2[j], &l2[j-1])\n                    ~~~~~^~~~~~~~~~~~~~~~~\n\
    \                    l2.swapAt(j, j-1)\n/tmp/tmpdtj7xi2j.swift:20:34: note: conflicting\
    \ access is here\n                    swap(&l2[j], &l2[j-1])\n               \
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n\
    \        return []\n    }\n    if l.count == 1 {\n        return l\n    }\n  \
    \  if l.count == 2 {\n        if l[0] > l[1] {\n            return [l[1], l[0]]\n\
    \        }\n        return l\n    }\n    let even = l.enumerated().filter({ $0.offset\
    \ % 2 == 0 }).map({ $0.element })\n    let odd = l.enumerated().filter({ $0.offset\
    \ % 2 == 1 }).map({ $0.element })\n    return sort_even(l: even) + odd\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp5m5dqamo/tmp5m5dqamo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b232049bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2320192b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2320192988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23201917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5m5dqamo                        0x000055df1e463784 <unavailable> + 6020

    5    libc.so.6                          0x00002b2320687460 __libc_start_main +
    245

    6    tmp5m5dqamo                        0x000055df1e463389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  // if l has even indicies,\
    \ return an array of its indicies with the even indicies sorted.\n  if l.count\
    \ % 2 == 0 {\n    let array = l.enumerated().filter { $0.offset % 2 == 0 }.map\
    \ { $0.element }.sorted()\n    return l.enumerated().map {\n      if $0.offset\
    \ % 2 == 0 {\n        return array[$0.offset / 2]\n      } else {\n        return\
    \ $0.element\n      }\n    }\n  } else {\n    // if l has odd indicies, return\
    \ an array of its indicies with the even indicies sorted.\n    let array = l.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }.sorted()\n    return l.enumerated().map\
    \ {\n      if $0.offset % 2 == 0 {\n        return array[$0.offset / 2]\n    \
    \  } else {\n        return $0.element\n      }\n    }\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n\t// Your code here\n\t\
    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpak3_nax7/tmpak3_nax7.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d4a4c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d4a1bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d4a1bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d4a1bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpak3_nax7                        0x00005648e2341573 <unavailable> + 5491

    5    libc.so.6                          0x00002b7d4a6b2460 __libc_start_main +
    245

    6    tmpak3_nax7                        0x00005648e2340fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  // Create l'\n  var l_prime\
    \ = [Int]()\n  // Loop over indicies of l\n  for index in 0...l.count-1 {\n  \
    \  // If current index is even, perform insertion sort\n    if index % 2 == 0\
    \ {\n      // Get a subarray of even indicies\n      let sub_array = l[0...index]\n\
    \      // Create an array with the same elements as the subarray, but sorted\n\
    \      var sorted_sub_array = sub_array.sorted()\n      // Append the sorted array\
    \ to l'\n      l_prime.append(contentsOf: sorted_sub_array)\n    }\n    // If\
    \ current index is odd, append elements of l to l'\n    else {\n      l_prime.append(l[index])\n\
    \    }\n  }\n  return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2_q4aheb/tmp2_q4aheb.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab598fdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab598cd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab598cd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab598cd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_q4aheb                        0x000055dad1384954 <unavailable> + 6484

    5    libc.so.6                          0x00002ab5991ca460 __libc_start_main +
    245

    6    tmp2_q4aheb                        0x000055dad1384559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    var\
    \ l1: [Int] = []\n    var l3: [Int] = []\n    for var i in 0..<l.count {\n   \
    \     if i % 2 == 0 {\n            l1.append(l[i])\n        } else {\n       \
    \     l3.append(l[i])\n        }\n    }\n    l1.sort()\n    var j = 0\n    for\
    \ var i in 0..<l.count {\n        if i % 2 == 0 {\n            l2[i] = l1[j]\n\
    \            j += 1\n        }\n    }\n    return l2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  var l = l\n  var even\
    \ = [Int]()\n  var odd = [Int]()\n  for (index, _) in l.enumerated() {\n    if\
    \ index % 2 == 0 {\n      even.append(l[index])\n    } else {\n      odd.append(l[index])\n\
    \    }\n  }\n  even.sort()\n  for (index, _) in l.enumerated() {\n    if index\
    \ % 2 == 0 {\n      l[index] = even[index / 2]\n    } else {\n      l[index] =\
    \ odd[index / 2]\n    }\n  }\n  return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newl = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 1, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 1, to:\
    \ newl.count, by: 2) {\n        newl[i] = even[i/2]\n    }\n    return newl\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmppa4_nrhz/tmppa4_nrhz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89c6d25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89c6a1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89c6a1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89c6a1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppa4_nrhz                        0x000055dfbc763ae3 <unavailable> + 6883

    5    libc.so.6                          0x00002b89c6f11460 __libc_start_main +
    245

    6    tmppa4_nrhz                        0x000055dfbc763539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies:\
    \ [Int] = []\n    var odd_indicies: [Int] = []\n    var sorted_even_indicies:\
    \ [Int] = []\n    for (index, element) in l.enumerated() {\n        if index %\
    \ 2 == 0 {\n            odd_indicies.append(element)\n        } else {\n     \
    \       even_indicies.append(element)\n        }\n    }\n    sorted_even_indicies\
    \ = even_indicies.sorted()\n    var result = odd_indicies\n    var j = 0\n   \
    \ for i in 0..<even_indicies.count {\n        result.append(sorted_even_indicies[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp22p1n4_4/tmp22p1n4_4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57bf17ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57bee75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57bee75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57bee747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp22p1n4_4                        0x0000564d3933a904 <unavailable> + 6404

    5    libc.so.6                          0x00002b57bf36a460 __libc_start_main +
    245

    6    tmp22p1n4_4                        0x0000564d3933a509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evenSorted = [Int]()\n\
    \    var evenUnsorted = [Int]()\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            evenSorted.append(l[i])\n        } else {\n            evenUnsorted.append(l[i])\n\
    \        }\n    }\n    evenSorted.sort()\n    evenSorted.append(contentsOf: evenUnsorted)\n\
    \    return evenSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7lba9j4w/tmp7lba9j4w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1229109c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1228e00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1228e00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1228dff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lba9j4w                        0x0000564e97e4a844 <unavailable> + 6212

    5    libc.so.6                          0x00002b12292f5460 __libc_start_main +
    245

    6    tmp7lba9j4w                        0x0000564e97e4a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n\tvar new_l: [Int] = []\n\
    \tfor i in 0...l.count-1 {\n\t\tif i % 2 == 0 {\n\t\t\tnew_l.append(l[i])\n\t\t\
    } else {\n\t\t\tnew_l.append(l[i])\n\t\t\tnew_l[i] = l[i-1]\n\t\t\tnew_l[i-1]\
    \ = l[i]\n\t\t}\n\t}\n\treturn new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcokh7oya/tmpcokh7oya.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac162ee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac162bd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac162bd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac162bd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcokh7oya                        0x000055d343c6f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ac1630ce460 __libc_start_main +
    245

    6    tmpcokh7oya                        0x000055d343c6f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in 0..<l.count {\n        if i % 2 == 0 {\n            for j in i+1..<l.count\
    \ {\n                if j % 2 == 0 {\n                    if l[i] > l[j] {\n \
    \                       let t = l[i]\n                        l[i] = l[j]\n  \
    \                      l[j] = t\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    var evens = [Int]()\n    for (i, x) in l.enumerated() {\n        if i % 2\
    \ == 0 {\n            res.append(x)\n        } else {\n            evens.append(x)\n\
    \        }\n    }\n    evens.sort()\n    res.append(contentsOf: evens)\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2dz853cw/tmp2dz853cw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378e785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378e47cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378e47c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378e47b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dz853cw                        0x000055745bb5a8b4 <unavailable> + 6324

    5    libc.so.6                          0x00002b378e971460 __libc_start_main +
    245

    6    tmp2dz853cw                        0x000055745bb5a4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var array: [Int] =\
    \ l\n    for x in 0..<array.count {\n        if x % 2 == 0 {\n            array[x]\
    \ = array[x]\n        } else {\n            array[x] = array[x-1]\n        }\n\
    \    }\n    array.sort()\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7svdtvyr/tmp7svdtvyr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5228dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5225d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5225d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5225d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7svdtvyr                        0x00005599b78fe774 <unavailable> + 6004

    5    libc.so.6                          0x00002ac522ac7460 __libc_start_main +
    245

    6    tmp7svdtvyr                        0x00005599b78fe379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n   \
    \ for i in stride(from: l.count - 1, to: -1, by: -2) {\n        for j in stride(from:\
    \ i - 1, to: 0, by: -2) {\n            if new_l[j] > new_l[j + 2] {\n        \
    \        new_l.swapAt(j, j + 2)\n            }\n        }\n    }\n    return new_l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b7518ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b74e85561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8b74e85286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8b74e8513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8b74e84bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8b74c84e83 <unavailable> + 188035

    6    tmp9te_lu3_                        0x000055b343495db5 <unavailable> + 7605

    7    tmp9te_lu3_                        0x000055b343495644 <unavailable> + 5700

    8    libc.so.6                          0x00002b8b7537a460 __libc_start_main +
    245

    9    tmp9te_lu3_                        0x000055b343495329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // Your code here\n\
    \    return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgmky0d3b/tmpgmky0d3b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92af72fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92af426b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92af426988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92af4257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmky0d3b                        0x0000558fea35e424 <unavailable> + 5156

    5    libc.so.6                          0x00002b92af91b460 __libc_start_main +
    245

    6    tmpgmky0d3b                        0x0000558fea35e029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // You don't need to\
    \ modify this function\n    var copy = l\n    for i in stride(from: 0, to: l.count,\
    \ by: 2) {\n        for j in stride(from: i+2, to: l.count, by: 2) {\n       \
    \     if copy[i] > copy[j] {\n                let t = copy[i]\n              \
    \  copy[i] = copy[j]\n                copy[j] = t\n            }\n        }\n\
    \    }\n    return copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  for i in stride(from: 0, to: l.count, by: 2) {\n        for j in stride(from:\
    \ i + 2, to: l.count, by: 2) {\n            if l_copy[i] > l_copy[j] {\n     \
    \           l_copy.swapAt(i, j)\n            }\n        }\n    }\n    return l_copy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = l.filter{\
    \ $0 % 2 == 0 }\n    var l_odd = l.filter{ $0 % 2 == 1 }\n    l_even.sort()\n\
    \    var l_prime: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 ==\
    \ 0 {\n            l_prime.append(l_odd[i/2])\n        } else {\n            l_prime.append(l_even[i/2])\n\
    \        }\n    }\n    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef4a2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef4721561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ef4721286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ef472113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ef4720bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ef4520e83 <unavailable> + 188035

    6    tmpw9h0k20j                        0x000056443e02208c <unavailable> + 8332

    7    tmpw9h0k20j                        0x000056443e0218cf <unavailable> + 6351

    8    libc.so.6                          0x00002b2ef4c16460 __libc_start_main +
    245

    9    tmpw9h0k20j                        0x000056443e021449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newList = l\n \
    \   if l.count > 2 {\n        let mid = (l.count - 1) / 2\n        let left =\
    \ Array(l[0...mid])\n        let right = Array(l[mid+1..<l.count])\n        newList\
    \ = sort_even(l: left) + [l[mid]] + sort_even(l: right)\n    }\n    return newList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpz2vuh572/tmpz2vuh572.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affacbfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affac8f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affac8f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affac8f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2vuh572                        0x000055b7ea8487c4 <unavailable> + 6084

    5    libc.so.6                          0x00002affacde8460 __libc_start_main +
    245

    6    tmpz2vuh572                        0x000055b7ea8483c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_nums: [Int] = []\n    var even_idx: [Int] = []\n    var i = 0\n    while\
    \ i < l.count {\n        if i % 2 == 0 {\n            even_nums.append(l[i])\n\
    \            even_idx.append(i)\n        }\n        i += 1\n    }\n    var sorted_nums\
    \ = even_nums.sorted()\n    i = 0\n    while i < even_idx.count {\n        l[even_idx[i]]\
    \ = sorted_nums[i]\n        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_prime = l\n \
    \   for i in stride(from: 0, to: l.count, by: 2) {\n        l_prime[i] = l[i]\n\
    \        l_prime[i+1] = min(l[i], l[i+1])\n    }\n    return l_prime\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ba7c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ba4be561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b90ba4be286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b90ba4be13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b90ba4bdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b90ba2bde83 <unavailable> + 188035

    6    tmp3orlzilf                        0x000055a8fba3ed21 <unavailable> + 7457

    7    tmp3orlzilf                        0x000055a8fba3e684 <unavailable> + 5764

    8    libc.so.6                          0x00002b90ba9b3460 __libc_start_main +
    245

    9    tmp3orlzilf                        0x000055a8fba3e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  var j: Int = 0\n  var\
    \ sorted: [Int] = []\n  var odd: [Int] = []\n  for i in 0..<l.count {\n    if\
    \ i % 2 == 0 {\n      sorted.append(l[i])\n    } else {\n      odd.append(l[i])\n\
    \    }\n  }\n  sorted.sort()\n  for i in 0..<sorted.count {\n    if i % 2 == 0\
    \ {\n      sorted[i] = odd[j]\n      j += 1\n    }\n  }\n  return sorted\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgx3gxzn2/tmpgx3gxzn2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b373f8c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b373f5bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b373f5bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b373f5ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgx3gxzn2                        0x000055f5605797d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b373fab0460 __libc_start_main +
    245

    6    tmpgx3gxzn2                        0x000055f5605793d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var r: [Int] = []\n\
    \    for i in 0...l.count - 1 {\n        if i % 2 == 0 {\n            r.append(l[i])\n\
    \        } else {\n            let even = l[i...l.count - 1].filter { $0 % 2 ==\
    \ 0 }\n            let odd = l[i...l.count - 1].filter { $0 % 2 != 0 }\n     \
    \       let sorted = even.sorted() + odd\n            r.append(contentsOf: sorted)\n\
    \        }\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2ogqbf19/tmp2ogqbf19.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e32d54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e32a4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e32a4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e32a4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ogqbf19                        0x000055612047d9d4 <unavailable> + 6612

    5    libc.so.6                          0x00002b0e32f40460 __libc_start_main +
    245

    6    tmp2ogqbf19                        0x000055612047d5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1_tpvjno/tmp1_tpvjno.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5897867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b589755eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b589755e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b589755d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_tpvjno                        0x00005595888aa3c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b5897a53460 __libc_start_main +
    245

    6    tmp1_tpvjno                        0x00005595888a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let empty: [Int] =\
    \ []\n    if l.isEmpty {\n        return empty\n    }\n    if l.count == 1 {\n\
    \        return l\n    }\n    if l.count == 2 {\n        if l[0] > l[1] {\n  \
    \          return [l[1], l[0]]\n        }\n        return l\n    }\n    let first\
    \ = l[0]\n    let rest = l[1..<l.count]\n    let sorted = sort_even(l: Array(rest))\n\
    \    let index = find_index(l: sorted, e: first)\n    return insert_at(l: sorted,\
    \ e: first, i: index)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp2kkhm7ry.swift:26:17: error: cannot find 'find_index' in scope\n\
    \    let index = find_index(l: sorted, e: first)\n                ^~~~~~~~~~\n\
    /tmp/tmp2kkhm7ry.swift:27:12: error: cannot find 'insert_at' in scope\n    return\
    \ insert_at(l: sorted, e: first, i: index)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  var result = l\n  for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n    result[i] = quicksort([l[i],\
    \ l[i+1]])[0]\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpk6ip4rb0.swift:12:17: error: cannot find 'quicksort' in scope\n\
    \    result[i] = quicksort([l[i], l[i+1]])[0]\n                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var myArray = l\n \
    \   let evenIndexes = l.indices.filter { $0 % 2 == 0 }\n    for index in evenIndexes\
    \ {\n        let subArray = myArray[index...index+1]\n        let sortedSubArray\
    \ = subArray.sorted()\n        for j in 0..<sortedSubArray.count {\n         \
    \   myArray[index+j] = sortedSubArray[j]\n        }\n    }\n    return myArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ceb3b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ceb0aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6ceb0aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6ceb0aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6ceb0a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6ceb093196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6ceb2e4457 <unavailable> + 3769431

    7    libswiftCore.so                    0x00002b6ceb0df911 <unavailable> + 1653009

    8    libswiftCore.so                    0x00002b6ceb1a67c0 MutableCollection.subscript.getter
    + 212

    9    tmpt0268otm                        0x0000558a7b1d01f2 <unavailable> + 8690

    10   tmpt0268otm                        0x0000558a7b1cfac4 <unavailable> + 6852

    11   libc.so.6                          0x00002b6ceb59f460 __libc_start_main +
    245

    12   tmpt0268otm                        0x0000558a7b1cf7a9 <unavailable> + 6057

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var array = l\n   \
    \ var i = 0\n    while (i < array.count) {\n        if i % 2 == 0 {\n        \
    \    var swapped = false\n            var j = 0\n            while j < array.count\
    \ {\n                if j % 2 == 0 {\n                    if j + 1 < array.count\
    \ {\n                        if array[j] > array[j + 1] {\n                  \
    \          let temp = array[j]\n                            array[j] = array[j\
    \ + 1]\n                            array[j + 1] = temp\n                    \
    \        swapped = true\n                        }\n                    }\n  \
    \              }\n                j += 1\n            }\n            if !swapped\
    \ {\n                break\n            }\n        }\n        i += 1\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp9n3scd6g/tmp9n3scd6g.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1cdddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1cad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1cad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1cad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9n3scd6g                        0x000055ebc18c6713 <unavailable> + 5907

    5    libc.so.6                          0x00002baa1cfc9460 __libc_start_main +
    245

    6    tmp9n3scd6g                        0x000055ebc18c6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // 2- get the even\
    \ numbers, sort them, replace their index in the array\n    var l_copy = l\n \
    \   var even_numbers = [Int]()\n    for i in l_copy.indices where i % 2 == 0 {\n\
    \        even_numbers.append(l_copy[i])\n    }\n    even_numbers.sort()\n    var\
    \ index = 0\n    for i in l_copy.indices where i % 2 == 0 {\n        l_copy[i]\
    \ = even_numbers[index]\n        index += 1\n    }\n    return l_copy\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var sorted_evens =\
    \ [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n        if (i %\
    \ 2) == 0 {\n            odds.append(l[i])\n        } else {\n            sorted_evens.append(l[i])\n\
    \        }\n    }\n    sorted_evens.sort()\n    return zip(odds, sorted_evens).flatMap{[$0.0,\
    \ $0.1]}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpb29n5a6e/tmpb29n5a6e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b787f38fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b787f086b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b787f086988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b787f0857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb29n5a6e                        0x0000561bdb53d894 <unavailable> + 6292

    5    libc.so.6                          0x00002b787f57b460 __libc_start_main +
    245

    6    tmpb29n5a6e                        0x0000561bdb53d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ sorted = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.sorted()\n\
    \    var j = 0\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n        \
    \    l[i] = sorted[j]\n            j += 1\n        }\n    }\n    return l\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  for i in stride(from: 1, to: l.count, by: 2) {\n        let swapped = l[i].swap_digits()\n\
    \        if swapped < l[i] {\n            result[i] = swapped\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpgvuzhqxu.swift:12:28: error: value of type 'Int' has no member\
    \ 'swap_digits'\n        let swapped = l[i].swap_digits()\n                  \
    \    ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var v = l\n    var\
    \ a = [Int]()\n    for i in stride(from: 0, to: v.count, by: 2) {\n        a.append(v[i])\n\
    \    }\n    a.sort()\n    for i in stride(from: 0, to: v.count, by: 2) {\n   \
    \     v[i] = a[i/2]\n    }\n    return v\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  // your code goes here\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcgvufoml/tmpcgvufoml.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a768ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a7385b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a7385988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a73847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgvufoml                        0x000055c9f2548573 <unavailable> + 5491

    5    libc.so.6                          0x00002af4a787a460 __libc_start_main +
    245

    6    tmpcgvufoml                        0x000055c9f2547fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count - 1, by: 2) {\n        for j in stride(from:\
    \ i + 2, to: l.count, by: 2) {\n            if l[i] > l[j] {\n               \
    \ l.swapAt(i, j)\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var odds: [Int] = []\n\
    \    var evens: [Int] = []\n    var result: [Int] = []\n    for (i, item) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(item)\n        } else {\n\
    \            evens.append(item)\n        }\n    }\n    evens.sort()\n    for (odd,\
    \ even) in zip(odds, evens) {\n        result.append(odd)\n        result.append(even)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpv5owsi38/tmpv5owsi38.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab03a4b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab03a1b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab03a1b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab03a1af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv5owsi38                        0x000055ed2922b7f4 <unavailable> + 6132

    5    libc.so.6                          0x00002ab03a6a5460 __libc_start_main +
    245

    6    tmpv5owsi38                        0x000055ed2922b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    return l.enumerated().map\
    \ { (index, value) -> Int in\n        if index % 2 == 0 {\n            return\
    \ value\n        } else {\n            return Array(l[index - 1...index]).sorted()[0]\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqrs4reqf/tmpqrs4reqf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5b6de6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5b6addb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5b6add988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5b6adc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrs4reqf                        0x000056130666a8c4 <unavailable> + 6340

    5    libc.so.6                          0x00002ac5b6fd2460 __libc_start_main +
    245

    6    tmpqrs4reqf                        0x000056130666a4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    let\
    \ even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }\n   \
    \ let odd = l.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element }\n\
    \    var index = 0\n    for i in even.sorted() {\n        l2[index] = i\n    \
    \    index += 2\n    }\n    index = 1\n    for i in odd {\n        l2[index] =\
    \ i\n        index += 2\n    }\n    return l2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n   \
    \ var sorted = l.enumerated().filter({$0.offset % 2 == 0}).map({$0.element}).sorted()\n\
    \    var i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n           \
    \ new_l[i] = sorted[0]\n            sorted.remove(at: 0)\n        }\n        i\
    \ += 1\n    }\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n\
    \        return []\n    }\n    var r = [Int]()\n    var sorted_evens = [Int]()\n\
    \    for index in 0...l.count-1 {\n        if index % 2 == 0 {\n            r.append(l[index])\n\
    \        } else {\n            sorted_evens.append(l[index])\n        }\n    }\n\
    \    sorted_evens.sort()\n    for (i, e) in sorted_evens.enumerated() {\n    \
    \    r.insert(e, at: i*2+1)\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpn8nz52zi/tmpn8nz52zi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc5f6d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5f3c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc5f3c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc5f3c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8nz52zi                        0x000056048ca44be3 <unavailable> + 7139

    5    libc.so.6                          0x00002abc5f8bc460 __libc_start_main +
    245

    6    tmpn8nz52zi                        0x000056048ca44639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var tempArr: [Int]\
    \ = []\n    var pos = 0\n    while (pos < l.count) {\n        if (pos % 2 == 0)\
    \ {\n            tempArr.append(l[pos])\n        } else {\n            tempArr.append(contentsOf:\
    \ (l[pos...(pos + 1)] as Array).sorted())\n            pos += 1\n        }\n \
    \       pos += 1\n    }\n    return tempArr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpyp36h2d4.swift:16:60: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to type 'Array<Int>' in coercion\n            tempArr.append(contentsOf: (l[pos...(pos\
    \ + 1)] as Array).sorted())\n                                        ~~~~~~~~~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ a = l.filter{$0 % 2 == 0}\n    a.sort()\n    var i = 0\n    for j in l.indices\
    \ {\n        if l[j] % 2 == 0 {\n            l[j] = a[i]\n            i += 1\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpp5ovqw2j/tmpp5ovqw2j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52cfd97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52cfa8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52cfa8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52cfa8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5ovqw2j                        0x000055c47a1a4a23 <unavailable> + 6691

    5    libc.so.6                          0x00002b52cff83460 __libc_start_main +
    245

    6    tmpp5ovqw2j                        0x000055c47a1a4479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  var even_sorted = Array(l[0...l.count/2])\n    even_sorted.sort()\n    for\
    \ i in 0...(l.count/2) {\n        result[2*i] = even_sorted[i]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp5lm9lkll/tmp5lm9lkll.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28fd201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28fcef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28fcef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28fcef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lm9lkll                        0x000055aaa2e57924 <unavailable> + 6436

    5    libc.so.6                          0x00002b28fd3ed460 __libc_start_main +
    245

    6    tmp5lm9lkll                        0x000055aaa2e57529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // the odd indicies\
    \ are: 1, 3, 5, ...\n    // the even indicies are: 0, 2, 4, ...\n    // Start\
    \ by copying the input array:\n    var ret_val = l\n    // find the length of\
    \ the input array, and divide it by 2 to get the number of\n    // even indicies,\
    \ which are indices 0, 2, 4, ...\n    var num_even_indicies = l.count / 2\n  \
    \  // the even indicies have to be sorted from smallest to largest\n    // so\
    \ we need to loop over this part of the input array and\n    // move the lowest\
    \ number to the first even position\n    // after that we move on to the next\
    \ even position and continue\n    // doing this until we have finished sorting\
    \ all the even indicies\n    // we start at index 0, i.e. the first even position\n\
    \    for idx in 0 ..< num_even_indicies {\n        // let us find the index of\
    \ the smallest element in the even\n        // part of the array\n        var\
    \ smallest_idx = idx\n        // start with the current index, i.e. the one we\
    \ want to put\n        // the smallest element in\n        // loop over the even\
    \ part of the array from the current index\n        // to the last even index\n\
    \        for idx2 in idx ..< num_even_indicies {\n            // check if the\
    \ value at the current position is smaller than\n            // the smallest value\
    \ we have seen so far\n            if ret_val[2 * idx2] < ret_val[2 * smallest_idx]\
    \ {\n                // if it is, store the index at which we found it\n     \
    \           smallest_idx = idx2\n            }\n        }\n        // swap the\
    \ value at the current position with the smallest value\n        // we have found\
    \ so far\n        let tmp = ret_val[2 * idx]\n        ret_val[2 * idx] = ret_val[2\
    \ * smallest_idx]\n        ret_val[2 * smallest_idx] = tmp\n    }\n    // return\
    \ the sorted array\n    return ret_val\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpaz43p4en/tmpaz43p4en.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82d2683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82d237ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82d237a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82d23797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaz43p4en                        0x0000562be6b96803 <unavailable> + 6147

    5    libc.so.6                          0x00002b82d286f460 __libc_start_main +
    245

    6    tmpaz43p4en                        0x0000562be6b96259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n\
    \        return []\n    }\n    var arr = l\n    var even = [Int]()\n    for i\
    \ in stride(from: 0, to: arr.count, by: 2) {\n        even.append(arr[i])\n  \
    \  }\n    even.sort()\n    for i in stride(from: 0, to: arr.count, by: 2) {\n\
    \        arr[i] = even[i/2]\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var sort = [Int]()\n    for (i, element) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(element)\n        } else\
    \ {\n            evens.append(element)\n        }\n    }\n    evens.sort()\n \
    \   for (i, element) in l.enumerated() {\n        if i % 2 == 0 {\n          \
    \  sort.append(element)\n        } else {\n            sort.append(evens.removeFirst())\n\
    \        }\n    }\n    return sort\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_y249oey/tmp_y249oey.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc1b341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc1b038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc1b038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc1b0377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_y249oey                        0x0000555ab103ba93 <unavailable> + 6803

    5    libc.so.6                          0x00002abc1b52d460 __libc_start_main +
    245

    6    tmp_y249oey                        0x0000555ab103b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659980096
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count <= 1 {\n\
    \        return l\n    }\n    return sort_even(l: l[2..<l.count], even: l[0..<2].sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy3ew8ujf.swift:13:56: error: extra argument 'even' in call\n  \
    \  return sort_even(l: l[2..<l.count], even: l[0..<2].sorted())\n            \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpy3ew8ujf.swift:13:26:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return sort_even(l: l[2..<l.count], even: l[0..<2].sorted())\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let oddArray = l.enumerated().filter\
    \ { $0.offset % 2 == 1 }.map { $0.element }\n    let evenArray = l.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }.sorted()\n    var newArray = [Int]()\n\
    \    for (index, value) in evenArray.enumerated() {\n        newArray.append(value)\n\
    \        newArray.append(oddArray[index])\n    }\n    return newArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8366579c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8366270561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8366270286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b836627013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b836626fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b836606fe83 <unavailable> + 188035

    6    tmpocp1xc2u                        0x00005575fdf9912d <unavailable> + 8493

    7    tmpocp1xc2u                        0x00005575fdf988a4 <unavailable> + 6308

    8    libc.so.6                          0x00002b8366765460 __libc_start_main +
    245

    9    tmpocp1xc2u                        0x00005575fdf98589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count == 0 {\n\
    \        return []\n    }\n    let odd_l = l.filter(odd_index)\n    let even_l\
    \ = l.filter(even_index)\n    let l1 = sort_even(l: even_l)\n    return odd_l\
    \ + l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp1cmrgtot.swift:13:26: error: cannot find 'odd_index' in scope\n\
    \    let odd_l = l.filter(odd_index)\n                         ^~~~~~~~~\n/tmp/tmp1cmrgtot.swift:13:26:\
    \ error: converting non-escaping value to '(Int) throws -> Bool' may allow it\
    \ to escape\n    let odd_l = l.filter(odd_index)\n                         ^\n\
    /tmp/tmp1cmrgtot.swift:14:27: error: cannot find 'even_index' in scope\n    let\
    \ even_l = l.filter(even_index)\n                          ^~~~~~~~~~\n/tmp/tmp1cmrgtot.swift:14:27:\
    \ error: converting non-escaping value to '(Int) throws -> Bool' may allow it\
    \ to escape\n    let even_l = l.filter(even_index)\n                         \
    \ ^\n/tmp/tmp1cmrgtot.swift:16:18: error: cannot convert return expression of\
    \ type 'String' to return type '[Int]'\n    return odd_l + l1\n           ~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659980096
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // your code here!\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpn1h3ujfw/tmpn1h3ujfw.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4c69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4c394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4c394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4c3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn1h3ujfw                        0x000055c5c1d133c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b5e4c889460 __libc_start_main +
    245

    6    tmpn1h3ujfw                        0x000055c5c1d12fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n  let sorted: [Int] = l.enumerated().filter({$0.offset\
    \ % 2 == 0}).map({$0.element}).sorted()\n  var ret: [Int] = []\n  var j = 0\n\
    \  for i in 0..<l.count {\n    if i % 2 == 0 {\n      ret.append(sorted[j])\n\
    \      j += 1\n    } else {\n      ret.append(l[i])\n    }\n  }\n  return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n\
    \            continue\n        }\n        var min_i = i\n        for j in i+1..<l.count\
    \ {\n            if j % 2 == 0 {\n                continue\n            }\n  \
    \          if l[j] < l[min_i] {\n                min_i = j\n            }\n  \
    \      }\n        l.swapAt(i, min_i)\n        i += 1\n    }\n    return l\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_mcsqz6h/tmp_mcsqz6h.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e82cc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e829bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e829bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e829bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mcsqz6h                        0x000055c58b526853 <unavailable> + 6227

    5    libc.so.6                          0x00002b1e82eb1460 __libc_start_main +
    245

    6    tmp_mcsqz6h                        0x000055c58b5262a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    if l.count <= 1 {\n\
    \        return l\n    }\n    if l.count % 2 == 0 {\n        return sort_even(l:\
    \ Array(l[1..<l.count])) + [l[0]]\n    }\n    let element = l[0]\n    let newList\
    \ = sort_even(l: Array(l[1..<l.count]))\n    if newList.count > 0 && newList[0]\
    \ < element {\n        return [newList[0]] + [element] + Array(newList[1..<newList.count])\n\
    \    }\n    return [element] + newList\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpcpe92975/tmpcpe92975.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d7ace8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d7a9dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d7a9df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d7a9de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpe92975                        0x000055ed609776c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b1d7aed4460 __libc_start_main +
    245

    6    tmpcpe92975                        0x000055ed609772c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_l = l\n   \
    \ for i in stride(from: 0, to: l.count, by: 2) {\n        if (i + 1 < l.count)\
    \ {\n            let first = l[i]\n            let second = l[i + 1]\n       \
    \     if (first > second) {\n                new_l[i] = second\n             \
    \   new_l[i + 1] = first\n            }\n        }\n    }\n    return new_l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpeaz5j_lz/tmpeaz5j_lz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3deca5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3de99cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3de99c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3de99b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeaz5j_lz                        0x00005582228b5883 <unavailable> + 6275

    5    libc.so.6                          0x00002ab3dee91460 __libc_start_main +
    245

    6    tmpeaz5j_lz                        0x00005582228b52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n\tvar new_l = l\n\tvar\
    \ even = true\n\tfor elem in l {\n\t\tif even {\n\t\t\tnew_l[l.index(of: elem)!\
    \ + 1] = sorted([l[l.index(of: elem)! + 1], l[l.index(of: elem)!]])[0]\n\t\t}\n\
    \t\teven = !even\n\t}\n\treturn new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_7lswcgn.swift:14:36: error: cannot find 'sorted' in scope\n  \
    \                      new_l[l.index(of: elem)! + 1] = sorted([l[l.index(of: elem)!\
    \ + 1], l[l.index(of: elem)!]])[0]\n                                         \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1659980097
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var sorted = l.enumerated().filter({$0.offset\
    \ % 2 == 0}).map({$0.element}).sorted()\n    var i = 0\n    var j = 0\n    var\
    \ ret = [Int]()\n    while i < l.count {\n        if i % 2 == 0 {\n          \
    \  ret.append(sorted[j])\n            j += 1\n        } else {\n            ret.append(l[i])\n\
    \        }\n        i += 1\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] =\
    \ []\n    for i in 0..<l.count {\n        if (i % 2 == 0) {\n            result.append(l[i])\n\
    \        } else {\n            let evens = Array(l[i-1..<i+1])\n            result.append(contentsOf:\
    \ evens.sorted())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfjd7a5y3/tmpfjd7a5y3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17009cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17006c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17006c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17006c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjd7a5y3                        0x000055f1695028d4 <unavailable> + 6356

    5    libc.so.6                          0x00002b1700bb9460 __libc_start_main +
    245

    6    tmpfjd7a5y3                        0x000055f1695024d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var myList = l\n  \
    \  for i in stride(from: 0, to: myList.count, by: 2) {\n        let temp = myList[i]\n\
    \        myList[i] = min(myList[i], myList[i+1])\n        myList[i+1] = max(temp,\
    \ myList[i+1])\n    }\n    return myList\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b52616d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52613ca561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b52613ca286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b52613ca13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b52613c9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b52611c9e83 <unavailable> + 188035

    6    tmp7i8h98m5                        0x0000563da8be5d74 <unavailable> + 7540

    7    tmp7i8h98m5                        0x0000563da8be56e4 <unavailable> + 5860

    8    libc.so.6                          0x00002b52618bf460 __libc_start_main +
    245

    9    tmp7i8h98m5                        0x0000563da8be53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var res = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        res[i] = evens[i / 2]\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var c: [Int] = l.filter\
    \ { $0 % 2 == 0 }\n    c.sort()\n    return l.enumerated().map { (index, element)\
    \ -> Int in\n        index % 2 == 0 ? element : c.removeFirst()\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc9bd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc98c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc98c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc98c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc98c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002adfc98b8ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpu6ml9ame                        0x000055a58a6f5fd6 <unavailable> + 8150

    7    tmpu6ml9ame                        0x000055a58a6f6018 <unavailable> + 8216

    8    tmpu6ml9ame                        0x000055a58a6f6694 <unavailable> + 9876

    9    libswiftCore.so                    0x00002adfc992c880 Sequence.map<A>(_:)
    + 899

    10   tmpu6ml9ame                        0x000055a58a6f5d62 <unavailable> + 7522

    11   tmpu6ml9ame                        0x000055a58a6f58ef <unavailable> + 6383

    12   libc.so.6                          0x00002adfc9dbe460 __libc_start_main +
    245

    13   tmpu6ml9ame                        0x000055a58a6f5469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in 0..<l.count {\n        if i % 2 == 0 {\n            let new_l = Array(l[i..<l.count])\n\
    \            l[i..<l.count] = new_l.sorted()\n        }\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpjd5uq104.swift:14:36: error: cannot assign value of type '[Int]'\
    \ to subscript of type 'ArraySlice<Int>'\n            l[i..<l.count] = new_l.sorted()\n\
    \                             ~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i...(i+1)].sorted()[0]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eecabbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eec7b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9eec7b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9eec7b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9eec7b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b9eec79b196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b9eec9ec457 <unavailable> + 3769431

    7    libswiftCore.so                    0x00002b9eec7e7911 <unavailable> + 1653009

    8    libswiftCore.so                    0x00002b9eec8ae7c0 MutableCollection.subscript.getter
    + 212

    9    tmpztfjkot1                        0x000055fdc9eddf9e <unavailable> + 8094

    10   tmpztfjkot1                        0x000055fdc9edd8b4 <unavailable> + 6324

    11   libc.so.6                          0x00002b9eecca7460 __libc_start_main +
    245

    12   tmpztfjkot1                        0x000055fdc9edd599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    let even = l.enumerated().filter({\
    \ (i, _) in i % 2 == 0 })\n    let odd = l.enumerated().filter({ (i, _) in i %\
    \ 2 == 1 })\n    let sorted = even.sorted { $0.element < $1.element }\n    let\
    \ new_even = sorted.map { $0.element }\n    let result = odd.enumerated().map\
    \ { (i, el) in i % 2 == 0 ? new_even[i/2] : el.element }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpar8p5qb4/tmpar8p5qb4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab97af79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab97ac70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab97ac70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab97ac6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpar8p5qb4                        0x000056489b6117b4 <unavailable> + 6068

    5    libc.so.6                          0x00002ab97b165460 __libc_start_main +
    245

    6    tmpar8p5qb4                        0x000056489b6113b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659980098
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // The only empty array\
    \ that has an even length is the empty array!\n    guard !l.isEmpty else { return\
    \ l }\n    guard l.count % 2 == 0 else { return l }\n    var lastIndex = l.count\
    \ - 1\n    var sortedIndicies = [Int]()\n    var sortedList = l\n    var i = 0\n\
    \    while i < l.count {\n        // Even\n        guard i % 2 == 0 else { i +=\
    \ 1; continue }\n        let index = l.index(l.startIndex, offsetBy: i)\n    \
    \    sortedIndicies.append(l[index])\n        i += 1\n    }\n    sortedIndicies.sort()\n\
    \    i = 0\n    while i < sortedIndicies.count {\n        let index = sortedList.index(sortedList.startIndex,\
    \ offsetBy: i)\n        sortedList[index] = sortedIndicies[i]\n        i += 1\n\
    \    }\n    return sortedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpruvo1l8y/tmpruvo1l8y.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ebce8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ebcb86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ebcb86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ebcb857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpruvo1l8y                        0x000055a2855aca33 <unavailable> + 6707

    5    libc.so.6                          0x00002b9ebd07b460 __libc_start_main +
    245

    6    tmpruvo1l8y                        0x000055a2855ac489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var newList = [Int]()\n\
    \    var evenArray = [Int]()\n    var oddArray = [Int]()\n    var evenCounter\
    \ = 0\n    var oddCounter = 0\n    for index in l.indices {\n        if index\
    \ % 2 == 0 {\n            evenArray.append(l[index])\n            evenCounter\
    \ += 1\n        } else {\n            oddArray.append(l[index])\n            oddCounter\
    \ += 1\n        }\n    }\n    evenArray.sort()\n    for index in evenArray.indices\
    \ {\n        newList.append(evenArray[index])\n        newList.append(oddArray[index])\n\
    \    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08e2e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08dfde561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac08dfde286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac08dfde13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac08dfddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac08dddde83 <unavailable> + 188035

    6    tmpwvpjcr7m                        0x000055ca24e9a027 <unavailable> + 8231

    7    tmpwvpjcr7m                        0x000055ca24e99724 <unavailable> + 5924

    8    libc.so.6                          0x00002ac08e4d3460 __libc_start_main +
    245

    9    tmpwvpjcr7m                        0x000055ca24e99409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  for i in stride(from: 0, to: l.count - 1, by: 2) {\n        l_copy[i] = min(l[i],\
    \ l[i + 1])\n        l_copy[i + 1] = max(l[i], l[i + 1])\n    }\n    return l_copy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2294r862/tmp2294r862.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06ce224c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06cdf1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06cdf1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06cdf1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2294r862                        0x0000561694835973 <unavailable> + 6515

    5    libc.so.6                          0x00002b06ce410460 __libc_start_main +
    245

    6    tmp2294r862                        0x00005616948353c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_prime = l\n \
    \   for i in stride(from: 0, to: l.count, by: 2) {\n        l_prime[i] = l[i..<l.count].min()!\n\
    \    }\n    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpal_r58ew/tmpal_r58ew.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9418d4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9418a45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9418a45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9418a447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal_r58ew                        0x000055f637543a53 <unavailable> + 6739

    5    libc.so.6                          0x00002b9418f3a460 __libc_start_main +
    245

    6    tmpal_r58ew                        0x000055f6375434a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = Array(l[1..<l.count])\n\
    \    even.sort()\n    return Array(l[0..<1]) + even\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpt0y1hgmp/tmpt0y1hgmp.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a3e160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a3de57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a3de57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a3de567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0y1hgmp                        0x0000560f4e221943 <unavailable> + 6467

    5    libc.so.6                          0x00002b1a3e34c460 __libc_start_main +
    245

    6    tmpt0y1hgmp                        0x0000560f4e221399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659980097
- exit_code: 0
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var sorted = l\n  \
    \  let sorted_even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element\
    \ }.sorted()\n    for (i, value) in sorted_even.enumerated() {\n        sorted[i\
    \ * 2] = value\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980097
