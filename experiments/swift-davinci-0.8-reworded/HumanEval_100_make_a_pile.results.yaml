language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var xs = [Int]()\n    var y = n\n    while y > 0 {\n       \
    \ xs.append(y)\n        y = next_number(n: y)\n    }\n    return xs\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpxw27y8vr.swift:17:13: error: cannot find 'next_number' in scope\n\
    \        y = next_number(n: y)\n            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var a = [n]\n  for _ in 0..<n-1 {\n    a.append(a.last! - (a.last!\
    \ & 1) + (n & 1))\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpg6xnfo19/tmpg6xnfo19.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0673b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0670abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0670ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0670aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6xnfo19                        0x00005619add61602 <unavailable> + 5634

    5    libc.so.6                          0x00002ad0675a0460 __libc_start_main +
    245

    6    tmpg6xnfo19                        0x00005619add61249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    } else {\n        let last\
    \ = make_a_pile(n: n - 1).last!\n        return make_a_pile(n: n - 1) + [(last\
    \ + (last % 2 + 1))]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfop0eofe/tmpfop0eofe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba36bc81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba36b978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba36b978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba36b9777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfop0eofe                        0x000055881d18a512 <unavailable> + 5394

    5    libc.so.6                          0x00002ba36be6d460 __libc_start_main +
    245

    6    tmpfop0eofe                        0x000055881d18a159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var ret = [Int]()\n  var current_n = n\n  while current_n > 0\
    \ {\n    ret.append(current_n)\n    if current_n % 2 == 0 {\n      current_n +=\
    \ 1\n    } else {\n      current_n += 2\n    }\n  }\n  return ret\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let inc = n % 2 == 0 ? 2 : 1\n    return (1...n).map { $0 +\
    \ $0 * inc }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp973gtd2u/tmp973gtd2u.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc39a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc36a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc36a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc369f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp973gtd2u                        0x0000562692586552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7cc3b95460 __libc_start_main +
    245

    6    tmp973gtd2u                        0x0000562692586199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 0 {\n        return []\n    }\n    var array = [n]\n\
    \    var last = n\n    while last != 1 {\n        last = next_stones(last)\n \
    \       array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpg1v2tx5w.swift:19:16: error: cannot find 'next_stones' in scope\n\
    \        last = next_stones(last)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var num = n\n    while stones.count\
    \ < n {\n        stones.append(num)\n        if num % 2 == 0 {\n            num\
    \ += 1\n        } else {\n            num += 2\n        }\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwcxeci1k/tmpwcxeci1k.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf842acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf83fa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf83fa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf83fa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcxeci1k                        0x0000562c0753560f <unavailable> + 5647

    5    libc.so.6                          0x00002abf84498460 __libc_start_main +
    245

    6    tmpwcxeci1k                        0x0000562c07535169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  return (1...n).map { $0 == 1 ? n : n.sign() * ($0.isEven ? $0\
    \ + 1 : $0 - 1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp075_y8kv.swift:13:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return (1...n).map { $0 == 1 ? n : n.sign() * ($0.isEven\
    \ ? $0 + 1 : $0 - 1) }\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var tmp = n\n    while tmp > 0 {\n\
    \        stones.append(tmp)\n        if tmp % 2 == 0 {\n            tmp += 1\n\
    \        } else {\n            tmp += 2\n        }\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: [Int] = []\n    var next_level = n\n    while next_level\
    \ > 0 {\n        stones.append(next_level)\n        next_level = next_level %\
    \ 2 == 0 ? next_level - 1 : next_level - 2\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpdsbptjcl/tmpdsbptjcl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07c85efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07c82e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07c82e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07c82e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsbptjcl                        0x000055723ca0e472 <unavailable> + 5234

    5    libc.so.6                          0x00002b07c87db460 __libc_start_main +
    245

    6    tmpdsbptjcl                        0x000055723ca0e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var m = n\n    while m > 1 {\n       \
    \ m -= 1\n        if m % 2 == 0 {\n            result.append(m - 1)\n        }\
    \ else {\n            result.append(m + 1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp3rsrw_v2/tmp3rsrw_v2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b61516c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b6120db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b6120d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b6120c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rsrw_v2                        0x000055d39c7c4472 <unavailable> + 5234

    5    libc.so.6                          0x00002b4b61702460 __libc_start_main +
    245

    6    tmp3rsrw_v2                        0x000055d39c7c40b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var nStones = n\n    while nStones\
    \ > 0 {\n        result.append(nStones)\n        if nStones % 2 == 0 {\n     \
    \       nStones -= 1\n        } else {\n            nStones -= 2\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp62brctaa/tmp62brctaa.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4783366c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478305db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478305d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478305c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62brctaa                        0x000056085693a4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b4783552460 __libc_start_main +
    245

    6    tmp62brctaa                        0x000056085693a119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0)\n    var pile = [Int]()\n    var last =\
    \ n\n    while last > 0 {\n        pile.append(last)\n        last += (last %\
    \ 2 == 0) ? 2 : 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // YOUR CODE HERE\n    var y = [Int]()\n    y.append(n)\n  \
    \  var x = n\n    while x != 0 {\n        if x % 2 == 0 {\n            x = x /\
    \ 2\n            x += 1\n            y.append(x)\n        } else {\n         \
    \   x = x / 2\n            x += 2\n            y.append(x)\n        }\n    }\n\
    \    y.removeLast()\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  return Array(0..<n).map { $0 + 1 }.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpgh5s5ta6/tmpgh5s5ta6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b489c215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b489bf0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b489bf0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b489bf0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgh5s5ta6                        0x000055b73c097662 <unavailable> + 5730

    5    libc.so.6                          0x00002b489c401460 __libc_start_main +
    245

    6    tmpgh5s5ta6                        0x000055b73c0972a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // your code here\n    var output = [n]\n    while n > 1 {\n\
    \        n = n % 2 == 0 ? n/2 : n/2 + 1\n        output.append(n)\n    }\n   \
    \ return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpv1cbdap_.swift:16:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n % 2 == 0 ? n/2 : n/2 + 1\n        ^\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevelCount = n\n    while\
    \ currentLevelCount > 0 {\n        result.append(currentLevelCount)\n        currentLevelCount\
    \ = currentLevelCount.isMultiple(of: 2) ? currentLevelCount + 1 : currentLevelCount\
    \ + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).map { ($0 % 2 == 0) ? ($0 + 1) : ($0 + 2) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpemtqqr1u/tmpemtqqr1u.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ee5f9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ee5c91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ee5c91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ee5c907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemtqqr1u                        0x00005570c32c1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9ee6186460 __libc_start_main +
    245

    6    tmpemtqqr1u                        0x00005570c32c1199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else {\n        return []\n    }\n    var result\
    \ = [n]\n    var new_stones_in_next_level = n\n    while true {\n        new_stones_in_next_level\
    \ = (new_stones_in_next_level % 2 == 0) ?\n            new_stones_in_next_level\
    \ + 2 : new_stones_in_next_level + 1\n        result.append(new_stones_in_next_level)\n\
    \        if new_stones_in_next_level >= n {\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp6w_q341d/tmp6w_q341d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f8a12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f8709b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f8709988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f87087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w_q341d                        0x000055c48d1f3472 <unavailable> + 5234

    5    libc.so.6                          0x00002b00f8bfe460 __libc_start_main +
    245

    6    tmp6w_q341d                        0x000055c48d1f30b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return make_a_pile(n: n, arr: [n])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8d9qz8s5.swift:13:35: error: extra argument 'arr' in call\n   \
    \ return make_a_pile(n: n, arr: [n])\n                      ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num != 0 {\n\
    \        result.append(num)\n        if num % 2 == 0 {\n            num += 1\n\
    \        } else {\n            num += 2\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        stones.append(current)\n        if current % 2 == 0 {\n     \
    \       current -= 1\n        } else {\n            current -= 2\n        }\n\
    \    }\n    return stones.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpvc0va8l5/tmpvc0va8l5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99a1258c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99a0f4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99a0f4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99a0f4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvc0va8l5                        0x0000562cea12f532 <unavailable> + 5426

    5    libc.so.6                          0x00002b99a1444460 __libc_start_main +
    245

    6    tmpvc0va8l5                        0x0000562cea12f179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [n]\n    var i = 1\n    while i < n {\n        if\
    \ n % 2 == 0 {\n            pile.append(pile[i-1] + 2)\n        } else {\n   \
    \         pile.append(pile[i-1] + 1)\n        }\n        i += 1\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpld2ob0uo/tmpld2ob0uo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfcc584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfcc27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfcc27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfcc27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld2ob0uo                        0x000055f84da7c4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abfcc770460 __libc_start_main +
    245

    6    tmpld2ob0uo                        0x000055f84da7c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [n]\n    while n > 1 {\n        res.append(n % 2 ==\
    \ 0 ? n + 2 : n + 1)\n        n -= 1\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwq8_f4nb.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let level = n\n    var stones = [Int]()\n    for i in 1...level\
    \ {\n        if i % 2 == 0 {\n            stones.append(i + 1)\n        } else\
    \ {\n            stones.append(i)\n        }\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp6std57dn/tmp6std57dn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e6338bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e63082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e63082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e630817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6std57dn                        0x000055e6533035c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b3e63577460 __libc_start_main +
    245

    6    tmp6std57dn                        0x000055e653303209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // your code here\n    var result = [n]\n    var num = n\n \
    \   while num > 1 {\n        if num % 2 == 0 {\n            num -= 1\n       \
    \ } else {\n            num -= 2\n        }\n        result.append(num)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp_ai3eqlb/tmp_ai3eqlb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e453c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e450b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e450b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e450b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ai3eqlb                        0x000055adb4323472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7e455ae460 __libc_start_main +
    245

    6    tmp_ai3eqlb                        0x000055adb43230b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result =\n        Array(1...n)\n            .map { value\
    \ in\n                value % 2 == 0 ? value + 1 : value\n            }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2elthu97/tmp2elthu97.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f5c802c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f5c4f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f5c4f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f5c4f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2elthu97                        0x000055cf4fd64602 <unavailable> + 5634

    5    libc.so.6                          0x00002b8f5c9ee460 __libc_start_main +
    245

    6    tmp2elthu97                        0x000055cf4fd64249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr: [Int] = []\n    var level: Int = n\n    while level\
    \ > 0 {\n        arr.append(level)\n        if level % 2 == 0 {\n            level\
    \ += 1\n        } else {\n            level += 2\n        }\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0)\n    var result = [n]\n    var currentNumber\
    \ = n\n    while currentNumber > 1 {\n        currentNumber -= 1\n        if n\
    \ % 2 == 0 {\n            result.append(currentNumber + 2)\n        } else {\n\
    \            result.append(currentNumber + 1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpk271grjr/tmpk271grjr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932348dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9323184b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9323184988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93231837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk271grjr                        0x000056098aa9c472 <unavailable> + 5234

    5    libc.so.6                          0x00002b9323679460 __libc_start_main +
    245

    6    tmpk271grjr                        0x000056098aa9c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    return [Int](1...n).map{i in\n        if i % 2 == 0 {\n\
    \            return i + 1\n        } else {\n            return i\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp7ltoiwbu/tmp7ltoiwbu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f51930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f51627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f51627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f516267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ltoiwbu                        0x000055f947655602 <unavailable> + 5634

    5    libc.so.6                          0x00002b1f51b1c460 __libc_start_main +
    245

    6    tmp7ltoiwbu                        0x000055f947655249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   pile.append(i)\n        i += i % 2 == 0 ? 2 : 1\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    assert(n > 0)\n    var values = [n]\n    var current = n\n \
    \   while current > 1 {\n        current = current % 2 == 0 ? current - 1 : current\
    \ - 2\n        values.append(current)\n    }\n    return values\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp55r_5n5d/tmp55r_5n5d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adef9b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adef9861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adef9861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adef98607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55r_5n5d                        0x000055c7fe82d472 <unavailable> + 5234

    5    libc.so.6                          0x00002adef9d56460 __libc_start_main +
    245

    6    tmp55r_5n5d                        0x000055c7fe82d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    } else {\n        let nextLevel\
    \ = n + (n % 2 == 0 ? 2 : 1)\n        return [n] + make_a_pile(n: nextLevel)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n\
    \        return [n] + make_a_pile(n: n-1)\n    } else {\n        return [n] +\
    \ make_a_pile(n: n+1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var n = n\n    var res = [Int]()\n    while n > 0 {\n      \
    \  res.append(n)\n        n = n % 2 == 0 ? n / 2 : (n - 1) / 2\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppaful9y3/tmppaful9y3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae35d74bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae35d442b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae35d442988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae35d4417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppaful9y3                        0x000055d385b654d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ae35d937460 __libc_start_main +
    245

    6    tmppaful9y3                        0x000055d385b65119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var count = n\n    var output = [Int]()\n    while count > 0\
    \ {\n        output.append(count)\n        if count % 2 == 0 {\n            count\
    \ -= 1\n        } else {\n            count -= 2\n        }\n    }\n    return\
    \ output.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpcicif6ax/tmpcicif6ax.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adee19f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adee16e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adee16e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adee16e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcicif6ax                        0x000055614e231532 <unavailable> + 5426

    5    libc.so.6                          0x00002adee1bde460 __libc_start_main +
    245

    6    tmpcicif6ax                        0x000055614e231179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).map { n in\n        n == 1 ? n : n % 2 == 0 ?\
    \ n + 1 : n + 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphpjr56gq/tmphpjr56gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef20789c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef20480b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef20480988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef2047f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpjr56gq                        0x0000556fb9d26552 <unavailable> + 5458

    5    libc.so.6                          0x00002aef20975460 __libc_start_main +
    245

    6    tmphpjr56gq                        0x0000556fb9d26199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let stones = Array(1...n)\n    return stones.map {\n       \
    \ ($0 % 2 == 0) ?\n            $0 + 1 :\n            $0 + 2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp9py0ck1r/tmp9py0ck1r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad984df5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad984aecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad984aec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad984aeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9py0ck1r                        0x000055a9427dc602 <unavailable> + 5634

    5    libc.so.6                          0x00002ad984fe1460 __libc_start_main +
    245

    6    tmp9py0ck1r                        0x000055a9427dc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    while n > 0 {\n        n -= 1\n      \
    \  if n == 0 {\n            break\n        }\n        result.append(n % 2 == 0\
    \ ? n + 2 : n + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpivz56ok8.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    while true {\n        let n = n % 2 ==\
    \ 0 ? n + 2 : n + 1\n        if n <= 1 { break }\n        result.append(n)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        levels.append(next)\n        next = next.next_level()\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8zicrbd8.swift:17:21: error: value of type 'Int' has no member\
    \ 'next_level'\n        next = next.next_level()\n               ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    for x in stride(from: n, to: 0, by: -1)\
    \ {\n        let next = result.last!\n        if next % 2 == 0 {\n           \
    \ result.append(next - 1)\n        } else {\n            result.append(next -\
    \ 2)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmps_mh_7jg/tmps_mh_7jg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab19f978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab19f66fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab19f66f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab19f66e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_mh_7jg                        0x000055aec9631722 <unavailable> + 5922

    5    libc.so.6                          0x00002ab19fb64460 __libc_start_main +
    245

    6    tmps_mh_7jg                        0x000055aec9631369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else {\n        return []\n    }\n    var pile =\
    \ [n]\n    var current = n\n    while current != 1 {\n        if current % 2 ==\
    \ 0 {\n            current += 1\n        } else {\n            current += 2\n\
    \        }\n        pile.append(current)\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(stride(from: n, to: 0, by: -2)).map { (num: Int)\
    \ -> Int in\n        return num * 2 - 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp3vrjst0j/tmp3vrjst0j.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecd0e4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecd0b46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecd0b46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecd0b457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vrjst0j                        0x000055764520c5e2 <unavailable> + 5602

    5    libc.so.6                          0x00002aecd103b460 __libc_start_main +
    245

    6    tmp3vrjst0j                        0x000055764520c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var array: [Int] = []\n    if n > 0 {\n        array.append(n)\n\
    \        for i in 1..<n {\n            if n % 2 == 0 {\n                array.append(n\
    \ + i * 2)\n            } else {\n                array.append(n + i * 2 - 1)\n\
    \            }\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp3ewk2kqm/tmp3ewk2kqm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc5b5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc5851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc5851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc58507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ewk2kqm                        0x000055b4b64fa562 <unavailable> + 5474

    5    libc.so.6                          0x00002b4cc5d46460 __libc_start_main +
    245

    6    tmp3ewk2kqm                        0x000055b4b64fa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    var res = [n]\n    var level\
    \ = n\n    while level > 1 {\n        if level % 2 == 0 {\n            level /=\
    \ 2\n        } else {\n            level = (level + 1) / 2\n        }\n      \
    \  res.append(level)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp0jvv5gqj/tmp0jvv5gqj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267dca7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267d99eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267d99e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267d99d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jvv5gqj                        0x00005597e47d0472 <unavailable> + 5234

    5    libc.so.6                          0x00002b267de93460 __libc_start_main +
    245

    6    tmp0jvv5gqj                        0x00005597e47d00b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var l = n\n    var r = [Int]()\n    while l > 0 {\n        r.append(l)\n\
    \        l = (l % 2 == 0) ? l + 1 : l + 2\n    }\n    return r\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var results = [Int]()\n    results.append(n)\n    var next_odd_value\
    \ = n + 2\n    var next_even_value = n + 1\n    while next_odd_value <= n * 2\
    \ - 1 || next_even_value <= n * 2 {\n        if n % 2 == 0 {\n            if next_even_value\
    \ <= n * 2 {\n                results.append(next_even_value)\n              \
    \  next_even_value += 2\n            }\n            if next_odd_value <= n * 2\
    \ - 1 {\n                results.append(next_odd_value)\n                next_odd_value\
    \ += 2\n            }\n        } else {\n            if next_odd_value <= n *\
    \ 2 - 1 {\n                results.append(next_odd_value)\n                next_odd_value\
    \ += 2\n            }\n            if next_even_value <= n * 2 {\n           \
    \     results.append(next_even_value)\n                next_even_value += 2\n\
    \            }\n        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp34veore3/tmp34veore3.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc55c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc52beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc52be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc52bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34veore3                        0x0000557d12b924d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b0fc57b3460 __libc_start_main +
    245

    6    tmp34veore3                        0x0000557d12b92119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var list = [Int]()\n    var next = n\n    list.append(next)\n\
    \    while next != 1 {\n        if next % 2 == 0 {\n            next -= 1\n  \
    \      } else {\n            next -= 2\n        }\n        list.append(next)\n\
    \    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpp_x0m9va/tmpp_x0m9va.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac31c5b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac31c2adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac31c2ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac31c2ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp_x0m9va                        0x00005613e95094d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac31c7a2460 __libc_start_main +
    245

    6    tmpp_x0m9va                        0x00005613e9509119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        result.append(n\
    \ + 2 * i - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp5eh3v6ja/tmp5eh3v6ja.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7106e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7103d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7103d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7103d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5eh3v6ja                        0x000055a9929c95c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ac7108cc460 __libc_start_main +
    245

    6    tmp5eh3v6ja                        0x000055a9929c9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  func next(_ num: Int) -> Int {\n    return num % 2 == 0 ? num\
    \ + 2 : num + 1\n  }\n  var result = [n]\n  var current = n\n  for _ in 1..<n\
    \ {\n    current = next(current)\n    result.append(current)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpiyqgpp_s/tmpiyqgpp_s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d2a57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d274eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d274e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d274d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyqgpp_s                        0x0000555d31c0d562 <unavailable> + 5474

    5    libc.so.6                          0x00002b22d2c43460 __libc_start_main +
    245

    6    tmpiyqgpp_s                        0x0000555d31c0d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else {\n        return []\n    }\n    var result\
    \ = [n]\n    var i = n + (n % 2 == 0 ? 1 : 2)\n    while i <= n * 2 {\n      \
    \  result.append(i)\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbkdehr2a/tmpbkdehr2a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2503652c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2503349b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2503349988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25033487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkdehr2a                        0x000055e1b4133472 <unavailable> + 5234

    5    libc.so.6                          0x00002b250383e460 __libc_start_main +
    245

    6    tmpbkdehr2a                        0x000055e1b41330b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // TODO: Write some code to solve this coding challenge\n  \
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp9wkwouht/tmp9wkwouht.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e72f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e6feeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e6fee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e6fed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wkwouht                        0x000056432451c382 <unavailable> + 4994

    5    libc.so.6                          0x00002af0e74e3460 __libc_start_main +
    245

    6    tmp9wkwouht                        0x000056432451bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    var i = n\n    while i >= 1 {\n     \
    \   arr.append(i)\n        if i % 2 == 0 {\n            i += 1\n        } else\
    \ {\n            i += 2\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    var next = n\n\n\
    \    while next != 1 {\n        if next % 2 == 0 {\n            next = next -\
    \ 1\n        } else {\n            next = next / 2\n        }\n        pile.append(next)\n\
    \    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpijll7gsi/tmpijll7gsi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5175ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5175bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5175bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5175bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijll7gsi                        0x000055eb06eaf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b51760c0460 __libc_start_main +
    245

    6    tmpijll7gsi                        0x000055eb06eaf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n % 2 == 0 ? n + 2 : n + 1\n\
    \    while next <= n * 2 {\n        result.append(next)\n        next += 2\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfzknqwco/tmpfzknqwco.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe23b32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe23829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe23829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe238287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzknqwco                        0x00005621778b9472 <unavailable> + 5234

    5    libc.so.6                          0x00002afe23d1e460 __libc_start_main +
    245

    6    tmpfzknqwco                        0x00005621778b90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var n = n\n    var r = [n]\n    while n > 1 {\n        n = (n\
    \ & 1) == 0 ? n/2 : (n+1)/2\n        r.append(n)\n    }\n    return r\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpj8hzzvu0/tmpj8hzzvu0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1772b3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1772836b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1772836988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17728357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8hzzvu0                        0x0000560989832472 <unavailable> + 5234

    5    libc.so.6                          0x00002b1772d2b460 __libc_start_main +
    245

    6    tmpj8hzzvu0                        0x00005609898320b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: [Int] = []\n    var numberOfStones = n\n    while\
    \ numberOfStones > 0 {\n        stones.append(numberOfStones)\n        if numberOfStones\
    \ % 2 == 0 {\n            numberOfStones -= 1\n        } else {\n            numberOfStones\
    \ -= 2\n        }\n    }\n    return stones.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpeqp1sg4w/tmpeqp1sg4w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fd8c3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fd8933b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fd8933988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fd89327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqp1sg4w                        0x00005588a2df34d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b9fd8e28460 __libc_start_main +
    245

    6    tmpeqp1sg4w                        0x00005588a2df3119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    if n == 2 {\n  \
    \      return [2, 3]\n    }\n    var ret = [n]\n    if n % 2 == 0 {\n        ret.append(contentsOf:\
    \ make_a_pile(n: n / 2))\n    } else {\n        ret.append(contentsOf: make_a_pile(n:\
    \ (n - 1) / 2))\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzwct4vo0/tmpzwct4vo0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6217f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6214edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6214ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6214ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwct4vo0                        0x000055ffdf85c4a2 <unavailable> + 5282

    5    libc.so.6                          0x00002ac6219e2460 __libc_start_main +
    245

    6    tmpzwct4vo0                        0x000055ffdf85c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1..<n).reduce([n]) { (acc, n) in\n        acc + [acc.last!\
    \ + (acc.last! % 2 == 0 ? 2 : 1)]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp391fgdgm/tmp391fgdgm.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b9a42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b9739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b9739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b97387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp391fgdgm                        0x000055a47995b652 <unavailable> + 5714

    5    libc.so.6                          0x00002b38b9c2e460 __libc_start_main +
    245

    6    tmp391fgdgm                        0x000055a47995b299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    assert(n > 0)\n    var result = [n]\n    var cnt = n\n    while\
    \ cnt > 1 {\n        if cnt % 2 == 0 {\n            cnt = cnt / 2\n        } else\
    \ {\n            cnt = (cnt + 1) / 2\n        }\n        result.append(cnt)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp1bo2z70w/tmp1bo2z70w.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8284dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e82544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e82544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e825437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bo2z70w                        0x000055b4d3e40472 <unavailable> + 5234

    5    libc.so.6                          0x00002b4e82a39460 __libc_start_main +
    245

    6    tmp1bo2z70w                        0x000055b4d3e400b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else {\n        return []\n    }\n    var result\
    \ = [n]\n    let nextLevel = n.isMultiple(of: 2) ? n + 1 : n + 2\n    result.append(contentsOf:\
    \ make_a_pile(n: nextLevel))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 0\
    \ {\n        if current % 2 == 0 {\n            current += 1\n        } else {\n\
    \            current += 2\n        }\n        result.append(current)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map {\n        $0 % 2 == 0 ? $0 + 1 : $0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpziaqcd40/tmpziaqcd40.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0897fbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0897cb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0897cb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0897cb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziaqcd40                        0x0000562e6dace602 <unavailable> + 5634

    5    libc.so.6                          0x00002b08981a6460 __libc_start_main +
    245

    6    tmpziaqcd40                        0x0000562e6dace249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 1 {\n        return []\n    }\n    return (1...n).map({\
    \ $0 + n }).map({ $0 % 2 == 0 ? $0 + 1 : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp0pd3xvxq/tmp0pd3xvxq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b563da18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b563d70fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b563d70f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b563d70e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0pd3xvxq                        0x000055d9492b9592 <unavailable> + 5522

    5    libc.so.6                          0x00002b563dc04460 __libc_start_main +
    245

    6    tmp0pd3xvxq                        0x000055d9492b91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    \n    guard n > 0 else { return [] }\n    \n    var array =\
    \ [n]\n    var next = n\n    \n    for _ in 1...n {\n        if next % 2 == 0\
    \ {\n            next += 2\n        } else {\n            next += 1\n        }\n\
    \        array.append(next)\n    }\n    \n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpp8n5dqop/tmpp8n5dqop.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25138d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25135c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25135c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25135c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8n5dqop                        0x000055d17957b562 <unavailable> + 5474

    5    libc.so.6                          0x00002b2513abe460 __libc_start_main +
    245

    6    tmpp8n5dqop                        0x000055d17957b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).reduce(into: []) {\n        $0.append($0.last\
    \ ?? n + 1)\n        $0.append($0.last! + $0.last! % 2 + 1)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvzc8i7hw.swift:13:37: error: contextual closure type '(inout [Int],\
    \ ClosedRange<Int>.Element) throws -> ()' (aka '(inout Array<Int>, Int) throws\
    \ -> ()') expects 2 arguments, but 1 was used in closure body\n    return (1...n).reduce(into:\
    \ []) {\n                                    ^\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var level_stones = [Int]()\n    var current_level = n\n    while\
    \ (current_level > 0) {\n        level_stones.append(current_level)\n        if\
    \ (current_level % 2 == 0) {\n            current_level -= 1\n        } else {\n\
    \            current_level -= 2\n        }\n    }\n    return level_stones\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp3xl8cimg/tmp3xl8cimg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0df87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0df576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0df576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0df5757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xl8cimg                        0x000055e84245d4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ab0dfa6b460 __libc_start_main +
    245

    6    tmp3xl8cimg                        0x000055e84245d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [Int]()\n    var num = n\n    while num > 0 {\n  \
    \      res.append(num)\n        num += (num % 2 == 0) ? 2 : 1\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var i = n + (n % 2 == 0 ? 1 : 2)\n   \
    \ while i <= n*2 {\n        result.append(i)\n        i += 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp0gl8h9ib/tmp0gl8h9ib.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7ea090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7e9d87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7e9d87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7e9d867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gl8h9ib                        0x000055850fd6e472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad7ea27c460 __libc_start_main +
    245

    6    tmp0gl8h9ib                        0x000055850fd6e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978873
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n\
    \        return [n] + make_a_pile(n: n + 1)\n    } else {\n        return [n]\
    \ + make_a_pile(n: n + 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var i = n\n    var next = i % 2 == 0 ?\
    \ i + 2 : i + 1\n    while next < i * 2 {\n        result.append(next)\n     \
    \   i = next\n        next = i % 2 == 0 ? i + 2 : i + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let output = [Int](1...n).map { n in n % 2 == 0 ? (n + 1) :\
    \ (n + 2) }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpr8jkm2_2/tmpr8jkm2_2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae29b0cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae29adc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae29adc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae29adc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8jkm2_2                        0x000055ff5a103602 <unavailable> + 5634

    5    libc.so.6                          0x00002ae29b2b6460 __libc_start_main +
    245

    6    tmpr8jkm2_2                        0x000055ff5a103249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978874
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var result = [Int]()\n  var count = n\n  while count > 0 {\n \
    \   result.append(count)\n    if count % 2 == 0 {\n      count += 1\n    } else\
    \ {\n      count += 2\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next.isMultiple(of: 2) ? next + 1\
    \ : next + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    var lastLevel = n\n    while n > 0 {\n\
    \        arr.append(lastLevel)\n        lastLevel = n % 2 == 0 ? lastLevel + 2\
    \ : lastLevel + 1\n        n -= 1\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpa711kklt.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    stones.append(n)\n    for i in 1..<n\
    \ {\n        stones.append(stones[i-1] % 2 == 0 ? stones[i-1] + 2 : stones[i-1]\
    \ + 1)\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpglio3jdv/tmpglio3jdv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9740032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b973fd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b973fd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b973fd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglio3jdv                        0x0000557816bde612 <unavailable> + 5650

    5    libc.so.6                          0x00002b974021e460 __libc_start_main +
    245

    6    tmpglio3jdv                        0x0000557816bde259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: 0
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [n]\n    for i in (1..<n) {\n        pile.append(n\
    \ + 2 * i)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var n = n\n    var nn = [n]\n    while n > 1 {\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n - 1\n\
    \        }\n        nn.append(n)\n    }\n    return nn\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpdsfjepjo/tmpdsfjepjo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae280e0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae280b03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae280b03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae280b027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsfjepjo                        0x000055e77c512472 <unavailable> + 5234

    5    libc.so.6                          0x00002ae280ff8460 __libc_start_main +
    245

    6    tmpdsfjepjo                        0x000055e77c5120b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next_n = n\n    while true {\n   \
    \     if next_n % 2 == 0 {\n            next_n += 2\n        } else {\n      \
    \      next_n += 1\n        }\n        if next_n == n {\n            break\n \
    \       }\n        result.append(next_n)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = (1...n).map { (i) -> Int in\n        let first\
    \ = i * 2 - 1\n        if i % 2 == 0 {\n            return first + 1\n       \
    \ } else {\n            return first\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpce9r_ou4/tmpce9r_ou4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6483b7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6483872b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6483872988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64838717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpce9r_ou4                        0x000055f005380552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6483d67460 __libc_start_main +
    245

    6    tmpce9r_ou4                        0x000055f005380199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = n\n    while level > 0 {\n\
    \        pile.append(level)\n        level += (level % 2 == 0) ? 2 : 1\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var rowOfStones = [n]\n    var currentNumberOfStones = n\n \
    \   while currentNumberOfStones > 1 {\n        if currentNumberOfStones % 2 ==\
    \ 0 {\n            currentNumberOfStones -= 1\n        } else {\n            currentNumberOfStones\
    \ -= 2\n        }\n        rowOfStones.append(currentNumberOfStones)\n    }\n\
    \    return rowOfStones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppk0iwkmo/tmppk0iwkmo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa330cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa32dc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa32dc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa32dc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk0iwkmo                        0x0000564134789472 <unavailable> + 5234

    5    libc.so.6                          0x00002afa332b6460 __libc_start_main +
    245

    6    tmppk0iwkmo                        0x00005641347890b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978877
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: [Int] = []\n    for i in 1...n {\n        if n %\
    \ 2 == 0 {\n            stones.append(i * 2)\n        } else {\n            stones.append(i\
    \ * 2 - 1)\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp7b5i65uu/tmp7b5i65uu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3292ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32929d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32929d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32929d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b5i65uu                        0x0000564ed4963562 <unavailable> + 5474

    5    libc.so.6                          0x00002b3292ecd460 __libc_start_main +
    245

    6    tmp7b5i65uu                        0x0000564ed49631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    var pile = [Int]()\n   \
    \ var stones = n\n    while stones > 0 {\n        pile.append(stones)\n      \
    \  stones = n % 2 == 0 ? stones - 1 : stones + 1\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let remainder = n % 2\n    var result = [Int]()\n    for i in\
    \ 0...n {\n        result.append(n + i + remainder)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpb39wak07/tmpb39wak07.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7ea415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7ea10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7ea10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7ea10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb39wak07                        0x000056286bf1a5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ab7ea601460 __libc_start_main +
    245

    6    tmpb39wak07                        0x000056286bf1a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var m = n\n    var results = [Int]()\n    while m > 0 {\n  \
    \      results.append(m)\n        m += m % 2 == 0 ? 2 : 1\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).map { $0 * n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp5z31wzgv/tmp5z31wzgv.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b727aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b724a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b724a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b724a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5z31wzgv                        0x0000564fdd8ec552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8b7299a460 __libc_start_main +
    245

    6    tmp5z31wzgv                        0x0000564fdd8ec199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var a = [n]\n    while a.last! > 1 {\n        a.append(a.last!\
    \ + ((a.last! + 1) % 2 == 0 ? 1 : 2))\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let base: Int = n + (n % 2 == 0 ? 0 : 1)\n    var result: [Int]\
    \ = [n]\n    for i in stride(from: base, to: n, by: 2) {\n        result.append(i)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpupmkv_6y/tmpupmkv_6y.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec66006c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec65cfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec65cfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec65cfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupmkv_6y                        0x000055e135c80682 <unavailable> + 5762

    5    libc.so.6                          0x00002aec661f2460 __libc_start_main +
    245

    6    tmpupmkv_6y                        0x000055e135c802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [n]\n    var stone = n\n    while stone > 1 {\n\
    \        stone = stone.isMultiple(of: 2) ? stone / 2 : (stone + 1) / 2\n     \
    \   stones.append(stone)\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpdiwdziv0/tmpdiwdziv0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abef838bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abef8082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abef8082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abef80817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiwdziv0                        0x000055bf842ba572 <unavailable> + 5490

    5    libc.so.6                          0x00002abef8577460 __libc_start_main +
    245

    6    tmpdiwdziv0                        0x000055bf842ba1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    var top = n\n  \
    \  while top != 1 {\n        if top % 2 == 0 {\n            top = top - 1\n  \
    \      } else {\n            top = top - 2\n        }\n        pile.append(top)\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfv5v5386/tmpfv5v5386.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5cf020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5ced17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5ced17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5ced167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfv5v5386                        0x000055742b5224d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ba5cf20c460 __libc_start_main +
    245

    6    tmpfv5v5386                        0x000055742b522119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // your code here\n    return Array<Int>()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpz2d1fr14/tmpz2d1fr14.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b730b34bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b730b042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b730b042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b730b0417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2d1fr14                        0x000055ea4687b3e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b730b537460 __libc_start_main +
    245

    6    tmpz2d1fr14                        0x000055ea4687b029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0)\n    var stones_in_level = n\n    var nxt_stones_in_level\
    \ = stones_in_level + ((stones_in_level % 2 == 0) ? 2 : 1)\n    var pile = [stones_in_level]\n\
    \    while nxt_stones_in_level < n * 3 {\n        pile.append(nxt_stones_in_level)\n\
    \        stones_in_level = nxt_stones_in_level\n        nxt_stones_in_level =\
    \ stones_in_level + ((stones_in_level % 2 == 0) ? 2 : 1)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpuft3owlt/tmpuft3owlt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c0a9f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c0a6e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c0a6e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c0a6e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuft3owlt                        0x000055ab3c0d2472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7c0abde460 __libc_start_main +
    245

    6    tmpuft3owlt                        0x000055ab3c0d20b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        if current % 2 == 0 {\n            current += 1\n        } else {\n\
    \            current += 2\n        }\n        result.append(current)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        if i % 2\
    \ == 0 {\n            result.append(n + i)\n        } else {\n            result.append(n\
    \ + i + 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpf_12ssaq/tmpf_12ssaq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e141e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e13ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e13ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e13ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_12ssaq                        0x000055fa203f25c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b2e143cc460 __libc_start_main +
    245

    6    tmpf_12ssaq                        0x000055fa203f2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var list: [Int] = []\n    var i = n\n    while i > 0 {\n   \
    \     list.append(i)\n        if i % 2 == 0 {\n            i -= 1\n        } else\
    \ {\n            i -= 2\n        }\n    }\n    return list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmppbvwmbhl/tmppbvwmbhl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8104dddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8104ad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8104ad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8104ad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbvwmbhl                        0x00005590a0503472 <unavailable> + 5234

    5    libc.so.6                          0x00002b8104fc9460 __libc_start_main +
    245

    6    tmppbvwmbhl                        0x00005590a05030b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1..<n).map { $0 + n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzrgpxa9g/tmpzrgpxa9g.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98c3248c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98c2f3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98c2f3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98c2f3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrgpxa9g                        0x0000561a07750552 <unavailable> + 5458

    5    libc.so.6                          0x00002b98c3434460 __libc_start_main +
    245

    6    tmpzrgpxa9g                        0x0000561a07750199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var levels = [n]\n    while levels.last! > 1 {\n        levels.append(levels.last!\
    \ & 1 == 0 ? levels.last! / 2 : levels.last! * 3 + 1)\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzncylzxc/tmpzncylzxc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b292ee14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b292eb0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b292eb0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b292eb0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzncylzxc                        0x000055b3162be512 <unavailable> + 5394

    5    libc.so.6                          0x00002b292f000460 __libc_start_main +
    245

    6    tmpzncylzxc                        0x000055b3162be159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    var i = n\n    while i > 0 {\n      \
    \  arr.append(i)\n        if i%2 == 0 {\n            i += 1\n        } else {\n\
    \            i += 2\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var result = [Int]()\n  var k = n\n  while k > 0 {\n    result.append(k)\n\
    \    k = k % 2 == 0 ? k - 1 : k - 2\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4ykxqtpf/tmp4ykxqtpf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2210a1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2210712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2210712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22107117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ykxqtpf                        0x00005631d2a9c4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b2210c07460 __libc_start_main +
    245

    6    tmp4ykxqtpf                        0x00005631d2a9c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next_value = n - 1\n    while next_value\
    \ > 0 {\n        result.append(next_value)\n        next_value = next_value %\
    \ 2 == 0 ? next_value - 2 : next_value - 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbbg9wvxh/tmpbbg9wvxh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d1761cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d17313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d17313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d173127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbg9wvxh                        0x000055da40fae472 <unavailable> + 5234

    5    libc.so.6                          0x00002b9d17808460 __libc_start_main +
    245

    6    tmpbbg9wvxh                        0x000055da40fae0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 1 {\n        return []\n    }\n    var stones: [Int]\
    \ = [n]\n    var next_stones = n % 2 == 0 ? n + 2 : n + 1\n    while next_stones\
    \ <= n * 2 {\n        stones.append(next_stones)\n        next_stones = next_stones\
    \ % 2 == 0 ? next_stones + 2 : next_stones + 1\n    }\n    return stones\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpiu9m2s4b/tmpiu9m2s4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0a7799c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0a7490b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0a7490988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0a748f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiu9m2s4b                        0x00005638534cb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ae0a7985460 __libc_start_main +
    245

    6    tmpiu9m2s4b                        0x00005638534cb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map { $0 * 2 - 1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4fdz6gsa/tmp4fdz6gsa.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21a53f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21a50ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21a50ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21a50eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fdz6gsa                        0x0000555cda58a602 <unavailable> + 5634

    5    libc.so.6                          0x00002b21a55e1460 __libc_start_main +
    245

    6    tmp4fdz6gsa                        0x0000555cda58a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var x = n\n    while (x > 0) {\n     \
    \   if x % 2 == 0 {\n            x += 1\n        } else {\n            x += 2\n\
    \        }\n        result.append(x)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978884
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var x = 1\n    while x < n {\n       \
    \ if result.last! % 2 == 0 {\n            result.append(result.last! + 2)\n  \
    \      } else {\n            result.append(result.last! + 1)\n        }\n    \
    \    x += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpmngfgryu/tmpmngfgryu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff28b8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff28885b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff28885988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff288847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmngfgryu                        0x0000556ee324c512 <unavailable> + 5394

    5    libc.so.6                          0x00002aff28d7a460 __libc_start_main +
    245

    6    tmpmngfgryu                        0x0000556ee324c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0)\n    let initialLevel = n\n    let isEven\
    \ = n % 2 == 0\n    var nextNumber = isEven ? (n + 2) : (n + 1)\n    return (1...n).map\
    \ { _ in\n        let currentLevel = nextNumber\n        nextNumber = isEven ?\
    \ (nextNumber + 2) : (nextNumber + 1)\n        return currentLevel\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpi6uhn3n9/tmpi6uhn3n9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6fabc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6fa8b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6fa8b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6fa8b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6uhn3n9                        0x0000559d38ec7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac6fadac460 __libc_start_main +
    245

    6    tmpi6uhn3n9                        0x0000559d38ec7199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978878
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map { n in\n        if n.isMultiple(of:\
    \ 2) {\n            return n * 2\n        } else {\n            return n * 2 -\
    \ 1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpon2o8a5e/tmpon2o8a5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae001028c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae000d1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae000d1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae000d1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon2o8a5e                        0x0000560ed5d916c2 <unavailable> + 5826

    5    libc.so.6                          0x00002ae001214460 __libc_start_main +
    245

    6    tmpon2o8a5e                        0x0000560ed5d91309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let initial: [Int] = [n]\n    return (1..<n).reduce(initial)\
    \ { a, _ in\n        if a.last! % 2 == 0 {\n            return a + [a.last! +\
    \ 2]\n        } else {\n            return a + [a.last! + 1]\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmphwxa6fsy/tmphwxa6fsy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e09de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e09ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e09ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e09ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwxa6fsy                        0x0000559f6a78e652 <unavailable> + 5714

    5    libc.so.6                          0x00002b2e09fcd460 __libc_start_main +
    245

    6    tmphwxa6fsy                        0x0000559f6a78e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var array: [Int] = []\n    var i = 1\n    while array.count\
    \ < n {\n        if i % 2 == 0 {\n            array.append(i + 1)\n        } else\
    \ {\n            array.append(i)\n        }\n        i += 1\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpv3l3tg2_/tmpv3l3tg2_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba509268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba508f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba508f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba508f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3l3tg2_                        0x000055b70bb8b4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ba509454460 __libc_start_main +
    245

    6    tmpv3l3tg2_                        0x000055b70bb8b119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var stones: [Int] = []\n  var x = n\n  while x > 0 {\n    stones.append(x)\n\
    \    x = (x % 2 == 0) ? x - 1 : x - 2\n  }\n  return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpqf2tabxc/tmpqf2tabxc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfb117fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfb0e76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfb0e76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfb0e757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf2tabxc                        0x000055ffd7264472 <unavailable> + 5234

    5    libc.so.6                          0x00002acfb136b460 __libc_start_main +
    245

    6    tmpqf2tabxc                        0x000055ffd72640b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 1 {\n        return []\n    }\n    var result = [Int]()\n\
    \    result.append(n)\n    var current = n\n    while current > 1 {\n        current\
    \ = (current % 2 == 0) ? current / 2 : current / 2 + 1\n        result.append(current)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpcjmvl1k_/tmpcjmvl1k_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e30926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e3061db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e3061d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e3061c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjmvl1k_                        0x0000557ad66614d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5e30b12460 __libc_start_main +
    245

    6    tmpcjmvl1k_                        0x0000557ad6661119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var result = [Int]()\n  var stone = n\n  while stone > 0 {\n \
    \   result.append(stone)\n    stone += (stone % 2 == 0) ? 2 : 1\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978884
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return [Int](1...n).map { ($0 + n) / 2 * 2 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzg0nelmb/tmpzg0nelmb.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bda688c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bda37fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bda37f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bda37e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzg0nelmb                        0x00005614ee041602 <unavailable> + 5634

    5    libc.so.6                          0x00002b6bda874460 __libc_start_main +
    245

    6    tmpzg0nelmb                        0x00005614ee041249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else {\n        return []\n    }\n    var pile =\
    \ [n]\n    var idx = 0\n    var i = n - 1\n    while i > 0 {\n        if n % 2\
    \ == 0 {\n            if i % 2 == 0 {\n                pile.append(i)\n      \
    \          idx += 1\n                i -= 1\n            } else {\n          \
    \      i -= 1\n            }\n        } else {\n            if i % 2 == 0 {\n\
    \                i -= 1\n            } else {\n                pile.append(i)\n\
    \                idx += 1\n                i -= 1\n            }\n        }\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpafo7gk6w/tmpafo7gk6w.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0988f91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0988c88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0988c88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0988c877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafo7gk6w                        0x00005578f9e37472 <unavailable> + 5234

    5    libc.so.6                          0x00002b098917d460 __libc_start_main +
    245

    6    tmpafo7gk6w                        0x00005578f9e370b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones += 1\n        } else {\n            stones += 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978884
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    for i in 1..<n {\n        result.append(n\
    \ - i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2p1vpa85/tmp2p1vpa85.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa12345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1203cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1203c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1203b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2p1vpa85                        0x0000555b1e1fb562 <unavailable> + 5474

    5    libc.so.6                          0x00002baa12531460 __libc_start_main +
    245

    6    tmp2p1vpa85                        0x0000555b1e1fb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [n]\n    while arr.last! > 0 {\n        if arr.last!\
    \ % 2 == 0 {\n            arr.append(arr.last! / 2)\n        } else {\n      \
    \      arr.append((arr.last! + 1) / 2)\n        }\n    }\n    return arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978884
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map {\n        if $0 % 2 == 0 {\n      \
    \      return $0 + 1\n        } else {\n            return $0 + 2\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpj0t49vrv/tmpj0t49vrv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acda5cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acda59a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acda59a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acda59a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0t49vrv                        0x0000557f72570602 <unavailable> + 5634

    5    libc.so.6                          0x00002acda5e98460 __libc_start_main +
    245

    6    tmpj0t49vrv                        0x0000557f72570249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [Int]()\n    arr.append(n)\n    var count = n + 2\n\
    \    while count < (n * 2) {\n        arr.append(count)\n        count += 2\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpzpygqvxw/tmpzpygqvxw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba7612bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba75e22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba75e22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba75e217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzpygqvxw                        0x000055e35be25442 <unavailable> + 5186

    5    libc.so.6                          0x00002aba76317460 __libc_start_main +
    245

    6    tmpzpygqvxw                        0x000055e35be25089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    var nums = [n]\n    var\
    \ next = n % 2 == 0 ? n + 2 : n + 1\n    while next <= n * 2 {\n        nums.append(next)\n\
    \        next += next % 2 == 0 ? 2 : 1\n    }\n    return nums\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpauooh4na/tmpauooh4na.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4e186c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf4de7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf4de7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf4de7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpauooh4na                        0x000055e3c9dbb472 <unavailable> + 5234

    5    libc.so.6                          0x00002adf4e372460 __libc_start_main +
    245

    6    tmpauooh4na                        0x000055e3c9dbb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ans = [n]\n    while ans.last! > 1 {\n        let next =\
    \ ans.last! % 2 == 0 ? ans.last! / 2 : ans.last! / 2 + 1\n        ans.append(next)\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphh4jkodx/tmphh4jkodx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b038c600c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b038c2f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b038c2f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b038c2f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh4jkodx                        0x000055d2e058b512 <unavailable> + 5394

    5    libc.so.6                          0x00002b038c7ec460 __libc_start_main +
    245

    6    tmphh4jkodx                        0x000055d2e058b159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var temp = n\n    var res = [n]\n    while temp != 1 {\n   \
    \     if temp % 2 == 0 {\n            temp /= 2\n        } else {\n          \
    \  temp = (temp - 1) / 2\n        }\n        res.append(temp)\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpx0xk1gj4/tmpx0xk1gj4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7f3624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7f331bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7f331b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7f331a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0xk1gj4                        0x000055af37874472 <unavailable> + 5234

    5    libc.so.6                          0x00002ac7f3810460 __libc_start_main +
    245

    6    tmpx0xk1gj4                        0x000055af378740b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [Int]()\n    var n = n\n    while n > 0 {\n      \
    \  res.append(n)\n        n = n % 2 == 0 ? n - 1 : n - 2\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmperrqn14v/tmperrqn14v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b038e730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b038e427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b038e427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b038e4267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperrqn14v                        0x0000563173e4a4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b038e91c460 __libc_start_main +
    245

    6    tmperrqn14v                        0x0000563173e4a119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var n = n\n  var res = [Int]()\n  while n > 0 {\n    res.append(n)\n\
    \    n = (n % 2 == 0) ? n + 1 : n + 2\n  }\n  return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978884
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var res = [Int]()\n    var i = n\n    while i > 0 {\n      \
    \  res.append(i)\n        if i % 2 == 0 {\n            i -= 1\n        } else\
    \ {\n            i -= 2\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpu4nynzyd/tmpu4nynzyd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2c9b97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2c988eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2c988e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2c988d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4nynzyd                        0x0000555ef31364d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac2c9d83460 __libc_start_main +
    245

    6    tmpu4nynzyd                        0x0000555ef3136119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    return (1...n).reduce(into:\
    \ []) {\n        $0.append($0.last ?? n)\n        $0.append($0.last! + 2 * ($0.count\
    \ % 2))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmps8prz9wo.swift:14:37: error: contextual closure type '(inout [Int],\
    \ ClosedRange<Int>.Element) throws -> ()' (aka '(inout Array<Int>, Int) throws\
    \ -> ()') expects 2 arguments, but 1 was used in closure body\n    return (1...n).reduce(into:\
    \ []) {\n                                    ^\n"
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    for i in stride(from: n, to: 0, by: -1)\
    \ {\n        if i % 2 == 0 {\n            result.append(i + 2)\n        } else\
    \ {\n            result.append(i + 1)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpy3gvmk5g/tmpy3gvmk5g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44eedb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44eeaaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44eeaaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44eeaa97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3gvmk5g                        0x0000564617201682 <unavailable> + 5762

    5    libc.so.6                          0x00002b44eef9f460 __libc_start_main +
    245

    6    tmpy3gvmk5g                        0x00005646172012c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 0
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(n\
    \ + 2 * i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    let first = n\n    let last\
    \ = n % 2 == 0 ? n + 2 : n + 1\n    let middle = (last - first) / 2\n    return\
    \ Array(first...last).map { $0 - middle }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpces6ab85/tmpces6ab85.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ce0c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ce0940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ce0940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ce093f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpces6ab85                        0x000055c67da7e602 <unavailable> + 5634

    5    libc.so.6                          0x00002b4ce0e35460 __libc_start_main +
    245

    6    tmpces6ab85                        0x000055c67da7e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1..<n).map { $0 % 2 == 0 ? n + $0 : n + $0 + 1 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpfev3fz2o/tmpfev3fz2o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6dc5dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6dc2d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6dc2d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6dc2d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfev3fz2o                        0x0000555c88ac9552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac6dc7c8460 __libc_start_main +
    245

    6    tmpfev3fz2o                        0x0000555c88ac9199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  if n == 1 {\n    return [1]\n  }\n  if n % 2 == 0 {\n    return\
    \ [n] + make_a_pile(n: n - 1)\n  } else {\n    return [n] + make_a_pile(n: n +\
    \ 1)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978885
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [n]\n    for i in 1..<n {\n        if n % 2 == 0 {\n\
    \            arr.append(n + 2 * i)\n        } else {\n            arr.append(n\
    \ + 2 * i - 1)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpk47kwhy_/tmpk47kwhy_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f4e15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f4b0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f4b0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f4b0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk47kwhy_                        0x0000557850ccd562 <unavailable> + 5474

    5    libc.so.6                          0x00002b34f5001460 __libc_start_main +
    245

    6    tmpk47kwhy_                        0x0000557850ccd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var m = n\n    var result = [n]\n    while m > 1 {\n       \
    \ if m % 2 == 0 {\n            m = m / 2\n        } else {\n            m = m\
    \ / 2 + 1\n        }\n        result.append(2 * m)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzydql_ig/tmpzydql_ig.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab90f919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab90f610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab90f610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab90f60f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzydql_ig                        0x000055ca6cc9f472 <unavailable> + 5234

    5    libc.so.6                          0x00002ab90fb05460 __libc_start_main +
    245

    6    tmpzydql_ig                        0x000055ca6cc9f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num > 0 {\n\
    \        result.append(num)\n        num = next_num(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpy3tuurvm.swift:17:15: error: cannot find 'next_num' in scope\n\
    \        num = next_num(num)\n              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var next = [n]\n    var n = n\n    while n > 1 {\n        n\
    \ = n%2 == 0 ? n/2 : n/2 + 1\n        next.append(n)\n    }\n    return next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmprg_jhks8/tmprg_jhks8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e65152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e64e49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e64e49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e64e487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg_jhks8                        0x000055c752b31472 <unavailable> + 5234

    5    libc.so.6                          0x00002b9e6533e460 __libc_start_main +
    245

    6    tmprg_jhks8                        0x000055c752b310b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in stride(from: n, to: 0, by:\
    \ -1) {\n        result.append(i)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpaqnkm0ym/tmpaqnkm0ym.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba773e82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba773b79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba773b79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba773b787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqnkm0ym                        0x0000564c7ec90642 <unavailable> + 5698

    5    libc.so.6                          0x00002ba77406e460 __libc_start_main +
    245

    6    tmpaqnkm0ym                        0x0000564c7ec90289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var result = [Int]()\n  for i in 0..<n {\n    if i % 2 == 0 {\n\
    \      result.append(n + 2 * i)\n    } else {\n      result.append(n + 2 * i +\
    \ 1)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpp3936rr3/tmpp3936rr3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6605c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b660590eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b660590e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b660590d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3936rr3                        0x0000560bbbf955c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b6605e03460 __libc_start_main +
    245

    6    tmpp3936rr3                        0x0000560bbbf95209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var pile = [Int]()\n  var current = n\n  while current > 0 {\n\
    \    pile.append(current)\n    current = next_even_or_odd(current)\n  }\n  return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpw_nm6sgb.swift:17:15: error: cannot find 'next_even_or_odd' in\
    \ scope\n    current = next_even_or_odd(current)\n              ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones: [Int] = []\n    var i = n\n\n    while i > 0 {\n\
    \        stones.append(i)\n        i = i % 2 == 0 ? i - 1 : i - 2\n    }\n\n \
    \   return stones.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpk8r1cguh/tmpk8r1cguh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad62a607c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad62a2feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad62a2fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad62a2fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8r1cguh                        0x000055c1575aa4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ad62a7f3460 __libc_start_main +
    245

    6    tmpk8r1cguh                        0x000055c1575aa119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    if n > 1 {\n        var number = n + (n\
    \ % 2 == 0 ? 2 : 1)\n        for _ in 0..<n - 1 {\n            result.append(number)\n\
    \            number += (number % 2 == 0 ? 2 : 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpp4ku7bn1/tmpp4ku7bn1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9c02dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9bffd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9bffd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9bffd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4ku7bn1                        0x0000562a24bf1562 <unavailable> + 5474

    5    libc.so.6                          0x00002af9c04c7460 __libc_start_main +
    245

    6    tmpp4ku7bn1                        0x0000562a24bf11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: 0
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    for level in 0..<n {\n        pile.append(n\
    \ + 2 * level)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = n%2 == 0 ? n-1 : n+1\n    \
    \    n = level\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwkcocukx.swift:18:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = level\n        ^\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var i = 0\n    var next_level = [Int]()\n    while i < n {\n\
    \        next_level.append(i+1)\n        i += 1\n    }\n    return next_level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp2dw0t6kh/tmp2dw0t6kh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adee30d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adee2dcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adee2dcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adee2dcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dw0t6kh                        0x0000557778558442 <unavailable> + 5186

    5    libc.so.6                          0x00002adee32c2460 __libc_start_main +
    245

    6    tmp2dw0t6kh                        0x0000557778558089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return [Int](0...n).map({ $0 + n })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpbzla72rs/tmpbzla72rs.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b523710cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5236e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5236e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5236e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzla72rs                        0x0000564565b7c602 <unavailable> + 5634

    5    libc.so.6                          0x00002b52372f8460 __libc_start_main +
    245

    6    tmpbzla72rs                        0x0000564565b7c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var m = n\n    while m > 0 {\n   \
    \     result.append(m)\n        m += (m % 2 == 0) ? 2 : 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978885
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    } else {\n        var result\
    \ = make_a_pile(n: n - 1)\n        result.append(result.last! + (n % 2 == 0 ?\
    \ 2 : 1))\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp95pby5n3/tmp95pby5n3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1c387cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1c3573b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1c3573988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1c35727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95pby5n3                        0x000055b492f55512 <unavailable> + 5394

    5    libc.so.6                          0x00002af1c3a68460 __libc_start_main +
    245

    6    tmp95pby5n3                        0x000055b492f55159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0)\n    var result = [Int]()\n    var n = n\n\
    \    var i = 0\n    while n > 0 {\n        result.append(n)\n        i += 1\n\
    \        if i % 2 == 0 {\n            n -= 1\n        } else {\n            n\
    \ -= 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpozed9om0/tmpozed9om0.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ceb3a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ceb09ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ceb09a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ceb0997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozed9om0                        0x000055f3804284d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b9ceb58f460 __libc_start_main +
    245

    6    tmpozed9om0                        0x000055f380428119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978885
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    var pile = [n]\n    while\
    \ pile.last! > 1 {\n        let lst = pile.last!\n        pile.append(lst.isMultiple(of:\
    \ 2) ? lst / 2 : (lst + 1) / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpinajn0om/tmpinajn0om.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf23a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf209bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf209b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf209a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinajn0om                        0x00005603e389f612 <unavailable> + 5650

    5    libc.so.6                          0x00002aadf2590460 __libc_start_main +
    245

    6    tmpinajn0om                        0x00005603e389f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var remaining = n\n    while remaining\
    \ > 0 {\n        result.append(remaining)\n        remaining -= remaining % 2\
    \ == 0 ? 2 : 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpkcq9s07_/tmpkcq9s07_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec3a49ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec3a191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec3a191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec3a1907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcq9s07_                        0x0000560af088d4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002aec3a686460 __libc_start_main +
    245

    6    tmpkcq9s07_                        0x0000560af088d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpv34lf39t/tmpv34lf39t.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad61be43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad61bb3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad61bb3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad61bb397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv34lf39t                        0x0000555dd0609382 <unavailable> + 4994

    5    libc.so.6                          0x00002ad61c02f460 __libc_start_main +
    245

    6    tmpv34lf39t                        0x0000555dd0608fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var pile = [n]\n  var next = n % 2 == 0 ? n + 2 : n + 1\n  for\
    \ _ in 1..<n {\n    pile.append(next)\n    next += 2\n  }\n  return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpavrdpn1_/tmpavrdpn1_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81e5d89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81e5a80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81e5a80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81e5a7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavrdpn1_                        0x00005591d472b562 <unavailable> + 5474

    5    libc.so.6                          0x00002b81e5f75460 __libc_start_main +
    245

    6    tmpavrdpn1_                        0x00005591d472b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    assert(n > 0)\n    var result = [Int]()\n    var current = n\n\
    \    while current > 0 {\n        result.append(current)\n        current = n\
    \ % 2 == 0 ? current + 2 : current + 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 1 {\n        return []\n    }\n    var result = [n]\n\
    \    var current = n\n    while current > 1 {\n        current = current.isEven\
    \ ? current/2 : current/2 + 1\n        result.append(current)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpr25hnwr8.swift:19:27: error: value of type 'Int' has no member\
    \ 'isEven'\n        current = current.isEven ? current/2 : current/2 + 1\n   \
    \               ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).map {\n        var stones = n\n        if n %\
    \ 2 == 0 {\n            stones += 2 * $0\n        } else {\n            stones\
    \ += 2 * $0 - 1\n        }\n        return stones\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4gd7j36m/tmp4gd7j36m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeda8c73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeda896ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeda896a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeda89697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4gd7j36m                        0x00005613bd48f552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeda8e5f460 __libc_start_main +
    245

    6    tmp4gd7j36m                        0x00005613bd48f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var n = n\n    var array = [Int]()\n    while n > 0 {\n    \
    \    array.append(n)\n        if n % 2 == 0 {\n            n -= 1\n        } else\
    \ {\n            n -= 2\n        }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmppp6c3hra/tmppp6c3hra.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b5e28ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b5df81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b5df81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b5df807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp6c3hra                        0x000055c6af0474d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b3b5e476460 __libc_start_main +
    245

    6    tmppp6c3hra                        0x000055c6af047119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // TODO: Implement Function\n    var result: [Int] = []\n  \
    \  var i = 1\n    while i <= n {\n        result.append(i)\n        if i % 2 ==\
    \ 0 {\n            i += 1\n        } else {\n            i += 2\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpmmfg8xm5/tmpmmfg8xm5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40475c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40472b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40472b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40472b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmfg8xm5                        0x000055ac5a096472 <unavailable> + 5234

    5    libc.so.6                          0x00002b40477ac460 __libc_start_main +
    245

    6    tmpmmfg8xm5                        0x000055ac5a0960b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  return [Int](1...n).map({ (n) -> Int in\n    let next = (n % 2\
    \ == 0) ? n + 1 : n + 2\n    return next\n  })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp89ctdwvi/tmp89ctdwvi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba19263c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba18f5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba18f5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba18f597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89ctdwvi                        0x00005598afd79602 <unavailable> + 5634

    5    libc.so.6                          0x00002aba1944f460 __libc_start_main +
    245

    6    tmp89ctdwvi                        0x00005598afd79249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var array = [n]\n    var i = n - 1\n    while i >= 1 {\n   \
    \     if i % 2 == 0 {\n            array.append(i + 1)\n        } else {\n   \
    \         array.append(i - 1)\n        }\n        i -= 1\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp09_ag3x7/tmp09_ag3x7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac04cb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac04c851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac04c851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac04c8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09_ag3x7                        0x00005584d99ec472 <unavailable> + 5234

    5    libc.so.6                          0x00002ac04cd46460 __libc_start_main +
    245

    6    tmp09_ag3x7                        0x00005584d99ec0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let maxLevel = (n * 2) - 1\n    var levels = [Int]()\n    for\
    \ level in 1...maxLevel {\n        let numStones = level * 2 - 1\n        levels.append(numStones)\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp6cafpagp/tmp6cafpagp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3b659c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3b350b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3b350988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3b34f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6cafpagp                        0x00005610650115c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b0a3b845460 __libc_start_main +
    245

    6    tmp6cafpagp                        0x0000561065011209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n < 1 {\n        return []\n    }\n    var list = [n]\n \
    \   var prev = n\n\n    while let next = next_element(n: prev) {\n        list.append(next)\n\
    \        prev = next\n    }\n\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpu8u2vwom.swift:19:22: error: cannot find 'next_element' in scope\n\
    \    while let next = next_element(n: prev) {\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    precondition(n > 0)\n    var array = [n]\n    var n = n\n  \
    \  while n > 1 {\n        n = n.isMultiple(of: 2) ? n / 2 : n * 3 + 1\n      \
    \  array.append(n)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp882x4s7_/tmp882x4s7_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1efb28bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1efaf82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1efaf82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1efaf817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp882x4s7_                        0x0000555ce480e572 <unavailable> + 5490

    5    libc.so.6                          0x00002b1efb477460 __libc_start_main +
    245

    6    tmp882x4s7_                        0x0000555ce480e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    return make_a_pile(n: n-1)\
    \ + [n + (n % 2 == 0 ? 1 : 2)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp6374o9k7/tmp6374o9k7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b057416dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0573e64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0573e64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0573e637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6374o9k7                        0x0000560be282e472 <unavailable> + 5234

    5    libc.so.6                          0x00002b0574359460 __libc_start_main +
    245

    6    tmp6374o9k7                        0x0000560be282e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var results = [Int]()\n    var currentLevel = n\n    while currentLevel\
    \ > 0 {\n        results.append(currentLevel)\n        currentLevel += currentLevel\
    \ % 2 == 0 ? 2 : 1\n    }\n    return results.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978886
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var x = n\n    var levels = [Int]()\n    while x > 0 {\n   \
    \     levels.append(x)\n        if x % 2 == 0 {\n            x -= 1\n        }\
    \ else {\n            x -= 2\n        }\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwubnm60n/tmpwubnm60n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1891313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189100ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189100a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18910097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwubnm60n                        0x0000561346b134d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b18914ff460 __libc_start_main +
    245

    6    tmpwubnm60n                        0x0000561346b13119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var number = n\n    while n > 0 {\n\
    \        result.append(number)\n        if number % 2 == 0 {\n            number\
    \ += 1\n        } else {\n            number += 2\n        }\n        n -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6g_42ylh.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 0
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [n]\n    for _ in 1..<n {\n        stones.append(stones.last!\
    \ + 2)\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978881
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var arr = [n]\n    for _ in 0..<n - 1 {\n        arr.append(arr.last!\
    \ + (arr.last! & 1 == 0 ? 2 : 1))\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpqt30aqne/tmpqt30aqne.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd5893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd558ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd558a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd55897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt30aqne                        0x000055ebea51c602 <unavailable> + 5634

    5    libc.so.6                          0x00002afdd5a7f460 __libc_start_main +
    245

    6    tmpqt30aqne                        0x000055ebea51c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = n\n    while level > 0 {\n\
    \        pile.append(level)\n        level = next_level(level)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvekwzej9.swift:17:17: error: cannot find 'next_level' in scope\n\
    \        level = next_level(level)\n                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    if n % 2 == 0 {\n\
    \        return [n] + make_a_pile(n: n + 1)\n    } else {\n        return [n]\
    \ + make_a_pile(n: n + 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978879
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else { return [] }\n    return Array(0..<n).reduce([n])\
    \ { (acc, _) in\n        let last = acc.last!\n        let next = last.isMultiple(of:\
    \ 2) ? last + 1 : last + 2\n        return acc + [next]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpl1jjxksg/tmpl1jjxksg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64559f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64556eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64556ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64556e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1jjxksg                        0x000055ec6a6c0782 <unavailable> + 6018

    5    libc.so.6                          0x00002b6455bdf460 __libc_start_main +
    245

    6    tmpl1jjxksg                        0x000055ec6a6c03c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var answer = [Int]()\n    for i in stride(from: n, to: 0, by:\
    \ -1) {\n        answer.append(i)\n    }\n    return answer\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpf2qlf8y1/tmpf2qlf8y1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacd89b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacd86b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacd86b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacd86af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2qlf8y1                        0x0000560bc3302642 <unavailable> + 5698

    5    libc.so.6                          0x00002aacd8ba5460 __libc_start_main +
    245

    6    tmpf2qlf8y1                        0x0000560bc3302289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    // write your solution here\n    var res = [Int]()\n    var\
    \ i = n\n    while i > 0 {\n        res.append(i)\n        if i % 2 == 0 {\n \
    \           i = i / 2\n        } else {\n            i = (i - 1) / 2\n       \
    \ }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp5our5r1q/tmp5our5r1q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b505f7f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b505f4e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b505f4e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b505f4e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5our5r1q                        0x000055f0de8394d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b505f9dd460 __libc_start_main +
    245

    6    tmp5our5r1q                        0x000055f0de839119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    let next: (Int) -> Int = n % 2 == 0 ?\
    \ even_successor : odd_successor\n    var i = next(n)\n    while i > 0 {\n   \
    \     result.append(i)\n        i = next(i)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpam9k83t8.swift:14:43: error: cannot find 'even_successor' in scope\n\
    \    let next: (Int) -> Int = n % 2 == 0 ? even_successor : odd_successor\n  \
    \                                        ^~~~~~~~~~~~~~\n/tmp/tmpam9k83t8.swift:14:60:\
    \ error: cannot find 'odd_successor' in scope\n    let next: (Int) -> Int = n\
    \ % 2 == 0 ? even_successor : odd_successor\n                                \
    \                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var prev_n = n\n    var result = [n]\n    while prev_n > 0 {\n\
    \        let next_level_n = (prev_n % 2 == 0) ? (prev_n + 2) : (prev_n + 1)\n\
    \        result.append(next_level_n)\n        prev_n = next_level_n\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978886
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var n = n\n    var arr = [Int]()\n    while n > 0 {\n      \
    \  arr.append(n)\n        n += n % 2 == 0 ? 2 : 1\n    }\n    return arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978887
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map { (i) -> Int in\n        i % 2 == 0\
    \ ? i + 1 : i\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpqumkzd3h/tmpqumkzd3h.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8d92b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8d8fafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8d8faf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8d8fae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqumkzd3h                        0x000056410efc0602 <unavailable> + 5634

    5    libc.so.6                          0x00002ba8d94a4460 __libc_start_main +
    245

    6    tmpqumkzd3h                        0x000056410efc0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978881
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978887
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0...n-1).map { (n - $0) + $0%2 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpn9znj9gu/tmpn9znj9gu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe3c18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe390fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe390f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe390e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9znj9gu                        0x00005574c4e9f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6fe3e04460 __libc_start_main +
    245

    6    tmpn9znj9gu                        0x00005574c4e9f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978882
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  let next_odd = { (n: Int) -> Int in\n    if n % 2 == 0 {\n   \
    \   return n + 1\n    }\n    return n + 2\n  }\n  let next_even = { (n: Int) ->\
    \ Int in\n    if n % 2 == 0 {\n      return n + 2\n    }\n    return n + 1\n \
    \ }\n  var next_number = next_odd\n  var result = [n]\n  while n != result.last!\
    \ {\n    result.append(next_number(result.last!))\n    next_number = n % 2 ==\
    \ 0 ? next_odd : next_even\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp2t8wdckm/tmp2t8wdckm.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad181dcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad181ac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad181ac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad181ac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2t8wdckm                        0x000055eeaab33512 <unavailable> + 5394

    5    libc.so.6                          0x00002ad181fb9460 __libc_start_main +
    245

    6    tmp2t8wdckm                        0x000055eeaab33159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978882
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var x = n\n    while x > 0 {\n   \
    \     stones.append(x)\n        if x % 2 == 0 {\n            x += 1\n        }\
    \ else {\n            x += 2\n        }\n    }\n    return stones\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978888
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  guard n > 0 else { return [] }\n  var result = [Int]()\n  for\
    \ i in stride(from: n, to: 0, by: -1) {\n    result.append(i)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp1hylv085/tmp1hylv085.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22af24dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22aef44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22aef44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22aef437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hylv085                        0x00005573de4d5642 <unavailable> + 5698

    5    libc.so.6                          0x00002b22af439460 __libc_start_main +
    245

    6    tmp1hylv085                        0x00005573de4d5289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = next(n: current)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzvai7y8m.swift:17:19: error: cannot find 'next' in scope\n    \
    \    current = next(n: current)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    stones.append(n)\n    while n > 1\
    \ {\n        if n % 2 == 0 {\n            n -= 1\n        } else {\n         \
    \   n += 1\n        }\n        stones.append(n)\n    }\n    return stones\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpi6ck0khd.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n -= 1\n            ~ ^\n/tmp/tmpi6ck0khd.swift:19:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n += 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    for n in n...1 {\n        pile.append(n)\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e0774ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e07441561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e07441286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e0744113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e07440bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_g2iefxy                        0x00005652171ceb16 <unavailable> + 6934

    6    tmp_g2iefxy                        0x00005652171ce4eb <unavailable> + 5355

    7    libc.so.6                          0x00002b4e07936460 __libc_start_main +
    245

    8    tmp_g2iefxy                        0x00005652171ce209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978883
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var n = n\n    while n > 0 {\n       \
    \ n = n.isMultiple(of: 2) ? n + 1 : n + 2\n        result.append(n)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978888
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return stride(from: n, to: 0, by: -1).map { n in\n        n\
    \ % 2 == 0 ? n + 1 : n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpsir7wpbu/tmpsir7wpbu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c427fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c3f76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c3f76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c3f757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsir7wpbu                        0x000055c06d8b75c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b36c446b460 __libc_start_main +
    245

    6    tmpsir7wpbu                        0x000055c06d8b7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978883
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprbd9kr2l/tmprbd9kr2l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2232b07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22327feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22327fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22327fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbd9kr2l                        0x00005600c4d80382 <unavailable> + 4994

    5    libc.so.6                          0x00002b2232cf3460 __libc_start_main +
    245

    6    tmprbd9kr2l                        0x00005600c4d7ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978872
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in an array,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map { (i) -> Int in\n        if i % 2 ==\
    \ 0 {\n            return i + 1\n        } else {\n            return i + 2\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpymefkckp/tmpymefkckp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04dc637c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04dc32eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04dc32e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04dc32d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymefkckp                        0x000055848ea3b602 <unavailable> + 5634

    5    libc.so.6                          0x00002b04dc823460 __libc_start_main +
    245

    6    tmpymefkckp                        0x000055848ea3b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978883
