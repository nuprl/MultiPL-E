language: swift
name: HumanEval_130_tri
results:
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Write\
    \ your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjf6o14lr/tmpjf6o14lr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7af938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7af62fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7af62f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7af62e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf6o14lr                        0x00005625f4fc038a <unavailable> + 5002

    5    libc.so.6                          0x00002ba7afb24460 __libc_start_main +
    245

    6    tmpjf6o14lr                        0x00005625f4fbffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a: [Int]\
    \ = [1, 3, 2]\n    if n < 3 {\n        return [Int](a[0..<n + 1])\n    }\n   \
    \ for i in 3...n {\n        a.append(i % 2 == 0 ? a[i - 1] + i / 2 : a[i - 1]\
    \ + a[i - 2] + a[i - 3])\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmp0jjwy_6z/tmp0jjwy_6z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfee6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfee3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfee3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfee3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jjwy_6z                        0x00005632515c571a <unavailable> + 5914

    5    libc.so.6                          0x00002acfee8cd460 __libc_start_main +
    245

    6    tmp0jjwy_6z                        0x00005632515c5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 1 else { return [1, 3] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6916cc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69169ba561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b69169ba286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b69169ba13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b69169b9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b69167b9e83 <unavailable> + 188035

    6    tmp7swfu0ct                        0x000055b6e9be042b <unavailable> + 9259

    7    tmp7swfu0ct                        0x000055b6e9bdf4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b6916eaf460 __libc_start_main +
    245

    9    tmp7swfu0ct                        0x000055b6e9bdf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  if n == 0\
    \ {\n    return [0]\n  }\n  if n == 1 {\n    return [1, 3]\n  }\n  if n == 2 {\n\
    \    return [1, 3, 2]\n  }\n  var result = [1, 3, 2]\n  var x = result[result.count\
    \ - 1]\n  var y = result[result.count - 2]\n  var z = result[result.count - 3]\n\
    \  for _ in 3...n {\n    result.append(x + y + z)\n    z = y\n    y = x\n    x\
    \ = result[result.count - 1]\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpuv7ce4od/tmpuv7ce4od.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2548f44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2548c3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2548c3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2548c3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuv7ce4od                        0x000055684a19161a <unavailable> + 5658

    5    libc.so.6                          0x00002b2549130460 __libc_start_main +
    245

    6    tmpuv7ce4od                        0x000055684a191259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    } else if n == 1 {\n        return [1, 3]\n   \
    \ } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n        var all:[Int]\
    \ = [1, 3, 2]\n        for i in 3...n {\n            if i % 2 == 0 {\n       \
    \         all.append(1 + i / 2)\n            } else {\n                all.append(all[i\
    \ - 1] + all[i - 2] + all[i + 1])\n            }\n        }\n        return all\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adf463c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf460bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adf460bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adf460bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adf460bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adf45ebce83 <unavailable> + 188035

    6    tmpitkgme0c                        0x000055905dd2c4ee <unavailable> + 9454

    7    tmpitkgme0c                        0x000055905dd2b4eb <unavailable> + 5355

    8    libc.so.6                          0x00002adf465b2460 __libc_start_main +
    245

    9    tmpitkgme0c                        0x000055905dd2b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map\
    \ {\n        $0 == 0 ? 1 : tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n: $0 - 3)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7db1tfx_.swift:20:17: error: cannot convert value of type 'Array<Int>'\
    \ to closure result type 'Int'\n        $0 == 0 ? 1 : tri(n: $0 - 1) + tri(n:\
    \ $0 - 2) + tri(n: $0 - 3)\n        ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7db1tfx_.swift:20:19: error: result values in '? :' expression have mismatching\
    \ types 'Int' and '[Int]'\n        $0 == 0 ? 1 : tri(n: $0 - 1) + tri(n: $0 -\
    \ 2) + tri(n: $0 - 3)\n                  ^\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    var result = [Int](repeating: 0, count: n + 1)\n\
    \    var i = 0\n    while i <= n {\n        if i == 0 {\n            result[i]\
    \ = 1\n        } else if i == 1 {\n            result[i] = 3\n        } else if\
    \ i == 2 {\n            result[i] = 2\n        } else if i % 2 == 0 {\n      \
    \      result[i] = i / 2\n        } else {\n            result[i] = result[i -\
    \ 1] + result[i - 2] + result[i - 3]\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpemk4vj84/tmpemk4vj84.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83aec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad83abbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad83abba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad83abb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemk4vj84                        0x000055d3207b453a <unavailable> + 5434

    5    libc.so.6                          0x00002ad83b0af460 __libc_start_main +
    245

    6    tmpemk4vj84                        0x000055d3207b4179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var results = [1, 3, 2]\n    for i in 3...n {\n\
    \        let num = i % 2 == 0 ? results[i - 1] + i / 2 : results[i - 1] + results[i\
    \ - 2] + results[i - 3]\n        results.append(num)\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphzorkw5z/tmphzorkw5z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c31610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c31307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c31307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c313067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzorkw5z                        0x000055e55a6f05ca <unavailable> + 5578

    5    libc.so.6                          0x00002b2c317fc460 __libc_start_main +
    245

    6    tmphzorkw5z                        0x000055e55a6f0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n <= 0 {\n        return result\n    } else if n <= 2 {\n\
    \        result = [1, 3]\n    } else {\n        result = [1, 3, 2]\n    }\n  \
    \  var i = 3\n    while i <= n {\n        let triN = result[i - 1] + result[i\
    \ - 2] + result[i]\n        result.append(triN)\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03c1872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03c1569561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03c1569286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03c156913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03c1568bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03c1368e83 <unavailable> + 188035

    6    tmp5mnwa17m                        0x000055efab1c40fa <unavailable> + 8442

    7    tmp5mnwa17m                        0x000055efab1c33bb <unavailable> + 5051

    8    libc.so.6                          0x00002b03c1a5e460 __libc_start_main +
    245

    9    tmp5mnwa17m                        0x000055efab1c30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    if n == 0 {\n        return [1]\n    }\n  \
    \  return [1, 3, 2] + (3...n).map { index in\n        var n = [1, 3, 2]\n    \
    \    if index % 2 == 0 {\n            return 1 + index / 2\n        }\n      \
    \  let indexToReturn = index\n        for i in 3...indexToReturn {\n         \
    \   n.append(n[i - 1] + n[i - 2] + n[i - 3])\n        }\n        return n[indexToReturn]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpuo12zdt8/tmpuo12zdt8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6d4451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6d4148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6d4148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6d41477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuo12zdt8                        0x000055564705c75a <unavailable> + 5978

    5    libc.so.6                          0x00002ae6d463d460 __libc_start_main +
    245

    6    tmpuo12zdt8                        0x000055564705c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri\
    \ = [1, 3, 2]\n    while tri.count < n + 1 {\n        tri.append(tri[tri.count\
    \ - 1] + tri[tri.count - 2] + tri[tri.count - 3])\n    }\n    return tri\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphi8g1mtm/tmphi8g1mtm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888cc91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888c988b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888c988988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888c9877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphi8g1mtm                        0x0000561d9567649a <unavailable> + 5274

    5    libc.so.6                          0x00002b888ce7d460 __libc_start_main +
    245

    6    tmphi8g1mtm                        0x0000561d956760d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [Int](repeating: 0, count: n + 1)\n\
    \    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    if n > 2 {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result[i]\
    \ = 1 + i / 2\n            } else {\n                result[i] = result[i - 1]\
    \ + result[i - 2] + result[i + 1]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002accfed1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accfea12561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accfea12286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accfea1213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accfea11bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002accfe811e83 <unavailable> + 188035

    6    tmpaabl2uxv                        0x0000557245f5556b <unavailable> + 9579

    7    tmpaabl2uxv                        0x0000557245f5454b <unavailable> + 5451

    8    libc.so.6                          0x00002accfef07460 __libc_start_main +
    245

    9    tmpaabl2uxv                        0x0000557245f54269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >\
    \ 0 else { return [] }\n  guard n > 1 else { return [1, 3] }\n  guard n > 2 else\
    \ { return [1, 3, 2] }\n  var result = [1, 3, 2]\n  var i = 3\n  while i <= n\
    \ {\n    var next = 0\n    if i % 2 == 0 {\n      next = 1 + i / 2\n    } else\
    \ {\n      next = result[i - 1] + result[i - 2] + result[i + 1]\n    }\n    result.append(next)\n\
    \    i += 1\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b472ed50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b472ea47561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b472ea47286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b472ea4713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b472ea46bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b472e846e83 <unavailable> + 188035

    6    tmp7dcasv7w                        0x0000560104dce250 <unavailable> + 8784

    7    tmp7dcasv7w                        0x0000560104dcd3fb <unavailable> + 5115

    8    libc.so.6                          0x00002b472ef3c460 __libc_start_main +
    245

    9    tmp7dcasv7w                        0x0000560104dcd119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n   \
    \     return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else\
    \ {\n        for _ in 3...n {\n            let b = a[1] + a[2] + a[0]\n      \
    \      a.removeFirst()\n            a.append(b)\n        }\n        return a\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpx8r4d7ie/tmpx8r4d7ie.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af31e898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af31e58fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af31e58f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af31e58e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8r4d7ie                        0x0000560d8d60c66a <unavailable> + 5738

    5    libc.so.6                          0x00002af31ea84460 __libc_start_main +
    245

    6    tmpx8r4d7ie                        0x0000560d8d60c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    guard n > 2 else { return\
    \ result }\n    for _ in 3...n {\n        result.append(result[result.count -\
    \ 3] + result[result.count - 2] + result[result.count - 1])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9qo1w9_c/tmp9qo1w9_c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b245d0c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b245cdc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b245cdc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b245cdbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qo1w9_c                        0x00005640b30e861a <unavailable> + 5658

    5    libc.so.6                          0x00002b245d2b5460 __libc_start_main +
    245

    6    tmp9qo1w9_c                        0x00005640b30e8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    if n == 0 { return [1] }\n    if n == 1 { return\
    \ [1, 3] }\n    if n == 2 { return [1, 3, 2] }\n    var result = [1, 3, 2]\n \
    \   while result.count <= n {\n        let a = result[result.count - 3]\n    \
    \    let b = result[result.count - 2]\n        let c = result[result.count - 1]\n\
    \        result.append(a + b + c)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjw72gmi6/tmpjw72gmi6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42cd7c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42cd4bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42cd4bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42cd4bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjw72gmi6                        0x0000564ea2d4d49a <unavailable> + 5274

    5    libc.so.6                          0x00002b42cd9b2460 __libc_start_main +
    245

    6    tmpjw72gmi6                        0x0000564ea2d4d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var current\
    \ = 1\n    var first = 1\n    var second = 3\n    var third = 2\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return result\n    }\n    result.append(current)\n\
    \    if n == 1 {\n        return result\n    }\n    result.append(second)\n  \
    \  if n == 2 {\n        return result\n    }\n    for _ in 2..<n {\n        current\
    \ = first + second + third\n        first = second\n        second = third\n \
    \       third = current\n        result.append(current)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_hhmv_m9/tmp_hhmv_m9.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe82c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe8295db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe8295d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe8295c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hhmv_m9                        0x000055ed356845ca <unavailable> + 5578

    5    libc.so.6                          0x00002abe82e52460 __libc_start_main +
    245

    6    tmp_hhmv_m9                        0x000055ed35684209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    if n <= 3 { return Array(result[0...n])\
    \ }\n    result.reserveCapacity(n + 1)\n    for i in 4...n {\n        let next:\
    \ Int\n        if i % 2 == 0 {\n            next = 1 + i / 2\n        } else {\n\
    \            next = result[i - 1] + result[i - 2] + result[i - 3]\n        }\n\
    \        result.append(next)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adcde777c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcde46e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adcde46e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adcde46e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adcde46dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002adcde457196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002adcde6a8457 <unavailable> + 3769431

    7    libswiftCore.so                    0x00002adcde4a3911 <unavailable> + 1653009

    8    libswiftCore.so                    0x00002adcde56a7c0 MutableCollection.subscript.getter
    + 212

    9    tmp6opxsdco                        0x00005577c32d9453 <unavailable> + 9299

    10   tmp6opxsdco                        0x00005577c32d873b <unavailable> + 5947

    11   libc.so.6                          0x00002adcde963460 __libc_start_main +
    245

    12   tmp6opxsdco                        0x00005577c32d8459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n > 0 {\n        result.append(1)\n    }\n    if n > 1 {\n\
    \        result.append(3)\n    }\n    if n > 2 {\n        result.append(2)\n \
    \   }\n    if n > 3 {\n        for i in 3...n {\n            if i % 2 == 0 {\n\
    \                result.append(1 + i / 2)\n            } else {\n            \
    \    result.append(result[i - 1] + result[i - 2] + result[i - 3])\n          \
    \  }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpuvcz2u9f/tmpuvcz2u9f.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9d52abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9d4fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9d4fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9d4fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvcz2u9f                        0x0000563d7c63161a <unavailable> + 5658

    5    libc.so.6                          0x00002ba9d5497460 __libc_start_main +
    245

    6    tmpuvcz2u9f                        0x0000563d7c631259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    var result = [1, 3, 2]\n    var last = 2\n    var count = 3\n    while\
    \ count <= n {\n        let i = result[last] + result[last - 1] + result[last\
    \ - 2]\n        result.append(i)\n        last += 1\n        count += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3lpfq643/tmp3lpfq643.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba584fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba5546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba5546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba55457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3lpfq643                        0x0000563df292a43a <unavailable> + 5178

    5    libc.so.6                          0x00002b4ba5a3b460 __libc_start_main +
    245

    6    tmp3lpfq643                        0x0000563df292a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let n =\
    \ n + 1\n    var array = [Int]()\n    guard n > 2 else {\n        array = [1,\
    \ 3]\n        return array\n    }\n    array = [1, 3, 2]\n    for i in 3..<n {\n\
    \        let tri = array[i - 1] + array[i - 2] + array[i - 3]\n        array.append(tri)\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzz7b2os2/tmpzz7b2os2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf1569ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf15395b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf15395988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf153947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz7b2os2                        0x0000556a9933c61a <unavailable> + 5658

    5    libc.so.6                          0x00002aaf1588a460 __libc_start_main +
    245

    6    tmpzz7b2os2                        0x0000556a9933c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  // your code\
    \ here\n  if n == 0 {\n    return [1]\n  } else if n == 1 {\n    return [1, 3]\n\
    \  } else if n == 2 {\n    return [1, 3, 2]\n  } else {\n    var sequence: [Int]\
    \ = [1, 3, 2]\n    for i in 3...n {\n      sequence.append(sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i - 3])\n    }\n    return sequence\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmd_q3ctv/tmpmd_q3ctv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3113bbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31138b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31138b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31138b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd_q3ctv                        0x000055bcf98285ca <unavailable> + 5578

    5    libc.so.6                          0x00002b3113da6460 __libc_start_main +
    245

    6    tmpmd_q3ctv                        0x000055bcf9828209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar result\
    \ = [1, 3, 2]\n\tguard n > 2 else {\n\t\treturn result\n\t}\n\t\n\tvar index =\
    \ 3\n\tvar last = 2\n\tvar lastLast = 1\n\tvar lastLastLast = 3\n\twhile index\
    \ <= n {\n\t\tresult.append(lastLastLast + lastLast + last)\n\t\t\n\t\tlastLastLast\
    \ = lastLast\n\t\tlastLast = last\n\t\tlast = result[index]\n\t\tindex += 1\n\t\
    }\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpptltlwen/tmpptltlwen.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad824833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad82452ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad82452a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8245297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptltlwen                        0x000055f8e686a43a <unavailable> + 5178

    5    libc.so.6                          0x00002ad824a1f460 __libc_start_main +
    245

    6    tmpptltlwen                        0x000055f8e686a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >\
    \ 0 else { return [] }\n  var result = [1, 3, 2]\n  if n == 1 { return [1] }\n\
    \  if n == 2 { return [1, 3] }\n  if n == 3 { return result }\n  for _ in 4...n\
    \ {\n    result.append(result[result.count - 3] + result[result.count - 2] + result[result.count\
    \ - 1])\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2ocs3_xw/tmp2ocs3_xw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba183596c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba18328db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba18328d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba18328c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ocs3_xw                        0x00005566a843061a <unavailable> + 5658

    5    libc.so.6                          0x00002ba183782460 __libc_start_main +
    245

    6    tmp2ocs3_xw                        0x00005566a8430259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var solution: [Int]\
    \ = [1, 3, 2]\n    var i = 4\n    while i <= n + 1 {\n        if i % 2 == 0 {\n\
    \            solution.append(1 + i / 2)\n        } else {\n            solution.append(solution[i\
    \ - 2] + solution[i - 3] + solution[i - 4])\n        }\n        i += 1\n    }\n\
    \    return solution\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbjup0ppf/tmpbjup0ppf.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd09835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd0952cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd0952c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd0952b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjup0ppf                        0x0000559aee1c34da <unavailable> + 5338

    5    libc.so.6                          0x00002afd09a21460 __libc_start_main +
    245

    6    tmpbjup0ppf                        0x0000559aee1c3119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n\
    \        let sum = result[i - 1] + result[i - 2] + result[i - 3]\n        result.append(sum)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqm5v573w/tmpqm5v573w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b883c7a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b883c49eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b883c49e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b883c49d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm5v573w                        0x000055e8df6cc5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b883c993460 __libc_start_main +
    245

    6    tmpqm5v573w                        0x000055e8df6cc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 1\
    \ {\n        return []\n    }\n    var tribo: [Int] = [1, 3, 2]\n    if n == 1\
    \ {\n        return [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n\
    \    if n == 3 {\n        return tribo\n    }\n    for i in 3...n {\n        if\
    \ i % 2 == 0 {\n            tribo.append(1 + i / 2)\n        } else {\n      \
    \      tribo.append(tribo[i - 1] + tribo[i - 2] + tribo[i + 1])\n        }\n \
    \   }\n    return tribo\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpa9wvrpzf/tmpa9wvrpzf.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd78b7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78876b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78876988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd788757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9wvrpzf                        0x0000561289e2f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002afd78d6b460 __libc_start_main +
    245

    6    tmpa9wvrpzf                        0x0000561289e2f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var res =\
    \ [1, 3, 2]\n  if n <= 2 {\n    return Array(res[0...n])\n  }\n  for i in 3...n\
    \ {\n    let el = res[i - 1] + res[i - 2] + res[i - 3]\n    res.append(el)\n \
    \ }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0kic5iyi/tmp0kic5iyi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48bf0b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48beda9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48beda9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48beda87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kic5iyi                        0x0000556f2091b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b48bf29e460 __libc_start_main +
    245

    6    tmp0kic5iyi                        0x0000556f2091b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result\
    \ = (1...n).map {\n        $0 % 2 == 0 ? 1 + $0 / 2 :\n                      $0\
    \ / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4g7it61m/tmp4g7it61m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8503ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8500f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8500f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8500f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4g7it61m                        0x00005588f61f755a <unavailable> + 5466

    5    libc.so.6                          0x00002ac8505eb460 __libc_start_main +
    245

    6    tmp4g7it61m                        0x00005588f61f7199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var sequence\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            sequence.append(1)\n\
    \        } else if i == 1 {\n            sequence.append(3)\n        } else if\
    \ i == 2 {\n            sequence.append(2)\n        } else if i % 2 == 0 {\n \
    \           sequence.append(1 + i / 2)\n        } else {\n            sequence.append(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i - 3])\n        }\n    }\n    return sequence\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp43gko0i6/tmp43gko0i6.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc58bcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc588c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc588c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc588c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43gko0i6                        0x0000555ee45de61a <unavailable> + 5658

    5    libc.so.6                          0x00002abc58db6460 __libc_start_main +
    245

    6    tmp43gko0i6                        0x0000555ee45de259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [1, 3, 2]\n    for i in stride(from: 4, through: n, by: 1) {\n        if i\
    \ % 2 == 0 {\n            arr.append(1 + i / 2)\n        } else {\n          \
    \  arr.append(arr[i - 2] + arr[i - 1] + arr[i + 1])\n        }\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmyyubdgn/tmpmyyubdgn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76836a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7683399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7683399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76833987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyyubdgn                        0x000056073d8106fa <unavailable> + 5882

    5    libc.so.6                          0x00002b768388e460 __libc_start_main +
    245

    6    tmpmyyubdgn                        0x000056073d810339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tguard n >\
    \ 0 else { return [] }\n\tvar result = [1, 3, 2]\n\t\n\tfor i in 3...n {\n\t\t\
    result.append(i.isMultiple(of: 2) ? 1 + i / 2 : result[i - 2] + result[i - 1]\
    \ + result[i + 1])\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b87ec390c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87ec087561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b87ec087286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b87ec08713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b87ec086bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b87ebe86e83 <unavailable> + 188035

    6    tmp22e_uhvw                        0x0000563a349f74be <unavailable> + 9406

    7    tmp22e_uhvw                        0x0000563a349f65eb <unavailable> + 5611

    8    libc.so.6                          0x00002b87ec57c460 __libc_start_main +
    245

    9    tmp22e_uhvw                        0x0000563a349f6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       let mod = i % 2\n        if mod == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b60acf73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60acc6a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b60acc6a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b60acc6a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b60acc69bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b60aca69e83 <unavailable> + 188035

    6    tmphwtpqliu                        0x000056343965543c <unavailable> + 9276

    7    tmphwtpqliu                        0x00005634396544eb <unavailable> + 5355

    8    libc.so.6                          0x00002b60ad15f460 __libc_start_main +
    245

    9    tmphwtpqliu                        0x0000563439654209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [1,\
    \ 3, 2, 8]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt5gwo6or/tmpt5gwo6or.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48ee24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48edf41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48edf41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48edf407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5gwo6or                        0x00005608b46c247f <unavailable> + 5247

    5    libc.so.6                          0x00002b48ee436460 __libc_start_main +
    245

    6    tmpt5gwo6or                        0x00005608b46c1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    guard n > 1 else { return [1, 3] }\n    guard n\
    \ > 2 else { return [1, 3, 2] }\n    var triNums = [1, 3, 2]\n    for i in 3..<n\
    \ {\n        triNums.append(i % 2 == 0 ? i / 2 + 1 : triNums[i - 1] + triNums[i\
    \ - 2] + triNums[i - 3])\n    }\n    return triNums\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqdiz2a5c/tmpqdiz2a5c.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d25763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d2545ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d2545a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d254597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdiz2a5c                        0x00005572df56c5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5d2594f460 __libc_start_main +
    245

    6    tmpqdiz2a5c                        0x00005572df56c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    result.append(1)\n    if n > 0 {\n        result.append(3)\n\
    \    }\n    if n > 1 {\n        result.append(2)\n    }\n    if n > 2 {\n    \
    \    for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i + 1])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a08747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a0843e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a0843e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a0843e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a0843dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5a0823de83 <unavailable> + 188035

    6    tmpg8h4qe_n                        0x000055b35ae2247d <unavailable> + 9341

    7    tmpg8h4qe_n                        0x000055b35ae214eb <unavailable> + 5355

    8    libc.so.6                          0x00002b5a08933460 __libc_start_main +
    245

    9    tmpg8h4qe_n                        0x000055b35ae21209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >\
    \ 0 else { return [] }\n  var triNums = [1, 3, 2]\n  for i in 3...n {\n    if\
    \ i % 2 == 0 {\n      triNums.append(1 + i / 2)\n    } else {\n      triNums.append(triNums[i\
    \ - 1] + triNums[i - 2] + triNums[i + 1])\n    }\n  }\n  return triNums\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7287aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72877a2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72877a2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72877a213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72877a1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b72875a1e83 <unavailable> + 188035

    6    tmp4fn4lrix                        0x0000555bd0a39428 <unavailable> + 9256

    7    tmp4fn4lrix                        0x0000555bd0a384eb <unavailable> + 5355

    8    libc.so.6                          0x00002b7287c97460 __libc_start_main +
    245

    9    tmp4fn4lrix                        0x0000555bd0a38209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map\
    \ {\n        switch $0 {\n        case 0: return 1\n        case 1: return 3\n\
    \        case 2: return 2\n        default:\n            return tri(n: $0 - 1)\
    \ + tri(n: $0 - 2) + tri(n: $0 - 3)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcjoeykw_.swift:25:52: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n            return tri(n: $0 - 1) +\
    \ tri(n: $0 - 2) + tri(n: $0 - 3)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var count\
    \ = 0\n    var arr = [Int]()\n    while count <= n {\n        if count == 0 {\n\
    \            arr.append(1)\n        } else if count == 1 {\n            arr.append(3)\n\
    \        } else if count == 2 {\n            arr.append(2)\n        } else {\n\
    \            arr.append(arr[count - 1] + arr[count - 2] + arr[count - 3])\n  \
    \      }\n        count += 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp68ap84h4/tmp68ap84h4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acccb6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acccb3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acccb3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acccb3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68ap84h4                        0x000055a8fa8e149a <unavailable> + 5274

    5    libc.so.6                          0x00002acccb8d8460 __libc_start_main +
    245

    6    tmp68ap84h4                        0x000055a8fa8e10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    return (1...n).map {\n        if $0 % 2 == 0 { return\
    \ $0 / 2 }\n        return (1...$0).reduce(0, { $0 + tri(n: $1)[$1] })\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979513
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var result\
    \ = [Int]()\n  for i in 0...n {\n    var num = 0\n    if i == 0 {\n      num =\
    \ 1\n    } else if i == 1 {\n      num = 3\n    } else if i == 2 {\n      num\
    \ = 2\n    } else {\n      num = tri(n: i - 3)[i - 3] + tri(n: i - 2)[i - 2] +\
    \ tri(n: i - 1)[i - 1]\n    }\n    result.append(num)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0jgi6ybd/tmp0jgi6ybd.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bc4ef1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bc4be8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bc4be8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bc4be77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jgi6ybd                        0x000055ecdd03c61a <unavailable> + 5658

    5    libc.so.6                          0x00002b3bc50dd460 __libc_start_main +
    245

    6    tmp0jgi6ybd                        0x000055ecdd03c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var output\
    \ = [1, 3, 2]\n  guard n > 2 else { return Array(output[0..<n + 1]) }\n  while\
    \ output.count < n + 1 {\n    if output.count % 2 == 0 {\n      output.append(1\
    \ + output.count / 2)\n    } else {\n      output.append(output[output.count -\
    \ 1] + output[output.count - 2] + output[output.count - 3])\n    }\n  }\n  return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmyoyzl5_/tmpmyoyzl5_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d5bbc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5b8bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5b8bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5b8bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyoyzl5_                        0x000055c6fc69468a <unavailable> + 5770

    5    libc.so.6                          0x00002b3d5bdb2460 __libc_start_main +
    245

    6    tmpmyoyzl5_                        0x000055c6fc6942c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar result\
    \ = [1, 3, 2]\n\tfor x in 1...n {\n\t\tresult.append(x % 2 == 0 ? 1 + x / 2 :\
    \ result[x - 1] + result[x - 2] + result[x + 1])\n\t}\n\treturn result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8c0cbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8c09b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad8c09b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad8c09b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad8c09b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad8c07b1e83 <unavailable> + 188035

    6    tmparo0vohb                        0x000055ac94e6b3bd <unavailable> + 9149

    7    tmparo0vohb                        0x000055ac94e6a4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad8c0ea7460 __libc_start_main +
    245

    9    tmparo0vohb                        0x000055ac94e6a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tribonacci:\
    \ [Int] = [1, 3, 2]\n    guard n >= 3 else { return Array(tribonacci[0..<n + 1])\
    \ }\n    for i in 3...n {\n        if i % 2 == 0 {\n            tribonacci.append(1\
    \ + i / 2)\n        } else {\n            tribonacci.append(tribonacci[i - 3]\
    \ + tribonacci[i - 2] + tribonacci[i - 1])\n        }\n    }\n    return tribonacci\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6vlm72yq/tmp6vlm72yq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b441d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b43ec7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b43ec7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b43ec67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vlm72yq                        0x000056461db9f71a <unavailable> + 5914

    5    libc.so.6                          0x00002b3b443bc460 __libc_start_main +
    245

    6    tmp6vlm72yq                        0x000056461db9f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triArray\
    \ = [Int]()\n    var n = n + 1\n    var value = 0\n    while n > 0 {\n       \
    \ if n == 1 {\n            value = 3\n        } else if n % 2 == 0 {\n       \
    \     value = 1 + n / 2\n        } else {\n            value = triArray[n - 2]\
    \ + triArray[n - 3] + triArray[n - 1]\n        }\n        triArray.append(value)\n\
    \        n -= 1\n    }\n    return triArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e891c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e88eb8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e88eb8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e88eb813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e88eb7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e88cb7e83 <unavailable> + 188035

    6    tmpc2o99o7l                        0x0000564ceb6db1e0 <unavailable> + 8672

    7    tmpc2o99o7l                        0x0000564ceb6da44b <unavailable> + 5195

    8    libc.so.6                          0x00002b6e893ad460 __libc_start_main +
    245

    9    tmpc2o99o7l                        0x0000564ceb6da169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var tri =\
    \ [Int]()\n  for i in 0...n {\n    switch i {\n    case 0:\n      tri.append(1)\n\
    \    case 1:\n      tri.append(3)\n    case 2:\n      tri.append(2)\n    default:\n\
    \      tri.append(tri[i - 1] + tri[i - 2] + tri[i - 3])\n    }\n  }\n  return\
    \ tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6x7y4qnu/tmp6x7y4qnu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad298f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad295efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad295ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad295ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6x7y4qnu                        0x0000561d2167c61a <unavailable> + 5658

    5    libc.so.6                          0x00002aad29ae4460 __libc_start_main +
    245

    6    tmp6x7y4qnu                        0x0000561d2167c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var cache\
    \ = [Int: Int]()\n    cache[1] = 3\n    cache[2] = 2\n    cache[3] = 8\n    var\
    \ ret = [Int]()\n    for i in 1...n {\n        if let cached = cache[i] {\n  \
    \          ret.append(cached)\n        } else {\n            if i % 2 == 0 {\n\
    \                let new = 1 + i / 2\n                cache[i] = new\n       \
    \         ret.append(new)\n            } else {\n                let last = tri(n:\
    \ i - 1)[i - 1]\n                let beforeLast = tri(n: i - 2)[i - 2]\n     \
    \           let next = tri(n: i + 1)[i + 1]\n                let new = last +\
    \ beforeLast + next\n                cache[i] = new\n                ret.append(new)\n\
    \            }\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzkgveq5y/tmpzkgveq5y.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5401d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad53fec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad53fec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad53fec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkgveq5y                        0x0000559b5a62074a <unavailable> + 5962

    5    libc.so.6                          0x00002ad5403be460 __libc_start_main +
    245

    6    tmpzkgveq5y                        0x0000559b5a620389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var num\
    \ = 0\n    if n == 1 {\n        num = 1\n    } else if n % 2 == 0 {\n        num\
    \ = 1 + n / 2\n    } else {\n        var array = tri(n: n - 1)\n        num =\
    \ array[n - 1] + array[n - 2] + array[n + 1]\n    }\n    return [num]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9978e2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9978b22561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9978b22286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9978b2213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9978b21bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9978921e83 <unavailable> + 188035

    6    tmpi9y1bnkn                        0x0000558dbb45911c <unavailable> + 8476

    7    tmpi9y1bnkn                        0x0000558dbb45839b <unavailable> + 5019

    8    libc.so.6                          0x00002b9979017460 __libc_start_main +
    245

    9    tmpi9y1bnkn                        0x0000558dbb4580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    if n == 1 { return [1]\
    \ }\n    if n == 2 { return [1, 3] }\n    if n == 3 { return result }\n    var\
    \ i = 4\n    while i <= n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 2] + result[i\
    \ - 3] + result[i - 1])\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpu7evmgng/tmpu7evmgng.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae41cfd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae41ccc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae41ccc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae41ccc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7evmgng                        0x000055f9fca0f4da <unavailable> + 5338

    5    libc.so.6                          0x00002ae41d1be460 __libc_start_main +
    245

    6    tmpu7evmgng                        0x000055f9fca0f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var seq\
    \ = [1, 3, 2]\n    guard n > 2 else { return seq }\n    for _ in 3...n {\n   \
    \     let n = seq.count\n        seq.append(n % 2 == 0 ? 1 + n / 2 : seq[n - 1]\
    \ + seq[n - 2] + seq[n - 3])\n    }\n    return seq\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpialu8_n0/tmpialu8_n0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d17ae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d177dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d177db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d177da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpialu8_n0                        0x000055bdddc9561a <unavailable> + 5658

    5    libc.so.6                          0x00002b0d17cd0460 __libc_start_main +
    245

    6    tmpialu8_n0                        0x000055bdddc95259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var arr = [1, 3, 2]\n\
    \    while arr.count <= n {\n        let nextVal = arr[arr.count - 1] + arr[arr.count\
    \ - 2] + arr[arr.count - 3]\n        arr.append(nextVal)\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq8hw48cu/tmpq8hw48cu.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea68719c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea68410b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea68410988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6840f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8hw48cu                        0x00005561225b849a <unavailable> + 5274

    5    libc.so.6                          0x00002aea68905460 __libc_start_main +
    245

    6    tmpq8hw48cu                        0x00005561225b80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >\
    \ 0 else { return [] }\n  guard n > 1 else { return [1, 3] }\n  guard n > 2 else\
    \ { return [1, 3, 2] }\n  var result = [1, 3, 2]\n  for i in 3...n {\n    result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp47wo03kz/tmp47wo03kz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b0a76bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b0a462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b0a462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b0a4617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47wo03kz                        0x000055ddd977f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5b0a957460 __libc_start_main +
    245

    6    tmp47wo03kz                        0x000055ddd977f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [1, 3, 2]\n    for i in 0..<n {\n        let last = array.last!\n        let\
    \ last_1 = array[array.count - 2]\n        let last_2 = array[array.count - 3]\n\
    \        if array.count % 2 == 0 {\n            array.append(1 + last / 2)\n \
    \       } else {\n            array.append(last_2 + last_1 + last)\n        }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp1enyyr_4/tmp1enyyr_4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b309f587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b309f27eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b309f27e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b309f27d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1enyyr_4                        0x0000555e3de156ba <unavailable> + 5818

    5    libc.so.6                          0x00002b309f773460 __libc_start_main +
    245

    6    tmp1enyyr_4                        0x0000555e3de152f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var result\
    \ = [1, 3, 2]\n  if n <= 2 {\n    return result[0...n]\n  }\n  while result.count\
    \ <= n {\n    let next = result[result.count - 3] + result[result.count - 2] +\
    \ result[result.count - 1]\n    result.append(next)\n  }\n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpekx8_m6p.swift:21:18: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n    return result[0...n]\n    \
    \             ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public subscript<R>(r:\
    \ R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get\
    \ }\n                      ^\nSwift.MutableCollection:2:23: note: 'subscript(_:)'\
    \ produces '@lvalue ArraySlice<Int>', not the expected contextual result type\
    \ '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where\
    \ R : RangeExpression, Self.Index == R.Bound { get set }\n                   \
    \   ^\n"
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    var sum = 6\n    if\
    \ n == 1 { return [1] }\n    if n == 2 { return [1, 3] }\n    if n == 3 { return\
    \ [1, 3, 2] }\n    for _ in 4...n {\n        result.append(sum)\n        sum +=\
    \ result[result.count - 2]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmph8cegghh/tmph8cegghh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b403508ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4034d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4034d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4034d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8cegghh                        0x000055aaee2cc61a <unavailable> + 5658

    5    libc.so.6                          0x00002b403527a460 __libc_start_main +
    245

    6    tmph8cegghh                        0x000055aaee2cc259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var tri = [1, 3, 2]\n\
    \    for _ in 0...n - 3 {\n        tri.append(tri[tri.count - 3] + tri[tri.count\
    \ - 2] + tri[tri.count - 1])\n    }\n    return tri\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyyuqi51v/tmpyyuqi51v.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8535ed6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8535bcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8535bcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8535bcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyyuqi51v                        0x0000557f9779161a <unavailable> + 5658

    5    libc.so.6                          0x00002b85360c2460 __libc_start_main +
    245

    6    tmpyyuqi51v                        0x0000557f97791259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var n =\
    \ n\n    var result = [1, 3, 2]\n    while n > 0 {\n        n -= 1\n        let\
    \ value = result[result.count - 3] + result[result.count - 2] + result[result.count\
    \ - 1]\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzg7uoq9i/tmpzg7uoq9i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d45dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d45abdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d45abd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d45abc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzg7uoq9i                        0x00005639ddfd549a <unavailable> + 5274

    5    libc.so.6                          0x00002b7d45fb2460 __libc_start_main +
    245

    6    tmpzg7uoq9i                        0x00005639ddfd50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    var a = 1\n    var b = 3\n    var c = 2\n \
    \   if n == 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1,\
    \ 3]\n    }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result\
    \ = [a, b, c]\n    for _ in 3...n {\n        a = b\n        b = c\n        c =\
    \ b + a + result[0]\n        result.append(c)\n        result.removeFirst()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9nt9yefi/tmp9nt9yefi.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b187d283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b187cf7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b187cf7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b187cf797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9nt9yefi                        0x000055f60c32666a <unavailable> + 5738

    5    libc.so.6                          0x00002b187d46f460 __libc_start_main +
    245

    6    tmp9nt9yefi                        0x000055f60c3262a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array:\
    \ [Int] = []\n    guard n > 0 else { return array }\n    array.append(1)\n   \
    \ guard n > 1 else { return array }\n    array.append(3)\n    guard n > 2 else\
    \ { return array }\n    array.append(2)\n    guard n > 3 else { return array }\n\
    \    for i in 4...n {\n        if i % 2 == 0 {\n            array.append(1 + i\
    \ / 2)\n        } else {\n            array.append(array[i - 1] + array[i - 2]\
    \ + array[i + 1])\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpl5b8fz1y/tmpl5b8fz1y.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1529fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1526f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1526f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1526f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5b8fz1y                        0x000055aa5fe615ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba152be8460 __libc_start_main +
    245

    6    tmpl5b8fz1y                        0x000055aa5fe61209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var arr = [1, 3, 2]\n\
    \    for i in 3...n {\n        arr.append(i.isMultiple(of: 2) ? 1 + i / 2 : arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3])\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvqbz_115/tmpvqbz_115.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a8916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a860db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a860d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a860c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvqbz_115                        0x000055edaf4906ca <unavailable> + 5834

    5    libc.so.6                          0x00002b51a8b02460 __libc_start_main +
    245

    6    tmpvqbz_115                        0x000055edaf490309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tribonacci\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(tribonacci[0...n])\n    }\n\
    \    for _ in 3...n {\n        let next = tribonacci[tribonacci.count - 1] + tribonacci[tribonacci.count\
    \ - 2] + tribonacci[tribonacci.count - 3]\n        tribonacci.append(next)\n \
    \   }\n    return tribonacci\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2x0rqkpx/tmp2x0rqkpx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f5d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f5a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f5a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f5a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2x0rqkpx                        0x000056402ab9881a <unavailable> + 6170

    5    libc.so.6                          0x00002b43f5f5f460 __libc_start_main +
    245

    6    tmp2x0rqkpx                        0x000056402ab98459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1\
    \ {\n        return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n\
    \    } else {\n        for i in 3...n {\n            if i % 2 == 0 {\n       \
    \         result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpsv86s1q4/tmpsv86s1q4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ceb76cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ceb463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ceb463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ceb4627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsv86s1q4                        0x000055624058a5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b1ceb958460 __libc_start_main +
    245

    6    tmpsv86s1q4                        0x000055624058a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var arr = [1, 3, 2]\n    for i in 3...n {\n    \
    \    if i % 2 == 0 {\n            arr.append(1 + i / 2)\n        } else {\n  \
    \          arr.append(arr[i - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n\
    \    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5710449c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5710140561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5710140286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b571014013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b571013fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b570ff3fe83 <unavailable> + 188035

    6    tmpmfi334qr                        0x00005566bc1e8428 <unavailable> + 9256

    7    tmpmfi334qr                        0x00005566bc1e74eb <unavailable> + 5355

    8    libc.so.6                          0x00002b5710635460 __libc_start_main +
    245

    9    tmpmfi334qr                        0x00005566bc1e7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    guard n > 1 else { return [1, 3] }\n    guard n\
    \ > 2 else { return [1, 3, 2] }\n    var seq = [1, 3, 2]\n    for i in 3...n {\n\
    \        if i % 2 == 0 {\n            seq.append(1 + i / 2)\n        } else {\n\
    \            seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n        }\n   \
    \ }\n    return seq\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ade60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54adb57561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54adb57286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54adb5713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54adb56bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54ad956e83 <unavailable> + 188035

    6    tmp1z686ew3                        0x000055f181ebf452 <unavailable> + 9298

    7    tmp1z686ew3                        0x000055f181ebe4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b54ae04c460 __libc_start_main +
    245

    9    tmp1z686ew3                        0x000055f181ebe209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return (0...n).map\
    \ { triI(n: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0mc3lylp.swift:19:24: error: cannot find 'triI' in scope\n  return\
    \ (0...n).map { triI(n: $0) }\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // This\
    \ is your job. Fill in the body.\n    return [1, 3, 2, 8]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpswvohr2i/tmpswvohr2i.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50204ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50201c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50201c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50201c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpswvohr2i                        0x0000559d4e94d47f <unavailable> + 5247

    5    libc.so.6                          0x00002b50206b8460 __libc_start_main +
    245

    6    tmpswvohr2i                        0x0000559d4e94cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [Int]()\n    guard n > 0 else {\n        return array\n    }\n    array.append(1)\n\
    \    if n == 1 {\n        return array\n    }\n    array.append(3)\n    if n ==\
    \ 2 {\n        return array\n    }\n    array.append(2)\n    for _ in 0..<n -\
    \ 2 {\n        let i = array.count - 1\n        array.append(array[i - 2] + array[i\
    \ - 1] + array[i])\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpgb9jlcr1/tmpgb9jlcr1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a14d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a14a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a14a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a14a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgb9jlcr1                        0x0000562db722667a <unavailable> + 5754

    5    libc.so.6                          0x00002b4a14f49460 __libc_start_main +
    245

    6    tmpgb9jlcr1                        0x0000562db72262b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var temp\
    \ = [1, 3, 2]\n    for num in 3...n {\n        if (num % 2 == 0) {\n         \
    \   temp.append(1 + num / 2)\n        } else {\n            temp.append(temp[num\
    \ - 1] + temp[num - 2] + temp[num + 1])\n        }\n    }\n    return temp\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afa02dcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa02ac2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa02ac2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa02ac213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa02ac1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afa028c1e83 <unavailable> + 188035

    6    tmpbhnuu5ji                        0x00005629ceef8419 <unavailable> + 9241

    7    tmpbhnuu5ji                        0x00005629ceef74eb <unavailable> + 5355

    8    libc.so.6                          0x00002afa02fb7460 __libc_start_main +
    245

    9    tmpbhnuu5ji                        0x00005629ceef7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triResult:\
    \ [Int] = []\n    for i in 0...n {\n        switch i {\n        case 0:\n    \
    \        triResult.append(1)\n        case 1:\n            triResult.append(3)\n\
    \        case 2:\n            triResult.append(2)\n        default:\n        \
    \    if i % 2 == 0 {\n                triResult.append(1 + i / 2)\n          \
    \  } else {\n                triResult.append(triResult[i - 2] + triResult[i -\
    \ 1] + triResult[i + 1])\n            }\n        }\n    }\n    return triResult\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2532139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2531e30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2531e30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2531e3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2531e2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2531c2fe83 <unavailable> + 188035

    6    tmpljw1yd54                        0x000055c21f464481 <unavailable> + 9345

    7    tmpljw1yd54                        0x000055c21f4634eb <unavailable> + 5355

    8    libc.so.6                          0x00002b2532325460 __libc_start_main +
    245

    9    tmpljw1yd54                        0x000055c21f463209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    guard n > 0 else {\n        return result\n    }\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    guard n > 2 else {\n        return\
    \ result\n    }\n    for _ in 3...n {\n        let r = result[result.count - 3]\
    \ + result[result.count - 2] + result[result.count - 1]\n        result.append(r)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzubg7gvr/tmpzubg7gvr.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b465e2b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b465dfacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b465dfac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b465dfab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzubg7gvr                        0x0000557e7021467a <unavailable> + 5754

    5    libc.so.6                          0x00002b465e4a1460 __libc_start_main +
    245

    6    tmpzubg7gvr                        0x0000557e702142b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Implement\
    \ your solution here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: '/tmp/tmpms8gjr6t.swift:20:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var res\
    \ = [1, 3, 2]\n    if n == 2 {\n        return res\n    }\n    var i = 3\n   \
    \ while i <= n {\n        if i % 2 == 0 {\n            res.append(1 + i / 2)\n\
    \        } else {\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        }\n        i += 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9885e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9885b66561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9885b66286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9885b6613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9885b65bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9885965e83 <unavailable> + 188035

    6    tmpqa6wvyzi                        0x0000555b1628225b <unavailable> + 8795

    7    tmpqa6wvyzi                        0x0000555b162813fb <unavailable> + 5115

    8    libc.so.6                          0x00002b988605b460 __libc_start_main +
    245

    9    tmpqa6wvyzi                        0x0000555b16281119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var res =\
    \ [1, 3, 2]\n  if n == 0 {\n    return [1]\n  } else if n == 1 {\n    return [1,\
    \ 3]\n  } else if n == 2 {\n    return res\n  }\n  for _ in 3...n {\n    res.append(res[res.count\
    \ - 1] + res[res.count - 2] + res[res.count - 3])\n  }\n  return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2q3ewx04/tmp2q3ewx04.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b606f3b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b606f0a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b606f0a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b606f0a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2q3ewx04                        0x000055c9f099d61a <unavailable> + 5658

    5    libc.so.6                          0x00002b606f59d460 __libc_start_main +
    245

    6    tmp2q3ewx04                        0x000055c9f099d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(array[0...n])\n    }\n   \
    \ array.reserveCapacity(n + 1)\n    while array.count <= n {\n        let last\
    \ = array.last!\n        let secondToLast = array[array.count - 2]\n        let\
    \ thirdToLast = array[array.count - 3]\n        let item = last + secondToLast\
    \ + thirdToLast\n        array.append(item)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2oqzg696/tmp2oqzg696.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6324b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b632480ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b632480a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63248097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2oqzg696                        0x000055fc5fd9381a <unavailable> + 6170

    5    libc.so.6                          0x00002b6324cff460 __libc_start_main +
    245

    6    tmp2oqzg696                        0x000055fc5fd93459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](count:\
    \ n+1, repeatedValue: 0).enumerate().map { (i, _) in\n        if i == 0 {\n  \
    \          return 1\n        } else if i == 1 {\n            return 3\n      \
    \  } else if i == 2 {\n            return 2\n        } else {\n            return\
    \ tri(n-1) + tri(n-2) + tri(n+1)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprli9u7hv.swift:19:12: error: no exact matches in call to initializer\
    \ \n    return [Int](count: n+1, repeatedValue: 0).enumerate().map { (i, _) in\n\
    \           ^\n/tmp/tmprli9u7hv.swift:19:12: note: found candidate with type '(Int,\
    \ Int) -> [Int]'\n    return [Int](count: n+1, repeatedValue: 0).enumerate().map\
    \ { (i, _) in\n           ^\n/tmp/tmprli9u7hv.swift:27:40: error: cannot convert\
    \ return expression of type 'Array<Int>' to return type 'Int'\n            return\
    \ tri(n-1) + tri(n-2) + tri(n+1)\n                   ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~\n\
    /tmp/tmprli9u7hv.swift:19:48: error: value of type '[Int]' has no member 'enumerate'\n\
    \    return [Int](count: n+1, repeatedValue: 0).enumerate().map { (i, _) in\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmprli9u7hv.swift:27:24:\
    \ error: missing argument label 'n:' in call\n            return tri(n-1) + tri(n-2)\
    \ + tri(n+1)\n                       ^\n                       n: \n/tmp/tmprli9u7hv.swift:27:35:\
    \ error: missing argument label 'n:' in call\n            return tri(n-1) + tri(n-2)\
    \ + tri(n+1)\n                                  ^\n                          \
    \        n: \n/tmp/tmprli9u7hv.swift:27:46: error: missing argument label 'n:'\
    \ in call\n            return tri(n-1) + tri(n-2) + tri(n+1)\n               \
    \                              ^\n                                           \
    \  n: \n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    while result.count < n + 1 {\n        let num = result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3]\n        result.append(num)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpb_e1q_0q/tmpb_e1q_0q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb9703cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb96d33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb96d33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb96d327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_e1q_0q                        0x000055dddb16d49a <unavailable> + 5274

    5    libc.so.6                          0x00002abb97228460 __libc_start_main +
    245

    6    tmpb_e1q_0q                        0x000055dddb16d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    return Array(0...n).map {\n        if $0 ==\
    \ 0 {\n            return 1\n        }\n        if $0 == 1 {\n            return\
    \ 3\n        }\n        if $0 == 2 {\n            return 2\n        }\n      \
    \  if $0 % 2 == 0 {\n            return 1 + $0 / 2\n        }\n        return\
    \ tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n: $0 + 1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp48x7a11h.swift:35:48: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n        return tri(n: $0 - 1) + tri(n:\
    \ $0 - 2) + tri(n: $0 + 1)\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var triArr = [1, 3, 2]\n    var i = 3\n    while\
    \ i <= n {\n        let next = triArr[i - 1] + triArr[i - 2] + triArr[i - 3]\n\
    \        triArr.append(next)\n        i += 1\n    }\n    return triArr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpoiu0nld9/tmpoiu0nld9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba195823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19551ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19551a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1955197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiu0nld9                        0x000055711a5db43a <unavailable> + 5178

    5    libc.so.6                          0x00002ba195a0f460 __libc_start_main +
    245

    6    tmpoiu0nld9                        0x000055711a5db079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tribonacciSequence\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return tribonacciSequence\n\
    \    } else {\n        for _ in 2...n {\n            tribonacciSequence.append(tribonacciSequence[tribonacciSequence.count\
    \ - 1] + tribonacciSequence[tribonacciSequence.count - 2] + tribonacciSequence[tribonacciSequence.count\
    \ - 3])\n        }\n    }\n    return tribonacciSequence\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpm7i8cgge/tmpm7i8cgge.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b821c8a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821c59fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821c59f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b821c59e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7i8cgge                        0x00005614a22e661a <unavailable> + 5658

    5    libc.so.6                          0x00002b821ca94460 __libc_start_main +
    245

    6    tmpm7i8cgge                        0x00005614a22e6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var n =\
    \ n\n    var result = [1, 3, 2]\n    while n > 0 {\n        let lastElement =\
    \ result.last!\n        result.append(lastElement % 2 == 0 ? (1 + lastElement\
    \ / 2) : (result[result.count - 2] + result[result.count - 3] + lastElement))\n\
    \        n -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpulddk_wf/tmpulddk_wf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7e0989c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7e0680b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7e0680988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7e067f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulddk_wf                        0x0000559548a4d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae7e0b75460 __libc_start_main +
    245

    6    tmpulddk_wf                        0x0000559548a4d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    if n < 3 {\n        return Array(0...n).map { $0\
    \ == 1 ? 3 : 1 }\n    }\n    var result = [Int](repeating: 0, count: n + 1)\n\
    \    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    for index in 3...n\
    \ {\n        result[index] = result[index - 1] + result[index - 2] + result[index\
    \ - 3]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_1vb5031/tmp_1vb5031.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b584f6acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b584f3a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b584f3a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b584f3a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1vb5031                        0x000055ed09ee980a <unavailable> + 6154

    5    libc.so.6                          0x00002b584f898460 __libc_start_main +
    245

    6    tmp_1vb5031                        0x000055ed09ee9449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            arr.append(triHelper(n: i, arr:\
    \ arr))\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaqh4z7xl.swift:28:24: error: cannot find 'triHelper' in scope\n\
    \            arr.append(triHelper(n: i, arr: arr))\n                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  let n = n\
    \ + 1\n  var numbers = [1, 3, 2]\n  if n <= 3 {\n    return Array(numbers[0..<n])\n\
    \  }\n  for _ in 3..<n {\n    let newValue = numbers[0] + numbers[1] + numbers[2]\n\
    \    numbers.append(newValue)\n    numbers.removeFirst()\n  }\n  return numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp1zb3ove1/tmp1zb3ove1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5c5f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5c5c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5c5c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5c5c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zb3ove1                        0x000056290ccd17ca <unavailable> + 6090

    5    libc.so.6                          0x00002ba5c6112460 __libc_start_main +
    245

    6    tmp1zb3ove1                        0x000056290ccd1409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for _ in 0...n - 3 {\n            if result.count % 2 == 0 {\n\
    \                result.append(result.last! + 1)\n            } else {\n     \
    \           result.append(result[result.count - 1] + result[result.count - 2]\
    \ + result[result.count - 3])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0vt8mu13/tmp0vt8mu13.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbc4741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbc4438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbc4438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbc44377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vt8mu13                        0x0000557bf0a5b6ba <unavailable> + 5818

    5    libc.so.6                          0x00002adbc492d460 __libc_start_main +
    245

    6    tmp0vt8mu13                        0x0000557bf0a5b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return tri_recur(n:\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\n\
    assert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\n\
    assert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n:\
    \ 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0qjj2ox3.swift:19:12: error: cannot find 'tri_recur' in scope\n\
    \    return tri_recur(n: n)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [1, 3, 2]\n    for index in 3...n {\n        if index % 2 == 0 {\n       \
    \     array.append(index / 2 + 1)\n        } else {\n            array.append(array[index\
    \ - 1] + array[index - 2] + array[index - 3])\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt9qcptke/tmpt9qcptke.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f85dc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f85ab8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f85ab8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f85ab77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9qcptke                        0x00005565f9ecc5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b1f85fad460 __libc_start_main +
    245

    6    tmpt9qcptke                        0x00005565f9ecc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            arr.append(1)\n\
    \        } else if i == 1 {\n            arr.append(3)\n        } else if i ==\
    \ 2 {\n            arr.append(2)\n        } else if i % 2 == 0 {\n           \
    \ arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt6jdjv94/tmpt6jdjv94.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba813f74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba813c6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba813c6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba813c6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6jdjv94                        0x0000564a1d1aa61a <unavailable> + 5658

    5    libc.so.6                          0x00002ba814160460 __libc_start_main +
    245

    6    tmpt6jdjv94                        0x0000564a1d1aa259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else {\n        return []\n    }\n    return (0...n).map {\n        $0\
    \ == 0 ? 1 : $0 == 1 ? 3 : $0 == 2 ? 2 : tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n:\
    \ $0 - 3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1xmlgr09.swift:22:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (0...n).map {\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979702
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var res = [1, 3, 2]\n    var i = 2\n    while i\
    \ <= n {\n        if i % 2 == 0 {\n            res.append(1 + i / 2)\n       \
    \ } else {\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n   \
    \     }\n        i += 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b787cfd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b787cccb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b787cccb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b787cccb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b787cccabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b787cacae83 <unavailable> + 188035

    6    tmpp7bk7mv1                        0x00005605d1981221 <unavailable> + 8737

    7    tmpp7bk7mv1                        0x00005605d19803fb <unavailable> + 5115

    8    libc.so.6                          0x00002b787d1c0460 __libc_start_main +
    245

    9    tmpp7bk7mv1                        0x00005605d1980119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [Int](repeating: 0, count: n + 1)\n    result[0] = 1\n    result[1]\
    \ = 3\n    result[2] = 2\n    var i = 3\n    while i <= n {\n        let temp\
    \ = result[i - 1] + result[i - 2] + result[i - 3]\n        result[i] = temp\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpvolcop05/tmpvolcop05.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39850ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3984de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3984de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3984de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvolcop05                        0x0000563c1c8474aa <unavailable> + 5290

    5    libc.so.6                          0x00002b39852d7460 __libc_start_main +
    245

    6    tmpvolcop05                        0x0000563c1c8470e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for _\
    \ in 3...n {\n        let value = (result[result.count - 1] + result[result.count\
    \ - 2] + result[result.count - 3])\n        result.append(value)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmps3kzyldk/tmps3kzyldk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3d6dc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3d6ab8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3d6ab8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3d6ab77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3kzyldk                        0x000055693a05a81a <unavailable> + 6170

    5    libc.so.6                          0x00002ae3d6fad460 __libc_start_main +
    245

    6    tmps3kzyldk                        0x000055693a05a459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  let base =\
    \ [1, 3, 2]\n  if n < 3 {\n    return Array(base[0..<n+1])\n  }\n  var sequence\
    \ = Array(base)\n  for i in 3...n {\n    let newElement = sequence[i-3] + sequence[i-2]\
    \ + sequence[i-1]\n    sequence.append(newElement)\n  }\n  return sequence\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpe7tq7rhq/tmpe7tq7rhq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0a0ab4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0a07abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0a07ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0a07aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7tq7rhq                        0x0000557c0b23671a <unavailable> + 5914

    5    libc.so.6                          0x00002ac0a0ca0460 __libc_start_main +
    245

    6    tmpe7tq7rhq                        0x0000557c0b236359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var pre1 = 1\n    var pre2 = 3\n    var pre3 = 2\n    if n ==\
    \ 0 {\n        return [pre1]\n    }\n    result.append(pre1)\n    if n == 1 {\n\
    \        result.append(pre2)\n        return result\n    }\n    result.append(pre2)\n\
    \    if n == 2 {\n        result.append(pre3)\n        return result\n    }\n\
    \    result.append(pre3)\n    for _ in 3...n {\n        let cur = pre1 + pre2\
    \ + pre3\n        result.append(cur)\n        pre1 = pre2\n        pre2 = pre3\n\
    \        pre3 = cur\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmp6icmz3vq/tmp6icmz3vq.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4853411c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4853108b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4853108988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48531077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icmz3vq                        0x000055a8df9e35ca <unavailable> + 5578

    5    libc.so.6                          0x00002b48535fd460 __libc_start_main +
    245

    6    tmp6icmz3vq                        0x000055a8df9e3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            arr.append(1)\n\
    \        } else if i == 1 {\n            arr.append(3)\n        } else if i ==\
    \ 2 {\n            arr.append(2)\n        } else if i % 2 == 0 {\n           \
    \ arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt6jdjv94/tmpt6jdjv94.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba813f74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba813c6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba813c6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba813c6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6jdjv94                        0x0000564a1d1aa61a <unavailable> + 5658

    5    libc.so.6                          0x00002ba814160460 __libc_start_main +
    245

    6    tmpt6jdjv94                        0x0000564a1d1aa259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >=\
    \ 0 else { return [] }\n  switch n {\n  case 0:\n    return [1]\n  case 1:\n \
    \   return [1, 3]\n  case 2:\n    return [1, 3, 2]\n  default:\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n      if i % 2 == 0 {\n        result.append(1\
    \ + i / 2)\n      } else {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n      }\n    }\n    return result\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002affe2950c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affe2647561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002affe2647286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002affe264713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002affe2646bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002affe2446e83 <unavailable> + 188035

    6    tmp8mriq3vl                        0x0000560671764510 <unavailable> + 9488

    7    tmp8mriq3vl                        0x00005606717634eb <unavailable> + 5355

    8    libc.so.6                          0x00002affe2b3c460 __libc_start_main +
    245

    9    tmp8mriq3vl                        0x0000560671763209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Your\
    \ code here\n    var arr = [Int]()\n    for i in 0...n{\n        if i == 0 {\n\
    \            arr.append(1)\n        }\n        else if i == 1{\n            arr.append(3)\n\
    \        }\n        else if i == 2{\n            arr.append(2)\n        }\n  \
    \      else{\n            arr.append(arr[i-1] + arr[i-2] + arr[i-3])\n       \
    \ }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpuvhgz7m0/tmpuvhgz7m0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6669655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b666934cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b666934c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b666934b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvhgz7m0                        0x000056285a3cd61a <unavailable> + 5658

    5    libc.so.6                          0x00002b6669841460 __libc_start_main +
    245

    6    tmpuvhgz7m0                        0x000056285a3cd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [Int](repeating: 1, count: n + 1)\n\
    \    for i in 1..<result.count {\n        result[i] = i % 2 == 0 ? 1 + i / 2 :\
    \ result[i - 1] + result[i - 2] + result[i + 1]\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aded87dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aded84d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aded84d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aded84d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aded84d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aded82d1e83 <unavailable> + 188035

    6    tmpyh7a_iew                        0x000056529f0194ac <unavailable> + 9388

    7    tmpyh7a_iew                        0x000056529f0185ab <unavailable> + 5547

    8    libc.so.6                          0x00002aded89c7460 __libc_start_main +
    245

    9    tmpyh7a_iew                        0x000056529f0182c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map\
    \ {\n        if $0 <= 2 {\n            return 1\n        } else {\n          \
    \  let x = tri(n: $0 - 1)\n            let y = tri(n: $0 - 2)\n            let\
    \ z = tri(n: $0 - 3)\n            return x[x.count - 1] + y[y.count - 1] + z[z.count\
    \ - 1]\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp8wjme1z_/tmp8wjme1z_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e71c46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e7193db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e7193d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e7193c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wjme1z_                        0x0000559410c766aa <unavailable> + 5802

    5    libc.so.6                          0x00002b3e71e32460 __libc_start_main +
    245

    6    tmp8wjme1z_                        0x0000559410c762e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    } else if n == 1 {\n        return [1, 3]\n   \
    \ } else if n == 2 {\n        return [1, 3, 2]\n    }\n    var triArray = [1,\
    \ 3, 2]\n    var i = 3\n    while i <= n {\n        let element = triArray[i -\
    \ 1] + triArray[i - 2] + triArray[i - 3]\n        triArray.append(element)\n \
    \       i += 1\n    }\n    return triArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpuvy763sh/tmpuvy763sh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b550521dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5504f14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5504f14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5504f137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvy763sh                        0x000055be47bda43a <unavailable> + 5178

    5    libc.so.6                          0x00002b5505409460 __libc_start_main +
    245

    6    tmpuvy763sh                        0x000055be47bda079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](1...n).map\
    \ {\n        if $0 <= 2 {\n            return $0 + 1\n        }\n        return\
    \ tri(n: $0 - 1)[$0 - 1] + tri(n: $0 - 2)[$0 - 2] + tri(n: $0 - 3)[$0 - 3]\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba153ee1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba153bd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba153bd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba153bd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba153bd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1539d7e83 <unavailable> + 188035

    6    tmpidcynesk                        0x000056006ee8a2e8 <unavailable> + 8936

    7    libswiftCore.so                    0x00002ba153bc0820 Collection.map<A>(_:)
    + 426

    8    tmpidcynesk                        0x000056006ee8a19b <unavailable> + 8603

    9    tmpidcynesk                        0x000056006ee8957b <unavailable> + 5499

    10   libc.so.6                          0x00002ba1540cd460 __libc_start_main +
    245

    11   tmpidcynesk                        0x000056006ee89299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [1,\
    \ 3, 2, 8]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt5gwo6or/tmpt5gwo6or.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48ee24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48edf41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48edf41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48edf407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5gwo6or                        0x00005608b46c247f <unavailable> + 5247

    5    libc.so.6                          0x00002b48ee436460 __libc_start_main +
    245

    6    tmpt5gwo6or                        0x00005608b46c1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    guard n > 1 else { return [1, 3] }\n    var tri\
    \ = [1, 3, 2]\n    for i in 3...n {\n        let val = tri[i - 1] + tri[i - 2]\
    \ + tri[i - 3]\n        tri.append(val)\n    }\n    return tri\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpuwx9bxzp/tmpuwx9bxzp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba575079c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba574d70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba574d70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba574d6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwx9bxzp                        0x0000561dfa9cb5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba575265460 __libc_start_main +
    245

    6    tmpuwx9bxzp                        0x0000561dfa9cb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var list\
    \ = [Int]()\n    for i in 0 ... n {\n        if i == 0 {\n            list.append(1)\n\
    \        } else if i == 1 {\n            list.append(3)\n        } else if i ==\
    \ 2 {\n            list.append(2)\n        } else {\n            list.append(list[i\
    \ - 1] + list[i - 2] + list[i - 3])\n        }\n    }\n    return list\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5dipnd_n/tmp5dipnd_n.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cb9408c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cb90ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cb90ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cb90fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dipnd_n                        0x00005631abc9461a <unavailable> + 5658

    5    libc.so.6                          0x00002b7cb95f4460 __libc_start_main +
    245

    6    tmp5dipnd_n                        0x00005631abc94259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var series = [1, 3, 2]\n    for _ in 0...n - 3 {\n\
    \        let result = series[0] + series[1] + series[2]\n        series[0] = series[1]\n\
    \        series[1] = series[2]\n        series[2] = result\n    }\n    return\
    \ series\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjnpvijk6/tmpjnpvijk6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cc34b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cc31a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cc31a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cc31a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnpvijk6                        0x000055c78da405ba <unavailable> + 5562

    5    libc.so.6                          0x00002b0cc369d460 __libc_start_main +
    245

    6    tmpjnpvijk6                        0x000055c78da401f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // your\
    \ code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpk7rmbzsl/tmpk7rmbzsl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbd55a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbd529db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbd529d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbd529c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7rmbzsl                        0x000055b759da538a <unavailable> + 5002

    5    libc.so.6                          0x00002acbd5792460 __libc_start_main +
    245

    6    tmpk7rmbzsl                        0x000055b759da4fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // your\
    \ code here\n    var result = [1, 3, 2]\n    if n == 0 {\n        return [1]\n\
    \    } else if n == 1 {\n        return [1, 3]\n    } else if n == 2 {\n     \
    \   return [1, 3, 2]\n    } else {\n        for _ in 0..<n - 2 {\n           \
    \ result.append(result[result.count - 3] + result[result.count - 2] + result[result.count\
    \ - 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpt8er2i1c/tmpt8er2i1c.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fd1295c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fd0f8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fd0f8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fd0f8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt8er2i1c                        0x0000562c7dd8c61a <unavailable> + 5658

    5    libc.so.6                          0x00002b5fd1481460 __libc_start_main +
    245

    6    tmpt8er2i1c                        0x0000562c7dd8c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [1,\
    \ 3, 2, 8]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt5gwo6or/tmpt5gwo6or.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48ee24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48edf41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48edf41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48edf407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5gwo6or                        0x00005608b46c247f <unavailable> + 5247

    5    libc.so.6                          0x00002b48ee436460 __libc_start_main +
    245

    6    tmpt5gwo6or                        0x00005608b46c1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map({\
    \ (index) -> Int in\n        if index == 0 {\n            return 1\n        }\
    \ else if index == 1 {\n            return 3\n        } else if index == 2 {\n\
    \            return 2\n        } else {\n            return tri(n: index - 1)[index\
    \ - 1] + tri(n: index - 2)[index - 2] + tri(n: index - 3)[index - 3]\n       \
    \ }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmps8fy6x5x/tmps8fy6x5x.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5425945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b542563cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b542563c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b542563b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8fy6x5x                        0x0000559b2a19e65a <unavailable> + 5722

    5    libc.so.6                          0x00002b5425b31460 __libc_start_main +
    245

    6    tmps8fy6x5x                        0x0000559b2a19e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >=\
    \ 0 else { return [] }\n  if n == 0 { return [1] }\n  if n == 1 { return [1, 3]\
    \ }\n  if n == 2 { return [1, 3, 2] }\n  var sequence = [1, 3, 2]\n  for i in\
    \ 3...n {\n    if i % 2 == 0 {\n      sequence.append(1 + i / 2)\n    } else {\n\
    \      sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n\
    \    }\n  }\n  return sequence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af052fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af052cd1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af052cd1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af052cd113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af052cd0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af052ad0e83 <unavailable> + 188035

    6    tmp33i7alhg                        0x0000562c822b6507 <unavailable> + 9479

    7    tmp33i7alhg                        0x0000562c822b54eb <unavailable> + 5355

    8    libc.so.6                          0x00002af0531c6460 __libc_start_main +
    245

    9    tmp33i7alhg                        0x0000562c822b5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var tribonacci = [1, 3, 2]\n    for i in 3...n {\n\
    \        tribonacci.append(i.isMultiple(of: 2) ? (1 + i / 2) : (tribonacci[i -\
    \ 1] + tribonacci[i - 2] + tribonacci[i + 1]))\n    }\n    return tribonacci\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b295d96cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b295d663561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b295d663286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b295d66313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b295d662bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b295d462e83 <unavailable> + 188035

    6    tmpruuqemmy                        0x000055958cf754be <unavailable> + 9406

    7    tmpruuqemmy                        0x000055958cf745eb <unavailable> + 5611

    8    libc.so.6                          0x00002b295db58460 __libc_start_main +
    245

    9    tmpruuqemmy                        0x000055958cf74309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  if n < 0 {\n\
    \    return []\n  }\n  if n == 0 {\n    return [1]\n  }\n  if n == 1 {\n    return\
    \ [1, 3]\n  }\n  if n == 2 {\n    return [1, 3, 2]\n  }\n  var result = [1, 3,\
    \ 2]\n  for i in 3...n {\n    let n = i % 2 == 0 ? i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3]\n    result.append(n)\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqkg9x2be/tmpqkg9x2be.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d590e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d58ddcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d58ddc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d58ddb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkg9x2be                        0x0000559c379115ca <unavailable> + 5578

    5    libc.so.6                          0x00002b4d592d1460 __libc_start_main +
    245

    6    tmpqkg9x2be                        0x0000559c37911209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var fib:\
    \ [Int] = [1, 3, 2]\n    for i in 0..<n {\n        if i % 2 == 0 {\n         \
    \   fib.append(fib[i] + fib[i + 1] + fib[i + 2])\n        } else {\n         \
    \   fib.append(fib[i] + fib[i - 1] + fib[i + 1])\n        }\n    }\n    return\
    \ fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgorexrin/tmpgorexrin.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92e9007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92e8cfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92e8cfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92e8cfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgorexrin                        0x000055d9981f95ca <unavailable> + 5578

    5    libc.so.6                          0x00002b92e91f3460 __libc_start_main +
    245

    6    tmpgorexrin                        0x000055d9981f9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [1,\
    \ 3, 2, 8]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt5gwo6or/tmpt5gwo6or.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48ee24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48edf41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48edf41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48edf407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5gwo6or                        0x00005608b46c247f <unavailable> + 5247

    5    libc.so.6                          0x00002b48ee436460 __libc_start_main +
    245

    6    tmpt5gwo6or                        0x00005608b46c1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1\
    \ {\n        return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n\
    \    } else {\n        for i in 3...n {\n            result.append(result[i -\
    \ 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp45msjmo9/tmp45msjmo9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b570c2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b570bfd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b570bfd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b570bfd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45msjmo9                        0x00005555fa9eb5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b570c4c9460 __libc_start_main +
    245

    6    tmp45msjmo9                        0x00005555fa9eb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            tri.append(1)\n\
    \        } else if i == 1 {\n            tri.append(3)\n        } else if i ==\
    \ 2 {\n            tri.append(2)\n        } else {\n            tri.append(tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3])\n        }\n    }\n    return tri\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpsxua9x2l/tmpsxua9x2l.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970b368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970b05fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970b05f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970b05e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxua9x2l                        0x0000560dd556261a <unavailable> + 5658

    5    libc.so.6                          0x00002b970b554460 __libc_start_main +
    245

    6    tmpsxua9x2l                        0x0000560dd5562259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            array.append(array[i\
    \ - 1] + array[i - 2] + array[i - 3])\n        } else {\n            array.append(1\
    \ + i / 2)\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpf5y9_vnc/tmpf5y9_vnc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86be5fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86be2f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86be2f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86be2f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5y9_vnc                        0x00005621071e65ca <unavailable> + 5578

    5    libc.so.6                          0x00002b86be7ea460 __libc_start_main +
    245

    6    tmpf5y9_vnc                        0x00005621071e6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triArray\
    \ = [Int]()\n    triArray.append(1)\n    triArray.append(3)\n    triArray.append(2)\n\
    \    for _ in 3...n {\n        if triArray.count % 2 == 0 {\n            triArray.append(1\
    \ + triArray.count / 2)\n        } else {\n            triArray.append(triArray[triArray.count\
    \ - 3] + triArray[triArray.count - 2] + triArray[triArray.count - 1])\n      \
    \  }\n    }\n    return triArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpu32hwqxj/tmpu32hwqxj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48968ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48965f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48965f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48965f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu32hwqxj                        0x00005618629c667a <unavailable> + 5754

    5    libc.so.6                          0x00002b4896aeb460 __libc_start_main +
    245

    6    tmpu32hwqxj                        0x00005618629c62b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Write\
    \ your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjf6o14lr/tmpjf6o14lr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7af938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7af62fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7af62f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7af62e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf6o14lr                        0x00005625f4fc038a <unavailable> + 5002

    5    libc.so.6                          0x00002ba7afb24460 __libc_start_main +
    245

    6    tmpjf6o14lr                        0x00005625f4fbffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return [Int](0...n).map(tri)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj3t_n0e_.swift:19:23: error: type of expression is ambiguous without\
    \ more context\n  return [Int](0...n).map(tri)\n         ~~~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    result.append(1)\n    if n >= 1 {\n        result.append(3)\n\
    \    }\n    for i in 2...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2368a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2368772561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2368772286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b236877213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2368771bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2368571e83 <unavailable> + 188035

    6    tmp3xm3pl4z                        0x000056254ff3b485 <unavailable> + 9349

    7    tmp3xm3pl4z                        0x000056254ff3a53b <unavailable> + 5435

    8    libc.so.6                          0x00002b2368c67460 __libc_start_main +
    245

    9    tmp3xm3pl4z                        0x000056254ff3a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [Int](repeating: 0, count: n + 1)\n\
    \    if n == 1 {\n        result[0] = 1\n        return result\n    }\n    if\
    \ n == 2 {\n        result[0] = 1\n        result[1] = 3\n        return result\n\
    \    }\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    var i = 2\n\
    \    while i < n {\n        if i % 2 == 0 {\n            result[i + 1] = 1 + i\
    \ / 2\n        } else {\n            result[i + 1] = result[i] + result[i - 1]\
    \ + result[i + 1]\n        }\n        i += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpowu2k7i2/tmpowu2k7i2.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a1b92dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a1b624b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a1b624988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a1b6237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowu2k7i2                        0x000055a9c875953a <unavailable> + 5434

    5    libc.so.6                          0x00002b5a1bb19460 __libc_start_main +
    245

    6    tmpowu2k7i2                        0x000055a9c8759179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var r: [Int]\
    \ = [1, 3, 2]\n    for i in 3...n {\n        r.append(i % 2 == 0 ? 1 + i / 2 :\
    \ r[i - 1] + r[i - 2] + r[i + 1])\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9b4ff0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9b4ce7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9b4ce7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9b4ce713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9b4ce6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9b4ae6e83 <unavailable> + 188035

    6    tmpmchje4wf                        0x000055a1dec4c40d <unavailable> + 9229

    7    tmpmchje4wf                        0x000055a1dec4b4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ab9b51dc460 __libc_start_main +
    245

    9    tmpmchje4wf                        0x000055a1dec4b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    assert(n\
    \ >= 0)\n    var result = [1, 3, 2]\n    if n < 3 {\n        if n == 0 {\n   \
    \         return [1]\n        } else if n == 1 {\n            return [1, 3]\n\
    \        } else {\n            return result\n        }\n    }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae17690bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae176602561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae176602286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae17660213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae176601bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae176401e83 <unavailable> + 188035

    6    tmp361j_x3k                        0x000056262dd8d5bf <unavailable> + 9663

    7    tmp361j_x3k                        0x000056262dd8c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae176af7460 __libc_start_main +
    245

    9    tmp361j_x3k                        0x000056262dd8c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var sequence\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            sequence.append(1\
    \ + i / 2)\n        } else {\n            sequence.append(sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i + 1])\n        }\n    }\n    return sequence\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8876eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8873e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac8873e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac8873e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac8873e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac8871e4e83 <unavailable> + 188035

    6    tmpryv4f5xm                        0x000055e0ae692419 <unavailable> + 9241

    7    tmpryv4f5xm                        0x000055e0ae6914eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac8878da460 __libc_start_main +
    245

    9    tmpryv4f5xm                        0x000055e0ae691209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var array = [1, 3,\
    \ 2]\n    for i in 3...n {\n        let t = array[i - 3] + array[i - 2] + array[i\
    \ - 1]\n        array.append(t)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmps4x9f9qz/tmps4x9f9qz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af17154cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af171243b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af171243988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1712427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4x9f9qz                        0x00005643bf0c35ca <unavailable> + 5578

    5    libc.so.6                          0x00002af171738460 __libc_start_main +
    245

    6    tmps4x9f9qz                        0x00005643bf0c3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    var result = [1, 3, 2]\n    if n <= 2 {\n \
    \       return Array(result[0...n])\n    }\n    var a = 1\n    var b = 3\n   \
    \ var c = 2\n    var next = 0\n    for _ in 3...n {\n        next = a + b + c\n\
    \        a = b\n        b = c\n        c = next\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyki2r3yg/tmpyki2r3yg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac70e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac70afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac70afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac70afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyki2r3yg                        0x000055ddb766976a <unavailable> + 5994

    5    libc.so.6                          0x00002aac70ff2460 __libc_start_main +
    245

    6    tmpyki2r3yg                        0x000055ddb76693a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n         \
    \   result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb972c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb96fbb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeb96fbb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeb96fbb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeb96fbabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeb96dbae83 <unavailable> + 188035

    6    tmpcnqvws40                        0x0000560e51f09419 <unavailable> + 9241

    7    tmpcnqvws40                        0x0000560e51f084eb <unavailable> + 5355

    8    libc.so.6                          0x00002aeb974b0460 __libc_start_main +
    245

    9    tmpcnqvws40                        0x0000560e51f08209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >\
    \ 0 else { return [] }\n  return Array(0...n).map { tri(n: $0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp05b81_u5.swift:20:29: error: cannot convert value of type '[Int]'\
    \ to closure result type 'Int'\n  return Array(0...n).map { tri(n: $0) }\n   \
    \                         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var x =\
    \ 1\n    var y = 3\n    var z = 2\n    var next = 0\n    var result = [1, 3, 2]\n\
    \    for _ in 3...n {\n        if x % 2 == 0 {\n            next = 1 + x / 2\n\
    \        } else {\n            next = x + y + z\n        }\n        x = y\n  \
    \      y = z\n        z = next\n        result.append(next)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpypuzw28g/tmpypuzw28g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c90d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c8dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c8dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c8dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypuzw28g                        0x000055b5907c556a <unavailable> + 5482

    5    libc.so.6                          0x00002b36c92c4460 __libc_start_main +
    245

    6    tmpypuzw28g                        0x000055b5907c51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar arr =\
    \ [1, 3, 2]\n\tguard n > 2 else { return Array(arr[0...n]) }\n\tfor i in 3...n\
    \ {\n\t\tarr.append(i % 2 == 0 ? 1 + i / 2 : arr[i - 1] + arr[i - 2] + arr[i +\
    \ 1])\n\t}\n\treturn arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aee61788c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6147f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aee6147f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aee6147f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aee6147ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aee6127ee83 <unavailable> + 188035

    6    tmp1cc1tq1e                        0x000055570d8ca66a <unavailable> + 9834

    7    tmp1cc1tq1e                        0x000055570d8c96db <unavailable> + 5851

    8    libc.so.6                          0x00002aee61974460 __libc_start_main +
    245

    9    tmp1cc1tq1e                        0x000055570d8c93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\t// Write your\
    \ solution here\n\tvar result = [1, 3, 2]\n\tif n <= 2 {\n\t\tresult.removeLast(2\
    \ - n)\n\t\treturn result\n\t}\n\tfor i in 3...n {\n\t\tlet value = result[i -\
    \ 1] + result[i - 2] + result[i - 3]\n\t\tresult.append(value)\n\t}\n\treturn\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4_jkin1r/tmp4_jkin1r.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8016b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8013a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8013a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8013a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_jkin1r                        0x000056480b3016aa <unavailable> + 5802

    5    libc.so.6                          0x00002ab80189c460 __libc_start_main +
    245

    6    tmp4_jkin1r                        0x000056480b3012e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\treturn Array(0...n).map\
    \ { num in\n\t\tif num == 0 {\n\t\t\treturn 1\n\t\t} else if num == 1 {\n\t\t\t\
    return 3\n\t\t} else if num == 2 {\n\t\t\treturn 2\n\t\t} else if num % 2 == 0\
    \ {\n\t\t\treturn 1 + num / 2\n\t\t} else {\n\t\t\treturn tri(n: num - 1) + tri(n:\
    \ num - 2) + tri(n: num + 1)\n\t\t}\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo7m5fl6o.swift:29:45: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n                        return tri(n:\
    \ num - 1) + tri(n: num - 2) + tri(n: num + 1)\n                             \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar a = 1\n\
    \tvar b = 3\n\tvar c = 2\n\tvar tri: [Int] = [1, 3, 2]\n\tfor _ in 1...n {\n\t\
    \t(a, b, c) = (b, c, a + b + c)\n\t\ttri.append(c)\n\t}\n\treturn tri\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpv56r64is/tmpv56r64is.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d10ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04ce05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04ce05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04ce047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv56r64is                        0x0000563a621d456a <unavailable> + 5482

    5    libc.so.6                          0x00002ae04d2fa460 __libc_start_main +
    245

    6    tmpv56r64is                        0x0000563a621d41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    if n == 0 { return [1] }\n    var arr = [Int](repeating:\
    \ 0, count: n + 1)\n    arr[0] = 1\n    arr[1] = 3\n    arr[2] = 2\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            arr[i] = 1 + i / 2\n      \
    \  } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n     \
    \   }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0e1dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0e1ab3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad0e1ab3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad0e1ab313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad0e1ab2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad0e18b2e83 <unavailable> + 188035

    6    tmp60k5ka3d                        0x000055d1b2b8b59d <unavailable> + 9629

    7    tmp60k5ka3d                        0x000055d1b2b8a54b <unavailable> + 5451

    8    libc.so.6                          0x00002ad0e1fa8460 __libc_start_main +
    245

    9    tmp60k5ka3d                        0x000055d1b2b8a269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return (0\
    \ ... n).map {\n        switch $0 {\n        case 0: return 1\n        case 1:\
    \ return 3\n        case 2: return 2\n        default:\n            return tri(n:\
    \ $0 - 1) + tri(n: $0 - 2) + tri(n: $0 - 3)\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg7_1qx72.swift:25:52: error: cannot convert return expression of\
    \ type 'Array<Int>' to return type 'Int'\n            return tri(n: $0 - 1) +\
    \ tri(n: $0 - 2) + tri(n: $0 - 3)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var nums\
    \ = [Int](repeating: 0, count: n + 1)\n    if n == 0 {\n        return [1]\n \
    \   }\n    if n >= 1 {\n        nums[1] = 3\n    }\n    if n >= 2 {\n        nums[2]\
    \ = 2\n    }\n    if n >= 3 {\n        nums[3] = 8\n    }\n    for i in 4 ...\
    \ n {\n        nums[i] = nums[i - 1] + nums[i - 2] + nums[i - 3]\n    }\n    return\
    \ nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac343017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac342d0e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac342d0e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac342d0e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac342d0dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa1fqhran                        0x00005615847d5318 <unavailable> + 8984

    6    tmpa1fqhran                        0x00005615847d454b <unavailable> + 5451

    7    libc.so.6                          0x00002ac343203460 __libc_start_main +
    245

    8    tmpa1fqhran                        0x00005615847d4269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    assert(n\
    \ >= 0)\n    switch n {\n    case 0:\n        return [1]\n    case 1:\n      \
    \  return [1, 3]\n    case 2:\n        return [1, 3, 2]\n    default:\n      \
    \  var list = [1, 3, 2]\n        for i in 3...n {\n            list.append(tri(n:\
    \ i - 1) + tri(n: i - 2) + tri(n: i + 1))\n        }\n        return list\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\n\
    assert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\n\
    assert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n:\
    \ 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpefuyzk_5.swift:30:25: error: missing argument label 'contentsOf:'\
    \ in call\n            list.append(tri(n: i - 1) + tri(n: i - 2) + tri(n: i +\
    \ 1))\n                        ^\n                        contentsOf: \n"
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return n <\
    \ 2 ? [1, 3] : [1, 3] +\n    (1...n).dropFirst(2).reduce(into: [Int](), {\n  \
    \    $0.append($0.count % 2 == 0 ? $0.last! / 2 : $0.last! + $0[$0.count - 1]\
    \ + $0[$0.count - 2])\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6n7jg1ll.swift:19:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return n < 2 ? [1, 3] : [1, 3] +\n         ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979586
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    var result = [1, 3, 2]\n    guard n > 2 else {\
    \ return Array(result[..<n+1]) }\n    for i in 3...n {\n        result.append(i.isMultiple(of:\
    \ 2) ? 1 + i / 2 : result[i-1] + result[i-2] + result[i-3])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu_7z_5gx.swift:21:44: error: cannot convert value of type 'PartialRangeUpTo<Int>'\
    \ to expected argument type 'Int'\n    guard n > 2 else { return Array(result[..<n+1])\
    \ }\n                                           ^\n/tmp/tmpu_7z_5gx.swift:21:37:\
    \ error: missing argument label 'arrayLiteral:' in call\n    guard n > 2 else\
    \ { return Array(result[..<n+1]) }\n                                    ^\n  \
    \                                  arrayLiteral: \n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return arr\n    }\n    for _ in 3...n\
    \ {\n        let last = arr.count - 1\n        arr.append(arr[last] + arr[last\
    \ - 1] + arr[last - 2])\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpwenel8s9/tmpwenel8s9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91a1184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91a0e7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91a0e7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91a0e7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwenel8s9                        0x00005639dd7de61a <unavailable> + 5658

    5    libc.so.6                          0x00002b91a1370460 __libc_start_main +
    245

    6    tmpwenel8s9                        0x00005639dd7de259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >\
    \ 0 else { return [] }\n  var result = [Int](repeating: 1, count: n)\n  for i\
    \ in 2..<n {\n    if i % 2 == 0 {\n      result[i] = 1 + i / 2\n    } else {\n\
    \      result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n    }\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_c8gcfga/tmp_c8gcfga.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28523edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28520e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28520e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28520e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c8gcfga                        0x000055a70823362a <unavailable> + 5674

    5    libc.so.6                          0x00002b28525d9460 __libc_start_main +
    245

    6    tmp_c8gcfga                        0x000055a708233269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  // write your\
    \ code in Swift 3.0 (Linux)\n  var tribonacciArray = [1, 3, 2]\n  for i in 1...n\
    \ {\n    let tribonacci = 1 + (i / 2)\n    tribonacciArray.append(tribonacci)\n\
    \  }\n  return tribonacciArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpm7p9nohp/tmpm7p9nohp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71a36c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71a33bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71a33bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71a33be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7p9nohp                        0x000055752546256a <unavailable> + 5482

    5    libc.so.6                          0x00002b71a38b4460 __libc_start_main +
    245

    6    tmpm7p9nohp                        0x00005575254621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return result\n    }\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(1)\n        result.append(3)\n        return result\n    }\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0yv03341/tmp0yv03341.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accc7d70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc7a67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accc7a67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accc7a667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0yv03341                        0x00005619fe6bf61a <unavailable> + 5658

    5    libc.so.6                          0x00002accc7f5c460 __libc_start_main +
    245

    6    tmp0yv03341                        0x00005619fe6bf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\treturn []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpoasc7tsp/tmpoasc7tsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7c2387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7c207eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7c207e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7c207d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoasc7tsp                        0x000055e53e91238a <unavailable> + 5002

    5    libc.so.6                          0x00002ae7c2573460 __libc_start_main +
    245

    6    tmpoasc7tsp                        0x000055e53e911fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var sequence = [Int](repeating: 0, count: n + 1)\n\
    \    sequence[0] = 1\n    sequence[1] = 3\n    sequence[2] = 2\n    for i in stride(from:\
    \ 3, to: n + 1, by: 1) {\n        if i % 2 == 0 {\n            sequence[i] = 1\
    \ + i / 2\n        } else {\n            sequence[i] = sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i + 1]\n        }\n    }\n    return sequence\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b59e8969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59e8660561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b59e8660286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b59e866013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b59e865fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b59e845fe83 <unavailable> + 188035

    6    tmpp7dvfocf                        0x000055825378a695 <unavailable> + 9877

    7    tmpp7dvfocf                        0x000055825378966b <unavailable> + 5739

    8    libc.so.6                          0x00002b59e8b55460 __libc_start_main +
    245

    9    tmpp7dvfocf                        0x0000558253789389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triNumbers\
    \ = [1, 3, 2]\n    var index = 3\n    while index <= n {\n        if index % 2\
    \ == 0 {\n            triNumbers.append(1 + index / 2)\n        } else {\n   \
    \         triNumbers.append(triNumbers[index - 1] + triNumbers[index - 2] + triNumbers[index\
    \ + 1])\n        }\n        index += 1\n    }\n    return triNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b217f387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b217f07e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b217f07e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b217f07e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b217f07dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b217ee7de83 <unavailable> + 188035

    6    tmpud2q8gu0                        0x00005573199db216 <unavailable> + 8726

    7    tmpud2q8gu0                        0x00005573199da3fb <unavailable> + 5115

    8    libc.so.6                          0x00002b217f573460 __libc_start_main +
    245

    9    tmpud2q8gu0                        0x00005573199da119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    result.append(1)\n    if n == 0 {\n        return result\n \
    \   }\n    result.append(3)\n    if n == 1 {\n        return result\n    }\n \
    \   result.append(2)\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i -\
    \ 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpz6o7bqbi/tmpz6o7bqbi.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b904a4a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b904a199b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b904a199988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b904a1987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6o7bqbi                        0x00005588036b05ca <unavailable> + 5578

    5    libc.so.6                          0x00002b904a68e460 __libc_start_main +
    245

    6    tmpz6o7bqbi                        0x00005588036b0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    if n == 1 { return [1]\
    \ }\n    if n == 2 { return [1, 3] }\n    while result.count < n + 1 {\n     \
    \   let lastEven = result[result.count - 2]\n        let lastOdd = result[result.count\
    \ - 3]\n        result.append(1 + result.count / 2)\n        result.append(lastEven\
    \ + lastOdd + result[result.count - 1])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmppkig8ztw/tmppkig8ztw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb8e50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb8b47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb8b47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb8b467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkig8ztw                        0x000055b5f24ed52a <unavailable> + 5418

    5    libc.so.6                          0x00002afbb903c460 __libc_start_main +
    245

    6    tmppkig8ztw                        0x000055b5f24ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [result[0]]\n    } else if n ==\
    \ 1 {\n        return [result[0], result[1]]\n    } else if n == 2 {\n       \
    \ return result\n    }\n    var i = 3\n    while i <= n {\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n        i += 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8880c31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8880928561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8880928286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b888092813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8880927bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8880727e83 <unavailable> + 188035

    6    tmphl98ka2o                        0x000056089b5ad3df <unavailable> + 9183

    7    tmphl98ka2o                        0x000056089b5ac3fb <unavailable> + 5115

    8    libc.so.6                          0x00002b8880e1d460 __libc_start_main +
    245

    9    tmphl98ka2o                        0x000056089b5ac119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var arr = [1, 3, 2]\n    for i in 3...n {\n    \
    \    if i % 2 == 0 {\n            arr.append(1 + i / 2)\n        } else {\n  \
    \          arr.append(arr[i - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n\
    \    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5710449c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5710140561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5710140286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b571014013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b571013fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b570ff3fe83 <unavailable> + 188035

    6    tmpmfi334qr                        0x00005566bc1e8428 <unavailable> + 9256

    7    tmpmfi334qr                        0x00005566bc1e74eb <unavailable> + 5355

    8    libc.so.6                          0x00002b5710635460 __libc_start_main +
    245

    9    tmpmfi334qr                        0x00005566bc1e7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else { return [] }\n    guard n > 0 else { return [1] }\n    var result\
    \ = [1, 3, 2]\n    for i in 3 ... n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3c5231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3c4f28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad3c4f28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad3c4f2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad3c4f27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad3c4d27e83 <unavailable> + 188035

    6    tmpjer0viy3                        0x000055cc2a297441 <unavailable> + 9281

    7    tmpjer0viy3                        0x000055cc2a2964eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad3c541d460 __libc_start_main +
    245

    9    tmpjer0viy3                        0x000055cc2a296209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    var result = [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpfi5euikj/tmpfi5euikj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcb2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcafe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dcafe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dcafe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi5euikj                        0x0000561eb409b5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b8dcb4db460 __libc_start_main +
    245

    6    tmpfi5euikj                        0x0000561eb409b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    } else if n == 0 {\n        return [1]\n    } else\
    \ if n == 1 {\n        return [1, 3]\n    } else if n == 2 {\n        return [1,\
    \ 3, 2]\n    } else {\n        var result = [1, 3, 2]\n        for i in 3...n\
    \ {\n            result.append(tri(n: i - 2) + tri(n: i - 1) + tri(n: i + 1))\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbz26gws3.swift:30:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n: i - 2) + tri(n: i - 1) + tri(n: i\
    \ + 1))\n                          ^\n                          contentsOf: \n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    guard n > 0 else {\n        return [1]\n  \
    \  }\n    var results = [1, 3, 2]\n    var index = 3\n    while index <= n {\n\
    \        if index % 2 == 0 {\n            results.append(1 + index / 2)\n    \
    \    } else {\n            results.append(results[index - 1] + results[index -\
    \ 2] + results[index + 1])\n        }\n        index += 1\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bf98f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bf95ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1bf95ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1bf95ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1bf95ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1bf93ece83 <unavailable> + 188035

    6    tmp_8626znk                        0x00005562603ef24a <unavailable> + 8778

    7    tmp_8626znk                        0x00005562603ee3fb <unavailable> + 5115

    8    libc.so.6                          0x00002b1bf9ae2460 __libc_start_main +
    245

    9    tmp_8626znk                        0x00005562603ee119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 0 else { return [] }\n    var seq = [1, 3, 2]\n    for i in 3...n {\n    \
    \    if i.isMultiple(of: 2) {\n            seq.append(1 + i / 2)\n        } else\
    \ {\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n        }\n\
    \    }\n    return seq\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5647b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5644ad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab5644ad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab5644ad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab5644acbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab5642ace83 <unavailable> + 188035

    6    tmpvucntpcp                        0x0000557f7c4e84ce <unavailable> + 9422

    7    tmpvucntpcp                        0x0000557f7c4e75eb <unavailable> + 5611

    8    libc.so.6                          0x00002ab5649a2460 __libc_start_main +
    245

    9    tmpvucntpcp                        0x0000557f7c4e7309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            arr.append(1)\n\
    \        } else if i == 1 {\n            arr.append(3)\n        } else if i ==\
    \ 2 {\n            arr.append(2)\n        } else if i % 2 == 0 {\n           \
    \ arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt6jdjv94/tmpt6jdjv94.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba813f74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba813c6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba813c6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba813c6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6jdjv94                        0x0000564a1d1aa61a <unavailable> + 5658

    5    libc.so.6                          0x00002ba814160460 __libc_start_main +
    245

    6    tmpt6jdjv94                        0x0000564a1d1aa259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri\
    \ = [1, 3, 2]\n    for _ in 0..<n {\n        tri.append(tri[tri.count - 3] + tri[tri.count\
    \ - 2] + tri[tri.count - 1])\n    }\n    return tri\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp29k2guhy/tmp29k2guhy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6b0f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f6adefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f6adef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f6adee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29k2guhy                        0x00005607dd98a61a <unavailable> + 5658

    5    libc.so.6                          0x00002b6f6b2e4460 __libc_start_main +
    245

    6    tmp29k2guhy                        0x00005607dd98a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9b8425c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9b811c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae9b811c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae9b811c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae9b811bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae9b7f1be83 <unavailable> + 188035

    6    tmpgkfqd848                        0x0000556aeec384ee <unavailable> + 9454

    7    tmpgkfqd848                        0x0000556aeec374eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae9b8611460 __libc_start_main +
    245

    9    tmpgkfqd848                        0x0000556aeec37209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // write\
    \ your code in Swift 3.0 (Linux)\n    var f: [Int] = [1, 3, 2]\n    var i = 3\n\
    \    while i <= n {\n        let val = i % 2 == 0 ? 1 + i / 2 : f[i - 1] + f[i\
    \ - 2] + f[i + 1]\n        f.append(val)\n        i += 1\n    }\n    return f\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aef4325ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef42f51561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef42f51286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef42f5113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef42f50bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aef42d50e83 <unavailable> + 188035

    6    tmpbki880vn                        0x000056063512721f <unavailable> + 8735

    7    tmpbki880vn                        0x00005606351263fb <unavailable> + 5115

    8    libc.so.6                          0x00002aef43446460 __libc_start_main +
    245

    9    tmpbki880vn                        0x0000560635126119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // Your\
    \ code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpv0q8sx15/tmpv0q8sx15.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a465dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a4354b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a4354988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a43537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q8sx15                        0x0000561ba087938a <unavailable> + 5002

    5    libc.so.6                          0x00002b65a4849460 __libc_start_main +
    245

    6    tmpv0q8sx15                        0x0000561ba0878fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpx1tjy8ea/tmpx1tjy8ea.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fd901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fd5f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fd5f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fd5f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1tjy8ea                        0x000056069d65038a <unavailable> + 5002

    5    libc.so.6                          0x00002b36fdaed460 __libc_start_main +
    245

    6    tmpx1tjy8ea                        0x000056069d64ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ >= 0 else {\n        fatalError(\"n should be non-negative\")\n    }\n    if\
    \ n == 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n\
    \    }\n    var result = [1, 3, 2]\n    for _ in 3 ... n {\n        result.append(result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp95zhnw70/tmp95zhnw70.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab980503c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9801fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9801fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9801f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95zhnw70                        0x0000564aa05e96aa <unavailable> + 5802

    5    libc.so.6                          0x00002ab9806ef460 __libc_start_main +
    245

    6    tmp95zhnw70                        0x0000564aa05e92e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triArray\
    \ = [1, 3, 2]\n    guard n > 2 else { return triArray[0...n] }\n    for i in 3...n\
    \ {\n        let triLast = triArray[i - 1]\n        let triSecondLast = triArray[i\
    \ - 2]\n        let triThirdLast = triArray[i - 3]\n        if i % 2 == 0 {\n\
    \            triArray.append(1 + i / 2)\n        } else {\n            triArray.append(triLast\
    \ + triSecondLast + triThirdLast)\n        }\n    }\n    return triArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxs2s4xqt.swift:20:39: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n    guard n > 2 else { return triArray[0...n]\
    \ }\n                                      ^\nSwift.Collection:2:23: note: 'subscript(_:)'\
    \ produces 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n\
    \    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23:\
    \ note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var a =\
    \ [1, 3, 2]\n    guard n > 2 else { return a[..<n + 1] }\n    for i in 3...n {\n\
    \        a.append(i.isMultiple(of: 2) ? 1 + i / 2 : a[i - 1] + a[i - 2] + a[i\
    \ - 3])\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgkhjch0j.swift:20:33: error: cannot convert value of type 'PartialRangeUpTo<Int>'\
    \ to expected argument type 'Int'\n    guard n > 2 else { return a[..<n + 1] }\n\
    \                                ^\n/tmp/tmpgkhjch0j.swift:20:32: error: cannot\
    \ convert return expression of type 'Int' to return type '[Int]'\n    guard n\
    \ > 2 else { return a[..<n + 1] }\n                              ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b209ae78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b209ab6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b209ab6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b209ab6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b209ab6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b209a96ee83 <unavailable> + 188035

    6    tmp5dl252yg                        0x000055e610556480 <unavailable> + 9344

    7    tmp5dl252yg                        0x000055e61055553b <unavailable> + 5435

    8    libc.so.6                          0x00002b209b064460 __libc_start_main +
    245

    9    tmp5dl252yg                        0x000055e610555259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(triHelper(n: i))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9al9nlvm.swift:21:23: error: cannot find 'triHelper' in scope\n\
    \        result.append(triHelper(n: i))\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    var result = [Int](repeating: 0, count: n +\
    \ 1)\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else\
    \ {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5a0378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5a006f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5a006f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5a006f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5a006ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae59fe6ee83 <unavailable> + 188035

    6    tmpd7m7hmac                        0x000055d417bad56d <unavailable> + 9581

    7    tmpd7m7hmac                        0x000055d417bac54b <unavailable> + 5451

    8    libc.so.6                          0x00002ae5a0564460 __libc_start_main +
    245

    9    tmpd7m7hmac                        0x000055d417bac269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 2\
    \ {\n        return [1, 3]\n    }\n    var sequence = [1, 3, 2]\n    for i in\
    \ 3...n {\n        let value = sequence[i - 1] + sequence[i - 2] + sequence[i\
    \ - 3]\n        sequence.append(value)\n    }\n    return sequence\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp7u9lpt_3/tmp7u9lpt_3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb81d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb81a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb81a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb81a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7u9lpt_3                        0x00005624646605ca <unavailable> + 5578

    5    libc.so.6                          0x00002acb81f86460 __libc_start_main +
    245

    6    tmp7u9lpt_3                        0x0000562464660209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i-1] + result[i-2]\
    \ + result[i-3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmp5drwfzqx/tmp5drwfzqx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d85c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d85906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d85906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d859057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5drwfzqx                        0x00005595fae335ca <unavailable> + 5578

    5    libc.so.6                          0x00002b0d85dfb460 __libc_start_main +
    245

    6    tmp5drwfzqx                        0x00005595fae33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var fib:\
    \ [Int] = [1, 3, 2]\n    if n <= 2 {\n        return Array(fib[0...n])\n    }\n\
    \    for _ in 2...n {\n        let sum = fib[0] + fib[1] + fib[2]\n        fib.removeFirst()\n\
    \        fib.append(sum)\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzkh_x1_h/tmpzkh_x1_h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba41a4cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba41a1c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba41a1c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba41a1c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkh_x1_h                        0x000055fac471e85a <unavailable> + 6234

    5    libc.so.6                          0x00002ba41a6bb460 __libc_start_main +
    245

    6    tmpzkh_x1_h                        0x000055fac471e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var sequence\
    \ = [1, 3, 2]\n  for _ in 3...n {\n    let odd = sequence[sequence.count - 1]\
    \ + sequence[sequence.count - 2] + sequence[sequence.count - 3]\n    sequence.append(odd)\n\
    \  }\n  return sequence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpwjuao3xc/tmpwjuao3xc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc7f0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc7edf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc7edf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc7edf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjuao3xc                        0x000055dd78cc261a <unavailable> + 5658

    5    libc.so.6                          0x00002abc7f2e7460 __libc_start_main +
    245

    6    tmpwjuao3xc                        0x000055dd78cc2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tif n == 0\
    \ {\n\t\treturn [1]\n\t} else if n == 1 {\n\t\treturn [1, 3]\n\t} else if n ==\
    \ 2 {\n\t\treturn [1, 3, 2]\n\t}\n\tvar arr = [1, 3, 2]\n\tfor i in 3...n {\n\t\
    \tarr.append(i % 2 == 0 ? 1 + i / 2 : arr[i - 1] + arr[i - 2] + arr[i - 3])\n\t\
    }\n\treturn arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpexi1la4b/tmpexi1la4b.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868c31ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b868c011b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b868c011988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b868c0107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexi1la4b                        0x0000560c143245ca <unavailable> + 5578

    5    libc.so.6                          0x00002b868c506460 __libc_start_main +
    245

    6    tmpexi1la4b                        0x0000560c14324209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var res:\
    \ [Int] = [1, 3, 2]\n    if n <= 2 {\n        return Array(res[0...n])\n    }\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            res.append(1 + i /\
    \ 2)\n        } else {\n            res.append(res[i - 1] + res[i - 2] + res[i\
    \ + 1])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c6b222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c6af19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4c6af19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4c6af1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4c6af18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4c6ad18e83 <unavailable> + 188035

    6    tmpla2q3_dr                        0x0000565270af184f <unavailable> + 10319

    7    tmpla2q3_dr                        0x0000565270af06db <unavailable> + 5851

    8    libc.so.6                          0x00002b4c6b40e460 __libc_start_main +
    245

    9    tmpla2q3_dr                        0x0000565270af03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0\
    \ {\n        return []\n    }\n    var result = [1, 3, 2]\n    if n == 0 {\n \
    \       return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n   \
    \ if n == 2 {\n        return [1, 3, 2]\n    }\n    for i in 3...n {\n       \
    \ if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n  \
    \          result.append(result[i - 1] + result[i - 2] + result[i + 1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d39409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d39100561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d39100286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d3910013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d390ffbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d38effe83 <unavailable> + 188035

    6    tmpj0j5fegd                        0x000056254105955f <unavailable> + 9567

    7    tmpj0j5fegd                        0x00005625410584eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0d395f5460 __libc_start_main +
    245

    9    tmpj0j5fegd                        0x0000562541058209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n >=\
    \ 0 else { return [] }\n  if n == 0 { return [1] }\n  var arr = [1, 3, 2]\n  for\
    \ _ in 3...n {\n    let r = arr[0] + arr[1] + arr[2]\n    arr.removeFirst()\n\
    \    arr.append(r)\n  }\n  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpna1wt47o/tmpna1wt47o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ed62d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ed5fcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ed5fca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ed5fc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna1wt47o                        0x000055bbc68b066a <unavailable> + 5738

    5    libc.so.6                          0x00002b2ed64bf460 __libc_start_main +
    245

    6    tmpna1wt47o                        0x000055bbc68b02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return tribonacci(n:\
    \ n, [1, 3, 2])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5z56q1i9.swift:19:12: error: cannot find 'tribonacci' in scope\n\
    \    return tribonacci(n: n, [1, 3, 2])\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [0]\n    } else if n == 1 {\n        return [1, 3]\n   \
    \ } else if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b543e10dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543de04561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b543de04286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b543de0413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b543de03bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b543dc03e83 <unavailable> + 188035

    6    tmpqecqha4n                        0x00005594bd9b34ee <unavailable> + 9454

    7    tmpqecqha4n                        0x00005594bd9b24eb <unavailable> + 5355

    8    libc.so.6                          0x00002b543e2f9460 __libc_start_main +
    245

    9    tmpqecqha4n                        0x00005594bd9b2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    } else if n == 1 {\n        return [1, 3]\n   \
    \ } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n        var triArray\
    \ = [1, 3, 2]\n        for i in 3...n {\n            if i % 2 == 0 {\n       \
    \         triArray.append(1 + i / 2)\n            } else {\n                triArray.append(triArray[i\
    \ - 1] + triArray[i - 2] + triArray[i + 1])\n            }\n        }\n      \
    \  return triArray\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aea1b901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea1b5f8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea1b5f8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea1b5f813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea1b5f7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aea1b3f7e83 <unavailable> + 188035

    6    tmp0wuv07q3                        0x000055c5baefd4ee <unavailable> + 9454

    7    tmp0wuv07q3                        0x000055c5baefc4eb <unavailable> + 5355

    8    libc.so.6                          0x00002aea1baed460 __libc_start_main +
    245

    9    tmp0wuv07q3                        0x000055c5baefc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return (0...n).map\
    \ { tri(n: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyxdbfett.swift:19:26: error: cannot convert value of type '[Int]'\
    \ to closure result type 'Int'\n    return (0...n).map { tri(n: $0) }\n      \
    \                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            arr.append(1)\n\
    \        } else if i == 1 {\n            arr.append(3)\n        } else if i ==\
    \ 2 {\n            arr.append(2)\n        } else if i % 2 == 0 {\n           \
    \ arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpt6jdjv94/tmpt6jdjv94.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba813f74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba813c6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba813c6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba813c6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6jdjv94                        0x0000564a1d1aa61a <unavailable> + 5658

    5    libc.so.6                          0x00002ba814160460 __libc_start_main +
    245

    6    tmpt6jdjv94                        0x0000564a1d1aa259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979509
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(result[0..<n + 1])\n    }\
    \ else {\n        for i in 3...n {\n            result.append(i % 2 == 0 ? (1\
    \ + i / 2) : result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpll_ow79b/tmpll_ow79b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9615abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9612a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9612a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9612a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll_ow79b                        0x000055bceea4871a <unavailable> + 5914

    5    libc.so.6                          0x00002ad961797460 __libc_start_main +
    245

    6    tmpll_ow79b                        0x000055bceea48359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result:\
    \ [Int] = []\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0wde2kzv/tmp0wde2kzv.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b58bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b588f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b588f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b588f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wde2kzv                        0x0000556f6d8d35ca <unavailable> + 5578

    5    libc.so.6                          0x00002b4b58de9460 __libc_start_main +
    245

    6    tmp0wde2kzv                        0x0000556f6d8d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979510
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  switch n {\n\
    \  case 0:\n    return [1]\n  case 1:\n    return [1, 3]\n  case 2:\n    return\
    \ [1, 3, 2]\n  default:\n    let seq = tri(n: n - 1)\n    let last = seq.last!\n\
    \    let lastButOne = seq[seq.count - 2]\n    let lastButTwo = seq[seq.count -\
    \ 3]\n    let next = last + lastButOne + lastButTwo\n    var result = seq\n  \
    \  result.append(next)\n    return result\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpnubr3z_t/tmpnubr3z_t.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba020767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba02045eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba02045e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba02045d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnubr3z_t                        0x000055e8398825ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba020953460 __libc_start_main +
    245

    6    tmpnubr3z_t                        0x000055e839882209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var arr =\
    \ [1, 3, 2]\n  for i in 1...n {\n    let num = (i % 2 == 0) ? arr[i - 1] + arr[i\
    \ - 2] + 1 + i / 2 : arr[i - 1] + arr[i - 2] + arr[i - 3]\n    arr.append(num)\n\
    \  }\n  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c4cdf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c4caed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2c4caed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2c4caed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2c4caecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2c4c8ece83 <unavailable> + 188035

    6    tmp8h3wtd1f                        0x0000559ef98a048e <unavailable> + 9358

    7    tmp8h3wtd1f                        0x0000559ef989f4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b2c4cfe2460 __libc_start_main +
    245

    9    tmp8h3wtd1f                        0x0000559ef989f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var a = [1, 3, 2]\n\
    \    var r = [Int]()\n    for _ in 0...n {\n        r.append(a[0])\n        let\
    \ new = a[0] + a[1] + a[2]\n        a.remove(at: 0)\n        a.append(new)\n \
    \   }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpli3_ln5i/tmpli3_ln5i.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd0bb14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd0b80bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd0b80b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd0b80a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpli3_ln5i                        0x00005647966c967a <unavailable> + 5754

    5    libc.so.6                          0x00002acd0bd00460 __libc_start_main +
    245

    6    tmpli3_ln5i                        0x00005647966c92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n\
    \ {\n    case 0:\n        return [1]\n    case 1:\n        return [1, 3]\n   \
    \ case 2:\n        return [1, 3, 2]\n    default:\n        var result = [1, 3,\
    \ 2]\n        for i in 3...n {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n        }\n        return result\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpp2payu5j/tmpp2payu5j.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe12ab7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe127aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe127ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe127ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2payu5j                        0x000055c8e76185ca <unavailable> + 5578

    5    libc.so.6                          0x00002afe12ca3460 __libc_start_main +
    245

    6    tmpp2payu5j                        0x000055c8e7618209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4a__8ohd/tmp4a__8ohd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4a__8ohd                        0x000055deb091d38a <unavailable> + 5002

    5    libc.so.6                          0x00002b6a72fa8460 __libc_start_main +
    245

    6    tmp4a__8ohd                        0x000055deb091cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979508
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar result\
    \ = [Int]()\n\tvar x = 0\n\tvar y = 1\n\tvar z = 2\n\tvar w = 0\n\tfor _ in 0...n\
    \ {\n\t\tif z == 0 {\n\t\t\tresult.append(3)\n\t\t} else if z % 2 == 0 {\n\t\t\
    \tresult.append(z / 2 + 1)\n\t\t} else {\n\t\t\tw = x + y + z\n\t\t\tresult.append(w)\n\
    \t\t\tx = y\n\t\t\ty = z\n\t\t\tz = w\n\t\t}\n\t\tz += 1\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphvi3_q_4/tmphvi3_q_4.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbf4865c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbf455cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbf455c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbf455b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvi3_q_4                        0x00005592531d05ca <unavailable> + 5578

    5    libc.so.6                          0x00002abbf4a51460 __libc_start_main +
    245

    6    tmphvi3_q_4                        0x00005592531d0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var result\
    \ = [1, 3, 2]\n  if n == 0 {\n    return [1]\n  } else if n == 1 {\n    return\
    \ [1, 3]\n  } else if n == 2 {\n    return [1, 3, 2]\n  }\n  for i in 3...n {\n\
    \    result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbkcz5y02/tmpbkcz5y02.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7856e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7856b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7856b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7856b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkcz5y02                        0x000055e7b57405ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7857038460 __libc_start_main +
    245

    6    tmpbkcz5y02                        0x000055e7b5740209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979511
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n\
    \ > 1 else { return [1, 3] }\n    var tri = [1, 3, 2]\n    for _ in 3...n {\n\
    \        let lastIndex = tri.count - 1\n        tri.append(tri[lastIndex - 2]\
    \ + tri[lastIndex - 1] + tri[lastIndex])\n    }\n    return tri\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpigyvqarv/tmpigyvqarv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac996865c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac99655cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac99655c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac99655b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigyvqarv                        0x0000563e0ae6461a <unavailable> + 5658

    5    libc.so.6                          0x00002ac996a51460 __libc_start_main +
    245

    6    tmpigyvqarv                        0x0000563e0ae64259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979511
