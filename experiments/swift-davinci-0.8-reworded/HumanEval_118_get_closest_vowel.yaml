name: HumanEval_118_get_closest_vowel
language: swift
prompt: "\n/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
  \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\n\
  /// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
  \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"\
  u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
  \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
  \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"Above\") == \"o\")"
completions: ["    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var count = word.count - 1\n    var word = word\n    var word2 = String(word.reversed())\n\
    \    var i = 0\n    while i < word2.count {\n        let c = word2[i]\n      \
    \  let d = word2[i+1]\n        if consonants.contains(c) && vowels.contains(d)\
    \ {\n            return String(d)\n        }\n        i += 1\n    }\n    return\
    \ \"\"", "    if word.count < 3 {\n        return \"\"\n    }\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    let vowels = \"aeiouAEIOU\"\
    \n    var i = word.count - 1\n    var last_vowel = -1\n    var last_consonant\
    \ = -1\n    while i >= 0 {\n        if let _ = vowels.range(of: String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n            last_vowel = i\n        } else if let _ = consonants.range(of:\
    \ String(word[word.index(word.startIndex, offsetBy: i)])) {\n            last_consonant\
    \ = i\n            break\n        }\n        i -= 1\n    }\n    if last_vowel\
    \ == -1 || last_consonant == -1 {\n        return \"\"\n    }\n    i = last_consonant\
    \ - 1\n    while i >= 0 {\n        if let _ = vowels.range(of: String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n            last_vowel = i\n            break\n        }\
    \ else if let _ = consonants.range(of: String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n            last_consonant = i\n        }\n        i -= 1\n\
    \    }\n    if last_vowel == -1 || last_consonant == -1 {\n        return \"\"\
    \n    }\n    if last_vowel > last_consonant {\n        return String(word[word.index(word.startIndex,\
    \ offsetBy: last_vowel)])\n    }\n    return \"\"", "    var vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    var first_vowel = \"\"\n    var second_vowel\
    \ = \"\"\n    for character in word.characters {\n        if vowels.contains(String(character))\
    \ && first_vowel == \"\" {\n            first_vowel = String(character)\n    \
    \    } else if vowels.contains(String(character)) && first_vowel != \"\" {\n \
    \           second_vowel = String(character)\n        }\n    }\n    return second_vowel",
  "    // TODO: Write implementation here\n    return \"\"", "    let vowels = \"\
    aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let characterWord\
    \ = Array(word)\n    var index = 0\n    var result = \"\"\n    while index < characterWord.count\
    \ {\n        if vowels.contains(characterWord[index]) {\n            if index\
    \ < characterWord.count - 1 {\n                if consonants.contains(characterWord[index\
    \ + 1]) {\n                    result = String(characterWord[index])\n       \
    \             break\n                }\n            }\n        }\n        index\
    \ += 1\n    }\n    return result", "    let vowels = \"AEIOU\"\n    let consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    var index: String.Index?\n    var index1: String.Index?\n\
    \    var last_index: String.Index?\n    var i = 0\n    while i < word.count {\n\
    \        let index_word = word.index(word.startIndex, offsetBy: i)\n        if\
    \ consonants.contains(word[index_word]) {\n            if index == nil {\n   \
    \             index = index_word\n            } else {\n                index1\
    \ = index_word\n                break\n            }\n        }\n        last_index\
    \ = index_word\n        i += 1\n    }\n    if index == nil {\n        return \"\
    \"\n    }\n    if index1 == nil {\n        index1 = last_index!\n    }\n    i\
    \ = 0\n    var index_word = index!\n    var l = 1\n    while i < word.count {\n\
    \        index_word = word.index(index!, offsetBy: l)\n        if vowels.contains(word[index_word])\
    \ {\n            break\n        }\n        index_word = word.index(index!, offsetBy:\
    \ -l)\n        if vowels.contains(word[index_word]) {\n            break\n   \
    \     }\n        i += 1\n        l += 1\n    }\n    if word.distance(from: index_word,\
    \ to: index1!) > word.distance(from: index_word, to: index!) {\n        return\
    \ \"\"\n    }\n    return String(word[index_word])", "    let chars = Array(word)\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel = \"\"\n\
    \    var cons = 0\n    var con = 0\n    for i in chars.indices {\n        if vowels.contains(String(chars[i]))\
    \ {\n            cons = cons + 1\n            if cons == 2 {\n               \
    \ vowel = String(chars[i-1])\n                break\n            }\n        }\
    \ else {\n            con = con + 1\n        }\n    }\n    if vowel == \"\" {\n\
    \        return \"\"\n    } else {\n        return vowel\n    }", "\tlet vowels\
    \ = \"aeiou\"\n\tlet result = word.characters.enumerated().reversed().reduce(\"\
    \") { (res, arg1) -> String in\n\t\tlet (index, char) = arg1\n\t\tlet isConsonant\
    \ = !vowels.contains(char)\n\t\treturn res != \"\" ? res : isConsonant ? \"\"\
    \ : word.substring(with: word.index(word.startIndex, offsetBy: index)..<word.index(word.startIndex,\
    \ offsetBy: index + 1))\n\t}\n\treturn result", "    // Your code here\n    var\
    \ result = \"\"\n    let vowels = \"AEIOU\"\n    var vowelIndex = -1\n    var\
    \ consonantIndex = -1\n    for i in word.indices.reversed() {\n        let char\
    \ = word[i]\n        if consonantIndex < 0 {\n            if vowels.contains(char)\
    \ {\n                vowelIndex = i.encodedOffset\n            }\n        } else\
    \ {\n            if !vowels.contains(char) {\n                consonantIndex =\
    \ i.encodedOffset\n                if vowelIndex - consonantIndex > 1 {\n    \
    \                result = String(word[word.index(word.startIndex, offsetBy: vowelIndex)])\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    if word.count < 3 {\n        return \"\"\n    }\n    var\
    \ closest_vowel: String = \"\"\n    var diff: Int = 0\n    var temp: Int = 0\n\
    \    for i in (0..<word.count-1).reversed() {\n        if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i+1)])) {\n            for j in i+1..<word.count {\n             \
    \   if vowels.contains(String(word[word.index(word.startIndex, offsetBy: j)]))\
    \ {\n                    temp = j - i\n                    if temp < diff || diff\
    \ == 0 {\n                        diff = temp\n                        closest_vowel\
    \ = String(word[word.index(word.startIndex, offsetBy: j)])\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return closest_vowel",
  "    guard word.count > 1 else { return \"\" }\n    guard word.count > 2 else {\
    \ return word.is_vowel ? word : \"\" }\n    var vowels = \"\"\n    var consonants\
    \ = \"\"\n    for character in word {\n        if character.is_vowel {\n     \
    \       vowels.append(character)\n        } else {\n            consonants.append(character)\n\
    \        }\n    }\n    for character in consonants.reversed() {\n        if let\
    \ vowelIndex = vowels.lastIndex(of: character) {\n            return String(vowels[vowelIndex])\n\
    \        }\n    }\n    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let letters = word.characters.map { String($0) }\n    var closest_vowel\
    \ = \"\"\n    for i in (0..<letters.count).reversed() {\n        if vowels.contains(letters[i])\
    \ {\n            closest_vowel = letters[i]\n            if i+1 < letters.count\
    \ && !vowels.contains(letters[i+1]) {\n                break\n            }\n\
    \        }\n    }\n    return closest_vowel", "    // your code here\n    return\
    \ \"\"", '    return ""', "    var vowels = Set<Character>()\n    vowels.insert(\"\
    a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"\
    o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"A\")\n    vowels.insert(\"\
    E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"O\")\n    vowels.insert(\"\
    U\")\n    var strArray = Array(word)\n    var index = strArray.count - 1\n   \
    \ var flag = false\n    var indexVowel = 0\n    for char in strArray {\n     \
    \   if vowels.contains(char) {\n            if flag {\n                return\
    \ String(char)\n            }\n            indexVowel = index\n        } else\
    \ {\n            if indexVowel != 0 {\n                flag = true\n         \
    \   }\n        }\n        index -= 1\n    }\n    return \"\"", "    let vowels\
    \ = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let word =\
    \ word.lowercased()\n    var vowel_count = 0\n    for character in word {\n  \
    \      if vowels.contains(character) {\n            vowel_count += 1\n       \
    \ }\n    }\n    if vowel_count == 0 {\n        return \"\"\n    }\n    for i in\
    \ stride(from: (word.count - 1), through: 0, by: -1) {\n        if consonants.contains(word[i])\
    \ {\n            for j in stride(from: (i - 1), through: 0, by: -1) {\n      \
    \          if vowels.contains(word[j]) {\n                    return String(word[j])\n\
    \                }\n            }\n        }\n    }\n    return \"\"", "    var\
    \ vowels = Set<Character>()\n    vowels.insert(\"a\")\n    vowels.insert(\"e\"\
    )\n    vowels.insert(\"i\")\n    vowels.insert(\"o\")\n    vowels.insert(\"u\"\
    )\n    vowels.insert(\"A\")\n    vowels.insert(\"E\")\n    vowels.insert(\"I\"\
    )\n    vowels.insert(\"O\")\n    vowels.insert(\"U\")\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            return String(char)\n   \
    \     }\n    }\n    return \"\"", "\tvar first_consonant = false, closest_vowel:\
    \ Character? = nil, closest_index = 0\n\tlet vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\tfor (index, character) in word.reversed().enumerated() {\n\t\t\
    if !vowels.contains(String(character).lowercased()) {\n\t\t\tif !first_consonant\
    \ {\n\t\t\t\tfirst_consonant = true\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\
    \t} else {\n\t\t\tif first_consonant {\n\t\t\t\tclosest_vowel = character\n\t\t\
    \t\tclosest_index = index\n\t\t\t}\n\t\t}\n\t}\n\treturn String(closest_vowel\
    \ ?? \"\")", '    return ""', "    var result = \"\"\n    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var consonants: Set<Character> =\
    \ []\n    for char in word {\n        if !vowels.contains(char) {\n          \
    \  consonants.insert(char)\n        }\n    }\n    var pvowel = \"\"\n    var nvowel\
    \ = \"\"\n    var pcon = \"\"\n    var ncon = \"\"\n    for char in word {\n \
    \       if consonants.contains(char) {\n            if pvowel != \"\" {\n    \
    \            ncon = String(char)\n                break\n            }\n     \
    \       pcon = String(char)\n        } else {\n            if pcon != \"\" {\n\
    \                pvowel = String(char)\n            }\n        }\n    }\n    if\
    \ pvowel != \"\" && ncon != \"\" {\n        result = pvowel\n    }\n    return\
    \ result", "    let vowel_set = Set(\"aeiouAEIOU\")\n    let consonant_set = Set(\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    let char_arr = Array(word)\n\
    \    for i in (0...char_arr.count-1).reversed() {\n        if i != 0 && vowel_set.contains(char_arr[i])\
    \ && consonant_set.contains(char_arr[i-1]) {\n            return String(char_arr[i])\n\
    \        }\n    }\n    return \"\"", "    var vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var vowelFinder: String = \"\"\n    var vowelsArray:\
    \ [Character] = []\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowelFinder = \"\\(char)\"\n            vowelsArray.append(char)\n\
    \        }\n    }\n    if vowelFinder == \"\" {\n        return \"\"\n    }\n\
    \    else {\n        return String(vowelsArray.last!)\n    }", "    // your code\
    \ here\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var left: String?\n\
    \    var right: String?\n    var vowel = \"\"\n    for char in word.reversed()\
    \ {\n        if let idx = vowels.firstIndex(of: String(char)) {\n            vowel\
    \ = String(char)\n            break\n        }\n        if left == nil {\n   \
    \         left = String(char)\n        } else {\n            right = left\n  \
    \          left = String(char)\n        }\n    }\n    if left == nil || right\
    \ == nil {\n        return \"\"\n    }\n    return vowel", "    let vowels = \"\
    AEIOUaeiou\"\n    var counter = word.count - 1\n    var result = \"\"\n    while\
    \ counter > 0 {\n        let index = word.index(word.startIndex, offsetBy: counter)\n\
    \        let char = word[index]\n        if vowels.contains(char) {\n        \
    \    result = String(char)\n            break\n        }\n        counter -= 1\n\
    \    }\n    return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let word = word.lowercased()\n    for (index, character) in word.enumerated()\
    \ {\n        if (index == word.count - 1) {\n            return \"\"\n       \
    \ }\n        if (vowels.contains(String(character))) {\n            if (vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]))) {\n                return \"\"\n            }\n   \
    \         return String(character)\n        }\n    }\n    return \"\"", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    if vowels.contains(word) {\n\
    \        return \"\"\n    }\n    var word = word\n    while word.count > 0 {\n\
    \        let lastChar = word.last!\n        word.removeLast()\n        if vowels.contains(String(lastChar))\
    \ {\n            return \"\"\n        }\n        let n = word.count\n        for\
    \ i in 0..<n {\n            let char = word[word.index(word.startIndex, offsetBy:\
    \ i)]\n            if vowels.contains(String(char)) {\n                return\
    \ String(char)\n            }\n        }\n    }\n    return \"\"", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let cons = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel = \"\"\n   \
    \ var counter = word.count - 1\n    while counter >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: counter)])\n        if !vowels.contains(char) && !cons.contains(char)\
    \ {\n            counter -= 1\n            continue\n        }\n        if cons.contains(char)\
    \ {\n            for i in (0...counter).reversed() {\n                let char\
    \ = String(word[word.index(word.startIndex, offsetBy: i)])\n                if\
    \ vowels.contains(char) {\n                    vowel = char\n                \
    \    break\n                }\n            }\n            break\n        }\n \
    \       counter -= 1\n    }\n    return vowel", "    var vowel_list = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    let word_list = Array(word)\n    var vowel\
    \ = \"\"\n    for i in 0..<word_list.count {\n        if (vowel_list.contains(String(word_list[i])))\
    \ {\n            if (i == 0) {\n                continue\n            }\n    \
    \        if (i == word_list.count - 1) {\n                if (!vowel_list.contains(String(word_list[i\
    \ - 1]))) {\n                    vowel = String(word_list[i])\n              \
    \  }\n                continue\n            }\n            if (!vowel_list.contains(String(word_list[i\
    \ - 1])) && !vowel_list.contains(String(word_list[i + 1]))) {\n              \
    \  vowel = String(word_list[i])\n            }\n        }\n    }\n    return vowel",
  "    let vowels = \"aeiou\"\n    var vowel = \"\"\n    for (index, char) in word.enumerated()\
    \ {\n        if (vowels.contains(char)) {\n            vowel = String(char)\n\
    \            let c = word.index(word.startIndex, offsetBy: index)\n          \
    \  if (word[word.startIndex ..< c].contains(\"a\") || word[word.startIndex ..<\
    \ c].contains(\"e\") || word[word.startIndex ..< c].contains(\"i\") || word[word.startIndex\
    \ ..< c].contains(\"o\") || word[word.startIndex ..< c].contains(\"u\")) {\n \
    \               vowel = \"\"\n            }\n            if (word[c ..< word.endIndex].contains(\"\
    a\") || word[c ..< word.endIndex].contains(\"e\") || word[c ..< word.endIndex].contains(\"\
    i\") || word[c ..< word.endIndex].contains(\"o\") || word[c ..< word.endIndex].contains(\"\
    u\")) {\n                vowel = \"\"\n            }\n        }\n    }\n    return\
    \ vowel", "    let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    let numbers = \"0123456789\"\n    var vowels_array: [Character] = []\n \
    \   var consonants_array: [Character] = []\n    var numbers_array: [Character]\
    \ = []\n    for i in vowels {\n        vowels_array.append(i)\n    }\n    for\
    \ i in consonants {\n        consonants_array.append(i)\n    }\n    for i in numbers\
    \ {\n        numbers_array.append(i)\n    }\n    var word_array: [Character] =\
    \ []\n    for i in word {\n        word_array.append(i)\n    }\n    var vowel_index:\
    \ Int = -1\n    var first_vowel_index: Int = -1\n    var second_vowel_index: Int\
    \ = -1\n    var consonant_index: Int = -1\n    var first_consonant_index: Int\
    \ = -1\n    var second_consonant_index: Int = -1\n    for i in (0..<word_array.count).reversed()\
    \ {\n        if consonants_array.contains(word_array[i]) && !numbers_array.contains(word_array[i])\
    \ {\n            consonant_index = i\n            if second_consonant_index ==\
    \ -1 {\n                second_consonant_index = i\n            } else {\n   \
    \             first_consonant_index = i\n            }\n        }\n        if\
    \ vowels_array.contains(word_array[i]) && !numbers_array.contains(word_array[i])\
    \ {\n            vowel_index = i\n            if second_vowel_index == -1 {\n\
    \                second_vowel_index = i\n            } else {\n              \
    \  first_vowel_index = i\n            }\n        }\n    }\n    if first_vowel_index\
    \ == -1 {\n        return \"\"\n    }\n    if second_consonant_index == -1", " \
    \   let vowels = \"aeiou\"\n    let wordChar = Array(word)\n    var temp: String\
    \ = \"\"\n    var index = wordChar.count - 1\n    while index >= 0 {\n       \
    \ if vowels.contains(wordChar[index]) {\n            temp = String(wordChar[index])\n\
    \            index -= 1\n            if index >= 0 {\n                if !vowels.contains(wordChar[index])\
    \ {\n                    return temp\n                }\n            }\n     \
    \   } else {\n            index -= 1\n        }\n    }\n    return \"\"", "  \
    \  // TODO: Write some code to solve this coding problem\n    return \"\"", "\t\
    // TODO: Write some code to solve this coding challenge\n\treturn \"\"", "   \
    \ let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n  \
    \  var vowelIndex = -1\n    for i in (1..<word.count).reversed() {\n        let\
    \ character = String(word[word.index(word.startIndex, offsetBy: i)])\n       \
    \ if vowels.contains(character) {\n            vowelIndex = i\n            break\n\
    \        }\n    }\n    if vowelIndex > 0 {\n        let left = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex - 1)])\n        let right = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex + 1)])\n        if !vowels.contains(left) && !vowels.contains(right)\
    \ {\n            result = String(word[word.index(word.startIndex, offsetBy: vowelIndex)])\n\
    \        }\n    }\n    return result", "\tlet vowels = \"aeiou\"\n\tlet consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n\t\n\tvar vowelQueue = [Character]()\n\tvar consonantQueue\
    \ = [Character]()\n\tvar result = [Character]()\n\t\n\tfor (index, letter) in\
    \ word.enumerated() {\n\t\tif vowels.contains(letter) {\n\t\t\tvowelQueue.append(letter)\n\
    \t\t} else if consonants.contains(letter) {\n\t\t\tconsonantQueue.append(letter)\n\
    \t\t}\n\t\tif index == word.count - 1 {\n\t\t\tif vowelQueue.count == 0 || consonantQueue.count\
    \ == 0 {\n\t\t\t\treturn \"\"\n\t\t\t}\n\t\t\tvar minAbsVal = abs(vowelQueue.count\
    \ - consonantQueue.count)\n\t\t\tfor i in 0..<vowelQueue.count {\n\t\t\t\tlet\
    \ absVal = abs(vowelQueue.count - consonantQueue.count - i)\n\t\t\t\tif absVal\
    \ <= minAbsVal {\n\t\t\t\t\tminAbsVal = absVal\n\t\t\t\t\tresult.append(vowelQueue[i])\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn String(result)", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let split_string = word.lowercased().characters.map\
    \ { String($0) }\n    let index = split_string.index(of: \" \")\n    if index\
    \ != nil {\n        return \"\"\n    }\n    let reversed_word = String(split_string.reversed())\n\
    \    var results = \"\"\n    for i in 1..<reversed_word.characters.count {\n \
    \       let range = Range(uncheckedBounds: (lower: reversed_word.characters.index(reversed_word.startIndex,\
    \ offsetBy: i), upper: reversed_word.characters.index(reversed_word.startIndex,\
    \ offsetBy: i + 1)))\n        if vowels.contains(reversed_word.substring(with:\
    \ range)) && !vowels.contains(reversed_word.substring(with: Range(uncheckedBounds:\
    \ (lower: reversed_word.characters.index(reversed_word.startIndex, offsetBy: i\
    \ - 1), upper: reversed_word.characters.index(reversed_word.startIndex, offsetBy:\
    \ i))))) && !vowels.contains(reversed_word.substring(with: Range(uncheckedBounds:\
    \ (lower: reversed_word.characters.index(reversed_word.startIndex, offsetBy: i\
    \ + 1), upper: reversed_word.characters.index(reversed_word.startIndex, offsetBy:\
    \ i + 2))))) {\n            results = reversed_word.substring(with: range)\n \
    \           break\n        }\n    }\n    return results", "    var closest_vowel\
    \ = \"\"\n    var dist_to_vowel = 999\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var dist_to_last_consonant = 999\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for i\
    \ in 0..<word.count {\n        if(vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased())) {\n            dist_to_vowel = word.count - i\
    \ - 1\n            if(dist_to_vowel < dist_to_last_consonant) {\n            \
    \    closest_vowel = String(word[word.index(word.startIndex, offsetBy: i)])\n\
    \            }\n        }\n        if(consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased())) {\n            dist_to_last_consonant = word.count\
    \ - i - 1\n        }\n    }\n    return closest_vowel", "    var vowels = [String]()\n\
    \    for char in word {\n        if \"AEIOUaeiou\".contains(char) {\n        \
    \    vowels.append(String(char))\n        }\n    }\n    if vowels.count == 0 {\n\
    \        return \"\"\n    }\n    if vowels.count == 1 {\n        return vowels[0]\n\
    \    }\n    let first = vowels[0]\n    let last = vowels[vowels.count - 1]\n \
    \   return first == last ? first : last", '    return ""', "    let vowels = \"\
    aeiouAEIOU\"\n    var closest: String = \"\"\n    for (i, c) in word.enumerated()\
    \ {\n        let c = String(c)\n        if vowels.contains(c) {\n            if\
    \ let prev = word.index(word.startIndex, offsetBy: i - 1, limitedBy: word.startIndex),\n\
    \                let next = word.index(word.startIndex, offsetBy: i + 1, limitedBy:\
    \ word.endIndex) {\n                let prev_c = String(word[prev])\n        \
    \        let next_c = String(word[next])\n                if !vowels.contains(prev_c)\
    \ && !vowels.contains(next_c) {\n                    closest = c\n           \
    \     }\n            }\n        }\n    }\n    return closest", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let word_array = Array(word)\n\
    \    var prev_vowel: String = \"\"\n    for i in (0..<word_array.count).reversed()\
    \ {\n        if vowels.contains(String(word_array[i]).lowercased()) {\n      \
    \      if prev_vowel == \"\" {\n                prev_vowel = String(word_array[i])\n\
    \            } else {\n                if consonants.contains(String(word_array[i-1]).lowercased())\
    \ {\n                    return prev_vowel\n                }\n            }\n\
    \        }\n    }\n    return \"\"", "    let vowels = \"AEIOUaeiou\"\n    let\
    \ consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    var result\
    \ = \"\"\n    for i in (0..<word.count-1).reversed() {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if consonants.contains(char) {\n            for j in\
    \ (i+1..<word.count).reversed() {\n                let char2 = word[word.index(word.startIndex,\
    \ offsetBy: j)]\n                if vowels.contains(char2) {\n               \
    \     result = String(char2)\n                    break\n                }\n \
    \           }\n            break\n        }\n    }\n    return result", "    let\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiou\"\n    var\
    \ new_word = \"\"\n    for letter in word {\n        if !consonants.contains(letter)\
    \ && !vowels.contains(letter) {\n            return \"\"\n        }\n        new_word.append(letter)\n\
    \    }\n    let split_by_consonants = new_word.split(separator: \"a\")\n    if\
    \ split_by_consonants.count == 1 {\n        return \"\"\n    }\n    let last_consonant_index\
    \ = split_by_consonants.count - 1\n    let last_consonant = String(split_by_consonants[last_consonant_index])\n\
    \    let split_by_vowels = last_consonant.split(separator: \"a\")\n    if split_by_vowels.count\
    \ == 1 {\n        return \"\"\n    }\n    return String(split_by_vowels[1].first!)",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowelIndex: Int?\n\
    \    let chars = Array(word)\n    for i in stride(from: chars.count - 1, through:\
    \ 0, by: -1) {\n        if vowels.contains(String(chars[i])) {\n            vowelIndex\
    \ = i\n            break\n        }\n    }\n    if vowelIndex == nil {\n     \
    \   return \"\"\n    }\n    for i in stride(from: vowelIndex! - 1, through: 0,\
    \ by: -1) {\n        if !vowels.contains(String(chars[i])) {\n            return\
    \ String(chars[vowelIndex!])\n        }\n    }\n    return \"\"", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var output: String = \"\"\n    for\
    \ (index, char) in word.lowercased().reversed().enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index == word.count - 1 {\n                break\n       \
    \     }\n            if vowels.contains(String(word[word.index(word.endIndex,\
    \ offsetBy: -(index + 2))])) {\n                continue\n            }\n    \
    \        if index == 0 {\n                output = String(char)\n            \
    \    break\n            }\n            output = String(char)\n            break\n\
    \        }\n    }\n    return output", "    // Find the longest vowel substring\
    \ and return the last character\n    var longest_vowel_substring = \"\"\n    var\
    \ current_vowel_substring = \"\"\n    var prev_char_is_consonant = false\n   \
    \ for char in word {\n        if is_vowel(char: char) {\n            current_vowel_substring.append(char)\n\
    \            if prev_char_is_consonant {\n                if current_vowel_substring.count\
    \ > longest_vowel_substring.count {\n                    longest_vowel_substring\
    \ = current_vowel_substring\n                }\n                current_vowel_substring\
    \ = \"\"\n            }\n        } else {\n            prev_char_is_consonant\
    \ = true\n        }\n    }\n    if longest_vowel_substring.count == 0 {\n    \
    \    return \"\"\n    }\n    return longest_vowel_substring.last!", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let reversed = String(word.reversed())\n\
    \    var match: String = \"\"\n    for i in 0..<reversed.count {\n        for\
    \ vowel in vowels {\n            if reversed[i] == vowel {\n                if\
    \ i < reversed.count - 1 && !vowels.contains(reversed[i + 1]) {\n            \
    \        if i > 0 && !vowels.contains(reversed[i - 1]) {\n                   \
    \     match = String(reversed[i])\n                        break\n           \
    \         }\n                }\n            }\n        }\n    }\n    return String(match.reversed())",
  "    var result = \"\"\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var foundVowel = false\n    var foundConsonant = false\n\
    \    var vowelsDistance = [Int]()\n    var closestVowelDistance = Int.max\n  \
    \  for (index, character) in word.characters.enumerated() {\n        if vowels.contains(String(character).lowercased())\
    \ {\n            foundVowel = true\n            for (vowelIndex, vowelCharacter)\
    \ in word.characters.enumerated() {\n                if consonants.contains(String(vowelCharacter).lowercased())\
    \ {\n                    if vowelIndex > index {\n                        foundConsonant\
    \ = true\n                        if vowelIndex - index < closestVowelDistance\
    \ {\n                            closestVowelDistance = vowelIndex - index\n \
    \                           result = String(character)\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \  }\n    if !foundVowel || !foundConsonant {\n        result = \"\"\n    }\n\
    \    return result", "    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   var temp = word.lowercased()\n    var vowelsIndex = 0\n    var consonantsIndex\
    \ = 1\n    var tempVowels = \"\"\n    var tempConsonants = \"\"\n    var closest\
    \ = \"\"\n    while consonantsIndex < temp.count {\n        if vowels.contains(String(temp[temp.index(temp.startIndex,\
    \ offsetBy: consonantsIndex)])) {\n            tempVowels = String(temp[temp.index(temp.startIndex,\
    \ offsetBy: consonantsIndex)])\n            tempConsonants = String(temp[temp.index(temp.startIndex,\
    \ offsetBy: vowelsIndex)])\n            if consonantsIndex - vowelsIndex > 1 &&\
    \ vowels.contains(tempConsonants) == false {\n                closest = tempVowels\n\
    \                break\n            }\n            vowelsIndex += 1\n        \
    \    consonantsIndex += 1\n        } else {\n            consonantsIndex += 1\n\
    \        }\n    }\n    return closest", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    var result = \"\"\n    var indexOfVowel = -1\n    for (index,\
    \ character) in word.enumerated() {\n        if vowels.contains(String(character))\
    \ {\n            indexOfVowel = index\n            break\n        }\n    }\n \
    \   if indexOfVowel == -1 {\n        return result\n    }\n    for (index, character)\
    \ in word.enumerated() {\n        if vowels.contains(String(character)) {\n  \
    \          if index > indexOfVowel {\n                result = String(character)\n\
    \                indexOfVowel = index\n            }\n        }\n    }\n    return\
    \ result", "    let vowels = \"aeiou\"\n    var vowel_char = \"\"\n    for letter\
    \ in word.lowercased().reversed() {\n        if vowels.contains(letter) {\n  \
    \          vowel_char = String(letter)\n            break\n        }\n    }\n\
    \    return vowel_char", "    let vowels = \"AEIOUaeiou\"\n    let consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    var closest_vowel = \"\
    \"\n    for i in 0..<word.count {\n        let character = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(character) {\n            if consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)]) && i < word.count {\n                closest_vowel = String(character)\n\
    \            }\n        }\n    }\n    return closest_vowel", "    var result =\
    \ \"\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiou\"\
    \n    var left_index = 0\n    for i in stride(from: word.count - 1, through: 0,\
    \ by: -1) {\n        let index = word.index(word.startIndex, offsetBy: i)\n  \
    \      if consonants.contains(word[index]) {\n            left_index = i\n   \
    \         break\n        }\n    }\n    var min_dist = word.count\n    for i in\
    \ stride(from: word.count - 1, through: left_index, by: -1) {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        if vowels.contains(word[index])\
    \ {\n            if i - left_index < min_dist {\n                min_dist = i\
    \ - left_index\n                result = String(word[index])\n            }\n\
    \        }\n    }\n    return result", '    return ""', "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let string = Array(word)\n    var vowel_index:\
    \ Int?\n    for (index, character) in string.enumerated() {\n        let char\
    \ = String(character)\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n            break\n        }\n    }\n    if vowel_index == nil {\n\
    \        return \"\"\n    }\n    var vowel_distance = string.count - vowel_index!\n\
    \    var closest_vowel: String?\n    for (index, character) in string.enumerated()\
    \ {\n        let char = String(character)\n        if vowels.contains(char) {\n\
    \            let distance = string.count - index\n            if distance > vowel_distance\
    \ {\n                vowel_distance = distance\n                closest_vowel\
    \ = char\n            }\n        }\n    }\n    return closest_vowel ?? \"\"",
  "    let vowels = \"AEIOU\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n  \
    \  var result = \"\"\n    var temp = \"\"\n    for char in word.reversed() {\n\
    \        if !vowels.contains(char) && !consonants.contains(char) {\n         \
    \   return \"\"\n        }\n        if vowels.contains(char) {\n            result\
    \ = temp + String(char)\n            temp = \"\"\n        } else {\n         \
    \   temp += String(char)\n        }\n    }\n    return result", "    var copyWord\
    \ = word\n    var closestVowel = \"\"\n    var vowelDictionary = [\"a\": 0, \"\
    e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let empty = \"\"\n    var currentIndex: String.Index\n\
    \    var vowelIndex: String.Index\n    var vowelString: String\n    var distanceFromVowel:\
    \ Int\n    var originalVowelDistance: Int\n    var consonantIndex: String.Index\n\
    \    var consonantString: String\n    var originalConsonantDistance: Int\n   \
    \ var distanceFromConsonant: Int\n    var endOfWord: String.Index\n    var vowelDistance:\
    \ Int\n    var stringDistance: Int\n    var vowelStringDistance: Int\n    var\
    \ greatestDistance: Int\n    var booleanFindVowel = false\n    var booleanFoundVowel\
    \ = false\n    var booleanFindConsonant = false\n    var booleanFoundConsonant\
    \ = false\n    var booleanFoundVowelAndConsonant = false\n    var booleanFindVowelAndConsonant\
    \ = false\n    var booleanFoundIt = false\n    var currentLetter: String\n   \
    \ var previousLetter: String\n    var nextLetter: String\n    let i = copyWord.endIndex\n\
    \    endOfWord = copyWord.index(before: i)\n    currentIndex = copyWord.index(copyWord.startIndex,\
    \ offsetBy: 0)\n    vowelIndex = copyWord.index(copyWord.startIndex, offsetBy:\
    \ 0)\n    consonantIndex = copyWord.index(copyWord.startIndex, offsetBy: 0)\n\
    \    originalVowelDistance = copyWord.distance(from: currentIndex, to: endOfWord)\n\
    \    originalConsonantDistance = copyWord.distance(from: currentIndex, to: endOfWord)\n\
    \    greatestDistance = 0\n    while currentIndex != endOfWord {\n        currentLetter\
    \ = String(copyWord[currentIndex])\n        previousLetter = String(copyWord[copyWord.index(before:\
    \ currentIndex)])\n        nextLetter = String(copyWord[copyWord.index(after:\
    \ currentIndex", '    return "";', "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    var result = \"\"\n    for i in (0..<word.count).reversed() {\n\
    \        if i > 0 {\n            if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)])) {\n                    result = String(word[word.index(word.startIndex,\
    \ offsetBy: i - 1)])\n                    break\n                }\n         \
    \   }\n        }\n    }\n    return result", "    //YOUR CODE GOES HERE\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let chars = Array(word)\n\
    \    for i in (0..<chars.count).reversed() {\n        if vowels.contains(chars[i])\
    \ {\n            if (i == 0) || (i == chars.count - 1) {\n                continue\n\
    \            }\n            else if vowels.contains(chars[i - 1]) || vowels.contains(chars[i\
    \ + 1]) {\n                continue\n            }\n            else {\n     \
    \           return String(chars[i])\n            }\n        }\n    }\n    return\
    \ \"\"", "    // \n    var temp_index: Int = 0\n    var vowel_index: Int = 0\n\
    \    var vowel_index_arr: [Int] = []\n    var vowel_index_arr_abs: [Int] = []\n\
    \    var vowel_index_abs: Int = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    for (index, character) in word.enumerated()\
    \ {\n        if vowels.contains(String(character)) {\n            vowel_index_arr.append(index)\n\
    \        }\n    }\n    if vowel_index_arr.count > 0 {\n        vowel_index = vowel_index_arr.last!\n\
    \        for i in vowel_index_arr {\n            vowel_index_arr_abs.append(abs(vowel_index\
    \ - i))\n        }\n        vowel_index_abs = vowel_index_arr_abs.min()!\n   \
    \     temp_index = vowel_index_arr.count - 1 - vowel_index_arr_abs.lastIndex(of:\
    \ vowel_index_abs)!\n        vowel_index = vowel_index_arr[temp_index]\n     \
    \   return String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    } else {\n        return \"\"\n    }", "    var previousVowel: Character?\n\
    \    var currentVowel: Character?\n    var stop: Bool = false\n    var letters\
    \ = Array(word)\n    for i in (0..<letters.count).reversed() {\n        if stop\
    \ {\n            break\n        }\n        let char = letters[i]\n        switch\
    \ char {\n        case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\":\n            if currentVowel == nil {\n                currentVowel\
    \ = char\n            } else {\n                if previousVowel == nil {\n  \
    \                  previousVowel = char\n                    stop = true\n   \
    \             }\n            }\n        default:\n            if previousVowel\
    \ != nil && currentVowel != nil {\n                stop = true\n            }\n\
    \        }\n    }\n    if previousVowel != nil && currentVowel != nil {\n    \
    \    return String(previousVowel!)\n    }\n    return \"\"", "    let vowels =\
    \ Set(\"aeiouAEIOU\")\n    for ch in word.characters.reversed() {\n        if\
    \ vowels.contains(ch) {\n            return String(ch)\n        }\n    }\n   \
    \ return \"\"", "    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    let count = word.count\n    if count < 3 {\n        return \"\"\n    }\n\
    \    let end_index = word.index(word.endIndex, offsetBy: -2)\n    let sub_str\
    \ = word[..<end_index]\n    let reversed_str = String(sub_str.reversed())\n  \
    \  var min_distance = 0\n    var result = \"\"\n    for vowel in vowels {\n  \
    \      if let index = reversed_str.firstIndex(of: vowel) {\n            let distance\
    \ = reversed_str.distance(from: reversed_str.startIndex, to: index)\n        \
    \    if vowels.contains(word[word.index(word.startIndex, offsetBy: distance)])\n\
    \                || consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ distance+2)]) {\n                continue\n            }\n            if min_distance\
    \ == 0 || distance < min_distance {\n                min_distance = distance\n\
    \                result = String(vowel)\n            }\n        }\n    }\n   \
    \ return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var\
    \ closestVowel: String = \"\"\n    for (index, letter) in word.enumerated() {\n\
    \        if vowels.contains(String(letter)) {\n            var position = index\n\
    \            for (index, letter) in word.enumerated() {\n                if vowels.contains(String(letter))\
    \ {\n                    position = index\n                }\n            }\n\
    \            closestVowel = String(word[index])\n        }\n    }\n    return\
    \ closestVowel", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ chars = Array(word)\n    for i in (0..<chars.count).reversed() {\n        if\
    \ vowels.contains(String(chars[i])) {\n            if i > 0 && i < chars.count\
    \ - 1 {\n                if !vowels.contains(String(chars[i - 1])) && !vowels.contains(String(chars[i\
    \ + 1])) {\n                    return String(chars[i])\n                }\n \
    \           }\n        }\n    }\n    return \"\"", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let vowels_set = Set(vowels)\n    let word_set\
    \ = Set(word)\n    if word_set.isSubset(of: vowels_set) {\n        return \"\"\
    \n    }\n    var reverse_word = String(word.reversed())\n    var closest_vowel\
    \ = \"\"\n    for char in reverse_word {\n        if vowels.contains(String(char))\
    \ {\n            closest_vowel = String(char)\n            break\n        }\n\
    \    }\n    return closest_vowel", "    let vowels = \"aeiou\"\n    var idx =\
    \ word.count - 1\n    var isConsonant = false\n    while idx >= 0 {\n        let\
    \ s = word[word.index(word.startIndex, offsetBy: idx)]\n        if vowels.contains(s)\
    \ {\n            if isConsonant {\n                return String(s)\n        \
    \    }\n        } else {\n            isConsonant = true\n        }\n        idx\
    \ -= 1\n    }\n    return \"\"", "    var outStr = \"\"\n    var check = false\n\
    \    for char in word.characters.reversed() {\n        if char == \"a\" || char\
    \ == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if\
    \ check {\n                outStr = String(char)\n                break\n    \
    \        }\n        } else {\n            check = true\n        }\n    }\n   \
    \ return outStr", "    let vowels = \"aeiou\"\n    var vowel_index: Int?\n   \
    \ for (i, char) in word.characters.enumerated().reversed() {\n        if !vowels.containsString(String(char))\
    \ {\n            vowel_index = i + 1\n            break\n        }\n    }\n  \
    \  if vowel_index == nil {\n        return \"\"\n    }\n    for (i, char) in word.characters.enumerated().reversed()\
    \ {\n        if i <= vowel_index! {\n            return \"\"\n        }\n    \
    \    if vowels.containsString(String(char)) {\n            return String(char)\n\
    \        }\n    }\n    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let first = word.prefix(2)\n    let last = word.suffix(2)\n \
    \   if vowels.contains(first) || vowels.contains(last) {\n        return \"\"\n\
    \    } else {\n        for character in word.reversed() {\n            if vowels.contains(String(character))\
    \ {\n                return String(character)\n            }\n        }\n    }\n\
    \    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ let chars = Array(word)\n    var closest_vowel = \"\"\n    for i in 0..<chars.count\
    \ {\n        if !vowels.contains(String(chars[i])) {\n            for j in (i+1)..<chars.count\
    \ {\n                if vowels.contains(String(chars[j])) {\n                \
    \    closest_vowel = String(chars[j])\n                    break\n           \
    \     }\n            }\n            break\n        }\n    }\n    return closest_vowel",
  "    let vowels = \"AEIOU\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n  \
    \  for (index, char) in word.reversed().enumerated() {\n        let string_char\
    \ = String(char)\n        if vowels.contains(string_char) {\n            if consonants.contains(String(word[word.index(word.endIndex,\
    \ offsetBy: -(index + 1))])) &&\n                consonants.contains(String(word[word.index(word.endIndex,\
    \ offsetBy: -(index + 2))])) {\n                return string_char\n         \
    \   }\n        }\n    }\n    return \"\"", "    let vowels = Set(\"aeiou\")\n\
    \    var closestVowel = \"\"\n    for (index, char) in word.reversed().enumerated()\
    \ {\n        if closestVowel.isEmpty && !vowels.contains(char) {\n           \
    \ continue\n        }\n        if vowels.contains(char) {\n            closestVowel\
    \ = String(char)\n            continue\n        }\n        if !vowels.contains(char)\
    \ && !closestVowel.isEmpty {\n            break\n        }\n    }\n    return\
    \ closestVowel", "    var closest_vowel = \"\"\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var first_consonant = true\n    var closest_consonant_distance\
    \ = 0\n    var closest_vowel_distance = 0\n    for (index, char) in word.lowercased().enumerated()\
    \ {\n        let distance = word.distance(from: word.startIndex, to: word.index(word.startIndex,\
    \ offsetBy: index))\n        if !vowels.contains(String(char)) {\n           \
    \ if first_consonant {\n                first_consonant = false\n            }\
    \ else {\n                closest_consonant_distance = distance\n            }\n\
    \        } else {\n            if (distance - closest_consonant_distance) < closest_vowel_distance\
    \ || closest_vowel_distance == 0 {\n                closest_vowel_distance = distance\
    \ - closest_consonant_distance\n                closest_vowel = String(char)\n\
    \            }\n        }\n    }\n    return closest_vowel", "    let vowels =\
    \ \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    for index in word.indices {\n        if consonants.contains(word[index])\
    \ {\n            let word_sub = word[index...].dropFirst()\n            for w_index\
    \ in word_sub.indices {\n                if vowels.contains(word_sub[w_index])\
    \ {\n                    closest_vowel = String(word_sub[w_index])\n         \
    \           break\n                }\n            }\n            if !closest_vowel.isEmpty\
    \ {\n                break\n            }\n        }\n    }\n    return closest_vowel",
  "    // If a word has no vowel, return empty string\n    if word.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"aeiou\")) == nil {\n        return \"\"\n    }\n\
    \    \n    // Make a array of all vowels in word\n    var wordArray = Array(word)\n\
    \    var vowelArray = [Character]()\n    for char in wordArray {\n        if char\
    \ == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\"\
    \ {\n            vowelArray.append(char)\n        }\n    }\n    \n    // Make\
    \ a array of all consonants in word\n    var consonantArray = [Character]()\n\
    \    for char in wordArray {\n        if char != \"a\" && char != \"e\" && char\
    \ != \"i\" && char != \"o\" && char != \"u\" {\n            consonantArray.append(char)\n\
    \        }\n    }\n    \n    // If vowelArray contains first character in word,\
    \ append empty string to consonantArray\n    if vowelArray.first == wordArray.first\
    \ {\n        consonantArray.append(\"\")\n    }\n    \n    // If vowelArray contains\
    \ last character in word, prepend empty string to consonantArray\n    if vowelArray.last\
    \ == wordArray.last {\n        consonantArray.insert(\"\", at: 0)\n    }\n   \
    \ \n    // Create a array of indices of consontants in word\n    var consonantIndices\
    \ = [Int]()\n    for letter in consonantArray {\n        consonantIndices.append(wordArray.index(of:\
    \ letter)!)\n    }\n    \n    // Create a array of arrays of indices of vowels\
    \ between consonants\n    var vowelBetweenIndices = [[Int]]()\n    var current\
    \ = [Int]()\n    var next = consonantIndices[0]\n    for i in 0..<vowelArray.count\
    \ {\n        if vowelArray[i] == wordArray[next] {\n            current.append(i)\n\
    \            if next < consonantIndices.count - 1 {\n                next = consonantIndices[consonantIndices.index(of:\
    \ next)! + 1]\n            }\n            vowelBetweenIndices.append", "    var\
    \ a = \"\"\n    var b = \"\"\n    var flag = false\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    for c in word.reversed() {\n        if vowels.contains(String(c))\
    \ {\n            if !flag {\n                b = String(c)\n            } else\
    \ {\n                return b\n            }\n        } else {\n            flag\
    \ = true\n        }\n    }\n    return \"\"", "    let vowels = \"aeiouAEIOU\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ result = \"\"\n    var i = word.characters.count - 1\n    while i >= 0 {\n \
    \       let index = word.index(word.startIndex, offsetBy: i)\n        let char\
    \ = word[index]\n        if vowels.contains(char) {\n            result = String(char)\n\
    \            break\n        }\n        if !consonants.contains(char) {\n     \
    \       break\n        }\n        i -= 1\n    }\n    return result", "    var\
    \ result = String()\n    var consons = String()\n    let vowels = \"AEIOUaeiou\"\
    \n    let charArray = Array(word)\n    for i in stride(from: charArray.count -\
    \ 1, through: 0, by: -1) {\n        if vowels.contains(charArray[i]) {\n     \
    \       if consons.count != 0 {\n                result = String(charArray[i])\n\
    \                break\n            }\n        } else {\n            consons.append(charArray[i])\n\
    \        }\n    }\n    return result", "    var index = 0\n    let vowels = \"\
    aeiouAEIOU\"\n    var prev = \"\"\n    var next = \"\"\n    for character in word.characters\
    \ {\n        if (vowels.characters.contains(character)) {\n            prev =\
    \ String(character)\n            if (index != word.characters.count - 1) {\n \
    \               next = String(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)])\n            }\n            if (prev != \"\" && next != \"\" && !vowels.characters.contains(next.characters.first!))\
    \ {\n                return prev\n            }\n        }\n        index += 1\n\
    \    }\n    return \"\"", "    var result = \"\"\n    for letter in word.reversed()\
    \ {\n        if !isVowel(letter: letter) {\n            continue\n        }\n\
    \        if result.count > 0 {\n            return result\n        }\n       \
    \ result = String(letter)\n    }\n    return result", "    let vowels = \"aeiou\"\
    \n    var result = \"\"\n    var i = word.count - 1\n    var j = 0\n    while\
    \ i >= 0 {\n        if vowels.contains(word[word.index(word.startIndex, offsetBy:\
    \ i)]) {\n            break\n        }\n        i -= 1\n    }\n    if i < 0 {\n\
    \        return \"\"\n    }\n    j = i - 1\n    while j >= 0 {\n        if vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: j)]) {\n            break\n        }\n        j -= 1\n    }\n    if\
    \ j < 0 {\n        return \"\"\n    }\n    result = String(word[word.index(word.startIndex,\
    \ offsetBy: j + 1)])\n    return result", "    var word = word\n    var closest_vowel\
    \ = \"\"\n    var is_the_first_vowel = true\n    while word.count > 0 {\n    \
    \    let previous_letter = word.popLast()\n        if !is_the_first_vowel && previous_letter\
    \ != nil {\n            if !is_vowel(letter: previous_letter!) {\n           \
    \     closest_vowel = \"\"\n            } else {\n                closest_vowel\
    \ = String(previous_letter!)\n            }\n        }\n        if word.count\
    \ > 0 {\n            let next_letter = word.last\n            if previous_letter\
    \ != nil && is_vowel(letter: previous_letter!) && next_letter != nil && !is_vowel(letter:\
    \ next_letter!) {\n                return closest_vowel\n            }\n     \
    \   }\n        is_the_first_vowel = false\n    }\n    return closest_vowel", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let b = word.characters.reversed()\n\
    \    var lastConsonant: String = \"\"\n    var firstVowel: String = \"\"\n   \
    \ for c in b {\n        if vowels.contains(String(c)) {\n            firstVowel\
    \ = String(c)\n            break\n        }\n        lastConsonant = String(c)\n\
    \    }\n    return firstVowel.isEmpty || lastConsonant.isEmpty ? \"\" : firstVowel",
  "    var result: String = \"\"\n    for (index, value) in word.enumerated() {\n\
    \        let element = String(value)\n        if index == 0 || index == word.count\
    \ - 1 {\n            continue\n        }\n        if element.isVowel() {\n   \
    \         let before = String(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)])\n            let after = String(word[word.index(word.startIndex, offsetBy:\
    \ index + 1)])\n            if before.isConsonant() && after.isConsonant() {\n\
    \                result = element\n                break\n            }\n    \
    \    }\n    }\n    return result", "  guard word.count > 1 else { return \"\"\
    \ }\n  let vowels = \"aeiouAEIOU\"\n  for (i, char) in word.enumerated().reversed()\
    \ {\n    if vowels.contains(char) {\n      if i == word.count - 1 {\n        return\
    \ \"\"\n      }\n      let left_is_consonant = !vowels.contains(Array(word)[i\
    \ - 1])\n      let right_is_consonant = !vowels.contains(Array(word)[i + 1])\n\
    \      if left_is_consonant && right_is_consonant {\n        return String(char)\n\
    \      }\n    }\n  }\n  return \"\"", "    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    var result: String = \"\"\n    var index =\
    \ word.count - 1\n    var count = 0\n    for i in word.lowercased() {\n      \
    \  if index == 0 {\n            break\n        }\n        if vowels.contains(String(i))\
    \ {\n            if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index-1)])) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index+1)])) {\n                result = String(i)\n              \
    \  break\n            }\n        }\n        index -= 1\n        count += 1\n \
    \   }\n    if count == word.count - 1 {\n        result = \"\"\n    }\n    return\
    \ result", "    let vowels = Set(\"aeiouAEIOU\")\n    let consonants = Set(\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    var consonantCount = 0\n  \
    \  var vowelCount = 0\n    var lastIndex = 0\n    var closestVowel = \"\"\n  \
    \  for index in 0..<word.count {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            consonantCount\
    \ += 1\n            if vowelCount > 0 {\n                lastIndex = index\n \
    \           }\n        } else if vowels.contains(char) {\n            vowelCount\
    \ += 1\n            if consonantCount > 0 {\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel", "    //Start writing\
    \ your code here\n    let vowels = \"aeiou\"\n    var vowelIndex = word.characters.count\
    \ - 1\n    var vowelFound = false\n    var closestVowel: Character = \" \"\n \
    \   while vowelIndex >= 0 {\n        if vowels.contains(word[vowelIndex]) && vowelFound\
    \ {\n            break\n        }\n        if vowels.contains(word[vowelIndex])\
    \ {\n            vowelFound = true\n            closestVowel = word[vowelIndex]\n\
    \        }\n        vowelIndex -= 1\n    }\n    return vowelFound ? String(closestVowel)\
    \ : \"\"", "    let vowels = \"aeiouAEIOU\"\n    var furthestVowel = \"\"\n  \
    \  var furthestIndex = -1\n    for (index, char) in word.enumerated() {\n    \
    \    if vowels.contains(char) {\n            furthestVowel = String(char)\n  \
    \          furthestIndex = index\n        }\n    }\n    if furthestIndex == -1\
    \ {\n        return \"\"\n    }\n    for index in (0..<furthestIndex).reversed()\
    \ {\n        if !vowels.contains(word[index]) {\n            return furthestVowel\n\
    \        }\n    }\n    return \"\"", "    let vowels = Set(\"aeiouAEIOU\")\n \
    \   let chars = Array(word)\n    let indexes = (0..<chars.count).filter { vowels.contains(chars[$0])\
    \ }\n    let last = indexes.isEmpty ? -1 : indexes.last!\n    for i in (0..<chars.count).reversed()\
    \ {\n        if last == -1 || i < last {\n            if i - 1 >= 0 && vowels.contains(chars[i\
    \ - 1]) {\n                continue\n            }\n            if i + 1 < chars.count\
    \ && vowels.contains(chars[i + 1]) {\n                continue\n            }\n\
    \            return String(chars[i])\n        }\n    }\n    return \"\"", "  \
    \  // TODO: Implement this function\n    // Hint: You may need to consider more\
    \ than one cases\n    var vowel: String = \"\"\n    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants: Set<Character> =\
    \ [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    if(consonants.contains(word.last!)){\n\
    \        for i in stride(from: word.count-1, to: 0, by: -1){\n            if(vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: i)])){\n                vowel = String(word[word.index(word.startIndex,\
    \ offsetBy: i)])\n                break\n            }\n        }\n    }\n   \
    \ return vowel", "    var count = word.count\n    var curr = \"\"\n    var prev\
    \ = \"\"\n    var next = \"\"\n    var vowel = \"\"\n    var count1 = 0\n    var\
    \ count2 = 0\n    for w in word {\n        switch w {\n        case \"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n            vowel\
    \ = String(w)\n            break\n        default:\n            vowel = \"\"\n\
    \        }\n        if !(prev == \"\" && vowel == \"\") && prev != \"\" && vowel\
    \ != \"\" {\n            if !(next == \"\" && vowel == \"\") && next != \"\" &&\
    \ vowel != \"\" {\n                count1 = count\n                if vowel ==\
    \ \"a\" || vowel == \"e\" || vowel == \"i\" || vowel == \"o\" || vowel == \"u\"\
    \ {\n                    if prev == \"b\" || prev == \"c\" || prev == \"d\" ||\
    \ prev == \"f\" || prev == \"g\" || prev == \"h\" || prev == \"j\" || prev ==\
    \ \"k\" || prev == \"l\" || prev == \"m\" || prev == \"n\" || prev == \"p\" ||\
    \ prev == \"q\" || prev == \"r\" || prev == \"s\" || prev == \"t\" || prev ==\
    \ \"v\" || prev == \"w\" || prev == \"x\" || prev == \"y\" || prev == \"z\" {\n\
    \                        if next == \"b\" || next == \"c\" || next == \"d\" ||\
    \ next == \"f\" || next == \"g\" || next == \"h\" || next == \"j\" || next ==\
    \ \"k\" || next == \"l\" || next == \"m\" || next == \"n\" || next == \"p\" ||\
    \ next == \"q\" || next == \"r\" || next == \"s\" || next == \"t\" || next ==\
    \ \"v\" || next == \"w\" || next == \"x\" || next == \"y\" || next == \"z\" {\n\
    \                            curr = vowel\n                            count2\
    \ = count\n                        }\n                    }\n                }\n\
    \                if count1 < count2 {\n                    curr = vowel\n    \
    \            }\n            }\n        }\n        prev = vowel\n        count\
    \ -=", "  let vowels = \"aeiou\"\n  let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n  var temp = \"\"\n  var a = 0\n  for char in word.characters.reversed() {\n\
    \    if vowels.contains(char) {\n      temp = String(char)\n      break\n    }\n\
    \    if consonants.contains(char) {\n      a += 1\n    }\n  }\n  if a > 1 {\n\
    \    return temp\n  }\n  return \"\"", "    var dist = Int.max\n    var res =\
    \ \"\"\n    var i = word.count - 1\n    while i >= 0 {\n        if i > 0 && is_vowel(word[i])\
    \ && !is_vowel(word[i - 1]) {\n            let d = word.count - i\n          \
    \  if d < dist {\n                dist = d\n                res = String(word[i])\n\
    \            }\n        }\n        i -= 1\n    }\n    return res", "    let v\
    \ = \"AEIOU\".lowercased()\n    var g = \"\"\n    for c in word.reversed() {\n\
    \        if v.contains(c) { g = String(c) }\n        else if g != \"\" { return\
    \ g }\n    }\n    return \"\"", "    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let chars = Array(word)\n    var vowelList\
    \ = [String]()\n    for i in (0..<chars.count).reversed() {\n        if i < chars.count\
    \ - 1 {\n            if vowels.contains(chars[i]) && consonants.contains(chars[i+1])\
    \ {\n                vowelList.append(String(chars[i]))\n            }\n     \
    \   }\n    }\n    guard vowelList.count > 0 else {\n        return \"\"\n    }\n\
    \    return vowelList[0]", "    let vowels = Set(\"aeiou\")\n    var result =\
    \ \"\"\n    for (index, letter) in word.lowercased().reversed().enumerated() {\n\
    \        if vowels.contains(letter) {\n            result = String(letter)\n \
    \           break\n        }\n        else if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: word.count - index - 1)])) {\n            break\n        }\n    }\n\
    \    return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   var i = word.count - 1\n    while i >= 0 {\n        if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n            return String(word[word.index(word.startIndex,\
    \ offsetBy: i)])\n        }\n        i -= 1\n    }\n    return \"\"", "    //\
    \ Write your code here\n    return \"\"", "    // replace this return statement\
    \ with your solution\n    return \"\"", "    var idx = 0\n    var not_found =\
    \ true\n    var vowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for letter in word.reversed() {\n        if !vowels.contains(String(letter))\
    \ {\n            idx += 1\n        } else {\n            vowel = String(letter)\n\
    \            not_found = false\n            break\n        }\n    }\n    return\
    \ not_found ? \"\" : vowel", "    var output: String = \"\"\n    let word = word.uppercased()\n\
    \    let vowels: [Character] = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    for (i,\
    \ character) in word.enumerated() {\n        if !vowels.contains(character) {\n\
    \            if i + 1 != word.count {\n                if vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)]) {\n                    output = String(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)])\n                    break\n                }\n         \
    \   }\n        }\n    }\n    return output", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n    for ch in word.characters.reversed()\
    \ {\n        if vowels.contains(String(ch)) {\n            closestVowel = String(ch)\n\
    \            break\n        }\n    }\n    return closestVowel", "    var vowels\
    \ = [Character]()\n    for c in word {\n        if c == \"a\" || c == \"e\" ||\
    \ c == \"i\" || c == \"o\" || c == \"u\" || c == \"A\" || c == \"E\" || c == \"\
    I\" || c == \"O\" || c == \"U\" {\n            vowels.append(c)\n        }\n \
    \   }\n    if vowels.count < 2 {\n        return \"\"\n    }\n    var k = vowels.count\
    \ - 1\n    var first = vowels[k]\n    var second = \"\"\n    while k > 0 {\n \
    \       k -= 1\n        if vowels[k] != first {\n            second = String(vowels[k])\n\
    \            break\n        }\n    }\n    if second == \"\" {\n        return\
    \ \"\"\n    }\n    let distance = word.distance(from: word.index(of: first)!,\
    \ to: word.index(of: Character(second))!)\n    if distance < 1 {\n        return\
    \ \"\"\n    }\n    return String(first)", "  let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  let strArr = Array(word)\n  var closestVowel: String = \"\"\
    \n  for (index, val) in strArr.enumerated() {\n    let char = String(val)\n  \
    \  if vowels.contains(char) {\n      closestVowel = char\n      break\n    }\n\
    \  }\n  return closestVowel", "    var length = word.count\n    if length < 3\
    \ {\n        return \"\"\n    }\n    var temp = \"\"\n    var index = 0\n    for\
    \ character in word {\n        let char = String(character)\n        if is_vowel(char:\
    \ char) {\n            if index == 0 || (index == length - 1) {\n            \
    \    index += 1\n                continue\n            }\n            let before\
    \ = String(word[word.index(word.startIndex, offsetBy: index - 1)])\n         \
    \   let after = String(word[word.index(word.startIndex, offsetBy: index + 1)])\n\
    \            if !is_vowel(char: before) && !is_vowel(char: after) {\n        \
    \        temp = char\n                break\n            }\n        }\n      \
    \  index += 1\n    }\n    return temp", "\tlet vowels = \"aeiou\"\n\tvar isPrevConsonant\
    \ = false\n\t\n\tfor (index, c) in word.lowercased().reversed().enumerated() {\n\
    \t\tif vowels.contains(c) {\n\t\t\tif index > 0 && isPrevConsonant {\n\t\t\t\t\
    return String(c)\n\t\t\t}\n\t\t} else {\n\t\t\tisPrevConsonant = true\n\t\t}\n\
    \t}\n\t\n\treturn \"\"", '    // YOUR CODE GOES HERE', "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let chars = Array(word)\n    var frontVowelIndex\
    \ = -1\n    var backVowelIndex = -1\n    var i = 0\n    while i < chars.count\
    \ {\n        let char = String(chars[i])\n        if vowels.contains(char) {\n\
    \            frontVowelIndex = i\n            break\n        }\n        i += 1\n\
    \    }\n    i = chars.count - 1\n    while i >= 0 {\n        let char = String(chars[i])\n\
    \        if vowels.contains(char) {\n            backVowelIndex = i\n        \
    \    break\n        }\n        i -= 1\n    }\n    if frontVowelIndex == -1 ||\
    \ backVowelIndex == -1 {\n        return \"\"\n    }\n    if abs(frontVowelIndex\
    \ - backVowelIndex) < chars.count / 2 {\n        return String(chars[frontVowelIndex])\n\
    \    } else {\n        return String(chars[backVowelIndex])\n    }", "    var\
    \ vowels = [Character]()\n    for i in stride(from: word.count - 1, to: -1, by:\
    \ -1) {\n        let c = word[word.index(word.startIndex, offsetBy: i)]\n    \
    \    if is_vowel(c: c) {\n            vowels.append(c)\n        } else {\n   \
    \         if vowels.count > 0 {\n                return String(vowels[0])\n  \
    \          }\n        }\n    }\n    return \"\"", '    // your code goes here',
  "    var rightVowel = \"\"\n    var right = 0\n    let vowel = \"aeiou\"\n    for\
    \ (i, c) in word.enumerated().reversed() {\n        if vowel.contains(c) {\n \
    \           rightVowel = String(c)\n            right = i\n            break\n\
    \        }\n    }\n    for (i, c) in word.enumerated().reversed() {\n        if\
    \ !vowel.contains(c) && i < right {\n            return rightVowel\n        }\n\
    \    }\n    return \"\"", "    var vowels = \"aeiou\"\n    var consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n    var closest = \"\"\n    for c in word.characters\
    \ {\n        let ch = String(c)\n        if vowels.contains(ch) {\n          \
    \  closest = ch\n        } else if consonants.contains(ch) {\n            closest\
    \ = \"\"\n        }\n    }\n    return closest", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    var new_word = \"\"\n    let reversed_word = String(word.reversed())\n\
    \    var count = 0\n    for letter in reversed_word {\n        if vowels.contains(String(letter))\
    \ {\n            new_word += String(letter)\n            count += 1\n        }\n\
    \        if count == 2 {\n            return String(new_word.reversed())\n   \
    \     }\n    }\n    return \"\"", '    return ""', '    return "-"', "    // TODO:\
    \ Implement\n    return \"\"", "    // your code goes here\n    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let chars = Array(word)\n    var consonants\
    \ = [Character]()\n    for char in chars {\n        if !vowels.contains(String(char).lowercased())\
    \ {\n            consonants.append(char)\n        }\n    }\n    var index = chars.count\
    \ - 1\n    while index >= 0 {\n        let char = chars[index]\n        if !vowels.contains(String(char).lowercased())\
    \ {\n            consonants.removeLast()\n        } else {\n            if consonants.count\
    \ >= 2 {\n                return String(char)\n            }\n        }\n    \
    \    index -= 1\n    }\n    return \"\"", "    let vowels = \"aeiouAEIOU\"\n \
    \   let cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var last_index\
    \ = -1\n\n    for i in (0..<word.count).reversed() {\n        let char = word[i]\n\
    \        if vowels.contains(char) {\n            last_index = i\n            break\n\
    \        }\n    }\n\n    for i in (0..<last_index).reversed() {\n        let char\
    \ = word[i]\n        if cons.contains(char) {\n            return String(word[last_index])\n\
    \        }\n    }\n\n    return \"\"", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let reversed_word = String(word.reversed())\n    var result:\
    \ String = \"\"\n    var consonant_count = 0\n    for ch in reversed_word {\n\
    \        if vowels.contains(String(ch)) {\n            if consonant_count == 1\
    \ {\n                result = String(ch)\n                break\n            }\n\
    \        } else {\n            consonant_count += 1\n        }\n    }\n    return\
    \ result", "    var closest = \"\"\n    var start = 0\n    var end = 0\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<word.count {\n\
    \        var ch = String(word[word.index(word.startIndex, offsetBy: i)])\n   \
    \     if vowels.contains(ch) {\n            start = i\n            break\n   \
    \     }\n    }\n    for i in start..<word.count {\n        var ch = String(word[word.index(word.startIndex,\
    \ offsetBy: i)])\n        if !vowels.contains(ch) {\n            end = i\n   \
    \         break\n        }\n    }\n    if end != 0 {\n        closest = String(word[word.index(word.startIndex,\
    \ offsetBy: end)])\n    }\n    return closest", "    let vowels = \"aeiouAEIOU\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ closestVowel: String = \"\"\n    var word = word\n    while word.count > 0 {\n\
    \        let popped = word.popLast()\n        if vowels.contains(popped!) {\n\
    \            closestVowel = String(popped!)\n            break\n        }\n  \
    \  }\n    var isConsonant: Bool = false\n    for char in word {\n        if consonants.contains(char)\
    \ {\n            isConsonant = true\n        } else if isConsonant == true {\n\
    \            return String(char)\n        }\n    }\n    return closestVowel",
  "  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  var word = word.lowercased()\n\
    \  word = word.reversed()\n  var lastVowel = String()\n  var result = String()\n\
    \  for char in word {\n    if vowels.contains(String(char)) {\n      lastVowel\
    \ = String(char)\n      break\n    }\n  }\n  if lastVowel == \"\" {\n    return\
    \ result\n  }\n  var foundConsonant = false\n  for char in word {\n    if vowels.contains(String(char))\
    \ {\n      if foundConsonant {\n        result = String(char)\n        break\n\
    \      }\n    } else {\n      foundConsonant = true\n    }\n  }\n  if result ==\
    \ \"\" {\n    return lastVowel\n  }\n  return result", "    // Your code here\n\
    \    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ var result = \"\"\n    for i in stride(from: word.count - 1, to: 0, by: -1)\
    \ {\n        let c = String(word[i])\n        if vowels.contains(c) {\n      \
    \      for j in stride(from: i - 1, to: 0, by: -1) {\n                let d =\
    \ String(word[j])\n                if !vowels.contains(d) {\n                \
    \    result = c\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    var closestVowel = \"\"\n    var result = \"\"\n    for char\
    \ in word.reversed() {\n        if vowels.contains(String(char)) {\n         \
    \   closestVowel = String(char)\n            break\n        }\n    }\n    var\
    \ current = 0\n    for char in word {\n        if vowels.contains(String(char))\
    \ {\n            if word.distance(from: word.startIndex, to: word.index(of: char)!)\
    \ > current {\n                result = String(char)\n                current\
    \ = word.distance(from: word.startIndex, to: word.index(of: char)!)\n        \
    \    }\n        }\n    }\n    if result == \"\" {\n        return result\n   \
    \ }\n    if word.distance(from: word.startIndex, to: word.index(of: Character(result))!)\
    \ > word.distance(from: word.startIndex, to: word.index(of: Character(closestVowel))!)\
    \ {\n        return closestVowel\n    }\n    return result", "    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let upperVowels = [\"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    let upperConsonants = [\"B\", \"C\", \"\
    D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"\
    R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    var position: Int =\
    \ 0\n    for i in (0...word.count - 1).reversed() {\n        var char: Character\
    \ = Array(word)[i]\n        let charString = String(char)\n        if vowels.contains(charString)\
    \ || upperVowels.contains(charString) {\n            position = i\n          \
    \  break\n        }\n    }\n    if position != 0 {\n        var j = 0\n      \
    \  while j <= position - 1 {\n            var char = Array(word)[j]\n        \
    \    let charString = String(char)\n            if consonants.contains(charString)\
    \ || upperConsonants.contains(charString) {\n                return String(Array(word)[position])\n\
    \            }\n            j += 1\n        }\n    }\n    return \"\"", "    let\
    \ vowels = \"AEIOU\"\n    var closestVowel: String = \"\"\n    let word_array\
    \ = Array(word)\n    var prevCharIsVowel = false\n    var nextCharIsVowel = false\n\
    \    for (index, char) in word_array.enumerated() {\n        if vowels.contains(char)\
    \ {\n            prevCharIsVowel = true\n            nextCharIsVowel = true\n\
    \            if index > 0 {\n                let prevChar = word_array[index -\
    \ 1]\n                if !vowels.contains(prevChar) {\n                    closestVowel\
    \ = String(char)\n                    break\n                }\n            }\n\
    \            if index < word_array.count - 1 {\n                let nextChar =\
    \ word_array[index + 1]\n                if !vowels.contains(nextChar) {\n   \
    \                 closestVowel = String(char)\n                    break\n   \
    \             }\n            }\n        }\n    }\n    return closestVowel", " \
    \   var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var loop_word = word\n\
    \    var closest_vowel: String = \"\"\n    let sorted_vowels = vowels.sorted(by:\
    \ {$0.count > $1.count})\n    while loop_word.count > 0 {\n        var loop_char\
    \ = loop_word.last\n        loop_word.removeLast()\n        if loop_char == nil\
    \ { break }\n        if vowels.contains(loop_char!) {\n            if loop_word.count\
    \ > 0 {\n                let before_char = loop_word.last\n                if\
    \ before_char == nil { break }\n                if !vowels.contains(before_char!)\
    \ {\n                    closest_vowel = loop_char!\n                    break\n\
    \                }\n            }\n        }\n    }\n    return closest_vowel",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var matches = [String]()\n\
    \    var closest_vowel = \"\"\n    for index in 1...word.count-1 {\n        let\
    \ vowel = String(word[word.index(word.startIndex, offsetBy: index)])\n       \
    \ let previous = String(word[word.index(word.startIndex, offsetBy: index-1)])\n\
    \        if vowels.contains(vowel) && !vowels.contains(previous) {\n         \
    \   matches.append(vowel)\n        }\n    }\n    if matches.count == 0 {\n   \
    \     return \"\"\n    }\n    let last_consonant = word.lastIndex(of: \"a\")!\n\
    \    for index in 0...matches.count-1 {\n        let match = word.lastIndex(of:\
    \ Character(matches[index]))!\n        if match > last_consonant {\n         \
    \   closest_vowel = matches[index]\n            break\n        }\n    }\n    return\
    \ closest_vowel", "    // find the closest vowel that stands between two consonants\
    \ from the right side of the word\n    var vowel: String = \"\"\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var wordStart: String\
    \ = \"\"\n    var wordEnd: String = \"\"\n    var isVowelFound: Bool = false\n\
    \    var isVowel: Bool = false\n    var consonantBeforeVowelFound: Bool = false\n\
    \    var consonantAfterVowelFound: Bool = false\n    let word_array = Array(word)\n\
    \    let word_reverse_array = word_array.reversed()\n    for letter in word_reverse_array\
    \ {\n        if vowels.contains(letter) {\n            isVowel = true\n      \
    \      if isVowelFound == false {\n                if consonantBeforeVowelFound\
    \ && consonantAfterVowelFound {\n                    isVowelFound = true\n   \
    \                 vowel = String(letter)\n                }\n            }\n \
    \       } else {\n            if isVowel {\n                consonantAfterVowelFound\
    \ = true\n            } else {\n                consonantBeforeVowelFound = true\n\
    \            }\n        }\n    }\n    return vowel", "    // Your answer goes\
    \ here:\n    var vowel : String = \"\"\n    let vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    var distance = word.count\n    for i in 0...word.count-1{\n  \
    \      if vowels.contains(String(word[word.index(word.startIndex, offsetBy: i)]))\
    \ {\n            var left = i-1\n            var right = i+1\n            while\
    \ left >= 0 {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: left)])) {\n                    left -= 1\n                } else\
    \ {\n                    break\n                }\n            }\n           \
    \ while right < word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: right)])) {\n                    right += 1\n                } else\
    \ {\n                    break\n                }\n            }\n           \
    \ if (right-left-1) < distance && right-left-1 > 1 {\n                distance\
    \ = right-left-1\n                vowel = String(word[word.index(word.startIndex,\
    \ offsetBy: i)])\n            }\n        }\n    }\n    return vowel", "    let\
    \ vowels = \"aeiouAEIOU\"\n    let cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var res = \"\"\n    for i in (0..<word.count-1).reversed() {\n        let\
    \ index1 = word.index(word.startIndex, offsetBy: i)\n        let index2 = word.index(word.startIndex,\
    \ offsetBy: i+1)\n        if cons.contains(word[index1]) && cons.contains(word[index2])\
    \ {\n            for j in i+1..<word.count {\n                let index3 = word.index(word.startIndex,\
    \ offsetBy: j)\n                if vowels.contains(word[index3]) {\n         \
    \           res += String(word[index3])\n                    break\n         \
    \       }\n            }\n            break\n        }\n    }\n    return res",
  "    let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var firstVowel = \"\"\n    var closestVowel = \"\"\n    var previous_character\
    \ = \"\"\n    var current_character = \"\"\n    var next_character = \"\"\n  \
    \  var index = 0\n    var found_vowel = false\n    var found_consonant = false\n\
    \    // Find first vowel\n    for character in word {\n        if vowels.contains(character)\
    \ {\n            firstVowel = String(character)\n            found_vowel = true\n\
    \            break\n        }\n    }\n    // If no vowel found, return empty string\n\
    \    if found_vowel == false {\n        return \"\"\n    }\n    // If no consonant\
    \ found in first position, return first vowel\n    if word.index(of: word[word.startIndex])\
    \ == nil {\n        return firstVowel\n    }\n    // Loop through the word to\
    \ find closest vowel\n    while index < word.count {\n        if index < word.count\
    \ - 1 {\n            current_character = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n            next_character = String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])\n        }\n        // Reset closest vowel if consonant\
    \ is found\n        if consonants.contains(current_character) {\n            found_consonant\
    \ = true\n            closestVowel = \"\"\n        }\n        // Save vowel if\
    \ found after consonant\n        if found_consonant && vowels.contains(current_character)\
    \ {\n            closestVowel = current_character\n        }\n        // If vowel\
    \ found, and it is the closest to the end, return it\n        if found_consonant\
    \ && closestVowel != \"\" &&\n            !vowels.contains(next_character) {\n\
    \            return closestVowel\n        }\n        index += 1\n    }\n    return\
    \ closestVowel", "\t\n\tlet vowels = \"aeiou\"\n\tlet consonents = \"bcdfghjklmnpqrstvwxyz\"\
    \n\tvar indexOfVowel : Int = 0\n\tvar count : Int = 0\n\tvar temp : Int = 0\n\t\
    var found : Bool = false\n\tfor char in word.characters.reversed() {\n\t\tif vowels.contains(char)\
    \ {\n\t\t\tif found {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcount = 0\n\t\t\tindexOfVowel\
    \ = temp\n\t\t} else if consonents.contains(char) {\n\t\t\tcount += 1\n\t\t\t\
    if count == 2 {\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\t\ttemp += 1\n\t}\n\t\n\
    \tif !found {\n\t\treturn \"\"\n\t}\n\t\n\treturn String(word.characters.suffix(from:\
    \ word.index(word.startIndex, offsetBy: indexOfVowel)))", "    let vowel = \"\
    aeiouAEIOU\"\n    let consonant = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    let front = word.components(separatedBy: consonant)\n    let back = front.filter{$0\
    \ != \"\"}\n    let back2 = back.filter{vowel.contains($0.first!)}\n    if back2.count\
    \ > 0 {\n        return back2.last!\n    }\n    return \"\"", "    // Write your\
    \ code here!\n    return \"\"", "    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    var closestVowel = \"\"\n    for char in word.characters\
    \ {\n        if consonants.contains(char) {\n            for vowel in vowels.characters\
    \ {\n                if word.contains(vowel) {\n                    closestVowel\
    \ = String(vowel)\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel", "    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels\
    \ = \"aeiou\"\n    var vowelIndex = -1\n    var consIndex = -1\n    for (index,\
    \ char) in word.characters.enumerated() {\n        if vowels.contains(char) {\n\
    \            vowelIndex = index\n        }\n        if consonants.contains(char)\
    \ {\n            consIndex = index\n        }\n        if vowelIndex > -1 && consIndex\
    \ > -1 && consIndex > vowelIndex {\n            return String(char)\n        }\n\
    \    }\n    return \"\"", "    let vowels = \"aeiouAEIOU\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n  \
    \  var found = false\n    for i in word.indices.reversed() {\n        let index\
    \ = word.index(after: i)\n        if !found && vowels.contains(word[i]) {\n  \
    \          result = String(word[i])\n            found = true\n        }\n   \
    \     if found && consonants.contains(word[index]) {\n            return result\n\
    \        }\n    }\n    return \"\"", "\tlet vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\tvar found = \"\"\n\tfor i in 0..<word.count {\n\t\tlet index =\
    \ word.index(word.endIndex, offsetBy: -i - 1)\n\t\tlet cur = String(word[index])\n\
    \t\tif vowels.contains(cur) {\n\t\t\tfound = cur\n\t\t} else if found != \"\"\
    \ {\n\t\t\treturn found\n\t\t}\n\t}\n\treturn \"\"", "    // TODO: implement your\
    \ solution here\n    fatalError(\"TODO: implement your solution here\")", "  \
    \  let letters = Array(word)\n    let vowels = \"aeiouAEIOU\"\n    var prevVowel\
    \ = \"\"\n    var nextVowel = \"\"\n    var prevConsonant = \"\"\n    var nextConsonant\
    \ = \"\"\n    var minDistance = word.count\n    var result = \"\"\n    for index\
    \ in 0..<letters.count {\n        let l = String(letters[index])\n        if vowels.contains(l)\
    \ {\n            if prevConsonant != \"\" {\n                let currentDistance\
    \ = letters.count - index\n                if currentDistance < minDistance {\n\
    \                    result = l\n                    minDistance = currentDistance\n\
    \                }\n            }\n            prevVowel = l\n        } else {\n\
    \            if prevVowel != \"\" {\n                nextConsonant = l\n     \
    \       }\n            prevConsonant = l\n        }\n    }\n    return result",
  "    let vowels = Set(\"aeiouAEIOU\")\n    let constant = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n    let count = word.count\n    var closest_vowel = \"\"\n    for i in 1...count\
    \ {\n        let index = word.index(word.endIndex, offsetBy: -i)\n        let\
    \ key = word[index]\n        if vowels.contains(key) {\n            closest_vowel\
    \ = String(key)\n            break\n        }\n    }\n    let closest_vowel_index\
    \ = word.firstIndex(of: Character(closest_vowel))\n    if closest_vowel_index\
    \ == nil {\n        return \"\"\n    }\n    let right_to_closest_vowel = word[word.index(after:\
    \ closest_vowel_index!)...]\n    let right_to_closest_vowel_string = String(right_to_closest_vowel)\n\
    \    for i in 0..<right_to_closest_vowel_string.count {\n        let key = right_to_closest_vowel_string[right_to_closest_vowel_string.index(right_to_closest_vowel_string.startIndex,\
    \ offsetBy: i)]\n        if constant.contains(key) {\n            return closest_vowel\n\
    \        }\n    }\n    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    var vowelsFound = [Int]()\n    var counter = 0\n    for character\
    \ in word {\n        let index = word.index(word.startIndex, offsetBy: counter)\n\
    \        let letter = word[index]\n        let stringLetter = String(letter)\n\
    \        if vowels.contains(stringLetter) {\n            vowelsFound.append(counter)\n\
    \        }\n        counter += 1\n    }\n    if vowelsFound.count == 0 {\n   \
    \     return \"\"\n    }\n    var maxValid = vowelsFound.count - 1\n    for index\
    \ in (0...vowelsFound.count - 1).reversed() {\n        let location = vowelsFound[index]\n\
    \        if location < word.count - 1 {\n            let nextLetter = word[word.index(word.startIndex,\
    \ offsetBy: location + 1)]\n            if !vowels.contains(String(nextLetter))\
    \ {\n                maxValid = index\n                break\n            }\n\
    \        }\n    }\n    var minValid = 0\n    for index in 0...vowelsFound.count\
    \ - 1 {\n        let location = vowelsFound[index]\n        if location > 0 {\n\
    \            let prevLetter = word[word.index(word.startIndex, offsetBy: location\
    \ - 1)]\n            if !vowels.contains(String(prevLetter)) {\n             \
    \   minValid = index\n                break\n            }\n        }\n    }\n\
    \    if maxValid < minValid {\n        return \"\"\n    }\n    let closest = vowelsFound[maxValid]\n\
    \    let closestLetter = word[word.index(word.startIndex, offsetBy: closest)]\n\
    \    return String(closestLetter)", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let wordReversed = String(word.reversed())\n    var closest =\
    \ \"\"\n    var close = false\n    var index = 0\n    while !close && index <\
    \ wordReversed.count {\n        let char = String(wordReversed[wordReversed.index(wordReversed.startIndex,\
    \ offsetBy: index)])\n        index += 1\n        if vowels.contains(char) {\n\
    \            closest = char\n            close = true\n        }\n    }\n    return\
    \ closest", '    // Your code here.', "\tlet vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\tlet letters = word.characters.map { String($0) }\n\tfor (i, letter)\
    \ in letters.enumerated() {\n\t\tif vowels.contains(letter) {\n\t\t\tif i > 0\
    \ && i < letters.count - 1 {\n\t\t\t\tif !vowels.contains(letters[i - 1]) && !vowels.contains(letters[i\
    \ + 1]) {\n\t\t\t\t\treturn letter\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\
    \"", "    var string = word.filter { $0.isLetter }.reversed()\n    let vowels\
    \ = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var counter\
    \ = 0\n    while counter < string.count - 1 {\n        if !vowels.contains(string[counter])\
    \ && !consonants.contains(string[counter + 1]) {\n            return String(string[counter\
    \ + 1])\n        }\n        counter += 1\n    }\n    return \"\"", "    // Write\
    \ your code here\n    return \"\"", "\treturn \"\"", "    let consonants = \"\
    BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    let vowels = \"AEIOUaeiou\"\n\
    \    for i in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if consonants.contains(char)\
    \ {\n            continue\n        }\n        if vowels.contains(char) {\n   \
    \         if i + 1 < word.count {\n                let nextIndex = word.index(word.startIndex,\
    \ offsetBy: i + 1)\n                let nextChar = String(word[nextIndex])\n \
    \               if consonants.contains(nextChar) {\n                    return\
    \ char\n                }\n            }\n        }\n    }\n    return \"\"",
  "    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n  \
    \  var val = \"\"\n    for char in word.characters {\n        for v in vowels.characters\
    \ {\n            if char == v {\n                val += \"\\(char)\"\n       \
    \     }\n        }\n    }\n    var ret = \"\"\n    var val2 = \"\"\n    var val3\
    \ = \"\"\n    for char in word.characters {\n        for c in consonants.characters\
    \ {\n            if char == c {\n                val2 += \"\\(char)\"\n      \
    \      }\n        }\n    }\n    if val2.characters.count < 2 {\n        return\
    \ \"\"\n    }\n    for char in val2.characters {\n        if char == val2.characters.last!\
    \ {\n            val3 += \"\\(char)\"\n        }\n    }\n    val2 = val2.replacingOccurrences(of:\
    \ val3, with: \"\")\n    for char in val.characters {\n        if char == val.characters.last!\
    \ {\n            ret += \"\\(char)\"\n        }\n    }\n    if val2.characters.count\
    \ == 1 {\n        return \"\"\n    }\n    if ret == \"\" {\n        return \"\"\
    \n    }\n    return ret", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var i = word.count - 1\n    while i >= 0 {\n        let char = word[i]\n\
    \        if !vowels.contains(char) {\n            i -= 1\n        } else {\n \
    \           return String(char)\n        }\n    }\n    return \"\"", '    return
    ""', "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var consonants\
    \ = [String]()\n    for character in word {\n        if !vowels.contains(String(character))\
    \ {\n            consonants.append(String(character))\n        }\n    }\n    if\
    \ consonants.count > 1 {\n        for i in (0...consonants.count - 2).reversed()\
    \ {\n            if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n                return String(word[word.index(word.startIndex, offsetBy:\
    \ i)])\n            }\n        }\n    }\n    return \"\"", "    let vowels = \"\
    aeiouAEIOU\"\n    let cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\
    \    for i in stride(from: word.count - 1, to: 0, by: -1) {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        if vowels.contains(word[index])\
    \ {\n            for j in (0...i).reversed() {\n                let consIndex\
    \ = word.index(word.startIndex, offsetBy: j)\n                if cons.contains(word[consIndex])\
    \ {\n                    return String(word[index])\n                }\n     \
    \       }\n        }\n    }\n    return \"\"", "    let vowels = Set(\"aeiouAEIOU\"\
    )\n    var closest_vowel: String = \"\"\n    var index: Int = word.count - 1\n\
    \    while index >= 0 {\n        let character = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(character) {\n            closest_vowel\
    \ = String(character)\n            break\n        }\n        index -= 1\n    }\n\
    \    return closest_vowel", "    let vowels = Set(\"aeiouAEIOU\")\n    let consonants\
    \ = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    var distance_from_right\
    \ = 0\n    for char in word.reversed() {\n        distance_from_right += 1\n \
    \       if vowels.contains(char) {\n            if distance_from_right > 1 {\n\
    \                return String(char)\n            }\n        } else if consonants.contains(char)\
    \ {\n            if distance_from_right > 1 {\n                return \"\"\n \
    \           }\n        }\n    }\n    return \"\"", "    let vowels = \"AEIOUaeiou\"\
    \n    let wordList = Array(word)\n    var result: String = \"\"\n    for i in\
    \ 0..<wordList.count {\n        if (vowels.contains(wordList[i])) {\n        \
    \    if (i == 0) {\n                continue\n            }\n            if (i\
    \ == wordList.count - 1) {\n                continue\n            }\n        \
    \    if (vowels.contains(wordList[i - 1]) || vowels.contains(wordList[i + 1]))\
    \ {\n                continue\n            }\n            result = String(wordList[i])\n\
    \            break\n        }\n    }\n    return result", "    let vowels = \"\
    aeiouAEIOU\"\n    var result = \"\"\n    var distance = word.count\n    for char\
    \ in word {\n        if vowels.contains(char) {\n            if let index = word.lastIndex(of:\
    \ char) {\n                if index > 0 && index < word.count - 1 {\n        \
    \            if !vowels.contains(word[word.index(before: index)])\n          \
    \              && !vowels.contains(word[word.index(after: index)]) {\n       \
    \                 if index < distance {\n                            distance\
    \ = index\n                            result = String(char)\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return result", "    let vowels = \"aeiou\"\n    var closest:\
    \ Character = \" \"\n    var result = \"\"\n    for i in word.indices {\n    \
    \    if word[i] == \" \" {\n            closest = word[i]\n        }\n       \
    \ if vowels.contains(word[i]) {\n            closest = word[i]\n        }\n  \
    \      if closest != \" \" {\n            result = String(closest)\n        }\n\
    \    }\n    return result", "    let vowels = \"AEIOUaeiou\"\n    let consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    var counter = 0\n    for\
    \ index in (0..<word.count).reversed() {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            return char\n\
    \        } else if consonants.contains(char) {\n            counter += 1\n   \
    \     }\n        if counter == 2 {\n            return \"\"\n        }\n    }\n\
    \    return \"\"", "    var minDistance: Int = word.count\n    var vowel: String\
    \ = \"\"\n    for c in word {\n        if is_vowel(c: c) {\n            let distance\
    \ = word.distance(from: word.endIndex, to: word.firstIndex(of: c)!)\n        \
    \    if distance < minDistance {\n                minDistance = distance\n   \
    \             vowel = String(c)\n            }\n        }\n    }\n    return vowel",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\
    \"\n    for (i, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if i > 0 && i < word.characters.count - 1 {\n               \
    \ if !vowels.contains(String(word[word.index(word.startIndex, offsetBy: i - 1)]))\
    \ && !vowels.contains(String(word[word.index(word.startIndex, offsetBy: i + 1)]))\
    \ {\n                    closest_vowel = String(char)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return closest_vowel",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowelArray: [String]\
    \ = []\n    for i in 0..<word.count {\n        let character = word[i]\n     \
    \   if vowels.contains(String(character)) {\n            vowelArray.append(String(character))\n\
    \        }\n    }\n    if vowelArray.count < 2 {\n        return \"\"\n    }\n\
    \    var counter = word.count - 1\n    var leftVowelIndex = word.count - 1\n \
    \   var rightVowelIndex = word.count - 1\n    while counter >= 0 {\n        let\
    \ character = word[counter]\n        if vowels.contains(String(character)) {\n\
    \            rightVowelIndex = counter\n            break\n        }\n       \
    \ counter -= 1\n    }\n    counter = 0\n    while counter < word.count {\n   \
    \     let character = word[counter]\n        if vowels.contains(String(character))\
    \ {\n            leftVowelIndex = counter\n            break\n        }\n    \
    \    counter += 1\n    }\n    if rightVowelIndex - leftVowelIndex > 1 {\n    \
    \    return vowelArray[1]\n    }\n    return \"\"", "    let vowels = Set<Character>(\"\
    aeiouAEIOU\")\n    let consonants = Set<Character>(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n    var closestVowel = \"\"\n    var closestIndex = -1\n    for (index, char)\
    \ in word.reversed().enumerated() {\n        if vowels.contains(char) {\n    \
    \        closestVowel = String(char)\n            closestIndex = index\n     \
    \   } else if consonants.contains(char) && closestIndex != -1 {\n            break\n\
    \        }\n    }\n    return closestVowel", "    let consonants = [\"q\", \"\
    w\", \"r\", \"t\", \"p\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\"]\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var closest_vowel = \"\"\n    var has_vowel\
    \ = false\n    for character in word.reversed() {\n        if consonants.contains(String(character))\
    \ {\n            if has_vowel {\n                return closest_vowel\n      \
    \      }\n        } else if vowels.contains(String(character)) {\n           \
    \ has_vowel = true\n            closest_vowel = String(character)\n        }\n\
    \    }\n    return \"\"", "    let word = word.lowercased()\n    let vowels =\
    \ \"aeiou\"\n    var result = \"\"\n    for i in stride(from: word.count - 1,\
    \ through: 0, by: -1) {\n        let character = word[i]\n        if vowels.contains(character)\
    \ {\n            result = String(character)\n            break\n        }\n  \
    \  }\n    return result", "    let vowels = Set(\"aeiouAEIOU\")\n    let consonants\
    \ = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    var closestVowel:\
    \ Character?\n    var closestVowelDist = Int.max\n    for (idx, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            continue\n        }\n   \
    \     if !consonants.contains(char) {\n            continue\n        }\n     \
    \   let possibleVowel = word.index(word.startIndex, offsetBy: idx + 1)\n     \
    \   let following = word[possibleVowel...]\n        if let idxOfVowel = following.firstIndex(where:\
    \ { vowels.contains($0) }) {\n            let dist = following.distance(from:\
    \ idxOfVowel, to: following.endIndex)\n            if dist < closestVowelDist\
    \ {\n                closestVowelDist = dist\n                closestVowel = following[idxOfVowel]\n\
    \            }\n        }\n    }\n    return closestVowel != nil ? String(closestVowel!)\
    \ : \"\"", "    // starting from the right, go until the first vowel\n    // and\
    \ then return the next vowel you see\n    var index = word.count - 1\n    while\
    \ index >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if \"aeiou\".contains(char) {\n            break\n        }\n\
    \        index -= 1\n    }\n    index += 1\n    while index < word.count {\n \
    \       let char = word[word.index(word.startIndex, offsetBy: index)]\n      \
    \  if \"aeiou\".contains(char) {\n            return String(char)\n        }\n\
    \        index += 1\n    }\n    return \"\"", "    // your code here\n    return\
    \ \"\"", "    var result = \"\"\n    let vowels = \"aeiouAEIOU\"\n    var current\
    \ = 0\n    var closest = word.count\n    for c in word {\n        if vowels.contains(c)\
    \ {\n            let distance = word.count - current\n            if distance\
    \ < closest && distance > 1 {\n                closest = distance\n          \
    \      result = String(c)\n            }\n        }\n        current += 1\n  \
    \  }\n    return result", "    if word.isEmpty {\n        return \"\"\n    }\n\
    \    var index: String.Index = word.startIndex\n    var prev: Character = \" \"\
    \n    var curr: Character = \" \"\n    var next: Character = \" \"\n    var i\
    \ = 0\n    while i < word.count {\n        if i == 0 {\n            prev = \"\
    \ \"\n        } else {\n            prev = word[word.index(before: index)]\n \
    \       }\n        curr = word[index]\n        if i < word.count - 1 {\n     \
    \       next = word[word.index(after: index)]\n        } else {\n            next\
    \ = \" \"\n        }\n        index = word.index(after: index)\n        i += 1\n\
    \        if !is_vowel(ch: prev) && is_vowel(ch: curr) && !is_vowel(ch: next) {\n\
    \            return String(curr)\n        }\n    }\n    return \"\"", "    let\
    \ vowels = \"aeiou\"\n    var minDistance = Int.max\n    var result = \"\"\n \
    \   for (i, char) in word.enumerated() {\n        if vowels.contains(char) {\n\
    \            var lastConsonantIndex = -1\n            for (j, char) in word.enumerated()\
    \ {\n                if (i != j) && (!vowels.contains(char)) {\n             \
    \       lastConsonantIndex = j\n                }\n            }\n           \
    \ if lastConsonantIndex != -1 {\n                let distance = i - lastConsonantIndex\n\
    \                if distance < minDistance {\n                    minDistance\
    \ = distance\n                    result = String(char)\n                }\n \
    \           }\n        }\n    }\n    return result", "\tlet vowels = \"aeiou\"\
    \n\tvar closest = \"\"\n\tvar index = 0\n\tfor var currentIndex = word.count -\
    \ 1; currentIndex >= 0; currentIndex -= 1 {\n\t\tlet currentChar = word[word.index(word.startIndex,\
    \ offsetBy: currentIndex)]\n\t\tif vowels.contains(currentChar) {\n\t\t\tindex\
    \ = currentIndex\n\t\t\tclosest = String(currentChar)\n\t\t\tbreak\n\t\t}\n\t\
    }\n\tif index > 0 {\n\t\tlet possibleIndex = index - 1\n\t\tlet possibleChar =\
    \ word[word.index(word.startIndex, offsetBy: possibleIndex)]\n\t\tif !vowels.contains(possibleChar)\
    \ {\n\t\t\treturn closest\n\t\t}\n\t}\n\treturn \"\"", "    var i = 0\n    var\
    \ startIndex = 0\n    var endIndex = 0\n    var minDistance = Int.max\n    var\
    \ closestVowel = \"\"\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    while i < word.count {\n        let idx = word.index(word.startIndex, offsetBy:\
    \ i)\n        if vowels.contains(word[idx]) {\n            let distance = i -\
    \ startIndex\n            if distance < minDistance {\n                minDistance\
    \ = distance\n                closestVowel = String(word[idx])\n            }\n\
    \        } else if consonants.contains(word[idx]) {\n            if i == word.count\
    \ - 1 {\n                break\n            }\n            startIndex = i\n  \
    \      }\n        i += 1\n    }\n    return closestVowel", '    return ""', " \
    \   var vowel = \"\"\n    let cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for var i in 0...word.count-1 {\n        if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n            for var j in (i+1)...word.count-1 {\n       \
    \         if cons.contains(String(word[word.index(word.startIndex, offsetBy: j)]))\
    \ {\n                    vowel = String(word[word.index(word.startIndex, offsetBy:\
    \ i)])\n                    break\n                }\n            }\n        }\n\
    \    }\n    return vowel", '    return ""', "    // TODO: Implement your solution\
    \ here\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result =\
    \ \"\"\n    var count = 0\n    for i in word.lowercased().reversed() {\n     \
    \   if vowels.contains(String(i)) {\n            if count > 1 {\n            \
    \    result = String(i)\n                break\n            }\n        } else\
    \ {\n            count += 1\n        }\n    }\n    return result", "  /// TODO:\
    \ Write your implementation here\n  return \"\"", "    let vowels = \"aAeEiIoOuU\"\
    \n    var vowelsIndex = [Int]()\n    var consonantsIndex = [Int]()\n    var max\
    \ = 0\n    var closest: Int = 0\n    for i in 0...word.count - 1 {\n        if\
    \ vowels.contains(word[i]) {\n            vowelsIndex.append(i)\n        } else\
    \ {\n            consonantsIndex.append(i)\n        }\n    }\n    for i in 1...vowelsIndex.count\
    \ - 1 {\n        if consonantsIndex.count < 2 {\n            return \"\"\n   \
    \     }\n        if (vowelsIndex[i] - consonantsIndex[consonantsIndex.count -\
    \ 1]) < max {\n            closest = vowelsIndex[i]\n            max = vowelsIndex[i]\
    \ - consonantsIndex[consonantsIndex.count - 1]\n        }\n    }\n    return \"\
    \\(word[closest])\"", "    // Write your code here\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    var result: String = \"\"\n    let words = Array(word)\n\
    \    for index in 0..<words.count {\n        if (words[index] != \"a\" && words[index]\
    \ != \"e\" && words[index] != \"i\" && words[index] != \"o\" && words[index] !=\
    \ \"u\") {\n            for idx in index+1..<words.count {\n                if\
    \ (words[idx] == \"a\" || words[idx] == \"e\" || words[idx] == \"i\" || words[idx]\
    \ == \"o\" || words[idx] == \"u\") {\n                    result += String(words[idx])\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   var closest_vowel = \"\"\n    let characters = Array(word)\n    for i in 0...characters.count\
    \ - 1 {\n        if vowels.contains(String(characters[i])) {\n            if i\
    \ + 1 < characters.count {\n                if !vowels.contains(String(characters[i\
    \ + 1])) {\n                    closest_vowel = String(characters[i])\n      \
    \              break\n                }\n            }\n        }\n    }\n   \
    \ return closest_vowel", "    var vowel = \"\"\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var letter = Array(word)\n    var words\
    \ = letter.filter { $0 != \" \" }\n    var count = words.count\n    while count\
    \ > 1 {\n        if vowels.contains(words[count - 1]) {\n            if vowels.contains(words[count\
    \ - 2]) {\n                vowel = words[count - 1].uppercased()\n           \
    \     return vowel\n            }\n        }\n        if consonants.contains(words[count\
    \ - 1]) {\n            if consonants.contains(words[count - 2]) {\n          \
    \      vowel = words[count - 1].uppercased()\n                return vowel\n \
    \           }\n        }\n        count -= 1\n    }\n    return vowel", "    let\
    \ consonants = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    let vowels\
    \ = Set(\"aeiouAEIOU\")\n    var result = \"\"\n    var prev = \"\"\n    var next\
    \ = \"\"\n    var prevCount = 0\n    var nextCount = 0\n    for char in word.reversed()\
    \ {\n        if consonants.contains(char) {\n            prevCount += 1\n    \
    \        prev = char.description\n        } else if vowels.contains(char) {\n\
    \            if next == \"\" {\n                next = char.description\n    \
    \        }\n            nextCount += 1\n        }\n    }\n    if nextCount > prevCount\
    \ {\n        result = next\n    }\n    return result", '    return ""', "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let word = word.lowercased()\n\
    \    var index = 0\n    var found = false\n    while index < word.count - 1 {\n\
    \        let start = word.index(word.startIndex, offsetBy: index)\n        let\
    \ end = word.index(word.startIndex, offsetBy: index + 1)\n        let range =\
    \ start..<end\n        let pair = String(word[range])\n        if vowels.contains(pair)\
    \ {\n            if index + 2 < word.count {\n                let start = word.index(word.startIndex,\
    \ offsetBy: index + 2)\n                let end = word.index(word.startIndex,\
    \ offsetBy: index + 3)\n                let range = start..<end\n            \
    \    let letter = String(word[range])\n                if !vowels.contains(letter)\
    \ {\n                    found = true\n                    break\n           \
    \     }\n            }\n        }\n        index += 1\n    }\n    if !found {\n\
    \        return \"\"\n    }\n    let start = word.index(word.startIndex, offsetBy:\
    \ index)\n    let end = word.index(word.startIndex, offsetBy: index + 1)\n   \
    \ let range = start..<end\n    return String(word[range])", "    if word.isEmpty\
    \ {\n        return \"\"\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var find_vowel = false\n    var closest_vowel = \"\"\n    var index\
    \ = word.endIndex\n    while !find_vowel && index > word.startIndex {\n      \
    \  index = word.index(before: index)\n        if vowels.contains(String(word[index]))\
    \ {\n            find_vowel = true\n            closest_vowel = String(word[index])\n\
    \        }\n    }\n    return closest_vowel", "    var vowel = \"\"\n    var target_found\
    \ = false\n    for i in 0..<word.count {\n        if is_vowel(word[i]) {\n   \
    \         target_found = true\n            vowel = String(word[i])\n        }\
    \ else if target_found {\n            if i == word.count - 1 {\n             \
    \   return vowel\n            } else if is_vowel(word[i + 1]) {\n            \
    \    continue\n            } else {\n                return vowel\n          \
    \  }\n        }\n    }\n    return \"\"", "    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let word1 = word.lowercased()\n    var nextConsonant =\
    \ true\n    var found = \"\"\n    for i in 0...word1.count-1 {\n        let index\
    \ = word1.index(word1.startIndex, offsetBy: i)\n        let c = String(word1[index])\n\
    \        if vowels.contains(c) {\n            if nextConsonant {\n           \
    \     found = c\n                nextConsonant = false\n            }\n      \
    \  } else {\n            nextConsonant = true\n        }\n    }\n    return found",
  "\tlet vowels = \"AEIOUaeiou\"\n\tvar closest_vowel: String = \"\"\n\tfor i in 1..<word.count\
    \ {\n\t\tlet index = word.index(word.endIndex, offsetBy: -i)\n\t\tlet start_consonant\
    \ = word[word.index(before: index)]\n\t\tlet end_consonant = word[index]\n\t\t\
    if vowels.contains(start_consonant) == false && vowels.contains(end_consonant)\
    \ == false {\n\t\t\tfor j in 1..<i {\n\t\t\t\tlet vowel_index = word.index(word.endIndex,\
    \ offsetBy: -(i - j))\n\t\t\t\tlet vowel = word[vowel_index]\n\t\t\t\tif vowels.contains(vowel)\
    \ {\n\t\t\t\t\tclosest_vowel = String(vowel)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn closest_vowel", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let array = Array(word)\n   \
    \ var i = 0\n    for i in 0...array.count-1 {\n        if let _ = consonants.index(of:\
    \ String(array[i]).lowercased()) {\n            break\n        }\n    }\n    for\
    \ j in i+1...array.count-1 {\n        if let _ = vowels.index(of: String(array[j]).lowercased())\
    \ {\n            return String(array[j])\n        }\n    }\n    return \"\"",
  "    let word = word.lowercased()\n    var closest_vowel = \"\"\n    var closest_distance\
    \ = Int.max\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (i,\
    \ char) in word.characters.enumerated() {\n        // not vowel, but we're looking\
    \ for vowel, so skip\n        if !vowels.contains(String(char)) {\n          \
    \  continue\n        }\n        let prefix = String(word.characters.prefix(i))\n\
    \        let suffix = String(word.characters.suffix(word.characters.count - i))\n\
    \        // character is vowel, but it's in the beginning or end of the word,\
    \ skip\n        if !suffix.contains(\"a\") && !suffix.contains(\"e\") && !suffix.contains(\"\
    i\") && !suffix.contains(\"o\") && !suffix.contains(\"u\") {\n            continue\n\
    \        }\n        // we have both vowels and consonants, so we have a contender\n\
    \        let distance = word.characters.count - suffix.characters.count\n    \
    \    if distance < closest_distance {\n            closest_distance = distance\n\
    \            closest_vowel = String(char)\n        }\n    }\n    return closest_vowel",
  "    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n  \
    \  var result = \"\"\n    for (index, char) in word.enumerated() {\n        var\
    \ next_letter_consonant = false\n        if index < word.count - 1 {\n       \
    \     let next_letter = word[word.index(word.startIndex, offsetBy: index + 1)]\n\
    \            next_letter_consonant = consonants.contains(next_letter)\n      \
    \  }\n        if vowels.contains(char) && next_letter_consonant {\n          \
    \  result = String(char)\n            break\n        }\n    }\n    return result",
  "    let vowels = \"AEIOUaeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    let word_arr = Array(word)\n    var vowel_arr = [String]()\n    var consonant_arr\
    \ = [String]()\n    var result = \"\"\n    if vowels.contains(word[word.startIndex])\
    \ || vowels.contains(word[word.index(before: word.endIndex)]){\n        return\
    \ \"\"\n    }\n    for i in word_arr{\n        if vowels.contains(i){\n      \
    \      vowel_arr.append(String(i))\n        }\n        if consonants.contains(i){\n\
    \            consonant_arr.append(String(i))\n        }\n    }\n    for i in 0..<consonant_arr.count\
    \ - 1{\n        if consonant_arr[i] != consonant_arr[i + 1]{\n            result\
    \ = vowel_arr[i]\n            break\n        }\n    }\n    return result", " \
    \   var consonants = [String]()\n    var vowels = [String]()\n    let characters\
    \ = word.characters\n    for char in characters {\n        switch char {\n   \
    \     case \"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\":\n    \
    \        vowels.append(String(char))\n        default:\n            consonants.append(String(char))\n\
    \        }\n    }\n    var index = 0\n    for cons in consonants {\n        index\
    \ += 1\n        if let first = vowels.firstIndex(of: cons) {\n            return\
    \ vowels[first - index]\n        }\n    }\n    return \"\""]
stop_tokens:
- "\n}"
