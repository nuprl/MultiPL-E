name: HumanEval_97_multiply
language: swift
prompt: "\n/// Complete the function that takes two integers and returns \n/// the\
  \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19, b: 28)\n/// 72\n\
  /// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a: 14, b: -15)\n///\
  \ 20\nfunc multiply(a: Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
  \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
  \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
  \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
  \ == 0)"
completions: ["  let res = String(a * b).characters.map{Int(String($0))!}\n  return\
    \ res.count == 1 ? res[0] : res[1]", "  let aUnitDigit = a.magnitude.description.last!\n\
    \  let bUnitDigit = b.magnitude.description.last!\n  return aUnitDigit.wholeNumberValue!\
    \ * bUnitDigit.wholeNumberValue!", "    let n = String(a % 10)\n    let m = String(b\
    \ % 10)\n    return Int(n)! * Int(m)!", "  let left = a < 0 ? -a : a\n  let right\
    \ = b < 0 ? -b : b\n  return (left % 10) * (right % 10)", '    return a.digit().reversed().first!
    * b.digit().reversed().first!', '    return (a % 10) * (b % 10)', '    return
    (a * b) % 10', "    let unitA = a % 10\n    let unitB = b % 10\n    return unitA\
    \ * unitB", '    return (a % 10) * (b % 10)', '  return a%10 * b%10', "    let\
    \ a = String(a).map { Int(String($0))! }.last!\n    let b = String(b).map { Int(String($0))!\
    \ }.last!\n    return a * b", "    let unitDigitA = abs(a) % 10\n    let unitDigitB\
    \ = abs(b) % 10\n    return unitDigitA * unitDigitB", "    let singleDigitA =\
    \ getSingleDigit(a)\n    let singleDigitB = getSingleDigit(b)\n    return singleDigitA\
    \ * singleDigitB", "  let aUnitDigit = a % 10\n  let bUnitDigit = b % 10\n  return\
    \ aUnitDigit * bUnitDigit", "    var result = a * b\n    while result >= 10 {\n\
    \        result /= 10\n    }\n    return result", "    if a == 0 || b == 0 {\n\
    \        return 0\n    }\n    return ((a % 10) * (b % 10))", "    let a = (a %\
    \ 10) * (b % 10)\n    return a", "    let aUnitDigit = a % 10\n    let bUnitDigit\
    \ = b % 10\n    return aUnitDigit * bUnitDigit", '    return (a % 10) * (b % 10)',
  '    return [a, b].map { abs($0) % 10 }.reduce(1, *)', '    return (a * b) % 10',
  "    let n1 = String(a).map { Int(String($0))! }.last!\n    let n2 = String(b).map\
    \ { Int(String($0))! }.last!\n    return n1 * n2", "    let unitDigitA = a.remainderReportingOverflow(dividingBy:\
    \ 10).partialValue\n    let unitDigitB = b.remainderReportingOverflow(dividingBy:\
    \ 10).partialValue\n    return unitDigitA * unitDigitB", '    return abs(a % 10)
    * abs(b % 10)', "\tlet a = a < 0 ? a * -1 : a\n\tlet b = b < 0 ? b * -1 : b\n\t\
    return a % 10 * b % 10", '    return (a%10)*(b%10)', "    // your code\n    return\
    \ 0", "    let x = (abs(a % 10) * abs(b % 10))\n    return x > 9 ? x % 10 : x",
  '    return a % 10 * b % 10', "    var num1 = a\n    var num2 = b\n    if num1 <\
    \ 0 {\n        num1 *= -1\n    }\n    if num2 < 0 {\n        num2 *= -1\n    }\n\
    \    return (num1 % 10) * (num2 % 10)", "    let first = abs(a)\n    let second\
    \ = abs(b)\n    var result = (first % 10) * (second % 10)\n    return result",
  '    return 0', '    return abs(a % 10) * abs(b % 10)', "    let a = abs(a)\n  \
    \  let b = abs(b)\n    let a_u = a % 10\n    let b_u = b % 10\n    return a_u\
    \ * b_u", "    let prod = a * b\n    let unit = prod % 10\n    return unit", '    return
    abs(a%10) * abs(b%10)', "    let aLast = a % 10\n    let bLast = b % 10\n    return\
    \ aLast * bLast", "    let a = a.magnitude\n    let b = b.magnitude\n    return\
    \ (a % 10) * (b % 10)", "    let unitDigitA = a % 10\n    let unitDigitB = b %\
    \ 10\n    return unitDigitA * unitDigitB", "  let c = a * b\n  let digit = String(c).last!\n\
    \  return Int(String(digit))!", '    return (a * b) % 10', "    // implement this\
    \ function\n    return 0", "    let first = abs(a) % 10\n    let second = abs(b)\
    \ % 10\n    return first * second", "  var a = abs(a)\n  var b = abs(b)\n  if\
    \ a < 10 && b < 10 {\n    return a * b\n  }\n  if a < 10 {\n    b %= 10\n    return\
    \ a * b\n  }\n  if b < 10 {\n    a %= 10\n    return a * b\n  }\n  a %= 10\n \
    \ b %= 10\n  return a * b", "    // your code here\n    let nums = [a, b]\n  \
    \  let units = nums.map {\n        var x = $0\n        if x < 0 {\n          \
    \  x *= -1\n        }\n        return x % 10\n    }\n    return units[0] * units[1]",
  "    //go through each digit and add them up\n    let aStr = String(a)\n    let\
    \ bStr = String(b)\n    var aSum = 0\n    var bSum = 0\n    for i in aStr {\n\
    \        if i != \"-\" {\n            aSum += Int(String(i))!\n        }\n   \
    \ }\n    for i in bStr {\n        if i != \"-\" {\n            bSum += Int(String(i))!\n\
    \        }\n    }\n    return aSum * bSum", "    let a = a.abs\n    let b = b.abs\n\
    \    let result = a % 10 * b % 10\n    return result", '    return (a % 10) *
    (b % 10)', "  var left = a, right = b\n  return (left.digits.last ?? 1) * (right.digits.last\
    \ ?? 1)", "    let c = a * b\n    return c % 10", '    return (a%10)*(b%10)',
  "    let result = (a%10) * (b%10)\n    return result", "    let x = a\n    let y\
    \ = b\n    var first = 0\n    var second = 0\n    if a < 0 {\n        first =\
    \ (-a) % 10\n    } else {\n        first = a % 10\n    }\n    if b < 0 {\n   \
    \     second = (-b) % 10\n    } else {\n        second = b % 10\n    }\n    return\
    \ first * second", "    let aUnits = a < 0 ? -(a % 10) : a % 10\n    let bUnits\
    \ = b < 0 ? -(b % 10) : b % 10\n    return aUnits * bUnits", "    let (aa, bb)\
    \ = (a < 0 ? -a : a, b < 0 ? -b : b)\n    return ((aa % 10) * (bb % 10))", '  return
    (a % 10) * (b % 10)', "\tlet x = (a > 0) ? a : -a\n\tlet y = (b > 0) ? b : -b\n\
    \treturn (x % 10) * (y % 10)", '    return abs(a % 10) * abs(b % 10)', "    let\
    \ unitProduct = a * b\n    let unitDigit = unitProduct % 10\n    return unitDigit",
  "    var product = 0\n    switch (a, b) {\n    case (let x, let y) where x > 0 &&\
    \ y > 0:\n        product = (x % 10) * (y % 10)\n    case (let x, let y) where\
    \ x < 0 && y < 0:\n        product = (x % 10) * (y % 10)\n    case (let x, let\
    \ y) where x < 0 && y > 0:\n        product = (x % 10) * (y % 10)\n    case (let\
    \ x, let y) where x > 0 && y < 0:\n        product = (x % 10) * (y % 10)\n   \
    \ default:\n        product = 0\n    }\n    return product", "    let (n1, n2)\
    \ = (abs(a), abs(b))\n    let product = String(n1 * n2)\n    return Int(String(product.last!))!",
  "    let stringA = String(a), stringB = String(b)\n    let ansA = Int(String(stringA.last!))!\n\
    \    let ansB = Int(String(stringB.last!))!\n    return ansA * ansB", '    return
    0', "    let a = abs(a)\n    let b = abs(b)\n    let v = a % 10 * b % 10\n   \
    \ return v", '    return (abs(a) % 10) * (abs(b) % 10)', '    return (abs(a) %
    10) * (abs(b) % 10)', "    var product = 1\n    let firstInt = a % 10\n    let\
    \ secondInt = b % 10\n    product = firstInt * secondInt\n    return product",
  "    var a = abs(a)\n    var b = abs(b)\n    var res = 0\n    if a >= 10 {\n   \
    \     a %= 10\n    }\n    if b >= 10 {\n        b %= 10\n    }\n    res = a *\
    \ b\n    return res", "    let product = \"\\(a * b)\".compactMap { $0.wholeNumberValue\
    \ }\n    return product.count > 1 ? product[product.count - 2] * product[product.count\
    \ - 1] : product[0]", "    let aa = abs(a)\n    let bb = abs(b)\n    return (aa\
    \ % 10) * (bb % 10)", '    return -1', '    return abs(a%10) * abs(b%10)', " \
    \   var product = 1\n    for int in [a, b] {\n        if int == 0 {\n        \
    \    product = 0\n            break\n        }\n        let num = String(int).filter\
    \ { $0 != \"-\" }\n        product *= Int(String(num.last!))!\n    }\n    return\
    \ product", "    let aUnitDigit = a % 10\n    let bUnitDigit = b % 10\n    return\
    \ aUnitDigit * bUnitDigit", '    return abs(a % 10) * abs(b % 10)', "    let firstDigit\
    \ = a % 10\n    let secondDigit = b % 10\n    return firstDigit * secondDigit",
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let stringA\
    \ = String(a)\n    let stringB = String(b)\n    return Int(String(stringA.last!))!\
    \ * Int(String(stringB.last!))!", "    // TODO: Implement me\n    return 0", '    return
    abs(a % 10) * abs(b % 10)', "    let aString = \"\\(a)\"\n    let bString = \"\
    \\(b)\"\n    let a1 = aString.first\n    let b1 = bString.first\n    let a2 =\
    \ aString.last\n    let b2 = bString.last\n    let aInt = Int(String(a1!))\n \
    \   let bInt = Int(String(b1!))\n    let a2Int = Int(String(a2!))\n    let b2Int\
    \ = Int(String(b2!))\n    print(aInt, bInt, a2Int, b2Int)\n    return (aInt! *\
    \ bInt!) * (a2Int! * b2Int!)", '    return a.unitDigit * b.unitDigit', "    let\
    \ a = abs(a)\n    let b = abs(b)\n    let aMod10 = a % 10\n    let bMod10 = b\
    \ % 10\n    return aMod10 * bMod10", '    return (abs(a) % 10) * (abs(b) % 10)',
  '    return (abs(a) % 10) * (abs(b) % 10)', "    let unitOfA = a % 10\n    let unitOfB\
    \ = b % 10\n    return unitOfA * unitOfB", "    var product: Int = 0\n    product\
    \ = abs(a) % 10 * abs(b) % 10\n    return product", "    if a < 0 {\n        return\
    \ a * b % 10\n    }\n    return a * b % 10", '    return abs(a % 10) * abs(b %
    10)', "    let c = a * b\n    var d = c % 10\n    return d", '    return (a %
    10) * (b % 10)', "    //your code here\n    let first = a % 10\n    let second\
    \ = b % 10\n    return first * second", "    let aUnits = abs(a) % 10\n    let\
    \ bUnits = abs(b) % 10\n    return aUnits * bUnits", "    let aDigit = a % 10\n\
    \    let bDigit = b % 10\n    return aDigit * bDigit", "    let abs = a * b\n\
    \    let absStr = String(abs)\n    let digit = Int(String(absStr.last!))!\n  \
    \  return digit", "    // should return product of last digits of `a` and `b`\n\
    \    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)', "    let aStr\
    \ = String(a)\n    let bStr = String(b)\n    let aUnit = Int(String(aStr.last!))!\n\
    \    let bUnit = Int(String(bStr.last!))!\n    return aUnit * bUnit", '  return
    (a % 10) * (b % 10)', "    var aDigits = [Int]()\n    var bDigits = [Int]()\n\
    \    if a < 0 {\n        aDigits.append(-1)\n    }\n    if b < 0 {\n        bDigits.append(-1)\n\
    \    }\n    aDigits.append(abs(a) % 10)\n    bDigits.append(abs(b) % 10)\n   \
    \ let result = aDigits.reduce(1, *) * bDigits.reduce(1, *)\n    return result",
  "    let x = a > 0 ? a : -a\n    let y = b > 0 ? b : -b\n    let c = x % 10 * y\
    \ % 10\n    return c", '    return abs(a % 10) * abs(b % 10)', '    return (a
    % 10) * (b % 10)', '    return a % 10 * b % 10', '    return (a % 10) * (b % 10)',
  "    let aUnitDigit = abs(a) % 10\n    let bUnitDigit = abs(b) % 10\n    return\
    \ aUnitDigit * bUnitDigit", '    return ((a % 10) * (b % 10))', '    return (a
    % 10) * (b % 10)', '    return ((a % 10) * (b % 10)).abs', '    return (a * b)
    % 10', "    let number1 = String(abs(a))\n    let number2 = String(abs(b))\n \
    \   return Int(String(number1.last!))! * Int(String(number2.last!))!", "    var\
    \ a = a, b = b\n    if a < 0 { a *= -1 }\n    if b < 0 { b *= -1 }\n    return\
    \ (a % 10) * (b % 10)", "    var res = 0, first = a, second = b\n    if a < 0\
    \ {\n        first = -a\n    }\n    if b < 0 {\n        second = -b\n    }\n \
    \   res = (first % 10) * (second % 10)\n    return res", '    return (abs(a %
    10) * abs(b % 10))', "    let units = [\n        a % 10,\n        b % 10\n   \
    \ ]\n    return units.reduce(1, *)", "    var result = 0\n    let arr = [a, b]\n\
    \    for x in arr {\n        let res = abs(x) % 10\n        if result == 0 {\n\
    \            result = res\n        } else {\n            result *= res\n     \
    \   }\n    }\n    return result", '    return (a%10) * (b%10)', "    // Solution\n\
    \    // let a = String(abs(a))\n    // let b = String(abs(b))\n    // return Int(String(a.last!))!\
    \ * Int(String(b.last!))!\n    // Or\n    return (abs(a) % 10) * (abs(b) % 10)",
  '    return abs(a % 10) * abs(b % 10)', '    return abs(a) % 10 * abs(b) % 10',
  '    return (abs(a) % 10) * (abs(b) % 10)', "    var res = 0\n    var a = a\n  \
    \  var b = b\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b\
    \ = -b\n    }\n    if a < 10 && b < 10 {\n        res = a * b\n    } else {\n\
    \        while a > 10 {\n            a /= 10\n        }\n        while b > 10\
    \ {\n            b /= 10\n        }\n        res = a * b\n    }\n    return res",
  "    let product = (a * b) % 10\n    return product", "    let (x, y) = (abs(a),\
    \ abs(b))\n    return (x%10) * (y%10)", '    return ((a % 10) * (b % 10))', '    return
    (a % 10) * (b % 10)', "    let prod = a * b\n    return prod % 10", '    return
    ((abs(a) % 10) * (abs(b) % 10))', "    let ints = [a, b].map { $0 < 0 ? $0 * -1\
    \ : $0 }\n    let unitDigits = ints.map { $0 % 10 }\n    return unitDigits.reduce(1,\
    \ *)", "    let unitDigitA = a % 10\n    let unitDigitB = b % 10\n    return unitDigitA\
    \ * unitDigitB", '    return (a * b) % 10', "  let a = abs(a), b = abs(b)\n  let\
    \ m = a % 10, n = b % 10\n  return m * n", "    var a = a\n    var b = b\n   \
    \ a = a < 0 ? -a : a\n    b = b < 0 ? -b : b\n    return (a % 10) * (b % 10)",
  '    return abs(a) % 10 * abs(b) % 10', "    let x = (a % 10) * (b % 10)\n    return\
    \ x", "    let aa = String(abs(a))\n    let bb = String(abs(b))\n    let ai =\
    \ Int(String(aa.last!))!\n    let bi = Int(String(bb.last!))!\n    return ai *\
    \ bi", "    let abProduct = (a * b) % 10\n    return abProduct", "\treturn abs(a\
    \ % 10) * abs(b % 10)", '    return abs(a) % 10 * abs(b) % 10', "    let a = Array(String(a)).map({\
    \ Int(String($0))! })\n    let b = Array(String(b)).map({ Int(String($0))! })\n\
    \    return a.last! * b.last!", "    var aRemainder = a % 10\n    var bRemainder\
    \ = b % 10\n    var result = aRemainder * bRemainder\n    return result", "  \
    \  var unitA = a % 10\n    var unitB = b % 10\n    if unitA < 0 {\n        unitA\
    \ = abs(unitA)\n    }\n    if unitB < 0 {\n        unitB = abs(unitB)\n    }\n\
    \    return unitA * unitB", "    var val: Int = 0\n    val = (abs(a) % 10) * (abs(b)\
    \ % 10)\n    return val", '    return (a % 10) * (b % 10)', '    return [a, b].map{
    abs($0 % 10) }.reduce(1, *)', "    let result = a * b\n    let lastDigit = result.lastDigit\n\
    \    return lastDigit", '    return (a % 10) * (b % 10)', "    let (first, second)\
    \ = (a % 10, b % 10)\n    return first * second", "    let x = (a > 0) ? a : -a\n\
    \    let y = (b > 0) ? b : -b\n    return (x % 10) * (y % 10)", '    return (a%10)
    * (b%10)', "  return String(a).last.flatMap { String($0).asInt }\n    ?? 1 * String(b).last.flatMap\
    \ { String($0).asInt }\n    ?? 1", "    var result = 1\n    if a >= 0 && b >=\
    \ 0 {\n        result = (a % 10) * (b % 10)\n    } else if a < 0 && b < 0 {\n\
    \        result = ((a * -1) % 10) * ((b * -1) % 10)\n    } else if a >= 0 && b\
    \ < 0 {\n        result = (a % 10) * ((b * -1) % 10)\n    } else if a < 0 && b\
    \ >= 0 {\n        result = ((a * -1) % 10) * (b % 10)\n    }\n    return result",
  "    let unitA = a % 10\n    let unitB = b % 10\n    return unitA * unitB", "  \
    \  let product = a * b\n    let digits = product > 0 ? product.digits : (product\
    \ * -1).digits\n    return digits.count == 1 ? digits[0] : digits[1]", "    var\
    \ a = abs(a)\n    var b = abs(b)\n    var product = 1\n    while a > 0 {\n   \
    \     product *= a % 10\n        a /= 10\n    }\n    while b > 0 {\n        product\
    \ *= b % 10\n        b /= 10\n    }\n    return product % 10", "    func getLastDigit(from\
    \ integer: Int) -> Int {\n        return abs(integer % 10)\n    }\n    return\
    \ getLastDigit(from: a) * getLastDigit(from: b)", '    return a.unitDigit * b.unitDigit',
  "    let product = (a * b) % 10\n    return product", '    return abs(a % 10) *
    abs(b % 10)', "    let a = a%10, b = b%10\n    return a*b", '    return (a % 10)
    * (b % 10)', '    return abs(a % 10) * abs(b % 10)', '    return (a * b) % 10',
  "  return (String(a).last ?? \"0\")\n    .unicodeScalars\n    .first?\n    .value\n\
    \    .multipliedReportingOverflow(by: \n      (String(b).last ?? \"0\")\n    \
    \    .unicodeScalars\n        .first?\n        .value\n    )\n    .partialValue\n\
    \    ?? 0", "    let strA = a.description\n    let strB = b.description\n    return\
    \ Int(String(strA.last!))! * Int(String(strB.last!))!", "    let x = abs(a) %\
    \ 10\n    let y = abs(b) % 10\n    return x * y", "  let aArray = Array(String(a))\n\
    \  let bArray = Array(String(b))\n  return Int(String(aArray[aArray.count - 1]))!\
    \ * Int(String(bArray[bArray.count - 1]))!", '    return (a % 10) * (b % 10)',
  '    return (a.description.last ?? "0").wholeNumberValue! * (b.description.last
    ?? "0").wholeNumberValue!', '    return abs(a) % 10 * abs(b) % 10', "    let unitsA\
    \ = Int(String(a).last!)!\n    let unitsB = Int(String(b).last!)!\n    return\
    \ unitsA * unitsB", "    let firstNumber = a % 10\n    let secondNumber = b %\
    \ 10\n    return firstNumber * secondNumber", '    return abs(a % 10) * abs(b
    % 10)', '    return (a % 10) * (b % 10)', "    let unitA = a % 10\n    let unitB\
    \ = b % 10\n    return unitA * unitB", "    let aLastDigit = a % 10\n    let bLastDigit\
    \ = b % 10\n    return aLastDigit * bLastDigit", "    let x = (a % 10) * (b %\
    \ 10)\n    return x", '    return (a % 10) * (b % 10)', '  return (abs(a) % 10)
    * (abs(b) % 10)', "\tlet x = String(a).map { String($0) }.last!\n\tlet y = String(b).map\
    \ { String($0) }.last!\n\treturn Int(x)! * Int(y)!", "    let nums = [a, b].map\
    \ { abs($0) }\n    return nums.reduce(1) { $0 * $1 % 10 }", '    return abs(a
    % 10) * abs(b % 10)', "    // enter code here\n    let a = a % 10\n    let b =\
    \ b % 10\n    return a * b", "    let aUnitDigit = a % 10\n    let bUnitDigit\
    \ = b % 10\n    return aUnitDigit * bUnitDigit", '    return abs(a % 10) * abs(b
    % 10)', "    let a1 = a % 10\n    let b1 = b % 10\n    return a1 * b1", "    var\
    \ newA = a\n    var newB = b\n    if a < 0 {\n        newA = -a\n    }\n    if\
    \ b < 0 {\n        newB = -b\n    }\n    let product = (newA % 10) * (newB % 10)\n\
    \    return product", '  return abs(a) % 10 * abs(b) % 10', "    let a = String(a).characters.last!.wholeNumberValue!\n\
    \    let b = String(b).characters.last!.wholeNumberValue!\n    return a * b",
  '    return (a * b) % 10', '    return (a % 10) * (b % 10)', "    let aUnitDigit\
    \ = a % 10\n    let bUnitDigit = b % 10\n    return aUnitDigit * bUnitDigit",
  "    let (a, b) = (abs(a), abs(b))\n    let aDigit = a % 10\n    let bDigit = b\
    \ % 10\n    return aDigit * bDigit", "    let a = abs(a), b = abs(b)\n    return\
    \ (a%10) * (b%10)", "    // Get the unit digit of 'a' and 'b'\n    let aUnitDigit\
    \ = abs(a % 10)\n    let bUnitDigit = abs(b % 10)\n    \n    // Multiply both\
    \ of them\n    return aUnitDigit * bUnitDigit", '  return String(a % 10 * b %
    10).compactMap { Int(String($0)) }.first ?? 0', "    let unitA = a % 10\n    let\
    \ unitB = b % 10\n    return unitA * unitB", "    var aString = String(a)\n  \
    \  var bString = String(b)\n    aString = aString.trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \"-0\"))\n    bString = bString.trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \"-0\"))\n    var aInt = Int(aString)!\n    var bInt = Int(bString)!\n    if\
    \ aInt < 0 {\n        aInt = -aInt\n    }\n    if bInt < 0 {\n        bInt = -bInt\n\
    \    }\n    return (aInt % 10) * (bInt % 10)", '    return (a % 10) * (b % 10)']
stop_tokens:
- "\n}"
