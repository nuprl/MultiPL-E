name: HumanEval_88_sort_array
language: swift
prompt: "\n/// Given an array of non-negative integers, return a coswift of the given\
  \ array after sorting,\n/// you will sort the given array in ascending order if\
  \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n/// Note:\n///\
  \ * don't change the given array.\n/// Examples:\n/// >>> sort_array(array: [] as\
  \ [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n/// >>> sort_array(array:\
  \ [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array: [2, 4,\
  \ 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as\
  \ [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4,\
  \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
  \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\n\
  assert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
  assert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
completions: ["    guard array.count > 1 else { return array }\n    var result = array\n\
    \    for index in 0..<array.count {\n        for j in 0..<(array.count - index\
    \ - 1) {\n            if result[j] < result[j + 1] {\n                result.swapAt(j,\
    \ j + 1)\n            }\n        }\n    }\n    if array.first! + array.last! %\
    \ 2 == 0 {\n        return result\n    } else {\n        return result.reversed()\n\
    \    }", "    guard array.count > 0 else { return array }\n    let even = array.count\
    \ % 2 == 0\n    let sorted = array.sorted()\n    if even {\n        return sorted.reversed()\n\
    \    } else {\n        return sorted\n    }", "    var temp = array\n    let count\
    \ = temp.count\n    if count == 0 {\n        return temp\n    }\n    let sum =\
    \ temp[0] + temp[count - 1]\n    var flag = true\n    if sum % 2 == 0 {\n    \
    \    flag = false\n    }\n    for i in 0..<count {\n        for j in i..<count\
    \ {\n            if flag {\n                if temp[i] > temp[j] {\n         \
    \           let swap = temp[i]\n                    temp[i] = temp[j]\n      \
    \              temp[j] = swap\n                }\n            } else {\n     \
    \           if temp[i] < temp[j] {\n                    let swap = temp[i]\n \
    \                   temp[i] = temp[j]\n                    temp[j] = swap\n  \
    \              }\n            }\n        }\n    }\n    return temp", '    return
    []', "    var array = array\n    let sum = array.first! + array.last!\n    if\
    \ sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array", "    var odd_array: [Int] = []\n    var even_array:\
    \ [Int] = []\n    array.forEach { item in\n        if item % 2 == 0 {\n      \
    \      even_array.append(item)\n        } else {\n            odd_array.append(item)\n\
    \        }\n    }\n    var result_array: [Int] = []\n    if !odd_array.isEmpty\
    \ {\n        odd_array.sort()\n        result_array.append(contentsOf: odd_array)\n\
    \    }\n    if !even_array.isEmpty {\n        even_array.sort()\n        even_array.reverse()\n\
    \        result_array.append(contentsOf: even_array)\n    }\n    return result_array",
  "    var array = array\n    if array.count < 2 {\n        return array\n    }\n\
    \    if array.count > 2 {\n        let sum = array[0] + array[array.count - 1]\n\
    \        if sum.isMultiple(of: 2) {\n            array.sort(by: >)\n        }\
    \ else {\n            array.sort(by: <)\n        }\n    } else {\n        if array[0]\
    \ > array[1] {\n            let item = array[0]\n            array[0] = array[1]\n\
    \            array[1] = item\n        }\n    }\n    return array", '    return
    array', "    let sum = array.first ?? 0 + array.last ?? 0\n    return sum % 2\
    \ == 0 ? array.sorted(by: >) : array.sorted()", '    return array', "    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            return [array[1], array[0]]\n        }\n        return array\n  \
    \  }\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        return sort_array(array:\
    \ array[1..<array.count-1]) + [array[0]] + [array[array.count - 1]]\n    }\n \
    \   return [array[array.count - 1]] + sort_array(array: array[1..<array.count-1])\
    \ + [array[0]]", "    if array.count == 0 {\n        return array\n    }\n   \
    \ let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n       \
    \ return array.sorted(by: >)\n    } else {\n        return array.sorted()\n  \
    \  }", "    if array.count < 2 {\n        return array\n    } else {\n       \
    \ return array.sorted(by: { (left, right) -> Bool in\n            if (left + right)\
    \ % 2 == 0 {\n                return left > right\n            } else {\n    \
    \            return left < right\n            }\n        })\n    }", "  guard\
    \ array.count > 0 else { return array }\n  var results = array\n  let index =\
    \ results.count / 2\n  if results[0] + results[results.count - 1] % 2 == 0 {\n\
    \    for i in 1..<index {\n      let temp = results[i]\n      results[i] = results[results.count\
    \ - i]\n      results[results.count - i] = temp\n    }\n  }\n  return results",
  "    if array.count == 0 {\n        return array\n    }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let isOdd = sum % 2 == 1\n    var tempArray =\
    \ array\n    for i in 0..<tempArray.count - 1 {\n        for j in (i + 1)..<tempArray.count\
    \ {\n            if isOdd {\n                if tempArray[i] > tempArray[j] {\n\
    \                    tempArray.swapAt(i, j)\n                }\n            }\
    \ else {\n                if tempArray[i] < tempArray[j] {\n                 \
    \   tempArray.swapAt(i, j)\n                }\n            }\n        }\n    }\n\
    \    return tempArray", "    guard array.count > 0 else { return array }\n   \
    \ let sum = array[0] + array[array.count - 1]\n    let ascending = sum % 2 ==\
    \ 0\n    var sorted = array.sorted(by: { $0 < $1 })\n    if !ascending {\n   \
    \     sorted = sorted.reversed()\n    }\n    return sorted", "    guard array.count\
    \ > 1 else { return array }\n    return array.enumerated().sorted { (a, b) ->\
    \ Bool in\n        let firstIndex = array[a.offset]\n        let lastIndex = array[b.offset]\n\
    \        return firstIndex.addingReportingOverflow(lastIndex).partialValue % 2\
    \ == 0 ? a.element > b.element : a.element < b.element\n    }.map { $0.element\
    \ }", '  return []', "    var result: [Int] = array\n    if result.count > 0 {\n\
    \        if (result[0] + result[result.count - 1]) % 2 == 0 {\n            result.sort\
    \ {\n                $0 > $1\n            }\n        } else {\n            result.sort\
    \ {\n                $0 < $1\n            }\n        }\n    }\n    return result",
  "    var array = array\n    for i in 0..<array.count - 1 {\n        for j in (i\
    \ + 1)..<array.count {\n            if array[i] % 2 == array[j] % 2 {\n      \
    \          if array[i] > array[j] {\n                    (array[i], array[j])\
    \ = (array[j], array[i])\n                }\n            } else {\n          \
    \      if array[i] % 2 == 0 {\n                    (array[i], array[j]) = (array[j],\
    \ array[i])\n                }\n            }\n        }\n    }\n    return array",
  "    if array.count < 2 {\n        return array\n    }\n    var result = array\n\
    \    let firstIndex = array[0]\n    let lastIndex = array[array.count - 1]\n \
    \   let totalIndex = firstIndex + lastIndex\n    let isOdd = totalIndex % 2 ==\
    \ 1\n    if isOdd {\n        result.sort(by: <)\n    } else {\n        result.sort(by:\
    \ >)\n    }\n    return result", '    return array', "    var new_array = array\n\
    \    var range: CountableClosedRange<Int>\n    if array.count == 0 {\n       \
    \ return array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n\
    \        range = (0...(array.count - 1)).reversed()\n    } else {\n        range\
    \ = 0...(array.count - 1)\n    }\n    for i in range {\n        if i % 2 == 1\
    \ {\n            new_array.insert(array[i], at: 0)\n        }\n    }\n    return\
    \ new_array", "    // Write your implementation here.\n    let result = array.filter{\
    \ $0 % 2 != 0 }.sorted(by: <) + array.filter{ $0 % 2 == 0 }.sorted(by: >)\n  \
    \  return array.enumerated().sorted(by: { $0.0 + $0.1 < $1.0 + $1.1 }).map{ result[$0.0]\
    \ }", '    return []', "    guard array.count > 1 else { return array }\n    var\
    \ temp = array\n    let index = array.count - 1\n    if (array[0] + array[index])\
    \ % 2 == 0 {\n        temp.sort(by: >)\n    } else {\n        temp.sort(by: <)\n\
    \    }\n    return temp", "    if array.count == 0 {\n        return array\n \
    \   }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        return array.sorted()\n    }\n    let f: Int = array[0]\n  \
    \  let l: Int = array[array.count - 1]\n    if (f + l) % 2 == 0 {\n        return\
    \ sort_descending(array: array)\n    } else {\n        return sort_ascending(array:\
    \ array)\n    }", "    guard array.count > 1 else { return array }\n    if (array.first!\
    \ + array.last!) % 2 == 0 {\n        return array.sorted(by: >)\n    } else {\n\
    \        return array.sorted()\n    }", "    if array.count == 0 {\n        return\
    \ array\n    }\n    var tempArray = array\n    var startIndex = 0\n    var endIndex\
    \ = tempArray.count - 1\n    var isAscending = true\n    let isLastEven = array.last!\
    \ % 2 == 0\n    if isLastEven {\n        isAscending = false\n    }\n    while\
    \ startIndex < endIndex {\n        let startNum = tempArray[startIndex]\n    \
    \    let endNum = tempArray[endIndex]\n        let startIsEven = startNum % 2\
    \ == 0\n        let endIsEven = endNum % 2 == 0\n        if (isAscending && startIsEven)\
    \ || (!isAscending && !startIsEven) {\n            startIndex += 1\n        }\
    \ else if (isAscending && endIsEven) || (!isAscending && !endIsEven) {\n     \
    \       endIndex -= 1\n        } else {\n            tempArray.swapAt(startIndex,\
    \ endIndex)\n            startIndex += 1\n            endIndex -= 1\n        }\n\
    \    }\n    return isAscending ? tempArray.sorted() : tempArray.sorted(by: >)",
  "    let array = array.sorted()\n    if array.isEmpty {\n        return array\n\
    \    }\n    var sortedArray = array\n    var firstIndex = 0\n    var lastIndex\
    \ = array.count - 1\n    if (array[firstIndex] + array[lastIndex]) % 2 == 0 {\n\
    \        while firstIndex < lastIndex {\n            sortedArray[firstIndex] =\
    \ array[lastIndex]\n            sortedArray[lastIndex] = array[firstIndex]\n \
    \           firstIndex += 1\n            lastIndex -= 1\n        }\n    }\n  \
    \  return sortedArray", "    guard !array.isEmpty else { return array }\n    guard\
    \ array.count > 1 else { return array }\n    var sortedArray = array\n    var\
    \ begin = 0\n    var end = sortedArray.count - 1\n    let isOddSum = sortedArray[begin]\
    \ + sortedArray[end] % 2 == 1\n    while begin < end {\n        while isOddSum\
    \ && sortedArray[begin] % 2 == 1 {\n            begin += 1\n        }\n      \
    \  while !isOddSum && sortedArray[end] % 2 == 0 {\n            end -= 1\n    \
    \    }\n        if begin < end {\n            sortedArray.swapAt(begin, end)\n\
    \        }\n    }\n    if isOddSum {\n        sortedArray.insert(contentsOf: sortedArray[begin...].sorted(by:\
    \ >), at: begin)\n        sortedArray.removeSubrange(begin + 1 ... end)\n    }\
    \ else {\n        sortedArray.insert(contentsOf: sortedArray[0...begin].sorted(by:\
    \ >), at: end + 1)\n        sortedArray.removeSubrange(0 ... begin)\n    }\n \
    \   return sortedArray", '    return array.sorted(by: is_even(array: array))',
  "    guard array.count > 1 else { return array }\n    var sortedArray = array\n\
    \    let oddArray = sortedArray.filter { $0 % 2 != 0 }.sorted(by: <)\n    let\
    \ evenArray = sortedArray.filter { $0 % 2 == 0 }.sorted(by: >)\n    let combinationArray\
    \ = oddArray + evenArray\n    for (index, number) in combinationArray.enumerated()\
    \ {\n        sortedArray[index] = number\n    }\n    return sortedArray", "  \
    \  // Your code here.\n    return []", "    return array.sorted { (lhs, rhs) ->\
    \ Bool in\n        return lhs + rhs.advanced(by: array.count - 1) % 2 == 0\n \
    \   }", "    var array = array\n    guard array.count > 0 else { return array\
    \ }\n    guard array.count > 1 else { return array }\n    let sum = array[0] +\
    \ array[array.count - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n \
    \   } else {\n        array.sort(by: <)\n    }\n    return array", "    if array.count\
    \ < 2 {\n        return array\n    }\n    var sorted = array\n    var lo = 0\n\
    \    var hi = sorted.count - 1\n    var isAscending = (sorted[lo] + sorted[hi])\
    \ % 2 == 1\n    while lo < hi {\n        let a = sorted[lo]\n        let b = sorted[hi]\n\
    \        if (a + b) % 2 == 1 {\n            if isAscending {\n               \
    \ sorted[lo] = min(a, b)\n                sorted[hi] = max(a, b)\n           \
    \ } else {\n                sorted[lo] = max(a, b)\n                sorted[hi]\
    \ = min(a, b)\n            }\n            isAscending = !isAscending\n       \
    \ }\n        lo += 1\n        hi -= 1\n    }\n    return sorted", "    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        return array[0] < array[1]\
    \ ? array : array.reversed()\n    }\n    var array = array\n    var i = 0\n  \
    \  var j = array.count - 1\n    while i < j {\n        while i < j && i + j %\
    \ 2 == 1 {\n            j -= 1\n        }\n        while i < j && i + j % 2 ==\
    \ 0 {\n            i += 1\n        }\n        if i < j {\n            let temp\
    \ = array[i]\n            array[i] = array[j]\n            array[j] = temp\n \
    \       }\n    }\n    return array", "    var sorted_array = array\n    let is_even\
    \ = (array.first! + array.last!) % 2 == 0\n    sorted_array.sort(by: { (a, b)\
    \ -> Bool in\n        if is_even {\n            return a > b\n        } else {\n\
    \            return a < b\n        }\n    })\n    return sorted_array", "    //\
    \ TODO: Write some code to solve this coding problem\n    let sum = array.first!\
    \ + array.last!\n    var result = array\n    if sum.isMultiple(of: 2) {\n    \
    \    result.sort()\n    } else {\n        result.sort(by: >)\n    }\n    return\
    \ result", "    if (array.isEmpty) {\n        return array\n    }\n    if (array.count\
    \ == 1) {\n        return array\n    }\n    var sortArray = array\n    var isEven\
    \ = false\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        isEven\
    \ = true\n    }\n    sortArray.sort { (a, b) -> Bool in\n        if isEven {\n\
    \            return a > b\n        } else {\n            return a < b\n      \
    \  }\n    }\n    return sortArray", "    guard array.count > 1 else { return array\
    \ }\n    let sum = array[0] + array[array.count - 1]\n    var tempArray = array\n\
    \    if sum % 2 == 0 {\n        tempArray.sort(by: >)\n    } else {\n        tempArray.sort(by:\
    \ <)\n    }\n    return tempArray", "    if array.count == 0 {\n        return\
    \ array\n    }\n    var result = array\n    var temp: Int\n    for i in 0..<result.count\
    \ {\n        for j in 0..<result.count - 1 - i {\n            let sum_even_odd\
    \ = (result[j] + result[j + 1]) % 2\n            if sum_even_odd == 0 {\n    \
    \            if result[j] < result[j + 1] {\n                    temp = result[j]\n\
    \                    result[j] = result[j + 1]\n                    result[j +\
    \ 1] = temp\n                }\n            } else {\n                if result[j]\
    \ > result[j + 1] {\n                    temp = result[j]\n                  \
    \  result[j] = result[j + 1]\n                    result[j + 1] = temp\n     \
    \           }\n            }\n        }\n    }\n    return result", "    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    let first = array[0]\n    let last = array[array.count - 1]\n\
    \    if (first + last) % 2 == 0 {\n        return array.sorted(by: >)\n    } else\
    \ {\n        return array.sorted(by: <)\n    }", "    if array.count < 2 {\n \
    \       return array\n    }\n    let oddArray = array.filter { $0 % 2 == 1 }.sorted()\n\
    \    let evenArray = array.filter { $0 % 2 == 0 }.sorted().reversed()\n    var\
    \ result = [Int]()\n    for i in 0..<array.count {\n        if array[i] % 2 ==\
    \ 1 {\n            result.append(oddArray[i])\n        } else {\n            result.append(evenArray[i])\n\
    \        }\n    }\n    return result", "    guard !array.isEmpty else { return\
    \ array }\n    guard array.count > 1 else { return array }\n    var temp_array\
    \ = array\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        temp_array.sort(by:\
    \ >)\n    } else {\n        temp_array.sort(by: <)\n    }\n    return temp_array",
  "    // your code here\n    return []", "    guard array.count > 1 else { return\
    \ array }\n    let sort = array.sorted()\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? sort.reversed() : sort", '    return []', "    \n \
    \   guard array.count > 0 else {\n        return array\n    }\n    \n    let array1\
    \ = array.sorted(by: <)\n    let array2 = array.sorted(by: >)\n    \n    return\
    \ array[0] + array[array.count - 1] % 2 == 0 ? array2 : array1", "    return array.count\
    \ <= 1 ? array :\n        array.reduce((odd: [Int](), even: [Int]())) { (result,\
    \ item) in\n            return item % 2 == 0 ?\n                (result.odd, result.even\
    \ + [item]) :\n                (result.odd + [item], result.even)\n        }.reduce(([Int](),\
    \ false)) { (result, item) in\n            return result.1 ?\n               \
    \ (result.0 + item.sorted(by: <), true) :\n                (result.0 + item.sorted(by:\
    \ >), false)\n        }.0", "    \n    if array.count < 2 {\n        return array\n\
    \    }\n    \n    let sum = array[0] + array[array.count - 1]\n    let newArray\
    \ = array.sorted { (first, second) -> Bool in\n        if sum % 2 == 0 {\n   \
    \         return first > second\n        } else {\n            return first <\
    \ second\n        }\n    }\n    return newArray", "    return array.sorted(by:\
    \ { (a, b) -> Bool in\n        return (a + b) % 2 == 0 ? a > b : a < b\n    })",
  "    var temp_array = array\n    for i in 0 ..< temp_array.count {\n        for\
    \ j in 0 ..< temp_array.count - 1 {\n            if (i + j) % 2 == 0 {\n     \
    \           if temp_array[j] > temp_array[j + 1] {\n                    let temp\
    \ = temp_array[j]\n                    temp_array[j] = temp_array[j + 1]\n   \
    \                 temp_array[j + 1] = temp\n                }\n            } else\
    \ {\n                if temp_array[j] < temp_array[j + 1] {\n                \
    \    let temp = temp_array[j]\n                    temp_array[j] = temp_array[j\
    \ + 1]\n                    temp_array[j + 1] = temp\n                }\n    \
    \        }\n        }\n    }\n    return temp_array", "    var array = array\n\
    \    let firstIndexValue = array.first ?? 0\n    let lastIndexValue = array.last\
    \ ?? 0\n    // Check the sum( first index value, last index value)\n    if (firstIndexValue\
    \ + lastIndexValue) % 2 == 0 {\n        // Sort it in descending order\n     \
    \   array.sort(by: >)\n    } else {\n        // Sort it in ascending order\n \
    \       array.sort(by: <)\n    }\n    return array", '  return array', '    return
    []', "    guard array.count > 0 else { return array }\n    guard array.count >\
    \ 1 else { return array }\n    if (array[0] + array[array.count - 1]) % 2 == 0\
    \ {\n        return array.sorted(by: >)\n    } else {\n        return array.sorted()\n\
    \    }", "    var clonearray = array\n    for i in 0..<array.count {\n       \
    \ for j in 0..<array.count - 1 {\n            let ijSum = clonearray[i] + clonearray[j]\n\
    \            if ijSum % 2 == 0 {\n                let temp = clonearray[i]\n \
    \               clonearray[i] = clonearray[j]\n                clonearray[j] =\
    \ temp\n            }\n        }\n    }\n    return clonearray", "    if array.count\
    \ == 0 {\n        return array\n    }\n    var array2 = array\n    var i = 0\n\
    \    var j = array.count - 1\n    var tmp = 0\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        while i < j {\n            while array2[i] % 2 ==\
    \ 0 {\n                i += 1\n            }\n            while array2[j] % 2\
    \ == 1 {\n                j -= 1\n            }\n            if i < j {\n    \
    \            tmp = array2[i]\n                array2[i] = array2[j]\n        \
    \        array2[j] = tmp\n            }\n        }\n        array2.sort(by: >)\n\
    \    } else {\n        while i < j {\n            while array2[i] % 2 == 1 {\n\
    \                i += 1\n            }\n            while array2[j] % 2 == 0 {\n\
    \                j -= 1\n            }\n            if i < j {\n             \
    \   tmp = array2[i]\n                array2[i] = array2[j]\n                array2[j]\
    \ = tmp\n            }\n        }\n        array2.sort(by: <)\n    }\n    return\
    \ array2", "    var result = array\n    if array.count <= 1 {\n        return\
    \ result\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n     \
    \   result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n    return\
    \ result", "    guard array.count >= 2 else { return array }\n    return array.enumerated().sorted(by:\
    \  {\n        if ($0.offset + array.count) % 2 == 1 && ($1.offset + array.count)\
    \ % 2 == 1 {\n            return $0.element < $1.element\n        } else if ($0.offset\
    \ + array.count) % 2 == 0 && ($1.offset + array.count) % 2 == 0 {\n          \
    \  return $0.element > $1.element\n        } else {\n            return $0.offset\
    \ < $1.offset\n        }\n    }).map{ $0.element }", "    var myArray = array\n\
    \    var right = myArray.count - 1\n    if right == 0 {\n        return myArray\n\
    \    }\n    if array[0] % 2 == array[right] % 2 {\n        if array[0] % 2 ==\
    \ 0 {\n            myArray.sort(by: { $0 > $1 })\n        } else {\n         \
    \   myArray.sort(by: { $0 < $1 })\n        }\n    }\n    return myArray", "  \
    \  guard array.count > 1 else { return array }\n    let isOdd = (array.first!\
    \ + array.last!) % 2 == 1\n    let sorted = array.sorted()\n    if isOdd {\n \
    \       return sorted\n    } else {\n        return sorted.reversed()\n    }",
  "    var newArray = array\n    var index = 0\n    var lastIndex = newArray.count\
    \ - 1\n    var isOdd = false\n    if (newArray.count > 1) {\n        isOdd = (newArray[0]\
    \ + newArray[lastIndex]) % 2 == 1\n    }\n    while index < lastIndex {\n    \
    \    while newArray[index] % 2 == 1 && isOdd {\n            index += 1\n     \
    \   }\n        while newArray[lastIndex] % 2 == 0 && isOdd {\n            lastIndex\
    \ -= 1\n        }\n        if index < lastIndex {\n            newArray.swapAt(index,\
    \ lastIndex)\n        }\n    }\n    return isOdd ? newArray.sorted() : newArray.sorted().reversed()",
  "    let sorted = array.sorted()\n    if array.count > 0 && (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        return sorted.reversed()\n    }\n    return sorted",
  "    if array.count <= 1 {\n        return array\n    }\n    if array.reduce(0,\
    \ +) % 2 == 0 {\n        return array.sorted(by: >)\n    }\n    return array.sorted()",
  "    if array.count <= 1 {\n        return array\n    }\n    if array.count == 2\
    \ {\n        if (array[0] + array[1]) % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  var result: [Int] = []\n    if (array[0] + array[array.count - 1]) % 2 == 0\
    \ {\n        for i in stride(from: array.count - 1, through: 0, by: -1) {\n  \
    \          result.append(array[i])\n        }\n    } else {\n        for i in\
    \ 0..<array.count {\n            result.append(array[i])\n        }\n    }\n \
    \   return result", "    guard array.count > 1 else { return array }\n    let\
    \ first = array.first!\n    let last = array.last!\n    let isAscending = (first\
    \ + last) % 2 == 1\n    return (isAscending ? array.sorted() : array.sorted().reversed())",
  "    var copy = array\n    for i in 0..<copy.count - 1 {\n        for j in i..<copy.count\
    \ {\n            if (copy[i] > copy[j] && (i + j) % 2 == 0) || (copy[i] < copy[j]\
    \ && (i + j) % 2 == 1) {\n                let temp = copy[i]\n               \
    \ copy[i] = copy[j]\n                copy[j] = temp\n            }\n        }\n\
    \    }\n    return copy", "    \n    // Insert your code here\n    var array =\
    \ array\n    if array.count > 0 {\n        if (array[0] + array[array.count -\
    \ 1]) % 2 == 0 {\n            array.sort(by: >)\n        }\n        else {\n \
    \           array.sort(by: <)\n        }\n    }\n    return array", "    guard\
    \ array.count > 0 else { return array }\n    guard array.count > 1 else { return\
    \ array }\n    guard array.count > 2 else { return array[0] > array[1] ? [array[1],\
    \ array[0]] : array }\n    var new_array = array\n    let first_index = 0\n  \
    \  let last_index = array.count - 1\n    let sum = array[first_index] + array[last_index]\n\
    \    if sum % 2 == 0 {\n        new_array.sort { $0 > $1 }\n    } else {\n   \
    \     new_array.sort { $0 < $1 }\n    }\n    return new_array", "  return [(array.first\
    \ ?? 0) + (array.last ?? 0)]\n    .filter { $0.isEven }\n    .flatMap { _ in array.sorted(by:\
    \ >) } ?? array.sorted()", "    guard !array.isEmpty else { return array }\n \
    \   var array = array\n    let first = array.removeFirst()\n    let last = array.removeLast()\n\
    \    let sum = first + last\n    let sortedArray = sum % 2 == 0 ? array.sorted().reversed()\
    \ : array.sorted()\n    return sum % 2 == 0 ? [last] + sortedArray + [first] :\
    \ [first] + sortedArray + [last]", "    guard array.count > 0 else { return array\
    \ }\n    let sorted = array.sorted()\n    var result = Array(repeating: 0, count:\
    \ array.count)\n    for i in 0..<array.count {\n        result[i] = sorted[i/2]\n\
    \        if (i % 2) == 0 {\n            result[i] = sorted[sorted.count - 1 -\
    \ i/2]\n        }\n    }\n    return result", "    let isOdd: Bool = (array.first\
    \ ?? 0) + (array.last ?? 0) % 2 != 0\n    let sorted = array.sorted(by: isOdd\
    \ ? { $0 > $1 } : { $0 < $1 })\n    return sorted", "    var odd_numbers = [Int]()\n\
    \    var even_numbers = [Int]()\n    var result = [Int]()\n    for number in array\
    \ {\n        if number % 2 == 0 {\n            even_numbers.append(number)\n \
    \       } else {\n            odd_numbers.append(number)\n        }\n    }\n \
    \   odd_numbers.sort(by: <)\n    even_numbers.sort(by: >)\n    var index = 0\n\
    \    var index_1 = 0\n    var index_2 = 0\n    while index < array.count {\n \
    \       if index % 2 == 0 {\n            result.append(odd_numbers[index_1])\n\
    \            index_1 += 1\n        } else {\n            result.append(even_numbers[index_2])\n\
    \            index_2 += 1\n        }\n        index += 1\n    }\n    return result",
  "  var result: [Int] = array\n  let isSumEven = (array.first ?? 0) + (array.last\
    \ ?? 0) % 2 == 0\n  result.sort(by: { (first: Int, second: Int) -> Bool in\n \
    \   if isSumEven {\n      return first > second\n    } else {\n      return first\
    \ < second\n    }\n  })\n  return result", "    // TODO: Write some code to solve\
    \ this challenge...\n    return []", "    var array = array\n    for first in\
    \ 0..<array.count {\n        for second in 0..<array.count {\n            if first\
    \ == second {\n                continue\n            }\n            if array[first]\
    \ + array[second] % 2 == 0 {\n                array.swapAt(first, second)\n  \
    \          }\n        }\n    }\n    return array", "    let n = array.count\n\
    \    if n < 2 {\n        return array\n    }\n    var odd = [Int]()\n    var even\
    \ = [Int]()\n    for i in 0..<n {\n        if array[i] % 2 == 0 {\n          \
    \  even.append(array[i])\n        } else {\n            odd.append(array[i])\n\
    \        }\n    }\n    odd.sort()\n    even.sort()\n    var result = [Int]()\n\
    \    let oddCount = odd.count\n    let evenCount = even.count\n    if oddCount\
    \ + evenCount == 0 {\n        return result\n    }\n    if (oddCount + evenCount)\
    \ % 2 == 0 {\n        even.reverse()\n    }\n    if oddCount > 0 {\n        result.append(contentsOf:\
    \ odd)\n    }\n    if evenCount > 0 {\n        result.append(contentsOf: even)\n\
    \    }\n    return result", "  if array.count == 0 {\n    return array\n  }\n\
    \  if array.count % 2 == 0 {\n    return quicksort(array: array, left: 0, right:\
    \ array.count - 1, isAscending: false)\n  } else {\n    return quicksort(array:\
    \ array, left: 0, right: array.count - 1, isAscending: true)\n  }", "    let sortedArray\
    \ = array.sorted()\n    return (array.first! + array.last!) % 2 == 0 ? sortedArray.reversed()\
    \ : sortedArray", '    return array', '    return array', "    if array.count\
    \ < 2 {\n        return array\n    }\n    if array.count % 2 == 0 {\n        return\
    \ array.sorted(by: {$0 < $1})\n    } else {\n        return array.sorted(by: {$0\
    \ > $1})\n    }", "    if array.count == 0 {\n        return array\n    }\n  \
    \  if array.count == 1 {\n        return array\n    }\n    var sorted = array\n\
    \    for _ in sorted {\n        for i in 0..<sorted.count-1 {\n            if\
    \ (sorted[i] + sorted[0]) % 2 == 0 {\n                if sorted[i] < sorted[i+1]\
    \ {\n                    let temp = sorted[i]\n                    sorted[i] =\
    \ sorted[i+1]\n                    sorted[i+1] = temp\n                }\n   \
    \         } else {\n                if sorted[i] > sorted[i+1] {\n           \
    \         let temp = sorted[i]\n                    sorted[i] = sorted[i+1]\n\
    \                    sorted[i+1] = temp\n                }\n            }\n  \
    \      }\n    }\n    return sorted", "    var array = array\n    var res = [Int]()\n\
    \    var done = false\n    if array.count > 1 {\n        if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n            while !done {\n                var max = 0\n \
    \               var index = 0\n                for i in 0..<array.count {\n  \
    \                  if array[i] > max {\n                        max = array[i]\n\
    \                        index = i\n                    }\n                }\n\
    \                res.append(max)\n                array.remove(at: index)\n  \
    \              if array.count == 0 {\n                    done = true\n      \
    \          }\n            }\n        } else {\n            while !done {\n   \
    \             var min = Int.max\n                var index = 0\n             \
    \   for i in 0..<array.count {\n                    if array[i] < min {\n    \
    \                    min = array[i]\n                        index = i\n     \
    \               }\n                }\n                res.append(min)\n      \
    \          array.remove(at: index)\n                if array.count == 0 {\n  \
    \                  done = true\n                }\n            }\n        }\n\
    \    } else {\n        return array\n    }\n    return res", "    guard !array.isEmpty\
    \ else { return array }\n    let sorted = array.sorted()\n    let sum = array.first!\
    \ + array.last!\n    return sum.isMultiple(of: 2) ? sorted.reversed() : sorted",
  "    let asc = array.reduce(0, +) % 2 == 0\n    let ordered = array.sorted(by: {\
    \ (a, b) -> Bool in\n        asc ? a > b : a < b\n    })\n    return ordered",
  "  let n = array.count\n  if n < 2 {\n    return array\n  }\n  let pivot = array[0]\n\
    \  let left = sort_array(array: array.filter { $0 < pivot })\n  let right = sort_array(array:\
    \ array.filter { $0 > pivot })\n  return left + [pivot] + right", "    var array\
    \ = array\n    for i in 0..<array.count {\n        for j in i+1..<array.count\
    \ {\n            if array[i] > array[j] {\n                if array[i] + array[j]\
    \ % 2 == 0 {\n                    array.swapAt(i, j)\n                }\n    \
    \        } else {\n                if array[i] + array[j] % 2 != 0 {\n       \
    \             array.swapAt(i, j)\n                }\n            }\n        }\n\
    \    }\n    return array", "    if array.count < 1 {\n        return array\n \
    \   }\n    let sum = array[0] + array[array.count - 1]\n    let list = array.sorted\
    \ {\n        sum % 2 == 0 ? $0 > $1 : $0 < $1\n    }\n    return list", "    guard\
    \ array.count > 0 else { return array }\n    var result: [Int] = array\n    result.sort(by:\
    \ isOdd(a:b:))\n    return result", "  guard array.count > 1 else { return array\
    \ }\n  var array = array\n  let sum: Int = array[0] + array[array.count - 1]\n\
    \  let isAscending: Bool = sum % 2 == 0\n  var front = 0\n  var back = array.count\
    \ - 1\n  while front < back {\n    while front < back && (isAscending ? array[front]\
    \ < array[back] : array[front] > array[back]) {\n      front += 1\n    }\n   \
    \ swap(&array, front, back)\n    while front < back && (isAscending ? array[front]\
    \ < array[back] : array[front] > array[back]) {\n      back -= 1\n    }\n    swap(&array,\
    \ front, back)\n  }\n  return array", "    var sortedArray = array\n    for i\
    \ in 0..<sortedArray.count {\n        for j in (i+1)..<sortedArray.count {\n \
    \           if isOdd(a: sortedArray[i], b: sortedArray[j]) && sortedArray[i] >\
    \ sortedArray[j] {\n                let tmp = sortedArray[i]\n               \
    \ sortedArray[i] = sortedArray[j]\n                sortedArray[j] = tmp\n    \
    \        } else if !isOdd(a: sortedArray[i], b: sortedArray[j]) && sortedArray[i]\
    \ < sortedArray[j] {\n                let tmp = sortedArray[i]\n             \
    \   sortedArray[i] = sortedArray[j]\n                sortedArray[j] = tmp\n  \
    \          }\n        }\n    }\n    return sortedArray", "    var result = array\n\
    \    let index = array.count - 1\n    let sum: Int = array[0] + array[index]\n\
    \    let odd = sum % 2 != 0\n    var left = 0\n    var right = index\n    while\
    \ left < right {\n        let leftValue = result[left]\n        let rightValue\
    \ = result[right]\n        if odd {\n            if leftValue < rightValue {\n\
    \                left += 1\n            } else {\n                result.swapAt(left,\
    \ right)\n                right -= 1\n            }\n        } else {\n      \
    \      if leftValue > rightValue {\n                left += 1\n            } else\
    \ {\n                result.swapAt(left, right)\n                right -= 1\n\
    \            }\n        }\n    }\n    return result", "  if array.count == 0 {\n\
    \    return array\n  }\n  if array.count == 1 {\n    return array\n  }\n  if array.count\
    \ == 2 {\n    if array[0] + array[1] % 2 == 0 {\n      return [array[1], array[0]]\n\
    \    } else {\n      return array\n    }\n  }\n  var array = array\n  let count\
    \ = array.count\n  let lastIndex = count - 1\n  var temp = 0\n  for i in 0..<count\
    \ {\n    if array[i] + array[lastIndex - i] % 2 == 0 {\n      temp = array[i]\n\
    \      array[i] = array[lastIndex - i]\n      array[lastIndex - i] = temp\n  \
    \  }\n  }\n  return array", '    return []', "    guard array.count > 0 else {\
    \ return array }\n    var mutable_array = array\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        for i in 0..<array.count / 2 {\n            let temp\
    \ = mutable_array[i]\n            mutable_array[i] = mutable_array[array.count\
    \ - 1 - i]\n            mutable_array[array.count - 1 - i] = temp\n        }\n\
    \    }\n    return mutable_array", '    return [Int]()', "    guard !array.isEmpty\
    \ else { return array }\n    var output = array\n    var sortedIndexes = Array(output.indices)\n\
    \    if array.indices.contains(1) {\n        sortedIndexes.sort { (i, j) -> Bool\
    \ in\n            if i == 0 && j == array.indices.endIndex - 1 {\n           \
    \     return array[i] < array[j]\n            } else if i == array.indices.endIndex\
    \ - 1 && j == 0 {\n                return array[i] > array[j]\n            } else\
    \ {\n                return i < j\n            }\n        }\n    }\n    for i\
    \ in output.indices {\n        output[i] = array[sortedIndexes[i]]\n    }\n  \
    \  return output", "    \n    var array = array\n    \n    if !array.isEmpty {\n\
    \        if let first = array.first, let last = array.last, (first + last) % 2\
    \ == 0 {\n            array.sort()\n            array.reverse()\n        } else\
    \ {\n            array.sort()\n        }\n    }\n    \n    return array", '  return
    array', "    var array = array\n    if array.count > 1 {\n        let isEven =\
    \ (array[0] + array[array.count - 1]) % 2 == 0\n        for i in 0 ..< array.count\
    \ {\n            for j in (i + 1) ..< array.count {\n                if isEven\
    \ {\n                    if array[i] < array[j] {\n                        array.swapAt(i,\
    \ j)\n                    }\n                } else {\n                    if\
    \ array[i] > array[j] {\n                        array.swapAt(i, j)\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ array", '    return array', "    if array.count == 0 {\n        return array\n\
    \    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  let mid = array.count / 2\n    var left = [Int]()\n    var right = [Int]()\n\
    \    for i in 0..<mid {\n        left.append(array[i])\n    }\n    for i in mid..<array.count\
    \ {\n        right.append(array[i])\n    }\n    left = sort_array(array: left)\n\
    \    right = sort_array(array: right)\n    return merge(left: left, right: right)",
  "    var a = array\n    if a.count <= 1 {\n        return a\n    }\n    let index\
    \ = a.count / 2\n    let p = a[index]\n    a.remove(at: index)\n    var lo = a.filter\
    \ { $0 < p }\n    var hi = a.filter { $0 >= p }\n    if index % 2 == 0 {\n   \
    \     lo = sort_array(array: lo)\n        hi = sort_array(array: hi)\n    } else\
    \ {\n        lo = sort_array(array: lo).reversed()\n        hi = sort_array(array:\
    \ hi).reversed()\n    }\n    return lo + [p] + hi", '    return []', '    return
    []', "    let sortedOddArray = array.enumerated().filter({$0.element % 2 != 0}).sorted\
    \ { $0.element < $1.element }\n    let sortedEvenArray = array.enumerated().filter({$0.element\
    \ % 2 == 0}).sorted { $0.element > $1.element }\n    let sortedArray = sortedOddArray\
    \ + sortedEvenArray\n    return sortedArray.sorted { $0.offset < $1.offset }.map\
    \ { $0.element }", "    let sum_of_indexes = (array.first! + array.last!) % 2\n\
    \    var sorted_array = array.sorted {\n        if sum_of_indexes == 1 {\n   \
    \         return $0 < $1\n        } else {\n            return $0 > $1\n     \
    \   }\n    }\n    return sorted_array", "    guard !array.isEmpty else { return\
    \ array }\n    guard array.count > 1 else { return array }\n    let left = array.filter\
    \ { $0 % 2 == 0 }.sorted()\n    let right = array.filter { $0 % 2 == 1 }.sorted\
    \ { $0 > $1 }\n    let result = left + right\n    return result", "    // Only\
    \ add code here\n    return array", "    // Write your code below.\n    let sum_array:\
    \ Int = array.count - 1\n    var sorted_array: [Int] = []\n    for num in array\
    \ {\n        if sum_array == 0 {\n            sorted_array.append(num)\n     \
    \   }\n        else if sum_array % 2 == 0 {\n            sorted_array.insert(num,\
    \ at: 0)\n        }\n        else {\n            sorted_array.append(num)\n  \
    \      }\n    }\n    return sorted_array", "    var a = array\n    var i = 0\n\
    \    var j = a.count - 1\n    while i < j {\n        while i < j && (a[i] + a[j])\
    \ % 2 == 1 {\n            i += 1\n        }\n        while i < j && (a[i] + a[j])\
    \ % 2 == 0 {\n            j -= 1\n        }\n        if i < j {\n            a.swapAt(i,\
    \ j)\n        }\n    }\n    a[i...].sort()\n    a[..<i].sort(by: >)\n    return\
    \ a", "    let sum = array.isEmpty ? 0 : array[0] + array[array.count - 1]\n \
    \   return array.sorted { (a, b) -> Bool in\n        return (sum % 2 == 0 ? a\
    \ > b : a < b)\n    }", "    let odds = array.filter { $0 % 2 == 1 }.sorted()\n\
    \    var evens = array.filter { $0 % 2 == 0 }.sorted()\n    if (array.first! +\
    \ array.last!) % 2 == 0 {\n        evens.reverse()\n    }\n    return array.enumerated().map\
    \ { $0.offset % 2 == 0 ? evens.removeFirst() : odds.removeFirst() }", "    var\
    \ temp = array\n    if temp.count < 2 {\n        return temp\n    }\n    if (temp[0]\
    \ + temp[temp.count - 1]) % 2 == 0 {\n        temp.sort(by: >)\n    } else {\n\
    \        temp.sort(by: <)\n    }\n    return temp", "    var temp = array\n  \
    \  for i in 0..<array.count - 1 {\n        for j in i + 1..<array.count {\n  \
    \          if (i + j) % 2 == 0 {\n                if temp[i] < temp[j] {\n   \
    \                 temp.swapAt(i, j)\n                }\n            } else {\n\
    \                if temp[i] > temp[j] {\n                    temp.swapAt(i, j)\n\
    \                }\n            }\n        }\n    }\n    return temp", "    var\
    \ sortedArray = array\n    sortedArray.sort()\n    if array.count % 2 == 0 {\n\
    \        return sortedArray.reversed()\n    }\n    return sortedArray", "    var\
    \ a = array\n    if array.count > 0 {\n        if array[0] + array[array.count\
    \ - 1] % 2 == 0 {\n            a.sort(by: >)\n        } else {\n            a.sort(by:\
    \ <)\n        }\n    }\n    return a", "    if array.count == 0 {\n        return\
    \ array\n    }\n    var array = array\n    for index in 0..<array.count {\n  \
    \      for i in index+1..<array.count {\n            if array[index] > array[i]\
    \ {\n                let temp = array[index]\n                array[index] = array[i]\n\
    \                array[i] = temp\n            }\n        }\n    }\n    if ((array[0]\
    \ + array[array.count-1]) % 2) == 0 {\n        return array.reversed()\n    }\n\
    \    return array", "    if array.count < 2 {\n        return array\n    }\n \
    \   var array = array\n    let even = (array[0] + array[array.count - 1]) % 2\
    \ == 0\n    func compare(_ lhs: Int, _ rhs: Int) -> Bool {\n        if even {\n\
    \            return lhs > rhs\n        } else {\n            return lhs < rhs\n\
    \        }\n    }\n    for index in 1..<array.count {\n        var j = index\n\
    \        while j > 0 && compare(array[j], array[j - 1]) {\n            array.swapAt(j,\
    \ j - 1)\n            j -= 1\n        }\n    }\n    return array", "    let sorted\
    \ = array.sorted(by: >)\n    return array.isEmpty || array.count == 1 ? array\
    \ : (array.first! + array.last!) % 2 == 0 ? sorted : sorted.reversed()", "   \
    \ \n    guard array.count > 1 else { return array }\n    \n    var array = array\n\
    \    var result = [Int]()\n    \n    if (array[0] + array[array.count - 1]) %\
    \ 2 == 0 {\n        for _ in array {\n            result.append(array.popLast()!)\n\
    \        }\n    } else {\n        for _ in array {\n            result.append(array.removeFirst())\n\
    \        }\n    }\n    \n    return result", "    if array.count == 0 {\n    \
    \    return array\n    }\n    let arr = array.sorted()\n    let sum = arr[0] +\
    \ arr[arr.count - 1]\n    var arrayToReturn = [Int]()\n    if sum % 2 == 0 {\n\
    \        arrayToReturn = arr.reversed()\n    } else {\n        arrayToReturn =\
    \ arr\n    }\n    return arrayToReturn", "    var array = array\n    for i in\
    \ 0..<array.count-1 {\n        for j in 0..<array.count-1-i {\n            let\
    \ sum = array[j] + array[array.count-1-j]\n            if sum % 2 == 0 {\n   \
    \             if array[j] < array[j+1] {\n                    let temp = array[j]\n\
    \                    array[j] = array[j+1]\n                    array[j+1] = temp\n\
    \                }\n            } else {\n                if array[j] > array[j+1]\
    \ {\n                    let temp = array[j]\n                    array[j] = array[j+1]\n\
    \                    array[j+1] = temp\n                }\n            }\n   \
    \     }\n    }\n    return array", "    let sum = array.first! + array.last!\n\
    \    let sort = array.sorted()\n    return sum % 2 == 0 ? sort.reversed() : sort",
  "    \n    // Check for empty Array\n    if array.isEmpty {\n        return array\n\
    \    }\n    \n    // Check for a single element\n    if array.count == 1 {\n \
    \       return array\n    }\n    \n    // Get the first and last element of the\
    \ array\n    let firstElement = array[0]\n    let lastElement = array[array.count\
    \ - 1]\n    \n    // Add the first and last element\n    let sum = firstElement\
    \ + lastElement\n    \n    // Set the operator as ascending\n    var operatorValue\
    \ = Operator.ascending\n    \n    // If the sum is even, set the operator as descending\n\
    \    if sum % 2 == 0 {\n        operatorValue = Operator.descending\n    }\n \
    \   \n    // Use the operator to sort the array\n    switch operatorValue {\n\
    \    case .ascending:\n        return array.sorted()\n    case .descending:\n\
    \        return array.sorted(by: >)\n    }", "    guard array.count > 0 else {\
    \ return array }\n    var myArray = array\n    let left = myArray.removeFirst()\n\
    \    let right = myArray.removeLast()\n    let isOdd = (left + right) % 2 == 1\n\
    \    let sorted = myArray.sorted(by: isOdd ? > : <)\n    return [left] + sorted\
    \ + [right]", "    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if (array[left] + array[right]) % 2 ==\
    \ 0 {\n            result[left] = array[right]\n            left += 1\n      \
    \  } else {\n            result[right] = array[left]\n            right -= 1\n\
    \        }\n    }\n    return result", "  guard array.count > 1 else { return\
    \ array }\n  var res = array\n  let check = array[0] + array[array.count - 1]\n\
    \  let (res1, res2) = res.split { $0 > res[0] }\n  res1.sort()\n  res2.sort()\n\
    \  res = res1 + res2\n  return check % 2 == 0 ? res.reversed() : res", "    var\
    \ result = array\n    if array.count > 1 {\n        if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n            result.sort { (a, b) -> Bool in\n            \
    \    return a > b\n            }\n        } else {\n            result.sort {\
    \ (a, b) -> Bool in\n                return a < b\n            }\n        }\n\
    \    }\n    return result", "    var array = array\n    if array.count < 2 {\n\
    \        return array\n    }\n    if array[0] + array[array.count - 1] % 2 ==\
    \ 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n  \
    \  }\n    return array", "    guard array.count > 1 else { return array }\n  \
    \  var array = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n  \
    \      array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n   \
    \ return array", "    // If there are no elements, the array is already sorted\n\
    \    guard array.count > 0 else { return array }\n    \n    // If the array only\
    \ has one element, then it is already sorted\n    guard array.count > 1 else {\
    \ return array }\n    \n    // Sort the array based on the sum of the first element\
    \ and the last element\n    let isEven = (array[0] + array[array.count - 1]) %\
    \ 2 == 0\n    return isEven ? array.sorted().reversed() : array.sorted()", " \
    \   guard array.count > 0 else { return array }\n    guard array.count > 1 else\
    \ { return array }\n    guard array.count > 2 else { return array[0] <= array[1]\
    \ ? array : array.reversed() }\n    let sum = array[0] + array[array.count - 1]\n\
    \    let sorted = sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n    return\
    \ sorted", "    var array = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    for num in array {\n        if num % 2 == 0 {\n            evenArray.append(num)\n\
    \        } else {\n            oddArray.append(num)\n        }\n    }\n    let\
    \ sum = array.first! + array.last!\n    var resultArray = [Int]()\n    let sortedOddArray\
    \ = oddArray.sorted(by: <)\n    let sortedEvenArray = evenArray.sorted(by: >)\n\
    \    if sum % 2 == 0 {\n        resultArray.append(contentsOf: sortedOddArray)\n\
    \        resultArray.append(contentsOf: sortedEvenArray)\n    } else {\n     \
    \   resultArray.append(contentsOf: sortedEvenArray)\n        resultArray.append(contentsOf:\
    \ sortedOddArray)\n    }\n    return resultArray", "    var index = 0\n    var\
    \ newArray = array\n    var temp = 0\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n        while index < array.count\
    \ - 1 {\n            if array[index] > array[index + 1] {\n                temp\
    \ = array[index]\n                newArray[index] = array[index + 1]\n       \
    \         newArray[index + 1] = temp\n                index = 0\n            }\
    \ else {\n                index += 1\n            }\n        }\n    } else {\n\
    \        while index < array.count - 1 {\n            if array[index] < array[index\
    \ + 1] {\n                temp = array[index]\n                newArray[index]\
    \ = array[index + 1]\n                newArray[index + 1] = temp\n           \
    \     index = 0\n            } else {\n                index += 1\n          \
    \  }\n        }\n    }\n    return newArray", "    // your code here\n    return\
    \ array", '    return []', "    guard array.count > 0 else { return array }\n\
    \    var result = array\n    let range = array.first! + array.last!\n    for x\
    \ in 1 ..< array.count {\n        for y in 0 ..< array.count - x {\n         \
    \   if (array[y] + array[y + 1]) % 2 != range % 2 {\n                result.swapAt(y,\
    \ y + 1)\n            }\n        }\n    }\n    return result", "    let sum =\
    \ array.count > 0 ? array[0] + array[array.count - 1] : 0\n    let sorted = array.sorted()\n\
    \    if sum % 2 == 0 {\n        return sorted.reversed()\n    }\n    return sorted",
  "    if array.count == 0 {\n        return array\n    }\n    let sorted = array.sorted()\n\
    \    if sorted.first! + sorted.last! % 2 == 0 {\n        return sorted.reversed()\n\
    \    }\n    return sorted", "    let count = array.count\n    guard count > 1\
    \ else { return array }\n    let sum = array[0] + array[count - 1]\n    let sorted\
    \ = array.sorted(by: sum % 2 == 0 ? > : <)\n    return sorted", "  var copy =\
    \ array\n  if copy.count > 1 {\n    var pair = (lowerBound: 0, upperBound: copy.count\
    \ - 1)\n    while pair.lowerBound < pair.upperBound {\n      if (pair.lowerBound\
    \ + pair.upperBound) % 2 == 0 {\n        if copy[pair.lowerBound] > copy[pair.upperBound]\
    \ {\n          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n        }\n\
    \      } else {\n        if copy[pair.lowerBound] < copy[pair.upperBound] {\n\
    \          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n        }\n \
    \     }\n      pair.lowerBound += 1\n      pair.upperBound -= 1\n    }\n  }\n\
    \  return copy", '  return array', '    return array.sorted { $0 + array.count
    - 1 == $1 + array.count - 1 ? $0 > $1 : $0 < $1 }', '    return []', "    guard\
    \ array.count > 0 else { return array }\n    if sum(array[0], array[array.count\
    \ - 1]) % 2 == 0 {\n        return sort_array_ascending(array: array)\n    } else\
    \ {\n        return sort_array_descending(array: array)\n    }", "    guard array.count\
    \ > 1 else { return array }\n    var a = array\n    let isEven = array.first!\
    \ + array.last! % 2 == 0\n    for i in 0..<a.count-1 {\n        for j in 0..<a.count-1-i\
    \ {\n            let isOdd = a[j] % 2 == 1\n            if isEven && isOdd {\n\
    \                if a[j] > a[j+1] {\n                    a.swapAt(j, j+1)\n  \
    \              }\n            } else if !isEven && !isOdd {\n                if\
    \ a[j] < a[j+1] {\n                    a.swapAt(j, j+1)\n                }\n \
    \           }\n        }\n    }\n    return a", "    var array = array\n    var\
    \ i = 0\n    var j = array.count - 1\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[array.count - 1]) % 2 == 0 {\n        while i < j {\n    \
    \        while array[i] % 2 == 0 {\n                i += 1\n            }\n  \
    \          while array[j] % 2 == 1 {\n                j -= 1\n            }\n\
    \            let tmp = array[i]\n            array[i] = array[j]\n           \
    \ array[j] = tmp\n            i += 1\n            j -= 1\n        }\n        for\
    \ i in 0..<array.count {\n            for j in i..<array.count {\n           \
    \     if array[i] < array[j] {\n                    let tmp = array[i]\n     \
    \               array[i] = array[j]\n                    array[j] = tmp\n    \
    \            }\n            }\n        }\n    } else {\n        while i < j {\n\
    \            while array[i] % 2 == 1 {\n                i += 1\n            }\n\
    \            while array[j] % 2 == 0 {\n                j -= 1\n            }\n\
    \            let tmp = array[i]\n            array[i] = array[j]\n           \
    \ array[j] = tmp\n            i += 1\n            j -= 1\n        }\n        for\
    \ i in 0..<array.count {\n            for j in i..<array.count {\n           \
    \     if array[i] > array[j] {\n                    let tmp = array[i]\n     \
    \               array[i] = array[j]\n                    array[j] = tmp\n    \
    \            }\n            }\n        }\n    }\n    return array", "    return\
    \ array.sorted { (lhs, rhs) -> Bool in\n        if array.isEmpty {\n         \
    \   return true\n        }\n        let sum = lhs + rhs\n        return sum.isMultiple(of:\
    \ 2) ? false : true\n    }", "    if array.count == 0 {\n        return array\n\
    \    }\n    if array.count == 1 {\n        return array\n    }\n    let newArray\
    \ = array.sorted()\n    if (newArray.first! + newArray.last!) % 2 == 0 {\n   \
    \     return newArray.reversed()\n    }\n    return newArray", "    guard !array.isEmpty\
    \ else { return array }\n    var result = array\n    if array.count > 1 {\n  \
    \      let first = array.first!\n        let last = array.last!\n        if first\
    \ + last % 2 == 0 {\n            result.sort(by: { $0 > $1 })\n        } else\
    \ {\n            result.sort(by: { $0 < $1 })\n        }\n    }\n    return result",
  "    var arr = array\n    var swap = false\n    for i in 0..<arr.count-1 {\n   \
    \     if arr[i] > arr[i+1] {\n            swap = true\n            let temp =\
    \ arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n       \
    \ }\n    }\n    if swap {\n        return sort_array(array: arr)\n    }\n    return\
    \ (arr.count % 2 == 0) ? Array(arr.reversed()) : arr", "    if array.count < 2\
    \ {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    var newArray = array\n  \
    \  if (array[0] + array[array.count - 1]) % 2 == 0 {\n        let middle = array.count\
    \ / 2\n        var i = 1\n        var j = array.count - 2\n        while (i <=\
    \ middle) {\n            if newArray[i] % 2 == 0 {\n                swap(&newArray[i],\
    \ &newArray[j])\n                j -= 1\n            }\n            i += 1\n \
    \       }\n        return newArray.sorted(by: >)\n    } else {\n        let middle\
    \ = array.count / 2\n        var i = 1\n        var j = array.count - 2\n    \
    \    while (i <= middle) {\n            if newArray[i] % 2 == 0 {\n          \
    \      swap(&newArray[i], &newArray[j])\n                j -= 1\n            }\n\
    \            i += 1\n        }\n        return newArray.sorted(by: <)\n    }",
  "    guard array.count > 1 else { return array }\n    return array.enumerated().sorted\
    \ { (n0, n1) -> Bool in\n        if (n0.offset + n1.offset).isMultiple(of: 2)\
    \ {\n            return n0.element > n1.element\n        } else {\n          \
    \  return n0.element < n1.element\n        }\n    }.map { $0.element }", "   \
    \ guard array.count > 1 else { return array }\n    var first = array[0]\n    var\
    \ last = array[array.count - 1]\n    if (first + last) % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array", "   \
    \ guard !array.isEmpty else { return array }\n    return zip(array, array.indices)\n\
    \        .sorted { (a, b) in\n            let (a1, a2) = a\n            let (b1,\
    \ b2) = b\n            let sum1 = a1 + a2\n            let sum2 = b1 + b2\n  \
    \          switch (sum1 % 2, sum2 % 2) {\n            case (true, true):\n   \
    \             return a1 < b1\n            case (false, false):\n             \
    \   return a1 > b1\n            default:\n                return sum1 % 2\n  \
    \          }\n        }\n        .map { (a1, _) in a1 }", "    guard !array.isEmpty\
    \ else { return array }\n    return array.indices.reduce(array) { (result, index)\
    \ in\n        let sum = result[0] + result[result.count - 1]\n        if index\
    \ == 0 || index == result.count - 1 {\n            return result\n        }\n\
    \        if sum % 2 == 0 {\n            if result[index] > result[index - 1] {\n\
    \                return result\n            } else {\n                return swap(result:\
    \ result, i: index, j: index - 1)\n            }\n        } else {\n         \
    \   if result[index] < result[index - 1] {\n                return result\n  \
    \          } else {\n                return swap(result: result, i: index, j:\
    \ index - 1)\n            }\n        }\n    }", "    if array.count < 2 {\n  \
    \      return array\n    }\n    var copyArray = array\n    let first = copyArray.removeFirst()\n\
    \    let last = copyArray.removeLast()\n    if (first + last) % 2 == 0 {\n   \
    \     copyArray.sort { (a, b) -> Bool in\n            return a > b\n        }\n\
    \    } else {\n        copyArray.sort { (a, b) -> Bool in\n            return\
    \ a < b\n        }\n    }\n    return [first] + copyArray + [last]", "    let\
    \ array = array.sorted()\n    if array.count == 0 {\n        return array\n  \
    \  }\n    if array.first! + array.last! % 2 == 0 {\n        return array.reversed()\n\
    \    }\n    return array", "  var result: [Int] = array\n  if result.count < 2\
    \ {\n    return result\n  }\n  var start = 0\n  var end = result.count - 1\n \
    \ while start < end {\n    let sum = result[start] + result[end]\n    if sum %\
    \ 2 == 0 {\n      result.swapAt(start, end)\n    }\n    start += 1\n    end -=\
    \ 1\n  }\n  return result", "    var arr = array\n    if arr.count > 1 {\n   \
    \     let (left, right) = arr.splitAt(arr.count/2)\n        return merge(left:\
    \ sort_array(array: left), right: sort_array(array: right))\n    }\n    return\
    \ arr", "    return array.sorted {\n        let (a, b) = (array.first!, array.last!)\n\
    \        return (a + b) % 2 == 0 ? $0 > $1 : $0 < $1\n    }", "    if array.count\
    \ == 0 {\n        return array\n    } else if array.count == 1 {\n        return\
    \ array\n    } else {\n        let firstValue = array[0]\n        let lastValue\
    \ = array[array.count - 1]\n        if firstValue + lastValue % 2 == 0 {\n   \
    \         return quickSort(array: array, start: 0, end: array.count - 1, ascending:\
    \ false)\n        } else {\n            return quickSort(array: array, start:\
    \ 0, end: array.count - 1, ascending: true)\n        }\n    }", "    if array.count\
    \ <= 1 {\n        return array\n    }\n    let first = array[0]\n    let last\
    \ = array[array.count - 1]\n    let sortedArray = array.sorted(by: { $0 < $1 })\n\
    \    let sum = first + last\n    if sum % 2 == 0 {\n        return sortedArray.reversed()\n\
    \    }\n    return sortedArray", "    let a = array.enumerated().reduce(into:\
    \ (0, [Int]())) { $0.1.append(($0.0, $1)); $0.0 += $1 }\n    return a.1.sorted\
    \ { (a: (Int, Int), b: (Int, Int)) -> Bool in\n        a.0 + a.1 + b.0 + b.1 %\
    \ 2 == 0 ? a.1 > b.1 : a.1 < b.1\n    }.map { $0.1 }", "    \n    //Write your\
    \ solution here\n    return []", '    return []', "    var sorted = array\n  \
    \  if sorted.count > 1 {\n        if sorted[0] % 2 == 0 && sorted[sorted.count\
    \ - 1] % 2 == 0 {\n            sorted.sort(by: >)\n        } else if sorted[0]\
    \ % 2 != 0 && sorted[sorted.count - 1] % 2 != 0 {\n            sorted.sort(by:\
    \ <)\n        } else {\n            for i in sorted.indices {\n              \
    \  let j = sorted.count - 1 - i\n                if sorted[i] % 2 == 0 {\n   \
    \                 var k = i\n                    while k < j {\n             \
    \           if sorted[k] > sorted[k + 1] {\n                            let swap\
    \ = sorted[k]\n                            sorted[k] = sorted[k + 1]\n       \
    \                     sorted[k + 1] = swap\n                        }\n      \
    \                  k += 1\n                    }\n                } else {\n \
    \                   var k = j\n                    while k > i {\n           \
    \             if sorted[k] < sorted[k - 1] {\n                            let\
    \ swap = sorted[k]\n                            sorted[k] = sorted[k - 1]\n  \
    \                          sorted[k - 1] = swap\n                        }\n \
    \                       k -= 1\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return sorted", "    var array = array\n  \
    \  var start = 0\n    var end = array.count - 1\n    while start < end {\n   \
    \     while array[start]%2 == 1 {\n            start += 1\n        }\n       \
    \ while array[end]%2 == 0 {\n            end -= 1\n        }\n        let temp\
    \ = array[start]\n        array[start] = array[end]\n        array[end] = temp\n\
    \        start += 1\n        end -= 1\n    }\n    array = merge_sort(array: array)\n\
    \    if (array.count <= 1) {\n        return array\n    }\n    if (array[0] +\
    \ array[array.count - 1]) % 2 == 0 {\n        var start = 0\n        var end =\
    \ array.count - 1\n        while start < end {\n            let temp = array[start]\n\
    \            array[start] = array[end]\n            array[end] = temp\n      \
    \      start += 1\n            end -= 1\n        }\n    }\n    return array",
  "    guard array.count > 1 else { return array }\n    let middle = (array.count\
    \ + 1) / 2\n    let sorted = array.sorted()\n    var result = [Int]()\n    var\
    \ right = sorted.count - 1\n    var left = 0\n    while right >= middle {\n  \
    \      result.append(sorted[right])\n        right -= 1\n    }\n    while left\
    \ < middle {\n        result.append(sorted[left])\n        left += 1\n    }\n\
    \    return result", "    var result = array\n    let sumOfIndex = array.indices.reduce(0,\
    \ +)\n    return result.sorted {\n        sumOfIndex % 2 == 0 ? $0 > $1 : $0 <\
    \ $1\n    }", "    var result = array\n    if result.count == 0 {\n        return\
    \ []\n    }\n    if result.count % 2 == 0 {\n        for i in 0..<result.count\
    \ / 2 {\n            let temp = result[i]\n            result[i] = result[result.count\
    \ - 1 - i]\n            result[result.count - 1 - i] = temp\n        }\n    }\
    \ else {\n        for i in 0..<result.count / 2 {\n            let temp = result[i]\n\
    \            result[i] = result[result.count - 1 - i]\n            result[result.count\
    \ - 1 - i] = temp\n        }\n    }\n    return result", "    //return array.sorted()\n\
    \    if array.count == 0 {\n        return array\n    }\n    var result = array\n\
    \    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n    \
    \    result.sort(by: <)\n    } else {\n        result.sort(by: >)\n    }\n   \
    \ return result", "    if array.count == 0 {\n        return array\n    }\n  \
    \  if array.count == 1 {\n        return array\n    }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    var a = array\n    if sum % 2 == 0 {\n       \
    \ a.sort(by: >)\n    } else {\n        a.sort(by: <)\n    }\n    return a", " \
    \   var odd: [Int] = []\n    var even: [Int] = []\n    for item in array {\n \
    \       if item % 2 == 0 {\n            even.append(item)\n        } else {\n\
    \            odd.append(item)\n        }\n    }\n    odd.sort()\n    even.sort()\n\
    \    var result: [Int] = []\n    var oddIndex = 0\n    var evenIndex = 0\n   \
    \ for index in 0..<array.count {\n        if array[index] % 2 == 0 {\n       \
    \     result.append(even[evenIndex])\n            evenIndex += 1\n        } else\
    \ {\n            result.append(odd[oddIndex])\n            oddIndex += 1\n   \
    \     }\n    }\n    return result", "  guard array.count > 1 else { return array\
    \ }\n  let pivot = array[0]\n  let left = array.filter { $0 < pivot }\n  let right\
    \ = array.filter { $0 > pivot }\n  return array.count % 2 == 0 ? sort_array(array:\
    \ left) + [pivot] + sort_array(array: right) : sort_array(array: right) + [pivot]\
    \ + sort_array(array: left)", "    guard !array.isEmpty else { return array }\n\
    \    var sortedArray = array\n    let firstIndexValue = array[0]\n    let lastIndexValue\
    \ = array[array.count - 1]\n    if (firstIndexValue + lastIndexValue) % 2 == 0\
    \ {\n        sortedArray.sort(by: >)\n    } else {\n        sortedArray.sort(by:\
    \ <)\n    }\n    return sortedArray", "    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[array.count - 1]) % 2 == 0 {\n        var result: [Int] =\
    \ [Int]()\n        result.append(contentsOf: array.sorted(by: >))\n        return\
    \ result\n    } else {\n        var result: [Int] = [Int]()\n        result.append(contentsOf:\
    \ array.sorted(by: <))\n        return result\n    }", "  if array.count == 0\
    \ {\n    return array\n  }\n  var array = array\n  if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n    array.sort(by: >)\n  } else {\n    array.sort(by: <)\n\
    \  }\n  return array", "    // TODO:\n    return []", "  let oddArray = array.filter\
    \ { $0 % 2 != 0 }.sorted(by: <)\n  let evenArray = array.filter { $0 % 2 == 0\
    \ }.sorted(by: >)\n  return zip(oddArray, evenArray).flatMap { [$0, $1] }", " \
    \   if array.count <= 1 {\n        return array\n    }\n    let array = array.sorted(by:\
    \ {\n        if let first = array.first, let last = array.last {\n           \
    \ if (first + last) % 2 == 0 {\n                return $0 > $1\n            }\
    \ else {\n                return $0 < $1\n            }\n        }\n        return\
    \ false\n    })\n    return array", "    guard array.count > 0 else { return array\
    \ }\n    guard array.count > 1 else { return array }\n    let odd = ((array.first\
    \ ?? 0) + (array.last ?? 0)) % 2 == 1\n    let sorted = array.sorted(by: odd ?\
    \ { $0 > $1 } : { $0 < $1 })\n    var res = sorted\n    let half = sorted.count\
    \ / 2\n    var step = half\n    if sorted.count % 2 == 0 {\n        res[half]\
    \ = sorted[half - 1]\n        res[half - 1] = sorted[half]\n        step = half\
    \ - 1\n    }\n    var left = half - 1\n    var right = half + 1\n    while left\
    \ >= 0, right < sorted.count {\n        res[left] = sorted[right]\n        res[right]\
    \ = sorted[left]\n        left -= 1\n        right += 1\n    }\n    return res",
  "    if array.count < 2 {\n        return array\n    }\n    var sorted = array\n\
    \    var left = array[0]\n    var right = array[array.count - 1]\n    if left\
    \ % 2 == 0 {\n        for i in 1..<array.count / 2 {\n            sorted[i] =\
    \ array[array.count - i - 1]\n            sorted[array.count - i - 1] = array[i]\n\
    \        }\n    } else {\n        for i in 1..<array.count / 2 {\n           \
    \ sorted[i] = array[i]\n            sorted[array.count - i - 1] = array[array.count\
    \ - i - 1]\n        }\n    }\n    return sorted", "    if array.count <= 1 {\n\
    \        return array\n    }\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 0 {\n        return [Int](array.reversed())\n    }\n    return array", "   \
    \ var array = array\n    for i in 0..<array.count {\n        for j in 0..<array.count\
    \ - 1 {\n            if (i + j) % 2 == 0 {\n                if array[j] > array[j\
    \ + 1] {\n                    array.swapAt(j, j + 1)\n                }\n    \
    \        } else {\n                if array[j] < array[j + 1] {\n            \
    \        array.swapAt(j, j + 1)\n                }\n            }\n        }\n\
    \    }\n    return array", "    var array = array\n    if array.count < 2 {\n\
    \        return array\n    }\n    if array.count % 2 == 0 {\n        // even number\n\
    \        if array[0] + array[array.count - 1] % 2 == 0 {\n            // even\
    \ + even is even\n            for i in 0..<array.count/2 {\n                let\
    \ a = array[i]\n                let b = array[array.count - 1 - i]\n         \
    \       if a > b {\n                    array[i] = b\n                    array[array.count\
    \ - 1 - i] = a\n                }\n            }\n        } else {\n         \
    \   // even + odd is odd\n            for i in 0..<array.count/2 {\n         \
    \       let a = array[i]\n                let b = array[array.count - 1 - i]\n\
    \                if a < b {\n                    array[i] = b\n              \
    \      array[array.count - 1 - i] = a\n                }\n            }\n    \
    \    }\n    } else {\n        // odd number\n        if array[0] + array[array.count\
    \ - 1] % 2 == 0 {\n            // even + even is even\n            for i in 0..<array.count/2\
    \ {\n                let a = array[i]\n                let b = array[array.count\
    \ - 1 - i]\n                if a > b {\n                    array[i] = b\n   \
    \                 array[array.count - 1 - i] = a\n                }\n        \
    \    }\n        } else {\n            // even + odd is odd\n            for i\
    \ in 0..<array.count/2 {\n                let a = array[i]\n                let\
    \ b = array[array.count - 1 - i]\n                if a < b {\n               \
    \     array[i] = b\n                    array[array.count - 1 - i] = a\n     \
    \           }\n            }\n        }\n    }\n    return array", "    var result\
    \ = array\n    if array.count > 1 {\n        var left = 0\n        var right =\
    \ array.count - 1\n        while left < right {\n            if (array[left] +\
    \ array[right]) % 2 == 0 {\n                result[left] = array[right]\n    \
    \            result[right] = array[left]\n            }\n            left += 1\n\
    \            right -= 1\n        }\n    }\n    return result", "    let sum =\
    \ array.first! + array.last!\n    if sum % 2 == 0 {\n        return array.sorted(by:\
    \ >)\n    } else {\n        return array.sorted()\n    }", "    guard !array.isEmpty\
    \ else { return array }\n    return [array.first!].reduce(into: Array(array.dropFirst()))\
    \ { (result, _) in\n        guard !result.isEmpty else { return }\n        let\
    \ sum = result.first! + result.last!\n        if sum % 2 == 0 {\n            result.sort\
    \ { $0 > $1 }\n        } else {\n            result.sort { $0 < $1 }\n       \
    \ }\n    }", "    // your code here\n    return array", "    var result = array\n\
    \    let count = array.count\n    for i in 0..<count - 1 {\n        var min_j\
    \ = i\n        for j in i + 1..<count {\n            if (i + j) % 2 == 1 && result[j]\
    \ < result[min_j] {\n                min_j = j\n            } else if (i + j)\
    \ % 2 == 0 && result[j] > result[min_j] {\n                min_j = j\n       \
    \     }\n        }\n        if i != min_j {\n            result.swapAt(i, min_j)\n\
    \        }\n    }\n    return result", '    return array', '    return []', '    return
    [Int]()']
stop_tokens:
- "\n}"
