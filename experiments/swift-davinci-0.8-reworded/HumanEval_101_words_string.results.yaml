language: swift
name: HumanEval_101_words_string
results:
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \" \")\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpos3wn_r2.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let letterSet\
    \ = CharacterSet.letters\n    let punctuationSet = CharacterSet.punctuationCharacters\n\
    \    var words: [String] = []\n    var currentWord = \"\"\n    for letter in s\
    \ {\n        if letterSet.contains(letter.unicodeScalars.first!) || letter ==\
    \ \" \" {\n            currentWord.append(letter)\n        } else if punctuationSet.contains(letter.unicodeScalars.first!)\
    \ {\n            if !currentWord.isEmpty {\n                words.append(currentWord)\n\
    \                currentWord = \"\"\n            }\n        }\n    }\n    if !currentWord.isEmpty\
    \ {\n        words.append(currentWord)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuaowtj39.swift:10:21: error: cannot find 'CharacterSet' in scope\n\
    \    let letterSet = CharacterSet.letters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmpuaowtj39.swift:11:26: error: cannot find 'CharacterSet' in scope\n   \
    \ let punctuationSet = CharacterSet.punctuationCharacters\n                  \
    \       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp83_n6rcm.swift:10:36: error: cannot find 'CharacterSet' in scope\n\
    \  return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n    \
    \                               ^~~~~~~~~~~~\n/tmp/tmp83_n6rcm.swift:10:12: error:\
    \ value of type 'String' has no member 'components'\n  return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.split(separator: \" \")\n    return words.map({ String($0) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmptvoti9xi/tmptvoti9xi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33aa92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33aa622b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33aa622988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33aa6217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvoti9xi                        0x000055eca028781f <unavailable> + 6175

    5    libc.so.6                          0x00002b33aab17460 __libc_start_main +
    245

    6    tmptvoti9xi                        0x000055eca0287389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp489x9jiw/tmp489x9jiw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54597ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54594e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54594e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54594e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp489x9jiw                        0x000055a39c04581f <unavailable> + 6175

    5    libc.so.6                          0x00002b54599d8460 __libc_start_main +
    245

    6    tmp489x9jiw                        0x000055a39c045389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    return\
    \ s.components(separatedBy: \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_3wq5joe.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: [\" \", \",\"])\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0955czrg.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: [\" \", \",\"])\n  \
    \              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp489x9jiw/tmp489x9jiw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54597ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54594e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54594e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54594e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp489x9jiw                        0x000055a39c04581f <unavailable> + 6175

    5    libc.so.6                          0x00002b54599d8460 __libc_start_main +
    245

    6    tmp489x9jiw                        0x000055a39c045389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ [\" \", \",\"])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzal_79li.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: [\" \", \",\"])\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpofhed624.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n  \
    \                                   ^~~~~~~~~~~~\n/tmp/tmpofhed624.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    s.enumerateSubstrings(in: s.startIndex..<s.endIndex, options:\
    \ .byWords) {\n        (subString, _, _, _) in\n        if let subString = subString\
    \ {\n            words.append(subString)\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl42_e2cw.swift:11:7: error: value of type 'String' has no member\
    \ 'enumerateSubstrings'\n    s.enumerateSubstrings(in: s.startIndex..<s.endIndex,\
    \ options: .byWords) {\n    ~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl42_e2cw.swift:11:68:\
    \ error: cannot infer contextual base in reference to member 'byWords'\n    s.enumerateSubstrings(in:\
    \ s.startIndex..<s.endIndex, options: .byWords) {\n                          \
    \                                        ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    let components = s.components(separatedBy: \", \")\n    for\
    \ component in components {\n        words.append(component)\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1ksju4ww.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = s.components(separatedBy: \", \")\n     \
    \                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let s =\
    \ s.split(separator: \" \")\n    return s.map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpf39w4q5d/tmpf39w4q5d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18122a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1811f97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1811f97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1811f967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf39w4q5d                        0x000056433576081f <unavailable> + 6175

    5    libc.so.6                          0x00002b181248c460 __libc_start_main +
    245

    6    tmpf39w4q5d                        0x0000564335760389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let to_array\
    \ = s.split(separator: \" \")\n    var array = [String]()\n    for i in to_array\
    \ {\n        if i.contains(\",\") {\n            let char_array = i.split(separator:\
    \ \",\")\n            array.append(String(char_array[0]))\n        } else {\n\
    \            array.append(String(i))\n        }\n    }\n    return array\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f04d02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f049f9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f049f9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f049f913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f049f8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8f049e248a <unavailable> + 1340554

    6    tmpvdwtvuhr                        0x0000562ee0a5a7a0 <unavailable> + 10144

    7    tmpvdwtvuhr                        0x0000562ee0a5a1ea <unavailable> + 8682

    8    libc.so.6                          0x00002b8f04eee460 __libc_start_main +
    245

    9    tmpvdwtvuhr                        0x0000562ee0a59659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \" \")\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpos3wn_r2.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // String.components(separatedBy:)\
    \ returns an array of the words in the string\n    // TODO: Write your implementation\
    \ here\n    return s.components(separatedBy: \", \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqbiuu9_h.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result\
    \ = [String]()\n    let words = s.components(separatedBy: \" \")\n    for word\
    \ in words {\n        let newWords = word.components(separatedBy: \",\")\n   \
    \     for newWord in newWords {\n            result.append(newWord)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvvm5sao3.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let results\
    \ = s.split(separator: \",\")\n    return results.map{String($0)}\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpnmonemzq/tmpnmonemzq.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a868b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a865afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a865af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a865ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmonemzq                        0x0000564b9c4ea81f <unavailable> + 6175

    5    libc.so.6                          0x00002b3a86aa4460 __libc_start_main +
    245

    6    tmpnmonemzq                        0x0000564b9c4ea389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuvpevcho.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \", \")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    for char in s {\n        if char != \" \" && char != \",\"\
    \ {\n            words.append(String(char))\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpvgzu8go5/tmpvgzu8go5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dd7db8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dd7aafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dd7aaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dd7aae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgzu8go5                        0x000055f19ec187af <unavailable> + 6063

    5    libc.so.6                          0x00002b3dd7fa4460 __libc_start_main +
    245

    6    tmpvgzu8go5                        0x000055f19ec18319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  var words:\
    \ [String] = []\n  s.split(separator: \" \").forEach {\n    words.append(String($0))\n\
    \  }\n  return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp10lu0r_3/tmp10lu0r_3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a38fa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a38c9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a38c9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a38c9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10lu0r_3                        0x0000558c2eea982f <unavailable> + 6191

    5    libc.so.6                          0x00002b8a39193460 __libc_start_main +
    245

    6    tmp10lu0r_3                        0x0000558c2eea9399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // TODO:\
    \ Please write your code here\n    let str = s.split(separator: \" \")\n    var\
    \ str1 = [String]()\n    for item in str {\n        let str2 = String(item)\n\
    \        str1.append(str2)\n    }\n    return str1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpbos7hu_c/tmpbos7hu_c.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0561a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b056178bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b056178b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b056178a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbos7hu_c                        0x0000558e3924998f <unavailable> + 6543

    5    libc.so.6                          0x00002b0561c80460 __libc_start_main +
    245

    6    tmpbos7hu_c                        0x0000558e392494f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let split\
    \ = s.components(separatedBy: \" \")\n    return split\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpah07mz0n.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let split = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let array\
    \ = s.split(separator: \" \")\n    var arr = [String]()\n    for i in array {\n\
    \        arr.append(String(i))\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp2dtghqz8/tmp2dtghqz8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9673a18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b967370fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b967370f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b967370e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dtghqz8                        0x00005572b25a998f <unavailable> + 6543

    5    libc.so.6                          0x00002b9673c04460 __libc_start_main +
    245

    6    tmp2dtghqz8                        0x00005572b25a94f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split\
    \ {\n        $0 == \" \" || $0 == \",\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp55selcr5.swift:10:14: error: no 'split' candidates produce the\
    \ expected contextual result type '[String]'\n    return s.split {\n         \
    \    ^\nSwift.Sequence:2:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true,\
    \ whereSeparator isSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:12:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator:\
    \ (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.split(separator: \",\")\n    return words.map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmp059j_0cg/tmp059j_0cg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfebf19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfebc10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfebc10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfebc0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp059j_0cg                        0x000055bb90c9781f <unavailable> + 6175

    5    libc.so.6                          0x00002adfec105460 __libc_start_main +
    245

    6    tmp059j_0cg                        0x000055bb90c97389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let array:\
    \ [String] = s.components(separatedBy: \" \")\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmppcxssoq2.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n    let array: [String] = s.components(separatedBy: \" \")\n \
    \                         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map{String($0)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmppmes2cel/tmppmes2cel.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90d4ecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90d4bc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90d4bc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90d4bc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmes2cel                        0x000055d95486f81f <unavailable> + 6175

    5    libc.so.6                          0x00002b90d50bb460 __libc_start_main +
    245

    6    tmppmes2cel                        0x000055d95486f389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaoo5v8s.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var wordList:\
    \ [String] = []\n    wordList = s.components(separatedBy: \" \")\n    return wordList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv1dncw50.swift:11:18: error: value of type 'String' has no member\
    \ 'components'\n    wordList = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var s =\
    \ s\n    s = s.replacingOccurrences(of: \",\", with: \" \")\n    s = s.replacingOccurrences(of:\
    \ \"\\n\", with: \" \")\n    s = s.replacingOccurrences(of: \"\\t\", with: \"\
    \ \")\n    s = s.replacingOccurrences(of: \"   \", with: \" \")\n    s = s.replacingOccurrences(of:\
    \ \"  \", with: \" \")\n    s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    return s.components(separatedBy: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp56wgn6xr.swift:11:11: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    s = s.replacingOccurrences(of: \",\", with: \" \"\
    )\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56wgn6xr.swift:12:11: error: value\
    \ of type 'String' has no member 'replacingOccurrences'\n    s = s.replacingOccurrences(of:\
    \ \"\\n\", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56wgn6xr.swift:13:11:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    s =\
    \ s.replacingOccurrences(of: \"\\t\", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp56wgn6xr.swift:14:11: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \    s = s.replacingOccurrences(of: \"   \", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp56wgn6xr.swift:15:11: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \    s = s.replacingOccurrences(of: \"  \", with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp56wgn6xr.swift:16:11: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \    s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n        ~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp56wgn6xr.swift:16:35: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n    s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                                 ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56wgn6xr.swift:17:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map{String($0)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmppmes2cel/tmppmes2cel.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90d4ecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90d4bc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90d4bc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90d4bc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmes2cel                        0x000055d95486f81f <unavailable> + 6175

    5    libc.so.6                          0x00002b90d50bb460 __libc_start_main +
    245

    6    tmppmes2cel                        0x000055d95486f389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let splitted\
    \ = s.split(separator: \" \")\n    var result: [String] = []\n    for str in splitted\
    \ {\n        result.append(String(str))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmp2jz06cp_/tmp2jz06cp_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b869e742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b869e439b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b869e439988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b869e4387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jz06cp_                        0x000055edb632092f <unavailable> + 6447

    5    libc.so.6                          0x00002b869e92e460 __libc_start_main +
    245

    6    tmp2jz06cp_                        0x000055edb6320499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    for ch in s {\n        if ch != \" \" && ch != \",\" {\n \
    \           words.append(String(ch))\n        }\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmp1mcseoc1/tmp1mcseoc1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b290057dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2900274b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2900274988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29002737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mcseoc1                        0x00005586003f180f <unavailable> + 6159

    5    libc.so.6                          0x00002b2900769460 __libc_start_main +
    245

    6    tmp1mcseoc1                        0x00005586003f1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n        .joined(separator: \"\")\n        .components(separatedBy: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7rphl174.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.split(separator: \" \")\n    return words.map({String($0)})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpby5ev6my/tmpby5ev6my.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77094c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77091bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77091bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77091ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpby5ev6my                        0x000055e65251981f <unavailable> + 6175

    5    libc.so.6                          0x00002b77096b0460 __libc_start_main +
    245

    6    tmpby5ev6my                        0x000055e652519389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpofhed624.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n  \
    \                                   ^~~~~~~~~~~~\n/tmp/tmpofhed624.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpofhed624.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n  \
    \                                   ^~~~~~~~~~~~\n/tmp/tmpofhed624.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ [\" \", \",\"])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_walm59k.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: [\" \", \",\"])\n         ~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let stringArray\
    \ = s.components(separatedBy: \" \")\n    return stringArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb6v7w8ku.swift:10:25: error: value of type 'String' has no member\
    \ 'components'\n    let stringArray = s.components(separatedBy: \" \")\n     \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var a =\
    \ s.replacingOccurrences(of: \",\", with: \"\")\n    a = a.replacingOccurrences(of:\
    \ \" \", with: \",\")\n    let arr = a.components(separatedBy: \",\")\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpacg52kb6.swift:10:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    var a = s.replacingOccurrences(of: \",\", with:\
    \ \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split\
    \ {$0 == \" \" || $0 == \",\"}.map {String($0)}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Enter\
    \ your code between the two comment markers\n    let str = s.split(separator:\
    \ \" \")\n    var result: [String] = []\n    for index in str {\n        result.append(String(index))\n\
    \    }\n    return result\n    // End code\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp4f135mdj/tmp4f135mdj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01de2cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ddfc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ddfc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ddfc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4f135mdj                        0x000055b9f0bf192f <unavailable> + 6447

    5    libc.so.6                          0x00002b01de4b9460 __libc_start_main +
    245

    6    tmp4f135mdj                        0x000055b9f0bf1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp489x9jiw/tmp489x9jiw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54597ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54594e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54594e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54594e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp489x9jiw                        0x000055a39c04581f <unavailable> + 6175

    5    libc.so.6                          0x00002b54599d8460 __libc_start_main +
    245

    6    tmp489x9jiw                        0x000055a39c045389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    let\
    \ arrString = s.components(separatedBy: \" \")\n    return arrString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj3lso4qo.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let arrString = s.components(separatedBy: \" \")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaoo5v8s.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  // your code\
    \ here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: '/tmp/tmpyha34q2u.swift:11:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ code goes here\n    return [\"\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpu_r0pcr_/tmpu_r0pcr_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17b1c5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17b1953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17b1953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17b19527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_r0pcr_                        0x000055d70d2a255f <unavailable> + 5471

    5    libc.so.6                          0x00002b17b1e48460 __libc_start_main +
    245

    6    tmpu_r0pcr_                        0x000055d70d2a20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    let characterSet = CharacterSet(charactersIn: \", \")\n  \
    \  let components = s.components(separatedBy: characterSet)\n    for word in components\
    \ {\n        if word != \"\" {\n            words.append(word)\n        }\n  \
    \  }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm8cqp296.swift:11:24: error: cannot find 'CharacterSet' in scope\n\
    \    let characterSet = CharacterSet(charactersIn: \", \")\n                 \
    \      ^~~~~~~~~~~~\n/tmp/tmpm8cqp296.swift:12:24: error: value of type 'String'\
    \ has no member 'components'\n    let components = s.components(separatedBy: characterSet)\n\
    \                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Your\
    \ code here\n    return s.split(separator: \" \").map(String.init)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmp3azfcc68/tmp3azfcc68.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae39bd7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae39ba73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae39ba73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae39ba727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3azfcc68                        0x000055740c1d681f <unavailable> + 6175

    5    libc.so.6                          0x00002ae39bf68460 __libc_start_main +
    245

    6    tmp3azfcc68                        0x000055740c1d6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Your\
    \ code here\n    return [\"\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpl5r6olfd/tmpl5r6olfd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad812944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81263bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81263b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81263a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5r6olfd                        0x000055b05d0af55f <unavailable> + 5471

    5    libc.so.6                          0x00002ad812b30460 __libc_start_main +
    245

    6    tmpl5r6olfd                        0x000055b05d0af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return [String]()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpl99z8i9u/tmpl99z8i9u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19a003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac199cfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac199cfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac199cf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl99z8i9u                        0x00005651face45af <unavailable> + 5551

    5    libc.so.6                          0x00002ac19a1ef460 __libc_start_main +
    245

    6    tmpl99z8i9u                        0x00005651face4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    let\
    \ words = s.components(separatedBy: \", \")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvfqq3dq8.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \", \")\n          \
    \      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \", \")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe90ikape.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \", \")\n          \
    \      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaoo5v8s.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let characters\
    \ = [\" \", \",\"]\n    var isNewWord = true\n    var word = \"\"\n    var words:\
    \ [String] = []\n    \n    for i in s {\n        if characters.contains(String(i))\
    \ {\n            if isNewWord {\n                isNewWord = false\n         \
    \   } else {\n                words.append(word)\n                word = \"\"\n\
    \            }\n        } else {\n            word.append(i)\n            isNewWord\
    \ = true\n        }\n    }\n    \n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp3d1ypfa_/tmp3d1ypfa_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3bc72dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3bc424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3bc424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3bc4237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d1ypfa_                        0x000056278582277f <unavailable> + 6015

    5    libc.so.6                          0x00002ab3bc919460 __libc_start_main +
    245

    6    tmp3d1ypfa_                        0x00005627858222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let s =\
    \ s.trimmingCharacters(in: .whitespacesAndNewlines)\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqjpeo3nf.swift:10:15: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \            ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpqjpeo3nf.swift:10:39: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    let\
    \ s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n                    \
    \                 ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ code here\n    return s.components(separatedBy: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgpl82uea.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ .whitespacesAndNewlines).filter { !$0.isEmpty }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3qk6g9c8.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: .whitespacesAndNewlines).filter\
    \ { !$0.isEmpty }\n           ~ ^~~~~~~~~~\n/tmp/tmp3qk6g9c8.swift:10:39: error:\
    \ cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return s.components(separatedBy: .whitespacesAndNewlines).filter { !$0.isEmpty\
    \ }\n                                     ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split\
    \ { $0 == \" \" || $0 == \",\" }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var r =\
    \ [String]()\n    var t = \"\"\n    for i in s {\n        if i == \" \" || i ==\
    \ \",\" {\n            if t != \"\" {\n                r.append(t)\n         \
    \       t = \"\"\n            }\n        } else {\n            t += String(i)\n\
    \        }\n    }\n    if t != \"\" {\n        r.append(t)\n    }\n    return\
    \ r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ code here\n    let arr = s.split{$0 == \" \" || $0 == \",\"}\n    return arr.map{String($0)}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    let chars = s.map { String($0) }\n    var word = \"\"\n  \
    \  for char in chars {\n        if char == \" \" || char == \",\" {\n        \
    \    if word != \"\" {\n                words.append(word)\n                word\
    \ = \"\"\n            }\n        } else {\n            word += char\n        }\n\
    \    }\n    if word != \"\" {\n        words.append(word)\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split\
    \ { !$0.isLetter }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9_jnhrwc.swift:10:14: error: no 'split' candidates produce the\
    \ expected contextual result type '[String]'\n    return s.split { !$0.isLetter\
    \ }\n             ^\nSwift.Sequence:2:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true,\
    \ whereSeparator isSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:12:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator:\
    \ (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var wordsArray\
    \ = [String]()\n    let characters = Array(s)\n    var word = String()\n    for\
    \ character in characters {\n        if (String(character) == \" \" || String(character)\
    \ == \",\") {\n            wordsArray.append(word)\n            word = String()\n\
    \        } else {\n            word += String(character)\n        }\n    }\n \
    \   wordsArray.append(word)\n    return wordsArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpnb589fx0/tmpnb589fx0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51050f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5104deeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5104dee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5104ded7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb589fx0                        0x00005612bf6eb99f <unavailable> + 6559

    5    libc.so.6                          0x00002b51052e3460 __libc_start_main +
    245

    6    tmpnb589fx0                        0x00005612bf6eb509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0d5uxzey.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \" \")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ code here\n    return s.components(separatedBy: \", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp8wx27j2.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // YOUR\
    \ CODE HERE\n    let newString = s.split(separator: \" \")\n    var newArray =\
    \ [String]()\n    for element in newString {\n        newArray.append(String(element))\n\
    \    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp6uc9g4d1/tmp6uc9g4d1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f1516dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f14e64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f14e64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f14e637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6uc9g4d1                        0x000055ace9d5a98f <unavailable> + 6543

    5    libc.so.6                          0x00002b5f15359460 __libc_start_main +
    245

    6    tmp6uc9g4d1                        0x000055ace9d5a4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.split(separator:\
    \ \" \").map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpx49xi1cy/tmpx49xi1cy.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f05cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f059e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f059e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f059e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx49xi1cy                        0x0000559b2b30781f <unavailable> + 6175

    5    libc.so.6                          0x00002b4f05ed7460 __libc_start_main +
    245

    6    tmpx49xi1cy                        0x0000559b2b307389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    var word: String = \"\"\n    for c in s {\n        if c ==\
    \ \" \" || c == \",\" {\n            if word != \"\" {\n                words.append(word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += String(c)\n        }\n    }\n    if word != \"\" {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ [\" \", \",\"])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzal_79li.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: [\" \", \",\"])\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaoo5v8s.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp8epmns8f/tmp8epmns8f.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abea18d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abea15cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abea15cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abea15cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8epmns8f                        0x000056346ddce81f <unavailable> + 6175

    5    libc.so.6                          0x00002abea1ac2460 __libc_start_main +
    245

    6    tmp8epmns8f                        0x000056346ddce389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // TODO:\
    \ Write some code to solve this coding challenge\n    return s.components(separatedBy:\
    \ .whitespacesAndNewlines)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp44cozefw.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: .whitespacesAndNewlines)\n\
    \           ~ ^~~~~~~~~~\n/tmp/tmp44cozefw.swift:11:39: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n    return s.components(separatedBy:\
    \ .whitespacesAndNewlines)\n                                     ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let characters\
    \ = CharacterSet(charactersIn: \", \")\n    let words = s.components(separatedBy:\
    \ characters)\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjibjangh.swift:10:22: error: cannot find 'CharacterSet' in scope\n\
    \    let characters = CharacterSet(charactersIn: \", \")\n                   \
    \  ^~~~~~~~~~~~\n/tmp/tmpjibjangh.swift:11:19: error: value of type 'String' has\
    \ no member 'components'\n    let words = s.components(separatedBy: characters)\n\
    \                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var l: [String]\
    \ = []\n    var temp: String = \"\"\n    for c in s {\n        if c == \" \" ||\
    \ c == \",\" {\n            l.append(temp)\n            temp = \"\"\n        }\
    \ else {\n            temp += String(c)\n        }\n    }\n    l.append(temp)\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp26a0dlf3/tmp26a0dlf3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a65975c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a6566cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a6566c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a6566b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26a0dlf3                        0x0000561017d5580f <unavailable> + 6159

    5    libc.so.6                          0x00002b2a65b61460 __libc_start_main +
    245

    6    tmp26a0dlf3                        0x0000561017d55379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let arr\
    \ = s.components(separatedBy: \" \")\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3cntio8e.swift:10:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split\
    \ { $0 == \" \" || $0 == \",\" }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp489x9jiw/tmp489x9jiw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54597ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54594e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54594e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54594e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp489x9jiw                        0x000055a39c04581f <unavailable> + 6175

    5    libc.so.6                          0x00002b54599d8460 __libc_start_main +
    245

    6    tmp489x9jiw                        0x000055a39c045389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  var words\
    \ = [String]()\n  s.enumerateSubstrings(in: s.startIndex..<s.endIndex, options:\
    \ .byWords) { word, _, _, _ in\n    if let word = word {\n      words.append(word)\n\
    \    }\n  }\n  return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_o56tc1m.swift:11:5: error: value of type 'String' has no member\
    \ 'enumerateSubstrings'\n  s.enumerateSubstrings(in: s.startIndex..<s.endIndex,\
    \ options: .byWords) { word, _, _, _ in\n  ~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_o56tc1m.swift:11:66:\
    \ error: cannot infer contextual base in reference to member 'byWords'\n  s.enumerateSubstrings(in:\
    \ s.startIndex..<s.endIndex, options: .byWords) { word, _, _, _ in\n         \
    \                                                       ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return [String]()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpl99z8i9u/tmpl99z8i9u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19a003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac199cfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac199cfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac199cf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl99z8i9u                        0x00005651face45af <unavailable> + 5551

    5    libc.so.6                          0x00002ac19a1ef460 __libc_start_main +
    245

    6    tmpl99z8i9u                        0x00005651face4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpofhed624.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n  \
    \                                   ^~~~~~~~~~~~\n/tmp/tmpofhed624.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ code here\n    return s.split(separator: \" \").map{String($0)}\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpib2hjkun/tmpib2hjkun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c14bb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c148aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c148aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c148a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpib2hjkun                        0x000055c2c8fd781f <unavailable> + 6175

    5    libc.so.6                          0x00002b5c14d9f460 __libc_start_main +
    245

    6    tmpib2hjkun                        0x000055c2c8fd7389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpbup_z3ld/tmpbup_z3ld.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a58385c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a5807cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a5807c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a5807b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbup_z3ld                        0x000055d3b903e81f <unavailable> + 6175

    5    libc.so.6                          0x00002b9a58571460 __libc_start_main +
    245

    6    tmpbup_z3ld                        0x000055d3b903e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ [\" \", \",\"])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzal_79li.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: [\" \", \",\"])\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpofhed624.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n  \
    \                                   ^~~~~~~~~~~~\n/tmp/tmpofhed624.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result\
    \ = [String]()\n    let parts = s.split(separator: \" \")\n    for part in parts\
    \ {\n        let subParts = part.split(separator: \",\")\n        for subPart\
    \ in subParts {\n            result.append(String(subPart))\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0d5uxzey.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \" \")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result:\
    \ [String] = []\n    for word in s.components(separatedBy: \" \") {\n        result.append(word)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdw_xnie5.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return [String]()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpl99z8i9u/tmpl99z8i9u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19a003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac199cfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac199cfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac199cf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl99z8i9u                        0x00005651face45af <unavailable> + 5551

    5    libc.so.6                          0x00002ac19a1ef460 __libc_start_main +
    245

    6    tmpl99z8i9u                        0x00005651face4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70shtq9r.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpbup_z3ld/tmpbup_z3ld.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a58385c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a5807cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a5807c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a5807b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbup_z3ld                        0x000055d3b903e81f <unavailable> + 6175

    5    libc.so.6                          0x00002b9a58571460 __libc_start_main +
    245

    6    tmpbup_z3ld                        0x000055d3b903e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ solution goes here\n    return [\"\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpjtw0819d/tmpjtw0819d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af67b10ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af67ae05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af67ae05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af67ae047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjtw0819d                        0x0000562c31bda55f <unavailable> + 5471

    5    libc.so.6                          0x00002af67b2fa460 __libc_start_main +
    245

    6    tmpjtw0819d                        0x0000562c31bda0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpofhed624.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \", \"))\n  \
    \                                   ^~~~~~~~~~~~\n/tmp/tmpofhed624.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \", \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpqcqecugj/tmpqcqecugj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360ccf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360c9eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360c9ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360c9ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqecugj                        0x00005627d9f6d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b360cee3460 __libc_start_main +
    245

    6    tmpqcqecugj                        0x00005627d9f6d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpyystnsep/tmpyystnsep.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb84681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb84378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb84378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb843777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyystnsep                        0x000055a4e92fd55f <unavailable> + 5471

    5    libc.so.6                          0x00002abb8486d460 __libc_start_main +
    245

    6    tmpyystnsep                        0x000055a4e92fd0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaoo5v8s.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split\
    \ { c in c == \" \" || c == \",\" }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: 0
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let start\
    \ = s.startIndex\n    var result = [String]()\n    var head = s.startIndex\n \
    \   for i in s.indices {\n        if s[i] == \" \" || s[i] == \",\" {\n      \
    \      if i > head {\n                result.append(String(s[head..<i]))\n   \
    \         }\n            head = s.index(after: i)\n        }\n    }\n    if head\
    \ < s.endIndex {\n        result.append(String(s[head..<s.endIndex]))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  let arr =\
    \ s.split(separator: \" \")\n  let arr2 = s.split(separator: \",\")\n  var result:\
    \ [String] = []\n  for i in arr2 {\n    result.append(String(i))\n  }\n  for i\
    \ in arr {\n    result.append(String(i))\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp6r6g0wzc/tmp6r6g0wzc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c2e63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c2b5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c2b5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c2b597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6r6g0wzc                        0x00005570ad89892f <unavailable> + 6447

    5    libc.so.6                          0x00002b26c304f460 __libc_start_main +
    245

    6    tmp6r6g0wzc                        0x00005570ad898499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaoo5v8s.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let arr\
    \ = s.components(separatedBy: \" \")\n    let arr2 = s.components(separatedBy:\
    \ \",\")\n    let arr3 = arr + arr2\n    return arr3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ebve2om.swift:10:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n/tmp/tmp5ebve2om.swift:11:18: error: value of type 'String' has\
    \ no member 'components'\n    let arr2 = s.components(separatedBy: \",\")\n  \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let parts\
    \ = s.split(separator: \" \")\n    return parts.map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpc4wtwdj3/tmpc4wtwdj3.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b646484bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6464542b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6464542988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64645417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc4wtwdj3                        0x0000557255d7181f <unavailable> + 6175

    5    libc.so.6                          0x00002b6464a37460 __libc_start_main +
    245

    6    tmpc4wtwdj3                        0x0000557255d71389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \" \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp00yttm03/tmp00yttm03.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8e650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f8e347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f8e347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f8e3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00yttm03                        0x000055d4804c181f <unavailable> + 6175

    5    libc.so.6                          0x00002b0f8e83c460 __libc_start_main +
    245

    6    tmp00yttm03                        0x000055d4804c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.split(separator: \" \")\n    var result = [String]()\n    for word in words\
    \ {\n        result.append(String(word))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: Exception
  stderr: 'tmpwa0te8dj/tmpwa0te8dj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af449d62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af449a59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af449a59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af449a587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa0te8dj                        0x00005579c902298f <unavailable> + 6543

    5    libc.so.6                          0x00002af449f4e460 __libc_start_main +
    245

    6    tmpwa0te8dj                        0x00005579c90224f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013119
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuvpevcho.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \", \")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result:\
    \ [String] = []\n    result = s.components(separatedBy: \" \")\n    for i in result\
    \ {\n        if i == \"\" {\n            let index = result.index(of: i)\n   \
    \         result.remove(at: index!)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpec5pz5jv.swift:11:16: error: value of type 'String' has no member\
    \ 'components'\n    result = s.components(separatedBy: \" \")\n             ~\
    \ ^~~~~~~~~~\n/tmp/tmpec5pz5jv.swift:14:32: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = result.index(of: i)\n\
    \                               ^\n/tmp/tmpec5pz5jv.swift:14:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: i)\n                     \
    \          ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1660013119
