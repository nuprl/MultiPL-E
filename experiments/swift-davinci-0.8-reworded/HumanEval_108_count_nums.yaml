name: HumanEval_108_count_nums
language: swift
prompt: "\n/// Write a function count_nums which takes an array of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n/// 0\n/// >>> count_nums(arr:\
  \ [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr: [1, 1, 2])\n/// 3\nfunc count_nums(arr:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
  \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
  \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
  \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
  \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
completions: ["    var count = 0\n    for i in arr {\n        if i < 0 {\n       \
    \     i = i * -1\n        }\n        if i % 10 != 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for num in arr {\n\
    \        var sum = 0\n        var temp = num\n        if temp < 0 {\n        \
    \    temp = temp * -1\n        }\n        while temp > 0 {\n            sum +=\
    \ temp % 10\n            temp /= 10\n        }\n        if sum > 0 {\n       \
    \     count += 1\n        }\n    }\n    return count", "  return arr.reduce(0)\
    \ {\n    if $1.digits.reduce(0, +) == 0 {\n      return $0\n    }\n    return\
    \ $0 + 1\n  }", '    // Your code here', '    return 0', "    var result = 0\n\
    \    for num in arr {\n        if (num < 0) {\n            if (num/10 < 0) {\n\
    \                result += 1\n            }\n        } else {\n            if\
    \ (num/10 > 0) {\n                result += 1\n            }\n        }\n    }\n\
    \    return result", "    return arr.reduce(0) { acc, num in\n        return acc\
    \ + (sum_digits(num: num) > 0 ? 1 : 0)\n    }", "    var count = 0\n    for num\
    \ in arr {\n        var sum = 0\n        if num < 0 {\n            sum += -num\
    \ % 10\n            num /= -10\n        }\n        while num > 0 {\n         \
    \   sum += num % 10\n            num /= 10\n        }\n        if sum > 0 {\n\
    \            count += 1\n        }\n    }\n    return count", "    return arr.filter\
    \ { num in\n        var sum = 0\n        var n = num\n        while n != 0 {\n\
    \            sum += n % 10\n            n /= 10\n        }\n        return sum\
    \ > 0\n    }.count", "    var count = 0\n    for i in arr {\n        var n = i\n\
    \        var temp = 0\n        if n < 0 {\n            n = n * -1\n        }\n\
    \        while n > 0 {\n            temp += n % 10\n            n = n / 10\n \
    \       }\n        if temp > 0 {\n            count += 1\n        }\n    }\n \
    \   return count", "    let nums = arr.filter({ $0 >= 0 ? true : false })\n  \
    \  return nums.filter({ getSumOfDigits($0) > 0 }).count", "  return arr.reduce(0)\
    \ { (count, int) in\n    let num = Int(abs(int))\n    var rest = num\n    var\
    \ sum = 0\n    while rest > 0 {\n      sum += rest % 10\n      rest /= 10\n  \
    \  }\n    return count + (sum > 0 ? 1 : 0)\n  }", "    var count = 0\n    var\
    \ sum = 0\n    for num in arr {\n        sum = 0\n        if num < 0 {\n     \
    \       sum = sum + num\n        } else {\n            sum = sum + num\n     \
    \   }\n        while (sum > 0) {\n            sum = sum % 10\n            sum\
    \ = sum / 10\n        }\n        if sum > 0 {\n            count = count + 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for i in arr {\n\
    \        if(sumOfDigits(arr: i) > 0) {\n            count = count + 1\n      \
    \  }\n    }\n    return count", '    return arr.filter { $0 > 0 }.reduce(0) {
    $0 + $1 }.digits.reduce(0) { $0 + $1 }', "    var count = 0\n    for i in arr\
    \ {\n        if i.abs() > 0 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for n in arr {\n        if sum_digits(n: n)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ arr.reduce(0) { count, num in\n        if num < 0 {\n            return count\
    \ + count_digits(of: -num)\n        } else {\n            return count + count_digits(of:\
    \ num)\n        }\n    }", "    var result = 0\n    var tmp: Int\n    for i in\
    \ arr {\n        tmp = 0\n        for j in i.digits {\n            tmp += j\n\
    \        }\n        if tmp > 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    return arr.filter {\n        ($0 / 10).abs + $0.abs\
    \ % 10 > 0\n    }.count", "    var ans = 0\n    for num in arr {\n        var\
    \ sum = 0\n        if num < 0 {\n            sum += -num % 10\n            num\
    \ = -num / 10\n        }\n        while num > 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        if sum > 0 {\n            ans += 1\n\
    \        }\n    }\n    return ans", "    return arr.reduce(0) { sum, i in\n  \
    \      var res = i\n        if i < 0 {\n            res = -res\n        }\n  \
    \      var sum_digits = 0\n        while res > 0 {\n            sum_digits +=\
    \ res % 10\n            res /= 10\n        }\n        return sum + (sum_digits\
    \ > 0 ? 1 : 0)\n    }", "    var ret = 0\n    for i in arr {\n        if (i >\
    \ 0) {\n            ret += count_signed_digits(num: i)\n        } else if (i <\
    \ 0) {\n            ret += 1 + count_signed_digits(num: -i)\n        }\n    }\n\
    \    return ret", '  return 0', "    return arr.filter { value in\n        var\
    \ num = value\n        if num < 0 {\n            num = -num\n        }\n     \
    \   var sum = 0\n        while num > 0 {\n            sum += num % 10\n      \
    \      num /= 10\n        }\n        return sum > 0\n    }.count", '    return
    0', "    var cnt = 0\n    for num in arr {\n        var sum = 0\n        var n\
    \ = num\n        while n != 0 {\n            sum += n % 10\n            n /= 10\n\
    \        }\n        if sum > 0 {\n            cnt += 1\n        }\n    }\n   \
    \ return cnt", "    // YOUR CODE HERE\n    var sum = 0\n    for number in arr\
    \ {\n        if number >= 0 {\n            sum += sum_digits(num: number)\n  \
    \      } else {\n            sum += sum_digits(num: number * -1)\n        }\n\
    \    }\n    return sum", '    return arr.filter { abs($0) == $0 ? $0 : sum_signed_digits($0)
    > 0 }.count', "    var sum = 0\n    for i in arr {\n        var v = i\n      \
    \  if v < 0 {\n            v = -v\n        }\n        while v > 0 {\n        \
    \    sum += v % 10\n            v /= 10\n        }\n    }\n    return sum", " \
    \   var count = 0\n    for i in arr {\n        var sum = 0\n        var i = i\n\
    \        if i < 0 {\n            i = -i\n        }\n        while i > 0 {\n  \
    \          sum += i % 10\n            i /= 10\n        }\n        if sum > 0 {\n\
    \            count += 1\n        }\n    }\n    return count", '  return arr.filter({$0
    > 0}).count', '    return arr.filter({abs($0) > 0}).count', "    return arr.filter({\
    \ $0 != 0 }).reduce(0, { (res, next) in\n        var next = next\n        var\
    \ s = 0\n        while next != 0 {\n            s += abs(next % 10)\n        \
    \    next /= 10\n        }\n        return res + (s > 0 ? 1 : 0)\n    })", "\t\
    var count = 0\n\tfor n in arr {\n\t\tif n < 0 {\n\t\t\tif -n.digits.reduce(0,\
    \ +) > 0 {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t} else {\n\t\t\tif n.digits.reduce(0,\
    \ +) > 0 {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count", '    return
    0', '    return arr.filter({ abs($0) > 9 ? $0.digits().sum() > 0 : $0 > 0 }).count',
  "    if arr.count == 0 {\n        return 0\n    }\n    var tmp = arr\n    var i\
    \ = 0\n    while i < tmp.count {\n        var sum = 0\n        for j in 0..<String(tmp[i]).count\
    \ {\n            sum += Int(String(String(tmp[i])[j]))!\n        }\n        if\
    \ sum == 0 {\n            tmp.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return tmp.count", "    var result = 0\n    for i in\
    \ arr {\n        var copy = i\n        var sum = 0\n        if copy < 0 {\n  \
    \          copy = copy * -1\n        }\n        while copy > 0 {\n           \
    \ sum += copy % 10\n            copy /= 10\n        }\n        if sum > 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    // your code\
    \ here\n    return 0", '    return arr.filter { abs($0) % 10 != 0 }.count', " \
    \   var r = 0\n    for x in arr {\n        var sum = 0\n        if x < 0 {\n \
    \           sum += -x % 10\n            var x = -x / 10\n        } else {\n  \
    \          var x = x\n        }\n        while x > 0 {\n            sum += x %\
    \ 10\n            x /= 10\n        }\n        if sum > 0 {\n            r += 1\n\
    \        }\n    }\n    return r", "    var res = 0\n    for i in arr {\n     \
    \   if sum(digits(num: i)) > 0 {\n            res += 1\n        }\n    }\n   \
    \ return res", "    return arr.filter {\n        var num = $0\n        var digits\
    \ = 0\n        while num != 0 {\n            digits += abs(num % 10)\n       \
    \     num /= 10\n        }\n        return digits > 0\n    }.count", "  var sum\
    \ = 0\n  for num in arr {\n    var digits = abs(num)\n    while digits > 0 {\n\
    \      sum += digits % 10\n      digits /= 10\n    }\n  }\n  return sum", '    return
    0', '    return arr.filter({ sum_digits($0) > 0 }).count', '    return 0', '    return
    0', "    var count = 0\n    for elem in arr {\n        let digits = Array(String(elem)).map\
    \ { Int(String($0))! }\n        if digits.reduce(0, +) > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", '    return 0', '    return arr.filter
    { $0 != 0 }.count', '    return arr.filter({ $0 != 0 && $0.digitalRoot != 0 }).count',
  "    var count = 0\n    for i in arr {\n        if i > 0 {\n            var iCopy\
    \ = i\n            var sumOfDigits = 0\n            while iCopy > 0 {\n      \
    \          sumOfDigits += iCopy % 10\n                iCopy /= 10\n          \
    \  }\n            if sumOfDigits > 0 {\n                count += 1\n         \
    \   }\n        } else if i < 0 {\n            var iCopy = i\n            var sumOfDigits\
    \ = 0\n            while iCopy < 0 {\n                sumOfDigits += iCopy % 10\n\
    \                iCopy /= 10\n            }\n            if sumOfDigits < 0 {\n\
    \                count += 1\n            }\n        }\n    }\n    return count",
  "    var counter = 0\n    for num in arr {\n        var temp = num\n        var\
    \ sum = 0\n        if num < 0 {\n            temp = num * -1\n        }\n    \
    \    while temp > 0 {\n            sum += temp % 10\n            temp /= 10\n\
    \        }\n        if sum > 0 {\n            counter += 1\n        }\n    }\n\
    \    return counter", "    arr.reduce(0) { (res, num) in\n        return res +\
    \ (abs(num) >= 10 ? 1 : 0)\n    }", "    if arr.count == 0 {\n        return 0\n\
    \    }\n    var count = 0\n    for num in arr {\n        if num == 0 {\n     \
    \       count += 1\n        } else if num > 0 {\n            count += convertPositive(num:\
    \ num)\n        } else {\n            count += convertNegative(num: num)\n   \
    \     }\n    }\n    return count", '    return arr.filter { $0.digits.reduce(0,
    +) > 0 }.count', "    var res = 0\n    for i in arr {\n        var i = i\n   \
    \     var sum = 0\n        if i < 0 {\n            i = -i\n        }\n       \
    \ while i > 0 {\n            sum += i % 10\n            i /= 10\n        }\n \
    \       if sum > 0 {\n            res += 1\n        }\n    }\n    return res",
  '  return arr.filter({$0 > 0}).reduce(0, {$0 + $1})', '    return arr.filter { $0.digits.reduce(0,
    +) > 0 }.count', "    return arr.reduce(0) { sum, val in\n        guard val !=\
    \ 0 else { return sum }\n        var value = val\n        var count = 0\n    \
    \    while value != 0 {\n            let digit = abs(value % 10)\n           \
    \ count += digit\n            value /= 10\n        }\n        return sum + (count\
    \ > 0 ? 1 : 0)\n    }", "  var count = 0\n  for i in arr {\n    var num = i\n\
    \    var sum = 0\n    while num != 0 {\n      sum += num % 10\n      num /= 10\n\
    \    }\n    if sum > 0 {\n      count += 1\n    }\n  }\n  return count", '    return
    arr.filter({ $0.digits.reduce(0, +) > 0 }).count', '  return 0', "  var i = 0\n\
    \  for num in arr {\n    if num.absum() > 0 {\n      i += 1\n    }\n  }\n  return\
    \ i", "    return arr.reduce(0) { (total, num) in\n        total + ((abs(num).digits.reduce(0,\
    \ +) > 0) ? 1 : 0)\n    }", "    var count = 0\n    for num in arr {\n       \
    \ if num == 0 {\n            continue\n        }\n        if num < 0 {\n     \
    \       count += 1\n        }\n        var sum = 0\n        var temp = num\n \
    \       while temp != 0 {\n            sum += temp % 10\n            temp /= 10\n\
    \        }\n        if sum > 0 {\n            count += 1\n        }\n    }\n \
    \   return count", "    // YOUR CODE HERE\n    return 0", "    if arr.count <\
    \ 1 {\n        return 0\n    }\n    var result = 0\n    for i in arr {\n     \
    \   let sum = sum_of_digits(num: i)\n        if sum > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", '    return arr.filter{sum_digits($0)
    > 0}.count', '    return arr.reduce(0) { $0 + ($1.sumDigits() > 0 ? 1 : 0) }',
  "    var count = 0\n    for num in arr {\n        var positive = num\n        if\
    \ positive < 0 {\n            positive = -positive\n        }\n        var sum\
    \ = 0\n        while positive > 0 {\n            sum += positive % 10\n      \
    \      positive /= 10\n        }\n        if sum > 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    return arr.reduce(0) { acc, cur in\n\
    \        let s = String(cur).map { String($0) }.filter { $0 != \"-\" }.reduce(0)\
    \ { $0 + Int($1)! }\n        return acc + (s > 0 ? 1 : 0)\n    }", '    return
    arr.filter{$0 >= 0 ? $0 % 10 > 0 : $0 % 10 < 0}.count', "    let isZero = arr.filter\
    \ { abs($0) % 10 == 0 }\n    return arr.count - isZero.count", "    var result\
    \ = 0\n    for number in arr {\n        if sum_of_digits(num: number) > 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var total\
    \ = 0\n    for num in arr {\n        if num.digits.reduce(0, +) > 0 {\n      \
    \      total += 1\n        }\n    }\n    return total", '    return arr.filter{abs($0)
    > 9 || abs($0) < 1}.count', '    return arr.reduce(0) { $0 + ($1 > 0 ? 1 : 0)
    }', "    var sum = 0\n    for i in arr {\n        if i > 0 {\n            var\
    \ m = i\n            while m > 0 {\n                sum += m % 10\n          \
    \      m /= 10\n            }\n        } else {\n            var m = -i\n    \
    \        while m > 0 {\n                sum -= m % 10\n                m /= 10\n\
    \            }\n        }\n    }\n    return sum", '    return arr.filter { abs($0)
    > 9 || $0 < -9 }.count', "  return arr.reduce(0) { (r, n) in\n    r + (n == 0\
    \ ? 0 : n < 0 ? n.abs.sum_of_digits + 1 : n.sum_of_digits)\n  }", '    return
    0', "\treturn 0", '    return arr.reduce(0) { $0 + ($1 < 0 ? (-1 * $1).digits.reduce(0,
    +) : $1.digits.reduce(0, +)) > 0 ? 1 : 0 }', "    var c = 0\n    for n in arr\
    \ {\n        if n == 0 {\n            continue\n        }\n        if n < 0 {\n\
    \            n *= -1\n        }\n        var m = n\n        while m > 0 {\n  \
    \          c += m % 10\n            m /= 10\n        }\n    }\n    return c",
  '    return arr.filter { $0.digits().reduce(0, +) > 0 }.count', '    return arr.filter({abs($0)
    >= 10 && $0 % 10 != 0}).count', '    return arr.filter({ s in s != 0 && s.abs().sumDigits()
    > 0 }).count', "    let signed_digits = arr.map({x in x.digits()}).filter({x in\
    \ x.reduce(0, +) > 0})\n    return signed_digits.count", '    return arr.reduce(0)
    { acc, n in acc + ((n < 0) ? n : n).digits.reduce(0, +) > 0 ? 1 : 0 }', "    var\
    \ count = 0\n    for num in arr {\n        var a = num\n        if num < 0 {\n\
    \            a = -a\n        }\n        if num == 0 {\n            count += 1\n\
    \        } else {\n            while a > 0 {\n                if a % 10 > 0 {\n\
    \                    count += 1\n                    break\n                }\n\
    \                a /= 10\n            }\n        }\n    }\n    return count",
  '    return 0', "    var cnt = 0\n    for i in arr {\n        if i.digits.reduce(0,\
    \ +) > 0 {\n            cnt += 1\n        }\n    }\n    return cnt", "    let\
    \ filtered = arr.filter{$0.signedDigits().reduce(0,+) > 0}\n    return filtered.count",
  "    return arr.reduce(0) {\n        $0 + (abs($1) % 10 != 0 ? 1 : 0)\n    }", " \
    \   return arr.filter({\n        let i = abs($0)\n        return i == 0 ? false\
    \ : (i % 10) + i / 10 > 0\n    }).count", '  return 0', "    return arr.reduce(0)\
    \ { acc, number in\n        let abs_number = abs(number)\n        let number_with_sign\
    \ = number > 0 ? abs_number : -abs_number\n        let digits = digits_of(number:\
    \ number_with_sign)\n        let number_sum = digits.reduce(0) { $0 + $1 }\n \
    \       if number_sum > 0 {\n            return acc + 1\n        } else {\n  \
    \          return acc\n        }\n    }", "\treturn arr.filter({\n\t\tvar sum\
    \ = 0\n\t\tvar n = $0\n\t\twhile n != 0 {\n\t\t\tsum += (n > 0 ? n : -n) % 10\n\
    \t\t\tn /= 10\n\t\t}\n\t\treturn sum > 0\n\t}).count", "  let nums = arr.filter\
    \ { $0 > 0 }\n  if nums.count == 0 {\n    return 0\n  }\n  return nums.map { $0\
    \ % 10 + ($0 / 10) % 10 + ($0 / 100) % 10 + ($0 / 1000) % 10 }.filter { $0 > 0\
    \ }.count", "    return arr.reduce(0) { acc, num in\n        acc + (num.digits().reduce(0,\
    \ +) != 0 ? 1 : 0)\n    }", "    var count = 0\n    for i in arr {\n        var\
    \ sum = 0\n        var num = i\n        if i < 0 {\n            num = -i\n   \
    \     }\n        while num > 0 {\n            sum += num % 10\n            num\
    \ /= 10\n        }\n        if sum > 0 {\n            count += 1\n        }\n\
    \    }\n    return count", "    var result = 0\n    for i in arr {\n        var\
    \ x = i\n        if i < 0 {\n            x = -x\n        }\n        var sum =\
    \ 0\n        while x > 0 {\n            sum += x % 10\n            x /= 10\n \
    \       }\n        if sum > 0 {\n            result += 1\n        }\n    }\n \
    \   return result", '    return 0', '    return arr.filter({n in n != 0 && n !=
    (-1 * n)}).count', "  var count = 0\n  for num in arr {\n    if num != 0 && sum_signed_digits(num:\
    \ num) > 0 {\n      count += 1\n    }\n  }\n  return count", "    var count =\
    \ 0\n    for num in arr {\n        if check_num(num: num) {\n            count\
    \ += 1\n        }\n    }\n    return count", '    return 0', "    var count =\
    \ 0\n    for i in arr {\n        var p = i\n        var sum = 0\n        while\
    \ p != 0 {\n            sum += p % 10\n            p /= 10\n        }\n      \
    \  if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  "    return arr.filter { $0 != 0 }.filter {\n        $0.digits.map { $0.abs }.reduce(0,\
    \ +) > 0\n    }.count", '    return 0', "    var count = 0\n    for num in arr\
    \ {\n        let nums = num.digits\n        let sum = nums.reduce(0, +)\n    \
    \    if num < 0 {\n            if nums.reduce(0, +) + 1 > 0 {\n              \
    \  count += 1\n            }\n        } else {\n            if sum > 0 {\n   \
    \             count += 1\n            }\n        }\n    }\n    return count",
  '    return arr.filter { is_num($0) }.count', "    var count = 0\n    for num in\
    \ arr {\n        var sum = 0\n        var n = num\n        if n < 0 {\n      \
    \      n = -n\n        }\n        while n > 0 {\n            sum += n % 10\n \
    \           n /= 10\n        }\n        if sum > 0 {\n            count += 1\n\
    \        }\n    }\n    return count", '  return arr.filter { has_non_zero_digit_sum($0)
    }.count', '    return arr.filter({ $0.digits.reduce(0, { $0 + $1 }) > 0 }).count',
  "    var sum = 0\n    for i in arr {\n        var k = i\n        if k < 0 {\n  \
    \          k = -1 * k\n        }\n        while k > 0 {\n            sum += k\
    \ % 10\n            k /= 10\n        }\n    }\n    return sum", '    return arr.filter({
    $0.abs % 9 > 0 }).count', "    return arr.reduce(0) { (result, element) in\n \
    \       var sumOfDigits = element.digits.reduce(0) { $0 + $1 }\n        if element\
    \ < 0 {\n            sumOfDigits *= -1\n        }\n        return sumOfDigits\
    \ > 0 ? result + 1 : result\n    }", "    var count = 0\n    for n in arr {\n\
    \        var sum = 0\n        var current = n\n        if current < 0 {\n    \
    \        current = current * -1\n        }\n        while current > 0 {\n    \
    \        sum += current % 10\n            current = current / 10\n        }\n\
    \        if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  '    return 0', "    arr.filter({ (num) -> Bool in\n        if num >= 0 {\n    \
    \        return sum_digits(num: num) > 0\n        } else {\n            return\
    \ sum_digits(num: num * -1) > 0\n        }\n    }).count", "    return arr.filter\
    \ {(num: Int) -> Bool in\n        let digits = abs(num).digits()\n        return\
    \ digits.reduce(0, combine: +) > 0\n    }.count", '    return arr.filter({ sum_digits($0)
    > 0 }).count', '    return 0', "    return arr.reduce(0) { count, num in\n   \
    \     if digits_sum(num: num) > 0 {\n            return count + 1\n        }\n\
    \        return count\n    }", "    if arr.count == 0 {\n        return 0\n  \
    \  } else {\n        var count = 0\n        for num in arr {\n            if sum_digits(num:\
    \ num) > 0 {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }", "    var count = 0\n    for num in arr {\n        var sum = 0\n\
    \        var n = num\n        if n < 0 {\n            n = -n\n        }\n    \
    \    while n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n\
    \        if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  '    return arr.filter { $0 != 0 }.count', "  var count = 0\n  for num in arr {\n\
    \    var sum = 0\n    var num2 = num\n    if num < 0 {\n      num2 = -num\n  \
    \  }\n    while num2 > 0 {\n      sum += num2 % 10\n      num2 /= 10\n    }\n\
    \    if sum > 0 {\n      count += 1\n    }\n  }\n  return count", "    // FIXME:\
    \ Implement this function.\n    return 0", '    return 0', "    return arr.reduce(0)\
    \ { (res, num) in\n        res + abs(num).digits.reduce(0, +) > 0 ? 1 : 0\n  \
    \  }", "    let nums = arr.map {\n        return abs($0)\n    }.reduce(0) {\n\
    \        var total = $0\n        var r = $1\n        while r > 0 {\n         \
    \   total += r % 10\n            r /= 10\n        }\n        return total\n  \
    \  }\n    return nums", "    var count = 0\n    for num in arr {\n        var\
    \ countDigits = 0\n        var temp: Int\n        if num < 0 {\n            temp\
    \ = -num\n        } else {\n            temp = num\n        }\n        while temp\
    \ > 0 {\n            countDigits += temp % 10\n            temp /= 10\n      \
    \  }\n        if countDigits > 0 {\n            count += 1\n        }\n    }\n\
    \    return count", "    // your code here\n    return 0", "  // YOUR CODE HERE\n\
    \  return 0", "\treturn arr.reduce(0) { $0 + ($1 != 0 && (abs($1) != $1 || $1\
    \ % 10 != 0)) ? 1 : 0 }", "    if arr.count == 0 {\n        return 0\n    }\n\
    \    return arr.map(abs).reduce(0, +)", "    return arr.filter({\n        $0.abs.sum_digits()\
    \ > 0\n    }).count", "    var res = 0\n    for num in arr {\n        var temp\
    \ = num\n        if num < 0 {\n            temp = -temp\n        }\n        var\
    \ sum = 0\n        while temp > 0 {\n            sum += temp % 10\n          \
    \  temp /= 10\n        }\n        if sum > 0 {\n            res += 1\n       \
    \ }\n    }\n    return res", "  let count = arr.reduce(0) { (sum, num) -> Int\
    \ in\n    var digits = 0\n    var s = num < 0 ? -num : num\n    while s > 0 {\n\
    \      digits += s % 10\n      s /= 10\n    }\n    return sum + (digits > 0 ?\
    \ 1 : 0)\n  }\n  return count", "    return arr.filter {\n        $0 != 0 && $0\
    \ != -0 && $0.signum() * $0.digits.reduce(0, +) > 0\n    }.count", "    return\
    \ arr.filter({ (num) -> Bool in\n        return sum_of_digits(num: num) > 0\n\
    \    }).count", "    var count = 0\n    for i in arr {\n        var sum = 0\n\
    \        if i < 0 {\n            sum += -1\n        }\n        for j in String(abs(i))\
    \ {\n            sum += Int(String(j))!\n        }\n        if sum > 0 {\n   \
    \         count += 1\n        }\n    }\n    return count", "    var res = 0\n\
    \    for i in arr {\n        if i > 0 && i < 10 {\n            res += 1\n    \
    \    } else if i < 0 && i > -10 {\n            res += 1\n        } else {\n  \
    \          var i = i\n            var sum = 0\n            while i != 0 {\n  \
    \              sum += i % 10\n                i /= 10\n            }\n       \
    \     if sum != 0 {\n                res += 1\n            }\n        }\n    }\n\
    \    return res", "    // TODO: implement\n    var result = 0\n    for num in\
    \ arr {\n        var sumOfDigits = 0\n        if num < 0 {\n            sumOfDigits\
    \ += -num % 10\n            num /= -10\n        }\n        while num > 0 {\n \
    \           sumOfDigits += num % 10\n            num /= 10\n        }\n      \
    \  if sumOfDigits > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    // TODO: Implement this function\n    return 0", "    var count\
    \ = 0\n    for num in arr {\n        if num > 0 && sum_digits(num: num) > 0 {\n\
    \            count += 1\n        } else if num < 0 && sum_digits(num: -num) >\
    \ 0 {\n            count += 1\n        }\n    }\n    return count", "\tvar count\
    \ = 0\n\tfor num in arr {\n\t\tlet digits = signed_digits(num: num)\n\t\tvar sum\
    \ = 0\n\t\tfor digit in digits {\n\t\t\tsum += digit\n\t\t}\n\t\tif sum > 0 {\n\
    \t\t\tcount += 1\n\t\t}\n\t}\n\treturn count", "  var num = 0\n  for i in arr\
    \ {\n    var sum = 0\n    var temp = i\n    if i < 0 {\n      temp = -i\n    }\n\
    \    while temp > 0 {\n      sum += temp % 10\n      temp /= 10\n    }\n    if\
    \ sum > 0 {\n      num += 1\n    }\n  }\n  return num", "  return arr.reduce(0)\
    \ {\n    abs($1) % 10 + abs($1 / 10) > 0 ? $0 + 1 : $0\n  }", "  return arr.reduce(0)\
    \ {\n    sum, num in\n    sum + (num < 0 ? num * -1 : num)\n  }", "  var count\
    \ = 0\n  for num in arr {\n    if signed_digits_sum(num: num) > 0 {\n      count\
    \ += 1\n    }\n  }\n  return count", "    var res = 0\n    for i in arr {\n  \
    \      var number = abs(i)\n        while number > 0 {\n            res += number\
    \ % 10\n            number /= 10\n        }\n    }\n    return res", "    return\
    \ arr.reduce(0) {\n        (result, number) in\n        let absNumber = abs(number)\n\
    \        let digitsSum = String(absNumber).reduce(0) {\n            (result, char)\
    \ in\n            return result + Int(String(char))!\n        }\n        return\
    \ result + (digitsSum > 0 ? 1 : 0)\n    }", '    return 0', '    return 0', " \
    \   var result = 0\n    for i in arr {\n        var total = 0\n        var num\
    \ = i\n        if num < 0 {\n            num = num * -1\n        }\n        for\
    \ d in 0..<String(num).count {\n            total += (num % 10)\n            num\
    \ = num / 10\n        }\n        if total > 0 {\n            result += 1\n   \
    \     }\n    }\n    return result", "    return arr.filter { (num) -> Bool in\n\
    \        return signed_digits(of: num).reduce(0, +) > 0\n    }.count", "    return\
    \ arr.filter {\n        _ in\n        var num = abs(_)\n        var sum = 0\n\
    \        while num > 0 {\n            sum += num % 10\n            num /= 10\n\
    \        }\n        return sum > 0\n    }.count", "\treturn arr.filter({ has_positive_signed_digits(num:\
    \ $0) }).count", "    var count = 0\n    for n in arr {\n        var a = 0\n \
    \       var x = n\n        if x < 0 {\n            x = -x\n        }\n       \
    \ while x > 0 {\n            a += x % 10\n            x /= 10\n        }\n   \
    \     if a > 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for i in arr {\n        var digitSum = 0\n        if i <\
    \ 0 {\n            digitSum += i * -1\n        } else {\n            digitSum\
    \ += i\n        }\n        while digitSum > 0 {\n            digitSum = digitSum\
    \ / 10\n            count += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for num in arr {\n        var number = num\n        if number\
    \ < 0 {\n            number = -number\n        }\n        var sum = 0\n      \
    \  while number > 0 {\n            sum += number % 10\n            number /= 10\n\
    \        }\n        if sum > 0 {\n            count += 1\n        }\n    }\n \
    \   return count", "    var sum = 0\n    for num in arr {\n        if num < 0\
    \ {\n            sum += 1\n        }\n    }\n    return sum", '    return arr.filter
    { $0.digits().reduce(0, +) > 0 }.count', "\tvar sum = 0\n\tfor i in arr {\n\t\t\
    if i > 0 {\n\t\t\tsum += i\n\t\t} else {\n\t\t\tsum += -i\n\t\t}\n\t}\n\treturn\
    \ sum", "    var result = 0\n    for num in arr {\n        if signed_digits_sum(num:\
    \ num) > 0 {\n            result += 1\n        }\n    }\n    return result", " \
    \   var count = 0\n    var signed_digits = [Int]()\n    for n in arr {\n     \
    \   var x = n\n        if x < 0 {\n            signed_digits.append(-1)\n    \
    \        x = -x\n        }\n        while x > 0 {\n            signed_digits.append(x\
    \ % 10)\n            x /= 10\n        }\n    }\n    for n in signed_digits {\n\
    \        if n > 0 {\n            count += 1\n        }\n    }\n    return count",
  "  return arr.reduce(0) { res, num in\n    if num.description.split(separator: \"\
    -\").joined().split(separator: \"\").map { Int(String($0))! }.reduce(0, +) > 0\
    \ {\n      return res + 1\n    }\n    return res\n  }", "    if arr.count == 0\
    \ {\n        return 0\n    }\n    var result = 0\n    for i in arr {\n       \
    \ var val = i\n        var sum = 0\n        if val < 0 {\n            val = val\
    \ * -1\n        }\n        while val != 0 {\n            sum += val % 10\n   \
    \         val = val / 10\n        }\n        if sum > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", '    return arr.filter { $0.digits.reduce(0,
    +) > 0 }.count', "    return arr.reduce(0) { result, element in\n        return\
    \ result + (abs(element) % 10 + (abs(element) / 10))\n    }", "    var count =\
    \ 0\n    for num in arr {\n        var sum = 0\n        var num2 = num\n     \
    \   if num < 0 {\n            num2 = -num\n        }\n        while num2 > 0 {\n\
    \            sum += num2 % 10\n            num2 /= 10\n        }\n        if sum\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count", '    return
    arr.filter { $0.digitsSum() > 0 }.count', "    var result = 0\n    for element\
    \ in arr {\n        if element.digits.reduce(0, +) > 0 {\n            result +=\
    \ 1\n        }\n    }\n    return result", "    var total = 0\n    for num in\
    \ arr {\n        if (num / 10 != 0) {\n            total += abs(num % 10)\n  \
    \          total += abs(num / 10)\n        } else {\n            total += abs(num)\n\
    \        }\n    }\n    return total", '    return arr.filter({ $0 > 0 && $0 <
    10}).count', "    var count = 0\n    for i in arr {\n        if i.digits.reduce(0,\
    \ +) > 0 {\n            count += 1\n        }\n    }\n    return count", "   \
    \ return arr.reduce(0) {\n        x, y in\n        return x + (sum_digits(num:\
    \ y) > 0 ? 1 : 0)\n    }", "    var result = 0\n    for num in arr {\n       \
    \ var temp = num\n        var sum = 0\n        if temp < 0 {\n            temp\
    \ = -temp\n        }\n        while temp > 0 {\n            sum += temp % 10\n\
    \            temp /= 10\n        }\n        if sum > 0 {\n            result +=\
    \ 1\n        }\n    }\n    return result", "    let result = arr.filter { i in\
    \ abs(i).digits.reduce(0, +) > 0 }\n    return result.count", "    var count =\
    \ 0\n    var sum = 0\n    for i in arr {\n        sum = 0\n        if i < 0 {\n\
    \            sum = 0\n            for i in String(abs(i)) {\n                sum\
    \ += Int(String(i))!\n            }\n            if sum > 0 {\n              \
    \  count += 1\n            }\n        } else {\n            for i in String(i)\
    \ {\n                sum += Int(String(i))!\n            }\n            if sum\
    \ > 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    return arr.filter { num in\n        return num != 0 && abs(num)\
    \ == num ? num : signed_digits(num: num).reduce(0, +) > 0\n    }.count", "   \
    \ var count = 0\n    for i in arr {\n        if digit_sum(i) > 0 {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ i in arr {\n        let abs_i = abs(i)\n        var sum = 0\n        var loop\
    \ = abs_i\n        while loop > 0 {\n            sum += loop % 10\n          \
    \  loop /= 10\n        }\n        if sum > 0 {\n            count += 1\n     \
    \   }\n    }\n    return count", "    let sum_of_digits = { (num: Int) -> Int\
    \ in\n        var n = num\n        var s = 0\n        while n != 0 {\n       \
    \     s += abs(n % 10)\n            n /= 10\n        }\n        return s\n   \
    \ }\n    var count = 0\n    for num in arr {\n        if sum_of_digits(num) >\
    \ 0 {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ arr.reduce(0) {\n        accum, num in\n        var sum = 0\n        var cur\
    \ = num\n        while cur != 0 {\n            sum += abs(cur % 10)\n        \
    \    cur /= 10\n        }\n        return accum + (sum > 0 ? 1 : 0)\n    }", " \
    \   return arr.filter({$0 >= 0 ? true : false}).reduce(0, { (result, element)\
    \ -> Int in\n        var sum = 0\n        var n = element\n        while n > 0\
    \ {\n            sum += n % 10\n            n /= 10\n        }\n        return\
    \ result + (sum > 0 ? 1 : 0)\n    })", "    let result = arr.filter({ $0 != 0\
    \ }).map({\n        if $0 < 0 { return -1 }\n        return 1\n    }).reduce(0,\
    \ +)\n    return result == 0 ? 0 : arr.count", "    return arr.reduce(0) { (acc,\
    \ item) in\n        if sum_digits(n: item) > 0 {\n            return acc + 1\n\
    \        }\n        return acc\n    }", "    return arr.filter{\n        $0 <\
    \ 0 ? ($0 * -1).digits.reduce(0, +) > 0 : $0.digits.reduce(0, +) > 0\n    }.count",
  '  return arr.filter{$0.digits.reduce(0, +) > 0}.count', "  var count = 0\n  for\
    \ number in arr {\n    if number > 0 {\n      count += isSumOfDigitsGreaterThanZero(number:\
    \ number)\n    } else {\n      count += isSumOfDigitsGreaterThanZero(number: -number)\n\
    \    }\n  }\n  return count", '    return arr.filter({ Int(String($0).reduce(0,
    {$0 + abs($1.wholeNumberValue!)})) > 0 }).count', "    return arr.reduce(0) {\
    \ acc, el in\n        return acc + (el / 10 == 0 ? 0 : 1)\n    }", '    return
    0']
stop_tokens:
- "\n}"
