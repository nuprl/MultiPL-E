language: swift
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = Array(s0.characters)\n\
    \    var chars1 = Array(s1.characters)\n    chars0.sort()\n    chars1.sort()\n\
    \    return chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqu450sng.swift:16:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = Array(s0.characters)\n               \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpqu450sng.swift:17:27: error: 'characters' is unavailable: Please use String\
    \ directly\n    var chars1 = Array(s1.characters)\n                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    var c0 = [Int](repeating:\
    \ 0, count: 128)\n    var c1 = [Int](repeating: 0, count: 128)\n    for c in s0.characters\
    \ {\n        c0[Int(c.unicodeScalars.first!.value)] += 1\n    }\n    for c in\
    \ s1.characters {\n        c1[Int(c.unicodeScalars.first!.value)] += 1\n    }\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprsd336jb.swift:16:11: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s0.characters.count != s1.characters.count {\n \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprsd336jb.swift:16:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmprsd336jb.swift:21:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s0.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprsd336jb.swift:24:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s1.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return sorted(s0) == sorted(s1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1qyqjkcx.swift:16:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(s0) == sorted(s1)\n           ^~~~~~\n/tmp/tmp1qyqjkcx.swift:16:26:\
    \ error: cannot find 'sorted' in scope\n    return sorted(s0) == sorted(s1)\n\
    \                         ^~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return Dictionary(grouping:\
    \ s0.characters, by: {$0}).mapValues{$0.count} == Dictionary(grouping: s1.characters,\
    \ by: {$0}).mapValues{$0.count}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnggwtyyq.swift:16:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    return Dictionary(grouping: s0.characters, by: {$0}).mapValues{$0.count}\
    \ == Dictionary(grouping: s1.characters, by: {$0}).mapValues{$0.count}\n     \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnggwtyyq.swift:16:105: error: 'characters' is unavailable:\
    \ Please use String directly\n    return Dictionary(grouping: s0.characters, by:\
    \ {$0}).mapValues{$0.count} == Dictionary(grouping: s1.characters, by: {$0}).mapValues{$0.count}\n\
    \                                                                            \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var char_count = [Character:\
    \ Int]()\n    for c in s0 {\n        char_count[c] = (char_count[c] ?? 0) + 1\n\
    \    }\n    for c in s1 {\n        char_count[c] = (char_count[c] ?? 0) - 1\n\
    \    }\n    for (_, count) in char_count {\n        if count != 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmprwmu0e_6/tmprwmu0e_6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ff30ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ff005b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ff005988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ff0047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwmu0e_6                        0x000055a6cda01623 <unavailable> + 5667

    5    libc.so.6                          0x00002af1ff4fa460 __libc_start_main +
    245

    6    tmprwmu0e_6                        0x000055a6cda01279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0 = s0.sorted(), s1\
    \ = s1.sorted()\n    var i = 0, j = 0\n    while i < s0.count && j < s1.count\
    \ {\n        if s0[i] == s1[j] {\n            i += 1\n            j += 1\n   \
    \     } else {\n            j += 1\n        }\n    }\n    return i == s0.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp0h6ypj44/tmp0h6ypj44.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3173e97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3173b8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3173b8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3173b8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h6ypj44                        0x000055e725a8c6e8 <unavailable> + 5864

    5    libc.so.6                          0x00002b3174083460 __libc_start_main +
    245

    6    tmp0h6ypj44                        0x000055e725a8c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var strs = [s0, s1]\n \
    \   var same = true\n    let sorted = strs.sorted(by: { $0.count < $1.count })\n\
    \    let shorter = sorted[0]\n    let longer = sorted[1]\n    for c in shorter\
    \ {\n        if longer.contains(c) {\n            same = true\n        } else\
    \ {\n            same = false\n            break\n        }\n    }\n    return\
    \ same\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpse5_dfaa/tmpse5_dfaa.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c8df6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c8dc65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c8dc65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c8dc647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpse5_dfaa                        0x00005635811e5a7e <unavailable> + 6782

    5    libc.so.6                          0x00002b3c8e15a460 __libc_start_main +
    245

    6    tmpse5_dfaa                        0x00005635811e52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let counts0 = count_chars(s:\
    \ s0)\n    let counts1 = count_chars(s: s1)\n    return counts0 == counts1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfcexo6t8.swift:16:19: error: cannot find 'count_chars' in scope\n\
    \    let counts0 = count_chars(s: s0)\n                  ^~~~~~~~~~~\n/tmp/tmpfcexo6t8.swift:17:19:\
    \ error: cannot find 'count_chars' in scope\n    let counts1 = count_chars(s:\
    \ s1)\n                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0_freq = [Int](repeating:\
    \ 0, count: 26)\n    var s1_freq = [Int](repeating: 0, count: 26)\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in s0 {\n        let index =\
    \ alphabet.index(of: char)\n        s0_freq[index!] += 1\n    }\n    for char\
    \ in s1 {\n        let index = alphabet.index(of: char)\n        s1_freq[index!]\
    \ += 1\n    }\n    return s0_freq == s1_freq\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbbtvab_x.swift:20:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = alphabet.index(of: char)\n       \
    \                      ^\n/tmp/tmpbbtvab_x.swift:20:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = alphabet.index(of: char)\n                    \
    \         ^~~~~\n                             firstIndex\n/tmp/tmpbbtvab_x.swift:21:22:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        s0_freq[index!] += 1\n                     ^\n/tmp/tmpbbtvab_x.swift:24:30:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = alphabet.index(of: char)\n                             ^\n/tmp/tmpbbtvab_x.swift:24:30:\
    \ note: use 'firstIndex(of:)' instead\n        let index = alphabet.index(of:\
    \ char)\n                             ^~~~~\n                             firstIndex\n\
    /tmp/tmpbbtvab_x.swift:25:22: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n        s1_freq[index!] += 1\n            \
    \         ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var m = [Character: Int]()\n\
    \    var m0 = [Character: Int]()\n    var m1 = [Character: Int]()\n    for ch\
    \ in s0 {\n        m0[ch] = (m0[ch] ?? 0) + 1\n        m[ch] = (m[ch] ?? 0) +\
    \ 1\n    }\n    for ch in s1 {\n        m1[ch] = (m1[ch] ?? 0) + 1\n        m[ch]\
    \ = (m[ch] ?? 0) + 1\n    }\n    for (k, v) in m {\n        if v != 2 {\n    \
    \        return false\n        }\n        if m0[k] != m1[k] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmexcc2aj/tmpmexcc2aj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e01565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e0125cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e0125c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e0125b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmexcc2aj                        0x00005639595ec623 <unavailable> + 5667

    5    libc.so.6                          0x00002b4e01751460 __libc_start_main +
    245

    6    tmpmexcc2aj                        0x00005639595ec279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return (s0.count == s1.count)\
    \ && ((s0.sorted() == s1.sorted()) || s0.count == 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp45ihni3x/tmp45ihni3x.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71ea5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71ea298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71ea298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71ea2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45ihni3x                        0x0000564f34c174d3 <unavailable> + 5331

    5    libc.so.6                          0x00002b71ea78d460 __libc_start_main +
    245

    6    tmp45ihni3x                        0x0000564f34c17129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count != s1.count\
    \ {\n        return false\n    }\n    for c in s0 {\n        if s1.filter{$0 ==\
    \ c}.count != s0.filter{$0 == c}.count {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpa5tak6ro/tmpa5tak6ro.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2df01dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2defed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2defed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2defed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5tak6ro                        0x000055d9478a84d3 <unavailable> + 5331

    5    libc.so.6                          0x00002b2df03ca460 __libc_start_main +
    245

    6    tmpa5tak6ro                        0x000055d9478a8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // return false\n    if\
    \ s0.count != s1.count {\n        return false\n    }\n    var dict0 = [Character:\
    \ Int]()\n    var dict1 = [Character: Int]()\n    for i in s0 {\n        if let\
    \ temp = dict0[i] {\n            dict0[i] = temp + 1\n        } else {\n     \
    \       dict0[i] = 1\n        }\n    }\n    for i in s1 {\n        if let temp\
    \ = dict1[i] {\n            dict1[i] = temp + 1\n        } else {\n          \
    \  dict1[i] = 1\n        }\n    }\n    for (key, val) in dict0 {\n        if let\
    \ val1 = dict1[key] {\n            if val1 != val {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp90hgpzu9/tmp90hgpzu9.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00779a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b007769bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b007769b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b007769a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90hgpzu9                        0x0000559be1d75673 <unavailable> + 5747

    5    libc.so.6                          0x00002b0077b90460 __libc_start_main +
    245

    6    tmp90hgpzu9                        0x0000559be1d752c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    \n    var dictionary: [Character:\
    \ Int] = [:]\n    \n    for letter in s0 {\n        dictionary[letter] = (dictionary[letter]\
    \ ?? 0) + 1\n    }\n    \n    for letter in s1 {\n        dictionary[letter] =\
    \ (dictionary[letter] ?? 0) - 1\n    }\n    \n    return dictionary.values.reduce(0,+)\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpfdhzyg2r/tmpfdhzyg2r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93abb58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93ab84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93ab84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93ab84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfdhzyg2r                        0x000055adcd49d6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b93abd44460 __libc_start_main +
    245

    6    tmpfdhzyg2r                        0x000055adcd49d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 0
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return (s1.reduce(0) {\
    \ $0 | 1 << ($1.asciiValue! - Character(\"a\").asciiValue!) }) == (s0.reduce(0)\
    \ { $0 | 1 << ($1.asciiValue! - Character(\"a\").asciiValue!) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // your code here\n   \
    \ var s0 = s0\n    var s1 = s1\n    s0.sort()\n    s1.sort()\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for i in 0..<s0.count {\n  \
    \      if s0[s0.index(s0.startIndex, offsetBy: i)] != s1[s1.index(s1.startIndex,\
    \ offsetBy: i)] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplc0ftcr3.swift:19:8: error: value of type 'String' has no member\
    \ 'sort'\n    s0.sort()\n    ~~ ^~~~\n/tmp/tmplc0ftcr3.swift:20:8: error: value\
    \ of type 'String' has no member 'sort'\n    s1.sort()\n    ~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = s0.characters.map\
    \ { $0 }\n    var chars1 = s1.characters.map { $0 }\n    chars0.sortInPlace()\n\
    \    chars1.sortInPlace()\n    return chars0 == chars1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwneyig94.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = s0.characters.map { $0 }\n           \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwneyig94.swift:17:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    var chars1\
    \ = s1.characters.map { $0 }\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpwneyig94.swift:18:12: error: value of\
    \ type '[String.Element]' (aka 'Array<Character>') has no member 'sortInPlace'\n\
    \    chars0.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpwneyig94.swift:19:12:\
    \ error: value of type '[String.Element]' (aka 'Array<Character>') has no member\
    \ 'sortInPlace'\n    chars1.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // Your code here\n   \
    \ var a = 0, b = 0\n    for c in s0.characters {\n        a = a ^ Int(String(c).utf8.first!)\n\
    \    }\n    for c in s1.characters {\n        b = b ^ Int(String(c).utf8.first!)\n\
    \    }\n    return a == b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqsx__yf5.swift:18:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s0.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqsx__yf5.swift:21:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s1.characters {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count = 0\n    var\
    \ s0 = Array(s0)\n    var s1 = Array(s1)\n    while count < s0.count {\n     \
    \   if s0[count] == s1[count] {\n            count += 1\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmplxyfbhbi/tmplxyfbhbi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36d4336c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36d402db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36d402d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36d402c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplxyfbhbi                        0x00005609a6140503 <unavailable> + 5379

    5    libc.so.6                          0x00002b36d4522460 __libc_start_main +
    245

    6    tmplxyfbhbi                        0x00005609a6140159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var table0 = Array(repeating:\
    \ 0, count: 26)\n    var table1 = Array(repeating: 0, count: 26)\n    for c in\
    \ s0 {\n        table0[Int(c.asciiValue! - 97)] += 1\n    }\n    for c in s1 {\n\
    \        table1[Int(c.asciiValue! - 97)] += 1\n    }\n    for i in 0..<26 {\n\
    \        if table0[i] != table1[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpsg3a2uum/tmpsg3a2uum.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32d241ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32d2111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32d2111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32d21107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsg3a2uum                        0x0000558998b1a7c3 <unavailable> + 6083

    5    libc.so.6                          0x00002b32d2606460 __libc_start_main +
    245

    6    tmpsg3a2uum                        0x0000558998b1a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var char_count: [Character:\
    \ Int] = [:]\n    var s0_iter = s0.startIndex\n    while s0_iter != s0.endIndex\
    \ {\n        let c = s0[s0_iter]\n        var count = char_count[c] ?? 0\n   \
    \     count += 1\n        char_count[c] = count\n        s0_iter = s0.index(after:\
    \ s0_iter)\n    }\n    var s1_iter = s1.startIndex\n    while s1_iter != s1.endIndex\
    \ {\n        let c = s1[s1_iter]\n        var count = char_count[c] ?? 0\n   \
    \     count -= 1\n        if count < 0 {\n            return false\n        }\n\
    \        char_count[c] = count\n        s1_iter = s1.index(after: s1_iter)\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp2iw_ga83/tmp2iw_ga83.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4759a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae47569eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae47569e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae47569d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2iw_ga83                        0x0000563a590005f3 <unavailable> + 5619

    5    libc.so.6                          0x00002ae475b93460 __libc_start_main +
    245

    6    tmp2iw_ga83                        0x0000563a59000249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    \n    // Solution 1:\n\
    \    //let s0 = Array(s0)\n    //let s1 = Array(s1)\n    //if s0.count != s1.count\
    \ {\n    //    return false\n    //}\n    //for ch in s0 {\n    //    if let idx\
    \ = s1.firstIndex(of: ch) {\n    //        s1.remove(at: idx)\n    //    } else\
    \ {\n    //        return false\n    //    }\n    //}\n    //return true\n   \
    \ \n    // Solution 2:\n    //let dict0 = s0.reduce(into: [Character: Int]())\
    \ { counts, c in counts[c, default: 0] += 1 }\n    //let dict1 = s1.reduce(into:\
    \ [Character: Int]()) { counts, c in counts[c, default: 0] += 1 }\n    //return\
    \ dict0 == dict1\n    \n    // Solution 3:\n    let dict0 = s0.reduce(into: [Character:\
    \ Int]()) { counts, c in counts[c, default: 0] += 1 }\n    for ch in s1 {\n  \
    \      if let count = dict0[ch] {\n            dict0[ch] = count - 1\n       \
    \     if dict0[ch] == 0 {\n                dict0.removeValue(forKey: ch)\n   \
    \         }\n        } else {\n            return false\n        }\n    }\n  \
    \  return dict0.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppfuzbv8e.swift:41:18: error: cannot assign through subscript: 'dict0'\
    \ is a 'let' constant\n            dict0[ch] = count - 1\n            ~~~~~^\n\
    /tmp/tmppfuzbv8e.swift:38:5: note: change 'let' to 'var' to make it mutable\n\
    \    let dict0 = s0.reduce(into: [Character: Int]()) { counts, c in counts[c,\
    \ default: 0] += 1 }\n    ^~~\n    var\n/tmp/tmppfuzbv8e.swift:43:23: error: cannot\
    \ use mutating member on immutable value: 'dict0' is a 'let' constant\n      \
    \          dict0.removeValue(forKey: ch)\n                ~~~~~ ^\n/tmp/tmppfuzbv8e.swift:38:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let dict0 = s0.reduce(into:\
    \ [Character: Int]()) { counts, c in counts[c, default: 0] += 1 }\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var c0 = [Character: Int]()\n\
    \    var c1 = [Character: Int]()\n    s0.forEach {c0[$0, default: 0] += 1}\n \
    \   s1.forEach {c1[$0, default: 0] += 1}\n    if c0.count != c1.count {\n    \
    \    return false\n    }\n    for (k, v) in c0 {\n        if v != c1[k] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmphcypi4zc/tmphcypi4zc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386a212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3869f09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3869f09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3869f087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcypi4zc                        0x000055aad26b37b3 <unavailable> + 6067

    5    libc.so.6                          0x00002b386a3fe460 __libc_start_main +
    245

    6    tmphcypi4zc                        0x000055aad26b3409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let characters = Array(s0)\n\
    \    for c in characters {\n        if s1.characters.filter({$0 == c}).count !=\
    \ s0.characters.filter({$0 == c}).count {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk9unx36d.swift:18:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        if s1.characters.filter({$0 == c}).count != s0.characters.filter({$0\
    \ == c}).count {\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk9unx36d.swift:18:56: error: 'characters' is unavailable:\
    \ Please use String directly\n        if s1.characters.filter({$0 == c}).count\
    \ != s0.characters.filter({$0 == c}).count {\n                               \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 0
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0Set = Set(s0)\n \
    \   let s1Set = Set(s1)\n    return s0Set == s1Set\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    var char_set0 = Set<Character>()\n\
    \    for char in s0.characters {\n        char_set0.insert(char)\n    }\n    var\
    \ char_set1 = Set<Character>()\n    for char in s1.characters {\n        char_set1.insert(char)\n\
    \    }\n    return char_set0 == char_set1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyvi168hs.swift:16:11: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s0.characters.count != s1.characters.count {\n \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyvi168hs.swift:16:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpyvi168hs.swift:20:20: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s0.characters {\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpyvi168hs.swift:24:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s1.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var dic0: [Character: Int]\
    \ = [:]\n    var dic1: [Character: Int] = [:]\n    for c in s0 {\n        dic0[c]\
    \ = (dic0[c] ?? 0) + 1\n    }\n    for c in s1 {\n        dic1[c] = (dic1[c] ??\
    \ 0) + 1\n    }\n    return dic0 == dic1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp__efury0/tmp__efury0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0f9253c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0f8f4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0f8f4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0f8f497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__efury0                        0x00005631c352c5a3 <unavailable> + 5539

    5    libc.so.6                          0x00002ba0f943f460 __libc_start_main +
    245

    6    tmp__efury0                        0x00005631c352c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var cs0 = s0.characters.map\
    \ { String($0) }\n    var cs1 = s1.characters.map { String($0) }\n    cs0.sortInPlace()\n\
    \    cs1.sortInPlace()\n    return cs0 == cs1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe5bgxirk.swift:16:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    var cs0 = s0.characters.map { String($0) }\n      \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpe5bgxirk.swift:17:18: error: 'characters' is unavailable: Please use String\
    \ directly\n    var cs1 = s1.characters.map { String($0) }\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe5bgxirk.swift:18:9:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    cs0.sortInPlace()\n\
    \    ~~~ ^~~~~~~~~~~\n/tmp/tmpe5bgxirk.swift:19:9: error: value of type '[String]'\
    \ has no member 'sortInPlace'\n    cs1.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    for i in 0..<s0.count {\n\
    \        let index = s1.index(s1.startIndex, offsetBy: i)\n        if s0[s0.index(s0.startIndex,\
    \ offsetBy: i)] != s1[index] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp074aoh_g/tmp074aoh_g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b166e1a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b166de9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b166de9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b166de9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp074aoh_g                        0x000055dfa8ce65e3 <unavailable> + 5603

    5    libc.so.6                          0x00002b166e390460 __libc_start_main +
    245

    6    tmp074aoh_g                        0x000055dfa8ce6239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0Chars = Set(s0.characters)\n\
    \    let s1Chars = Set(s1.characters)\n    return s0Chars == s1Chars\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprlu8iy5w.swift:16:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0Chars = Set(s0.characters)\n                \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprlu8iy5w.swift:17:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1Chars\
    \ = Set(s1.characters)\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = [Character](s0)\n\
    \    var chars1 = [Character](s1)\n    chars0.sort()\n    chars1.sort()\n    return\
    \ chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0dwnq023/tmp0dwnq023.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a624a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a621a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a621a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a6219f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0dwnq023                        0x00005607cf8d05c3 <unavailable> + 5571

    5    libc.so.6                          0x00002b1a62695460 __libc_start_main +
    245

    6    tmp0dwnq023                        0x00005607cf8d0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0_ = s0.sorted()\n\
    \    let s1_ = s1.sorted()\n    return s0_ == s1_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpk_4vqzr_/tmpk_4vqzr_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95e41b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95e3ea8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95e3ea8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95e3ea77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_4vqzr_                        0x000056484dcff483 <unavailable> + 5251

    5    libc.so.6                          0x00002b95e439d460 __libc_start_main +
    245

    6    tmpk_4vqzr_                        0x000056484dcff0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0_counts = s0.counts\n\
    \    let s1_counts = s1.counts\n    for (c, count) in s0_counts {\n        if\
    \ s1_counts[c] != count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvwkngkk.swift:16:24: error: value of type 'String' has no member\
    \ 'counts'\n    let s0_counts = s0.counts\n                    ~~ ^~~~~~\n/tmp/tmpkvwkngkk.swift:17:24:\
    \ error: value of type 'String' has no member 'counts'\n    let s1_counts = s1.counts\n\
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = Array(s0)\n\
    \    var chars1 = Array(s1)\n    chars0.sort()\n    chars1.sort()\n    return\
    \ chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmphb40cxql/tmphb40cxql.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c927c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c924b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c924b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c924b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphb40cxql                        0x0000564e78b145c3 <unavailable> + 5571

    5    libc.so.6                          0x00002b6c929ac460 __libc_start_main +
    245

    6    tmphb40cxql                        0x0000564e78b14219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var cs0 = Array(s0.characters)\n\
    \    var cs1 = Array(s1.characters)\n    cs0.sort()\n    cs1.sort()\n    return\
    \ cs0 == cs1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi8mh5xbc.swift:16:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var cs0 = Array(s0.characters)\n                  \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpi8mh5xbc.swift:17:24:\
    \ error: 'characters' is unavailable: Please use String directly\n    var cs1\
    \ = Array(s1.characters)\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var frequency = [Character:\
    \ Int]()\n    for c in s0 {\n        if let freq = frequency[c] {\n          \
    \  frequency[c] = freq + 1\n        } else {\n            frequency[c] = 1\n \
    \       }\n    }\n    for c in s1 {\n        if let freq = frequency[c] {\n  \
    \          frequency[c] = freq - 1\n        } else {\n            frequency[c]\
    \ = -1\n        }\n    }\n    for v in frequency.values {\n        if v != 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp8d__prwe/tmp8d__prwe.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b774e7c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b774e4bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b774e4bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b774e4bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8d__prwe                        0x00005576f2288693 <unavailable> + 5779

    5    libc.so.6                          0x00002b774e9b2460 __libc_start_main +
    245

    6    tmp8d__prwe                        0x00005576f22882e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if (s0.count == s1.count)\
    \ {\n        // https://stackoverflow.com/questions/26364914/http-request-in-swift-with-post-method\n\
    \        let s0s = s0.sorted()\n        let s1s = s1.sorted()\n        return\
    \ s0s == s1s\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpgvsq8p03/tmpgvsq8p03.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b8082c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b7d79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b7d79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b7d787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgvsq8p03                        0x0000563f9e3504d3 <unavailable> + 5331

    5    libc.so.6                          0x00002b42b826e460 __libc_start_main +
    245

    6    tmpgvsq8p03                        0x0000563f9e350129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return same_chars(s0, s1,\
    \ 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0dnph9ur.swift:16:22: error: extra arguments at positions #3, #4\
    \ in call\n    return same_chars(s0, s1, 0, 0)\n                     ^\n/tmp/tmp0dnph9ur.swift:15:6:\
    \ note: 'same_chars(s0:s1:)' declared here\nfunc same_chars(s0: String, s1: String)\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var result = false\n  \
    \  if s0.count == s1.count {\n        var dict = [Character: Int]()\n        for\
    \ (key, val) in zip(s0, s1) {\n            dict[key, default: 0] += 1\n      \
    \      dict[val, default: 0] -= 1\n        }\n        result = dict.values.reduce(0,\
    \ +) == 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpem5sdhpm/tmpem5sdhpm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4a35d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4a32cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4a32cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4a32ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem5sdhpm                        0x000055c1178696f3 <unavailable> + 5875

    5    libc.so.6                          0x00002af4a37c4460 __libc_start_main +
    245

    6    tmpem5sdhpm                        0x000055c117869349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: 0
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  var set0 = Set<Character>()\n\
    \  var set1 = Set<Character>()\n  for c in s0 {\n    set0.insert(c)\n  }\n  for\
    \ c in s1 {\n    set1.insert(c)\n  }\n  return set0 == set1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpod_qj3o_/tmpod_qj3o_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3e8f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3e8bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3e8bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3e8bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod_qj3o_                        0x000055a853745583 <unavailable> + 5507

    5    libc.so.6                          0x00002af3e90ec460 __libc_start_main +
    245

    6    tmpod_qj3o_                        0x000055a853744ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var l0 = s0.characters.map{$0}\n\
    \    var l1 = s1.characters.map{$0}\n    l0.sortInPlace()\n    l1.sortInPlace()\n\
    \    return l0 == l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyxlph5q_.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var l0 = s0.characters.map{$0}\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyxlph5q_.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var l1 =\
    \ s1.characters.map{$0}\n                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpyxlph5q_.swift:18:8: error: value of type\
    \ '[String.Element]' (aka 'Array<Character>') has no member 'sortInPlace'\n  \
    \  l0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpyxlph5q_.swift:19:8: error: value\
    \ of type '[String.Element]' (aka 'Array<Character>') has no member 'sortInPlace'\n\
    \    l1.sortInPlace()\n    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var aux = [Character]()\n\
    \    for s in s0 {\n        aux.append(s)\n    }\n    for s in s1 {\n        if\
    \ aux.contains(s) {\n            aux.remove(at: aux.firstIndex(of: s)!)\n    \
    \    }\n    }\n    return aux.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpih0kp5fx/tmpih0kp5fx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba700fd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba700cc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba700cc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba700cc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih0kp5fx                        0x000055d751e978c8 <unavailable> + 6344

    5    libc.so.6                          0x00002ba7011bd460 __libc_start_main +
    245

    6    tmpih0kp5fx                        0x000055d751e97339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return Array(s0.sorted())\
    \ == Array(s1.sorted())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmplj4ygn4z/tmplj4ygn4z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90eba0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90eb706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90eb706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90eb7057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj4ygn4z                        0x00005637ba1b44f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b90ebbfb460 __libc_start_main +
    245

    6    tmplj4ygn4z                        0x00005637ba1b4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // your code here\n   \
    \ var num0 = s0.count\n    var num1 = s1.count\n    if num0 != num1 {\n      \
    \  return false\n    } else {\n        for char0 in s0 {\n            for char1\
    \ in s1 {\n                if char0 == char1 {\n                    num0 -= 1\n\
    \                    num1 -= 1\n                    break\n                }\n\
    \            }\n        }\n        if num0 == 0 && num1 == 0 {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpoakekptm/tmpoakekptm.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44aaeb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44aabaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44aabae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44aabad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoakekptm                        0x000055de2070a3f3 <unavailable> + 5107

    5    libc.so.6                          0x00002b44ab0a3460 __libc_start_main +
    245

    6    tmpoakekptm                        0x000055de2070a049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let arr0 = s0.characters.map\
    \ { String($0) }\n    let arr1 = s1.characters.map { String($0) }\n    return\
    \ arr0.reduce(0, combine: {$0 + arr1.filter({$0 == $1}).count}) == arr0.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ffdgbxy.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let arr0 = s0.characters.map { String($0) }\n     \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1ffdgbxy.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let arr1 = s1.characters.map { String($0) }\n     \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1ffdgbxy.swift:18:23: error: extraneous argument label 'combine:'\
    \ in call\n    return arr0.reduce(0, combine: {$0 + arr1.filter({$0 == $1}).count})\
    \ == arr0.count\n                      ^   ~~~~~~~~~\n                       \
    \   \n/tmp/tmp1ffdgbxy.swift:18:36: error: contextual closure type '(Int, String)\
    \ throws -> Int' expects 2 arguments, but 1 was used in closure body\n    return\
    \ arr0.reduce(0, combine: {$0 + arr1.filter({$0 == $1}).count}) == arr0.count\n\
    \                                   ^\n/tmp/tmp1ffdgbxy.swift:18:54: error: contextual\
    \ closure type '(String) throws -> Bool' expects 1 argument, but 2 were used in\
    \ closure body\n    return arr0.reduce(0, combine: {$0 + arr1.filter({$0 == $1}).count})\
    \ == arr0.count\n                                                     ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return (s0.reduce(\"\"\
    ) { acc, c in \"\\(acc)\\(c)\" }.sorted() == s1.reduce(\"\") { acc, c in \"\\\
    (acc)\\(c)\" }.sorted())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpszcwkp3l/tmpszcwkp3l.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7631043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7630d3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7630d3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7630d397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszcwkp3l                        0x000055943ebbd863 <unavailable> + 6243

    5    libc.so.6                          0x00002b763122f460 __libc_start_main +
    245

    6    tmpszcwkp3l                        0x000055943ebbd4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var char_count = [Character:\
    \ Int]()\n    for c in s0 {\n        char_count[c] = (char_count[c] ?? 0) + 1\n\
    \    }\n    for c in s1 {\n        if char_count[c] == nil {\n            return\
    \ false\n        }\n        char_count[c] = char_count[c]! - 1\n        if char_count[c]\
    \ == 0 {\n            char_count.removeValue(forKey: c)\n        }\n    }\n  \
    \  return char_count.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpm8lq5iln/tmpm8lq5iln.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab057b6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab057863b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab057863988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0578627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8lq5iln                        0x000055b79a9ed603 <unavailable> + 5635

    5    libc.so.6                          0x00002ab057d58460 __libc_start_main +
    245

    6    tmpm8lq5iln                        0x000055b79a9ed259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let chars0 = s0.characters.sorted()\n\
    \    let chars1 = s1.characters.sorted()\n    return chars0 == chars1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsfvodhl_.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars0 = s0.characters.sorted()\n             \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpsfvodhl_.swift:17:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars1\
    \ = s1.characters.sorted()\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var counter0 = [Int](repeating:\
    \ 0, count: 256)\n    var counter1 = [Int](repeating: 0, count: 256)\n    for\
    \ i in 0..<s0.characters.count {\n        counter0[Int(s0[i])] += 1\n    }\n \
    \   for i in 0..<s1.characters.count {\n        counter1[Int(s1[i])] += 1\n  \
    \  }\n    for i in 0..<256 {\n        if counter0[i] != counter1[i] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc18x8zhu.swift:18:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<s0.characters.count {\n              \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc18x8zhu.swift:19:18:\
    \ error: no exact matches in call to initializer \n        counter0[Int(s0[i])]\
    \ += 1\n                 ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpc18x8zhu.swift:21:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for i in\
    \ 0..<s1.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpc18x8zhu.swift:22:18: error: no exact\
    \ matches in call to initializer \n        counter1[Int(s1[i])] += 1\n       \
    \          ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:1"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var c = [Character: Int]()\n\
    \    for char in s0 {\n        c[char] = (c[char] ?? 0) + 1\n    }\n    for char\
    \ in s1 {\n        c[char] = (c[char] ?? 0) - 1\n    }\n    for (_, count) in\
    \ c {\n        if count != 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp_303prgn/tmp_303prgn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb549e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb546deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb546de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb546dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_303prgn                        0x00005647abcdc623 <unavailable> + 5667

    5    libc.so.6                          0x00002adb54bd3460 __libc_start_main +
    245

    6    tmp_303prgn                        0x00005647abcdc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = s0.count_chars()\n\
    \    var chars1 = s1.count_chars()\n    if s0.count > s1.count {\n        chars0\
    \ = s1.count_chars()\n        chars1 = s0.count_chars()\n    }\n    for (char,\
    \ count) in chars0 {\n        if chars1[char] == nil || chars1[char]! < count\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6d3evhj9.swift:16:21: error: value of type 'String' has no member\
    \ 'count_chars'\n    var chars0 = s0.count_chars()\n                 ~~ ^~~~~~~~~~~\n\
    /tmp/tmp6d3evhj9.swift:17:21: error: value of type 'String' has no member 'count_chars'\n\
    \    var chars1 = s1.count_chars()\n                 ~~ ^~~~~~~~~~~\n/tmp/tmp6d3evhj9.swift:19:21:\
    \ error: value of type 'String' has no member 'count_chars'\n        chars0 =\
    \ s1.count_chars()\n                 ~~ ^~~~~~~~~~~\n/tmp/tmp6d3evhj9.swift:20:21:\
    \ error: value of type 'String' has no member 'count_chars'\n        chars1 =\
    \ s0.count_chars()\n                 ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  // YOUR CODE HERE\n  var\
    \ result : Bool = true\n  var count0 = [Character : Int]()\n  var count1 = [Character\
    \ : Int]()\n  for char in s0 {\n    if count0[char] == nil {\n      count0[char]\
    \ = 1\n    }\n    else {\n      count0[char]! += 1\n    }\n  }\n  for char in\
    \ s1 {\n    if count1[char] == nil {\n      count1[char] = 1\n    }\n    else\
    \ {\n      count1[char]! += 1\n    }\n  }\n  for (key,value) in count0 {\n   \
    \ if (count1[key] == nil || count1[key]! < value) {\n      result = false\n  \
    \  }\n  }\n  for (key,value) in count1 {\n    if (count0[key] == nil || count0[key]!\
    \ < value) {\n      result = false\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpf7smaupb/tmpf7smaupb.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81fb4b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81fb1aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81fb1aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81fb1a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7smaupb                        0x0000564129040713 <unavailable> + 5907

    5    libc.so.6                          0x00002b81fb69f460 __libc_start_main +
    245

    6    tmpf7smaupb                        0x0000564129040369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count == s1.count\
    \ {\n        var counter = 0\n        for char in s0 {\n            if s1.contains(char)\
    \ {\n                counter += 1\n            }\n        }\n        if counter\
    \ == s0.count {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpe0nn_ga_/tmpe0nn_ga_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bbfec6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bbfbbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bbfbbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bbfbbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0nn_ga_                        0x000055d36cf8d4b3 <unavailable> + 5299

    5    libc.so.6                          0x00002b9bc00b2460 __libc_start_main +
    245

    6    tmpe0nn_ga_                        0x000055d36cf8d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count = [Character:\
    \ Int]()\n    s0.forEach { count[$0, default: 0] += 1 }\n    s1.forEach { count[$0,\
    \ default: 0] -= 1 }\n    return !count.values.contains(where: { $0 != 0 })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpe55a3_46/tmpe55a3_46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92ed009c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92ecd00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92ecd00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92eccff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe55a3_46                        0x0000562219c916f3 <unavailable> + 5875

    5    libc.so.6                          0x00002b92ed1f5460 __libc_start_main +
    245

    6    tmpe55a3_46                        0x0000562219c91349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0_chars: Array<Character>\
    \ = Array(s0)\n    var s1_chars: Array<Character> = Array(s1)\n    s0_chars.sort()\n\
    \    s1_chars.sort()\n    return s0_chars == s1_chars\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpnxo8r8e6/tmpnxo8r8e6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2088c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2085b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2085b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2085b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxo8r8e6                        0x000055a1daf285c3 <unavailable> + 5571

    5    libc.so.6                          0x00002af208aae460 __libc_start_main +
    245

    6    tmpnxo8r8e6                        0x000055a1daf28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    for char in chars0 {\n     \
    \   if let index = chars1.index(of: char) {\n            chars1.remove(at: index)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn4ttlc7r.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = [Character](s0.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpn4ttlc7r.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var chars1 = [Character](s1.characters)\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpn4ttlc7r.swift:19:31: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let index = chars1.index(of: char)\
    \ {\n                              ^\n/tmp/tmpn4ttlc7r.swift:19:31: note: use\
    \ 'firstIndex(of:)' instead\n        if let index = chars1.index(of: char) {\n\
    \                              ^~~~~\n                              firstIndex\n\
    /tmp/tmpn4ttlc7r.swift:16:9: warning: variable 'chars0' was never mutated; consider\
    \ changing to 'let' constant\n    var chars0 = [Character](s0.characters)\n  \
    \  ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpfz37a979/tmpfz37a979.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3aae8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3aab85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3aab85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3aab847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz37a979                        0x0000565526066293 <unavailable> + 4755

    5    libc.so.6                          0x00002ba3ab07a460 __libc_start_main +
    245

    6    tmpfz37a979                        0x0000565526065ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let c0 = to_counters(s:\
    \ s0)\n    let c1 = to_counters(s: s1)\n    return c0 == c1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz7lqvgk6.swift:16:14: error: cannot find 'to_counters' in scope\n\
    \    let c0 = to_counters(s: s0)\n             ^~~~~~~~~~~\n/tmp/tmpz7lqvgk6.swift:17:14:\
    \ error: cannot find 'to_counters' in scope\n    let c1 = to_counters(s: s1)\n\
    \             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0\n    var s1\
    \ = s1\n    let c0 = s0.characters\n    let c1 = s1.characters\n    for c in c0\
    \ {\n        if let idx = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ idx)\n        } else {\n            return false\n        }\n    }\n    return\
    \ s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpedci3snb.swift:18:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let c0 = s0.characters\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpedci3snb.swift:19:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    let c1 =\
    \ s1.characters\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpedci3snb.swift:21:25: error: 'characters' is unavailable:\
    \ Please use String directly\n        if let idx = s1.characters.index(of: c)\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpedci3snb.swift:21:36: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let idx = s1.characters.index(of: c)\
    \ {\n                                   ^\n/tmp/tmpedci3snb.swift:21:36: note:\
    \ use 'firstIndex(of:)' instead\n        if let idx = s1.characters.index(of:\
    \ c) {\n                                   ^~~~~\n                           \
    \        firstIndex\n/tmp/tmpedci3snb.swift:16:9: warning: variable 's0' was never\
    \ mutated; consider changing to 'let' constant\n    var s0 = s0\n    ~~~ ^\n \
    \   let\n/tmp/tmpedci3snb.swift:19:9: warning: initialization of immutable value\
    \ 'c1' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let c1 = s1.characters\n    ~~~~^~\n    _\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // -----\n    return s0.isAnagram(of:\
    \ s1)\n    // -----\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx3a7ltqj.swift:17:15: error: value of type 'String' has no member\
    \ 'isAnagram'\n    return s0.isAnagram(of: s1)\n           ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014156
- exit_code: 0
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    \n    var res:Bool = true\n\
    \    var set0:Set<Character> = Set<Character>()\n    var set1:Set<Character> =\
    \ Set<Character>()\n    \n    for i in s0 {\n        set0.insert(i)\n    }\n \
    \   for i in s1 {\n        set1.insert(i)\n    }\n    \n    if set0 != set1 {\n\
    \        res = false\n    }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var counter0 = [Character:\
    \ Int]()\n    var counter1 = [Character: Int]()\n    for c in s0 {\n        counter0[c]\
    \ = (counter0[c] ?? 0) + 1\n    }\n    for c in s1 {\n        counter1[c] = (counter1[c]\
    \ ?? 0) + 1\n    }\n    for k in counter0.keys {\n        if counter0[k] != counter1[k]\
    \ {\n            return false\n        }\n    }\n    for k in counter1.keys {\n\
    \        if counter0[k] != counter1[k] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpllvlwumt/tmpllvlwumt.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47b050fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47b0206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47b0206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47b02057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpllvlwumt                        0x0000557ac38c7683 <unavailable> + 5763

    5    libc.so.6                          0x00002b47b06fb460 __libc_start_main +
    245

    6    tmpllvlwumt                        0x0000557ac38c72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // Create letter frequency\
    \ counters\n    var counter0 = [Character: Int]()\n    var counter1 = [Character:\
    \ Int]()\n    // Build the frequency counters\n    for c in s0 {\n        if let\
    \ v = counter0[c] {\n            counter0[c] = v + 1\n        } else {\n     \
    \       counter0[c] = 1\n        }\n    }\n    for c in s1 {\n        if let v\
    \ = counter1[c] {\n            counter1[c] = v + 1\n        } else {\n       \
    \     counter1[c] = 1\n        }\n    }\n    // Compare the counters\n    for\
    \ (k, v) in counter0 {\n        if let v1 = counter1[k] {\n            if v1 !=\
    \ v {\n                return false\n            }\n        } else {\n       \
    \     return false\n        }\n    }\n    for (k, v) in counter1 {\n        if\
    \ let v0 = counter0[k] {\n            if v0 != v {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpa4m8hewb/tmpa4m8hewb.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e760d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e75dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e75dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e75dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4m8hewb                        0x000055bcb6b67623 <unavailable> + 5667

    5    libc.so.6                          0x00002b9e762bd460 __libc_start_main +
    245

    6    tmpa4m8hewb                        0x000055bcb6b67279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var c0 = s0.characters.sorted()\n\
    \    var c1 = s1.characters.sorted()\n    return c0 == c1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt0zjmke0.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = s0.characters.sorted()\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpt0zjmke0.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var c1 =\
    \ s1.characters.sorted()\n                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt0zjmke0.swift:16:9: warning: variable\
    \ 'c0' was never mutated; consider changing to 'let' constant\n    var c0 = s0.characters.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmpt0zjmke0.swift:17:9: warning: variable 'c1' was never\
    \ mutated; consider changing to 'let' constant\n    var c1 = s1.characters.sorted()\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    guard s0.count == s1.count\
    \ else { return false }\n    let s0 = Array(s0)\n    let s1 = Array(s1)\n    var\
    \ same = true\n    var i = 0\n    while same && i < s0.count {\n        var j\
    \ = 0\n        var k = 0\n        while same && j < s1.count {\n            while\
    \ same && k < s1.count {\n                if s0[i] == s1[k] {\n              \
    \      k += 1\n                    break\n                }\n                k\
    \ += 1\n            }\n            if k == s1.count {\n                same =\
    \ false\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return same\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpvs90wnwx/tmpvs90wnwx.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb08223c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb07f1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb07f1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb07f197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs90wnwx                        0x000055909a9ea553 <unavailable> + 5459

    5    libc.so.6                          0x00002adb0840f460 __libc_start_main +
    245

    6    tmpvs90wnwx                        0x000055909a9ea1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    \n    let s0 = Array(s0.characters).sorted()\n\
    \    let s1 = Array(s1.characters).sorted()\n    \n    let s0Str = String(s0)\n\
    \    let s1Str = String(s1)\n    \n    return s0Str == s1Str\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4x044gwa.swift:17:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0 = Array(s0.characters).sorted()\n          \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp4x044gwa.swift:18:23: error: 'characters' is unavailable: Please use String\
    \ directly\n    let s1 = Array(s1.characters).sorted()\n                     \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var m0 = [Character: Int]()\n\
    \    var m1 = [Character: Int]()\n    var chars0 = Array(s0)\n    var chars1 =\
    \ Array(s1)\n    for c in chars0 {\n        if let value = m0[c] {\n         \
    \   m0[c] = value + 1\n        } else {\n            m0[c] = 1\n        }\n  \
    \  }\n    for c in chars1 {\n        if let value = m1[c] {\n            m1[c]\
    \ = value + 1\n        } else {\n            m1[c] = 1\n        }\n    }\n   \
    \ if m0.count != m1.count {\n        return false\n    }\n    for (key, value)\
    \ in m0 {\n        if let v1 = m1[key] {\n            if v1 != value {\n     \
    \           return false\n            }\n        } else {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpuefv22c2/tmpuefv22c2.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab23f5b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab23f2afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab23f2af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab23f2ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuefv22c2                        0x0000556a7a7c0863 <unavailable> + 6243

    5    libc.so.6                          0x00002ab23f7a4460 __libc_start_main +
    245

    6    tmpuefv22c2                        0x0000556a7a7c04b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpqaq09kw7/tmpqaq09kw7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba88b8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba88882b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba88882988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba888817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaq09kw7                        0x000055f065cf0483 <unavailable> + 5251

    5    libc.so.6                          0x00002aba88d77460 __libc_start_main +
    245

    6    tmpqaq09kw7                        0x000055f065cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var freq0 = [Character:\
    \ Int]()\n    var freq1 = [Character: Int]()\n    for i in s0 {\n        if let\
    \ item = freq0[i] {\n            freq0[i] = item + 1\n        } else {\n     \
    \       freq0[i] = 1\n        }\n    }\n    for i in s1 {\n        if let item\
    \ = freq1[i] {\n            freq1[i] = item + 1\n        } else {\n          \
    \  freq1[i] = 1\n        }\n    }\n    return freq0 == freq1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpds5h99or/tmpds5h99or.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fa0d6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fa0a63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fa0a63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fa0a627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpds5h99or                        0x00005583a20e3513 <unavailable> + 5395

    5    libc.so.6                          0x00002b2fa0f58460 __libc_start_main +
    245

    6    tmpds5h99or                        0x00005583a20e3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s = s0\n    for char\
    \ in s1 {\n        if let index = s.firstIndex(of: char) {\n            s.remove(at:\
    \ index)\n        }\n    }\n    return s.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpkb_mheny/tmpkb_mheny.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accf380dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accf3504b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accf3504988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accf35037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkb_mheny                        0x000055bdb9b11708 <unavailable> + 5896

    5    libc.so.6                          0x00002accf39f9460 __libc_start_main +
    245

    6    tmpkb_mheny                        0x000055bdb9b11179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  let d = get_dictionary(s:\
    \ s0)\n  for c in s1 {\n    let val = d[c]\n    if val == nil {\n      return\
    \ false\n    }\n    d[c] = val! - 1\n    if d[c]! < 0 {\n      return false\n\
    \    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmd6018hz.swift:16:11: error: cannot find 'get_dictionary' in scope\n\
    \  let d = get_dictionary(s: s0)\n          ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count0 = [Character:\
    \ Int]()\n    var count1 = [Character: Int]()\n    for c in s0 {\n        count0[c]\
    \ = (count0[c] ?? 0) + 1\n    }\n    for c in s1 {\n        count1[c] = (count1[c]\
    \ ?? 0) + 1\n    }\n    return count0 == count1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpszjsap0o/tmpszjsap0o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de7741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de7438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de7438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de74377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszjsap0o                        0x000055cd6d038513 <unavailable> + 5395

    5    libc.so.6                          0x00002b6de792d460 __libc_start_main +
    245

    6    tmpszjsap0o                        0x000055cd6d038169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if (s0.count != s1.count)\
    \ {\n        return false\n    }\n    var d0 = [Character: Int]()\n    var d1\
    \ = [Character: Int]()\n    s0.forEach { d0[$0, default: 0] += 1 }\n    s1.forEach\
    \ { d1[$0, default: 0] += 1 }\n    return d0 == d1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp88nwg_xc/tmp88nwg_xc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b732810bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7327e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7327e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7327e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88nwg_xc                        0x000056006c223653 <unavailable> + 5715

    5    libc.so.6                          0x00002b73282f7460 __libc_start_main +
    245

    6    tmp88nwg_xc                        0x000056006c2232a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0_chars = Array(s0.characters)\n\
    \    let s1_chars = Array(s1.characters)\n    let s0_chars_count = s0_chars.count\n\
    \    let s1_chars_count = s1_chars.count\n    var char_count = 0\n    var i =\
    \ 0\n    while i < s0_chars_count {\n        let c = s0_chars[i]\n        var\
    \ j = 0\n        while j < s1_chars_count {\n            if c == s1_chars[j] {\n\
    \                s1_chars[j] = \"1\"\n                char_count += 1\n      \
    \          break\n            }\n            j += 1\n        }\n        i += 1\n\
    \    }\n    return char_count == s0_chars_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptvtaxek6.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_chars = Array(s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptvtaxek6.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s1_chars = Array(s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptvtaxek6.swift:27:25: error: cannot assign through subscript: 's1_chars'\
    \ is a 'let' constant\n                s1_chars[j] = \"1\"\n                ~~~~~~~~^\n\
    /tmp/tmptvtaxek6.swift:17:5: note: change 'let' to 'var' to make it mutable\n\
    \    let s1_chars = Array(s1.characters)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var arr0 = s0.map { String($0)\
    \ }\n    var arr1 = s1.map { String($0) }\n    let set0 = Set(arr0)\n    let set1\
    \ = Set(arr1)\n    if set0.count != set1.count {\n        return false\n    }\n\
    \    for char in set0 {\n        if arr0.filter({ $0 == char }).count != arr1.filter({\
    \ $0 == char }).count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpsyp_8t3g/tmpsyp_8t3g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cf5a48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cf573fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cf573f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cf573e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsyp_8t3g                        0x00005630ff30f7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b8cf5c34460 __libc_start_main +
    245

    6    tmpsyp_8t3g                        0x00005630ff30f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0_chars = [Character](s0)\n\
    \    let s1_chars = [Character](s1)\n    var s0_counts = [Character: Int]()\n\
    \    var s1_counts = [Character: Int]()\n    for c in s0_chars {\n        if let\
    \ count = s0_counts[c] {\n            s0_counts[c] = count + 1\n        } else\
    \ {\n            s0_counts[c] = 1\n        }\n    }\n    for c in s1_chars {\n\
    \        if let count = s1_counts[c] {\n            s1_counts[c] = count + 1\n\
    \        } else {\n            s1_counts[c] = 1\n        }\n    }\n    return\
    \ s0_counts == s1_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_9p02qvk/tmp_9p02qvk.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d30e4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d30b42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d30b42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d30b417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9p02qvk                        0x000055e6d839c703 <unavailable> + 5891

    5    libc.so.6                          0x00002b5d31037460 __libc_start_main +
    245

    6    tmp_9p02qvk                        0x000055e6d839c359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count != s1.count\
    \ {\n        return false\n    }\n    var chars = [Character: Int]()\n    s0.forEach\
    \ { char in\n        if let count = chars[char] {\n            chars[char] = count\
    \ + 1\n        } else {\n            chars[char] = 1\n        }\n    }\n    for\
    \ char in s1 {\n        if let count = chars[char] {\n            if count ==\
    \ 0 {\n                return false\n            }\n            chars[char] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmphh9llxql/tmphh9llxql.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad275748c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad27543fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad27543f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad27543e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh9llxql                        0x000055ba767185e3 <unavailable> + 5603

    5    libc.so.6                          0x00002ad275934460 __libc_start_main +
    245

    6    tmphh9llxql                        0x000055ba76718239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var src = s0.to_char_list()\n\
    \    var tgt = s1.to_char_list()\n    if src.count != tgt.count {\n        return\
    \ false\n    }\n    while src.count > 0 {\n        var c = src.removeLast()\n\
    \        if let k = tgt.firstIndex(of: c) {\n            tgt.remove(at: k)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqny04jnp.swift:16:18: error: value of type 'String' has no member\
    \ 'to_char_list'\n    var src = s0.to_char_list()\n              ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpqny04jnp.swift:17:18: error: value of type 'String' has no member 'to_char_list'\n\
    \    var tgt = s1.to_char_list()\n              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count == s1.count\
    \ {\n        let a = Array(s0).sorted()\n        let b = Array(s1).sorted()\n\
    \        for i in 0..<a.count {\n            if a[i] != b[i] {\n             \
    \   return false\n            }\n        }\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpmf8v9ta0/tmpmf8v9ta0.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdce200c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdcdef7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdcdef7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdcdef67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmf8v9ta0                        0x000055b0b3135733 <unavailable> + 5939

    5    libc.so.6                          0x00002abdce3ec460 __libc_start_main +
    245

    6    tmpmf8v9ta0                        0x000055b0b3135389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    for c in s0 {\n       \
    \ if !s1.contains(c) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0284_fnl/tmp0284_fnl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf94508c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf941ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf941ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf941fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0284_fnl                        0x000056005ba0d85e <unavailable> + 6238

    5    libc.so.6                          0x00002abf946f4460 __libc_start_main +
    245

    6    tmp0284_fnl                        0x000056005ba0d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0Array = s0.characters.map{String($0)}\n\
    \    let s1Array = s1.characters.map{String($0)}\n    var cnt = s0Array.count\n\
    \    if cnt != s1Array.count {\n        return false\n    }\n    for i in 0..<cnt\
    \ {\n        if s0Array[i] != s1Array[i] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9utba55p.swift:16:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0Array = s0.characters.map{String($0)}\n     \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9utba55p.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s1Array = s1.characters.map{String($0)}\n     \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9utba55p.swift:18:9: warning: variable 'cnt' was never mutated; consider\
    \ changing to 'let' constant\n    var cnt = s0Array.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let l0 = s0.count\n   \
    \ let l1 = s1.count\n    if l0 != l1 {\n        return false\n    }\n    var d0\
    \ = [Character: Int]()\n    var d1 = [Character: Int]()\n    for i in 0..<l0 {\n\
    \        let c0 = s0[s0.index(s0.startIndex, offsetBy: i)]\n        let c1 = s1[s1.index(s1.startIndex,\
    \ offsetBy: i)]\n        d0[c0] = (d0[c0] ?? 0) + 1\n        d1[c1] = (d1[c1]\
    \ ?? 0) + 1\n    }\n    return d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpzzmcztr9/tmpzzmcztr9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af554028c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af553d1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af553d1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af553d1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzmcztr9                        0x000056366c0dc753 <unavailable> + 5971

    5    libc.so.6                          0x00002af554214460 __libc_start_main +
    245

    6    tmpzzmcztr9                        0x000056366c0dc3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  return s0.count == s1.count\
    \ && s0.count == count_chars(s0: s0, s1: s1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphmt_qhbo.swift:16:46: error: cannot find 'count_chars' in scope\n\
    \  return s0.count == s1.count && s0.count == count_chars(s0: s0, s1: s1)\n  \
    \                                           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  let s0 = Array(s0.characters)\n\
    \  let s1 = Array(s1.characters)\n  return s0.sorted() == s1.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71ukdfda.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n  let s0 = Array(s0.characters)\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp71ukdfda.swift:17:21:\
    \ error: 'characters' is unavailable: Please use String directly\n  let s1 = Array(s1.characters)\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count != s1.count\
    \ {\n        return false\n    }\n    for (i, j) in zip(s0, s1) {\n        if\
    \ i != j {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpravehkis/tmpravehkis.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac20c77dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac20c474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac20c474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac20c4737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpravehkis                        0x00005640d3b123b3 <unavailable> + 5043

    5    libc.so.6                          0x00002ac20c969460 __libc_start_main +
    245

    6    tmpravehkis                        0x00005640d3b12009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // \u5229\u7528Dictionary\uFF0C\
    \u6AA2\u67E5\u5169\u500B\u5B57\u4E32\u5404\u500B\u5B57\u5143\u51FA\u73FE\u7684\
    \u6B21\u6578\u662F\u5426\u4E00\u6A23\n    // \u9019\u908A\u7684\u7B97\u6CD5\u6548\
    \u7387\u662FO(n)\n    // \u5229\u7528Dictionary\u7684\u7279\u6027\uFF0C\u67E5\u8A62\
    \u7684\u6642\u9593\u8907\u96DC\u5EA6\u662FO(1)\n    var s0_characters_freq = [Character:\
    \ Int]()\n    var s1_characters_freq = [Character: Int]()\n    for c in s0 {\n\
    \        if let freq = s0_characters_freq[c] {\n            s0_characters_freq[c]\
    \ = freq + 1\n        } else {\n            s0_characters_freq[c] = 1\n      \
    \  }\n    }\n    for c in s1 {\n        if let freq = s1_characters_freq[c] {\n\
    \            s1_characters_freq[c] = freq + 1\n        } else {\n            s1_characters_freq[c]\
    \ = 1\n        }\n    }\n    return s0_characters_freq == s1_characters_freq\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmswegxd9/tmpmswegxd9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d64761c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d64458b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d64458988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d644577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswegxd9                        0x0000564dea0f7513 <unavailable> + 5395

    5    libc.so.6                          0x00002b4d6494d460 __libc_start_main +
    245

    6    tmpmswegxd9                        0x0000564dea0f7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return Array(s0.sorted())\
    \ == Array(s1.sorted())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmplj4ygn4z/tmplj4ygn4z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90eba0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90eb706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90eb706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90eb7057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj4ygn4z                        0x00005637ba1b44f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b90ebbfb460 __libc_start_main +
    245

    6    tmplj4ygn4z                        0x00005637ba1b4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0\n    var s1\
    \ = s1\n    let s0_removed = s0.removeAll { s1.contains($0) }\n    let s1_removed\
    \ = s1.removeAll { s0.contains($0) }\n    return s0_removed.isEmpty && s1_removed.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxqbdwckc.swift:18:9: warning: constant 's0_removed' inferred to\
    \ have type '()', which may be unexpected\n    let s0_removed = s0.removeAll {\
    \ s1.contains($0) }\n        ^\n/tmp/tmpxqbdwckc.swift:18:9: note: add an explicit\
    \ type annotation to silence this warning\n    let s0_removed = s0.removeAll {\
    \ s1.contains($0) }\n        ^\n                  : ()\n/tmp/tmpxqbdwckc.swift:19:9:\
    \ warning: constant 's1_removed' inferred to have type '()', which may be unexpected\n\
    \    let s1_removed = s1.removeAll { s0.contains($0) }\n        ^\n/tmp/tmpxqbdwckc.swift:19:9:\
    \ note: add an explicit type annotation to silence this warning\n    let s1_removed\
    \ = s1.removeAll { s0.contains($0) }\n        ^\n                  : ()\n/tmp/tmpxqbdwckc.swift:20:23:\
    \ error: value of tuple type '()' has no member 'isEmpty'\n    return s0_removed.isEmpty\
    \ && s1_removed.isEmpty\n           ~~~~~~~~~~ ^~~~~~~\n/tmp/tmpxqbdwckc.swift:20:45:\
    \ error: value of tuple type '()' has no member 'isEmpty'\n    return s0_removed.isEmpty\
    \ && s1_removed.isEmpty\n                                 ~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 0
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // TODO: Implement this\
    \ function\n    //return false\n    let arr1 = Array(s0)\n    let arr2 = Array(s1)\n\
    \    var flag:Bool = true\n    for n in arr1 {\n        flag = false\n       \
    \ for m in arr2 {\n            if n == m {\n                flag = true\n    \
    \            break\n            }\n        }\n        if flag == false {\n   \
    \         return false\n        }\n    }\n    for n in arr2 {\n        flag =\
    \ false\n        for m in arr1 {\n            if n == m {\n                flag\
    \ = true\n                break\n            }\n        }\n        if flag ==\
    \ false {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var d0 = s0.countElements\
    \ - s1.countElements\n    var d1 = s1.countElements - s0.countElements\n    if\
    \ d0 < 0 { d0 = -d0 }\n    if d1 < 0 { d1 = -d1 }\n    if d0 > 0 || d1 > 0 { return\
    \ false }\n    var c0 = Array(s0.utf8)\n    var c1 = Array(s1.utf8)\n    c0.sort\
    \ {$0 < $1}\n    c1.sort {$0 < $1}\n    return c0 == c1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3fxomvm4.swift:16:17: error: value of type 'String' has no member\
    \ 'countElements'\n    var d0 = s0.countElements - s1.countElements\n        \
    \     ~~ ^~~~~~~~~~~~~\n/tmp/tmp3fxomvm4.swift:16:36: error: value of type 'String'\
    \ has no member 'countElements'\n    var d0 = s0.countElements - s1.countElements\n\
    \                                ~~ ^~~~~~~~~~~~~\n/tmp/tmp3fxomvm4.swift:17:17:\
    \ error: value of type 'String' has no member 'countElements'\n    var d1 = s1.countElements\
    \ - s0.countElements\n             ~~ ^~~~~~~~~~~~~\n/tmp/tmp3fxomvm4.swift:17:36:\
    \ error: value of type 'String' has no member 'countElements'\n    var d1 = s1.countElements\
    \ - s0.countElements\n                                ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpfz37a979/tmpfz37a979.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3aae8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3aab85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3aab85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3aab847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz37a979                        0x0000565526066293 <unavailable> + 4755

    5    libc.so.6                          0x00002ba3ab07a460 __libc_start_main +
    245

    6    tmpfz37a979                        0x0000565526065ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count != s1.count\
    \ {\n        return false\n    }\n    let s0 = s0.sorted(by: <)\n    let s1 =\
    \ s1.sorted(by: <)\n    return s0 == s1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp5axcgkjv/tmp5axcgkjv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ac91a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ac8e9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ac8e9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ac8e9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5axcgkjv                        0x000055e39bbc54f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b8ac9390460 __libc_start_main +
    245

    6    tmp5axcgkjv                        0x000055e39bbc5149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    for c in s0 {\n       \
    \ let r = s1.range(of: String(c))\n        if r == nil {\n            return false\n\
    \        }\n        s1.removeSubrange(r!)\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy5c_6t11.swift:17:20: error: value of type 'String' has no member\
    \ 'range'\n        let r = s1.range(of: String(c))\n                ~~ ^~~~~\n\
    /tmp/tmpy5c_6t11.swift:21:12: error: no exact matches in call to instance method\
    \ 'removeSubrange'\n        s1.removeSubrange(r!)\n           ^\n/tmp/tmpy5c_6t11.swift:21:12:\
    \ note: found candidate with type '(Range<String.Index>) -> ()'\n        s1.removeSubrange(r!)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  for c in s0 {\n    if c !=\
    \ \" \" {\n      if let idx = s1.firstIndex(of: c) {\n        s1.remove(at: idx)\n\
    \      } else {\n        return false\n      }\n    }\n  }\n  return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5hsu044r.swift:19:12: error: cannot use mutating member on immutable\
    \ value: 's1' is a 'let' constant\n        s1.remove(at: idx)\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count == s1.count\
    \ {\n        return s0.sorted() == s1.sorted()\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpp8ejk23k/tmpp8ejk23k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b190b8ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b190b5d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b190b5d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b190b5d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8ejk23k                        0x0000559c228784d3 <unavailable> + 5331

    5    libc.so.6                          0x00002b190bac9460 __libc_start_main +
    245

    6    tmpp8ejk23k                        0x0000559c22878129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    guard s0.count == s1.count\
    \ else { return false }\n    guard s0.count > 0 else { return true }\n    var\
    \ dict = [Character: Int]()\n    var dict1 = [Character: Int]()\n    for c in\
    \ s0 {\n        dict[c, default: 0] += 1\n    }\n    for c in s1 {\n        dict1[c,\
    \ default: 0] += 1\n    }\n    for (key, value) in dict {\n        if value !=\
    \ dict1[key] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpfgmn3auq/tmpfgmn3auq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdf01afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdefea6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdefea6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdefea57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfgmn3auq                        0x0000559c82244793 <unavailable> + 6035

    5    libc.so.6                          0x00002afdf039b460 __libc_start_main +
    245

    6    tmpfgmn3auq                        0x0000559c822443e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var t0 = s0.map { $0 }\n\
    \    var t1 = s1.map { $0 }\n    t0.sort { $0 < $1 }\n    t1.sort { $0 < $1 }\n\
    \    return t0 == t1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpwule5mt6/tmpwule5mt6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3951c57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b395194eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b395194e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b395194d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwule5mt6                        0x00005617f6586573 <unavailable> + 5491

    5    libc.so.6                          0x00002b3951e43460 __libc_start_main +
    245

    6    tmpwule5mt6                        0x00005617f65861c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let x0 = Array(s0.characters)\n\
    \    let x1 = Array(s1.characters)\n    let d0 = x0.filter({ x1.index(of: $0)\
    \ == nil }).count\n    let d1 = x1.filter({ x0.index(of: $0) == nil }).count\n\
    \    if d0 == 0 && d1 == 0 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnesab4qt.swift:16:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let x0 = Array(s0.characters)\n                   \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpnesab4qt.swift:17:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    let x1 =\
    \ Array(s1.characters)\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpnesab4qt.swift:18:29: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let d0 = x0.filter({ x1.index(of:\
    \ $0) == nil }).count\n                            ^\n/tmp/tmpnesab4qt.swift:18:29:\
    \ note: use 'firstIndex(of:)' instead\n    let d0 = x0.filter({ x1.index(of: $0)\
    \ == nil }).count\n                            ^~~~~\n                       \
    \     firstIndex\n/tmp/tmpnesab4qt.swift:19:29: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n    let d1 = x1.filter({ x0.index(of: $0) == nil\
    \ }).count\n                            ^\n/tmp/tmpnesab4qt.swift:19:29: note:\
    \ use 'firstIndex(of:)' instead\n    let d1 = x1.filter({ x0.index(of: $0) ==\
    \ nil }).count\n                            ^~~~~\n                          \
    \  firstIndex\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = Array(s0)\n  \
    \  var s1 = Array(s1)\n    s0.sort()\n    s1.sort()\n    return s0 == s1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvbyaor7l/tmpvbyaor7l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a05657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0534eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0534e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0534d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbyaor7l                        0x000055a5c29295c3 <unavailable> + 5571

    5    libc.so.6                          0x00002b3a05843460 __libc_start_main +
    245

    6    tmpvbyaor7l                        0x000055a5c2929219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // YOUR CODE HERE\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpdm1efz3_/tmpdm1efz3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3da562c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3da259b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3da259988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3da2587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm1efz3_                        0x000056229b308583 <unavailable> + 5507

    5    libc.so.6                          0x00002ae3da74e460 __libc_start_main +
    245

    6    tmpdm1efz3_                        0x000056229b307ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let sorted0 = s0.sorted()\n\
    \    let sorted1 = s1.sorted()\n    return sorted0 == sorted1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpc3o9hg3u/tmpc3o9hg3u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7af8a20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7af8717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7af8717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7af87167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc3o9hg3u                        0x000055ed8ef21483 <unavailable> + 5251

    5    libc.so.6                          0x00002b7af8c0c460 __libc_start_main +
    245

    6    tmpc3o9hg3u                        0x000055ed8ef210d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    var used1 = [Character](count:chars1.count,\
    \ repeatedValue: \" \")\n    for i in 0 ..< chars0.count {\n        var found\
    \ = false\n        for j in 0 ..< chars1.count {\n            if chars0[i] ==\
    \ chars1[j] && used1[j] == \" \" {\n                found = true\n           \
    \     used1[j] = \"*\"\n                break\n            }\n        }\n    \
    \    if !found {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf02st7uf.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = [Character](s0.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpf02st7uf.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var chars1 = [Character](s1.characters)\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf02st7uf.swift:18:17: error: no exact matches in call\
    \ to initializer \n    var used1 = [Character](count:chars1.count, repeatedValue:\
    \ \" \")\n                ^\n/tmp/tmpf02st7uf.swift:18:17: note: candidate has\
    \ partially matching parameter list (repeating: Character, count: Int)\n    var\
    \ used1 = [Character](count:chars1.count, repeatedValue: \" \")\n            \
    \    ^\n/tmp/tmpf02st7uf.swift:18:17: note: candidate has partially matching parameter\
    \ list (repeating: Character, count: Int)\n    var used1 = [Character](count:chars1.count,\
    \ repeatedValue: \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0_chars: [Character]\
    \ = []\n    var s1_chars: [Character] = []\n    for c in s0 {\n        s0_chars.append(c)\n\
    \    }\n    for c in s1 {\n        s1_chars.append(c)\n    }\n    s0_chars.sort()\n\
    \    s1_chars.sort()\n    return String(s0_chars) == String(s1_chars)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp0dw2m9zn/tmp0dw2m9zn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e7b3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e7833b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e7833988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e78327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0dw2m9zn                        0x000055a79bae9673 <unavailable> + 5747

    5    libc.so.6                          0x00002af0e7d28460 __libc_start_main +
    245

    6    tmp0dw2m9zn                        0x000055a79bae92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars = [Character:\
    \ Int]()\n    for c in s0 {\n        if let i = chars[c] {\n            chars[c]\
    \ = i + 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for\
    \ c in s1 {\n        if let i = chars[c] {\n            chars[c] = i - 1\n   \
    \     } else {\n            chars[c] = -1\n        }\n    }\n    for (_, v) in\
    \ chars {\n        if v != 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpr7uirzh_/tmpr7uirzh_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2c9c39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2c9930b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2c9930988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2c992f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7uirzh_                        0x00005557a4c4b623 <unavailable> + 5667

    5    libc.so.6                          0x00002ab2c9e25460 __libc_start_main +
    245

    6    tmpr7uirzh_                        0x00005557a4c4b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var the_counter0 = Counter<Character>()\n\
    \    var the_counter1 = Counter<Character>()\n    for c in s0 {\n        the_counter0[c]\
    \ += 1\n    }\n    for c in s1 {\n        the_counter1[c] += 1\n    }\n    return\
    \ the_counter0 == the_counter1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjso_dc6.swift:16:24: error: cannot find 'Counter' in scope\n \
    \   var the_counter0 = Counter<Character>()\n                       ^~~~~~~\n\
    /tmp/tmpdjso_dc6.swift:17:24: error: cannot find 'Counter' in scope\n    var the_counter1\
    \ = Counter<Character>()\n                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var dic: [Character: Int]\
    \ = [:]\n    for c in s0 {\n        if let v = dic[c] {\n            dic[c] =\
    \ v + 1\n        } else {\n            dic[c] = 1\n        }\n    }\n    for c\
    \ in s1 {\n        if let v = dic[c] {\n            dic[c] = v - 1\n        }\
    \ else {\n            dic[c] = -1\n        }\n    }\n    for (_, v) in dic {\n\
    \        if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpsj19bw5m/tmpsj19bw5m.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa7ee40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa7eb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa7eb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa7eb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj19bw5m                        0x00005621c46296b3 <unavailable> + 5811

    5    libc.so.6                          0x00002afa7f02c460 __libc_start_main +
    245

    6    tmpsj19bw5m                        0x00005621c4629309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let counter_s0 = Counter(s0)\n\
    \    let counter_s1 = Counter(s1)\n    return counter_s0 == counter_s1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdk_vw97u.swift:16:22: error: cannot find 'Counter' in scope\n \
    \   let counter_s0 = Counter(s0)\n                     ^~~~~~~\n/tmp/tmpdk_vw97u.swift:17:22:\
    \ error: cannot find 'Counter' in scope\n    let counter_s1 = Counter(s1)\n  \
    \                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var charList1 = Array(s0.characters)\n\
    \    var charList2 = Array(s1.characters)\n    var charList1Copy = charList1\n\
    \    var charList2Copy = charList2\n    for char in charList1Copy {\n        if\
    \ let x = charList2Copy.index(of: char) {\n            charList2Copy.remove(at:\
    \ x)\n        }\n    }\n    for char in charList2Copy {\n        if let x = charList1Copy.index(of:\
    \ char) {\n            charList1Copy.remove(at: x)\n        }\n    }\n    return\
    \ charList1Copy.count == 0 && charList2Copy.count == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiyx2erll.swift:16:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var charList1 = Array(s0.characters)\n            \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiyx2erll.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var charList2 = Array(s1.characters)\n            \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiyx2erll.swift:21:34: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let x = charList2Copy.index(of: char) {\n \
    \                                ^\n/tmp/tmpiyx2erll.swift:21:34: note: use 'firstIndex(of:)'\
    \ instead\n        if let x = charList2Copy.index(of: char) {\n              \
    \                   ^~~~~\n                                 firstIndex\n/tmp/tmpiyx2erll.swift:26:34:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let x = charList1Copy.index(of: char) {\n                                 ^\n\
    /tmp/tmpiyx2erll.swift:26:34: note: use 'firstIndex(of:)' instead\n        if\
    \ let x = charList1Copy.index(of: char) {\n                                 ^~~~~\n\
    \                                 firstIndex\n/tmp/tmpiyx2erll.swift:16:9: warning:\
    \ variable 'charList1' was never mutated; consider changing to 'let' constant\n\
    \    var charList1 = Array(s0.characters)\n    ~~~ ^\n    let\n/tmp/tmpiyx2erll.swift:17:9:\
    \ warning: variable 'charList2' was never mutated; consider changing to 'let'\
    \ constant\n    var charList2 = Array(s1.characters)\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count == s1.count\
    \ {\n        return s0.sorted() == s1.sorted()\n    }\n    if s0.count > s1.count\
    \ {\n        let s0_array = Array(s0.sorted())\n        let s1_array = Array(s1.sorted())\n\
    \        var si = 0\n        var sj = 0\n        while si < s0_array.count &&\
    \ sj < s1_array.count {\n            if s0_array[si] == s1_array[sj] {\n     \
    \           si += 1\n                sj += 1\n            } else {\n         \
    \       si += 1\n            }\n        }\n        return sj == s1_array.count\n\
    \    } else {\n        return same_chars(s0: s1, s1: s0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp13sdwlro/tmp13sdwlro.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c9cbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c99b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c99b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c99b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13sdwlro                        0x000055ec95fcea8e <unavailable> + 6798

    5    libc.so.6                          0x00002b56c9ea6460 __libc_start_main +
    245

    6    tmp13sdwlro                        0x000055ec95fce2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var a0 = Array(s0), a1\
    \ = Array(s1)\n    a0.sort()\n    a1.sort()\n    return a0 == a1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmphdgarfjq/tmphdgarfjq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74cfc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74ccbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74ccbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74ccbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdgarfjq                        0x000055ab604bc5c3 <unavailable> + 5571

    5    libc.so.6                          0x00002ab74d1b3460 __libc_start_main +
    245

    6    tmphdgarfjq                        0x000055ab604bc219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0.characters.map\
    \ { String($0) }\n    var s1 = s1.characters.map { String($0) }\n    s0.sortInPlace()\n\
    \    s1.sortInPlace()\n    return s0 == s1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoeg2bc06.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0 = s0.characters.map { String($0) }\n       \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpoeg2bc06.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var s1 =\
    \ s1.characters.map { String($0) }\n                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoeg2bc06.swift:18:8: error: value of\
    \ type '[String]' has no member 'sortInPlace'\n    s0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n\
    /tmp/tmpoeg2bc06.swift:19:8: error: value of type '[String]' has no member 'sortInPlace'\n\
    \    s1.sortInPlace()\n    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let a0 = Array(s0)\n  \
    \  let a1 = Array(s1)\n    return a0.sorted() == a1.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpp7plnkpq/tmpp7plnkpq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e81884c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e8157bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e8157b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e8157a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7plnkpq                        0x000055f12cd9c4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b2e81a70460 __libc_start_main +
    245

    6    tmpp7plnkpq                        0x000055f12cd9c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // TODO\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpyjsciz19/tmpyjsciz19.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0582ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05829dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05829df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05829de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyjsciz19                        0x000055c4d0e97293 <unavailable> + 4755

    5    libc.so.6                          0x00002b0582ed4460 __libc_start_main +
    245

    6    tmpyjsciz19                        0x000055c4d0e96ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n\
    \    var c1 = [Character](s1.characters)\n    if (c0.count != c1.count) {\n  \
    \      return false\n    }\n    c0.sort(<)\n    c1.sort(<)\n    return c0 == c1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz3bvydwd.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpz3bvydwd.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpz3bvydwd.swift:21:13: error: missing argument label 'by:' in call\n\
    \    c0.sort(<)\n            ^\n            by: \n/tmp/tmpz3bvydwd.swift:22:13:\
    \ error: missing argument label 'by:' in call\n    c1.sort(<)\n            ^\n\
    \            by: \n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if (s0.count == s1.count)\
    \ {\n        let string0 = Array(s0)\n        let string1 = Array(s1)\n      \
    \  for c in string0 {\n            var found = false\n            for d in string1\
    \ {\n                if (c == d) {\n                    found = true\n       \
    \             break\n                }\n            }\n            if (found ==\
    \ false) {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp71mx5_l5/tmp71mx5_l5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e1038ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e10085b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e10085988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e100847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71mx5_l5                        0x000055dd1f51d613 <unavailable> + 5651

    5    libc.so.6                          0x00002b5e1057a460 __libc_start_main +
    245

    6    tmp71mx5_l5                        0x000055dd1f51d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars: [Character]\
    \ = []\n    for c in s0 {\n        chars.append(c)\n    }\n    for c in s1 {\n\
    \        if let index = chars.firstIndex(of: c) {\n            chars.remove(at:\
    \ index)\n        }\n    }\n    return chars.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpi62gjybm/tmpi62gjybm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb4e550c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb4e247b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb4e247988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb4e2467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi62gjybm                        0x0000556d1bc4e828 <unavailable> + 6184

    5    libc.so.6                          0x00002aeb4e73c460 __libc_start_main +
    245

    6    tmpi62gjybm                        0x0000556d1bc4e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0\n    var s1\
    \ = s1\n    while s0.count > 0 && s1.count > 0 {\n        let c0 = s0.removeFirst()\n\
    \        let c1 = s1.removeFirst()\n        if c0 != c1 {\n            return\
    \ false\n        }\n    }\n    return s0.count == 0 && s1.count == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmj7_mcnu/tmpmj7_mcnu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af80af42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af80ac39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af80ac39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af80ac387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmj7_mcnu                        0x000055d46e690413 <unavailable> + 5139

    5    libc.so.6                          0x00002af80b12e460 __libc_start_main +
    245

    6    tmpmj7_mcnu                        0x000055d46e690069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // TODO: Implement this\
    \ function...\n    var s0_characters_count = s0.characters.count\n    var s1_characters_count\
    \ = s1.characters.count\n    let s0_characters = Array(s0.characters)\n    let\
    \ s1_characters = Array(s1.characters)\n    if (s0_characters_count == s1_characters_count)\
    \ {\n        for i in 0...s0_characters_count - 1 {\n            if s0_characters[i]\
    \ != s1_characters[i] {\n                return false\n            }\n       \
    \ }\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphcvk7c_q.swift:17:34: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_characters_count = s0.characters.count\n   \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphcvk7c_q.swift:18:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var s1_characters_count = s1.characters.count\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphcvk7c_q.swift:19:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    let s0_characters = Array(s0.characters)\n \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphcvk7c_q.swift:20:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    let s1_characters = Array(s1.characters)\n \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphcvk7c_q.swift:17:9: warning: variable 's0_characters_count'\
    \ was never mutated; consider changing to 'let' constant\n    var s0_characters_count\
    \ = s0.characters.count\n    ~~~ ^\n    let\n/tmp/tmphcvk7c_q.swift:18:9: warning:\
    \ variable 's1_characters_count' was never mutated; consider changing to 'let'\
    \ constant\n    var s1_characters_count = s1.characters.count\n    ~~~ ^\n   \
    \ let\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  let (s1, s2) = s0.count <\
    \ s1.count ? (s0, s1) : (s1, s0)\n  let difference = s2.count - s1.count\n  for\
    \ i in 0...difference {\n    let offset = s2.index(s2.startIndex, offsetBy: i)\n\
    \    let range = offset..<s2.index(offset, offsetBy: s1.count)\n    let sub =\
    \ s2[range]\n    if sub == s1 {\n      return true\n    }\n  }\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpf6ffhzvs/tmpf6ffhzvs.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b477d978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b477d66fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b477d66f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b477d66e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6ffhzvs                        0x000055f1a6d166d3 <unavailable> + 5843

    5    libc.so.6                          0x00002b477db64460 __libc_start_main +
    245

    6    tmpf6ffhzvs                        0x000055f1a6d16329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var hm = [Character: Int]()\n\
    \    for c in s0 {\n        if let n = hm[c] {\n            hm[c] = n + 1\n  \
    \      } else {\n            hm[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let n = hm[c] {\n            hm[c] = n - 1\n        } else {\n   \
    \         hm[c] = -1\n        }\n    }\n    for key in hm.keys {\n        if hm[key]\
    \ != 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9032ppxg/tmp9032ppxg.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b460a08dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4609d84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4609d84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4609d837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9032ppxg                        0x000055eca79a6683 <unavailable> + 5763

    5    libc.so.6                          0x00002b460a279460 __libc_start_main +
    245

    6    tmp9032ppxg                        0x000055eca79a62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    guard s0.count == s1.count\
    \ else { return false }\n    let s0 = s0.sorted()\n    let s1 = s1.sorted()\n\
    \    return s0 == s1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmprxw2j0kn/tmprxw2j0kn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66e72fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66e6ff5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66e6ff5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66e6ff47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxw2j0kn                        0x0000563c2a60e4d3 <unavailable> + 5331

    5    libc.so.6                          0x00002b66e74ea460 __libc_start_main +
    245

    6    tmprxw2j0kn                        0x0000563c2a60e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0Counts = [Character:\
    \ Int]()\n    for c in s0 {\n        if let val = s0Counts[c] {\n            s0Counts[c]\
    \ = val + 1\n        } else {\n            s0Counts[c] = 1\n        }\n    }\n\
    \    var s1Counts = [Character: Int]()\n    for c in s1 {\n        if let val\
    \ = s1Counts[c] {\n            s1Counts[c] = val + 1\n        } else {\n     \
    \       s1Counts[c] = 1\n        }\n    }\n    return s0Counts == s1Counts\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpsiukxlq0/tmpsiukxlq0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cde767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cde45eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cde45e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cde45d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsiukxlq0                        0x0000555be237f513 <unavailable> + 5395

    5    libc.so.6                          0x00002b5cde953460 __libc_start_main +
    245

    6    tmpsiukxlq0                        0x0000555be237f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count == s1.count\
    \ {\n        var s0_chars = [Character]()\n        for c in s0 {\n           \
    \ s0_chars.append(c)\n        }\n        for c in s1 {\n            if let i =\
    \ s0_chars.firstIndex(of: c) {\n                s0_chars.remove(at: i)\n     \
    \       } else {\n                return false\n            }\n        }\n   \
    \     return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp4y7j3r5o/tmp4y7j3r5o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fb1f3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fb1c31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fb1c31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fb1c307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4y7j3r5o                        0x000055a8194d95e3 <unavailable> + 5603

    5    libc.so.6                          0x00002b4fb2126460 __libc_start_main +
    245

    6    tmp4y7j3r5o                        0x000055a8194d9239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let (s0, s1) = (s0.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\"), s1.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\"))\n    let (s0c, s1c) = (s0.characters.map { c in Int(String(c))! }, s1.characters.map\
    \ { c in Int(String(c))! })\n    let s0c_sum = s0c.reduce(0, combine: +)\n   \
    \ let s1c_sum = s1c.reduce(0, combine: +)\n    let s0c_product = s0c.reduce(1,\
    \ combine: *)\n    let s1c_product = s1c.reduce(1, combine: *)\n    return s0c_sum\
    \ == s1c_sum && s0c_product == s1c_product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_sk7y5ve.swift:16:24: error: value of type 'String' has no member\
    \ 'stringByReplacingOccurrencesOfString'\n    let (s0, s1) = (s0.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\"), s1.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\"))\n                    ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_sk7y5ve.swift:16:86:\
    \ error: value of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n\
    \    let (s0, s1) = (s0.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\"), s1.stringByReplacingOccurrencesOfString(\" \", withString: \"\"))\n \
    \                                                                            \
    \     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var c0 = s0.characters.sorted()\n\
    \    var c1 = s1.characters.sorted()\n    return c0 == c1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt0zjmke0.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = s0.characters.sorted()\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpt0zjmke0.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var c1 =\
    \ s1.characters.sorted()\n                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt0zjmke0.swift:16:9: warning: variable\
    \ 'c0' was never mutated; consider changing to 'let' constant\n    var c0 = s0.characters.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmpt0zjmke0.swift:17:9: warning: variable 'c1' was never\
    \ mutated; consider changing to 'let' constant\n    var c1 = s1.characters.sorted()\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014069
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // Compute the count of\
    \ each letter in s0.\n    var count = [Character: Int]()\n    for c in s0 {\n\
    \        count[c] = (count[c] ?? 0) + 1\n    }\n    // Subtract the count of each\
    \ letter in s1.\n    for c in s1 {\n        if let n = count[c] {\n          \
    \  count[c] = n - 1\n        } else {\n            count[c] = -1\n        }\n\
    \    }\n    // All the counts should be zero.\n    return count.values.all { $0\
    \ == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp69018zei.swift:30:25: error: value of type 'Dictionary<Character,\
    \ Int>.Values' has no member 'all'\n    return count.values.all { $0 == 0 }\n\
    \           ~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if count_chars(s: s0) ==\
    \ count_chars(s: s1) {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9n05l3ir.swift:16:8: error: cannot find 'count_chars' in scope\n\
    \    if count_chars(s: s0) == count_chars(s: s1) {\n       ^~~~~~~~~~~\n/tmp/tmp9n05l3ir.swift:16:30:\
    \ error: cannot find 'count_chars' in scope\n    if count_chars(s: s0) == count_chars(s:\
    \ s1) {\n                             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var histogram = [Character:\
    \ Int]()\n    for char in s0 {\n        histogram[char] = (histogram[char] ??\
    \ 0) + 1\n    }\n    for char in s1 {\n        histogram[char] = (histogram[char]\
    \ ?? 0) - 1\n    }\n    for (_, count) in histogram {\n        if count != 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpn0afu4j_/tmpn0afu4j_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf255a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf25297b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf25297988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf252967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0afu4j_                        0x000055b1aab03623 <unavailable> + 5667

    5    libc.so.6                          0x00002abf2578c460 __libc_start_main +
    245

    6    tmpn0afu4j_                        0x000055b1aab03279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var char_counts = Array(repeating:\
    \ 0, count: 26)\n    var chars = Array(s0)\n    for i in 0 ..< chars.count {\n\
    \        let idx = Int(chars[i].asciiValue! - 97)\n        char_counts[idx] +=\
    \ 1\n    }\n    chars = Array(s1)\n    for i in 0 ..< chars.count {\n        let\
    \ idx = Int(chars[i].asciiValue! - 97)\n        char_counts[idx] -= 1\n    }\n\
    \    for i in 0 ..< char_counts.count {\n        if char_counts[i] != 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpcy_mnlnt/tmpcy_mnlnt.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9500e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94fddfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94fddf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94fdde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy_mnlnt                        0x000055c3b66ec973 <unavailable> + 6515

    5    libc.so.6                          0x00002ac9502d4460 __libc_start_main +
    245

    6    tmpcy_mnlnt                        0x000055c3b66ec5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0_chars = Array(s0.characters)\n\
    \    let s1_chars = Array(s1.characters)\n    var s0_char_counts = [Character:\
    \ Int]()\n    var s1_char_counts = [Character: Int]()\n    var s0_char_count:\
    \ Int\n    var s1_char_count: Int\n    if s0_chars.count != s1_chars.count {\n\
    \        return false\n    }\n    for c in s0_chars {\n        s0_char_count =\
    \ s0_char_counts[c] ?? 0\n        s0_char_counts[c] = s0_char_count + 1\n    }\n\
    \    for c in s1_chars {\n        s1_char_count = s1_char_counts[c] ?? 0\n   \
    \     s1_char_counts[c] = s1_char_count + 1\n    }\n    for (c, count) in s0_char_counts\
    \ {\n        if s1_char_counts[c] != count {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppudvmx5a.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_chars = Array(s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppudvmx5a.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s1_chars = Array(s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 0
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0_c = Array(s0)\n\
    \    let s1_c = Array(s1)\n    var s0_counts = [Character: Int]()\n    var s1_counts\
    \ = [Character: Int]()\n    for c in s0_c {\n        s0_counts[c] = s0_counts[c]\
    \ ?? 0 + 1\n    }\n    for c in s1_c {\n        s1_counts[c] = s1_counts[c] ??\
    \ 0 + 1\n    }\n    return s0_counts == s1_counts\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  var m0 = [Character: Int]()\n\
    \  var m1 = [Character: Int]()\n  for c in s0 {\n    m0[c] = (m0[c] ?? 0) + 1\n\
    \  }\n  for c in s1 {\n    m1[c] = (m1[c] ?? 0) + 1\n  }\n  if m0.count != m1.count\
    \ {\n    return false\n  }\n  for (k,v) in m0 {\n    if m1[k] != v {\n      return\
    \ false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp8qjubor_/tmp8qjubor_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dd5584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dd527bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dd527b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dd527a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qjubor_                        0x0000559213aba673 <unavailable> + 5747

    5    libc.so.6                          0x00002b6dd5770460 __libc_start_main +
    245

    6    tmp8qjubor_                        0x0000559213aba2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count != s1.count\
    \ {\n        return false\n    }\n    var m0 = [Int](repeating: 0, count: 255)\n\
    \    var m1 = [Int](repeating: 0, count: 255)\n    for i in 0..<s0.count {\n \
    \       let c0 = s0[s0.index(s0.startIndex, offsetBy: i)]\n        let c1 = s1[s1.index(s1.startIndex,\
    \ offsetBy: i)]\n        m0[Int(c0.asciiValue!)] += 1\n        m1[Int(c1.asciiValue!)]\
    \ += 1\n    }\n    for i in 0..<255 {\n        if m0[i] != m1[i] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpc6t05ik4/tmpc6t05ik4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45b6f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45b3eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45b3ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45b3e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6t05ik4                        0x000055c3a5e3c873 <unavailable> + 6259

    5    libc.so.6                          0x00002ad45b8df460 __libc_start_main +
    245

    6    tmpc6t05ik4                        0x000055c3a5e3c4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpfz37a979/tmpfz37a979.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3aae8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3aab85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3aab85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3aab847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz37a979                        0x0000565526066293 <unavailable> + 4755

    5    libc.so.6                          0x00002ba3ab07a460 __libc_start_main +
    245

    6    tmpfz37a979                        0x0000565526065ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    guard s0.count == s1.count\
    \ else { return false }\n    return s0.sorted() == s1.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp7ah5sxwy/tmp7ah5sxwy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafe8dbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafe8ab1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafe8ab1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafe8ab07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ah5sxwy                        0x00005561171b74d3 <unavailable> + 5331

    5    libc.so.6                          0x00002aafe8fa6460 __libc_start_main +
    245

    6    tmp7ah5sxwy                        0x00005561171b7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var array_s0 = [Character](s0)\n\
    \    var array_s1 = [Character](s1)\n    array_s0.sort()\n    array_s1.sort()\n\
    \    return array_s0 == array_s1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpur0h1i6m/tmpur0h1i6m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bd0143c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bcfe3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bcfe3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bcfe397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpur0h1i6m                        0x00005556bc13b5c3 <unavailable> + 5571

    5    libc.so.6                          0x00002b1bd032f460 __libc_start_main +
    245

    6    tmpur0h1i6m                        0x00005556bc13b219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var dict = [Character:\
    \ Int]()\n    for char in s0 {\n        if let value = dict[char] {\n        \
    \    dict[char] = value + 1\n        } else {\n            dict[char] = 1\n  \
    \      }\n    }\n    for char in s1 {\n        if let value = dict[char] {\n \
    \           dict[char] = value - 1\n        } else {\n            dict[char] =\
    \ -1\n        }\n    }\n    for (_, value) in dict {\n        if value != 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmprovskt86/tmprovskt86.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada71526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada7121db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada7121d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada7121c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprovskt86                        0x000055f746521623 <unavailable> + 5667

    5    libc.so.6                          0x00002ada71712460 __libc_start_main +
    245

    6    tmprovskt86                        0x000055f746521279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    \n    if s0.count == s1.count\
    \ {\n        var characterCount = [Character: Int]()\n        let char0 = Array(s0)\n\
    \        let char1 = Array(s1)\n        for c in char0 {\n            if let count\
    \ = characterCount[c] {\n                characterCount[c] = count + 1\n     \
    \       } else {\n                characterCount[c] = 1\n            }\n     \
    \   }\n        for c in char1 {\n            if let count = characterCount[c]\
    \ {\n                characterCount[c] = count - 1\n            } else {\n   \
    \             characterCount[c] = 1\n            }\n        }\n        return\
    \ characterCount.values.allSatisfy { $0 == 0 }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpd1hs5za5/tmpd1hs5za5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eea850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eea547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eea547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eea5467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1hs5za5                        0x0000559f63c67843 <unavailable> + 6211

    5    libc.so.6                          0x00002b1eeaa3c460 __libc_start_main +
    245

    6    tmpd1hs5za5                        0x0000559f63c67499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = Array(s0)\n  \
    \  var s1 = Array(s1)\n    s0.sort()\n    s1.sort()\n    return s0 == s1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvbyaor7l/tmpvbyaor7l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a05657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0534eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0534e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0534d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbyaor7l                        0x000055a5c29295c3 <unavailable> + 5571

    5    libc.so.6                          0x00002b3a05843460 __libc_start_main +
    245

    6    tmpvbyaor7l                        0x000055a5c2929219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0\n    var s1\
    \ = s1\n    let s0chars = s0.characters.count\n    let s1chars = s1.characters.count\n\
    \    if s0chars != s1chars {\n        return false\n    }\n    for c in s0.characters\
    \ {\n        if let i = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplqfl0aa7.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0chars = s0.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplqfl0aa7.swift:19:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1chars\
    \ = s1.characters.count\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmplqfl0aa7.swift:23:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s0.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmplqfl0aa7.swift:24:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let i = s1.characters.index(of: c) {\n     \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmplqfl0aa7.swift:24:34: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let i = s1.characters.index(of: c) {\n    \
    \                             ^\n/tmp/tmplqfl0aa7.swift:24:34: note: use 'firstIndex(of:)'\
    \ instead\n        if let i = s1.characters.index(of: c) {\n                 \
    \                ^~~~~\n                                 firstIndex\n/tmp/tmplqfl0aa7.swift:16:9:\
    \ warning: variable 's0' was never mutated; consider changing to 'let' constant\n\
    \    var s0 = s0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  let slice0 = Array(s0)\n\
    \  let slice1 = Array(s1)\n  var map0 = [Character: Int]()\n  var map1 = [Character:\
    \ Int]()\n  for char in slice0 {\n    if map0[char] == nil {\n      map0[char]\
    \ = 1\n    } else {\n      map0[char]! += 1\n    }\n  }\n  for char in slice1\
    \ {\n    if map1[char] == nil {\n      map1[char] = 1\n    } else {\n      map1[char]!\
    \ += 1\n    }\n  }\n  return map0 == map1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpldvhq8po/tmpldvhq8po.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69b9f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69b9c4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69b9c4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69b9c497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldvhq8po                        0x000055622acb07e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b69ba13f460 __libc_start_main +
    245

    6    tmpldvhq8po                        0x000055622acb0439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.count == s1.count\
    \ && s0.count == (s0.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!\
    \ + s1.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!).addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)!.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpis0509xy.swift:16:52: error: value of type 'String' has no member\
    \ 'addingPercentEncoding'\n    return s0.count == s1.count && s0.count == (s0.addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)! + s1.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!).addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)!.count\n                                                ~~\
    \ ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpis0509xy.swift:16:120: error: value of type 'String'\
    \ has no member 'addingPercentEncoding'\n    return s0.count == s1.count && s0.count\
    \ == (s0.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)! + s1.addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)!).addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!.count\n\
    \                                                                            \
    \                                        ~~ ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpis0509xy.swift:16:166:\
    \ error: cannot infer contextual base in reference to member 'urlPathAllowed'\n\
    \    return s0.count == s1.count && s0.count == (s0.addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)! + s1.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!).addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)!.count\n                                                  \
    \                                                                            \
    \                                      ~^~~~~~~~~~~~~~\n/tmp/tmpis0509xy.swift:16:98:\
    \ error: cannot infer contextual base in reference to member 'urlPathAllowed'\n\
    \    return s0.count == s1.count && s0.count == (s0.addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)! + s1.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!).addingPercentEncoding(withAllowedCharacters:\
    \ .urlPathAllowed)!.count\n                                                  \
    \                                              ~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014159
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count0 = [Character:\
    \ Int]()\n    var count1 = [Character: Int]()\n    for c in s0 {\n        count0[c]\
    \ = (count0[c] ?? 0) + 1\n    }\n    for c in s1 {\n        count1[c] = (count1[c]\
    \ ?? 0) + 1\n    }\n    return count0 == count1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpszjsap0o/tmpszjsap0o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de7741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de7438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de7438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de74377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszjsap0o                        0x000055cd6d038513 <unavailable> + 5395

    5    libc.so.6                          0x00002b6de792d460 __libc_start_main +
    245

    6    tmpszjsap0o                        0x000055cd6d038169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars = [Character](s0)\n\
    \    return s1.filter { chars.contains($0) }.count == chars.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpa76lyspi/tmpa76lyspi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a9fd87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a9fa7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a9fa7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a9fa7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa76lyspi                        0x000055b802c0a5e3 <unavailable> + 5603

    5    libc.so.6                          0x00002b5a9ff73460 __libc_start_main +
    245

    6    tmpa76lyspi                        0x000055b802c0a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpfz37a979/tmpfz37a979.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3aae8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3aab85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3aab85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3aab847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz37a979                        0x0000565526066293 <unavailable> + 4755

    5    libc.so.6                          0x00002ba3ab07a460 __libc_start_main +
    245

    6    tmpfz37a979                        0x0000565526065ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014156
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0_freq = character_frequencies(s:\
    \ s0)\n    var s1_freq = character_frequencies(s: s1)\n    let s0_keys = Array(s0_freq.keys)\n\
    \    let s1_keys = Array(s1_freq.keys)\n    for key in s0_keys {\n        if (s1_freq[key]\
    \ != nil) {\n            if (s0_freq[key] != s1_freq[key]) {\n               \
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n    }\n    for key in s1_keys {\n        if (s0_freq[key] != nil) {\n\
    \            if (s0_freq[key] != s1_freq[key]) {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz2b8mg4z.swift:16:19: error: cannot find 'character_frequencies'\
    \ in scope\n    var s0_freq = character_frequencies(s: s0)\n                 \
    \ ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz2b8mg4z.swift:17:19: error: cannot find 'character_frequencies'\
    \ in scope\n    var s1_freq = character_frequencies(s: s1)\n                 \
    \ ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // TODO\n    var arr0:\
    \ [Character] = []\n    var arr1: [Character] = []\n    for char in s0 {\n   \
    \     arr0.append(char)\n    }\n    for char in s1 {\n        arr1.append(char)\n\
    \    }\n    arr0.sort(by: <)\n    arr1.sort(by: <)\n    return arr0 == arr1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp4vywq3vt/tmp4vywq3vt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3319197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3318e8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3318e8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3318e8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vywq3vt                        0x0000564a5c6fc613 <unavailable> + 5651

    5    libc.so.6                          0x00002b3319383460 __libc_start_main +
    245

    6    tmp4vywq3vt                        0x0000564a5c6fc269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let d0 = Dictionary(grouping:\
    \ s0) { $0 }\n    let d1 = Dictionary(grouping: s1) { $0 }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvphmt3px/tmpvphmt3px.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4973c82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4973979b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4973979988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49739787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvphmt3px                        0x0000557e00b724e3 <unavailable> + 5347

    5    libc.so.6                          0x00002b4973e6e460 __libc_start_main +
    245

    6    tmpvphmt3px                        0x0000557e00b72139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count = [Character:\
    \ Int]()\n    for i in s0 {\n        if let num = count[i] {\n            count[i]\
    \ = num + 1\n        } else {\n            count[i] = 1\n        }\n    }\n  \
    \  for i in s1 {\n        if let num = count[i] {\n            count[i] = num\
    \ - 1\n        } else {\n            count[i] = -1\n        }\n    }\n    for\
    \ (_, v) in count {\n        if v != 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp3zo7lpgl/tmp3zo7lpgl.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2b305fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2b2d56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2b2d56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2b2d557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3zo7lpgl                        0x000056038e053623 <unavailable> + 5667

    5    libc.so.6                          0x00002ac2b324b460 __libc_start_main +
    245

    6    tmp3zo7lpgl                        0x000056038e053279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0\n    var s1\
    \ = s1\n    while !s0.isEmpty && !s1.isEmpty {\n        s0 = remove_first_char(s0:\
    \ s0, c: s1.first!)\n        s1 = remove_first_char(s0: s1, c: s1.first!)\n  \
    \  }\n    return s0.isEmpty && s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbpvcwl5v.swift:19:14: error: cannot find 'remove_first_char' in\
    \ scope\n        s0 = remove_first_char(s0: s0, c: s1.first!)\n             ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbpvcwl5v.swift:20:14: error: cannot find 'remove_first_char' in scope\n\
    \        s1 = remove_first_char(s0: s1, c: s1.first!)\n             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var w1 = word_count(s:\
    \ s0)\n    var w2 = word_count(s: s1)\n    for k in w1.keys {\n        if (w1[k]\
    \ != w2[k]) {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnos43m0z.swift:16:14: error: cannot find 'word_count' in scope\n\
    \    var w1 = word_count(s: s0)\n             ^~~~~~~~~~\n/tmp/tmpnos43m0z.swift:17:14:\
    \ error: cannot find 'word_count' in scope\n    var w2 = word_count(s: s1)\n \
    \            ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014157
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n\
    \    var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2tyxyyu4.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2tyxyyu4.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2tyxyyu4.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmp2tyxyyu4.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var (s0, s1) = (s0, s1)\n\
    \    for _ in 0..<s0.characters.count {\n        let c = s0.remove(at: s0.startIndex)\n\
    \        if let i = s1.characters.index(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnx_qj1bn.swift:17:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in 0..<s0.characters.count {\n              \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnx_qj1bn.swift:19:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        if let\
    \ i = s1.characters.index(of: c) {\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpnx_qj1bn.swift:19:34: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        if let i = s1.characters.index(of:\
    \ c) {\n                                 ^\n/tmp/tmpnx_qj1bn.swift:19:34: note:\
    \ use 'firstIndex(of:)' instead\n        if let i = s1.characters.index(of: c)\
    \ {\n                                 ^~~~~\n                                \
    \ firstIndex\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if (s0.count == s1.count)\
    \ {\n        var s0_dict: [Character: Int] = [:]\n        var s1_dict: [Character:\
    \ Int] = [:]\n        for char in s0 {\n            if let c_count = s0_dict[char]\
    \ {\n                s0_dict[char] = c_count + 1\n            } else {\n     \
    \           s0_dict[char] = 1\n            }\n        }\n        for char in s1\
    \ {\n            if let c_count = s1_dict[char] {\n                s1_dict[char]\
    \ = c_count + 1\n            } else {\n                s1_dict[char] = 1\n   \
    \         }\n        }\n        return s0_dict == s1_dict\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp70szyt3u/tmp70szyt3u.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72455eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72452e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72452e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72452e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70szyt3u                        0x000055f8f1d4f5f3 <unavailable> + 5619

    5    libc.so.6                          0x00002b72457da460 __libc_start_main +
    245

    6    tmp70szyt3u                        0x000055f8f1d4f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return Set(s0.characters)\
    \ == Set(s1.characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpal84mchb.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return Set(s0.characters) == Set(s1.characters)\n \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpal84mchb.swift:16:41: error: 'characters' is unavailable: Please\
    \ use String directly\n    return Set(s0.characters) == Set(s1.characters)\n \
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    if s0.count != s1.count\
    \ {\n        return false\n    }\n    var ns0 = s0.count\n    var ns1 = s1.count\n\
    \    var count = [Character: Int]()\n    for i in 0..<ns0 {\n        let c = s0[s0.index(s0.startIndex,\
    \ offsetBy: i)]\n        if let count_ = count[c] {\n            count[c] = count_\
    \ + 1\n        } else {\n            count[c] = 1\n        }\n    }\n    for i\
    \ in 0..<ns1 {\n        let c = s1[s1.index(s1.startIndex, offsetBy: i)]\n   \
    \     if let count_ = count[c] {\n            count[c] = count_ - 1\n        }\
    \ else {\n            count[c] = -1\n        }\n    }\n    for (_, v) in count\
    \ {\n        if v != 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpdll1boso/tmpdll1boso.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b195514fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1954e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1954e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1954e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdll1boso                        0x00005619e042e863 <unavailable> + 6243

    5    libc.so.6                          0x00002b195533b460 __libc_start_main +
    245

    6    tmpdll1boso                        0x00005619e042e4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let a0 = Array(s0)\n  \
    \  let a1 = Array(s1)\n    if a0.count != a1.count {\n        return false\n \
    \   }\n    var n0 = [Int](repeating: 0, count: 26)\n    var n1 = [Int](repeating:\
    \ 0, count: 26)\n    for i in 0..<a0.count {\n        n0[Int(a0[i].asciiValue!\
    \ - 97)] += 1\n        n1[Int(a1[i].asciiValue! - 97)] += 1\n    }\n    return\
    \ n0 == n1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp7poe40lj/tmp7poe40lj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b832827ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8327f75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8327f75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8327f747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7poe40lj                        0x000055591fdaa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b832846a460 __libc_start_main +
    245

    6    tmp7poe40lj                        0x000055591fdaa589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var d0 = count_chars(s:\
    \ s0)\n    var d1 = count_chars(s: s1)\n    return d0 == d1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbyubtzi2.swift:16:14: error: cannot find 'count_chars' in scope\n\
    \    var d0 = count_chars(s: s0)\n             ^~~~~~~~~~~\n/tmp/tmpbyubtzi2.swift:17:14:\
    \ error: cannot find 'count_chars' in scope\n    var d1 = count_chars(s: s1)\n\
    \             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let l0 = s0.characters.count\n\
    \    let l1 = s1.characters.count\n    if l0 != l1 {\n        return false\n \
    \   }\n    if s0 == s1 {\n        return true\n    }\n    var counts0 = [Character:\
    \ Int]()\n    var counts1 = [Character: Int]()\n    for c in s0.characters {\n\
    \        counts0[c] = (counts0[c] ?? 0) + 1\n    }\n    for c in s1.characters\
    \ {\n        counts1[c] = (counts1[c] ?? 0) + 1\n    }\n    return counts0 ==\
    \ counts1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptlicydtg.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let l0 = s0.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptlicydtg.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    let l1 =\
    \ s1.characters.count\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptlicydtg.swift:26:17: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s0.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptlicydtg.swift:29:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s1.characters {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // your code here\n   \
    \ return s0.sorted() == s1.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptbskgz7l/tmptbskgz7l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b079d7b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b079d4b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b079d4b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b079d4af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbskgz7l                        0x000055ef90d40483 <unavailable> + 5251

    5    libc.so.6                          0x00002b079d9a5460 __libc_start_main +
    245

    6    tmptbskgz7l                        0x000055ef90d400d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  var s0 = s0\n  var s1 = s1\n\
    \  for _ in 0...s0.count {\n    let c0 = s0.removeFirst()\n    let found = s1.firstIndex(of:\
    \ c0)\n    if let found = found {\n      s1.remove(at: found)\n    } else {\n\
    \      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e45d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e42cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b43e42cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b43e42cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b43e42cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b43e42beff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp1f59sfx0                        0x000055f7df622efa <unavailable> + 7930

    7    tmp1f59sfx0                        0x000055f7df622615 <unavailable> + 5653

    8    libc.so.6                          0x00002b43e47c4460 __libc_start_main +
    245

    9    tmp1f59sfx0                        0x000055f7df6222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // your code here\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmppxvf80a6/tmppxvf80a6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f7f31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7f015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7f015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7f0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxvf80a6                        0x0000558cedc16293 <unavailable> + 4755

    5    libc.so.6                          0x00002b9f7f50a460 __libc_start_main +
    245

    6    tmppxvf80a6                        0x0000558cedc15ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var dict: [Character: Int]\
    \ = [:]\n    for c in s0 {\n        dict[c] = (dict[c] ?? 0) + 1\n    }\n    for\
    \ c in s1 {\n        dict[c] = (dict[c] ?? 0) - 1\n    }\n    return dict.allSatisfy({\
    \ $0.value == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp9rgjerml/tmp9rgjerml.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66314dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66311d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66311d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66311d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rgjerml                        0x000056082203c5f3 <unavailable> + 5619

    5    libc.so.6                          0x00002b66316cb460 __libc_start_main +
    245

    6    tmp9rgjerml                        0x000056082203c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var a = Array(s0.utf8)\n\
    \    var b = Array(s1.utf8)\n    a.sort()\n    b.sort()\n    return a == b\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvdakabzf/tmpvdakabzf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa6cb1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa6c812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa6c812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa6c8117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdakabzf                        0x00005623dfd72683 <unavailable> + 5763

    5    libc.so.6                          0x00002baa6cd07460 __libc_start_main +
    245

    6    tmpvdakabzf                        0x00005623dfd722d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let s0chars = Array(s0)\n\
    \    let s1chars = Array(s1)\n    if (s0chars.count != s1chars.count) {\n    \
    \    return false\n    }\n    var s0chars_copy = s0chars\n    var s1chars_copy\
    \ = s1chars\n    s0chars_copy.sort()\n    s1chars_copy.sort()\n    for i in 0..<s0chars.count\
    \ {\n        if (s0chars_copy[i] != s1chars_copy[i]) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpgbzhy_5n/tmpgbzhy_5n.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae76abacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae76a8a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae76a8a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76a8a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbzhy_5n                        0x00005622512f77a3 <unavailable> + 6051

    5    libc.so.6                          0x00002ae76ad98460 __libc_start_main +
    245

    6    tmpgbzhy_5n                        0x00005622512f73f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var all_characters = Set<Character>()\n\
    \    for c in s0 {\n        all_characters.insert(c)\n    }\n    for c in s1 {\n\
    \        all_characters.insert(c)\n    }\n    var chars_count_s0 = [Character:\
    \ Int]()\n    var chars_count_s1 = [Character: Int]()\n    for c in all_characters\
    \ {\n        chars_count_s0[c] = 0\n        chars_count_s1[c] = 0\n    }\n   \
    \ for c in s0 {\n        chars_count_s0[c]! += 1\n    }\n    for c in s1 {\n \
    \       chars_count_s1[c]! += 1\n    }\n    for c in all_characters {\n      \
    \  if chars_count_s0[c] != chars_count_s1[c] {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpjf4l1uuq/tmpjf4l1uuq.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6d3c8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6d3981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6d3981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6d39807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf4l1uuq                        0x00005636355fc7c3 <unavailable> + 6083

    5    libc.so.6                          0x00002ba6d3e76460 __libc_start_main +
    245

    6    tmpjf4l1uuq                        0x00005636355fc419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9ox4wzro/tmp9ox4wzro.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b776af6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b776ac65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b776ac65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b776ac647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ox4wzro                        0x00005651d9ca4483 <unavailable> + 5251

    5    libc.so.6                          0x00002b776b15a460 __libc_start_main +
    245

    6    tmp9ox4wzro                        0x00005651d9ca40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013975
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let c0 = chars(s: s0)\n\
    \    let c1 = chars(s: s1)\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqu2hb_kl.swift:16:14: error: cannot find 'chars' in scope\n   \
    \ let c0 = chars(s: s0)\n             ^~~~~\n/tmp/tmpqu2hb_kl.swift:17:14: error:\
    \ cannot find 'chars' in scope\n    let c1 = chars(s: s1)\n             ^~~~~\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var r0 = 0\n    var r1\
    \ = 0\n    for letter in s0.characters {\n        r0 ^= Int(letter.asciiValue!)\n\
    \    }\n    for letter in s1.characters {\n        r1 ^= Int(letter.asciiValue!)\n\
    \    }\n    return r0 == r1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqwxt5txf.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s0.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpqwxt5txf.swift:21:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for letter\
    \ in s1.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0, s1 = s1\n\
    \    for c in s0 {\n        let r = s1.firstIndex(of: c)\n        if r == nil\
    \ {\n            return false\n        }\n        s1.remove(at: r!)\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpwwd4bcif/tmpwwd4bcif.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d0017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0cfd0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0cfd0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0cfd0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwd4bcif                        0x000056380486e748 <unavailable> + 5960

    5    libc.so.6                          0x00002ab0d0203460 __libc_start_main +
    245

    6    tmpwwd4bcif                        0x000056380486e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    \n    // TODO: Write this\
    \ func!\n    var dict = [Character: Int]()\n    let s0Array = Array(s0)\n    let\
    \ s1Array = Array(s1)\n    \n    if s0Array.count != s1Array.count {\n       \
    \ return false\n    }\n    \n    for i in 0..<s0Array.count {\n        if dict[s0Array[i]]\
    \ == nil {\n            dict[s0Array[i]] = 1\n        } else {\n            dict[s0Array[i]]!\
    \ += 1\n        }\n    }\n    \n    for i in 0..<s1Array.count {\n        if dict[s1Array[i]]\
    \ == nil {\n            return false\n        } else {\n            dict[s1Array[i]]!\
    \ -= 1\n        }\n    }\n    \n    for (_, num) in dict {\n        if num !=\
    \ 0 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpjr973xys/tmpjr973xys.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5709dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5709aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5709ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5709acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjr973xys                        0x000055e27a2bf8d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b5709fc3460 __libc_start_main +
    245

    6    tmpjr973xys                        0x000055e27a2bf529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count_s0 = [Character:\
    \ Int]()\n    var count_s1 = [Character: Int]()\n    var same = true\n    // fill\
    \ in the blank\n    for i in s0.characters {\n        if let _ = count_s0[i] {\n\
    \            count_s0[i]! += 1\n        } else {\n            count_s0[i] = 1\n\
    \        }\n    }\n    for i in s1.characters {\n        if let _ = count_s1[i]\
    \ {\n            count_s1[i]! += 1\n        } else {\n            count_s1[i]\
    \ = 1\n        }\n    }\n    if count_s0.count != count_s1.count {\n        same\
    \ = false\n    } else {\n        for i in count_s0.keys {\n            if count_s0[i]\
    \ != count_s1[i] {\n                same = false\n            }\n        }\n \
    \   }\n    return same\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl4pjse2u.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in s0.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl4pjse2u.swift:27:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    for i in\
    \ s1.characters {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // Write your code here.\n\
    \    var dict0 = [Character: Int]()\n    var dict1 = [Character: Int]()\n    for\
    \ c in s0 {\n        if let val = dict0[c] {\n            dict0[c] = val + 1\n\
    \        } else {\n            dict0[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let val = dict1[c] {\n            dict1[c] = val + 1\n       \
    \ } else {\n            dict1[c] = 1\n        }\n    }\n    return dict0 == dict1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpq93wjp97/tmpq93wjp97.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81b273cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81b2433b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81b2433988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81b24327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq93wjp97                        0x000055b5c3350513 <unavailable> + 5395

    5    libc.so.6                          0x00002b81b2928460 __libc_start_main +
    245

    6    tmpq93wjp97                        0x000055b5c3350169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let ss0 = Array(s0.characters)\n\
    \    let ss1 = Array(s1.characters)\n    if ss0.count != ss1.count {\n       \
    \ return false\n    }\n    for i in 0..<ss0.count {\n        if ss0[i] != ss1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1s_5x_pk.swift:16:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let ss0 = Array(s0.characters)\n                  \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1s_5x_pk.swift:17:24:\
    \ error: 'characters' is unavailable: Please use String directly\n    let ss1\
    \ = Array(s1.characters)\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var counter = [Character:\
    \ Int]()\n    for c in s0 {\n        if let i = counter[c] {\n            counter[c]\
    \ = i + 1\n        } else {\n            counter[c] = 1\n        }\n    }\n  \
    \  for c in s1 {\n        if let i = counter[c] {\n            counter[c] = i\
    \ - 1\n        } else {\n            counter[c] = -1\n        }\n    }\n    for\
    \ (_, v) in counter {\n        if v != 0 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpir1_vd4x/tmpir1_vd4x.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa3f876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa3f56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa3f56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa3f56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpir1_vd4x                        0x00005603502c6623 <unavailable> + 5667

    5    libc.so.6                          0x00002afa3fa62460 __libc_start_main +
    245

    6    tmpir1_vd4x                        0x00005603502c6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    let a0 = Array(s0)\n  \
    \  let a1 = Array(s1)\n    if a0.count != a1.count {\n        return false\n \
    \   }\n    var c0 = [Character: Int]()\n    var c1 = [Character: Int]()\n    for\
    \ c in a0 {\n        if c0[c] == nil {\n            c0[c] = 1\n        } else\
    \ {\n            c0[c]! += 1\n        }\n    }\n    for c in a1 {\n        if\
    \ c1[c] == nil {\n            c1[c] = 1\n        } else {\n            c1[c]!\
    \ += 1\n        }\n    }\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_imgksnk/tmp_imgksnk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc2ba8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc2b783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc2b783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc2b7827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_imgksnk                        0x000055990839e833 <unavailable> + 6195

    5    libc.so.6                          0x00002acc2bc78460 __libc_start_main +
    245

    6    tmp_imgksnk                        0x000055990839e489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var tmp0 = s0\n    var\
    \ tmp1 = s1\n    while !tmp0.isEmpty {\n        let char0 = tmp0.removeFirst()\n\
    \        var i = tmp1.startIndex\n        while i < tmp1.endIndex {\n        \
    \    if tmp1[i] == char0 {\n                tmp1.remove(at: i)\n             \
    \   break\n            }\n            i = tmp1.index(after: i)\n        }\n  \
    \      if i == tmp1.endIndex {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0jaxjwkf/tmp0jaxjwkf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f2464ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f24345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f24345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f243447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jaxjwkf                        0x000055c8e8387693 <unavailable> + 5779

    5    libc.so.6                          0x00002b9f2483a460 __libc_start_main +
    245

    6    tmp0jaxjwkf                        0x000055c8e83872e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var letters_count_0 = [Character:\
    \ Int]()\n    var letters_count_1 = [Character: Int]()\n    for c in s0 {\n  \
    \      letters_count_0[c] = (letters_count_0[c] ?? 0) + 1\n    }\n    for c in\
    \ s1 {\n        letters_count_1[c] = (letters_count_1[c] ?? 0) + 1\n    }\n  \
    \  return letters_count_0 == letters_count_1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpghov1vbr/tmpghov1vbr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af242e75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af242b6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af242b6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af242b6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghov1vbr                        0x00005620305ea513 <unavailable> + 5395

    5    libc.so.6                          0x00002af243061460 __libc_start_main +
    245

    6    tmpghov1vbr                        0x00005620305ea169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0_chars = Array(s0.characters)\n\
    \    var s1_chars = Array(s1.characters)\n    if s0_chars.count != s1_chars.count\
    \ {\n        return false\n    }\n    for c in s0_chars {\n        let index =\
    \ s1_chars.index(of: c)\n        if index == nil {\n            return false\n\
    \        }\n        s1_chars.remove(at: index!)\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa0a6mywd.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = Array(s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpa0a6mywd.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s1_chars = Array(s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpa0a6mywd.swift:22:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = s1_chars.index(of: c)\n          \
    \                   ^\n/tmp/tmpa0a6mywd.swift:22:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = s1_chars.index(of: c)\n                       \
    \      ^~~~~\n                             firstIndex\n/tmp/tmpa0a6mywd.swift:16:9:\
    \ warning: variable 's0_chars' was never mutated; consider changing to 'let' constant\n\
    \    var s0_chars = Array(s0.characters)\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var dict = [Character:\
    \ Int]()\n    for char in s0 {\n        if dict[char] == nil {\n            dict[char]\
    \ = 1\n        } else {\n            dict[char]! += 1\n        }\n    }\n    for\
    \ char in s1 {\n        if dict[char] == nil {\n            return false\n   \
    \     } else {\n            dict[char]! -= 1\n        }\n    }\n    for (_, val)\
    \ in dict {\n        if val != 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmplu4cmvx4/tmplu4cmvx4.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f601bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f5feb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f5feb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f5feb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplu4cmvx4                        0x000056015abd2713 <unavailable> + 5907

    5    libc.so.6                          0x00002b6f603ab460 __libc_start_main +
    245

    6    tmplu4cmvx4                        0x000056015abd2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0_counts = [Character:\
    \ Int]()\n    var s1_counts = [Character: Int]()\n    for s0_char in s0 {\n  \
    \      if let count = s0_counts[s0_char] {\n            s0_counts[s0_char] = count\
    \ + 1\n        } else {\n            s0_counts[s0_char] = 1\n        }\n    }\n\
    \    for s1_char in s1 {\n        if let count = s1_counts[s1_char] {\n      \
    \      s1_counts[s1_char] = count + 1\n        } else {\n            s1_counts[s1_char]\
    \ = 1\n        }\n    }\n    return s0_counts == s1_counts\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpqk0ym_0q/tmpqk0ym_0q.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10a0e6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10a0b64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10a0b64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10a0b637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0ym_0q                        0x000055f99c517513 <unavailable> + 5395

    5    libc.so.6                          0x00002b10a1059460 __libc_start_main +
    245

    6    tmpqk0ym_0q                        0x000055f99c517169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // YOUR CODE HERE\n   \
    \ var chars0 = Array(s0.characters)\n    var chars1 = Array(s1.characters)\n \
    \   chars0.sort()\n    chars1.sort()\n    if chars0 == chars1 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq23lgnf2.swift:17:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = Array(s0.characters)\n               \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpq23lgnf2.swift:18:27: error: 'characters' is unavailable: Please use String\
    \ directly\n    var chars1 = Array(s1.characters)\n                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars = [Int](repeating:\
    \ 0, count: 26)\n    let offset = \"a\".utf8.first!\n    for u in s0.utf8 {\n\
    \        chars[Int(u - offset)] += 1\n    }\n    for u in s1.utf8 {\n        chars[Int(u\
    \ - offset)] -= 1\n    }\n    for i in 0..<26 {\n        if chars[i] != 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp7gcp0bdj/tmp7gcp0bdj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f31e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f2edab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51f2eda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51f2ed97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7gcp0bdj                        0x0000561eb6d06953 <unavailable> + 6483

    5    libc.so.6                          0x00002b51f33cf460 __libc_start_main +
    245

    6    tmp7gcp0bdj                        0x0000561eb6d065a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  for char in s0 {\n    if\
    \ !s1.contains(char) {\n      return false\n    }\n  }\n  return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpqzml4fre/tmpqzml4fre.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0270f2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0270c26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0270c26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0270c257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzml4fre                        0x0000564900eae85e <unavailable> + 6238

    5    libc.so.6                          0x00002b027111b460 __libc_start_main +
    245

    6    tmpqzml4fre                        0x0000564900eae0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  var s0_c = s0.sorted()\n\
    \  var s1_c = s1.sorted()\n  return s0_c == s1_c\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpduto1_u1/tmpduto1_u1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2460a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af245d97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af245d97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af245d967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpduto1_u1                        0x000055f6833fe4d3 <unavailable> + 5331

    5    libc.so.6                          0x00002af24628c460 __libc_start_main +
    245

    6    tmpduto1_u1                        0x000055f6833fe129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n  let v0 = s0.characters.map\
    \ { String($0) }\n  let v1 = s1.characters.map { String($0) }\n  var _v0 = v0\n\
    \  var _v1 = v1\n  for c in v0 {\n    if let i = _v1.index(of: c) {\n      _v1.remove(at:\
    \ i)\n    } else {\n      return false\n    }\n  }\n  for c in v1 {\n    if let\
    \ i = _v0.index(of: c) {\n      _v0.remove(at: i)\n    } else {\n      return\
    \ false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv13r71ti.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n  let v0 = s0.characters.map { String($0) }\n         \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpv13r71ti.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n  let v1 = s1.characters.map\
    \ { String($0) }\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv13r71ti.swift:21:20: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n    if let i = _v1.index(of: c) {\n          \
    \         ^\n/tmp/tmpv13r71ti.swift:21:20: note: use 'firstIndex(of:)' instead\n\
    \    if let i = _v1.index(of: c) {\n                   ^~~~~\n               \
    \    firstIndex\n/tmp/tmpv13r71ti.swift:28:20: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n    if let i = _v0.index(of: c) {\n          \
    \         ^\n/tmp/tmpv13r71ti.swift:28:20: note: use 'firstIndex(of:)' instead\n\
    \    if let i = _v0.index(of: c) {\n                   ^~~~~\n               \
    \    firstIndex\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var ch = [Character:Int]()\n\
    \    for c in s0 {\n        if let x = ch[c] {\n            ch[c] = x + 1\n  \
    \      } else {\n            ch[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let x = ch[c] {\n            ch[c] = x - 1\n        } else {\n   \
    \         ch[c] = -1\n        }\n    }\n    for (k, v) in ch {\n        if v !=\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpqht_me3e/tmpqht_me3e.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8797d02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87979f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87979f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87979f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqht_me3e                        0x0000562577803623 <unavailable> + 5667

    5    libc.so.6                          0x00002b8797eee460 __libc_start_main +
    245

    6    tmpqht_me3e                        0x0000562577803279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    // TODO\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp5yydr6fa/tmp5yydr6fa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad397c48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad39793fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad39793f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad39793e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yydr6fa                        0x000055fc6ab07583 <unavailable> + 5507

    5    libc.so.6                          0x00002ad397e34460 __libc_start_main +
    245

    6    tmp5yydr6fa                        0x000055fc6ab06ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var chars: [Character]\
    \ = Array(s0.characters)\n    for c in s1.characters {\n        if let index =\
    \ chars.index(of: c) {\n            chars.remove(at: index)\n        }\n    }\n\
    \    return chars.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7fie5gdh.swift:16:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars: [Character] = Array(s0.characters)\n   \
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7fie5gdh.swift:17:17: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s1.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7fie5gdh.swift:18:30:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = chars.index(of: c) {\n                             ^\n/tmp/tmp7fie5gdh.swift:18:30:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = chars.index(of:\
    \ c) {\n                             ^~~~~\n                             firstIndex\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var s0 = s0\n    for char\
    \ in s1 {\n        if let range = s0.range(of: String(char)) {\n            s0.removeSubrange(range)\n\
    \        } else {\n            return false\n        }\n    }\n    return s0.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphxg9kqrr.swift:18:27: error: value of type 'String' has no member\
    \ 'range'\n        if let range = s0.range(of: String(char)) {\n             \
    \          ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    return letter_frequencies(text:\
    \ s0) == letter_frequencies(text: s1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm4zo0g5v.swift:16:12: error: cannot find 'letter_frequencies' in\
    \ scope\n    return letter_frequencies(text: s0) == letter_frequencies(text: s1)\n\
    \           ^~~~~~~~~~~~~~~~~~\n/tmp/tmpm4zo0g5v.swift:16:44: error: cannot find\
    \ 'letter_frequencies' in scope\n    return letter_frequencies(text: s0) == letter_frequencies(text:\
    \ s1)\n                                           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014158
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    )\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n\
    /// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\n\
    func same_chars(s0: String, s1: String) -> Bool {\n    var count_map = [Character:\
    \ Int]()\n    for c in s0 {\n        count_map[c] = (count_map[c] ?? 0) + 1\n\
    \    }\n    for c in s1 {\n        count_map[c] = (count_map[c] ?? 0) - 1\n  \
    \  }\n    for (_, value) in count_map {\n        if value != 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpg1404gvg/tmpg1404gvg.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08974ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac089441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac089441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0894407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg1404gvg                        0x000055691b327623 <unavailable> + 5667

    5    libc.so.6                          0x00002ac089936460 __libc_start_main +
    245

    6    tmpg1404gvg                        0x000055691b327279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014158
