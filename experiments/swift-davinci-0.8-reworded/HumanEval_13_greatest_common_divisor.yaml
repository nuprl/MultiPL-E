name: HumanEval_13_greatest_common_divisor
language: swift
prompt: "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(a:\
  \ 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a: 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a:\
  \ Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\n\
  assert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
  \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
completions: ["    if a == 0 {\n        return b\n    }\n    if b == 0 {\n       \
    \ return a\n    }\n    var a = a\n    var b = b\n    if a < b {\n        let tmp\
    \ = a\n        a = b\n        b = tmp\n    }\n    while b != 0 {\n        let\
    \ tmp = b\n        b = a % b\n        a = tmp\n    }\n    return a", '    return
    (a % b == 0) ? b : greatest_common_divisor(a: b, b: a % b)', '    return b ==
    0 ? a : greatest_common_divisor(a: b, b: a % b)', '    return gcd(a, b)', '    return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    if b == 0 {\n    \
    \    return a\n    } else {\n        return greatest_common_divisor(a: b, b: a\
    \ % b)\n    }", '    return b == 0 ? a : greatest_common_divisor(a: b, b: a %
    b)', "    var c = a\n    var d = b\n    while c != d {\n        if c > d {\n \
    \           c -= d\n        } else {\n            d -= c\n        }\n    }\n \
    \   return c", "    if a % b == 0 {\n        return b\n    } else {\n        return\
    \ greatest_common_divisor(a: b, b: a % b)\n    }", '    return a % b == 0 ? b
    : greatest_common_divisor(a: b, b: a % b)', "    let r = a % b\n    if r != 0\
    \ {\n        return greatest_common_divisor(a: b, b: r)\n    } else {\n      \
    \  return b\n    }", "    var min = a < b ? a : b\n    var gcd = 1\n    while\
    \ (min > 0) {\n        if (a % min == 0 && b % min == 0) {\n            gcd =\
    \ min\n            break\n        }\n        min -= 1\n    }\n    return gcd",
  "    if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    if b == 0 {\n        return a\n    } else {\n   \
    \     return greatest_common_divisor(a: b, b: a % b)\n    }", "    guard a > 0\
    \ && b > 0 else {\n        return 0\n    }\n    let num = a > b ? a : b\n    let\
    \ den = a > b ? b : a\n    var r = num % den\n    while r != 0 {\n        r =\
    \ num % den\n        num = den\n        den = r\n    }\n    return num", '    return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    if a == 0 {\n    \
    \    return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a == b\
    \ {\n        return a\n    }\n    if a == 1 || b == 1 {\n        return 1\n  \
    \  }\n    if a > b {\n        return greatest_common_divisor(a: a-b, b: b)\n \
    \   }\n    return greatest_common_divisor(a: a, b: b-a)", '    return a % b ==
    0 ? b : greatest_common_divisor(a: b, b: a % b)', "    var (a, b) = (a, b)\n \
    \   if a < b {\n        swap(&a, &b)\n    }\n    while a != 0 {\n        (a, b)\
    \ = (b % a, a)\n    }\n    return b", "    if b == 0 {\n        return a\n   \
    \ } else {\n        return greatest_common_divisor(a: b, b: a % b)\n    }", " \
    \   var a = a\n    var b = b\n    while (b != 0) {\n        (a, b) = (b, a % b)\n\
    \    }\n    return a", '    return greatest_common_divisor(b, a % b)', "    if\
    \ a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(a: b % a, b: a)", "    if b == 0 {\n        return a\n\
    \    } else {\n        return greatest_common_divisor(a: b, b: a % b)\n    }",
  '  return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    var _a = a,\
    \ _b = b\n    while _b != 0 {\n        let c = _a % _b\n        _a = _b\n    \
    \    _b = c\n    }\n    return _a", "    // your solution here\n    if b == 0\
    \ {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", '    return gcd(a, b)', '    return a == 0 ? b : greatest_common_divisor(a:
    b % a, b: a)', "    let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }", "    // write your code here\n\
    \    var _a = a\n    var _b = b\n    while _a != _b {\n        if _a > _b {\n\
    \            _a -= _b\n        } else {\n            _b -= _a\n        }\n   \
    \ }\n    return _a", '    return b == 0 ? a : greatest_common_divisor(a: b, b:
    a % b)', "    if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    var divisor = 1\n    let bigger = a > b ? a : b\n\
    \    let smaller = a > b ? b : a\n    for i in 1...smaller {\n        if (bigger\
    \ % i == 0) && (smaller % i == 0) {\n            divisor = i\n        }\n    }\n\
    \    return divisor", "    if a % b == 0 {\n        return b\n    } else {\n \
    \       return greatest_common_divisor(a: b, b: a % b)\n    }", "    if b == 0\
    \ {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "\tvar remainder = 0\n\tvar quotient = 0\n\tvar a = a\n\
    \tvar b = b\n\t\n\twhile a != 0 {\n\t\tremainder = b % a\n\t\tquotient = b / a\n\
    \t\t\n\t\tif remainder == 0 {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\tb = a\n\t\ta = remainder\n\
    \t}\n\t\n\treturn a", "    var numerator = max(a, b)\n    var denominator = min(a,\
    \ b)\n    var remainder = numerator % denominator\n    while remainder != 0 {\n\
    \        numerator = denominator\n        denominator = remainder\n        remainder\
    \ = numerator % denominator\n    }\n    return denominator", "    if a % b ==\
    \ 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    if b == 0 {\n        return a\n    } else {\n   \
    \     return greatest_common_divisor(a: b, b: a % b)\n    }", "    var b = b\n\
    \    var a = a\n    while b != 0 {\n        let r = a % b\n        a = b\n   \
    \     b = r\n    }\n    return a", '    return b == 0 ? a : greatest_common_divisor(a:
    b, b: a % b)', "    assert(a > 0 && b > 0, \"arguments must be positive integer\"\
    )\n    guard a != b else { return a }\n    guard a > b else { return greatest_common_divisor(a:\
    \ b, b: a) }\n    return greatest_common_divisor(a: a - b, b: b)", '    return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    guard a != 0 else\
    \ { return b }\n    guard b != 0 else { return a }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)", "\tlet (a, b) = normalize(a: a, b: b)\n\tlet r = a % b\n\tif\
    \ r == 0 {\n\t\treturn b\n\t} else {\n\t\treturn greatest_common_divisor(a: b,\
    \ b: r)\n\t}", "    guard a != 0 && b != 0 else {\n        return 1\n    }\n \
    \   let max = max_element(a, b)\n    let min = min_element(a, b)\n    let mod\
    \ = max % min\n    guard mod != 0 else {\n        return min\n    }\n    return\
    \ greatest_common_divisor(a: min, b: mod)", "    let (a, b) = abs(a) >= abs(b)\
    \ ? (abs(a), abs(b)) : (abs(b), abs(a))\n    return b == 0 ? a : greatest_common_divisor(a:\
    \ b, b: a % b)", "    let (min_number, max_number) = min(a, b) < max(a, b) ? (min(a,\
    \ b), max(a, b)) : (max(a, b), min(a, b))\n    let remainder = max_number % min_number\n\
    \    if remainder != 0 {\n        return greatest_common_divisor(a: min_number,\
    \ b: remainder)\n    } else {\n        return min_number\n    }", "    if b ==\
    \ 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(a: b % a, b: a)", "    var a = a\n    var b = b\n  \
    \  while b != 0 {\n        let r = a % b\n        a = b\n        b = r\n    }\n\
    \    return a", "    if b == 0 {\n        return a\n    } else {\n        return\
    \ greatest_common_divisor(a: b, b: a % b)\n    }", "\tlet a = abs(a)\n\tlet b\
    \ = abs(b)\n\t\n\tif b == 0 {\n\t\treturn a\n\t}\n\t\n\tif a == 0 {\n\t\treturn\
    \ b\n\t}\n\t\n\tvar a = a\n\tvar b = b\n\t\n\twhile b != 0 {\n\t\tlet tmp = b\n\
    \t\tb = a % b\n\t\ta = tmp\n\t}\n\t\n\treturn a", "    var m = a, n = b\n    if\
    \ m < n { swap(&m, &n) }\n    while m % n != 0 {\n        (m, n) = (n, m % n)\n\
    \    }\n    return n", "  var a = a\n  var b = b\n  if a < b {\n    swap(&a, &b)\n\
    \  }\n  while b != 0 {\n    let c = a % b\n    a = b\n    b = c\n  }\n  return\
    \ a", '  return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "  if a\
    \ < b {\n    return greatest_common_divisor(a: b, b: a)\n  }\n  let r = a % b\n\
    \  if r == 0 {\n    return b\n  }\n  return greatest_common_divisor(a: b, b: r)",
  "  var a = a\n  var b = b\n  while b != 0 {\n    let remainder = a % b\n    a =\
    \ b\n    b = remainder\n  }\n  return a", "  let (a, b) = (abs(a), abs(b))\n \
    \ var ans = 0\n  if a == 0 {\n    ans = b\n  } else if b == 0 {\n    ans = a\n\
    \  } else {\n    while b != 0 {\n      let r = a % b\n      a = b\n      b = r\n\
    \    }\n    ans = a\n  }\n  return ans", '    return b == 0 ? a : greatest_common_divisor(a:
    b, b: a % b)', "    let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }", "    let m = a, n = b\n  \
    \  var rem = m % n\n    while rem != 0 {\n        m = n\n        n = rem\n   \
    \     rem = m % n\n    }\n    return n", "    let r = a % b\n    return r == 0\
    \ ? b : greatest_common_divisor(a: b, b: r)", "  var a = a\n  var b = b\n  while\
    \ a != 0 && b != 0 {\n    if a > b {\n      a %= b\n    } else {\n      b %= a\n\
    \    }\n  }\n  return a + b", "    let _a = max(a, b)\n    let _b = min(a, b)\n\
    \    if _b == 0 {\n        return _a\n    }\n    return greatest_common_divisor(a:\
    \ _b, b: _a % _b)", "\treturn b == 0 ? a : greatest_common_divisor(a: b, b: a\
    \ % b)", "    if a < b {\n        return greatest_common_divisor(a: b, b: a)\n\
    \    }\n    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)", "    var a = a\n    var b = b\n    while (a != 0) && (b != 0)\
    \ {\n        if a > b {\n            a %= b\n        } else {\n            b %=\
    \ a\n        }\n    }\n    return a + b", "    let temp = a % b\n    if temp ==\
    \ 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: temp)\n    }", "    if b == 0 {\n        return a\n    } else {\n    \
    \    return greatest_common_divisor(a: b, b: a % b)\n    }", "    let (x, y) =\
    \ (max(a, b), min(a, b))\n    let r = x % y\n    if r == 0 {\n        return y\n\
    \    } else {\n        return greatest_common_divisor(a: y, b: r)\n    }", '    return
    0', "    if a == 0 || b == 0 {\n        return a == 0 ? b : a\n    } else {\n\
    \        return greatest_common_divisor(a: b, b: a % b)\n    }", "    if a < b\
    \ {\n        return greatest_common_divisor(a: b, b: a)\n    }\n    if b == 0\
    \ {\n        return a\n    }\n    return greatest_common_divisor(a: b, b: a %\
    \ b)", "    var d = a, e = b\n    while e != 0 {\n        (d, e) = (e, d % e)\n\
    \    }\n    return d", "    if b == 0 {\n        return a\n    } else {\n    \
    \    return greatest_common_divisor(a: b, b: a % b)\n    }", "    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(a: b,\
    \ b: a % b)\n    }", "    let r = a % b\n    return r == 0 ? b : greatest_common_divisor(a:\
    \ b, b: r)", "    var a_number = a\n    var b_number = b\n    while b_number !=\
    \ 0 {\n        let r = a_number % b_number\n        a_number = b_number\n    \
    \    b_number = r\n    }\n    return a_number", "    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a: a % b, b: b)\n    } else {\n        return\
    \ greatest_common_divisor(a: a, b: b % a)\n    }", "    if a < b {\n        return\
    \ greatest_common_divisor(a: b, b: a)\n    }\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(a: b, b: a % b)", '    return a
    == 0 ? b : greatest_common_divisor(a: b % a, b: a)', "\tvar x = a;\n\tvar y =\
    \ b;\n\twhile y != 0 {\n\t\tlet r = x % y;\n\t\tx = y;\n\t\ty = r;\n\t}\n\treturn\
    \ x;", "    if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    var n = 0, m = 0\n    if a > b {\n        n = a\n\
    \        m = b\n    } else {\n        n = b\n        m = a\n    }\n    while m\
    \ != 0 {\n        let n_m = n % m\n        n = m\n        m = n_m\n    }\n   \
    \ return n", "    let t = max(a, b)\n    let s = min(a, b)\n    let r = t % s\n\
    \    return r == 0 ? s : greatest_common_divisor(a: s, b: r)", "    if b == 0\
    \ {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", '    return gcd(a, b)', "    var bigger = 0\n    var smaller\
    \ = 0\n    if a < b {\n        bigger = b\n        smaller = a\n    } else {\n\
    \        bigger = a\n        smaller = b\n    }\n    var remainder = bigger %\
    \ smaller\n    while remainder != 0 {\n        bigger = smaller\n        smaller\
    \ = remainder\n        remainder = bigger % smaller\n    }\n    return smaller",
  "    if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", '    return b == 0 ? a : greatest_common_divisor(a: b,
    b: a % b)', "    var u = a, v = b\n    var r = 0\n    while v != 0 {\n       \
    \ r = u % v\n        u = v\n        v = r\n    }\n    return u", "    var a =\
    \ a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n       \
    \     a %= b\n        } else {\n            b %= a\n        }\n    }\n    return\
    \ a + b", "    var mutA = a\n    var mutB = b\n    while mutB != 0 {\n       \
    \ let tmp = mutB\n        mutB = mutA % mutB\n        mutA = tmp\n    }\n    return\
    \ mutA", '    return 0', "    var x = a\n    var y = b\n    while x != y {\n \
    \       if x > y {\n            x -= y\n        } else {\n            y -= x\n\
    \        }\n    }\n    return x", "    if a < b {\n        return greatest_common_divisor(a:\
    \ b, b: a)\n    }\n    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)", "    if a == 0 || b == 0 {\n        return max(a, b)\n    }\n\
    \    return greatest_common_divisor(a: min(a, b), b: max(a, b) % min(a, b))",
  "    var a = a\n    var b = b\n    while a % b != 0 {\n        a, b = b, a % b\n\
    \    }\n    return b", "    if b == 0 {\n        return a\n    } else {\n    \
    \    return greatest_common_divisor(a: b, b: a % b)\n    }", "    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(a: b,\
    \ b: a % b)\n    }", "    if b == 0 {\n        return a\n    } else {\n      \
    \  return greatest_common_divisor(a: b, b: a % b)\n    }", "    var a = a\n  \
    \  var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n            a\
    \ %= b\n        } else {\n            b %= a\n        }\n    }\n    return a +\
    \ b", "  var a = a\n  var b = b\n  var r = a % b\n  while r != 0 {\n    a = b\n\
    \    b = r\n    r = a % b\n  }\n  return b", "    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(a: b, b: a % b)\n  \
    \  }", "    var new_a = a\n    var new_b = b\n    while new_b != 0 {\n       \
    \ let temp = new_b\n        new_b = new_a % new_b\n        new_a = temp\n    }\n\
    \    return new_a", "    // write your code here\n    var (r1, r2) = (a, b)\n\
    \    while r2 != 0 {\n        (r1, r2) = (r2, r1 % r2)\n    }\n    return r1",
  '    return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    let temp\
    \ = a % b\n    if temp == 0 {\n        return b\n    } else {\n        return\
    \ greatest_common_divisor(a: b, b: temp)\n    }", "    var a = a\n    var b =\
    \ b\n    while b != 0 {\n        (a, b) = (b, a % b)\n    }\n    return a", '    return
    a == 0 ? b : greatest_common_divisor(a: b % a, b: a)', "    let c = abs(a - b)\n\
    \    let remainder = abs(a % b)\n    return (remainder == 0) ? b : greatest_common_divisor(a:\
    \ b, b: remainder)", "    var a = a\n    var b = b\n    while b != 0 {\n     \
    \   let remainder = a % b\n        a = b\n        b = remainder\n    }\n    return\
    \ a", "    if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    if b == 0 {\n        return a\n    } else {\n   \
    \     return greatest_common_divisor(a: b, b: a % b)\n    }", "    var max = a\n\
    \    var min = b\n    if a < b {\n        max = b\n        min = a\n    }\n  \
    \  if max % min == 0 {\n        return min\n    }\n    return greatest_common_divisor(a:\
    \ min, b: max % min)", "    var (x, y) = (a, b)\n    while y != 0 {\n        (x,\
    \ y) = (y, x % y)\n    }\n    return x", "    if a == 0 {\n        return b\n\
    \    }\n    return greatest_common_divisor(a: b % a, b: a)", "    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(a: b,\
    \ b: a % b)\n    }", '    return b == 0 ? a : greatest_common_divisor(a: b, b:
    a % b)', "    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return\
    \ a\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a: a - b, b: b)\n    }\n    if a < b {\n    \
    \    return greatest_common_divisor(a: a, b: b - a)\n    }\n    return 0", '  return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    var large = a\n  \
    \  var small = b\n    if large < small {\n        (large, small) = (small, large)\n\
    \    }\n    if small == 0 {\n        return large\n    }\n    return greatest_common_divisor(a:\
    \ small, b: large % small)", "    if b == 0 {\n        return a\n    } else {\n\
    \        return greatest_common_divisor(a: b, b: a % b)\n    }", "    if b ==\
    \ 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "\tif b == 0 {\n\t\treturn a\n\t} else {\n\t\treturn greatest_common_divisor(a:\
    \ b, b: a % b)\n\t}", "    var a = a\n    var b = b\n    while b != 0 {\n    \
    \    (a, b) = (b, a % b)\n    }\n    return a", "    var (x, y) = (a, b)\n   \
    \ while y != 0 {\n        (x, y) = (y, x % y)\n    }\n    return x", "    if b\
    \ == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    let k = min(a, b)\n    for i in stride(from: k, to:\
    \ 0, by: -1) {\n        if a % i == 0 && b % i == 0 {\n            return i\n\
    \        }\n    }\n    return 1", "    if b == 0 {\n        return a\n    } else\
    \ {\n        return greatest_common_divisor(a: b, b: a % b)\n    }", "    // TODO:\
    \ Implement greatest_common_divisor\n    return 0", "    if a % b == 0 {\n   \
    \     return b\n    } else {\n        return greatest_common_divisor(a: b, b:\
    \ a % b)\n    }", "    var a = a\n    var b = b\n    while a != 0 && b != 0 {\n\
    \        if a > b {\n            a %= b\n        } else {\n            b %= a\n\
    \        }\n    }\n    return a + b", "    if b == 0 {\n        return a\n   \
    \ } else {\n        return greatest_common_divisor(a: b, b: a % b)\n    }", '    return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', '    return b == 0 ? a
    : greatest_common_divisor(a: b, b: a % b)', "    // TODO: Write some code to calculate\
    \ the greatest common divisor of two numbers\n    var A: Int = a\n    var B: Int\
    \ = b\n    while (A != B) {\n        if (A > B) {\n            A = A - B\n   \
    \     } else {\n            B = B - A\n        }\n    }\n    return A", "    var\
    \ r = a % b\n    while r != 0 {\n        a = b\n        b = r\n        r = a %\
    \ b\n    }\n    return b", '    return __gcd(a, b)', '    return b == 0 ? a :
    greatest_common_divisor(a: b, b: a % b)', "    // TODO: Implement GCD\n\n    return\
    \ 0", "    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return\
    \ a\n    }\n    var a = a\n    var b = b\n    if a < b {\n        swap(&a, &b)\n\
    \    }\n    while b != 0 {\n        let c = a % b\n        a = b\n        b =\
    \ c\n    }\n    return a", "    if a == 0 || b == 0 {\n        return 0\n    }\
    \ else if a % b == 0 {\n        return b\n    } else if b % a == 0 {\n       \
    \ return a\n    } else if a > b {\n        return greatest_common_divisor(a: a\
    \ % b, b: b)\n    } else {\n        return greatest_common_divisor(a: a, b: b\
    \ % a)\n    }", "    var (t1, t2) = (a, b)\n    while t2 != 0 {\n        (t1,\
    \ t2) = (t2, t1 % t2)\n    }\n    return t1", '    return greatest_common_divisor(a:
    max(a, b), b: min(a, b))', "    if a % b == 0 {\n        return b\n    } else\
    \ {\n        return greatest_common_divisor(a: b, b: a % b)\n    }", "    if a\
    \ == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n\
    \    return greatest_common_divisor(a: b, b: a % b)", '    return gcd(a, b)',
  '  return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "  guard a > 0\
    \ && b > 0 else { return 1 }\n  var a = a\n  var b = b\n  if a < b {\n    swap(&a,\
    \ &b)\n  }\n  while b != 0 {\n    let r = a % b\n    a = b\n    b = r\n  }\n \
    \ return a", "    var a = a\n    var b = b\n    while b != 0 {\n        let remainder\
    \ = a % b\n        a = b\n        b = remainder\n    }\n    return a", "    var\
    \ a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b = a %\
    \ b\n        a = t\n    }\n    return a", '    return a != 0 ? greatest_common_divisor(b
    % a, b: a) : b', '    return b == 0 ? a : greatest_common_divisor(a: b, b: a %
    b)', "    var x = a\n    var y = b\n    while x != y {\n        if x > y {\n \
    \           x -= y\n        } else {\n            y -= x\n        }\n    }\n \
    \   return x", '    return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)',
  "    var (a, b) = (a, b)\n    while b != 0 {\n        (a, b) = (b, a % b)\n    }\n\
    \    return a", '    return b == 0 ? a : greatest_common_divisor(a: b, b: a %
    b)', "    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return\
    \ a\n    }\n    var c = a\n    var d = b\n    while c != d {\n        if c > d\
    \ {\n            c -= d\n        } else {\n            d -= c\n        }\n   \
    \ }\n    return c", "\tif a == 0 {\n\t\treturn b\n\t} else if b == 0 {\n\t\treturn\
    \ a\n\t} else {\n\t\treturn greatest_common_divisor(a: b, b: a % b)\n\t}", " \
    \   let gcd_rec = gcd_iter(a: a, b: b)\n    return gcd_rec", "\tif b == 0 {\n\t\
    \treturn a\n\t} else {\n\t\treturn greatest_common_divisor(a: b, b: a % b)\n\t\
    }", "    var aa = a\n    var bb = b\n    while bb != 0 {\n        let rem = aa\
    \ % bb\n        aa = bb\n        bb = rem\n    }\n    return aa", "    if b ==\
    \ 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    assert(a > 0 && b > 0, \"a, b must be greater than\
    \ 0\")\n    if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }", "    if a < b {\n        return greatest_common_divisor(a:\
    \ b, b: a)\n    }\n    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)", "    var a = a\n    var b = b\n    while (a != 0) && (b != 0)\
    \ {\n        if a > b {\n            a %= b\n        } else {\n            b %=\
    \ a\n        }\n    }\n    return a + b", "  if a % b == 0 {\n    return b\n \
    \ } else {\n    return greatest_common_divisor(a: b, b: a % b)\n  }", '  return
    a % b == 0 ? b : greatest_common_divisor(a: b, b: a % b)', "    var number1 =\
    \ a\n    var number2 = b\n    while number1 != number2 {\n        if number1 >\
    \ number2 {\n            number1 -= number2\n        } else {\n            number2\
    \ -= number1\n        }\n    }\n    return number1", "    guard a != 0 else {\
    \ return b }\n    guard b != 0 else { return a }\n    if (a > b) {\n        return\
    \ greatest_common_divisor(a: a % b, b: b)\n    } else {\n        return greatest_common_divisor(a:\
    \ a, b: b % a)\n    }", "    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(a: b % a, b: a)", "    var a = a\n    var b = b\n  \
    \  while a != 0 && b != 0 {\n        if a > b {\n            a %= b\n        }\
    \ else {\n            b %= a\n        }\n    }\n    return a == 0 ? b : a", '    return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "    if b == 0 {\n    \
    \    return a\n    } else {\n        return greatest_common_divisor(a: b, b: a\
    \ % b)\n    }", "    if b == 0 {\n        return a\n    } else {\n        return\
    \ greatest_common_divisor(a: b, b: a % b)\n    }", "    var max = a\n    var min\
    \ = b\n    if a < b {\n        max = b\n        min = a\n    }\n    var gcd =\
    \ 1\n    for var i = min; i > 0; i-- {\n        if (max % i == 0) && (min % i\
    \ == 0) {\n            gcd = i\n            break\n        }\n    }\n    return\
    \ gcd", "    let r = a % b\n    return r == 0 ? b : greatest_common_divisor(a:\
    \ b, b: r)", "    var max = a\n    var min = b\n    if (a < b) {\n        max\
    \ = b\n        min = a\n    }\n    while (max % min != 0) {\n        let rem =\
    \ max % min\n        max = min\n        min = rem\n    }\n    return min", " \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b", "    var a = a\n    var b = b\n    while b != 0 {\n      \
    \  let temp = b\n        b = a % b\n        a = temp\n    }\n    return a", '    return
    b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', '    return b == 0 ? a
    : greatest_common_divisor(a: b, b: a % b)', "    var (x, y) = (a, b)\n    while\
    \ y != 0 {\n        let r = x % y\n        x = y\n        y = r\n    }\n    return\
    \ x", "    guard a != 0 else { return b }\n    guard b != 0 else { return a }\n\
    \    if a > b {\n        return greatest_common_divisor(a: a % b, b: b)\n    }\
    \ else {\n        return greatest_common_divisor(a: a, b: b % a)\n    }", '    return
    gcd(x: a, y: b)', '    return b == 0 ? a : greatest_common_divisor(a: b, b: a
    % b)', '    return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)', "  \
    \  // Return the common divisor\n    return a", "    var num1 = a\n    var num2\
    \ = b\n    while num1 != num2 {\n        if num1 > num2 {\n            num1 -=\
    \ num2\n        } else {\n            num2 -= num1\n        }\n    }\n    return\
    \ num1", "    let common_divisors = common_divisors_of(a: a, b: b)\n    return\
    \ common_divisors[common_divisors.count - 1]", '    return gcd(a, b)', "    let\
    \ (mod, div) = a.quotientAndRemainder(dividingBy: b)\n    if mod == 0 {\n    \
    \    return b\n    } else {\n        return greatest_common_divisor(a: b, b: mod)\n\
    \    }", "    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return\
    \ a\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a: a - b, b: b)\n    }\n    if a < b {\n    \
    \    return greatest_common_divisor(a: a, b: b - a)\n    }\n    return 0", " \
    \   if a == 0 || b == 0 {\n        return a + b\n    } else {\n        return\
    \ greatest_common_divisor(a: b, b: a % b)\n    }", "    var a = a\n    var b =\
    \ b\n    if a < b {\n        (a, b) = (b, a)\n    }\n    while b != 0 {\n    \
    \    let r = a % b\n        a = b\n        b = r\n    }\n    return a", "    if\
    \ a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n\
    \    return greatest_common_divisor(a: b, b: a % b)"]
stop_tokens:
- "\n}"
