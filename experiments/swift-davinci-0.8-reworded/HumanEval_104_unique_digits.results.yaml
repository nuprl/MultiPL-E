language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\treturn x.filter {\
    \ (num) -> Bool in\n\t\tvar ret = true\n\t\tvar tmp = num\n\t\twhile tmp > 0 {\n\
    \t\t\tlet digit = tmp % 10\n\t\t\tif digit % 2 == 0 {\n\t\t\t\tret = false\n\t\
    \t\t\tbreak\n\t\t\t}\n\t\t\ttmp /= 10\n\t\t}\n\t\treturn ret\n\t}\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpf_9vqfl0/tmpf_9vqfl0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b997efd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b997ecceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b997ecce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b997eccd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_9vqfl0                        0x0000561f6ebf652c <unavailable> + 5420

    5    libc.so.6                          0x00002b997f1c3460 __libc_start_main +
    245

    6    tmpf_9vqfl0                        0x0000561f6ebf6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if num.description.filter({ $0.isNumber }).allSatisfy({\
    \ Int(String($0))! % 2 != 0 }) {\n            result.append(num)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tvar res: [Int] = []\n\
    \tfor i in x {\n\t\tvar num = i\n\t\tvar hasEven = false\n\t\twhile num > 0 {\n\
    \t\t\tif num % 10 % 2 == 0 {\n\t\t\t\thasEven = true\n\t\t\t\tbreak\n\t\t\t}\n\
    \t\t\tnum /= 10\n\t\t}\n\t\tif !hasEven {\n\t\t\tres.append(i)\n\t\t}\n\t}\n\t\
    return res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var digits = [Int]()\n\
    \    for digit in x {\n        if no_even_digit(x: digit) {\n            digits.append(digit)\n\
    \        }\n    }\n    return digits.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwskz0b8c.swift:13:12: error: cannot find 'no_even_digit' in scope\n\
    \        if no_even_digit(x: digit) {\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\treturn x.filter {\
    \ number in\n\t\tlet string = String(number)\n\t\treturn !string.contains {\n\t\
    \t\tswitch $0 {\n\t\t\tcase \"0\", \"2\", \"4\", \"6\", \"8\":\n\t\t\t\treturn\
    \ true\n\t\t\tdefault:\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpoxf517w3/tmpoxf517w3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32d5002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32d4cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32d4cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32d4cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxf517w3                        0x000055f56f76372c <unavailable> + 5932

    5    libc.so.6                          0x00002b32d51ee460 __libc_start_main +
    245

    6    tmpoxf517w3                        0x000055f56f763329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let even_numbers:\
    \ [Int] = [0, 2, 4, 6, 8]\n    var y: [Int] = [Int]()\n    for num in x {\n  \
    \      var even_count: Int = 0\n        for digit in String(num) {\n         \
    \   if even_numbers.contains(Int(String(digit))!) {\n                even_count\
    \ += 1\n            }\n        }\n        if even_count == 0 {\n            y.append(num)\n\
    \        }\n    }\n    return y.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res = [Int]()\n\
    \    for i in x {\n        if i.digits().filter({ $0 % 2 == 0 }).count == 0 {\n\
    \            res.append(i)\n        }\n    }\n    return res.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp42e_38es.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits().filter({ $0 % 2 == 0 }).count == 0 {\n     \
    \      ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var newArray: [Int]\
    \ = []\n    for num in x {\n        let isDigit = String(num).filter { $0.isEven\
    \ }\n        if isDigit.isEmpty {\n            newArray.append(num)\n        }\n\
    \    }\n    return newArray.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1doi3iv8.swift:13:47: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        let isDigit = String(num).filter\
    \ { $0.isEven }\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\t\n\tlet xSet = Set(x)\n\
    \tvar result = [Int]()\n\t\n\tfor index in xSet {\n\t\tvar hasEven = false\n\t\
    \t\n\t\tfor digit in String(index) {\n\t\t\tif Int(String(digit))! % 2 == 0 {\n\
    \t\t\t\thasEven = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t\n\t\tif !hasEven {\n\
    \t\t\tresult.append(index)\n\t\t}\n\t}\n\t\n\treturn result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{$0.description.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"02468\")) == nil}.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwxe3i3gr.swift:11:59: error: cannot find 'CharacterSet' in scope\n\
    \    return x.filter{$0.description.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"02468\")) == nil}.sorted()\n                                             \
    \             ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var array = [Int]()\n\
    \    var digits = [Int]()\n    var i = 0\n    while i < x.count {\n        if\
    \ x[i] < 10 {\n            array.append(x[i])\n        } else {\n            var\
    \ number = x[i]\n            while number > 0 {\n                digits.append(number\
    \ % 10)\n                number /= 10\n            }\n            if !digits.contains(where:\
    \ { $0 % 2 == 0 }) {\n                array.append(x[i])\n            }\n    \
    \        digits.removeAll()\n        }\n        i += 1\n    }\n    array.sort()\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let sortedArray\
    \ = x.sorted()\n    var newArray: [Int] = []\n    for number in sortedArray {\n\
    \        var checkNumber = number\n        while checkNumber > 0 {\n         \
    \   let digit = checkNumber % 10\n            if digit % 2 == 0 {\n          \
    \      break\n            }\n            checkNumber /= 10\n            if checkNumber\
    \ == 0 {\n                newArray.append(number)\n            }\n        }\n\
    \    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { num in\n        var hasEven = false\n        var n = num\n        while n\
    \ > 0 {\n            let d = n % 10\n            if d % 2 == 0 {\n           \
    \     hasEven = true\n                break\n            }\n            n /= 10\n\
    \        }\n        return !hasEven\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpa0n63ir2/tmpa0n63ir2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260a283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2609f7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2609f7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2609f797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa0n63ir2                        0x0000563995d5c52c <unavailable> + 5420

    5    libc.so.6                          0x00002b260a46f460 __libc_start_main +
    245

    6    tmpa0n63ir2                        0x0000563995d5c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if !even_digits(x: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgbd0f6y7.swift:13:13: error: cannot find 'even_digits' in scope\n\
    \        if !even_digits(x: num) {\n            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  /// TODO: Write your\
    \ code here\n  return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6aok76yh/tmp6aok76yh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac66c517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac66c20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac66c20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac66c20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6aok76yh                        0x00005643a5f0842c <unavailable> + 5164

    5    libc.so.6                          0x00002ac66c703460 __libc_start_main +
    245

    6    tmp6aok76yh                        0x00005643a5f08029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { digit in\n        digit.description.filter { $0.isEven }.isEmpty\n    }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpcgrvru_f.swift:12:39: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        digit.description.filter { $0.isEven\
    \ }.isEmpty\n                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var containsEven = false\n        let string\
    \ = String(i)\n        for a in string {\n            if Int(String(a))! % 2 ==\
    \ 0 {\n                containsEven = true\n            }\n        }\n       \
    \ if !containsEven {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9y4tgeyn/tmp9y4tgeyn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6284186c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6283e7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6283e7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6283e7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9y4tgeyn                        0x000055fd1f0018ac <unavailable> + 6316

    5    libc.so.6                          0x00002b6284372460 __libc_start_main +
    245

    6    tmp9y4tgeyn                        0x000055fd1f0014a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x{\n        var h = 0\n        for j in i.description{\n       \
    \     if j == \"2\" || j == \"4\" || j == \"6\" || j == \"8\"{\n             \
    \   h = 1\n            }\n        }\n        if h == 0{\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpy7dtgi4c/tmpy7dtgi4c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b915b8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b915b59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b915b59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b915b59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7dtgi4c                        0x000055668395582c <unavailable> + 6188

    5    libc.so.6                          0x00002b915ba92460 __libc_start_main +
    245

    6    tmpy7dtgi4c                        0x0000556683955429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let x_set = Set(x)\n\
    \    var result: [Int] = []\n    for i in x_set {\n        if digit_has_no_even_number(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv1i_os2r.swift:14:12: error: cannot find 'digit_has_no_even_number'\
    \ in scope\n        if digit_has_no_even_number(x: i) {\n           ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { Int(String($0).filter { !$0.isMultiple(of: 2) } ) == $0 }.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2a3msnet.swift:11:51: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isMultiple'\n    return x.filter { Int(String($0).filter\
    \ { !$0.isMultiple(of: 2) } ) == $0 }.sorted()\n                             \
    \                  ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0.hasUniqueDigits() }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpib5yoiag.swift:11:25: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter{ $0.hasUniqueDigits() }.sorted()\n  \
    \                   ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueArr =\
    \ [Int]()\n    for num in x {\n        if Int(String(num).filter { (char) -> Bool\
    \ in return char.wholeNumberValue! % 2 != 0}) != nil {\n            uniqueArr.append(num)\n\
    \        }\n    }\n    return uniqueArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptffqrcwk/tmptffqrcwk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60a2f34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60a2c2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60a2c2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60a2c2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptffqrcwk                        0x000055e0d0da092c <unavailable> + 6444

    5    libc.so.6                          0x00002b60a3120460 __libc_start_main +
    245

    6    tmptffqrcwk                        0x000055e0d0da0529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let even_digit_set\
    \ = Set(\"02468\".map { $0 })\n    return x.filter { (n) -> Bool in\n        let\
    \ n_str = String(n)\n        let is_unique = n_str.allSatisfy { (char) -> Bool\
    \ in\n            !even_digit_set.contains(char)\n        }\n        return is_unique\n\
    \    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique = [Int]()\n\
    \    x.forEach { number in\n        if !number.hasAnyEvenDigit() {\n         \
    \   unique.append(number)\n        }\n    }\n    return unique.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp58f45hws.swift:13:20: error: value of type 'Int' has no member\
    \ 'hasAnyEvenDigit'\n        if !number.hasAnyEvenDigit() {\n            ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr : [Int]\
    \ = []\n    for i in x {\n        if i.description.filter({$0 % 2 != 0}).count\
    \ == i.description.count {\n            arr.append(i)\n        }\n    }\n    return\
    \ arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpm90slhe7.swift:13:34: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if i.description.filter({$0\
    \ % 2 != 0}).count == i.description.count {\n                                \
    \ ^\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let uniques = x.filter\
    \ { $0.containsNoEvenDigits }\n    return uniques.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprhnqh9xf.swift:11:33: error: value of type 'Int' has no member\
    \ 'containsNoEvenDigits'\n    let uniques = x.filter { $0.containsNoEvenDigits\
    \ }\n                             ~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  var result = [Int]()\n\
    \  for item in x {\n    var count = 0\n    for ch in String(item) {\n      if\
    \ ch.wholeNumberValue! % 2 == 0 {\n        count += 1\n      }\n    }\n    if\
    \ count == 0 {\n      result.append(item)\n    }\n  }\n  return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique_digits_arr\
    \ = [Int]()\n    for i in x {\n        if String(i).characters.filter({$0 % 2\
    \ == 0}).count == 0 {\n            unique_digits_arr.append(i)\n        }\n  \
    \  }\n    return unique_digits_arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1oy_0s6_.swift:13:41: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if String(i).characters.filter({$0\
    \ % 2 == 0}).count == 0 {\n                                        ^\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var odd_digits =\
    \ [Int]()\n    for number in x {\n        var temp = number\n        var even\
    \ = false\n        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n   \
    \             even = true\n                break\n            }\n            temp\
    \ /= 10\n        }\n        if !even {\n            odd_digits.append(number)\n\
    \        }\n    }\n    return odd_digits.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.has_all_odd_digits() }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk74w7ho2.swift:11:26: error: value of type 'Int' has no member\
    \ 'has_all_odd_digits'\n    return x.filter { $0.has_all_odd_digits() }.sorted()\n\
    \                      ~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  // TODO\n  return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpeodwqxv2/tmpeodwqxv2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae14a069c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae149d60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae149d60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae149d5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeodwqxv2                        0x0000557cad97c3cc <unavailable> + 5068

    5    libc.so.6                          0x00002ae14a255460 __libc_start_main +
    245

    6    tmpeodwqxv2                        0x0000557cad97bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digitCount % 2 == 1 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpx44tp09l.swift:11:26: error: value of type 'Int' has no member\
    \ 'digitCount'\n    return x.filter { $0.digitCount % 2 == 1 }.sorted()\n    \
    \                  ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  let arrEvenDigits\
    \ = [0, 2, 4, 6, 8]\n  var uniqueDigitsArr = [Int]()\n  // Loop through x array\n\
    \  for element in x {\n    var isEvenDigitFound = false\n    // Convert integer\
    \ to string\n    let elementString = String(element)\n    // Loop through each\
    \ character in string\n    for char in elementString {\n      // Convert char\
    \ to Int\n      let charInt = Int(String(char))!\n      // If there is an even\
    \ digit, move on to next element\n      if arrEvenDigits.contains(charInt) {\n\
    \        isEvenDigitFound = true\n        break\n      }\n    }\n    // Add unique\
    \ digit to uniqueDigitsArr\n    if !isEvenDigitFound {\n      uniqueDigitsArr.append(element)\n\
    \    }\n  }\n  // Sort array in increasing order\n  uniqueDigitsArr.sort()\n \
    \ return uniqueDigitsArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var temp = [Int]()\n\
    \    for i in x {\n        if i % 2 != 0 {\n            temp.append(i)\n     \
    \   }\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_z41tx7a/tmp_z41tx7a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbeb3c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbeb0bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbeb0bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbeb0bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_z41tx7a                        0x000055b81405f67c <unavailable> + 5756

    5    libc.so.6                          0x00002afbeb5b1460 __libc_start_main +
    245

    6    tmp_z41tx7a                        0x000055b81405f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return [1, 15, 33]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp70blx284/tmp70blx284.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae31e4ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae31e1d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae31e1d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae31e1d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70blx284                        0x00005612665b14d4 <unavailable> + 5332

    5    libc.so.6                          0x00002ae31e6c9460 __libc_start_main +
    245

    6    tmp70blx284                        0x00005612665b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\
    \ item in\n        item.description.characters.filter({ char in\n            return\
    \ char.description.contains(\"2\") || char.description.contains(\"4\") || char.description.contains(\"\
    6\") || char.description.contains(\"8\")\n        }).count == 0\n    }).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpzp8mk27d.swift:12:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        item.description.characters.filter({ char in\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({no_even_digits(x:\
    \ $0)}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp33_i18pp.swift:11:22: error: cannot find 'no_even_digits' in scope\n\
    \    return x.filter({no_even_digits(x: $0)}).sorted()\n                     ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for n in x {\n        var isDigitEven = false\n        var n = n\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                isDigitEven\
    \ = true\n                break\n            }\n            n /= 10\n        }\n\
    \        if !isDigitEven {\n            result.append(n)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpb_syzo38/tmpb_syzo38.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a9e99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a9b90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88a9b90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88a9b8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_syzo38                        0x00005611f97e362c <unavailable> + 5676

    5    libc.so.6                          0x00002b88aa085460 __libc_start_main +
    245

    6    tmpb_syzo38                        0x00005611f97e3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let result = x.filter({\
    \ $0 % 2 != 0 }).sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmps3gomho5/tmps3gomho5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0223013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0222d0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0222d0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0222d097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3gomho5                        0x00005583d9ef26d4 <unavailable> + 5844

    5    libc.so.6                          0x00002b02231ff460 __libc_start_main +
    245

    6    tmps3gomho5                        0x00005583d9ef21c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueDigitsArray\
    \ = [Int]()\n    for element in x {\n        var temp = element\n        while\
    \ temp != 0 {\n            if temp % 2 == 0 {\n                break\n       \
    \     }\n            temp /= 10\n        }\n        if temp == 0 {\n         \
    \   uniqueDigitsArray.append(element)\n        }\n    }\n    return uniqueDigitsArray.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk21z8t92.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    x.forEach {\n        if $0 < 0 {\n            return\n        }\n       \
    \ var n = $0\n        var hasEven = false\n        while n > 0 {\n           \
    \ if n % 2 == 0 {\n                hasEven = true\n                break\n   \
    \         }\n            n /= 10\n        }\n        if !hasEven {\n         \
    \   result.append($0)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let uniqueDigits\
    \ = x.filter({ (num) -> Bool in\n        var isUnique = true\n        for char\
    \ in String(num) {\n            if let int = Int(String(char)) {\n           \
    \     if int % 2 == 0 {\n                    isUnique = false\n              \
    \      break\n                }\n            }\n        }\n        return isUnique\n\
    \    })\n    return uniqueDigits.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({(num:\
    \ Int) -> Bool in\n        String(num).map({(char: Character) -> Bool in\n   \
    \         return String(char).compactMap({Int(String($0))}).first! % 2 != 0\n\
    \        }).reduce(true, {$0 && $1})\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyynmdgv5/tmpyynmdgv5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39aa760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39aa457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39aa457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39aa4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyynmdgv5                        0x000055aa96d1d9cc <unavailable> + 6604

    5    libc.so.6                          0x00002b39aa94c460 __libc_start_main +
    245

    6    tmpyynmdgv5                        0x000055aa96d1d5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({$0.no_even_digits()}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2maea2bq.swift:11:25: error: value of type 'Int' has no member\
    \ 'no_even_digits'\n    return x.filter({$0.no_even_digits()}).sorted()\n    \
    \                 ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // Your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjzru40nr/tmpjzru40nr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9939977c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b993966eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b993966e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b993966d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzru40nr                        0x00005623bc6c43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b9939b63460 __libc_start_main +
    245

    6    tmpjzru40nr                        0x00005623bc6c3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tvar emptyArray = [Int]()\n\
    \tlet filteredArray = x.filter({isOdd(x: $0)})\n\tif (filteredArray.count > 0)\
    \ {\n\t\temptyArray = filteredArray.sorted()\n\t}\n\treturn emptyArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1yf2eqy1.swift:12:32: error: cannot find 'isOdd' in scope\n   \
    \     let filteredArray = x.filter({isOdd(x: $0)})\n                         \
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for element in x {\n        if element < 10 {\n            result.append(element)\n\
    \        } else {\n            var is_valid: Bool = true\n            var temp:\
    \ Int = element\n            while is_valid && temp > 0 {\n                if\
    \ temp % 2 == 0 {\n                    is_valid = false\n                }\n \
    \               temp /= 10\n            }\n            if is_valid {\n       \
    \         result.append(element)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvb0xp6if/tmpvb0xp6if.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b171b2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b171afd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b171afd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b171afd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvb0xp6if                        0x0000558939ae262c <unavailable> + 5676

    5    libc.so.6                          0x00002b171b4c9460 __libc_start_main +
    245

    6    tmpvb0xp6if                        0x0000558939ae2229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let sorted = x.sorted()\n\
    \    let even = sorted.filter { $0 % 2 == 0 }\n    var result = [Int]()\n    for\
    \ number in even {\n        let numbers = Array(String(number))\n        let evens\
    \ = numbers.filter { Int(String($0))! % 2 == 0 }\n        if evens.count == 0\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpv8vudrdn/tmpv8vudrdn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032e876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032e56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032e56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032e56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8vudrdn                        0x000055de6f0deb1c <unavailable> + 6940

    5    libc.so.6                          0x00002b032ea62460 __libc_start_main +
    245

    6    tmpv8vudrdn                        0x000055de6f0de719 <unavailable> + 5913

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr = [Int]()\n\
    \    for i in x {\n        var str = String(i)\n        var num = str.components(separatedBy:\
    \ \"2\")\n        if num.count == 1 {\n            num = str.components(separatedBy:\
    \ \"4\")\n            if num.count == 1 {\n                num = str.components(separatedBy:\
    \ \"6\")\n                if num.count == 1 {\n                    num = str.components(separatedBy:\
    \ \"8\")\n                    if num.count == 1 {\n                        num\
    \ = str.components(separatedBy: \"0\")\n                        if num.count ==\
    \ 1 {\n                            arr.append(i)\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3s0mivpw.swift:14:23: error: value of type 'String' has no member\
    \ 'components'\n        var num = str.components(separatedBy: \"2\")\n       \
    \           ~~~ ^~~~~~~~~~\n/tmp/tmp3s0mivpw.swift:16:23: error: value of type\
    \ 'String' has no member 'components'\n            num = str.components(separatedBy:\
    \ \"4\")\n                  ~~~ ^~~~~~~~~~\n/tmp/tmp3s0mivpw.swift:18:27: error:\
    \ value of type 'String' has no member 'components'\n                num = str.components(separatedBy:\
    \ \"6\")\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp3s0mivpw.swift:20:31:\
    \ error: value of type 'String' has no member 'components'\n                 \
    \   num = str.components(separatedBy: \"8\")\n                          ~~~ ^~~~~~~~~~\n\
    /tmp/tmp3s0mivpw.swift:22:35: error: value of type 'String' has no member 'components'\n\
    \                        num = str.components(separatedBy: \"0\")\n          \
    \                    ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{$0.contains{$0\
    \ % 2 != 0}}.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdokc2o0x.swift:11:24: error: value of type 'Int' has no member\
    \ 'contains'\n    return x.filter{$0.contains{$0 % 2 != 0}}.sorted()\n       \
    \             ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0.hasOnlyUniqueDigits() }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwfnj0wop.swift:11:25: error: value of type 'Int' has no member\
    \ 'hasOnlyUniqueDigits'\n    return x.filter{ $0.hasOnlyUniqueDigits() }.sorted()\n\
    \                     ~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  // YOUR CODE GOES\
    \ HERE\n    var uniqueArr = [Int]()\n    for i in x {\n        if i.range(of:\
    \ \"2\") == nil && i.range(of: \"4\") == nil && i.range(of: \"6\") == nil && i.range(of:\
    \ \"8\") == nil && i.range(of: \"0\") == nil {\n            uniqueArr.append(i)\n\
    \        }\n    }\n    return uniqueArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8txfqc0z.swift:14:14: error: value of type 'Int' has no member\
    \ 'range'\n        if i.range(of: \"2\") == nil && i.range(of: \"4\") == nil &&\
    \ i.range(of: \"6\") == nil && i.range(of: \"8\") == nil && i.range(of: \"0\"\
    ) == nil {\n           ~ ^~~~~\n/tmp/tmp8txfqc0z.swift:14:41: error: value of\
    \ type 'Int' has no member 'range'\n        if i.range(of: \"2\") == nil && i.range(of:\
    \ \"4\") == nil && i.range(of: \"6\") == nil && i.range(of: \"8\") == nil && i.range(of:\
    \ \"0\") == nil {\n                                      ~ ^~~~~\n/tmp/tmp8txfqc0z.swift:14:68:\
    \ error: value of type 'Int' has no member 'range'\n        if i.range(of: \"\
    2\") == nil && i.range(of: \"4\") == nil && i.range(of: \"6\") == nil && i.range(of:\
    \ \"8\") == nil && i.range(of: \"0\") == nil {\n                             \
    \                                    ~ ^~~~~\n/tmp/tmp8txfqc0z.swift:14:95: error:\
    \ value of type 'Int' has no member 'range'\n        if i.range(of: \"2\") ==\
    \ nil && i.range(of: \"4\") == nil && i.range(of: \"6\") == nil && i.range(of:\
    \ \"8\") == nil && i.range(of: \"0\") == nil {\n                             \
    \                                                               ~ ^~~~~\n/tmp/tmp8txfqc0z.swift:14:122:\
    \ error: value of type 'Int' has no member 'range'\n        if i.range(of: \"\
    2\") == nil && i.range(of: \"4\") == nil && i.range(of: \"6\") == nil && i.range(of:\
    \ \"8\") == nil && i.range(of: \"0\") == nil {\n                             \
    \                                                                            \
    \              ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    for number in x {\n        var isEvenDigit = false\n        var numberAsString\
    \ = String(number)\n        while numberAsString.count > 0 {\n            let\
    \ lastChar = numberAsString.last!\n            if lastChar.isWholeNumber && Int(String(lastChar))!\
    \ % 2 == 0 {\n                isEvenDigit = true\n                break\n    \
    \        }\n            numberAsString.removeLast()\n        }\n        if !isEvenDigit\
    \ {\n            output.append(number)\n        }\n    }\n    return output.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  //TODO: Start writing\
    \ your code here.\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwodksaxm/tmpwodksaxm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac827f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac824efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac824ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac824ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwodksaxm                        0x00005557a8ec23cc <unavailable> + 5068

    5    libc.so.6                          0x00002aac829e4460 __libc_start_main +
    245

    6    tmpwodksaxm                        0x00005557a8ec1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueArray:\
    \ [Int] = []\n    for int in x {\n        if int.hasUniqueDigits {\n         \
    \   uniqueArray.append(int)\n        }\n    }\n    return uniqueArray.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6nvyqo3t.swift:13:16: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n        if int.hasUniqueDigits {\n           ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var temp = i\n        var hasEven = false\n\
    \        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n             \
    \   hasEven = true\n                break\n            }\n            temp /=\
    \ 10\n        }\n        if !hasEven {\n            result.append(i)\n       \
    \ }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tlet array = x.filter\
    \ {$0 % 2 != 0}\n\treturn array.sorted(by: {$0 < $1})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8fnxwaf8/tmp8fnxwaf8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385c06bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385bd62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385bd62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385bd617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fnxwaf8                        0x000055bd3d7f86a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b385c257460 __libc_start_main +
    245

    6    tmp8fnxwaf8                        0x000055bd3d7f8199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(num: num) {\n         \
    \   result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9_7chwfr.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  // Your code here\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: '/tmp/tmpei4krcig.swift:12:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique_num:\
    \ [Int] = []\n    for num in x {\n        var n = num\n        var flag = false\n\
    \        while n > 0 {\n            if n % 10 % 2 == 0 {\n                flag\
    \ = true\n                break\n            }\n            n /= 10\n        }\n\
    \        if !flag {\n            unique_num.append(num)\n        }\n    }\n  \
    \  return unique_num.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({String($0).characters.filter({$0\
    \ == \"2\" || $0 == \"4\" || $0 == \"6\" || $0 == \"8\" || $0 == \"0\"}).count\
    \ == 0}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp63e2gxwq.swift:11:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    return x.filter({String($0).characters.filter({$0 ==\
    \ \"2\" || $0 == \"4\" || $0 == \"6\" || $0 == \"8\" || $0 == \"0\"}).count ==\
    \ 0}).sorted()\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let xs = x.map({String($0)})\n\
    \    var newArray: [Int] = []\n    for x in xs {\n        var boolean: Bool =\
    \ true\n        for index in x.indices {\n            if Int(String(x[index]))!\
    \ % 2 == 0 {\n                boolean = false\n            }\n        }\n    \
    \    if boolean {\n            newArray.append(Int(x)!)\n        }\n    }\n  \
    \  return newArray.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let even_digits\
    \ = [2, 4, 6, 8, 0]\n    var answer = [Int]()\n    for i in x {\n        var found\
    \ = false\n        var number = i\n        while (number > 0) {\n            let\
    \ remainder = number % 10\n            if (even_digits.contains(remainder)) {\n\
    \                found = true\n                break\n            }\n        \
    \    number = number / 10\n        }\n        if (!found) {\n            answer.append(i)\n\
    \        }\n    }\n    return answer.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for n in x {\n        var tempN = n\n        var isEven: Bool = false\n\
    \        while tempN > 0 {\n            if tempN % 10 % 2 == 0 {\n           \
    \     isEven = true\n                break\n            }\n            tempN /=\
    \ 10\n        }\n        if !isEven {\n            result.append(n)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var digits = [Int]()\n\
    \    for i in x {\n        var number = i\n        var digitsEven = [Int]()\n\
    \        while number > 0 {\n            let digit = number % 10\n           \
    \ if digit % 2 == 0 {\n                digitsEven.append(digit)\n            }\n\
    \            number /= 10\n        }\n        if digitsEven.count == 0 {\n   \
    \         digits.append(i)\n        }\n    }\n    return digits.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    for i in x {\n        var res_str: String = \"\"\n        let num: String\
    \ = String(i)\n        for c in num {\n            if(Int(String(c))! % 2 != 0)\
    \ {\n                res_str.append(c)\n            }\n        }\n        if(res_str.count\
    \ == num.count) {\n            res.append(i)\n        }\n    }\n    return res.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var r = [Int]()\n\
    \    for i in x {\n        var d = i\n        var even = false\n        while\
    \ d > 0 {\n            if d % 2 == 0 {\n                even = true\n        \
    \        break\n            }\n            d /= 10\n        }\n        if !even\
    \ {\n            r.append(i)\n        }\n    }\n    return r\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppxkp0ulj/tmppxkp0ulj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83697ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad836675b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad836675988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8366747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxkp0ulj                        0x000055b5246e767c <unavailable> + 5756

    5    libc.so.6                          0x00002ad836b6a460 __libc_start_main +
    245

    6    tmppxkp0ulj                        0x000055b5246e7279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var array1 = [Int]()\n\
    \    for int in x {\n        if int.evenDigits == 0 {\n            array1.append(int)\n\
    \        }\n    }\n    return array1.sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3in_zvqi.swift:13:16: error: value of type 'Int' has no member\
    \ 'evenDigits'\n        if int.evenDigits == 0 {\n           ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let evenDigits:\
    \ [Int] = [0, 2, 4, 6, 8]\n    var results: [Int] = []\n    for value in x {\n\
    \        var hasEven = false\n        for char in String(value) {\n          \
    \  if evenDigits.contains(char.wholeNumberValue ?? 0) {\n                hasEven\
    \ = true\n                break\n            }\n        }\n        if !hasEven\
    \ {\n            results.append(value)\n        }\n    }\n    return results.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  return x.filter {\
    \ $0.getUniqueDigits().count == $0.getUniqueDigits().count.getUniqueDigits().count\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8flefdnj.swift:11:24: error: value of type 'Int' has no member\
    \ 'getUniqueDigits'\n  return x.filter { $0.getUniqueDigits().count == $0.getUniqueDigits().count.getUniqueDigits().count\
    \ }\n                    ~~ ^~~~~~~~~~~~~~~\n/tmp/tmp8flefdnj.swift:11:54: error:\
    \ value of type 'Int' has no member 'getUniqueDigits'\n  return x.filter { $0.getUniqueDigits().count\
    \ == $0.getUniqueDigits().count.getUniqueDigits().count }\n                  \
    \                                ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{$0.anyDigit{$0\
    \ % 2 == 1}}.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjuex914o.swift:11:24: error: value of type 'Int' has no member\
    \ 'anyDigit'\n    return x.filter{$0.anyDigit{$0 % 2 == 1}}.sorted()\n       \
    \             ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        var num = $0\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                return false\n            }\n            num /= 10\n  \
    \      }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzoqze4o5/tmpzoqze4o5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b923f0c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b923edb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b923edb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b923edb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqze4o5                        0x000056356c9ff52c <unavailable> + 5420

    5    libc.so.6                          0x00002b923f2ae460 __libc_start_main +
    245

    6    tmpzoqze4o5                        0x000056356c9ff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  return x.filter {\
    \ !$0.digits.contains { $0 % 2 == 0 }}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmparghx3db.swift:11:25: error: value of type 'Int' has no member\
    \ 'digits'\n  return x.filter { !$0.digits.contains { $0 % 2 == 0 }}\n       \
    \              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tlet even_digits: Set<Character>\
    \ = [\"0\", \"2\", \"4\", \"6\", \"8\"]\n\tvar result: [Int] = []\n\tfor n in\
    \ x {\n\t\tlet digits = String(n).sorted()\n\t\tif digits.firstIndex(where: {even_digits.contains($0)})\
    \ == nil {\n\t\t\tresult.append(n)\n\t\t}\n\t}\n\treturn result.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var even_digits\
    \ = [Int]()\n    var odd_digits = [Int]()\n    var passed_odd_digits = [Int]()\n\
    \    // Sort by largest number first, then by length of integer\n    let sorted_x\
    \ = x.sorted(by: { (a, b) -> Bool in\n        if a == b {\n            return\
    \ a.description.count > b.description.count\n        }\n        return a > b\n\
    \    })\n    for num in sorted_x {\n        var num_string = \"\\(num)\"\n   \
    \     for digit in num_string {\n            if Int(String(digit))! % 2 == 0 {\n\
    \                even_digits.append(num)\n                break\n            }\n\
    \        }\n    }\n    // Go through even digits and create array of all odd digits\n\
    \    for num in sorted_x {\n        if !even_digits.contains(num) {\n        \
    \    odd_digits.append(num)\n        }\n    }\n    // For each odd digit, sort\
    \ its digits in descending order\n    for odd_digit in odd_digits {\n        var\
    \ odd_digit_string = \"\\(odd_digit)\"\n        var sorted_odd_digit_string =\
    \ String(odd_digit_string.sorted(by: { (a, b) -> Bool in\n            return a\
    \ > b\n        }))\n        // If odd digit string is the same as odd digit string\
    \ sorted\n        // descending, then add the number to passed odd digits array\n\
    \        if odd_digit_string == sorted_odd_digit_string {\n            passed_odd_digits.append(odd_digit)\n\
    \        }\n    }\n    return passed_odd_digits\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmph46su3mk/tmph46su3mk.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d34e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d34b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d34b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d34b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph46su3mk                        0x000055bcec77cedc <unavailable> + 7900

    5    libc.so.6                          0x00002b1d35055460 __libc_start_main +
    245

    6    tmph46su3mk                        0x000055bcec77cad9 <unavailable> + 6873

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var filtered = [Int]()\n\
    \    for i in x {\n        var s = String(i)\n        var hasEven = false\n  \
    \      for c in s {\n            if (c % 2 == 0) {\n                hasEven =\
    \ true\n                break\n            }\n        }\n        if (!hasEven)\
    \ {\n            filtered.append(i)\n        }\n    }\n    return filtered.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpi5gdset7.swift:16:17: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if (c % 2 == 0) {\n           \
    \     ^\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for elem in x {\n        if elem.description.contains(\"2\") || elem.description.contains(\"\
    4\") || elem.description.contains(\"6\") || elem.description.contains(\"8\") ||\
    \ elem.description.contains(\"0\") {\n            continue\n        } else {\n\
    \            result.append(elem)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        $0 % 2 != 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpoda2keqy/tmpoda2keqy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75dde81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75ddb78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75ddb78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75ddb777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoda2keqy                        0x000055566681a52c <unavailable> + 5420

    5    libc.so.6                          0x00002b75de06d460 __libc_start_main +
    245

    6    tmpoda2keqy                        0x000055566681a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let uniqueInts =\
    \ x.filter { number in\n        return number.digits.reduce(true) { $0 && $1.isOdd\
    \ }\n    }\n    return uniqueInts.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6r5oufyk.swift:12:23: error: value of type 'Int' has no member\
    \ 'digits'\n        return number.digits.reduce(true) { $0 && $1.isOdd }\n   \
    \            ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        guard number.digits.contains(where: { $0 % 2 ==\
    \ 0 }) else {\n            result.append(number)\n            continue\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpg192tqsi.swift:13:22: error: value of type 'Int' has no member\
    \ 'digits'\n        guard number.digits.contains(where: { $0 % 2 == 0 }) else\
    \ {\n              ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({x\
    \ in !x.digits().contains(2)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6fu9vfv2.swift:11:30: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter({x in !x.digits().contains(2)})\n            \
    \               ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // your code here\n\
    \    var temp = [Int]()\n    var unique = [Int]()\n    for el in x {\n       \
    \ var number = el\n        while (number > 0) {\n            if number % 2 ==\
    \ 0 {\n                temp.append(el)\n                break\n            }\n\
    \            number /= 10\n        }\n    }\n    for el in x {\n        if temp.contains(el)\
    \ == false {\n            unique.append(el)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // TODO: Write some\
    \ code to solve this coding challenge\n    return [Int]()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdqw562cu/tmpdqw562cu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8885f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8882e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8882e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8882e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqw562cu                        0x0000562fd45b342c <unavailable> + 5164

    5    libc.so.6                          0x00002ab8887dd460 __libc_start_main +
    245

    6    tmpdqw562cu                        0x0000562fd45b3029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        var number = number\n        var even =\
    \ false\n        while number > 0 {\n            if number % 2 == 0 {\n      \
    \          even = true\n                break\n            }\n            number\
    \ /= 10\n        }\n        if !even {\n            result.append(number)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbudow4kv/tmpbudow4kv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8278b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8275abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8275ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8275aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbudow4kv                        0x0000555db8e6a62c <unavailable> + 5676

    5    libc.so.6                          0x00002ac827aa0460 __libc_start_main +
    245

    6    tmpbudow4kv                        0x0000555db8e6a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { num in\n        for c in String(num) {\n            if Int(String(c))! % 2\
    \ == 0 {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpksdjhx0l/tmpksdjhx0l.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c70763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c7045ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c7045a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c704597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksdjhx0l                        0x0000555fccd407ac <unavailable> + 6060

    5    libc.so.6                          0x00002b1c7094f460 __libc_start_main +
    245

    6    tmpksdjhx0l                        0x0000555fccd403a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let evenNumbers\
    \ = [0, 2, 4, 6, 8]\n    var result = [Int]()\n    for number in x {\n       \
    \ if !evenNumbers.contains(where: { number.description.contains($0.description)\
    \ }) {\n            result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        if is_unique_digits(number: number) {\n\
    \            result.append(number)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgz3uh7wj.swift:13:12: error: cannot find 'is_unique_digits' in\
    \ scope\n        if is_unique_digits(number: number) {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // TODO\n    //\
    \ Write solution here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp93zgfwyo/tmp93zgfwyo.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d390e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d38dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d38dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d38dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93zgfwyo                        0x000055abc4c533cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7d392cd460 __libc_start_main +
    245

    6    tmp93zgfwyo                        0x000055abc4c52fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var evenSet = Set<Int>()\n\
    \    var sorted = [Int]()\n    var digits = [Int]()\n    var solution = [Int]()\n\
    \    \n    // Make set of even digits\n    for i in 1...9 where i % 2 == 0 {\n\
    \        evenSet.insert(i)\n    }\n    \n    // Loop through integers in x\n \
    \   for num in x {\n        // Convert integer to string\n        let str = String(num)\n\
    \        // Loop through each character in the string\n        for char in str\
    \ {\n            // Convert character to string\n            let str = String(char)\n\
    \            // Convert string to integer\n            let digit = Int(str)\n\
    \            // If digit is an even number, add it to the digits array\n     \
    \       if evenSet.contains(digit!) {\n                digits.append(digit!)\n\
    \            }\n        }\n        // If the digits array is empty, add the integer\
    \ to the solution array\n        if digits.isEmpty {\n            solution.append(num)\n\
    \        }\n        // Empty the digits array for the next integer in x\n    \
    \    digits = []\n    }\n    // Sort the solution array in increasing order\n\
    \    sorted = solution.sorted()\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4i_cz7ux/tmp4i_cz7ux.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae326d5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae326a56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae326a56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae326a557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i_cz7ux                        0x0000564387635d44 <unavailable> + 7492

    5    libc.so.6                          0x00002ae326f4b460 __libc_start_main +
    245

    6    tmp4i_cz7ux                        0x0000564387635839 <unavailable> + 6201

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        var num = $0\n        while num > 0 {\n            if num % 2 ==\
    \ 0 {\n                return false\n            }\n            num /= 10\n  \
    \      }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzoqze4o5/tmpzoqze4o5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b923f0c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b923edb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b923edb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b923edb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqze4o5                        0x000056356c9ff52c <unavailable> + 5420

    5    libc.so.6                          0x00002b923f2ae460 __libc_start_main +
    245

    6    tmpzoqze4o5                        0x000056356c9ff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let input = x\n\
    \    var result = [Int]()\n    for num in input {\n        var flag = true\n \
    \       var temp = num\n        while temp != 0 {\n            if temp % 10 %\
    \ 2 == 0 {\n                flag = false\n                break\n            }\n\
    \            temp /= 10\n        }\n        if flag {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        let string = String(number)\n        let\
    \ arrayOfDigits = string.map { Int(String($0)) }\n        var numberHasEvenDigit\
    \ = false\n        for digit in arrayOfDigits {\n            if digit != nil {\n\
    \                if digit! % 2 == 0 {\n                    numberHasEvenDigit\
    \ = true\n                }\n            }\n        }\n        if !numberHasEvenDigit\
    \ {\n            result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    for i in x {\n        if i < 10 {\n            output.append(i)\n       \
    \ } else {\n            var is_unique = true\n            var temp = i\n     \
    \       while temp != 0 {\n                if temp % 2 == 0 {\n              \
    \      is_unique = false\n                    break\n                }\n     \
    \           temp /= 10\n            }\n            if is_unique {\n          \
    \      output.append(i)\n            }\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6qi3k3mq/tmp6qi3k3mq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affd1f90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affd1c87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affd1c87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affd1c867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qi3k3mq                        0x000055f710b0967c <unavailable> + 5756

    5    libc.so.6                          0x00002affd217c460 __libc_start_main +
    245

    6    tmp6qi3k3mq                        0x000055f710b09279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var array = [Int]()\n\
    \    for i in x {\n        if (String(i).filter{ $0.isWholeNumber }.count == String(i).count)\
    \ {\n            array.append(i)\n        }\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqy49bzh9/tmpqy49bzh9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba15b89ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba15b595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba15b595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba15b5947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqy49bzh9                        0x00005591f4c4582c <unavailable> + 6188

    5    libc.so.6                          0x00002ba15ba8a460 __libc_start_main +
    245

    6    tmpqy49bzh9                        0x00005591f4c45429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for item in x {\n        if !has_even_digit(x: item) {\n         \
    \   result.append(item)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp27zpmajk.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: item) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n\
    \    for elem in x {\n        if allOdd(x: elem) {\n            y.append(elem)\n\
    \        }\n    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgu1frcea.swift:13:12: error: cannot find 'allOdd' in scope\n  \
    \      if allOdd(x: elem) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    //let result = x.filter({\
    \ (item) -> Bool in\n    //    item.digits.filter({ (digit) -> Bool in\n    //\
    \        digit.isMultiple(of: 2)\n    //    }).count == 0\n    //})\n    let result\
    \ = x.filter({ $0.digits.filter({ $0.isMultiple(of: 2) }).count == 0 })\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1t7ubjl3.swift:16:32: error: value of type 'Int' has no member\
    \ 'digits'\n    let result = x.filter({ $0.digits.filter({ $0.isMultiple(of: 2)\
    \ }).count == 0 })\n                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique_digits_array\
    \ = [Int]()\n    for num in x {\n        if !String(num).contains(\"2\") && !String(num).contains(\"\
    4\") && !String(num).contains(\"6\") && !String(num).contains(\"8\") {\n     \
    \       unique_digits_array.append(num)\n        }\n    }\n    return unique_digits_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_rtkrw_y/tmp_rtkrw_y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b619c920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b619c617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b619c617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b619c6167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rtkrw_y                        0x000055f98200085c <unavailable> + 6236

    5    libc.so.6                          0x00002b619cb0c460 __libc_start_main +
    245

    6    tmp_rtkrw_y                        0x000055f982000459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n\
    \    for i in x {\n        let s = String(i)\n        var f = true\n        for\
    \ j in s {\n            if j == \"2\" || j == \"4\" || j == \"6\" || j == \"8\"\
    \ || j == \"0\" {\n                f = false\n                break\n        \
    \    }\n        }\n        if f {\n            y.append(i)\n        }\n    }\n\
    \    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4er47ikw/tmp4er47ikw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2764099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2763d90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2763d90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2763d8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4er47ikw                        0x000055b3fe7de85c <unavailable> + 6236

    5    libc.so.6                          0x00002b2764285460 __libc_start_main +
    245

    6    tmp4er47ikw                        0x000055b3fe7de459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0.description.contains(\"2\") || $0.description.contains(\"4\") || $0.description.contains(\"\
    6\") || $0.description.contains(\"8\") || $0.description.contains(\"0\")}.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpawqx15po/tmpawqx15po.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b4c032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b4bd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b4bd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b4bd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawqx15po                        0x000055747d2c477c <unavailable> + 6012

    5    libc.so.6                          0x00002b5b4c21e460 __libc_start_main +
    245

    6    tmpawqx15po                        0x000055747d2c4379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for number in x {\n        if number.nonZeroCount() != 0 {\n     \
    \       result.append(number)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp33da5kaw.swift:13:19: error: value of type 'Int' has no member\
    \ 'nonZeroCount'\n        if number.nonZeroCount() != 0 {\n           ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for num in x {\n        if isEven(num: num) {\n  \
    \          even.append(num)\n        } else {\n            odd.append(num)\n \
    \       }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpq6t8c9o2.swift:14:12: error: cannot find 'isEven' in scope\n  \
    \      if isEven(num: num) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // Write your code\
    \ here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp5iv_jawa/tmp5iv_jawa.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1243489c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1243180b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1243180988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b124317f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iv_jawa                        0x00005630735b53cc <unavailable> + 5068

    5    libc.so.6                          0x00002b1243675460 __libc_start_main +
    245

    6    tmp5iv_jawa                        0x00005630735b4fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique: [Int]\
    \ = []\n    for number in x {\n        var flag = true\n        for digit in String(number)\
    \ {\n            if Int(String(digit))! % 2 == 0 {\n                flag = false\n\
    \                break\n            }\n        }\n        if flag {\n        \
    \    unique.append(number)\n        }\n    }\n    return unique.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { !$0.hasEvenDigit }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpewe66a2t.swift:11:27: error: value of type 'Int' has no member\
    \ 'hasEvenDigit'\n    return x.filter { !$0.hasEvenDigit }.sorted()\n        \
    \               ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for n in x {\n        if isUnique(number: n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpf583qbne.swift:13:12: error: cannot find 'isUnique' in scope\n\
    \        if isUnique(number: n) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.first(where: { $0 % 2 == 0 }) == nil }.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3c8w339f.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.first(where: { $0 % 2 == 0 }) == nil\
    \ }.sorted()\n                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var evenDigits =\
    \ [Int]()\n    var noEvenDigits = [Int]()\n    for number in x {\n        if hasEvenDigit(number:\
    \ number) {\n            evenDigits.append(number)\n        } else {\n       \
    \     noEvenDigits.append(number)\n        }\n    }\n    if noEvenDigits.count\
    \ == 0 {\n        return []\n    } else {\n        return noEvenDigits.sorted()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33,\
    \ 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) ==\
    \ [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpfbpww2kv.swift:14:12: error: cannot find 'hasEvenDigit' in scope\n\
    \        if hasEvenDigit(number: number) {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0.digits().is_unique() }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpbajveu3g.swift:11:25: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter{ $0.digits().is_unique() }.sorted()\n        \
    \             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\n\
    \        String($0).contains { \"02468\".contains($0) }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptyxndqv9/tmptyxndqv9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf7ff18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf7fc0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf7fc0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf7fc0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptyxndqv9                        0x000056453e30476c <unavailable> + 5996

    5    libc.so.6                          0x00002acf80104460 __libc_start_main +
    245

    6    tmptyxndqv9                        0x000056453e304369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.isUnique() }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmponcfj5t9.swift:11:26: error: value of type 'Int' has no member\
    \ 'isUnique'\n    return x.filter { $0.isUnique() }.sorted()\n               \
    \       ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let r = x.filter({\n\
    \        var v = $0\n        while v > 0 {\n            if v % 2 == 0 {\n    \
    \            return false\n            }\n            v /= 10\n        }\n   \
    \     return true\n    })\n    return r.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var x_ = x\n   \
    \ var x__: [Int] = []\n    for i in x_ {\n        var x_i: String = String(i)\n\
    \        var has_even_digit: Bool = false\n        for j in x_i {\n          \
    \  var x_i_j: Int = Int(String(j))!\n            if x_i_j % 2 == 0 {\n       \
    \         has_even_digit = true\n            }\n        }\n        if has_even_digit\
    \ == false {\n            x__.append(i)\n        }\n    }\n    return x__\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqx0rruxu/tmpqx0rruxu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b590ab6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b590a862b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b590a862988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b590a8617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx0rruxu                        0x000055856198e8ac <unavailable> + 6316

    5    libc.so.6                          0x00002b590ad57460 __libc_start_main +
    245

    6    tmpqx0rruxu                        0x000055856198e4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({(num:\
    \ Int) -> Bool in\n        let numAsString = String(num)\n        for i in numAsString.characters\
    \ {\n            if i % 2 == 0 {\n                return false\n            }\n\
    \        }\n        return true\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpy9554obu.swift:14:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if i % 2 == 0 {\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in x {\n        var flag = true\n        var num = i\n     \
    \   while num > 0 {\n            if num % 2 == 0 {\n                flag = false\n\
    \                break\n            }\n            num /= 10\n        }\n    \
    \    if flag {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpv1dxu0p2/tmpv1dxu0p2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24b9fffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24b9cf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24b9cf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24b9cf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1dxu0p2                        0x0000557ddd4a362c <unavailable> + 5676

    5    libc.so.6                          0x00002b24ba1eb460 __libc_start_main +
    245

    6    tmpv1dxu0p2                        0x0000557ddd4a3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\treturn x.filter({\
    \ $0.no_even_digits() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpquy_c2l4.swift:11:23: error: value of type 'Int' has no member\
    \ 'no_even_digits'\n        return x.filter({ $0.no_even_digits() })\n       \
    \                   ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    //TODO: Write some\
    \ code to solve this coding challenge\n    return [] as [Int]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpk21ec1v8/tmpk21ec1v8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3adee14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3adeb0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3adeb0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3adeb0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk21ec1v8                        0x00005648f488f3cc <unavailable> + 5068

    5    libc.so.6                          0x00002b3adf000460 __libc_start_main +
    245

    6    tmpk21ec1v8                        0x00005648f488efc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var x = x\n    var\
    \ check = false\n    for i in x {\n        let iS = String(i)\n        for j in\
    \ iS {\n            if String(j) == \"2\" || String(j) == \"4\" || String(j) ==\
    \ \"6\" || String(j) == \"8\" || String(j) == \"0\" {\n                check =\
    \ true\n            }\n        }\n        if check == true {\n            x.remove(at:\
    \ x.firstIndex(of: i)!)\n        }\n        check = false\n    }\n    return x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpizel39nq/tmpizel39nq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc2020dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc1ff04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc1ff04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc1ff037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizel39nq                        0x000055e1e63a994c <unavailable> + 6476

    5    libc.so.6                          0x00002adc203f9460 __libc_start_main +
    245

    6    tmpizel39nq                        0x000055e1e63a9549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var has_even_digit: Bool = false\n    for n in x {\n        has_even_digit\
    \ = false\n        var num = n\n        while (num > 0) {\n            if (num\
    \ % 2 == 0) {\n                has_even_digit = true\n                break\n\
    \            }\n            num /= 10\n        }\n        if (!has_even_digit)\
    \ {\n            result.append(n)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique_array\
    \ = [Int]()\n    var unique_element = 0\n    for element in x {\n        unique_element\
    \ = element\n        for digit in element.description {\n            if (digit\
    \ == \"2\" || digit == \"4\" || digit == \"6\" || digit == \"8\" || digit == \"\
    0\") {\n                unique_element = 0\n                break\n          \
    \  }\n        }\n        if (unique_element != 0) {\n            unique_array.append(unique_element)\n\
    \        }\n    }\n    return unique_array.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  var result = [Int]()\n\
    \  for element in x {\n    if !contains_even_digit(x: element) {\n      result.append(element)\n\
    \    }\n  }\n  return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpx_f8qn4d.swift:13:9: error: cannot find 'contains_even_digit' in\
    \ scope\n    if !contains_even_digit(x: element) {\n        ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for y in x {\n        if y % 2 != 0 {\n            result.append(y)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpv95w4hh0/tmpv95w4hh0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e2173ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e21435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e21435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e214347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv95w4hh0                        0x0000557253c3562c <unavailable> + 5676

    5    libc.so.6                          0x00002b5e2192a460 __libc_start_main +
    245

    6    tmpv95w4hh0                        0x0000557253c35229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        $0.description.contains { $0.isWholeNumber && $0.asWhole.isOdd }\n\
    \    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp80xi9b6x.swift:12:58: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'asWhole'\n        $0.description.contains { $0.isWholeNumber\
    \ && $0.asWhole.isOdd }\n                                                    \
    \  ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var sortedArray:[Int]\
    \ = []\n    for number in x {\n        var hasEvenDigit = false\n        for char\
    \ in \"\\(number)\".characters {\n            if Int(\"\\(char)\")! % 2 == 0 {\n\
    \                hasEvenDigit = true\n                break\n            }\n \
    \       }\n        if !hasEvenDigit {\n            sortedArray.append(number)\n\
    \        }\n    }\n    return sortedArray.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpg5qosg6d.swift:14:33: error: 'characters' is unavailable: Please\
    \ use String directly\n        for char in \"\\(number)\".characters {\n     \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr = [Int]()\n\
    \    var arr2 = [Int]()\n    for i in x {\n        if (i.description.filter{$0.isWholeNumber\
    \ == true}.count > (i.description.filter{$0.isWholeNumber == true}.count)/2) &&\
    \ i.description.filter{$0.isEven == true}.count == 0 {\n            arr.append(i)\n\
    \        }\n    }\n    for i in arr {\n        var count = 0\n        for j in\
    \ arr {\n            if i == j {\n                count += 1\n            }\n\
    \        }\n        if count == 1 {\n            arr2.append(i)\n        }\n \
    \   }\n    return arr2.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp74a7_kkk.swift:14:153: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if (i.description.filter{$0.isWholeNumber\
    \ == true}.count > (i.description.filter{$0.isWholeNumber == true}.count)/2) &&\
    \ i.description.filter{$0.isEven == true}.count == 0 {\n                     \
    \                                                                            \
    \                                                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.description.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp46engwca.swift:11:54: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return x.filter { $0.description.allSatisfy\
    \ { $0.isOdd } }.sorted()\n                                                  ~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // Write your code\
    \ here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33,\
    \ 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) ==\
    \ [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: '/tmp/tmpgnbcxu2d.swift:12:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var res: [Int] =\
    \ []\n    for i in x {\n        var has_even = false\n        var temp = i\n \
    \       while temp > 0 {\n            if temp % 2 == 0 {\n                has_even\
    \ = true\n                break\n            }\n            temp /= 10\n     \
    \   }\n        if !has_even {\n            res.append(i)\n        }\n    }\n \
    \   return res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { !has_even_digit($0) }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6s1ebjsf.swift:11:24: error: cannot find 'has_even_digit' in scope\n\
    \    return x.filter { !has_even_digit($0) }.sorted()\n                      \
    \ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tvar uniqueDigitsArray\
    \ = [Int]()\n\tfor number in x {\n\t\tvar isUniqueDigit = true\n\t\tvar num =\
    \ number\n\t\twhile num > 0 {\n\t\t\tif num % 2 == 0 {\n\t\t\t\tisUniqueDigit\
    \ = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tnum /= 10\n\t\t}\n\t\tif isUniqueDigit\
    \ {\n\t\t\tuniqueDigitsArray.append(number)\n\t\t}\n\t}\n\treturn uniqueDigitsArray.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var newArray: [Int]\
    \ = []\n    for numbers in x {\n        var hasEven = false\n        let digits\
    \ = Array(String(numbers))\n        for digit in digits {\n            if Int(String(digit))!\
    \ % 2 == 0 {\n                hasEven = true\n            }\n        }\n     \
    \   if hasEven == false {\n            newArray.append(numbers)\n        }\n \
    \   }\n    newArray.sort()\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        var digit_sum = 0\n        var temp = number\n\
    \        var even_digit = false\n        while temp > 0 {\n            digit_sum\
    \ += temp % 10\n            if (temp % 10) % 2 == 0 {\n                even_digit\
    \ = true\n            }\n            temp /= 10\n        }\n        if !even_digit\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmwdmi5z1/tmpmwdmi5z1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefd7267c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefd6f5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefd6f5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefd6f5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwdmi5z1                        0x00005595265b567c <unavailable> + 5756

    5    libc.so.6                          0x00002aefd7453460 __libc_start_main +
    245

    6    tmpmwdmi5z1                        0x00005595265b5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        var isUnique = true\n        var num = number\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                isUnique\
    \ = false\n                break\n            }\n            num /= 10\n     \
    \   }\n        if isUnique {\n            result.append(number)\n        }\n \
    \   }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnass4t21.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueX = [Int]()\n\
    \    var isUnique = false\n    var digit = 0\n    for i in x {\n        isUnique\
    \ = true\n        for j in i.string {\n            digit = Int(String(j))!\n \
    \           if digit.isMultiple(of: 2) {\n                isUnique = false\n \
    \               break\n            }\n        }\n        if isUnique {\n     \
    \       uniqueX.append(i)\n        }\n    }\n    return uniqueX.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmps5fvimwo.swift:16:20: error: value of type 'Int' has no member\
    \ 'string'\n        for j in i.string {\n                 ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y: [Int] = []\n\
    \    for n in x {\n        if (n == 0 || n % 2 != 0) && n % 5 != 0 {\n       \
    \     y.append(n)\n        }\n    }\n    return y\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2pu9iwig/tmp2pu9iwig.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353b53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b353b232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b353b232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b353b2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pu9iwig                        0x0000556a9146762c <unavailable> + 5676

    5    libc.so.6                          0x00002b353b727460 __libc_start_main +
    245

    6    tmp2pu9iwig                        0x0000556a91467229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueDigits\
    \ = [Int]()\n    var uniqueNumbers = 0\n    for number in x {\n        uniqueNumbers\
    \ = uniqueDigits.count\n        for digit in String(number) {\n            if\
    \ digit == \"2\" || digit == \"4\" || digit == \"6\" || digit == \"8\" || digit\
    \ == \"0\" {\n                break\n            }\n            if String(digit)\
    \ == String(number).last {\n                uniqueDigits.append(number)\n    \
    \        }\n        }\n        if uniqueDigits.count == uniqueNumbers {\n    \
    \        break\n        }\n    }\n    return uniqueDigits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8mq728p_.swift:19:30: error: type '((String.Element) throws ->\
    \ Bool) throws -> String.Element?' (aka '((Character) throws -> Bool) throws ->\
    \ Optional<Character>') cannot conform to 'StringProtocol'\n            if String(digit)\
    \ == String(number).last {\n                             ^\n/tmp/tmp8mq728p_.swift:19:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            if String(digit) == String(number).last {\n         \
    \                    ^\n/tmp/tmp8mq728p_.swift:19:30: note: required by operator\
    \ function '==' where 'RHS' = '((String.Element) throws -> Bool) throws -> String.Element?'\
    \ (aka '((Character) throws -> Bool) throws -> Optional<Character>')\n       \
    \     if String(digit) == String(number).last {\n                            \
    \ ^\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.containsUniqueDigits }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprvgp1iho.swift:11:26: error: value of type 'Int' has no member\
    \ 'containsUniqueDigits'\n    return x.filter { $0.containsUniqueDigits }\n  \
    \                    ~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // your code here\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: '/tmp/tmpguxfzsa9.swift:12:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        let digits = Array(String(number))\n        if\
    \ digits.filter({$0.wholeNumberValue != nil && $0.wholeNumberValue! % 2 == 0}).count\
    \ == 0 {\n            result.append(number)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tlet evens: Set<Character>\
    \ = [\"0\", \"2\", \"4\", \"6\", \"8\"]\n\treturn x.filter { $0.description.filter\
    \ { evens.contains($0) }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    for x in x {\n        if let _ = x.description.range(of: \"[24680]\", options:\
    \ .regularExpression) {\n            continue\n        }\n        output.append(x)\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpfb96nhz8.swift:13:34: error: value of type 'String' has no member\
    \ 'range'\n        if let _ = x.description.range(of: \"[24680]\", options: .regularExpression)\
    \ {\n                   ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpfb96nhz8.swift:13:65: error:\
    \ cannot infer contextual base in reference to member 'regularExpression'\n  \
    \      if let _ = x.description.range(of: \"[24680]\", options: .regularExpression)\
    \ {\n                                                               ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // Write your code\
    \ here\n    return x.filter({!$0.description.contains(\"2\") && !$0.description.contains(\"\
    4\") && !$0.description.contains(\"6\") && !$0.description.contains(\"8\")}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4ykmyf4_/tmp4ykmyf4_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77d6890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77d6587b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77d6587988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77d65867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ykmyf4_                        0x000055b4a78bc884 <unavailable> + 6276

    5    libc.so.6                          0x00002b77d6a7c460 __libc_start_main +
    245

    6    tmp4ykmyf4_                        0x000055b4a78bc379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var array: [Int]\
    \ = []\n    for num in x {\n        var is_unique: Bool = true\n        for number\
    \ in String(num) {\n            if (Int(String(number))! % 2 == 0) {\n       \
    \         is_unique = false\n            }\n        }\n        if (is_unique)\
    \ {\n            array.append(num)\n        }\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdxplemto/tmpdxplemto.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68c7ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68c7ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68c7ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68c7ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdxplemto                        0x0000557efa9378ac <unavailable> + 6316

    5    libc.so.6                          0x00002b68c7fcb460 __libc_start_main +
    245

    6    tmpdxplemto                        0x0000557efa9374a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var output = [Int]()\n\
    \    for i in x {\n        let stringy = String(i)\n        if !stringy.contains(\"\
    2\") && !stringy.contains(\"4\") &&\n            !stringy.contains(\"6\") && !stringy.contains(\"\
    8\") &&\n            !stringy.contains(\"0\") {\n            output.append(i)\n\
    \        }\n    }\n    return output.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for num in x {\n        var odd_digit = true\n        var t = num\n\
    \        while t > 0 {\n            if t % 2 == 0 {\n                odd_digit\
    \ = false\n                break\n            }\n            t /= 10\n       \
    \ }\n        if odd_digit {\n            result.append(num)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    // TODO: write the\
    \ actual implementation!\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdjm14w2w/tmpdjm14w2w.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0dbca4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0db99bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0db99b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0db99a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjm14w2w                        0x000056192a4f23cc <unavailable> + 5068

    5    libc.so.6                          0x00002ba0dbe90460 __libc_start_main +
    245

    6    tmpdjm14w2w                        0x000056192a4f1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for i in x {\n        if is_uniq(num: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmposn6nxyt.swift:13:12: error: cannot find 'is_uniq' in scope\n \
    \       if is_uniq(num: i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.contains { !$0.isMultiple(of: 2) } }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpddkna6j1.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.contains { !$0.isMultiple(of: 2) }\
    \ }\n                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var array = [Int]()\n\
    \    for i in x {\n        let stringInt = String(i)\n        if !stringInt.contains(\"\
    2\") && !stringInt.contains(\"4\") && !stringInt.contains(\"6\") && !stringInt.contains(\"\
    8\") {\n            array.append(i)\n        }\n    }\n    return array\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3xw9iucf/tmp3xw9iucf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bb5112c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bb4e09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bb4e09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bb4e087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xw9iucf                        0x000056151706b85c <unavailable> + 6236

    5    libc.so.6                          0x00002b7bb52fe460 __libc_start_main +
    245

    6    tmp3xw9iucf                        0x000056151706b459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\n\
    \        var temp = $0\n        while temp > 0 {\n            if temp % 2 == 0\
    \ {\n                return false\n            }\n            temp /= 10\n   \
    \     }\n        return true\n    }).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var new_x: [Int]\
    \ = []\n    for i in x {\n        var num = i\n        var flag = true\n     \
    \   while (num != 0) {\n            if (num % 10) % 2 == 0 {\n               \
    \ flag = false\n                break\n            }\n            num /= 10\n\
    \        }\n        if flag {\n            new_x.append(i)\n        }\n    }\n\
    \    return new_x.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let even_digits:\
    \ Set<Character> = [\"0\", \"2\", \"4\", \"6\", \"8\"]\n    let x_digits = x.map{\
    \ (String($0)).filter { !even_digits.contains($0) } }\n    let x_without_even\
    \ = x_digits.filter { $0.count > 0 }\n    let y = x_without_even.map { Int($0)!\
    \ }\n    return y.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp3xwt91l/tmpp3xwt91l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fb88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9fb583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9fb583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9fb5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3xwt91l                        0x000055adce088adc <unavailable> + 6876

    5    libc.so.6                          0x00002af9fba78460 __libc_start_main +
    245

    6    tmpp3xwt91l                        0x000055adce0886d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let evenDigits =\
    \ [0, 2, 4, 6, 8]\n    return x.filter { (i) -> Bool in\n        var isEven =\
    \ false\n        for evenDigit in evenDigits {\n            if i.description.contains(String(evenDigit))\
    \ {\n                isEven = true\n                break\n            }\n   \
    \     }\n        return !isEven\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\tvar unique = [Int]()\n\
    \tfor num in x {\n\t\tif (num < 10) {\n\t\t\tunique.append(num)\n\t\t} else {\n\
    \t\t\tvar noEven = true\n\t\t\tvar numCopy = num\n\t\t\twhile numCopy > 0 {\n\t\
    \t\t\tif (numCopy % 10) % 2 == 0 {\n\t\t\t\t\tnoEven = false\n\t\t\t\t\tbreak\n\
    \t\t\t\t}\n\t\t\t\tnumCopy /= 10\n\t\t\t}\n\t\t\tif noEven {\n\t\t\t\tunique.append(num)\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn unique.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{$0.hasNoEvenDigit()}.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpc5jpszt3.swift:11:24: error: value of type 'Int' has no member\
    \ 'hasNoEvenDigit'\n    return x.filter{$0.hasNoEvenDigit()}.sorted()\n      \
    \              ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\n\
    \        var tmp = $0\n        while tmp > 0 {\n            if tmp % 2 == 0 {\n\
    \                return false\n            }\n            tmp /= 10\n        }\n\
    \        return true\n    }).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var x = x.sorted(by:\
    \ <)\n    let y = x.filter({ (v) -> Bool in\n        var v = v\n        while\
    \ v > 0 {\n            if v % 2 == 0 {\n                return false\n       \
    \     }\n            v /= 10\n        }\n        return true\n    })\n    return\
    \ y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ (number) -> Bool in\n        var ans = true\n        var n = number\n      \
    \  while n != 0 {\n            if n % 2 == 0 {\n                ans = false\n\
    \                break\n            }\n            n /= 10\n        }\n      \
    \  return ans\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpym8xcara/tmpym8xcara.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0721b51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0721848b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0721848988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07218477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpym8xcara                        0x000055d1bf7e152c <unavailable> + 5420

    5    libc.so.6                          0x00002b0721d3d460 __libc_start_main +
    245

    6    tmpym8xcara                        0x000055d1bf7e1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y: [Int] = []\n\
    \    for number in x {\n        var is_even = false\n        for i in number.description\
    \ {\n            if i.wholeNumberValue! % 2 == 0 {\n                is_even =\
    \ true\n                break\n            }\n        }\n        if !is_even {\n\
    \            y.append(number)\n        }\n    }\n    return y.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique = [Int]()\n\
    \    for i in x{\n        var num = i\n        var is_unique = true\n        while\
    \ num > 0 {\n            if (num % 10) % 2 == 0 {\n                is_unique =\
    \ false\n                break\n            }\n            num /= 10\n       \
    \ }\n        if is_unique {\n            unique.append(i)\n        }\n    }\n\
    \    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgyh7fvnw/tmpgyh7fvnw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7467b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7464acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7464ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7464ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyh7fvnw                        0x000055fbb847267c <unavailable> + 5756

    5    libc.so.6                          0x00002ae7469a1460 __libc_start_main +
    245

    6    tmpgyh7fvnw                        0x000055fbb8472279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return [1, 15, 33]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp70blx284/tmp70blx284.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae31e4ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae31e1d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae31e1d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae31e1d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70blx284                        0x00005612665b14d4 <unavailable> + 5332

    5    libc.so.6                          0x00002ae31e6c9460 __libc_start_main +
    245

    6    tmp70blx284                        0x00005612665b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var array = [Int]()\n\
    \    var temp = 0\n    for i in x {\n        temp = i\n        while temp > 0\
    \ {\n            if temp % 2 == 0 {\n                break\n            }\n  \
    \          temp /= 10\n        }\n        if temp == 0 {\n            array.append(i)\n\
    \        }\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\
    \ !$0.isEvenDigit }).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkd6y1xhv.swift:11:27: error: value of type 'Int' has no member\
    \ 'isEvenDigit'\n    return x.filter({ !$0.isEvenDigit }).sorted()\n         \
    \              ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n\treturn x.filter({\
    \ (num) -> Bool in\n\t\tnum.description.filter({ (char) -> Bool in\n\t\t\tchar.isNumber\
    \ && (Int(String(char))?.isMultiple(of: 2) == false)\n\t\t}).count == num.description.count\n\
    \t}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var even_array =\
    \ [Int]()\n    for i in x {\n        if i.evenDigits.count > 0 {\n           \
    \ even_array.append(i)\n        }\n    }\n    return even_array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphh2j5hrh.swift:13:14: error: value of type 'Int' has no member\
    \ 'evenDigits'\n        if i.evenDigits.count > 0 {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result : [Int]\
    \ = []\n    for num in x {\n        if !has_even_digit(x: num) {\n           \
    \ result.append(num)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2s6szir2.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(x: num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {$0.digits.contains(where: {$0 % 2 == 0})}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpx8fr_bvb.swift:11:25: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter {$0.digits.contains(where: {$0 % 2 == 0})}\n \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  //  print(\"x == \\\
    (x)\")\n    var evenNumbers = [Int]()\n    for i in x {\n        if (i % 2 ==\
    \ 0) {\n            evenNumbers.append(i)\n        }\n    }\n//  print(\"evenNumbers\
    \ == \\(evenNumbers)\")\n    return evenNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3jls2knk/tmp3jls2knk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c64c42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c64939b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c64939988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c649387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jls2knk                        0x0000560f4c0c067c <unavailable> + 5756

    5    libc.so.6                          0x00002b0c64e2e460 __libc_start_main +
    245

    6    tmp3jls2knk                        0x0000560f4c0c0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n\
    \    var even = 0\n    for i in x {\n        even = i\n        while (even !=\
    \ 0) {\n            if (even % 10) % 2 == 0 {\n                break\n       \
    \     }\n            even /= 10\n        }\n        if even == 0 {\n         \
    \   y.append(i)\n        }\n    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsukspzq5/tmpsukspzq5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d55711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d55408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d55408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d554077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsukspzq5                        0x00005609558d667c <unavailable> + 5756

    5    libc.so.6                          0x00002b7d558fd460 __libc_start_main +
    245

    6    tmpsukspzq5                        0x00005609558d6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var results = [Int]()\n\
    \    for num in x {\n        var has_even = false\n        for n in String(num)\
    \ {\n            if Int(String(n))! % 2 == 0 {\n                has_even = true\n\
    \                break\n            }\n        }\n        if !has_even {\n   \
    \         results.append(num)\n        }\n    }\n    return results.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n\
    \    for number in x {\n        var digit = number\n        var evenFound = false\n\
    \        while digit > 0 {\n            if digit % 2 == 0 {\n                evenFound\
    \ = true\n                break\n            }\n            digit /= 10\n    \
    \    }\n        if !evenFound {\n            y.append(number)\n        }\n   \
    \ }\n    return y.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.hasUniqueDigits() }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmxtcepys.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }.sorted()\n \
    \                     ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ {\n        for c in String($0) {\n            if c.isNumber && Int(String(c))!\
    \ % 2 == 0 {\n                return false\n            }\n        }\n       \
    \ return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptcv2gis5/tmptcv2gis5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b969d992c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b969d689b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b969d689988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b969d6887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcv2gis5                        0x000055e3f4ac97fc <unavailable> + 6140

    5    libc.so.6                          0x00002b969db7e460 __libc_start_main +
    245

    6    tmptcv2gis5                        0x000055e3f4ac93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp098680mx/tmp098680mx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e53d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e53a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e53a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e53a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098680mx                        0x000055d1ed7e43cc <unavailable> + 5068

    5    libc.so.6                          0x00002b7e53f49460 __libc_start_main +
    245

    6    tmp098680mx                        0x000055d1ed7e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    /// Print function\
    \ name, and pass in the input arguments\n    let context = \"\\(__FUNCTION__):\
    \ x -> \\(x)\"\n    /// Re-format input argument, for readability\n    let items\
    \ = x.map { \"\\($0)\" }\n    /// Print input argument, for readability\n    print(context,\
    \ items)\n    /// Implement \"unique_digits\" here\n    let result = x.filter\
    \ {\n        return !$0.description.contains {\n            $0.isNumber && $0.wholeNumberValue!\
    \ % 2 == 0\n        }\n    }\n    /// Print result, for readability\n    print(context,\
    \ result)\n    /// Return result\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpl3d8glw_.swift:12:22: error: __FUNCTION__ has been replaced with\
    \ #function in Swift 3\n    let context = \"\\(__FUNCTION__): x -> \\(x)\"\n \
    \                    ^~~~~~~~~~~~\n                     #function\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    let res = x.filter\
    \ { num in \n        var n = num\n        while n > 0 {\n            if n % 2\
    \ == 0 {\n                return false\n            }\n            n /= 10\n \
    \       }\n        return true\n    }\n    return res.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return [] as [Int]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprv39tuvp/tmprv39tuvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b58fcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b58cc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b58cc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b58cc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprv39tuvp                        0x000055d14f5e23cc <unavailable> + 5068

    5    libc.so.6                          0x00002b1b591ba460 __libc_start_main +
    245

    6    tmprv39tuvp                        0x000055d14f5e1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for n in x {\n        var flag = true\n        let str = String(n)\n\
    \        for c in str {\n            if Int(String(c))! % 2 == 0 {\n         \
    \       flag = false\n                break\n            }\n        }\n      \
    \  if flag {\n            result.append(n)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var a = [Int]()\n\
    \    for i in x {\n        var b = i\n        while (b > 0) {\n            if\
    \ (b % 2 == 0) {\n                break\n            }\n            b /= 10\n\
    \        }\n        if (b == 0) {\n            a.append(i)\n        }\n    }\n\
    \    return a.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\n\
    \        var hasEvenDigit = false\n        var number = $0\n        while number\
    \ > 0 {\n            let digit = number % 10\n            if digit % 2 == 0 {\n\
    \                hasEvenDigit = true\n                break\n            }\n \
    \           number /= 10\n        }\n        return !hasEvenDigit\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4b7y9zrm/tmp4b7y9zrm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e1872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e1569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e1569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e15687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4b7y9zrm                        0x000055ce10b4352c <unavailable> + 5420

    5    libc.so.6                          0x00002b49e1a5e460 __libc_start_main +
    245

    6    tmp4b7y9zrm                        0x000055ce10b43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for number in x {\n        if String(number).contains(\"2\") || String(number).contains(\"\
    4\") || String(number).contains(\"6\") || String(number).contains(\"8\") || String(number).contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(number)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter{\
    \ $0.isOddDigitNumber }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxemku_22.swift:11:25: error: value of type 'Int' has no member\
    \ 'isOddDigitNumber'\n    return x.filter{ $0.isOddDigitNumber }.sorted()\n  \
    \                   ~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter\
    \ { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpo8oij5l8.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0.isEven }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({$0\
    \ % 2 != 0})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpopsbsvja/tmpopsbsvja.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d6469c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d6160b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26d6160988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26d615f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopsbsvja                        0x00005645bc78752c <unavailable> + 5420

    5    libc.so.6                          0x00002b26d6655460 __libc_start_main +
    245

    6    tmpopsbsvja                        0x00005645bc787129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n  var result = [Int]()\n\
    \  var current = x.count - 1\n  while current >= 0 {\n    if has_even_digit(x:\
    \ x[current]) {\n      x.remove(at: current)\n    }\n    current -= 1\n  }\n \
    \ return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdcblewt7.swift:14:8: error: cannot find 'has_even_digit' in scope\n\
    \    if has_even_digit(x: x[current]) {\n       ^~~~~~~~~~~~~~\n/tmp/tmpdcblewt7.swift:15:9:\
    \ error: cannot use mutating member on immutable value: 'x' is a 'let' constant\n\
    \      x.remove(at: current)\n      ~ ^\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var uniqueDigitsArr\
    \ = [Int]()\n    for item in x {\n        let stringItem = String(item)\n    \
    \    var hasEven = false\n        for num in stringItem {\n            if Int(String(num))!\
    \ % 2 == 0 {\n                hasEven = true\n            }\n        }\n     \
    \   if !hasEven {\n            uniqueDigitsArr.append(item)\n        }\n    }\n\
    \    return uniqueDigitsArr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: -4
  program: "\n/// Given an array of positive integers x. return a sorted array of\
    \ all \n/// elements that hasn't any even digit.\n/// Note: Returned array should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var evenNumbers\
    \ = [Int]()\n    for number in x {\n        var current = number\n        while\
    \ current > 0 {\n            let digit = current % 10\n            if digit %\
    \ 2 == 0 {\n                evenNumbers.append(number)\n                break\n\
    \            }\n            current /= 10\n        }\n    }\n    var i = 0\n \
    \   while i < evenNumbers.count {\n        if x.contains(evenNumbers[i]) {\n \
    \           evenNumbers.remove(at: i)\n        } else {\n            i += 1\n\
    \        }\n    }\n    return evenNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmacn6yg7/tmpmacn6yg7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba2bfcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba2bcc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba2bcc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba2bcc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmacn6yg7                        0x000055687dff67ec <unavailable> + 6124

    5    libc.so.6                          0x00002aba2c1bb460 __libc_start_main +
    245

    6    tmpmacn6yg7                        0x000055687dff63e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659978523
