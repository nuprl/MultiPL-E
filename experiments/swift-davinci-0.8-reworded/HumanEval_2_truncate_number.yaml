name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double)\
  \ -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ['    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', "    let number_string = String(number)\n    if let index\
    \ = number_string.firstIndex(of: \".\") {\n        let string_value = number_string[index...]\n\
    \        return Double(string_value)!\n    }\n    return 0", '    return number
    - Double(Int(number))', '  return number - Double(Int(number))', '  return number.truncatingRemainder(dividingBy:
    1)', "    let integerPart = floor(number)\n    let decimalPart = number - integerPart\n\
    \    return decimalPart", "    if number < 0 {\n        return number.truncatingRemainder(dividingBy:\
    \ 1) + 1\n    }\n    return number.truncatingRemainder(dividingBy: 1)", "    let\
    \ number_as_string = \"\\(number)\"\n    let number_as_string_components = number_as_string.components(separatedBy:\
    \ \".\")\n    if number_as_string_components.count > 1 {\n        let decimal_part\
    \ = number_as_string_components[1]\n        return Double(\"0.\\(decimal_part)\"\
    )!\n    }\n    return 0", "    let number_as_string = String(number)\n    guard\
    \ let decimal_location = number_as_string.firstIndex(of: \".\") else {\n     \
    \   return 0\n    }\n    let decimal_index = number_as_string.distance(from: number_as_string.startIndex,\
    \ to: decimal_location)\n    return Double(number_as_string.suffix(from: number_as_string.index(number_as_string.startIndex,\
    \ offsetBy: decimal_index)))!", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - (number.rounded(.towardZero))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', "    let int_part = floor(number)\n\
    \    return number - int_part", "    let int_part = Int(number)\n    return number\
    \ - Double(int_part)", '    return abs(number - trunc(number))', '  return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - floor(number)', "    if number >= 0 {\n        return number - Double(Int(number))\n\
    \    } else {\n        return number - Double(Int(number) + 1)\n    }", '    return
    number - Double(Int(number))', "    var number = number\n    let multiplier =\
    \ pow(10.0, Double(Constants.DECIMAL_PLACES))\n    number *= multiplier\n    number.round()\n\
    \    number /= multiplier\n    return number", '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', "    let int_part\
    \ = Int(number)\n    return number - Double(int_part)", "    let integers = floor(number)\n\
    \    return number - integers", '    return number - floor(number)', "    var\
    \ number = number\n    let precision = 100.0\n    number = floor(number * precision)\
    \ / precision\n    return number", "    let decimal = number.truncatingRemainder(dividingBy:\
    \ 1)\n    return decimal", '    return number - Double(Int(number))', '    return
    number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', "    var fractionalPart: Double = number.truncatingRemainder(dividingBy:\
    \ 1)\n    if (fractionalPart < 0) {\n        fractionalPart += 1\n    }\n    return\
    \ fractionalPart", '    return number.truncatingRemainder(dividingBy: 1)', '    return
    number - Double(Int(number))', "    let number = abs(number)\n    let integer_part\
    \ = floor(number)\n    let decimal_part = number - integer_part\n    return decimal_part",
  "    let decimal = number.truncatingRemainder(dividingBy: 1)\n    return decimal",
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  "    let integral = floor(number)\n    return number - integral", '    return number.truncatingRemainder(dividingBy:
    1)', "  let truncated = floor(number)\n  return number - truncated", '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '  return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', "    var truncated = floor(number)\n\
    \    return (number - truncated)", '    return number - floor(number)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '    return number.truncatingRemainder(dividingBy: 1)',
  '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  "    let number = number\n    var integer = 0\n    for i in 1...Int(number) {\n\
    \        integer = i\n    }\n    let truncated = number - Double(integer)\n  \
    \  return truncated", '    return number - Double(Int(number))', '    return number
    - Double(Int(number))', '    return number - floor(number)', "    if (number >\
    \ 0) {\n        return number - Double(Int(number))\n    } else {\n        return\
    \ number - Double(Int(number)) + 1\n    }", "    let truncate = floor(number)\n\
    \    return number - truncate", "    let integer = floor(number)\n    return number\
    \ - integer", "    let integer_part = floor(number)\n    return number - integer_part",
  '    return number - Double(Int(number))', "    let truncated_number = trunc(number)\n\
    \    return number - truncated_number", "    let integer_part = Double(floor(number))\n\
    \    return number - integer_part", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  '    return number - floor(number)', "    var decimal: Double\n    decimal = number.truncatingRemainder(dividingBy:\
    \ 1)\n    return decimal", '    return floor(number)', '    return number - floor(number)',
  "    if number > 0 {\n        return number - Double(Int(number))\n    } else {\n\
    \        return number - Double(Int(number))\n    }", '    return number - floor(number)',
  "    var integer: Double = 0\n    return modf(number, &integer)", "    var truncated\
    \ = 0.0\n    truncated = floor(number)\n    return number - truncated", '    return
    number - Double(Int(number))', "    let number_integral_part = floor(number)\n\
    \    let number_decimal_part = number - number_integral_part\n    return number_decimal_part",
  '    return number - floor(number)', "    if number.truncatingRemainder(dividingBy:\
    \ 1) < 0 {\n        return number.truncatingRemainder(dividingBy: 1) + 1\n   \
    \ }\n    return number.truncatingRemainder(dividingBy: 1)", "  let integer = Int(number)\n\
    \  return number - Double(integer)", "    let number_string = String(number)\n\
    \    let index = number_string.index(of: \".\")!\n    let truncated_string = number_string[..<index]\n\
    \    return Double(truncated_string)!", "    let int_part = Int(number)\n    return\
    \ number - Double(int_part)", '    return number - floor(number)', '    return
    number.truncatingRemainder(dividingBy: 1)', "    let integer_part = Int(number)\n\
    \    return number - Double(integer_part)", "    var truncated = number;\n   \
    \ truncated -= truncate(number)\n    return truncated", '    return number.truncatingRemainder(dividingBy:
    1)', '  return number.truncatingRemainder(dividingBy: 1)', "    let truncated\
    \ = floor(number)\n    return number - truncated", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', "    let n = Int(number)\n    return\
    \ number - Double(n)", "    let number_as_string = String(number)\n    let number_as_string_arr\
    \ = number_as_string.split(separator: \".\")\n    let decimals = String(number_as_string_arr[1])\n\
    \    return Double(decimals)!", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - Double(Int(number))', '  return number.truncatingRemainder(dividingBy: 1)',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number - floor(number)',
  '    return Double(number.truncatingRemainder(dividingBy: 1))', '    return number
    - floor(number)', "    let cast_number = number\n    let decimal_part = cast_number\
    \ - Double(Int(cast_number))\n    return decimal_part", '    return number - Double(Int(number))',
  '    return number - Double(Int(number))', "    if(!number.isNaN) {\n        return\
    \ number - floor(number)\n    }\n    return Double.nan", '    return number -
    floor(number)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', "    var integer_part: Double = 0\n    return modf(number, &integer_part)",
  '    return floor(number.truncatingRemainder(dividingBy: 1))', '    return number
    - Double(Int(number))', '    return number - Double(Int(number))', '    return
    number - truncate(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', "  var int_part = 0.0\n  return modf(number, &int_part)", '  return number.truncatingRemainder(dividingBy:
    1)', "    let x = floor(number)\n    return number - x", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - floor(number)',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', "    var number = number\n    while number >= 1 {\n        number -= 1\n\
    \    }\n    return number", '    return number - floor(number)', '    return number
    - Double(Int(number))', '    return number - floor(number)', "    let number_int\
    \ = Int(number)\n    return number - Double(number_int)", '  return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', "  var integer_part: Double = 0\n  let decimal_part = modf(number, &integer_part)\n\
    \  return decimal_part", '    return number.truncatingRemainder(dividingBy: 1)',
  '    return number - Double(Int(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number.truncatingRemainder(dividingBy: 1)', '    return number
    - floor(number)', '    return number - floor(number)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - floor(number)', '  return number - Double(Int(number))',
  '    return (number - truncate(number))', "    var result = number - Double(Int(number))\n\
    \    if (result < 0) {\n        result = 0\n    }\n    return result", "  let\
    \ truncated = floor(number)\n  return number - truncated", '    return number.truncatingRemainder(dividingBy:
    1)', "    let large_number = Double(Int64(number))\n    let decimal_part = number\
    \ - large_number\n    return decimal_part", "  let float = number - Double(Int(number))\n\
    \  return float", '    return number - Double(Int(number))', '    return number
    - Double(Int(number))', '    return number - (Double(Int(number)))', '    return
    number - floor(number)', "    let num = number.rounded(.towardZero)\n    return\
    \ number - num", '    return number - floor(number)', '    return number - Double(Int(number))',
  '    return number - floor(number)', "    let int_part = Int(number)\n    return\
    \ number - Double(int_part)", '  return number.truncatingRemainder(dividingBy:
    1)', "    let int_part = Int(number)\n    return number - Double(int_part)", " \
    \   let integer_part = Int(number)\n    return number - Double(integer_part)",
  "    var temp_number = number\n\n    // There might be a bug in Swift's floor()\
    \ function that causes floor(-0.1) to be 0\n    // instead of -1\n    if temp_number\
    \ < 0 {\n        temp_number = abs(temp_number)\n    }\n\n    let whole_number\
    \ = floor(temp_number)\n    let decimal_part = temp_number - whole_number\n\n\
    \    if number < 0 {\n        return -decimal_part\n    } else {\n        return\
    \ decimal_part\n    }", '    return floor(number)', "    let intPart = Int(number)\n\
    \    return number - Double(intPart)", '    return (number.truncatingRemainder(dividingBy:
    1.0))', "    var num = number\n    var int_part = 0.0\n    if (num > 0) {\n  \
    \      int_part = floor(num)\n    } else {\n        int_part = ceil(num)\n   \
    \ }\n    return number - int_part", '    return number.truncatingRemainder(dividingBy:
    1)', "  if number < 0 {\n    return 0\n  }\n  return number - Double(Int(number))",
  '    return abs(number - Double(Int(number)))', '    return number.truncatingRemainder(dividingBy:
    1)', "    let int_part = Int(number)\n    return number - Double(int_part)", '    return
    number.truncatingRemainder(dividingBy: 1)', '    return number - Double(Int(number))',
  '    return number.truncatingRemainder(dividingBy: 1)', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))']
stop_tokens:
- "\n}"
