name: HumanEval_61_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"(\" and \")\".\n/// return true if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
  \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n///\
  \ >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
  \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
  \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
  ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
  \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
  \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets:\
  \ \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\")\
  \ == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)"
completions: ["    var paren_count = 0\n    for paren in brackets {\n        if paren\
    \ == \"(\" {\n            paren_count += 1\n        } else if paren == \")\" {\n\
    \            paren_count -= 1\n        }\n        if paren_count < 0 {\n     \
    \       return false\n        }\n    }\n    return paren_count == 0", "    var\
    \ chars = Array(brackets)\n    var stack = Stack<Character>()\n    for char in\
    \ chars {\n        if char == \"(\" {\n            stack.push(char)\n        }\
    \ else if char == \")\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()", "    var leftBrackets: Int = 0\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            leftBrackets\
    \ += 1\n        } else if bracket == \")\" {\n            leftBrackets -= 1\n\
    \        }\n        if leftBrackets < 0 {\n            return false\n        }\n\
    \    }\n    return leftBrackets == 0", '  return true', "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"(\" {\n            stack.push(item:\
    \ char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n\
    \                return false\n            } else {\n                _ = stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", '    return true',
  "    var stack: [Character] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.last == \"(\" {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty", "    let n = brackets.count\n    var data =\
    \ Array(repeating: 0, count: n)\n    var counter = 0\n    for (index, char) in\
    \ brackets.enumerated() {\n        if char == \"(\" {\n            counter +=\
    \ 1\n        } else {\n            counter -= 1\n        }\n        data[index]\
    \ = counter\n    }\n    for i in 0..<n {\n        if data[i] < 0 {\n         \
    \   return false\n        }\n    }\n    return data[n - 1] == 0", '    return
    false', "    var open = 0\n    for ch in brackets {\n        if ch == \"(\" {\n\
    \            open += 1\n        } else if ch == \")\" {\n            open -= 1\n\
    \        }\n        if open < 0 {\n            return false\n        }\n    }\n\
    \    return open == 0", "    var count = 0\n    for (index,character) in brackets.enumerated()\
    \ {\n        if character == \"(\" {\n            count += 1\n        } else if\
    \ character == \")\" {\n            count -= 1\n        }\n        if count <\
    \ 0 {\n            return false\n        }\n    }\n    return count == 0", " \
    \   let b = Array(brackets)\n    var counter = 0\n    for bracket in b {\n   \
    \     if bracket == \"(\" {\n            counter += 1\n        } else if bracket\
    \ == \")\" {\n            counter -= 1\n        }\n        if counter < 0 {\n\
    \            return false\n        }\n    }\n    return counter == 0", "    var\
    \ stack: [Character] = []\n    for bracket in brackets {\n        if bracket ==\
    \ \"(\" {\n            stack.append(bracket)\n        } else if bracket == \"\
    )\" {\n            if stack.count > 0 {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.count == 0", "    var stack = [Character]()\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            stack.append(c)\n    \
    \    } else if c == \")\" {\n            if stack.isEmpty {\n                return\
    \ false\n            } else {\n                stack.removeLast()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for ch in brackets {\n        if ch == \"(\" {\n            stack.push(ch)\n\
    \        } else if ch == \")\" {\n            guard stack.pop() != nil else {\n\
    \                return false\n            }\n        }\n    }\n    return stack.isEmpty",
  "    var openBracketsCount = 0\n    for char in brackets {\n        if char == \"\
    (\" {\n            openBracketsCount += 1\n        } else if char == \")\" {\n\
    \            openBracketsCount -= 1\n        }\n        if openBracketsCount <\
    \ 0 {\n            return false\n        }\n    }\n    return openBracketsCount\
    \ == 0", '    return true', "    var brackets = brackets\n    var bracket_stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    (\" {\n            bracket_stack.push(bracket)\n        } else if bracket == \"\
    )\" {\n            guard let popped_bracket = bracket_stack.pop() else {\n   \
    \             return false\n            }\n            if popped_bracket != \"\
    (\" {\n                return false\n            }\n        }\n    }\n    return\
    \ bracket_stack.isEmpty", '    return true', "    var stack: [Character] = []\n\
    \    var counter = 0\n    for char in brackets {\n        if char == \"(\" {\n\
    \            stack.append(char)\n            counter += 1\n        } else if char\
    \ == \")\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n                counter\
    \ -= 1\n            }\n        }\n    }\n    return counter == 0", "    var stack\
    \ = [Character]()\n    var currentChar: Character\n    for character in brackets\
    \ {\n        currentChar = character\n        if (currentChar == \"(\") {\n  \
    \          stack.append(currentChar)\n        } else if (currentChar == \")\"\
    ) {\n            if (stack.count == 0) {\n                return false\n     \
    \       } else {\n                stack.removeLast()\n            }\n        }\n\
    \    }\n    return stack.count == 0", "    var open_brackets = 0\n    for bracket\
    \ in brackets {\n        if bracket == \"(\" {\n            open_brackets += 1\n\
    \        } else if bracket == \")\" {\n            open_brackets -= 1\n      \
    \  }\n        if open_brackets < 0 {\n            return false\n        }\n  \
    \  }\n    return open_brackets == 0", "    var stack = [Character]()\n    for\
    \ char in brackets {\n        if char == \"(\" {\n            stack.append(char)\n\
    \        } else if char == \")\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for c in brackets {\n        if c == \"(\" {\n     \
    \       stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty\
    \ {\n                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    if brackets.isEmpty\
    \ {\n        return true\n    } else if brackets.hasPrefix(\"(\") && brackets.hasSuffix(\"\
    )\") {\n        return correct_bracketing(brackets: String(brackets.dropFirst().dropLast()))\n\
    \    } else {\n        return false\n    }", '    return false', "    var stack:\
    \ [Character] = []\n    for char in brackets {\n        if char == \"(\" {\n \
    \           stack.append(char)\n        } else if char == \")\" {\n          \
    \  if stack.isEmpty {\n                return false\n            } else {\n  \
    \              stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var numberOfOpenBrackets = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            numberOfOpenBrackets += 1\n  \
    \      } else if bracket == \")\" {\n            numberOfOpenBrackets -= 1\n \
    \       }\n        if numberOfOpenBrackets < 0 {\n            return false\n \
    \       }\n    }\n    return numberOfOpenBrackets == 0", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack: [String]\
    \ = []\n    for char in brackets {\n        if char == \"(\" {\n            stack.append(String(char))\n\
    \        } else if char == \")\" {\n            if stack.count == 0 {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0", '    return false',
  "    var numOpen = 0\n    for char in brackets {\n        if char == \"(\" {\n \
    \           numOpen += 1\n        } else if char == \")\" {\n            numOpen\
    \ -= 1\n        }\n        if numOpen < 0 {\n            return false\n      \
    \  }\n    }\n    return numOpen == 0", "    var brackets_stack: [Character] =\
    \ []\n    for char in brackets {\n        if char == \"(\" {\n            brackets_stack.append(char)\n\
    \        } else if char == \")\" {\n            if brackets_stack.isEmpty {\n\
    \                return false\n            } else {\n                _ = brackets_stack.popLast()\n\
    \            }\n        }\n    }\n    return brackets_stack.isEmpty", "    var\
    \ sum: Int = 0\n    for bracket in brackets {\n        switch bracket {\n    \
    \    case \"(\":\n            sum += 1\n        case \")\":\n            sum -=\
    \ 1\n        default:\n            print(\"Error: Unexpected bracket!\\n\")\n\
    \            return false\n        }\n        if sum < 0 {\n            return\
    \ false\n        }\n    }\n    return sum == 0", "    var cnt = 0\n    for char\
    \ in brackets {\n        if char == \"(\" {\n            cnt += 1\n        } else\
    \ if char == \")\" {\n            cnt -= 1\n        }\n        if cnt < 0 {\n\
    \            return false\n        }\n    }\n    return cnt == 0", "    var dict:\
    \ [Character: Int] = [\"(\": 1, \")\": -1]\n    var sum = 0\n    for b in brackets\
    \ {\n        sum += dict[b]!\n        if sum < 0 {\n            return false\n\
    \        }\n    }\n    return sum == 0", "    \n    let list = Array(brackets)\n\
    \    var index = 0\n    for value in list {\n        if value == \"(\" {\n   \
    \         index += 1\n        } else {\n            index -= 1\n        }\n  \
    \      if index < 0 {\n            return false\n        }\n    }\n    return\
    \ index == 0", '    return false', "    var counter = 0\n    for c in brackets\
    \ {\n        if c == \"(\" {\n            counter += 1\n        } else if c ==\
    \ \")\" {\n            counter -= 1\n        }\n        if counter < 0 {\n   \
    \         return false\n        }\n    }\n    return counter == 0", '    return
    false', "    let opening_brackets = \"(\"\n    let closing_brackets = \")\"\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if opening_brackets.contains(char)\
    \ {\n            stack.append(char)\n        } else if closing_brackets.contains(char)\
    \ {\n            guard let last_bracket = stack.popLast() else {\n           \
    \     return false\n            }\n            if !opening_brackets.contains(last_bracket)\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var openBrackets: Int = 0\n    for c in brackets {\n  \
    \      if c == \"(\" {\n            openBrackets += 1\n        } else if c ==\
    \ \")\" {\n            openBrackets -= 1\n        }\n        if openBrackets <\
    \ 0 {\n            return false\n        }\n    }\n    return openBrackets ==\
    \ 0", '    return true', "    // write your solution here\n    var count = 0\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            count\
    \ += 1\n        } else if bracket == \")\" {\n            count -= 1\n       \
    \ }\n        if count < 0 {\n            return false\n        }\n    }\n    return\
    \ count == 0", "    var list = [Character]()\n    for i in brackets.characters\
    \ {\n        list.append(i)\n    }\n    var count = 0\n    for i in list {\n \
    \       if i == \"(\" {\n            count += 1\n        } else if i == \")\"\
    \ {\n            count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    if count == 0 {\n        return true\n    } else\
    \ {\n        return false\n    }", "    var stack: [String] = []\n    for char\
    \ in brackets {\n        if char == \"(\" {\n            stack.append(String(char))\n\
    \        } else if char == \")\" {\n            if stack.count == 0 {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0", '    return false',
  "    var stack = \"\"\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            stack += \"(\"\n        } else if stack.isEmpty {\n         \
    \   return false\n        } else {\n            stack.removeLast()\n        }\n\
    \    }\n    return stack.isEmpty", "    // this is a stack implementation, which\
    \ is a list used to store the order\n    // of items. This is useful because the\
    \ first item you add is the last one\n    // you remove.\n    var stack: [Character]\
    \ = []\n    // iterate over each bracket\n    for bracket in brackets {\n    \
    \    // if the bracket is an opening bracket, then add it to the end of the\n\
    \        // stack\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else {\n            // if it's a closing bracket, then make sure it's\
    \ not being added to\n            // an empty stack\n            if stack.isEmpty\
    \ {\n                return false\n            }\n            // also, remove\
    \ the last opening bracket from the stack\n            stack.removeLast()\n  \
    \      }\n    }\n    // the brackets are correct if the stack is empty\n    return\
    \ stack.isEmpty", "    let bracketArray = Array(brackets)\n    var count = 0\n\
    \    for bracket in bracketArray {\n        if bracket == \"(\" {\n          \
    \  count += 1\n        } else if bracket == \")\" {\n            count -= 1\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0", "    var stack = [String]()\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            stack.append(String(bracket))\n\
    \        } else if bracket == \")\" {\n            if stack.count == 0 {\n   \
    \             return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0", '    return false',
  "    //TODO: Implement this function\n    return false", "    \n    var stack: [Character]\
    \ = []\n    \n    for bracket in brackets {\n        if bracket == \"(\" {\n \
    \           stack.append(bracket)\n        } else if bracket == \")\" {\n    \
    \        if stack.last == \"(\" {\n                stack.removeLast()\n      \
    \      } else {\n                return false\n            }\n        }\n    }\n\
    \    \n    return stack.isEmpty", "    let openingBrackets: [Character] = [\"\
    (\", \"[\", \"{\"]\n    let closingBrackets: [Character] = [\")\", \"]\", \"}\"\
    ]\n    var openBrackets: [Character] = []\n    for bracket in brackets {\n   \
    \     if openingBrackets.contains(bracket) {\n            openBrackets.append(bracket)\n\
    \        } else if closingBrackets.contains(bracket) {\n            if openingBrackets.firstIndex(of:\
    \ bracket) == closingBrackets.firstIndex(of: bracket) {\n                return\
    \ false\n            }\n            openBrackets.removeLast()\n        }\n   \
    \ }\n    return openBrackets.isEmpty", "    var stack = Stack<Character>()\n \
    \   for c in brackets {\n        if c == \"(\" {\n            stack.push(c)\n\
    \        } else if stack.isEmpty() {\n            return false\n        } else\
    \ {\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()", " \
    \   var left_brackets = 0\n    for character in brackets {\n        if character\
    \ == \"(\" {\n            left_brackets += 1\n        } else if character == \"\
    )\" {\n            left_brackets -= 1\n        }\n        if left_brackets < 0\
    \ {\n            return false\n        }\n    }\n    return left_brackets == 0",
  "    var numberOfOpenBrackets = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            numberOfOpenBrackets += 1\n        } else if bracket\
    \ == \")\" {\n            numberOfOpenBrackets -= 1\n        }\n        if numberOfOpenBrackets\
    \ < 0 {\n            return false\n        }\n    }\n    return numberOfOpenBrackets\
    \ == 0", "    // Your code here!\n    if brackets.count == 0 {\n        return\
    \ true\n    }\n    if brackets.count % 2 != 0 {\n        return false\n    }\n\
    \    let stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"(\" {\n            stack.push(c)\n        } else {\n            if stack.isEmpty\
    \ {\n                return false\n            }\n            let c1 = stack.pop()\n\
    \            if c1 != \"(\" {\n                return false\n            }\n \
    \       }\n    }\n    return stack.isEmpty", "    var stack: [Character] = []\n\
    \    for char in brackets {\n        if char == \"(\" {\n            stack.append(char)\n\
    \        } else if char == \")\" {\n            if let last = stack.popLast()\
    \ {\n                if last != \"(\" {\n                    return false\n  \
    \              }\n            } else {\n                return false\n       \
    \     }\n        }\n    }\n    return stack.isEmpty", '  return true', "    var\
    \ leftCount = 0\n    var rightCount = 0\n    for char in brackets.characters {\n\
    \        if char == \"(\" {\n            leftCount += 1\n        } else if char\
    \ == \")\" {\n            rightCount += 1\n        }\n        if rightCount >\
    \ leftCount {\n            return false\n        }\n    }\n    return leftCount\
    \ == rightCount", "    var leftBrackets: Int = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            leftBrackets += 1\n        } else\
    \ if bracket == \")\" {\n            leftBrackets -= 1\n        }\n        if\
    \ leftBrackets < 0 {\n            return false\n        }\n    }\n    return leftBrackets\
    \ == 0", "    var counter = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            counter += 1\n        } else if bracket == \")\" {\n\
    \            counter -= 1\n        }\n        if counter < 0 {\n            return\
    \ false\n        }\n    }\n    return counter == 0", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"(\" {\n            stack.push(char)\n\
    \        } else if char == \")\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var openBrackets\
    \ = [Character]()\n    for char in brackets {\n        if char == \"(\" {\n  \
    \          openBrackets.append(char)\n        } else if char == \")\" {\n    \
    \        if openBrackets.isEmpty {\n                return false\n           \
    \ } else {\n                openBrackets.removeLast()\n            }\n       \
    \ }\n    }\n    return openBrackets.isEmpty", '  return false', "    var open_brackets:\
    \ [String] = []\n    for bracket in brackets {\n        if bracket == \"(\" {\n\
    \            open_brackets.append(\"(\")\n        } else if bracket == \")\" {\n\
    \            if open_brackets.last == \"(\" {\n                open_brackets.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return open_brackets.isEmpty", "  // TODO\n  return false", "    var\
    \ count = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n  \
    \          count += 1\n        } else if bracket == \")\" {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    var open_count = 0\n    for i in brackets\
    \ {\n        if i == \"(\" {\n            open_count += 1\n        } else if i\
    \ == \")\" {\n            open_count -= 1\n        }\n        if open_count <\
    \ 0 {\n            return false\n        }\n    }\n    return open_count == 0",
  "    var st = Stack<String>()\n    var s = brackets\n    while !s.isEmpty {\n  \
    \      let bracket = s.popLast()!\n        if bracket == \"(\" {\n           \
    \ st.push(bracket)\n        } else {\n            if st.isEmpty {\n          \
    \      return false\n            } else {\n                st.pop()\n        \
    \    }\n        }\n    }\n    return st.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var stack:\
    \ [String] = []\n    for bracket in brackets {\n        if bracket == \"(\" {\n\
    \            stack.append(String(bracket))\n        } else if bracket == \")\"\
    \ {\n            if stack.count == 0 {\n                return false\n       \
    \     } else {\n                stack.removeLast()\n            }\n        }\n\
    \    }\n    return stack.count == 0", "    var check_brackets = 0\n    for char\
    \ in brackets {\n        if char == \"(\" {\n            check_brackets += 1\n\
    \        } else if char == \")\" {\n            check_brackets -= 1\n        }\n\
    \        if check_brackets < 0 {\n            return false\n        }\n    }\n\
    \    return check_brackets == 0", "    let bracketsArray = Array(brackets)\n \
    \   var stack: [Character] = []\n    for char in bracketsArray {\n        if char\
    \ == \"(\" {\n            stack.append(char)\n        } else if char == \")\"\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                _ = stack.popLast()\n            }\n        }\n \
    \   }\n    return stack.isEmpty", '    return false', "    if brackets.count ==\
    \ 0 {\n        return true\n    }\n    if brackets.count % 2 != 0 {\n        return\
    \ false\n    }\n    let bracketArray = Array(brackets)\n    var checkArray = [Character]()\n\
    \    for bracket in bracketArray {\n        if bracket == \"(\" {\n          \
    \  checkArray.append(bracket)\n        } else {\n            if checkArray.isEmpty\
    \ {\n                return false\n            } else {\n                checkArray.removeLast()\n\
    \            }\n        }\n    }\n    return checkArray.isEmpty", "    var num\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    num += 1\n        } else if bracket == \")\" {\n            num -= 1\n  \
    \      }\n        if num < 0 {\n            return false\n        }\n    }\n \
    \   return num == 0", "    // TODO: Implement your code here!\n    return false",
  "    let stack = Stack<Character>()\n    for character in brackets {\n        if\
    \ character == \"(\" {\n            stack.push(character)\n        } else if character\
    \ == \")\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty", "  var counter = 0\n  for char in brackets\
    \ {\n    if char == \"(\" {\n      counter += 1\n    } else if char == \")\" {\n\
    \      counter -= 1\n    }\n    if counter < 0 {\n      return false\n    }\n\
    \  }\n  return counter == 0", "    var stack: [Character] = []\n    for bracket\
    \ in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack :\
    \ [String] = []\n    for bracket in brackets {\n        if bracket == \"(\" {\n\
    \            stack.append(\"(\")\n        } else if bracket == \")\" {\n     \
    \       if stack.count == 0 {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.count == 0", "    var buffer: [Character] = []\n    for c in brackets\
    \ {\n        if c == \"(\" {\n            buffer.append(c)\n        } else if\
    \ c == \")\" {\n            if buffer.count == 0 {\n                return false\n\
    \            }\n            if buffer.popLast() == \"(\" {\n                continue\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return buffer.count == 0", "    var stack = Stack<Character>()\n \
    \   for char in brackets {\n        if char == \"(\" {\n            stack.push(char)\n\
    \        } else if char == \")\" {\n            if stack.peek() == \"(\" {\n \
    \               stack.pop()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for c in brackets {\n        if c == \"(\" {\n     \
    \       stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty\
    \ {\n                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    // TODO: write\
    \ your code here!\n    return false", "    \n    return false", '    return false',
  "    // YOUR CODE HERE\n    return false", "    // TODO: Implement\n    return false",
  '    return false', '    return true', "    var open = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            open += 1\n        } else if bracket\
    \ == \")\" {\n            open -= 1\n        }\n        if open < 0 {\n      \
    \      return false\n        }\n    }\n    return open == 0", "    var open_brackets\
    \ = [Character]()\n    for b in brackets {\n        if b == \"(\" {\n        \
    \    open_brackets.append(b)\n        } else if b == \")\" {\n            if open_brackets.count\
    \ == 0 {\n                return false\n            }\n            open_brackets.removeLast()\n\
    \        }\n    }\n    return open_brackets.count == 0", "    var newString =\
    \ \"\"\n    for char in brackets {\n        if char == \"(\" {\n            newString.append(char)\n\
    \        } else if char == \")\" {\n            if newString.count > 0 {\n   \
    \             newString.removeLast()\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return newString.count == 0", " \
    \ var bracket_stack = [Character]()\n  for ch in brackets {\n    if ch == \"(\"\
    \ {\n      bracket_stack.append(ch)\n    } else if ch == \")\" {\n      if bracket_stack.isEmpty\
    \ {\n        return false\n      }\n      bracket_stack.removeLast()\n    }\n\
    \  }\n  return bracket_stack.isEmpty", "    var bracket_stack: [Character] = []\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            bracket_stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if bracket_stack.isEmpty {\n\
    \                return false\n            } else {\n                bracket_stack.removeLast()\n\
    \            }\n        }\n    }\n    return bracket_stack.isEmpty", '    return
    correct_bracketing(brackets: Array(brackets), count: 0)', "    var count = 0\n\
    \    for char in brackets {\n        if char == \"(\" {\n            count +=\
    \ 1\n        } else if char == \")\" {\n            count -= 1\n        }\n  \
    \      if count < 0 {\n            return false\n        }\n    }\n    return\
    \ count == 0", "    var openBrackets = 0\n    for c in brackets {\n        if\
    \ c == \"(\" {\n            openBrackets += 1\n        } else if c == \")\" {\n\
    \            openBrackets -= 1\n        }\n        if openBrackets < 0 {\n   \
    \         return false\n        }\n    }\n    return openBrackets == 0", '    return
    false', "    // count the left and right brackets\n    var left_count = 0\n  \
    \  var right_count = 0\n    for bracket in brackets {\n        if bracket == \"\
    (\" {\n            left_count += 1\n        } else if bracket == \")\" {\n   \
    \         right_count += 1\n        }\n    }\n    // ensure the number of left\
    \ and right brackets are equal\n    if left_count != right_count {\n        return\
    \ false\n    }\n    // ensure left brackets always appears first\n    var last_seen_char\
    \ = \"\"\n    for bracket in brackets {\n        if bracket == \")\" && last_seen_char\
    \ == \")\" {\n            return false\n        }\n        last_seen_char = bracket\n\
    \    }\n    return true", "    var count = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            count += 1\n        } else if bracket\
    \ == \")\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0", "    var counter\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    counter += 1\n        } else if bracket == \")\" {\n            counter -=\
    \ 1\n        }\n        if counter < 0 {\n            return false\n        }\n\
    \    }\n    return counter == 0", "    var stack = Array<Character>()\n    for\
    \ bracket in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.count == 0 {\n   \
    \             return false\n            }\n            stack.removeLast()\n  \
    \      }\n    }\n    return stack.count == 0", '    return false', "    // TODO:\
    \ please write your code here\n    return false", "    var openBrackets = 0\n\
    \    for character in brackets {\n        if character == \"(\" {\n          \
    \  openBrackets += 1\n        } else if character == \")\" {\n            openBrackets\
    \ -= 1\n        }\n        if openBrackets < 0 {\n            return false\n \
    \       }\n    }\n    return openBrackets == 0", "    var count = 0\n    for char\
    \ in brackets {\n        if char == \"(\" {\n            count += 1\n        }\
    \ else if char == \")\" {\n            count -= 1\n        }\n        if count\
    \ < 0 {\n            return false\n        }\n    }\n    return count == 0", " \
    \   let open_brackets = \"(\"\n    let closed_brackets = \")\"\n    var count\
    \ = 0\n    var split_brackets = Array(brackets)\n    var is_correct = true\n \
    \   for i in split_brackets {\n        if i == Character(open_brackets) {\n  \
    \          count += 1\n        } else if i == Character(closed_brackets) {\n \
    \           count -= 1\n        }\n        if count < 0 {\n            is_correct\
    \ = false\n        }\n    }\n    if count != 0 {\n        is_correct = false\n\
    \    }\n    return is_correct", '    return true', "  let brackets = Array(brackets)\n\
    \  var count = 0\n  for bracket in brackets {\n    if bracket == \"(\" {\n   \
    \   count += 1\n    } else if bracket == \")\" {\n      count -= 1\n    }\n  \
    \  if count < 0 {\n      return false\n    }\n  }\n  return count == 0", "   \
    \ var count = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n\
    \            count += 1\n        } else if bracket == \")\" {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", '    return true', "    var count = 0\n    for\
    \ char in brackets {\n        if char == \"(\" {\n            count += 1\n   \
    \     } else if char == \")\" {\n            count -= 1\n        }\n        if\
    \ count < 0 {\n            return false\n        }\n    }\n    return count ==\
    \ 0", "    var cnt = 0\n    for i in brackets {\n        if i == \"(\" {\n   \
    \         cnt += 1\n        } else if i == \")\" {\n            cnt -= 1\n   \
    \     }\n        if cnt < 0 {\n            return false\n        }\n    }\n  \
    \  return cnt == 0", "    var stack = [Character]()\n    for c in brackets {\n\
    \        if c == \"(\" {\n            stack.append(c)\n        } else if c ==\
    \ \")\" {\n            if stack.last == \"(\" {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty", "    return brackets.reduce(0) { (res, char)\
    \ -> Int in\n        if res < 0 {\n            return res\n        }\n       \
    \ if char == \"(\" {\n            return res + 1\n        } else {\n         \
    \   return res - 1\n        }\n    } == 0", "    var stack: [Character] = []\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.last == \"(\" {\n\
    \                stack.removeLast()\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return stack.isEmpty", "    var\
    \ s: [Character] = []\n    for c in brackets {\n        if c == \"(\" {\n    \
    \        s.append(c)\n        } else if c == \")\" {\n            if s.isEmpty\
    \ {\n                return false\n            } else {\n                s.removeLast()\n\
    \            }\n        }\n    }\n    return s.isEmpty", "    var stack: [Character]\
    \ = []\n    for c in brackets {\n        if c == \"(\" {\n            stack.append(c)\n\
    \        } else if c == \")\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    \n    var count\
    \ = 0\n    \n    for i in brackets {\n        if i == \"(\" {\n            count\
    \ += 1\n        } else if i == \")\" {\n            count -= 1\n        }\n  \
    \      if count < 0 {\n            return false\n        }\n    }\n    \n    return\
    \ count == 0", "    var stack: [String] = []\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            stack.append(String(bracket))\n  \
    \      } else if bracket == \")\" {\n            if stack.isEmpty {\n        \
    \        return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    // your code\
    \ here\n    var st = Stack<Character>()\n    for char in brackets {\n        if\
    \ char == \"(\" {\n            st.push(char)\n        } else if char == \")\"\
    \ {\n            if let top = st.pop() {\n                if top != \"(\" {\n\
    \                    return false\n                }\n            } else {\n \
    \               return false\n            }\n        }\n    }\n    return st.isEmpty",
  "  var s = Stack<Character>()\n  for char in brackets {\n    if char == \"(\" {\n\
    \      s.push(char)\n    } else if char == \")\" {\n      guard s.pop() != nil\
    \ else {\n        return false\n      }\n    }\n  }\n  return s.isEmpty", "  \
    \  var stack: [Character] = []\n    for c in brackets {\n        if c == \"(\"\
    \ {\n            stack.append(c)\n        } else if c == \")\" {\n           \
    \ if stack.last == \"(\" {\n                stack.removeLast()\n            }\
    \ else {\n                return false\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", '    return false', '    return true', "    var bracketStack:\
    \ [Character] = []\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            bracketStack.append(bracket)\n        } else if bracket == \"\
    )\" {\n            if bracketStack.isEmpty {\n                return false\n \
    \           } else {\n                bracketStack.removeLast()\n            }\n\
    \        }\n    }\n    return bracketStack.isEmpty", "    var count = 0\n    for\
    \ bracket in brackets {\n        switch bracket {\n        case \"(\":\n     \
    \       count += 1\n        case \")\":\n            count -= 1\n        default:\n\
    \            break\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0", "    var bracket_stack: [Character]\
    \ = []\n    for bracket in brackets {\n        if bracket == \"(\" {\n       \
    \     bracket_stack.append(bracket)\n        } else if bracket == \")\" {\n  \
    \          if bracket_stack.isEmpty {\n                return false\n        \
    \    } else {\n                bracket_stack.removeLast()\n            }\n   \
    \     }\n    }\n    return bracket_stack.isEmpty", "    var counter = 0\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            counter += 1\n       \
    \ } else if c == \")\" {\n            counter -= 1\n        }\n        if counter\
    \ < 0 {\n            return false\n        }\n    }\n    return counter == 0",
  "    var n = 0\n    for c in brackets {\n        if c == \"(\" {\n            n\
    \ += 1\n        } else if c == \")\" {\n            n -= 1\n        }\n      \
    \  if n < 0 {\n            return false\n        }\n    }\n    return n == 0",
  "    // TODO: implement\n    return false", "    //TODO: Implement this function\n\
    \    var newBrackets = \"\"\n    for char in brackets {\n        if char == \"\
    (\" {\n            newBrackets.append(char)\n        } else if char == \")\" {\n\
    \            newBrackets.remove(at: newBrackets.index(before: newBrackets.endIndex))\n\
    \        }\n    }\n    return newBrackets.isEmpty", "    var open = 0\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            open += 1\n        } else\
    \ if c == \")\" {\n            open -= 1\n        }\n        if open < 0 {\n \
    \           return false\n        }\n    }\n    return open == 0", "    var balance\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    balance += 1\n        } else if bracket == \")\" {\n            balance -=\
    \ 1\n        }\n        if balance < 0 {\n            return false\n        }\n\
    \    }\n    return balance == 0", "    var stack = [Character]()\n    for bracket\
    \ in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var opstack\
    \ = Stack<Character>()\n    for c in brackets {\n        if c == \"(\" {\n   \
    \         opstack.push(c)\n        } else if c == \")\" {\n            if opstack.isEmpty\
    \ {\n                return false\n            } else {\n                opstack.pop()\n\
    \            }\n        }\n    }\n    return opstack.isEmpty", "    var aux =\
    \ brackets\n    while aux.contains(\"()\") {\n        aux = aux.replacingOccurrences(of:\
    \ \"()\", with: \"\")\n    }\n    return aux.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var left_brackets:\
    \ [Character] = []\n    for i in brackets {\n        if i == \"(\" {\n       \
    \     left_brackets.append(i)\n        } else if i == \")\" {\n            if\
    \ left_brackets.isEmpty {\n                return false\n            } else {\n\
    \                left_brackets.removeLast()\n            }\n        }\n    }\n\
    \    return left_brackets.isEmpty", "    var stack = [Character]()\n    for bracket\
    \ in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var count =\
    \ 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n          \
    \  count += 1\n        } else if bracket == \")\" {\n            count -= 1\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0", "    var balance = 0\n    for character in brackets {\n\
    \        if character == \"(\" {\n            balance += 1\n        } else if\
    \ character == \")\" {\n            balance -= 1\n        }\n        if balance\
    \ < 0 {\n            return false\n        }\n    }\n    return balance == 0",
  "    var stack = Stack<String>()\n    for bracket in brackets {\n        if String(bracket)\
    \ == \"(\" {\n            stack.push(value: String(bracket))\n        } else {\n\
    \            if stack.size > 0 {\n                stack.pop()\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ stack.size == 0", "    let brackets = brackets.characters\n    var stack = [Character]()\n\
    \    for c in brackets {\n        if c == \"(\" {\n            stack.append(c)\n\
    \        } else if c == \")\" {\n            if let p = stack.popLast() {\n  \
    \              if p != \"(\" {\n                    return false\n           \
    \     }\n            } else {\n                return false\n            }\n \
    \       }\n    }\n    return stack.isEmpty", "    var bracketStack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            bracketStack.push(bracket)\n\
    \        } else if bracket == \")\" {\n            if bracketStack.peek() == \"\
    (\" {\n                bracketStack.pop()\n            } else {\n            \
    \    return false\n            }\n        }\n    }\n    return bracketStack.count\
    \ == 0", "    var openBrackets = 0\n    for bracket in brackets {\n        if\
    \ bracket == \"(\" {\n            openBrackets += 1\n        } else if bracket\
    \ == \")\" {\n            openBrackets -= 1\n        }\n        if openBrackets\
    \ < 0 {\n            return false\n        }\n    }\n    return openBrackets ==\
    \ 0", '    return brackets.filter{$0 == "("}.count == brackets.filter{$0 == ")"}.count',
  "    var counter = 0\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            counter += 1\n        } else if bracket == \")\" {\n        \
    \    counter -= 1\n        }\n        if counter < 0 {\n            return false\n\
    \        }\n    }\n    return counter == 0", "    \n    var stack = Stack<Character>()\n\
    \    \n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    stack.push(element: bracket)\n        } else if bracket == \")\" {\n    \
    \        if stack.isEmpty() {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    \n    return\
    \ stack.isEmpty()", "    if brackets.count % 2 != 0 {\n        return false\n\
    \    }\n    var stack = Stack<Character>()\n    for char in brackets {\n     \
    \   if char == \"(\" {\n            stack.push(char)\n        } else {\n     \
    \       if stack.isEmpty {\n                return false\n            }\n    \
    \        stack.pop()\n        }\n    }\n    return stack.isEmpty", "    var bracketStack:\
    \ [Character] = []\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            bracketStack.append(bracket)\n        } else if bracket == \"\
    )\" {\n            if bracketStack.isEmpty {\n                return false\n \
    \           } else {\n                bracketStack.removeLast()\n            }\n\
    \        }\n    }\n    return bracketStack.isEmpty", "    // your code here\n\
    \    return false", "    \n    if brackets.count % 2 != 0 {\n        return false\n\
    \    }\n    \n    var counter = 0\n    for i in brackets {\n        if i == \"\
    (\" {\n            counter += 1\n        } else {\n            counter -= 1\n\
    \        }\n        if counter < 0 {\n            return false\n        }\n  \
    \  }\n    return counter == 0", "    var balance = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            balance += 1\n        } else if\
    \ bracket == \")\" {\n            balance -= 1\n        }\n        if balance\
    \ < 0 {\n            return false\n        }\n    }\n    return balance == 0",
  "    if (brackets.count == 0) {\n        return true\n    }\n    var openCounter\
    \ = 0\n    for char in brackets {\n        if (char == \"(\") {\n            openCounter\
    \ += 1\n        } else if (char == \")\") {\n            openCounter -= 1\n  \
    \      }\n        if (openCounter < 0) {\n            return false\n        }\n\
    \    }\n    return openCounter == 0", '    return correct_bracketing(queue: Queue<Character>(brackets))',
  "    var open_count = 0\n    for bracket in brackets {\n        if bracket == \"\
    (\" {\n            open_count += 1\n        } else if bracket == \")\" {\n   \
    \         open_count -= 1\n        }\n        if open_count < 0 {\n          \
    \  return false\n        }\n    }\n    return open_count == 0", "    var bracket_list\
    \ = [Character]()\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            bracket_list.append(bracket)\n        } else if bracket == \"\
    )\" {\n            if bracket_list.isEmpty {\n                return false\n \
    \           } else {\n                bracket_list.removeLast()\n            }\n\
    \        }\n    }\n    return bracket_list.isEmpty", "    if !brackets.contains(\"\
    (\") && !brackets.contains(\")\") {\n        return true\n    }\n    var bracketArray\
    \ = Array(brackets)\n    if bracketArray.first == \")\" || bracketArray.last ==\
    \ \"(\" {\n        return false\n    }\n    for index in 0..<bracketArray.count\
    \ - 1 {\n        if bracketArray[index] == \"(\" && bracketArray[index + 1] ==\
    \ \")\" {\n            bracketArray.remove(at: index)\n            bracketArray.remove(at:\
    \ index)\n            return correct_bracketing(brackets: String(bracketArray))\n\
    \        }\n    }\n    return false", "    var cnt = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            cnt += 1\n        } else if bracket\
    \ == \")\" {\n            cnt -= 1\n        }\n        if cnt < 0 {\n        \
    \    return false\n        }\n    }\n    return cnt == 0", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"(\" {\n            stack.push(char)\n\
    \        } else if char == \")\" {\n            if stack.isEmpty() {\n       \
    \         return false\n            } else {\n                stack.pop()\n  \
    \          }\n        }\n    }\n    return stack.isEmpty()", '    return false',
  "    var openCount = 0\n    for char in brackets {\n        if char == \"(\" {\n\
    \            openCount += 1\n        } else if char == \")\" {\n            openCount\
    \ -= 1\n        }\n        if openCount < 0 {\n            return false\n    \
    \    }\n    }\n    return openCount == 0", "    let match = [\"(\": \")\"]\n \
    \   var stack = [String]()\n    for char in brackets {\n        if stack.isEmpty\
    \ {\n            stack.append(String(char))\n        } else {\n            let\
    \ last = stack.last!\n            if match[last] == String(char) {\n         \
    \       stack.removeLast()\n            } else {\n                stack.append(String(char))\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var brackets_count\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    brackets_count += 1\n        } else if bracket == \")\" {\n            brackets_count\
    \ -= 1\n        }\n        if brackets_count < 0 {\n            return false\n\
    \        }\n    }\n    return brackets_count == 0", "    var brackets = brackets\n\
    \    while brackets.contains(\"()\") {\n        brackets = brackets.replacingOccurrences(of:\
    \ \"()\", with: \"\")\n    }\n    return brackets.isEmpty", "    return brackets.reduce(0)\
    \ { count, bracket in\n        if bracket == \"(\" {\n            return count\
    \ + 1\n        } else if bracket == \")\" {\n            return count - 1\n  \
    \      } else {\n            return count\n        }\n    } == 0", "    if brackets.count\
    \ % 2 != 0 {\n        return false\n    }\n    var openBrackets = [Character]()\n\
    \    for char in brackets {\n        if char == \"(\" {\n            openBrackets.append(char)\n\
    \        } else if char == \")\" {\n            if openBrackets.isEmpty {\n  \
    \              return false\n            } else {\n                openBrackets.removeLast()\n\
    \            }\n        }\n    }\n    return openBrackets.isEmpty", "    var stack\
    \ = [Character]()\n    for char in brackets {\n        if char == \"(\" {\n  \
    \          stack.append(char)\n        } else if char == \")\" {\n           \
    \ if stack.isEmpty {\n                return false\n            } else {\n   \
    \             stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var numberOfOpenBrackets = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            numberOfOpenBrackets += 1\n  \
    \      } else if bracket == \")\" {\n            numberOfOpenBrackets -= 1\n \
    \       }\n        if numberOfOpenBrackets < 0 {\n            return false\n \
    \       }\n    }\n    return numberOfOpenBrackets == 0", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"(\" {\n            stack.push(char)\n\
    \        } else if char == \")\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                _ = stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var close_count\
    \ = 0\n    var open_count = 0\n    for index in 0..<brackets.count {\n       \
    \ let element = brackets[brackets.index(brackets.startIndex, offsetBy: index)]\n\
    \        if element == \"(\" {\n            open_count += 1\n        } else if\
    \ element == \")\" {\n            close_count += 1\n        }\n        if close_count\
    \ > open_count {\n            return false\n        }\n    }\n    return open_count\
    \ == close_count", "    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \")\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    guard brackets.count\
    \ % 2 == 0 else {\n        return false\n    }\n    guard !brackets.contains(\"\
    ()\") else {\n        return false\n    }\n    var leftBrackets = [String]()\n\
    \    var rightBrackets = [String]()\n    for i in 0..<brackets.count {\n     \
    \   if brackets[brackets.index(brackets.startIndex, offsetBy: i)] == \"(\" {\n\
    \            leftBrackets.append(\"(\")\n        } else {\n            rightBrackets.append(\"\
    )\")\n        }\n    }\n    if leftBrackets.count != rightBrackets.count {\n \
    \       return false\n    }\n    if leftBrackets.count > rightBrackets.count {\n\
    \        return false\n    }\n    return true", "    var openCount = 0\n    for\
    \ bracket in brackets {\n        if bracket == \"(\" {\n            openCount\
    \ += 1\n        } else if bracket == \")\" {\n            openCount -= 1\n   \
    \     }\n        if openCount < 0 {\n            return false\n        }\n   \
    \ }\n    return openCount == 0", "    var stack = Stack<Character>()\n    for\
    \ bracket in brackets {\n        if bracket == \"(\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.empty() {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.empty()", "    var stack = [String]()\n\
    \    for char in brackets {\n        if String(char) == \"(\" {\n            stack.append(String(char))\n\
    \        } else if String(char) == \")\" {\n            if stack.isEmpty {\n \
    \               return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<String>()\n    for bracket in brackets {\n        if stack.empty() &&\
    \ bracket == \")\" {\n            return false\n        }\n        if bracket\
    \ == \"(\" {\n            stack.push(element: String(bracket))\n        } else\
    \ {\n            stack.pop()\n        }\n    }\n    return stack.empty()", " \
    \   // TODO: Implement this function\n    return false", "    var stack = Array<String>()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.append(String(bracket))\n\
    \        } else if bracket == \")\" {\n            if !stack.isEmpty {\n     \
    \           stack.removeLast()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    // TODO: Write\
    \ function here!\n    return false", "  // your code here\n  var count = 0\n \
    \ for char in brackets {\n    if char == \"(\" {\n      count += 1\n    } else\
    \ if char == \")\" {\n      count -= 1\n    }\n    if count < 0 {\n      return\
    \ false\n    }\n  }\n  return count == 0", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<String>()\n\
    \    for char in brackets {\n        if char == \"(\" {\n            stack.push(element:\
    \ \"(\")\n        } else if char == \")\" {\n            if let top = stack.pop()\
    \ {\n                if top != \"(\" {\n                    return false\n   \
    \             }\n            } else {\n                return false\n        \
    \    }\n        }\n    }\n    return stack.isEmpty()", "    var bracketing_stack\
    \ = [Character]()\n    for bracket in brackets {\n        if bracket == \"(\"\
    \ {\n            bracketing_stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if bracketing_stack.isEmpty {\n                return false\n\
    \            } else {\n                _ = bracketing_stack.popLast()\n      \
    \      }\n        }\n    }\n    return bracketing_stack.isEmpty", "    var new_brackets\
    \ = \"\"\n    for bracket in brackets {\n        if bracket == \"(\" {\n     \
    \       new_brackets.append(bracket)\n        } else if new_brackets.count > 0\
    \ {\n            new_brackets.removeLast()\n        } else {\n            return\
    \ false\n        }\n    }\n    return new_brackets.count == 0", "    if brackets.isEmpty\
    \ {\n        return true\n    }\n    if brackets.first == \")\" {\n        return\
    \ false\n    }\n    return brackets.first == \"(\" && correct_bracketing(brackets:\
    \ String(brackets.dropFirst()))", "    var stack: [Character] = []\n    for char\
    \ in brackets {\n        if char == \"(\" {\n            stack.append(char)\n\
    \        } else if char == \")\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var count =\
    \ 0\n    for char in brackets {\n        if char == \"(\" {\n            count\
    \ += 1\n        } else if char == \")\" {\n            count -= 1\n        }\n\
    \        if count < 0 {\n            return false\n        }\n    }\n    return\
    \ count == 0", "    var stack: [Character] = []\n    for char in brackets {\n\
    \        if char == \"(\" {\n            stack.append(char)\n        } else if\
    \ char == \")\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty", '    return false', "    var count:\
    \ Int = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n    \
    \        count += 1\n        } else if bracket == \")\" {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    var openingBrackets = 0\n    for bracket\
    \ in brackets {\n        if bracket == \"(\" {\n            openingBrackets +=\
    \ 1\n        } else if bracket == \")\" {\n            openingBrackets -= 1\n\
    \        }\n        if openingBrackets < 0 {\n            return false\n     \
    \   }\n    }\n    return openingBrackets == 0", "    if brackets.count % 2 !=\
    \ 0 {\n        return false\n    }\n    var count = 0\n    for i in brackets {\n\
    \        if i == \"(\" {\n            count += 1\n        } else {\n         \
    \   count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0", "    var result = false\n    var opened_count\
    \ = 0\n    var closed_count = 0\n    for character in brackets {\n        if character\
    \ == \"(\" {\n            opened_count += 1\n        } else if character == \"\
    )\" {\n            closed_count += 1\n        }\n    }\n    if opened_count ==\
    \ closed_count {\n        result = true\n    }\n    return result"]
stop_tokens:
- "\n}"
