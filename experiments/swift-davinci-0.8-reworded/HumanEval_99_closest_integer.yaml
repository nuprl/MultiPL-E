name: HumanEval_99_closest_integer
language: swift
prompt: "\n/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value:\
  \ \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n\
  /// Rounding away from zero means that if the given number is equidistant\n/// from\
  \ two integers, the one you should return is the one that is the\n/// farthest from\
  \ zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\n\
  assert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"\
  -15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value:\
  \ \"0\") == 0)"
completions: ["    // TODO: Check value is a valid double\n    var number = Double(value)\n\
    \    // If number is negative, we round it down and add 1\n    if number < 0 {\n\
    \        number = floor(number!) + 1\n    } else {\n        number = ceil(number!)\
    \ - 1\n    }\n    return Int(number!)", "    let decimal = Decimal(string: value)\n\
    \    let temp = decimal?.rounded(.toNearestOrAwayFromZero)\n    return NSDecimalNumber(decimal:\
    \ temp!).intValue", "    let double = Double(value)!\n    if double - Double(Int(double))\
    \ > 0.5 {\n        return Int(double + 1)\n    } else {\n        return Int(double)\n\
    \    }", "    let number = Double(value)!\n    let flooredNumber = floor(number)\n\
    \    let dif = number - flooredNumber\n    if dif >= 0.5 {\n        return Int(ceil(number))\n\
    \    } else {\n        return Int(flooredNumber)\n    }", "    let valueFloat\
    \ = Float(value)\n    return Int(round(valueFloat!))", "    var r : Int?\n   \
    \ let n = value.components(separatedBy: \".\")\n    if n.count == 1 {\n      \
    \  r = Int(n[0])!\n    } else {\n        let f = Int(n[1])!\n        if f < 5\
    \ {\n            r = Int(n[0])!\n        } else {\n            r = Int(n[0])!\
    \ + 1\n        }\n    }\n    return r!", "    let number = NSString(string: value).doubleValue\n\
    \    let roundedNumber = floor(number)\n    if number - roundedNumber < 0.5 {\n\
    \        return Int(roundedNumber)\n    } else {\n        return Int(roundedNumber\
    \ + 1)\n    }", "    var integer = Int(value) ?? Int(value.rounded(.down))\n \
    \   let decimal = value.trimmingCharacters(in: [\"-\", \"0\"]).components(separatedBy:\
    \ \".\").last ?? \"0\"\n    if decimal == \"5\" {\n        integer += 1\n    }\n\
    \    return integer", '    return Int(value)!', "    let closeNum = Float(value)\n\
    \    return Int(closeNum!.rounded(.up))", "    /// Create a function that takes\
    \ a value (string) representing a number\n    /// and returns the closest integer\
    \ to it. If the number is equidistant\n    /// from two integers, round it away\
    \ from zero.\n    let stringValue = value\n    let number = Double(stringValue)\n\
    \    let decimal = number! - Double(Int(number!))\n    if decimal < 0.5 {\n  \
    \      return Int(number!)\n    } else {\n        return Int(number!) + 1\n  \
    \  }", "    // using the Double.init(_:) failable initializer to check if \n \
    \   // the string value can be converted to a double\n    if let doubleValue =\
    \ Double(value) {\n        // since doubleValue holds the Double value of the\
    \ given string,\n        // we can use the ceil() and floor() methods to get the\
    \ next\n        // integer above and below doubleValue\n        let nextInt =\
    \ Int(doubleValue.rounded(.up))\n        let prevInt = Int(doubleValue.rounded(.down))\n\
    \        // Now all we have to do is check which one is closer to the\n      \
    \  // doubleValue, and return that value\n        let nextDiff = doubleValue -\
    \ Double(nextInt)\n        let prevDiff = Double(prevInt) - doubleValue\n    \
    \    return nextDiff > prevDiff ? prevInt : nextInt\n    }\n    // if value is\
    \ not convertible to Double, return 0\n    return 0", "    let val = Double(value)!\n\
    \    let floor = Int(val.rounded(.towardZero))\n    let ceil = Int(val.rounded(.up))\n\
    \    return val - Double(floor) > Double(ceil) - val ? ceil : floor", '    return
    Int(value) ?? Int(Double(value)!.rounded(.awayFromZero))', "    var result = Int(value)!\n\
    \    let str = value.components(separatedBy: \".\")\n    if str.count == 2 {\n\
    \        let num = Double(value)!\n        if num - Double(result) >= 0.5 {\n\
    \            result += 1\n        }\n    }\n    return result", "    let value\
    \ = Double(value)!\n    let abs_value = abs(value)\n    let floored = floor(abs_value)\n\
    \    let ceiled = ceil(abs_value)\n    let diff_floor = abs_value - floored\n\
    \    let diff_ceil = ceiled - abs_value\n    if diff_floor == diff_ceil {\n  \
    \      return value > 0 ? Int(ceiled) : Int(-ceiled)\n    }\n    return diff_floor\
    \ < diff_ceil ? Int(floored) : Int(ceiled)", "    let number = Double(value)!\n\
    \    return Int(number.rounded(.awayFromZero))", "    let doubleValue = Double(value)!\n\
    \    let integerValue = Int(doubleValue)\n    let decimalPlaces = decimalPlacesForDouble(value:\
    \ doubleValue)\n    let diff = doubleValue - Double(integerValue)\n    if diff\
    \ < 0.5 {\n        return integerValue\n    } else if diff > 0.5 {\n        if\
    \ integerValue >= 0 {\n            return integerValue + 1\n        } else {\n\
    \            return integerValue - 1\n        }\n    } else {\n        if integerValue\
    \ >= 0 {\n            return integerValue + 1\n        } else {\n            return\
    \ integerValue - 1\n        }\n    }", "    // Ensure we have a Float value\n\
    \    guard let floatValue = Float(value) else {\n        print(\"\\(value) is\
    \ not a valid floating point number.\")\n        return 0\n    }\n    // Apply\
    \ the rounding away from zero rules\n    if floatValue < 0 {\n        return Int(floatValue\
    \ - 0.5)\n    } else {\n        return Int(floatValue + 0.5)\n    }", '    return
    value.hasSuffix(".0") ? Int(value)! : Int(value.split(separator: ".")[0])! + 1',
  "    let val = Double(value)!\n    if val.truncatingRemainder(dividingBy: 1) >=\
    \ 0.5 {\n        return Int(val.rounded(.up))\n    } else {\n        return Int(val.rounded(.down))\n\
    \    }", "    let number = Double(value)!\n    if number - floor(number) < 0.5\
    \ {\n        return Int(floor(number))\n    } else {\n        return Int(ceil(number))\n\
    \    }", "    let number = Double(value)!\n    let int = Int(number)\n    let\
    \ decimal = number - Double(int)\n    return decimal < 0.5 ? int : int + 1", " \
    \   var digits = [Character]()\n    for digit in value {\n        digits.append(digit)\n\
    \    }\n    let input_decimal_index = digits.firstIndex(of: \".\") ?? digits.count\n\
    \    if digits.count > 1 {\n        if digits[input_decimal_index - 1] == \".\"\
    \ {\n            return 0\n        }\n    }\n    digits.remove(at: input_decimal_index)\n\
    \    var output = 0\n    var sign = 1\n    if digits[0] == \"-\" {\n        sign\
    \ = -1\n        digits.remove(at: 0)\n    }\n    var length = digits.count\n \
    \   for (index, digit) in digits.enumerated() {\n        let decimal_power = length\
    \ - index - 1\n        output += Int(String(digit))! * Int(pow(10, Double(decimal_power)))\n\
    \    }\n    return output * sign", '  return Int(value)!', "    var closestInt\
    \ = Int(value)!\n    var valueFloat = Float(value)!\n    if valueFloat - Float(closestInt)\
    \ >= 0.5 {\n        closestInt += 1\n    }\n    return closestInt", '    return
    value.toDouble()!.round()', "    var dbl = Double(value) ?? 0.0\n    let rounded\
    \ = round(dbl)\n    return rounded < dbl ? Int(rounded) + 1 : Int(rounded)", '    return
    Int(value)!.rounded(.awayFromZero)', '    return Int(round(Double(value)!))',
  "  let d = Double(value)!\n  return d < 0.0 ? Int(d-0.5) : Int(d+0.5)", "    let\
    \ value = Double(value)!\n    let integer = Int(value)\n    let decimal = value\
    \ - Double(integer)\n    if decimal < 0.5 {\n        return integer\n    } else\
    \ {\n        return integer + 1\n    }", "    let value_to_float = Float(value)\n\
    \    let integer_value = Int(value_to_float!)\n    if value_to_float! - Float(integer_value)\
    \ >= 0.5 {\n        return integer_value + 1\n    } else {\n        return integer_value\n\
    \    }", '    return 0', "    let num = Double(value)!\n    if num >= 0 {\n  \
    \      return Int(floor(num))\n    } else {\n        return Int(ceil(num))\n \
    \   }", "    let d = Double(value)!\n    let floor = Int(d.rounded(.down))\n \
    \   let ceil = Int(d.rounded(.up))\n    let halfFloor = floor + (ceil - floor)\
    \ / 2\n    if d < Double(halfFloor) {\n        return floor\n    } else {\n  \
    \      return ceil\n    }", "    let num = Double(value)!\n    let f_num = floor(num)\n\
    \    let c_num = ceil(num)\n    let sub_f = num - f_num\n    let sub_c = c_num\
    \ - num\n    let result = sub_f > sub_c ? c_num : f_num\n    return Int(result)",
  "    let value = Double(value)!\n    let integer = Int(value)\n    let decimal =\
    \ value - Double(integer)\n    if decimal >= 0.5 {\n        return integer + 1\n\
    \    } else {\n        return integer\n    }", "    let formatted = Double(value)!\n\
    \    let floored = Int(floor(formatted))\n    let ceiled = Int(ceil(formatted))\n\
    \    if formatted - Double(floored) < 0.5 {\n        return floored\n    } else\
    \ {\n        return ceiled\n    }", "    let temp = value.components(separatedBy:\
    \ \".\")\n    let left = Int(temp[0])!\n    let right = Int(temp[1])!\n    if\
    \ (right >= 50) {\n        return left + 1\n    } else {\n        return left\n\
    \    }", "    let floatValue = Float(value) ?? 0\n    return Int(round(floatValue))",
  '    return 0', "    if let number = NumberFormatter().number(from: value) {\n \
    \       return Int(round(number.doubleValue))\n    }\n    return 0", '    return
    0', "    let number = Double(value)!\n    let up = Int(ceil(number))\n    let\
    \ down = Int(floor(number))\n    return number - Double(down) > Double(up) - number\
    \ ? up : down", "    guard let value = Double(value) else { return -1 }\n    return\
    \ Int(round(value))", "    var closest = Int(value)!\n    if Double(value)! -\
    \ Double(closest) >= 0.5 {\n        closest += 1\n    }\n    return closest",
  "    var rounded = Int(round(Double(value)!))\n    if (Double(value)! > Double(rounded))\
    \ {\n        rounded += 1\n    }\n    return rounded", "    let value = Double(value)!\n\
    \    let integer = Int(value)\n    let fraction = value - Double(integer)\n  \
    \  return fraction > 0.5 ? integer + 1 : integer", "    let intValue = Int(value)\
    \ ?? 0\n    let decimalPart = value.split(separator: \".\").last ?? \"\"\n   \
    \ if decimalPart.isEmpty {\n        return intValue\n    }\n    let decimalValue\
    \ = Int(decimalPart) ?? 0\n    if decimalValue < 50 {\n        return intValue\n\
    \    }\n    if intValue >= 0 {\n        return intValue + 1\n    }\n    return\
    \ intValue - 1", '    return Int(value) ?? 0', "    let floatValue = Float(value)\
    \ ?? 0\n    let roundedValue = roundf(floatValue)\n    return Int(roundedValue)",
  '    return Int(value)!', '    return Int(String(format: "%.0f", Double(value)!))!',
  "    if value.contains(\".\") {\n        let length = value.count\n        let lastTwoDigits\
    \ = String(value.suffix(2))\n        let digit = Int(lastTwoDigits)\n        let\
    \ stringDigit = String(digit!)\n        if stringDigit.hasPrefix(\"0\") || stringDigit.hasPrefix(\"\
    1\") || stringDigit.hasPrefix(\"2\") || stringDigit.hasPrefix(\"3\") || stringDigit.hasPrefix(\"\
    4\") {\n            var secondNumber = \"\"\n            for number in value {\n\
    \                if number != \".\" {\n                    secondNumber.append(number)\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            if Int(secondNumber)! < 0 {\n                return Int(secondNumber)!\
    \ - 1\n            } else {\n                return Int(secondNumber)!\n     \
    \       }\n        } else {\n            var secondNumber = \"\"\n           \
    \ for number in value {\n                if number != \".\" {\n              \
    \      secondNumber.append(number)\n                } else {\n               \
    \     break\n                }\n            }\n            if Int(secondNumber)!\
    \ < 0 {\n                return Int(secondNumber)!\n            } else {\n   \
    \             return Int(secondNumber)! + 1\n            }\n        }\n    } else\
    \ {\n        return Int(value)!\n    }", '    return Int(value)!', "    guard\
    \ let value = Float(value) else { return 0 }\n    return Int(value.rounded(.awayFromZero))",
  "    var result = 0.0\n    if let decimal = Double(value) {\n        result = decimal.rounded(.awayFromZero)\n\
    \    }\n    return Int(result)", "    if let num = Float(value) {\n        return\
    \ Int(round(num))\n    }\n    return 0", "    guard value.count > 0 else { return\
    \ 0 }\n    guard let doubleVal = Double(value) else { return 0 }\n    return Int(round(doubleVal))",
  "    let integer = Int(value) ?? 0\n    let decimal = Double(value)!.truncatingRemainder(dividingBy:\
    \ 1)\n    if decimal < 0.5 {\n        return integer\n    } else {\n        return\
    \ integer + 1\n    }", "    if let valueDouble = Double(value) {\n        return\
    \ Int(round(valueDouble))\n    }\n    return 0", "    var closest = 0\n    let\
    \ str = value.split(separator: \".\")\n    if str.count == 1 {\n        closest\
    \ = Int(str[0])!\n    } else {\n        let num = Double(value)!\n        closest\
    \ = Int(round(num))\n    }\n    return closest", "    let value_double = Double(value)\n\
    \    let value_int = Int(value_double!)\n    let value_double_mod = value_double!\
    \ - Double(value_int)\n    return (value_double_mod > 0.5) ? value_int + 1 : value_int",
  "    let floatNumber = Double(value)!\n    let floatNumberArray = floatNumber.description.components(separatedBy:\
    \ \".\")\n    if floatNumberArray.count == 1 {\n        return Int(floatNumber)\n\
    \    } else {\n        if Float(floatNumberArray[1])! > 0.5 {\n            return\
    \ Int(floatNumber) + 1\n        } else {\n            return Int(floatNumber)\n\
    \        }\n    }", "    let num = Double(value)!\n    let a = Int(num.rounded(.awayFromZero))\n\
    \    return a", "    // Your code here\n    let s = value.split(separator: \"\
    .\")\n    if let idx = s.last?.index(where: { c in c != \"0\" }) {\n        if\
    \ s.last![idx] >= \"5\" {\n            return Int(s.first!)! + 1\n        }\n\
    \    }\n    return Int(s.first!)!", '  return round(string_to_double(value))',
  "    let num = Double(value)!\n    let decimalPart = num - floor(num)\n    if decimalPart\
    \ == 0.5 {\n        return Int(floor(num + 0.5))\n    } else if decimalPart >\
    \ 0.5 {\n        return Int(ceil(num))\n    } else {\n        return Int(floor(num))\n\
    \    }", '    return Int(value) ?? Int(Double(value)!.rounded(.awayFromZero))',
  "    let trimmed = value.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ doubleVal = Double(trimmed) ?? 0.0\n    return Int(doubleVal.rounded(.awayFromZero))",
  '    return 0', "    // your code here\n    return 0", "    let value = Double(value)!\n\
    \    if value >= 0 {\n        return Int(value.rounded(.up))\n    } else {\n \
    \       return Int(value.rounded(.down))\n    }", "    let n = Double(value)!\n\
    \    let b = Int(n)\n    if n > Double(b) + 0.5 {\n        return b + 1\n    }\
    \ else {\n        return b\n    }", '    return Int(Double(value)!.rounded(.toNearestOrAwayFromZero))',
  "    let doubleVal = Double(value)\n    let doubleValInt = Int(doubleVal!)\n   \
    \ if doubleVal! > Double(doubleValInt) {\n        return doubleValInt + 1\n  \
    \  } else {\n        return doubleValInt\n    }", "    let valueDecimal = Decimal(string:\
    \ value)\n    let result = NSDecimalNumber(decimal: valueDecimal ?? 0.0).rounding(accordingToBehavior:\
    \ NSDecimalNumberHandler(roundingMode: .plain, scale: 0, raiseOnExactness: false,\
    \ raiseOnOverflow: false, raiseOnUnderflow: false, raiseOnDivideByZero: false))\n\
    \    return result.intValue", "    guard let number = Double(value) else { return\
    \ 0 }\n    let floor = Int(number.rounded(.down))\n    let ceil = Int(number.rounded(.up))\n\
    \    let downDiff = abs(number - Double(floor))\n    let upDiff = abs(Double(ceil)\
    \ - number)\n    return downDiff < upDiff ? floor : ceil", "    \n    let value_float\
    \ = Float(value)\n    let value_rounded = roundf(value_float!)\n    let value_cast\
    \ = Int(value_rounded)\n    \n    return value_cast", "    let doubleValue = Double(value)!\n\
    \    if abs(doubleValue - Double(Int(doubleValue))) >= 0.5 {\n        return Int(doubleValue)\
    \ + (intValueSign(doubleValue) * 1)\n    }\n    return Int(doubleValue)", '    return
    Int(Int(value)! + String(value).last!.sorted()[1] == "." ? 0 : String(value).last!.sorted()[1]
    == "." ? 1 : -1)', '    return 0', '    return Int(value)!.advanced(by: Int(value.hasSuffix("0")
    ? 0 : (value.hasSuffix("5") ? 1 : 0)))', "    let givenValue = Double(value)!\n\
    \    let floorValue = floor(givenValue)\n    let ceilValue = ceil(givenValue)\n\
    \    let givenValueComparingFloor = givenValue - floorValue\n    let givenValueComparingCeil\
    \ = ceilValue - givenValue\n    if givenValueComparingFloor == givenValueComparingCeil\
    \ {\n        if abs(givenValue) == floorValue {\n            return Int(givenValue.rounded(.down))\n\
    \        } else {\n            return Int(givenValue.rounded(.up))\n        }\n\
    \    } else if givenValueComparingFloor < givenValueComparingCeil {\n        return\
    \ Int(floorValue)\n    } else {\n        return Int(ceilValue)\n    }", "    let\
    \ result = value.toDouble()\n    if (result > 0) {\n        return value.toInt()\
    \ + 1\n    } else {\n        return value.toInt() - 1\n    }", "    guard let\
    \ num = Double(value) else { return -1 }\n    return Int(num)", '    return Int(round(Double(value)!))',
  "    let num = Double(value)!\n    let decimal = num.truncatingRemainder(dividingBy:\
    \ 1)\n    if decimal < 0.5 {\n        return Int(floor(num))\n    } else {\n \
    \       return Int(ceil(num))\n    }", "    if value.contains(\".\") {\n     \
    \   let parts = value.split(separator: \".\")\n        let left = parts[0]\n \
    \       let right = parts[1]\n        let left_i = Int(left)!\n        let right_i\
    \ = Int(right)!\n        let int_part = String(left_i)\n        var closest_i\
    \ = Int(int_part)!\n        var left_diff = Double(left_i)\n        var right_diff\
    \ = Double(left_i + 1)\n        if Double(right_i) > 500 {\n            closest_i\
    \ = closest_i + 1\n        }\n        return closest_i\n    } else {\n       \
    \ return Int(value)!\n    }", "    // your code here\n    return 0", '    return
    Int(Double(value)!.rounded(.awayFromZero))', '    return Int(Double(value)!.rounded(.awayFromZero))',
  "    var result = 0\n    var isNegative = false\n    if value.hasPrefix(\"-\") {\n\
    \        isNegative = true\n    }\n    let array = value.components(separatedBy:\
    \ \".\")\n    let integer = Int(array[0])!\n    if array.count > 1 {\n       \
    \ if let fractional = Int(array[1]) {\n            if fractional > 50 {\n    \
    \            result = integer + 1\n            } else {\n                result\
    \ = integer\n            }\n        }\n    } else {\n        result = integer\n\
    \    }\n    if isNegative {\n        result = -1 * result\n    }\n    return result",
  "    let doubleValue = Double(value)!\n    return Int(round(doubleValue))", '    return
    Int(value)!', "    let value = Double(value)!\n    let floor = value.rounded(.down)\n\
    \    let ceiling = value.rounded(.up)\n    let floordiff = floor - value\n   \
    \ let ceildiff = ceiling - value\n    if floordiff < 0 && ceildiff > 0 {\n   \
    \     return floor.rounded()\n    } else if floordiff > 0 && ceildiff < 0 {\n\
    \        return ceiling.rounded()\n    } else if abs(floordiff) > abs(ceildiff)\
    \ {\n        return ceiling.rounded()\n    } else {\n        return floor.rounded()\n\
    \    }", "    let valueF: Double = Double(value)!\n    let num = Int(valueF)\n\
    \    let diff = valueF - Double(num)\n    let closest: Int\n    if diff > 0.5\
    \ {\n        closest = num + 1\n    } else if diff < -0.5 {\n        closest =\
    \ num - 1\n    } else {\n        closest = num\n    }\n    return closest", " \
    \   let num = Double(value)!\n    let int = Int(num)\n    if (num - Double(int))\
    \ == 0.5 {\n        return num > 0 ? int + 1 : int - 1\n    }\n    return Int(num\
    \ + 0.5)", "    let valueDouble = Double(value)\n    if let valueDouble = valueDouble\
    \ {\n        if valueDouble >= 0 {\n            return Int(valueDouble.rounded(.up))\n\
    \        } else {\n            return Int(valueDouble.rounded(.down))\n      \
    \  }\n    }\n    return 0", "    // TODO: Implement closest_integer\n    return\
    \ 0", "    var final = 0\n    let double = Double(value)\n    let floor = floor(double!)\n\
    \    let ceil = ceil(double!)\n    if ceil - double! == 0.5 {\n        final =\
    \ Int(ceil)\n    } else if ceil - double! < 0.5 {\n        final = Int(ceil)\n\
    \    } else if ceil - double! > 0.5 {\n        final = Int(floor)\n    }\n   \
    \ return final", '    return Int(value) ?? 0', '    return 0', '    return 0',
  "    let d = Double(value)!\n    let d1 = d.rounded(.toNearestOrAwayFromZero)\n\
    \    return Int(d1)", "    let float = Float(value) ?? 0\n    let floor = Int(floorf(float))\n\
    \    let ceil = Int(ceilf(float))\n    if float > 0 {\n        if float - Float(floor)\
    \ < Float(ceil) - float {\n            return floor\n        } else {\n      \
    \      return ceil\n        }\n    } else {\n        if float - Float(floor) <\
    \ Float(ceil) - float {\n            return ceil\n        } else {\n         \
    \   return floor\n        }\n    }", "    var closest: Int = Int(Double(value)!.rounded(.toNearestOrAwayFromZero))\n\
    \    if Double(value)!.rounded(.up) == Double(value)!.rounded(.down) {\n     \
    \   if closest >= 0 {\n            closest += 1\n        } else {\n          \
    \  closest -= 1\n        }\n    }\n    return closest", "    var rounded = Int(round(NumberFormatter().number(from:\
    \ value)!.doubleValue))\n    let x = Double(value)! - Double(rounded)\n    if\
    \ x > 0.5 {\n        rounded += 1\n    } else if x < -0.5 {\n        rounded -=\
    \ 1\n    }\n    return rounded", "    let number = Double(value)!\n    let rounded\
    \ = round(number)\n    let closest = number - rounded > 0.5 ? Int(ceil(number))\
    \ : Int(floor(number))\n    return closest", "    let result = Double(value)!.rounded()\n\
    \    return Int(result)", '    return Int(value)!', "    let num = Double(value)!\n\
    \    let integer = Int(num)\n    if num - Double(integer) < 0.5 {\n        return\
    \ integer\n    } else {\n        return integer + 1\n    }", "    let number =\
    \ Double(value)!\n    let decimal = number.truncatingRemainder(dividingBy: 1)\n\
    \    let int = Int(number)\n    if decimal >= 0.5 {\n        return int + 1\n\
    \    } else {\n        return int\n    }", "    let temp = Double(value)!\n  \
    \  let new = temp.rounded()\n    let result = Int(new)\n    return result", " \
    \   let v = Double(value)!\n    return v.rounded(.toNearestOrAwayFromZero)", " \
    \   let double = Double(value)!\n    let int = Int(double)\n    if double - Double(int)\
    \ < 0.5 {\n        return int\n    } else {\n        return int + 1\n    }", '    return
    Int(Double(value)!.rounded(.awayFromZero))', "    let float = Double(value)!\n\
    \    return Int(float.rounded(.up))", "    let num: Double = Double(value)!\n\
    \    let ans: Int = Int(round(num))\n    return ans", "    let floatValue = Float(value)\
    \ ?? 0\n    let roundedValue = roundf(floatValue)\n    return Int(roundedValue)",
  "    let n = Double(value)!\n    return n > Double(Int(n)) ? Int(n) + 1 : Int(n)",
  '    return 0', "    let stringAsDouble = Double(value)\n    return Int(round(stringAsDouble!))",
  '    return 0', "    let value = Double(value)!\n    return (value < 0) ? Int(value\
    \ - 0.5) : Int(value + 0.5)", "    let doubleValue = Double(value)!\n    let floor\
    \ = Int(floor(doubleValue))\n    let ceiling = Int(ceil(doubleValue))\n    let\
    \ decimal = doubleValue - Double(floor)\n    let absDecimal = abs(decimal)\n \
    \   switch absDecimal {\n    case 0:\n        return floor\n    case 0.5:\n  \
    \      if ceiling % 2 == 0 {\n            return ceiling\n        } else {\n \
    \           return floor\n        }\n    default:\n        if absDecimal > 0.5\
    \ {\n            return ceiling\n        } else {\n            return floor\n\
    \        }\n    }", "  let rounded = Int(value.double!)\n  if value.double ==\
    \ Double(rounded) {\n    return rounded\n  }\n  return rounded > 0 ? rounded +\
    \ 1 : rounded - 1", "    let decimal = Decimal(string: value)\n    let rounded\
    \ = decimal.rounded(.toNearestOrAwayFromZero)\n    let roundedInt = rounded.intValue\n\
    \    return roundedInt", "    let doubleValue = Double(value)!\n    let intValue\
    \ = Int(doubleValue)\n    let decimal = abs(doubleValue - Double(intValue))\n\
    \    return decimal < 0.5 ? intValue : intValue + 1", "    let valueDouble = Double(value)\n\
    \    let valueInt = Int(valueDouble!)\n    var closestInt = 0\n    if valueDouble!.truncatingRemainder(dividingBy:\
    \ 1) > 0.5 {\n        closestInt = valueInt + 1\n    } else {\n        closestInt\
    \ = valueInt\n    }\n    return closestInt", "  let doubleValue = Double(value)!\n\
    \  if doubleValue - Double(Int(doubleValue)) > 0.5 {\n    return Int(doubleValue)\
    \ + 1\n  } else {\n    return Int(doubleValue)\n  }", "    let n = Double(value)!\n\
    \    let i = Int(n)\n    return n - Double(i) < 0.5 ? i : i + 1", '    return
    Int(value)!', "    \n    let num = Double(value)!\n    let up = ceil(num)\n  \
    \  let down = floor(num)\n    \n    let diffUp = up - num\n    let diffDown =\
    \ num - down\n    \n    if diffUp > diffDown {\n        return Int(down)\n   \
    \ } else {\n        return Int(up)\n    }", "    let d = Double(value)!\n    let\
    \ t = Int(d)\n    if d - Double(t) > 0.5 {\n        return t + 1\n    } else {\n\
    \        return t\n    }", "    var result = Int(round(Double(value)!))\n    if\
    \ result < 0 {\n        result = result-1\n    }\n    return result", "    let\
    \ double_value = Double(value)!\n    let floor_double_value = floor(double_value)\n\
    \    let decimal_value = double_value - floor_double_value\n    let ceiling_double_value\
    \ = floor_double_value + 1.0\n    if (decimal_value < 0.5) {\n        return Int(floor_double_value)\n\
    \    } else {\n        return Int(ceiling_double_value)\n    }", "    let num\
    \ = Double(value)!\n    return num.rounded(.awayFromZero)", "    let formatter\
    \ = NumberFormatter()\n    if let num = formatter.number(from: value) {\n    \
    \    let doubleValue = num.doubleValue\n        return Int(doubleValue.rounded(.toNearestOrAwayFromZero))\n\
    \    }\n    return 0", "    let x = Float(value)!\n    let integral = Int(x)\n\
    \    let fractional = x - Float(integral)\n    if fractional >= 0.5 {\n      \
    \  return integral + 1\n    } else {\n        return integral\n    }", "    //\
    \ The floating point representation of the input value is\n    // the closest\
    \ floating point number to the input value.\n    // \n    // When using a string\
    \ literal (or a string value) with a floating\n    // point literal, the result\
    \ is a float.\n    // https://github.com/apple/swift-evolution/blob/master/proposals/0077-remove-float-literal-conversion-rule.md\n\
    \    let num = Double(value)!\n    let decimalPart = num - Double(Int(num))\n\
    \    if decimalPart < 0.5 {\n        return Int(num)\n    } else {\n        return\
    \ Int(num) + 1\n    }", "    let number = Float(value)!\n    return Int(number)\
    \ + Int(number.sign())", "    let n = Double(value)!\n    let truncated = Int(n)\n\
    \    let f = n - Double(truncated)\n    if f < 0.5 {\n        return truncated\n\
    \    } else {\n        return truncated > 0 ? truncated + 1 : truncated - 1\n\
    \    }", '    return Int(Double(value)!.rounded(.awayFromZero))', "    let floatValue\
    \ = Float(value) ?? 0\n    return round(floatValue > 0 ? floatValue + 0.5 : floatValue\
    \ - 0.5)", "    let num = Double(value)!\n    if num > 0 {\n        return Int(num\
    \ + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }", "    let floatVal\
    \ = (value as NSString).floatValue\n    let roundedVal = round(floatVal)\n   \
    \ let intVal = Int(roundedVal)\n    return intVal", "    guard let number = Double(value)\
    \ else { return 0 }\n    return Int(number.rounded(.toNearestOrAwayFromZero))",
  "    let doubleValue = Double(value)!\n    return Int(value) >= 0 ? Int(doubleValue.rounded(.up))\
    \ : Int(doubleValue.rounded(.down))", "    // Don't accept values that are not\
    \ numbers.\n    guard let doubleValue = Double(value) else {\n        return 0\n\
    \    }\n    // If the number is an integer, just return it.\n    if floor(doubleValue)\
    \ == doubleValue {\n        return Int(doubleValue)\n    }\n    // Calculate the\
    \ integer that is closest to the given number.\n    let intValue = Int(doubleValue)\n\
    \    let remainder = doubleValue - Double(intValue)\n    return remainder < 0.5\
    \ ? intValue : intValue + 1", "    let value_double = Double(value)\n    let ceiling\
    \ = Int(ceil(value_double!))\n    let floor = Int(floor(value_double!))\n    let\
    \ ceiling_diff = abs(value_double! - Double(ceiling))\n    let floor_diff = abs(value_double!\
    \ - Double(floor))\n    if ceiling_diff == floor_diff {\n        if value_double!\
    \ >= 0 {\n            return ceiling\n        } else {\n            return floor\n\
    \        }\n    } else if ceiling_diff < floor_diff {\n        return ceiling\n\
    \    } else {\n        return floor\n    }", '    return Int(Float(value)!.rounded())',
  "    let number: Double = value.doubleValue\n    let rounded = number.rounded()\n\
    \    let ceiled = number.rounded(.up)\n    let floored = number.rounded(.down)\n\
    \    let roundedAway = (number > 0.0) ? ceiled : floored\n    return Int(roundedAway)",
  "    var number = Double(value) ?? 0\n    if number > 0 {\n        number.round(.up)\n\
    \    } else {\n        number.round(.down)\n    }\n    return Int(number)", " \
    \   let val_array = value.components(separatedBy: \".\")\n    if val_array.count\
    \ == 1 {\n        return Int(value)!\n    }\n    let whole_part = Int(val_array[0])!\n\
    \    let decimal_part = val_array[1]\n    if Int(decimal_part)! < 50 {\n     \
    \   return whole_part\n    } else {\n        return whole_part + 1\n    }", " \
    \   let doubleValue = Double(value)!\n    let intValue = Int(doubleValue)\n  \
    \  if Double(intValue) == doubleValue {\n        return intValue\n    }\n    return\
    \ doubleValue.rounded(.up)", "    let doubleValue = Double(value)!\n    return\
    \ closest_integer(value: doubleValue)", "    var number: Double = 0\n    if let\
    \ n = Double(value) {\n        number = n\n    }\n    return Int(round(number))",
  "    var closest = Int(value)!\n    if let lastDigit = value.last, let lastDigitValue\
    \ = Int(String(lastDigit)) {\n        if lastDigitValue >= 5 {\n            closest\
    \ += 1\n        }\n    }\n    return closest", "    let v = Double(value)!\n \
    \   let f = floor(v)\n    let c = ceil(v)\n    let f_diff = abs(f - v)\n    let\
    \ c_diff = abs(c - v)\n    if f_diff == c_diff {\n        return c > f ? Int(c)\
    \ : Int(f)\n    }\n    return f_diff < c_diff ? Int(f) : Int(c)", "    let number\
    \ = Double(value)!\n    let number_round = number.rounded()\n    if (number -\
    \ number_round) < 0 {\n        return Int(number_round)\n    } else {\n      \
    \  return Int(number_round) + 1\n    }", "    //guard let floatValue = Float(value)\
    \ else { return 0 }\n    let floatValue = Float(value)!\n    let intValue = Int(floatValue)\n\
    \    let diff = floatValue - Float(intValue)\n    if diff >= 0.5 {\n        return\
    \ intValue + 1\n    } else {\n        return intValue\n    }", "    if value.isEmpty\
    \ {\n        return 0\n    }\n    if let number = Double(value) {\n        let\
    \ roundedNumber = number.rounded()\n        return Int(roundedNumber)\n    }\n\
    \    return 0", "    let doubleValue = Double(value)!\n    if (doubleValue - Double(Int(doubleValue))\
    \ >= 0.5) {\n        return Int(doubleValue) + 1\n    } else {\n        return\
    \ Int(doubleValue)\n    }", "    let num = Double(value)!\n    let intNum = Int(num)\n\
    \    let decimalNum = num - Double(intNum)\n    return decimalNum >= 0.5 ? intNum\
    \ + 1 : intNum", '    return 0', "    let val = Double(value)!\n    let intVal\
    \ = Int(val)\n    if (val-Double(intVal)) >= 0.5 {\n        return intVal+1\n\
    \    } else {\n        return intVal\n    }", "    let number = Double(value)!\n\
    \    let integer_number = Int(number)\n    let decimal_number = number - Double(integer_number)\n\
    \    if decimal_number > 0.5 {\n        return integer_number + 1\n    } else\
    \ if decimal_number < -0.5 {\n        return integer_number - 1\n    } else {\n\
    \        return integer_number\n    }", '    return 0', "    \n    let doubleValue\
    \ = Double(value)\n    var intValue = Int(value)\n    \n    guard let firstValue\
    \ = doubleValue, let secondValue = intValue else { return 0 }\n    \n    let firstRemainder\
    \ = firstValue.truncatingRemainder(dividingBy: 1)\n    let secondRemainder = secondValue.truncatingRemainder(dividingBy:\
    \ 1)\n    \n    if firstRemainder > 0.5 {\n        intValue = intValue + 1\n \
    \   } else if firstRemainder < -0.5 {\n        intValue = intValue - 1\n    }\
    \ else if firstRemainder == 0.5 || firstRemainder == -0.5 {\n        if secondRemainder\
    \ > 0 {\n            intValue = intValue + 1\n        } else if secondRemainder\
    \ < 0 {\n            intValue = intValue - 1\n        }\n    }\n    \n    return\
    \ intValue", "    let doubleVal = Double(value)\n    return doubleVal != nil ?\
    \ Int(floor(doubleVal!)) : 0", "    let number = Double(value)!\n    return Int(number\
    \ + 0.5)", "    let number = Double(value)!\n    if number.isInteger {\n     \
    \   return Int(number)\n    }\n    return Int(number < 0 ? number - 0.5 : number\
    \ + 0.5)", "    let d = Double(value)!\n    if d.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        return Int(d)\n    }\n    return Int(d > 0 ? floor(d) : ceil(d))",
  "    let doubleValue = Double(value)!\n    let roundDoubleValue = Double(round(doubleValue))\n\
    \    return Int(roundDoubleValue)", "    var number = Int(Double(value)!)\n  \
    \  let decimal = Double(value)!.truncatingRemainder(dividingBy: 1)\n    if decimal\
    \ > 0.5 {\n        number += 1\n    } else if decimal < -0.5 {\n        number\
    \ -= 1\n    }\n    return number", "    let value = Double(value)!\n    let ceilValue\
    \ = ceil(value)\n    let floorValue = floor(value)\n    if ceilValue - value >\
    \ value - floorValue {\n        return Int(floorValue)\n    } else {\n       \
    \ return Int(ceilValue)\n    }", "    var num = Double(value) ?? 0\n    num =\
    \ num < 0 ? num - 0.5 : num + 0.5\n    return Int(num)", '    return Int(Double(value)!.rounded(.up))',
  "    let valueNum = (value as NSString).doubleValue\n    return Int(floor(valueNum\
    \ + 0.5))", "    // your code here\n    return 0", "    let number = Double(value)!\n\
    \    if number >= 0 {\n        return Int(number + 0.5)\n    } else {\n      \
    \  return Int(number - 0.5)\n    }", "    let doubleValue = Double(value)!\n \
    \   let roundValue = round(doubleValue)\n    let floorValue = floor(doubleValue)\n\
    \    let ceilValue = ceil(doubleValue)\n    if abs(doubleValue - floorValue) ==\
    \ abs(doubleValue - ceilValue) {\n        return (doubleValue > 0) ? Int(ceilValue)\
    \ : Int(floorValue)\n    }\n    return (doubleValue - roundValue >= 0) ? Int(ceilValue)\
    \ : Int(floorValue)", "  let dotIndex = value.firstIndex(of: \".\")\n  let result\
    \ = value.replacingOccurrences(of: \".\", with: \"\")\n  let number = Double(result)!\n\
    \  if value.contains(\".\") {\n    if number % 1 < 0.5 {\n      let roundedNumber\
    \ = String(Int(number))\n      return Int(roundedNumber)!\n    } else {\n    \
    \  if dotIndex! == value.startIndex {\n        return Int(value.replacingOccurrences(of:\
    \ \"-\", with: \"\"))! + 1\n      } else {\n        return Int(result)! + 1\n\
    \      }\n    }\n  } else {\n    return Int(value)!\n  }", '    return Int(Double(value)!.rounded(.awayFromZero))',
  '    return Int(round(Double(value)!))', "    let number = (value as NSString).doubleValue\n\
    \    return number > 0 ? Int(number + 0.5) : Int(number - 0.5)", "  if let result\
    \ = Double(value).flatMap(Int.init) {\n    return result\n  } else {\n    return\
    \ Int(Double(value)!.rounded(.awayFromZero))\n  }", "    let value = Double(value)!\n\
    \    let new_value = Int(value)\n    return new_value", "    let number = Double(value)!\n\
    \    let numberToInt = Int(number)\n    if number == Double(numberToInt) {\n \
    \       return numberToInt\n    } else if number - Double(numberToInt) < 0.5 {\n\
    \        return numberToInt\n    } else {\n        return numberToInt + 1\n  \
    \  }", "    let value = Double(value)!\n    return Int(value.rounded(.awayFromZero))",
  '  return 0', "    var rounded_value = Int(Double(value)!)\n    let rv = Double(value)!\n\
    \    let ci = Double(rounded_value)\n    if ci < rv {\n        rounded_value +=\
    \ 1\n    }\n    return rounded_value", "  let value = Double(value)!\n  let convert_floor_to_int\
    \ = Int(floor(value))\n  let convert_ceil_to_int = Int(ceil(value))\n  let convert_abs_floor_to_int\
    \ = abs(convert_floor_to_int)\n  let convert_abs_ceil_to_int = abs(convert_ceil_to_int)\n\
    \  let convert_diff_floor_ceil_to_double = Double(convert_abs_floor_to_int - convert_abs_ceil_to_int)\n\
    \  let convert_diff_floor_ceil_to_int = Int(convert_diff_floor_ceil_to_double)\n\
    \  let abs_convert_diff_floor_ceil_to_int = abs(convert_diff_floor_ceil_to_int)\n\
    \  let diff_floor_value = abs(convert_floor_to_int - value)\n  let diff_ceil_value\
    \ = abs(convert_ceil_to_int - value)\n  if abs_convert_diff_floor_ceil_to_int\
    \ == 0 {\n    return convert_ceil_to_int\n  } else if diff_floor_value == diff_ceil_value\
    \ {\n    return convert_ceil_to_int\n  } else if diff_floor_value < diff_ceil_value\
    \ {\n    return convert_floor_to_int\n  } else {\n    return convert_ceil_to_int\n\
    \  }", '    return Int(Double(value)!.rounded(.toNearestOrAwayFromZero))', " \
    \   var number = Double(value) ?? 0\n    if number < 0 {\n        number = -number\n\
    \    }\n    if number.truncatingRemainder(dividingBy: 1) >= 0.5 {\n        number\
    \ = ceil(number)\n    } else {\n        number = floor(number)\n    }\n    if\
    \ value.first == \"-\" {\n        number = -number\n    }\n    return Int(number)",
  "    let valueDouble = Double(value)\n    let nearestDouble = rint(valueDouble!)\n\
    \    let nearestInt = Int(nearestDouble)\n    return nearestInt", '    return
    Int(value)!', "    // your code goes here...\n    var strDouble = Double(value)\n\
    \    if let strDouble = strDouble {\n        if strDouble >= 0 {\n           \
    \ if strDouble.truncatingRemainder(dividingBy: 1) >= 0.5 {\n                strDouble\
    \ = ceil(strDouble)\n            } else {\n                strDouble = floor(strDouble)\n\
    \            }\n        } else {\n            if strDouble.truncatingRemainder(dividingBy:\
    \ 1) <= -0.5 {\n                strDouble = ceil(strDouble)\n            } else\
    \ {\n                strDouble = floor(strDouble)\n            }\n        }\n\
    \        return Int(strDouble)\n    }\n    return 0"]
stop_tokens:
- "\n}"
