language: swift
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  let sorted = l.sorted()\n  var ia = l.startIndex\n  var ib = ia.advanced(by:\
    \ 1)\n  var list = [Int]()\n  while ib < sorted.endIndex {\n    if sorted[ia]\
    \ != sorted[ib] {\n      list.append(sorted[ia])\n      ia = ib\n    }\n    ib\
    \ = ib.advanced(by: 1)\n  }\n  list.append(sorted[ia])\n  return list\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var r: [Int] = []\n    for n in l {\n        if !r.contains(n)\
    \ {\n            r.append(n)\n        }\n    }\n    return r.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u = [Int]()\n    l.forEach { e in\n        if !u.contains(e)\
    \ {\n            u.append(e)\n        }\n    }\n    return u.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    for element in l {\n        set.insert(element)\n\
    \    }\n    return set.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in l {\n        if !result.contains(value)\
    \ {\n            result.append(value)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([]) { (uniques, n) in uniques.contains(n) ?\
    \ uniques : uniques + [n] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp5u2adzn8/tmp5u2adzn8.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a95360c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a95057b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a95057988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a950567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u2adzn8                        0x000055e90dbfa555 <unavailable> + 5461

    5    libc.so.6                          0x00002b9a9554c460 __libc_start_main +
    245

    6    tmp5u2adzn8                        0x000055e90dbfa109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    let sorted = set.sorted()\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let l = Set(l)\n    return Array(l).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var r = [Int]()\n    for i in l {\n        if !r.contains(i)\
    \ {\n            r.append(i)\n        }\n    }\n    return r.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let array = l.sorted()\n    var result: [Int] = []\n    for\
    \ item in array {\n        if !result.contains(item) {\n            result.append(item)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var list: [Int] = []\n    for item in l {\n        if !list.contains(item)\
    \ {\n            list.append(item)\n        }\n    }\n    return list.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    // TODO: Implement this method so that it returns an array\n\
    \    // of unique items from the input array. If a number appears\n    // multiple\
    \ times in the input array, it should only be\n    // included once in the result.\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpaakr52o8/tmpaakr52o8.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f887fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f8576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f8576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f85757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaakr52o8                        0x000055595fd8a415 <unavailable> + 5141

    5    libc.so.6                          0x00002ad6f8a6b460 __libc_start_main +
    245

    6    tmpaakr52o8                        0x000055595fd89fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var s = Set<Int>()\n    for e in l {\n        s.insert(e)\n\
    \    }\n    return s.sort({ $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpvfmy6_si.swift:10:14: error: value of type 'Set<Int>' has no member\
    \ 'sort'\n    return s.sort({ $0 < $1 })\n           ~ ^~~~\n"
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    var result = [Int]()\n    for i in\
    \ l {\n        if !set.contains(i) {\n            set.insert(i)\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpbdelo1o9/tmpbdelo1o9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e0a19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e0710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53e0710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53e070f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdelo1o9                        0x00005590c95f3785 <unavailable> + 6021

    5    libc.so.6                          0x00002b53e0c05460 __libc_start_main +
    245

    6    tmpbdelo1o9                        0x00005590c95f3339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let set = Set(l)\n    return Array(set).sorted(by: <)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var l = l\n    l.sortInPlace()\n    let length = l.count\n \
    \   var last = l[0]\n    var p = 1\n    for i in 1..<length {\n        if last\
    \ != l[i] {\n            l[p] = l[i]\n            p += 1\n            last = l[i]\n\
    \        }\n    }\n    return Array(l[0..<p])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpuo88r7jl.swift:7:7: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    l.sortInPlace()\n    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique = [Int]()\n    for e in l {\n        if !unique.contains(e)\
    \ {\n            unique.append(e)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for item in l {\n        if !result.contains(item)\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x)\
    \ {\n            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpy8rajzl9/tmpy8rajzl9.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34dc06ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34dbd61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34dbd61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34dbd607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8rajzl9                        0x0000563ea1406625 <unavailable> + 5669

    5    libc.so.6                          0x00002b34dc256460 __libc_start_main +
    245

    6    tmpy8rajzl9                        0x0000563ea14061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var list = l\n    list.sortInPlace()\n    var last: Int?\n \
    \   for (index, item) in list.enumerate() {\n        if last == item {\n     \
    \       list.removeAtIndex(index)\n        }\n        last = item\n    }\n   \
    \ return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpq6e60vog.swift:7:10: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    list.sortInPlace()\n    ~~~~ ^~~~~~~~~~~\n/tmp/tmpq6e60vog.swift:9:31:\
    \ error: value of type '[Int]' has no member 'enumerate'\n    for (index, item)\
    \ in list.enumerate() {\n                         ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var lUnique = [Int]()\n    var lSorted = l.sorted()\n    var\
    \ currentNum = lSorted[0]\n    lUnique.append(currentNum)\n    for num in lSorted\
    \ {\n        if num > currentNum {\n            lUnique.append(num)\n        \
    \    currentNum = num\n        }\n    }\n    return lUnique\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sorted = l.sorted()\n    var new = [Int]()\n    for i in\
    \ sorted {\n        if !new.contains(i) {\n            new.append(i)\n       \
    \ }\n    }\n    return new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sorted = l.sorted()\n    return sorted.reduce([], { (res,\
    \ next) -> [Int] in\n        if res.count == 0 || res.last! != next {\n      \
    \      return res + [next]\n        } else {\n            return res\n       \
    \ }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u: [Int] = []\n    for v in l {\n        if !u.contains(v)\
    \ {\n            u.append(v)\n        }\n    }\n    return u.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  let set = Set(l)\n  return Array(set).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let uniq = Array(Set(l))\n    return uniq.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sortedUnique = Array(Set(l)).sorted()\n    return sortedUnique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var a = l\n    a.sort(<)\n    return a.filter({ (a, i) in i\
    \ == 0 || a != a[i - 1] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmprwijhnis.swift:7:12: error: missing argument label 'by:' in call\n\
    \    a.sort(<)\n           ^\n           by: \n/tmp/tmprwijhnis.swift:8:12: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    return a.filter({\
    \ (a, i) in i == 0 || a != a[i - 1] })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013716
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([]) { ($0.contains($1)) ? $0 : $0 + [$1] }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpmnird829/tmpmnird829.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bc74cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bc443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bc443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bc4427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnird829                        0x000056073f062555 <unavailable> + 5461

    5    libc.so.6                          0x00002ac2bc938460 __libc_start_main +
    245

    6    tmpmnird829                        0x000056073f062109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique = [Int]()\n    var uniqueSet = Set<Int>()\n    for\
    \ i in l {\n        if !uniqueSet.contains(i) {\n            uniqueSet.insert(i)\n\
    \            unique.append(i)\n        }\n    }\n    return unique\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpip5r7ua3/tmpip5r7ua3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c9a131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c99e28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c99e28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c99e277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpip5r7ua3                        0x00005572c310c785 <unavailable> + 6021

    5    libc.so.6                          0x00002b5c9a31d460 __libc_start_main +
    245

    6    tmpip5r7ua3                        0x00005572c310c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([]) {\n        $0.contains($1) ? $0 : $0 + [$1]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpb1rgf47h/tmpb1rgf47h.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fd8125c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fd7e1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fd7e1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fd7e1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1rgf47h                        0x000055ed46a11555 <unavailable> + 5461

    5    libc.so.6                          0x00002b0fd8311460 __libc_start_main +
    245

    6    tmpb1rgf47h                        0x000055ed46a11109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var uniq = [Int]()\n  for n in l {\n    if !uniq.contains(n) {\n\
    \      uniq.append(n)\n    }\n  }\n  return uniq.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.sorted().reduce([]) {\n        $0.last == $1 ? $0 :\
    \ $0 + [$1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniq = [Int]()\n    for i in l {\n        if !uniq.contains(i)\
    \ {\n            uniq.append(i)\n        }\n    }\n    return uniq.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let orderedSet = NSOrderedSet(array: l)\n    return orderedSet.array\
    \ as! [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpcrs4yl7q.swift:6:22: error: cannot find 'NSOrderedSet' in scope\n\
    \    let orderedSet = NSOrderedSet(array: l)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return [Int](Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpxlhik_lm/tmpxlhik_lm.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6e5ea1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6e5b98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6e5b98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6e5b977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlhik_lm                        0x0000561837f4b575 <unavailable> + 5493

    5    libc.so.6                          0x00002ad6e608d460 __libc_start_main +
    245

    6    tmpxlhik_lm                        0x0000561837f4b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    // Use a dictionary to track what elements have been seen before\n\
    \    var seen = [Int: Int]()\n    var unique = [Int]()\n    for n in l {\n   \
    \     if let _ = seen[n] {\n            // This element has been seen before\n\
    \        } else {\n            seen[n] = 1\n            unique.append(n)\n   \
    \     }\n    }\n    return unique.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var out: [Int] = []\n    for e in l {\n        if !out.contains(e)\
    \ {\n            out.append(e)\n        }\n    }\n    return out.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !result.contains(x)\
    \ {\n            result.append(x)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u = [Int]()\n    for e in l {\n        if !u.contains(e)\
    \ {\n            u.append(e)\n        }\n    }\n    return u.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uni = [Int]()\n    for x in l {\n        if !uni.contains(x)\
    \ {\n            uni.append(x)\n        }\n    }\n    return uni.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var o = [Int]()\n    for i in l {\n        if !o.contains(i)\
    \ {\n            o.append(i)\n        }\n    }\n    return o.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var tmp = [Int:Int]()\n    for i in l {\n        tmp[i] = 1\n\
    \    }\n    return Array(tmp.keys).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([], { uniqued, elem in\n        uniqued.contains(elem)\
    \ ? uniqued : uniqued + [elem]\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpiv82ofih/tmpiv82ofih.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7a46f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7a43e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7a43e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7a43e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv82ofih                        0x000055b51cd0e555 <unavailable> + 5461

    5    libc.so.6                          0x00002af7a48de460 __libc_start_main +
    245

    6    tmpiv82ofih                        0x000055b51cd0e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var mutableList = l\n    mutableList.sort()\n    mutableList\
    \ = mutableList.filter {\n        !$0.isNaN\n    }\n    return mutableList.reduce([])\
    \ {\n        accum, element in\n        if !accum.contains(element) {\n      \
    \      return accum + [element]\n        } else {\n            return accum\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpvc61udjk.swift:9:13: error: value of type 'Int' has no member 'isNaN'\n\
    \        !$0.isNaN\n         ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var ret = [Int]()\n    for item in l {\n        if !ret.contains(item)\
    \ {\n            ret.append(item)\n        }\n    }\n    return ret.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueElements = [Int]()\n    for item in l {\n        if\
    \ !uniqueElements.contains(item) {\n            uniqueElements.append(item)\n\
    \        }\n    }\n    return uniqueElements.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.filter({ l.index(of: $0) == l.firstIndex(of: $0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp5f4ggody/tmp5f4ggody.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdfa81ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdfa511b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdfa511988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdfa5107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5f4ggody                        0x000055e77b4fe605 <unavailable> + 5637

    5    libc.so.6                          0x00002acdfaa06460 __libc_start_main +
    245

    6    tmp5f4ggody                        0x000055e77b4fe1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return [Int](Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpxlhik_lm/tmpxlhik_lm.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6e5ea1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6e5b98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6e5b98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6e5b977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlhik_lm                        0x0000561837f4b575 <unavailable> + 5493

    5    libc.so.6                          0x00002ad6e608d460 __libc_start_main +
    245

    6    tmpxlhik_lm                        0x0000561837f4b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var list = l\n    for i in 0..<list.count {\n        for j in\
    \ (i + 1)..<list.count {\n            if list[i] == list[j] {\n              \
    \  list.remove(at: j)\n                j -= 1\n            }\n        }\n    }\n\
    \    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpcadn0vd8.swift:11:19: error: left side of mutating operator isn't\
    \ mutable: 'j' is a 'let' constant\n                j -= 1\n                ~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var uniques = Set<Int>()\n    for\
    \ e in l {\n        if !uniques.contains(e) {\n            uniques.insert(e)\n\
    \            result.append(e)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp4mae933m/tmp4mae933m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9544a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95419fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95419f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95419e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mae933m                        0x000055b2a061e785 <unavailable> + 6021

    5    libc.so.6                          0x00002ad954694460 __libc_start_main +
    245

    6    tmp4mae933m                        0x000055b2a061e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = Set<Int>()\n    var result = [Int]()\n    for item\
    \ in l {\n        if seen.contains(item) { continue }\n        seen.insert(item)\n\
    \        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'tmp9qwhk43q/tmp9qwhk43q.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3df844c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3df53bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3df53b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3df53a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qwhk43q                        0x0000564944951785 <unavailable> + 6021

    5    libc.so.6                          0x00002ab3dfa30460 __libc_start_main +
    245

    6    tmp9qwhk43q                        0x0000564944951339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var list = l\n    for i in 0..<list.count {\n        for j in\
    \ 0..<list.count {\n            if list[i] == list[j] && i != j {\n          \
    \      list.remove(at: j)\n            }\n        }\n    }\n    return list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7b97c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7b94be561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7b94be286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7b94be13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7b94bdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7b92bde83 <unavailable> + 188035

    6    tmpc_mqulsx                        0x000056326289e9ab <unavailable> + 6571

    7    tmpc_mqulsx                        0x000056326289e5a5 <unavailable> + 5541

    8    libc.so.6                          0x00002ac7b99b3460 __libc_start_main +
    245

    9    tmpc_mqulsx                        0x000056326289e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var sortedUnique = [Int]()\n    for x in l {\n        if !sortedUnique.contains(x)\
    \ {\n            sortedUnique.append(x)\n        }\n    }\n    return sortedUnique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let res = l.reduce([]) { (m: [Int], n: Int) -> [Int] in\n  \
    \      if !m.contains(n) {\n            return m + [n]\n        }\n        return\
    \ m\n    }\n    return res.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var elements = [Int]()\n    for i in l {\n        if !elements.contains(i)\
    \ {\n            elements.append(i)\n        }\n    }\n    return elements.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n\
    \    }\n    let sorted = s.sorted()\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sorted = l.sorted()\n    var result: [Int] = []\n    for\
    \ i in sorted {\n        if result.last != i {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var seen = Set<Int>()\n    for i in\
    \ l {\n        if !seen.contains(i) {\n            result.append(i)\n        \
    \    seen.insert(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: Exception
  stderr: 'tmpepya5gyp/tmpepya5gyp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbd13cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbce33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbce33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbce327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepya5gyp                        0x000055ba34b17785 <unavailable> + 6021

    5    libc.so.6                          0x00002b1bbd328460 __libc_start_main +
    245

    6    tmpepya5gyp                        0x000055ba34b17339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([]) { $0.contains($1) ? $0 : $0 + [$1] }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpv95k9pyh/tmpv95k9pyh.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b802cf4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b802cc41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b802cc41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b802cc407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv95k9pyh                        0x000055de3bc03555 <unavailable> + 5461

    5    libc.so.6                          0x00002b802d136460 __libc_start_main +
    245

    6    tmpv95k9pyh                        0x000055de3bc03109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var unique = Set<Int>()\n    for item\
    \ in l {\n        if !unique.contains(item) {\n            unique.insert(item)\n\
    \            result.append(item)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpacys4snk/tmpacys4snk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3d2f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f3cfeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f3cfea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f3cfe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacys4snk                        0x000055d8f6027785 <unavailable> + 6021

    5    libc.so.6                          0x00002b0f3d4df460 __libc_start_main +
    245

    6    tmpacys4snk                        0x000055d8f6027339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var res = l\n  res.sort()\n  var last = 0\n  for i in 0..<res.count\
    \ {\n    if res[i] != last {\n      last = res[i]\n    } else {\n      res.removeAtIndex(i)\n\
    \      i--\n    }\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7i5fll15.swift:13:11: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n      res.removeAtIndex(i)\n      ~~~ ^~~~~~~~~~~~~\n/tmp/tmp7i5fll15.swift:14:8:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n      i--\n\
    \       ^~\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let elements = NSMutableSet()\n    for item in l {\n       \
    \ elements.addObject(item)\n    }\n    return elements.allObjects as! [Int]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6pu4_h8l.swift:6:20: error: cannot find 'NSMutableSet' in scope\n\
    \    let elements = NSMutableSet()\n                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let u = Set(l)\n    return Array(u).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let ret = Array(Set(l))\n    return ret.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let n = l.count\n    if n < 2 {\n        return l\n    }\n \
    \   let res = l.sorted()\n    var i = 0\n    var j = 1\n    while j < n {\n  \
    \      if res[i] != res[j] {\n            i += 1\n            res[i] = res[j]\n\
    \        }\n        j += 1\n    }\n    return Array(res[0...i])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_4dkmd0e.swift:16:16: error: cannot assign through subscript: 'res'\
    \ is a 'let' constant\n            res[i] = res[j]\n            ~~~^\n/tmp/tmp_4dkmd0e.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = l.sorted()\n \
    \   ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var ret = l\n    ret.sort(<)\n    ret = Array(Set(ret))\n  \
    \  return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp11guetox.swift:7:14: error: missing argument label 'by:' in call\n\
    \    ret.sort(<)\n             ^\n             by: \n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n\
    \    var last = -1\n    for x in list {\n        if x != last {\n            result.append(x)\n\
    \            last = x\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    var added = Set<Int>()\n    for x in\
    \ l {\n        if !added.contains(x) {\n            res.append(x)\n          \
    \  added.insert(x)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'tmp07efo48l/tmp07efo48l.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b82cf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b829e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b829e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b829e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07efo48l                        0x0000559786ce0785 <unavailable> + 6021

    5    libc.so.6                          0x00002b7b82edd460 __libc_start_main +
    245

    6    tmp07efo48l                        0x0000559786ce0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sortedUniques = l.sorted().reduce([]) {\n        (acc, num)\
    \ -> [Int] in\n        if acc.last != num {\n            return acc + [num]\n\
    \        } else {\n            return acc\n        }\n    }\n    return sortedUniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var arr = l\n    arr.sort()\n    let result = arr.reduce([])\
    \ { (acc, i) -> [Int] in\n        if acc.last != i {\n            return acc +\
    \ [i]\n        } else {\n            return acc\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if !result.contains(element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var b: [Int] = []\n    for i in l {\n        if !b.contains(i)\
    \ {\n            b.append(i)\n        }\n    }\n    return b.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var r = Set<Int>()\n  l.forEach { r.insert($0) }\n  return Array(r).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = Set<Int>()\n    return l.filter {\n        seen.insert($0).inserted\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp_2zijdv0/tmp_2zijdv0.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0512ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e04e25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e04e25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e04e247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2zijdv0                        0x000055c9e6f825e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b1e0531a460 __libc_start_main +
    245

    6    tmp_2zijdv0                        0x000055c9e6f82199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if !result.contains(element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n\
    \    }\n    return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let u = Set(l)\n    return Array(u).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  var u = l\n  u.sort(<)\n  return u.reduce([Int]()) { $0.last ==\
    \ $1 ? $0 : $0 + [$1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpdca8hvwb.swift:7:10: error: missing argument label 'by:' in call\n\
    \  u.sort(<)\n         ^\n         by: \n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  let set = Set(l)\n  return Array(set).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    for el in l {\n        set.insert(el)\n\
    \    }\n    let a = Array(set)\n    return a.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u: [Int] = []\n    for item in l {\n        if !u.contains(item)\
    \ {\n            u.append(item)\n        }\n    }\n    return u.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for n in l {\n        if !res.contains(n)\
    \ {\n            res.append(n)\n        }\n    }\n    return res.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniques = [Int]()\n    for i in l {\n        if !uniques.contains(i)\
    \ {\n            uniques.append(i)\n        }\n    }\n    return uniques.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sortedList = l.sorted(by: <)\n    var result = [Int]()\n\
    \    var previous: Int?\n    for current in sortedList {\n        if let previous\
    \ = previous {\n            if current != previous {\n                result.append(current)\n\
    \            }\n        } else {\n            result.append(current)\n       \
    \ }\n        previous = current\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var m = [Int: Int]()\n    for e in l {\n        m[e] = 1\n \
    \   }\n    return Array(m.keys).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var array = l\n    array.sort()\n    var result = [Int]()\n\
    \    for i in 0..<array.count {\n        if i == 0 || array[i] != array[i-1] {\n\
    \            result.append(array[i])\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var tmp = [Int]()\n    for e in l {\n        if !tmp.contains(e)\
    \ {\n            tmp.append(e)\n        }\n    }\n    return tmp.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let s = Set(l)\n    return Array(s).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([], {\n        if !$0.contains($1) {\n     \
    \       return $0 + [$1]\n        } else {\n            return $0\n        }\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpup67tqym/tmpup67tqym.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1ab0dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1aadd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1aadd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1aadd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpup67tqym                        0x0000558f8e71e555 <unavailable> + 5461

    5    libc.so.6                          0x00002ae1ab2ca460 __libc_start_main +
    245

    6    tmpup67tqym                        0x0000558f8e71e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var t = l\n    for i in 0..<t.count {\n        for j in i+1..<t.count\
    \ {\n            if t[i] == t[j] {\n                t.remove(at: j)\n        \
    \        j -= 1\n            }\n        }\n    }\n    return t\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpfdbdd42h.swift:11:19: error: left side of mutating operator isn't\
    \ mutable: 'j' is a 'let' constant\n                j -= 1\n                ~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp2b3g8b2v/tmp2b3g8b2v.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b2450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b21467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b3g8b2v                        0x000055e5329ac575 <unavailable> + 5493

    5    libc.so.6                          0x00002af1b263c460 __libc_start_main +
    245

    6    tmp2b3g8b2v                        0x000055e5329ac129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var list = l\n    for i in 0..<list.count {\n        var j =\
    \ i + 1\n        while j < list.count {\n            if list[i] == list[j] {\n\
    \                list.remove(at: j)\n            } else {\n                j +=\
    \ 1\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: Exception
  stderr: 'tmp2x8x7xiy/tmp2x8x7xiy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1427da0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1427a97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1427a97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1427a967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2x8x7xiy                        0x00005556dffa26a5 <unavailable> + 5797

    5    libc.so.6                          0x00002b1427f8c460 __libc_start_main +
    245

    6    tmp2x8x7xiy                        0x00005556dffa2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var map = [Int: Int]()\n    for i in l {\n        map[i] = 0\n\
    \    }\n    return map.keys.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpsr2zuxsv.swift:10:21: error: value of type 'Dictionary<Int, Int>.Keys'\
    \ has no member 'sort'\n    return map.keys.sort()\n           ~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmplt80h1ph/tmplt80h1ph.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dd2c5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dd2955b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dd2955988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dd29547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt80h1ph                        0x000055739803f5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b6dd2e4a460 __libc_start_main +
    245

    6    tmplt80h1ph                        0x000055739803f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sortedUnique = Array(Set(l)).sorted()\n    return sortedUnique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var set = Set<Int>()\n    for item in l {\n        set.insert(item)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return l.reduce([], { (result, new) in\n        if !result.contains(new)\
    \ {\n            return result + [new]\n        }\n        return result\n   \
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpbvghy96i/tmpbvghy96i.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b038cb07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b038c7feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b038c7fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b038c7fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvghy96i                        0x0000559583209555 <unavailable> + 5461

    5    libc.so.6                          0x00002b038ccf3460 __libc_start_main +
    245

    6    tmpbvghy96i                        0x0000559583209109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for item in l {\n        if !result.contains(item)\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let arraySet = NSSet(array: l)\n    return arraySet.allObjects\
    \ as! [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpi38i30by.swift:6:20: error: cannot find 'NSSet' in scope\n    let\
    \ arraySet = NSSet(array: l)\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let sorted = l.sorted()\n    return sorted.reduce([Int]()) {\
    \ acc, curr in\n        return acc.last == curr ? acc : acc + [curr]\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var dict = [Int: Bool]()\n    var list = [Int]()\n    for i\
    \ in l {\n        if dict[i] == nil {\n            dict[i] = true\n          \
    \  list.append(i)\n        }\n    }\n    return list.sorted(by: <)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var a = l\n    var u = [Int]()\n    a.sort()\n    for (i, v)\
    \ in a.enumerate() {\n        if i == 0 || a[i-1] != v {\n            u.append(v)\n\
    \        }\n    }\n    return u\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpyw0z326b.swift:9:21: error: value of type '[Int]' has no member\
    \ 'enumerate'\n    for (i, v) in a.enumerate() {\n                  ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpx8yz9i5z/tmpx8yz9i5z.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67af8a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af59db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af59d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af59c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8yz9i5z                        0x000055eb1b14e575 <unavailable> + 5493

    5    libc.so.6                          0x00002b67afa92460 __libc_start_main +
    245

    6    tmpx8yz9i5z                        0x000055eb1b14e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmplt80h1ph/tmplt80h1ph.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dd2c5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dd2955b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dd2955988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dd29547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt80h1ph                        0x000055739803f5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b6dd2e4a460 __libc_start_main +
    245

    6    tmplt80h1ph                        0x000055739803f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var d = [Int: Bool]()\n    for i in l {\n        d[i] = true\n\
    \    }\n    let keys = Array(d.keys)\n    return keys.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var ret : [Int] = []\n    for i in l {\n        if !ret.contains(i)\
    \ {\n            ret.append(i)\n        }\n    }\n    return ret.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Set(l).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013604
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n  return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013682
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    let u = Set(l)\n    return Array(u).sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i)\
    \ {\n            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
- exit_code: 0
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for elem in l {\n        if !result.contains(elem)\
    \ {\n            result.append(elem)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013683
