language: swift
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { ceil($0) }.map\
    \ { $0 * $0 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgsalflen.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in lst {\n\
    \        result += Int(ceil(i)) * Int(ceil(i))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv8lhk0gk.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(i)) * Int(ceil(i))\n                      ^~~~\n/tmp/tmpv8lhk0gk.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(i)) * Int(ceil(i))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.map{ Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv6qrhbz6.swift:17:28: error: cannot find 'ceil' in scope\n    let\
    \ sum = lst.map{ Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                \
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(pow(i.rounded(.up), 2))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp57o2fgv.swift:19:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(i.rounded(.up), 2))\n                   ^~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result = lst.map{ ceil($0) }.map{\
    \ $0 * $0 }.reduce(0, +)\n    return Int(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp41t4qcx_.swift:17:27: error: cannot find 'ceil' in scope\n    let\
    \ result = lst.map{ ceil($0) }.map{ $0 * $0 }.reduce(0, +)\n                 \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for number in lst\
    \ {\n        let square = number.rounded(.up)\n        total += Int(square * square)\n\
    \    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.FGlT8r/tmp0epuxooe-1.o:tmp0epuxooe-1.o:function $s11tmp0epuxooe11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{abs($0)}.map{ceil($0)}.map{$0*$0}.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmplh25r0m4.swift:17:33: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{abs($0)}.map{ceil($0)}.map{$0*$0}.reduce(0, +)\n                   \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(($0).rounded(.up))\
    \ }.reduce(0) { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map {Int(ceil($0))}.reduce(0)\
    \ {$0 + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_18pnqqh.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map {Int(ceil($0))}.reduce(0) {$0 + $1 * $1}\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // code here\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp4ajfmlq9/tmp4ajfmlq9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af99bbefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af99b8e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af99b8e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af99b8e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ajfmlq9                        0x000055f298d74351 <unavailable> + 4945

    5    libc.so.6                          0x00002af99bddb460 __libc_start_main +
    245

    6    tmp4ajfmlq9                        0x000055f298d73fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqzbl209w.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let ceiledList = lst.map { (element)\
    \ -> Int in\n        return Int(ceil(element))\n    }\n    let squaredList = ceiledList.map\
    \ { (element) -> Int in\n        return element * element\n    }\n    return squaredList.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd4ajvwmm.swift:18:20: error: cannot find 'ceil' in scope\n    \
    \    return Int(ceil(element))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map { ceil($0) }.map { $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3pw5ogm0.swift:17:20: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let ceilingElements = lst.map {\n \
    \       Int(ceil($0))\n    }\n    let squaredElements = ceilingElements.map {\n\
    \        $0 * $0\n    }\n    return squaredElements.reduce(0, +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp0sa_6bj.swift:18:13: error: cannot find 'ceil' in scope\n    \
    \    Int(ceil($0))\n            ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ Int(ceil($0)) }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6h4fcbse.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{ Int(ceil($0)) }.reduce(0, +)\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqzbl209w.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { Int($0\
    \ * $0) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp0_qq_86k.swift:17:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { Int($0 * $0) }.reduce(0, +)\n                   \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var squares: [Int] = []\n    for value\
    \ in lst {\n        let rounded = Int(ceil(value))\n        squares.append(rounded\
    \ * rounded)\n    }\n    return squares.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm1jb82us.swift:19:27: error: cannot find 'ceil' in scope\n    \
    \    let rounded = Int(ceil(value))\n                          ^~~~\n/tmp/tmpm1jb82us.swift:20:32:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        squares.append(rounded * rounded)\n                               ^\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ Int(ceil($0)) }.reduce(0,\
    \ { $0 + $1 * $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpw4a77mtp.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{ Int(ceil($0)) }.reduce(0, { $0 + $1 * $1 })\n                     \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for i in lst {\n\
    \        sum += (i * i).rounded(.up)\n    }\n    return Int(sum)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.3zq5vq/tmpolzzd2e9-1.o:tmpolzzd2e9-1.o:function $s11tmpolzzd2e911sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp96l4btgb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i)) * Int(ceil(i))\n                   ^~~~\n/tmp/tmp96l4btgb.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(i)) * Int(ceil(i))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8mr5qa2j.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, +)\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { ceil($0) }.map\
    \ { $0 * $0 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgsalflen.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for num in lst {\n\
    \        let new = Int(ceil(num))\n        total += new * new\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu7sme1mx.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    let new = Int(ceil(num))\n                      ^~~~\n/tmp/tmpu7sme1mx.swift:20:22:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        total += new * new\n                     ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    var sum = 0\n    \n    for value\
    \ in lst {\n        sum += Int(ceil(value)) * Int(ceil(value))\n    }\n    \n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp64aq4zws.swift:21:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(value)) * Int(ceil(value))\n                   ^~~~\n/tmp/tmp64aq4zws.swift:21:39:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(value)) * Int(ceil(value))\n\
    \                                      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(pow(ceil(num), 2))\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9_1r1is0.swift:19:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(ceil(num), 2))\n                   ^~~\n/tmp/tmp9_1r1is0.swift:19:24:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(pow(ceil(num), 2))\n\
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        let n = Int(ceil(num))\n        sum += n * n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpr2bljfa_.swift:19:21: error: cannot find 'ceil' in scope\n    \
    \    let n = Int(ceil(num))\n                    ^~~~\n/tmp/tmpr2bljfa_.swift:20:18:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        sum += n * n\n                 ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp96l4btgb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i)) * Int(ceil(i))\n                   ^~~~\n/tmp/tmp96l4btgb.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(i)) * Int(ceil(i))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6dd6_w_g.swift:17:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result = lst.map { (Double($0.rounded(.up)))\
    \ }\n    return result.map { ($0 * $0) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp89ek36dm.swift:18:29: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return result.map { ($0 * $0) }.reduce(0,\
    \ +)\n                        ~~~~^~~~~\n                        Int(     )\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpkrj5s7qa/tmpkrj5s7qa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80a5488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80a517fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80a517f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80a517e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrj5s7qa                        0x000055c81e59b351 <unavailable> + 4945

    5    libc.so.6                          0x00002b80a5674460 __libc_start_main +
    245

    6    tmpkrj5s7qa                        0x000055c81e59afa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for element in lst\
    \ {\n        sum += Int(ceil(element * element))\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpd9b9hyqb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(element * element))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for i in lst\
    \ {\n        sum += Int(ceil(i * i))\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpb4i0xxbm.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i * i))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(ceil(num)) * Int(ceil(num))\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_n55mfl.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num)) * Int(ceil(num))\n                   ^~~~\n/tmp/tmpz_n55mfl.swift:19:37:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(num)) * Int(ceil(num))\n\
    \                                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let _list_ = lst.map{ ceil($0) }\n\
    \    return _list_.map{ Int($0 * $0) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu4myecsd.swift:17:27: error: cannot find 'ceil' in scope\n    let\
    \ _list_ = lst.map{ ceil($0) }\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(ceil(lst.map{ $0 * $0 }.reduce(0,\
    \ +)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpdzx1ll2m.swift:17:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(lst.map{ $0 * $0 }.reduce(0, +)))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num\
    \ in lst {\n        sum += Int(ceil(num) * ceil(num))\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2o6tng6m.swift:21:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num) * ceil(num))\n                   ^~~~\n/tmp/tmp2o6tng6m.swift:21:32:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(num) * ceil(num))\n\
    \                               ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for i in lst {\n\
    \        total += Int(ceil(i * i))\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsx95y6fo.swift:19:22: error: cannot find 'ceil' in scope\n    \
    \    total += Int(ceil(i * i))\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in lst {\n\
    \        result += Int(ceil(i)) * Int(ceil(i))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv8lhk0gk.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(i)) * Int(ceil(i))\n                      ^~~~\n/tmp/tmpv8lhk0gk.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(i)) * Int(ceil(i))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var output = 0\n    for num in lst\
    \ {\n        let numRounded = Int(ceil(num))\n        output += numRounded * numRounded\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphgvlpfar.swift:19:30: error: cannot find 'ceil' in scope\n    \
    \    let numRounded = Int(ceil(num))\n                             ^~~~\n/tmp/tmphgvlpfar.swift:20:30:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        output += numRounded * numRounded\n                             ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var square = [Int]()\n    for i in\
    \ lst {\n        square.append(Int(ceil(i * i)))\n    }\n    return square.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpb_a8nl4j.swift:19:27: error: cannot find 'ceil' in scope\n    \
    \    square.append(Int(ceil(i * i)))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var numbers = [Int]()\n    var sum\
    \ = 0\n    for item in lst {\n        let number = Int(ceil(item))\n        numbers.append(number)\n\
    \    }\n    for item in numbers {\n        sum += item * item\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_i1h0xx4.swift:20:26: error: cannot find 'ceil' in scope\n    \
    \    let number = Int(ceil(item))\n                         ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for element in\
    \ lst {\n        if element < 0 {\n            result += Int(ceil(element * -1))\
    \ * Int(ceil(element * -1))\n        } else {\n            result += Int(ceil(element))\
    \ * Int(ceil(element))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpq2av_4pj.swift:20:27: error: cannot find 'ceil' in scope\n    \
    \        result += Int(ceil(element * -1)) * Int(ceil(element * -1))\n       \
    \                   ^~~~\n/tmp/tmpq2av_4pj.swift:20:53: error: cannot find 'ceil'\
    \ in scope\n            result += Int(ceil(element * -1)) * Int(ceil(element *\
    \ -1))\n                                                    ^~~~\n/tmp/tmpq2av_4pj.swift:22:27:\
    \ error: cannot find 'ceil' in scope\n            result += Int(ceil(element))\
    \ * Int(ceil(element))\n                          ^~~~\n/tmp/tmpq2av_4pj.swift:22:48:\
    \ error: cannot find 'ceil' in scope\n            result += Int(ceil(element))\
    \ * Int(ceil(element))\n                                               ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpa4oc5erw.swift:17:24: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map { elem in Int(ceil(elem))\
    \ }.reduce(0) { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp55tksq9f.swift:17:32: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { elem in Int(ceil(elem)) }.reduce(0) { $0 + $1 * $1 }\n           \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for item in lst {\n\
    \        sum += Int(ceil(item)) * Int(ceil(item))\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphjxzcevt.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(item)) * Int(ceil(item))\n                   ^~~~\n/tmp/tmphjxzcevt.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(item)) * Int(ceil(item))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let squares = lst.map { x in x * x\
    \ }\n    return squares.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzoei3sed.swift:18:30: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Double) throws -> Int'\n    return\
    \ squares.reduce(0, +)\n                             ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + ($1 * $1)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpopb9zvue.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + ($1 * $1)}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ Int(ceil($0)) }.reduce(0,\
    \ {$0 + ($1 * $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkxeamr3d.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{ Int(ceil($0)) }.reduce(0, {$0 + ($1 * $1)})\n                     \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       let c = Int(ceil(i))\n        sum += (c * c)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqsckru7m.swift:19:21: error: cannot find 'ceil' in scope\n    \
    \    let c = Int(ceil(i))\n                    ^~~~\n/tmp/tmpqsckru7m.swift:20:19:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        sum += (c * c)\n                  ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for item in lst {\n\
    \        sum += Int(ceil(item)) * Int(ceil(item))\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphjxzcevt.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(item)) * Int(ceil(item))\n                   ^~~~\n/tmp/tmphjxzcevt.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(item)) * Int(ceil(item))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { Int(ceil($0))\
    \ }.reduce(0) { x, y in x + y * y })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8c3m0im2.swift:17:30: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { Int(ceil($0)) }.reduce(0) { x, y in x + y * y })\n           \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map{ Int(ceil($0)) }.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpodcjpawa.swift:17:23: error: cannot find 'ceil' in scope\n  return\
    \ lst.map{ Int(ceil($0)) }.reduce(0, {$0 + $1 * $1})\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpb1lzwzsi.swift:17:22: error: cannot find 'ceil' in scope\n  return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){\
    \ $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmstbll_q.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){ $0 + $1 * $1 }\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map {Int(ceil($0))}.reduce(0)\
    \ {$0 + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_18pnqqh.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map {Int(ceil($0))}.reduce(0) {$0 + $1 * $1}\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in lst {\n\
    \        let newI = ceil(i)\n        result += Int(newI * newI)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpild24scu.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    let newI = ceil(i)\n                   ^~~~\n/tmp/tmpild24scu.swift:20:19:\
    \ error: no exact matches in call to initializer \n        result += Int(newI\
    \ * newI)\n                  ^\n/tmp/tmpild24scu.swift:20:19: note: found candidate\
    \ with type '(Float16) -> Int'\n        result += Int(newI * newI)\n         \
    \         ^\n/tmp/tmpild24scu.swift:20:19: note: found candidate with type '(Float)\
    \ -> Int'\n        result += Int(newI * newI)\n                  ^\n/tmp/tmpild24scu.swift:20:19:\
    \ note: found candidate with type '(Double) -> Int'\n        result += Int(newI\
    \ * newI)\n                  ^\n/tmp/tmpild24scu.swift:20:19: note: found candidate\
    \ with type '(Float80) -> Int'\n        result += Int(newI * newI)\n         \
    \         ^\n/tmp/tmpild24scu.swift:20:19: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        result += Int(newI * newI)\n                  ^\n/tmp/tmpild24scu.swift:20:19:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        result += Int(newI\
    \ * newI)\n                  ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map{$0.rounded(.up)}.map{$0\
    \ * $0}.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.ZqSRpR/tmpodhbbb1v-1.o:tmpodhbbb1v-1.o:function $s11tmpodhbbb1v11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for number in lst\
    \ {\n        sum += Int(ceil(number)) * Int(ceil(number))\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpa2_s5327.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(number)) * Int(ceil(number))\n                   ^~~~\n/tmp/tmpa2_s5327.swift:19:40:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(number)) * Int(ceil(number))\n\
    \                                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    var list = lst\n\
    \    if list.count > 0 {\n        for i in 0...list.count - 1 {\n            result\
    \ += Int(list[i].rounded(.up)) * Int(list[i].rounded(.up))\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5p8rx9n2.swift:18:9: warning: variable 'list' was never mutated;\
    \ consider changing to 'let' constant\n    var list = lst\n    ~~~ ^\n    let\n\
    error: link command failed with exit code 1 (use -v to see invocation)\n/tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function\
    \ $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF: error: undefined reference to 'round'\n\
    /tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF:\
    \ error: undefined reference to 'rint'\n/tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function\
    \ $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF: error: undefined reference to 'trunc'\n\
    /tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF:\
    \ error: undefined reference to 'ceil'\n/tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function\
    \ $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF: error: undefined reference to 'floor'\n\
    /tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF:\
    \ error: undefined reference to 'floor'\n/tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function\
    \ $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF: error: undefined reference to 'ceil'\n\
    /tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF:\
    \ error: undefined reference to 'round'\n/tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function\
    \ $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF: error: undefined reference to 'rint'\n\
    /tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF:\
    \ error: undefined reference to 'trunc'\n/tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function\
    \ $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF: error: undefined reference to 'ceil'\n\
    /tmp/TemporaryDirectory.wwWjlQ/tmp5p8rx9n2-1.o:tmp5p8rx9n2-1.o:function $s11tmp5p8rx9n211sum_squares3lstSiSaySdG_tF:\
    \ error: undefin"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in lst {\n\
    \        result += Int(ceil(i)) * Int(ceil(i))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv8lhk0gk.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(i)) * Int(ceil(i))\n                      ^~~~\n/tmp/tmpv8lhk0gk.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(i)) * Int(ceil(i))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var result = 0\n  for element in lst\
    \ {\n    result += Int(ceil(element * element))\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpjjawq4h3.swift:19:19: error: cannot find 'ceil' in scope\n    result\
    \ += Int(ceil(element * element))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp96l4btgb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i)) * Int(ceil(i))\n                   ^~~~\n/tmp/tmp96l4btgb.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(i)) * Int(ceil(i))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6dd6_w_g.swift:17:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + ($1 * $1)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpopb9zvue.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + ($1 * $1)}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { ceil($0) }.map\
    \ { $0 * $0 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgsalflen.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for e in lst {\n\
    \        result += Int(ceil(e)) * Int(ceil(e))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsw6h80a3.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(e)) * Int(ceil(e))\n                      ^~~~\n/tmp/tmpsw6h80a3.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(e)) * Int(ceil(e))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for element in lst\
    \ {\n        total += Int(ceil(element) * ceil(element))\n    }\n    return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpc4pqg223.swift:19:22: error: cannot find 'ceil' in scope\n    \
    \    total += Int(ceil(element) * ceil(element))\n                     ^~~~\n\
    /tmp/tmpc4pqg223.swift:19:38: error: cannot find 'ceil' in scope\n        total\
    \ += Int(ceil(element) * ceil(element))\n                                    \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(($0).rounded(.up))\
    \ }.reduce(0) { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.uIzpOr/tmpcai8kmkv-1.o:tmpcai8kmkv-1.o:function $s11tmpcai8kmkv11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for item in lst\
    \ {\n        sum += (item).rounded(.up) * (item).rounded(.up)\n    }\n    return\
    \ Int(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.tqd7CT/tmpa6y19t0e-1.o:tmpa6y19t0e-1.o:function $s11tmpa6y19t0e11sum_squares3lstSiSaySdG_tF:
    error'
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let lst = lst.map { Int(ceil($0)) }\n\
    \    return lst.reduce(0) { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgqgnjl82.swift:17:29: error: cannot find 'ceil' in scope\n    let\
    \ lst = lst.map { Int(ceil($0)) }\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let mappedList = lst.map { ceil($0)\
    \ }\n    let result = mappedList.reduce(0, {\n        $0 + Int(pow($1, 2))\n \
    \   })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8mmf7nnp.swift:17:32: error: cannot find 'ceil' in scope\n    let\
    \ mappedList = lst.map { ceil($0) }\n                               ^~~~\n/tmp/tmp8mmf7nnp.swift:19:18:\
    \ error: cannot find 'pow' in scope\n        $0 + Int(pow($1, 2))\n          \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result = lst.map { $0.rounded(.up)\
    \ }.map { $0 * $0 }.reduce(0, +)\n    return Int(result)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.cMYOQV/tmp1jxmeyui-1.o:tmp1jxmeyui-1.o:function $s11tmp1jxmeyui11sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.map { $0.rounded(.up)\
    \ }.reduce(0) { $0 + Int($1 * $1) }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.TYW6oY/tmppd3el1d8-1.o:tmppd3el1d8-1.o:function $s11tmppd3el1d811sum_squares3lstSiSaySdG_tFS2dXEfU_:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map({ Int(ceil($0))}).reduce(0,\
    \ {x, y in x + y * y})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpdsbcta8t.swift:17:24: error: cannot find 'ceil' in scope\n  return\
    \ lst.map({ Int(ceil($0))}).reduce(0, {x, y in x + y * y})\n                 \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       let number = ceil(i)\n        sum += Int(pow(number, 2))\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp0jr_0dx0.swift:19:22: error: cannot find 'ceil' in scope\n    \
    \    let number = ceil(i)\n                     ^~~~\n/tmp/tmp0jr_0dx0.swift:20:20:\
    \ error: cannot find 'pow' in scope\n        sum += Int(pow(number, 2))\n    \
    \               ^~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // TODO: Your code here\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp8b5ksq0f/tmp8b5ksq0f.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a2163bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a21332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a21332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a213317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8b5ksq0f                        0x0000559861950351 <unavailable> + 4945

    5    libc.so.6                          0x00002b2a21827460 __libc_start_main +
    245

    6    tmp8b5ksq0f                        0x000055986194ffa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.rounded(.up) }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3ow2k9cs.swift:17:49: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0.rounded(.up) }.map { $0\
    \ * $0 }.reduce(0, +)\n                                             ~~~^~~~\n\
    \                                             Int(   )\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.rounded(.up) }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3ow2k9cs.swift:17:49: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0.rounded(.up) }.map { $0\
    \ * $0 }.reduce(0, +)\n                                             ~~~^~~~\n\
    \                                             Int(   )\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6dd6_w_g.swift:17:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp96l4btgb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i)) * Int(ceil(i))\n                   ^~~~\n/tmp/tmp96l4btgb.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(i)) * Int(ceil(i))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + ($1 * $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprwvcbhap.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + ($1 * $1) }\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ x in\n        return\
    \ Int(ceil(x) * ceil(x))\n    }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpi9yni041.swift:18:20: error: cannot find 'ceil' in scope\n    \
    \    return Int(ceil(x) * ceil(x))\n                   ^~~~\n/tmp/tmpi9yni041.swift:18:30:\
    \ error: cannot find 'ceil' in scope\n        return Int(ceil(x) * ceil(x))\n\
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { ceil($0) }.map\
    \ { $0 * $0 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgsalflen.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for i in lst {\n\
    \        result += Int(ceil(i)) * Int(ceil(i))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv8lhk0gk.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(i)) * Int(ceil(i))\n                      ^~~~\n/tmp/tmpv8lhk0gk.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(i)) * Int(ceil(i))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for number in lst\
    \ {\n        result += Int(ceil(number) * ceil(number))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp249uayik.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(number) * ceil(number))\n                      ^~~~\n\
    /tmp/tmp249uayik.swift:19:38: error: cannot find 'ceil' in scope\n        result\
    \ += Int(ceil(number) * ceil(number))\n                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var squareSum = 0\n    for number in\
    \ lst {\n        squareSum += Int(ceil(number)) * Int(ceil(number))\n    }\n \
    \   return squareSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1hfzgrkl.swift:19:26: error: cannot find 'ceil' in scope\n    \
    \    squareSum += Int(ceil(number)) * Int(ceil(number))\n                    \
    \     ^~~~\n/tmp/tmp1hfzgrkl.swift:19:46: error: cannot find 'ceil' in scope\n\
    \        squareSum += Int(ceil(number)) * Int(ceil(number))\n                \
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result = lst.map { Int(ceil($0))\
    \ }.map { $0 * $0 }.reduce(0, +)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpxi1mnhp7.swift:17:32: error: cannot find 'ceil' in scope\n    let\
    \ result = lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n          \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ element in lst {\n        result += Int(ceil(element)) * Int(ceil(element))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpr9oo2wpw.swift:21:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(element)) * Int(ceil(element))\n                     \
    \ ^~~~\n/tmp/tmpr9oo2wpw.swift:21:44: error: cannot find 'ceil' in scope\n   \
    \     result += Int(ceil(element)) * Int(ceil(element))\n                    \
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.rounded(.up) }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3ow2k9cs.swift:17:49: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0.rounded(.up) }.map { $0\
    \ * $0 }.reduce(0, +)\n                                             ~~~^~~~\n\
    \                                             Int(   )\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        sum += Int(lst[index].rounded(.up)) * Int(lst[index].rounded(.up))\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.KrfZn5/tmpt5rnixee-1.o:tmpt5rnixee-1.o:function $s11tmpt5rnixee11sum_squares3lstSiSaySdG_tF:
    error'
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ ceil($0) }.map{ Int($0\
    \ * $0) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsjdbp_j9.swift:17:21: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{ ceil($0) }.map{ Int($0 * $0) }.reduce(0, +)\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for item in lst {\n\
    \        sum += Int(ceil(item)) * Int(ceil(item))\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphjxzcevt.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(item)) * Int(ceil(item))\n                   ^~~~\n/tmp/tmphjxzcevt.swift:19:38:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(item)) * Int(ceil(item))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqzbl209w.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // write your code here ...\n    var\
    \ sum: Int = 0\n    for i in lst {\n        var n = Int(ceil(i))\n        sum\
    \ += n * n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzr1legmb.swift:20:21: error: cannot find 'ceil' in scope\n    \
    \    var n = Int(ceil(i))\n                    ^~~~\n/tmp/tmpzr1legmb.swift:21:18:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        sum += n * n\n                 ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpa4oc5erw.swift:17:24: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for num in lst\
    \ {\n        result += Int(ceil(num) * ceil(num))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsaf46gn9.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(num) * ceil(num))\n                      ^~~~\n/tmp/tmpsaf46gn9.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(num) * ceil(num))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6dd6_w_g.swift:17:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // write your code here!\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0])\
    \ == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpv6kr154n/tmpv6kr154n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae339732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae339429b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae339429988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3394287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6kr154n                        0x00005643f1007351 <unavailable> + 4945

    5    libc.so.6                          0x00002ae33991e460 __libc_start_main +
    245

    6    tmpv6kr154n                        0x00005643f1006fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(ceil(num)) * Int(ceil(num))\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_n55mfl.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num)) * Int(ceil(num))\n                   ^~~~\n/tmp/tmpz_n55mfl.swift:19:37:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(num)) * Int(ceil(num))\n\
    \                                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ceil($0)}.map{$0 * $0}.reduce(0,\
    \ {x, y in x + y})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpamzz_6vr.swift:17:20: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{ceil($0)}.map{$0 * $0}.reduce(0, {x, y in x + y})\n                \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += Int(ceil(n)) * Int(ceil(n))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpa04uzoe8.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(n)) * Int(ceil(n))\n                   ^~~~\n/tmp/tmpa04uzoe8.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(n)) * Int(ceil(n))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let ceilList = lst.map({return ceil($0)})\n\
    \    return ceilList.map({return $0 * $0}).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp674hoj2x.swift:17:36: error: cannot find 'ceil' in scope\n    let\
    \ ceilList = lst.map({return ceil($0)})\n                                   ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp6dd6_w_g.swift:17:22: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map{ pow(Ceil($0), 2)\
    \ }.reduce(0, combine: +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmxscwaam.swift:17:25: error: cannot find 'pow' in scope\n    return\
    \ Int(lst.map{ pow(Ceil($0), 2) }.reduce(0, combine: +))\n                   \
    \     ^~~\n/tmp/tmpmxscwaam.swift:17:29: error: cannot find 'Ceil' in scope\n\
    \    return Int(lst.map{ pow(Ceil($0), 2) }.reduce(0, combine: +))\n         \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Double(ceil($0)) }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1gy3hi2p.swift:17:29: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Double(ceil($0)) }.map { $0 * $0 }.reduce(0, +)\n                \
    \            ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { pow(ceil($0),\
    \ 2) }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmple24ng1o.swift:17:26: error: cannot find 'pow' in scope\n    return\
    \ Int(lst.map { pow(ceil($0), 2) }.reduce(0, +))\n                         ^~~\n\
    /tmp/tmple24ng1o.swift:17:30: error: cannot find 'ceil' in scope\n    return Int(lst.map\
    \ { pow(ceil($0), 2) }.reduce(0, +))\n                             ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for e in lst {\n\
    \        let ceil = ceil(e)\n        let square = ceil * ceil\n        result\
    \ += Int(square)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpiu4q3i66.swift:19:20: error: use of local variable 'ceil' before\
    \ its declaration\n        let ceil = ceil(e)\n                   ^\n/tmp/tmpiu4q3i66.swift:19:13:\
    \ note: 'ceil' declared here\n        let ceil = ceil(e)\n            ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var s: Int = 0\n    for v in lst {\n\
    \        s += Int(pow(ceil(v), 2))\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsxonive9.swift:19:18: error: cannot find 'pow' in scope\n     \
    \   s += Int(pow(ceil(v), 2))\n                 ^~~\n/tmp/tmpsxonive9.swift:19:22:\
    \ error: cannot find 'ceil' in scope\n        s += Int(pow(ceil(v), 2))\n    \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let ceiled = lst.map { ceil($0) }\n\
    \    return ceiled.map { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpw32lqm3k.swift:17:28: error: cannot find 'ceil' in scope\n    let\
    \ ceiled = lst.map { ceil($0) }\n                           ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum = 0\n  for num in lst {\n   \
    \ sum += Int(ceil(num * num))\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4yl7t13x.swift:19:16: error: cannot find 'ceil' in scope\n    sum\
    \ += Int(ceil(num * num))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var output = 0\n    for i in lst {\n\
    \        output += Int(ceil(i*i))\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4majdrsh.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    output += Int(ceil(i*i))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { ceil($0) }.map\
    \ { $0 * $0 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgsalflen.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpa4oc5erw.swift:17:24: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // Your code is here.\n    var sum\
    \ : Int = 0\n    for i in lst {\n        sum += Int(pow(ceil(i), 2))\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwhsr46i8.swift:20:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(ceil(i), 2))\n                   ^~~\n/tmp/tmpwhsr46i8.swift:20:24:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(pow(ceil(i), 2))\n  \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let elements = lst.map({ Int(ceil($0))\
    \ })\n    let total = elements.reduce(0, { $0 + ($1 * $1) })\n    return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmk4my19m.swift:17:34: error: cannot find 'ceil' in scope\n    let\
    \ elements = lst.map({ Int(ceil($0)) })\n                                 ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    \n    let upperCeiling = lst.map {\
    \ ceil($0) }\n    let sum = upperCeiling.reduce(0) { $0 + Int($1 * $1) }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2e4mlbdp.swift:18:34: error: cannot find 'ceil' in scope\n    let\
    \ upperCeiling = lst.map { ceil($0) }\n                                 ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for var item in\
    \ lst {\n        item = ceil(item)\n        result += Int(pow(item, 2))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpctohs3rt.swift:19:16: error: cannot find 'ceil' in scope\n    \
    \    item = ceil(item)\n               ^~~~\n/tmp/tmpctohs3rt.swift:20:23: error:\
    \ cannot find 'pow' in scope\n        result += Int(pow(item, 2))\n          \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.rounded(.up) }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3ow2k9cs.swift:17:49: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0.rounded(.up) }.map { $0\
    \ * $0 }.reduce(0, +)\n                                             ~~~^~~~\n\
    \                                             Int(   )\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for num in lst {\n\
    \        total += Int(ceil(num) * ceil(num))\n    }\n    return total\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpw9k3mlzp.swift:19:22: error: cannot find 'ceil' in scope\n    \
    \    total += Int(ceil(num) * ceil(num))\n                     ^~~~\n/tmp/tmpw9k3mlzp.swift:19:34:\
    \ error: cannot find 'ceil' in scope\n        total += Int(ceil(num) * ceil(num))\n\
    \                                 ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqzbl209w.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        let roundedNum = Int(ceil(num))\n        sum += (roundedNum * roundedNum)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpl1ahzgbf.swift:19:30: error: cannot find 'ceil' in scope\n    \
    \    let roundedNum = Int(ceil(num))\n                             ^~~~\n/tmp/tmpl1ahzgbf.swift:20:28:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        sum += (roundedNum * roundedNum)\n                           ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let sum = lst.map{Int(ceil($0))}.reduce(0,\
    \ { $0 + ($1 * $1) })\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_friumuf.swift:17:27: error: cannot find 'ceil' in scope\n    let\
    \ sum = lst.map{Int(ceil($0))}.reduce(0, { $0 + ($1 * $1) })\n               \
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let lstOfInts = lst.map{Int(ceil($0))}\n\
    \    let mapped = lstOfInts.map{$0 * $0}\n    let result = mapped.reduce(0){$0\
    \ + $1}\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpokwml_vb.swift:17:33: error: cannot find 'ceil' in scope\n    let\
    \ lstOfInts = lst.map{Int(ceil($0))}\n                                ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + ($1 * $1)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpopb9zvue.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + ($1 * $1)}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpkrj5s7qa/tmpkrj5s7qa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80a5488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80a517fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80a517f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80a517e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrj5s7qa                        0x000055c81e59b351 <unavailable> + 4945

    5    libc.so.6                          0x00002b80a5674460 __libc_start_main +
    245

    6    tmpkrj5s7qa                        0x000055c81e59afa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    // your code here\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp0w1alkqa/tmp0w1alkqa.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba70b79fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba70b496b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba70b496988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba70b4957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0w1alkqa                        0x000055bd5a54f351 <unavailable> + 4945

    5    libc.so.6                          0x00002ba70b98b460 __libc_start_main +
    245

    6    tmp0w1alkqa                        0x000055bd5a54efa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(pow(ceil(num), 2))\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9_1r1is0.swift:19:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(ceil(num), 2))\n                   ^~~\n/tmp/tmp9_1r1is0.swift:19:24:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(pow(ceil(num), 2))\n\
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqzbl209w.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { (elem) -> Int in\n\
    \        return Int(elem.rounded(.up))\n    }.reduce(0) { (cur, next) -> Int in\n\
    \        return cur + Int(pow(Double(next), 2))\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpwm96xf0n.swift:20:26: error: cannot find 'pow' in scope\n     \
    \   return cur + Int(pow(Double(next), 2))\n                         ^~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(ceil(num)) * Int(ceil(num))\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_n55mfl.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num)) * Int(ceil(num))\n                   ^~~~\n/tmp/tmpz_n55mfl.swift:19:37:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(num)) * Int(ceil(num))\n\
    \                                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return lst.map{Int(ceil($0))}.reduce(0){$0\
    \ + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpb1lzwzsi.swift:17:22: error: cannot find 'ceil' in scope\n  return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                     ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{ ceil($0) }.map{ $0\
    \ * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpr11s7eun.swift:17:21: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{ ceil($0) }.map{ $0 * $0 }.reduce(0, +)\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0zjo7cw.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + ($1 * $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprwvcbhap.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + ($1 * $1) }\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var answer = 0\n    for num in lst\
    \ {\n        answer += Int(ceil(num * num))\n    }\n    return answer\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpg05f23tu.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    answer += Int(ceil(num * num))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map {Int(ceil($0))}.reduce(0)\
    \ {$0 + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_18pnqqh.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map {Int(ceil($0))}.reduce(0) {$0 + $1 * $1}\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map{ ceil($0) }.map{\
    \ $0 * $0 }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppryydeam.swift:17:25: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map{ ceil($0) }.map{ $0 * $0 }.reduce(0, +))\n                     \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for value in lst\
    \ {\n        result += Int(ceil(value)) * Int(ceil(value))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptkzhfscm.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(value)) * Int(ceil(value))\n                      ^~~~\n\
    /tmp/tmptkzhfscm.swift:19:42: error: cannot find 'ceil' in scope\n        result\
    \ += Int(ceil(value)) * Int(ceil(value))\n                                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let n = lst.count\n    var sum: Int\
    \ = 0\n    for i in 0..<n {\n        let num = Int(ceil(lst[i]))\n        sum\
    \ += num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnluv0ks6.swift:20:23: error: cannot find 'ceil' in scope\n    \
    \    let num = Int(ceil(lst[i]))\n                      ^~~~\n/tmp/tmpnluv0ks6.swift:21:20:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        sum += num * num\n                   ^\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for item in lst\
    \ {\n        let result = item * item\n        sum += Int(ceil(result))\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcam5sh_o.swift:20:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(result))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Double = 0\n    for i in lst\
    \ {\n        sum += ceil(i) * ceil(i)\n    }\n    return Int(sum)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfivujrwh.swift:19:16: error: cannot find 'ceil' in scope\n    \
    \    sum += ceil(i) * ceil(i)\n               ^~~~\n/tmp/tmpfivujrwh.swift:19:26:\
    \ error: cannot find 'ceil' in scope\n        sum += ceil(i) * ceil(i)\n     \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var total = 0\n    for i in lst {\n\
    \        total += Int(i.rounded(.up))\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.HA29By/tmp8prxlv55-1.o:tmp8prxlv55-1.o:function $s11tmp8prxlv5511sum_squares3lstSiSaySdG_tF:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let squared_array = lst.map{ item in\
    \ pow(ceil(item), 2) }\n    return squared_array.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpqrwt43as.swift:17:42: error: cannot find 'pow' in scope\n    let\
    \ squared_array = lst.map{ item in pow(ceil(item), 2) }\n                    \
    \                     ^~~\n/tmp/tmpqrwt43as.swift:17:46: error: cannot find 'ceil'\
    \ in scope\n    let squared_array = lst.map{ item in pow(ceil(item), 2) }\n  \
    \                                           ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for element in lst\
    \ {\n        sum += Int(ceil(element) * ceil(element))\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpl6hy7kio.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(element) * ceil(element))\n                   ^~~~\n/tmp/tmpl6hy7kio.swift:19:36:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(element) * ceil(element))\n\
    \                                   ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0\n    for item in lst\
    \ {\n        result += Int(ceil(item)) * Int(ceil(item))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgkfiqr2b.swift:19:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(item)) * Int(ceil(item))\n                      ^~~~\n\
    /tmp/tmpgkfiqr2b.swift:19:41: error: cannot find 'ceil' in scope\n        result\
    \ += Int(ceil(item)) * Int(ceil(item))\n                                     \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var result = 0.0\n    for num in lst\
    \ {\n        result += ceil(num * num)\n    }\n    return Int(result)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppdj56yx8.swift:19:19: error: cannot find 'ceil' in scope\n    \
    \    result += ceil(num * num)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let numbers = lst.map { Int(ceil($0))\
    \ }\n    let sum = numbers.reduce(0) { $0 + $1 * $1 }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbyhg4cyh.swift:17:33: error: cannot find 'ceil' in scope\n    let\
    \ numbers = lst.map { Int(ceil($0)) }\n                                ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    //    return lst.map{(x) -> Int in\
    \ return Int(x.rounded(.up))}\n    //        .map{(x) -> Int in return x * x}\n\
    \    //        .reduce(0, +)\n    return lst.map{ Int($0.rounded(.up)) }\n   \
    \     .map{ $0 * $0 }\n        .reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''round''

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''rint''

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''trunc''

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''ceil''

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''floor''

    /tmp/TemporaryDirectory.toApAF/tmpj_cv6i5f-1.o:tmpj_cv6i5f-1.o:function $s11tmpj_cv6i5f11sum_squares3lstSiSaySdG_tFSiSdXEfU_:
    error: undefined reference to ''ceil''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum: Int = 0\n    for i in lst\
    \ {\n        sum += Int(ceil(i * i))\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpb4i0xxbm.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i * i))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ { $0 + ($1 * $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprwvcbhap.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + ($1 * $1) }\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  var sum: Int = 0\n  for var i in lst\
    \ {\n    sum += Int(ceil(i) * ceil(i))\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpumbvj8cr.swift:19:16: error: cannot find 'ceil' in scope\n    sum\
    \ += Int(ceil(i) * ceil(i))\n               ^~~~\n/tmp/tmpumbvj8cr.swift:19:26:\
    \ error: cannot find 'ceil' in scope\n    sum += Int(ceil(i) * ceil(i))\n    \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let squares = lst.map { ceil($0) }.map\
    \ { $0 * $0 }\n    return squares.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpdmwb2kpl.swift:17:29: error: cannot find 'ceil' in scope\n    let\
    \ squares = lst.map { ceil($0) }.map { $0 * $0 }\n                           \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return Int(lst.map { pow(ceil($0),\
    \ 2) }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmple24ng1o.swift:17:26: error: cannot find 'pow' in scope\n    return\
    \ Int(lst.map { pow(ceil($0), 2) }.reduce(0, +))\n                         ^~~\n\
    /tmp/tmple24ng1o.swift:17:30: error: cannot find 'ceil' in scope\n    return Int(lst.map\
    \ { pow(ceil($0), 2) }.reduce(0, +))\n                             ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    let result = lst.map { (element) ->\
    \ Int in\n        return Int(ceil(element))\n    }\n    return result.reduce(0)\
    \ { (result, element) -> Int in\n        return result + element * element\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpm0eca6go.swift:18:20: error: cannot find 'ceil' in scope\n    \
    \    return Int(ceil(element))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n \
    \       sum += Int(ceil(n) * ceil(n))\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_e3r7rnb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(n) * ceil(n))\n                   ^~~~\n/tmp/tmp_e3r7rnb.swift:19:30:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(n) * ceil(n))\n\
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { ($0 < 0) ? Int(ceil($0))\
    \ : Int(floor($0)) }.reduce(0) { $0 + $1 * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9786vdpq.swift:17:37: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { ($0 < 0) ? Int(ceil($0)) : Int(floor($0)) }.reduce(0) { $0 + $1 *\
    \ $1 }\n                                    ^~~~\n/tmp/tmp9786vdpq.swift:17:53:\
    \ error: cannot find 'floor' in scope\n    return lst.map { ($0 < 0) ? Int(ceil($0))\
    \ : Int(floor($0)) }.reduce(0) { $0 + $1 * $1 }\n                            \
    \                        ^~~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0.0\n    for x in lst {\n\
    \        sum += pow(ceil(x), 2)\n    }\n    return Int(sum)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaun_n7fy.swift:19:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow(ceil(x), 2)\n               ^~~\n/tmp/tmpaun_n7fy.swift:19:20:\
    \ error: cannot find 'ceil' in scope\n        sum += pow(ceil(x), 2)\n       \
    \            ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp2qn6ojb5/tmp2qn6ojb5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f306cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f2d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f2d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f2d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qn6ojb5                        0x000055dac7595351 <unavailable> + 4945

    5    libc.so.6                          0x00002b62f3258460 __libc_start_main +
    245

    6    tmp2qn6ojb5                        0x000055dac7594fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n \
    \       sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp96l4btgb.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i)) * Int(ceil(i))\n                   ^~~~\n/tmp/tmp96l4btgb.swift:19:35:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(i)) * Int(ceil(i))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: -4
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpkrj5s7qa/tmpkrj5s7qa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80a5488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80a517fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80a517f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80a517e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrj5s7qa                        0x000055c81e59b351 <unavailable> + 4945

    5    libc.so.6                          0x00002b80a5674460 __libc_start_main +
    245

    6    tmpkrj5s7qa                        0x000055c81e59afa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(ceil(num)) * Int(ceil(num))\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_n55mfl.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num)) * Int(ceil(num))\n                   ^~~~\n/tmp/tmpz_n55mfl.swift:19:37:\
    \ error: cannot find 'ceil' in scope\n        sum += Int(ceil(num)) * Int(ceil(num))\n\
    \                                    ^~~~\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0)\
    \ {$0 + $1 * $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt7tryuth.swift:17:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) {$0 + $1 * $1}\n                       \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n\
    \        sum += Int(ceil(num))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9vlusunw.swift:19:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0,\
    \ {$0 + $1 * $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt2exdbjl.swift:17:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    var num = [Int]()\n    for i in lst\
    \ {\n        num.append(Int(ceil(i)))\n    }\n    var result = 0\n    for i in\
    \ num {\n        result += i * i\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbvoon5mb.swift:19:24: error: cannot find 'ceil' in scope\n    \
    \    num.append(Int(ceil(i)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map{Double(ceil($0))}.map{$0\
    \ * $0}.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt_0dbe7o.swift:17:27: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Double(ceil($0))}.map{$0 * $0}.reduce(0, +)\n                      \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { (Double($0.rounded(.up)).rounded())\
    \ * Double($0.rounded(.up)).rounded() }.reduce(0,+)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5zk23pjs.swift:17:58: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { (Double($0.rounded(.up)).rounded())\
    \ * Double($0.rounded(.up)).rounded() }.reduce(0,+)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                     Int(                                                   \
    \                )\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "\n/// You are given an array of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given array,\n/// round each element in the array\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0,\
    \ 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>>\
    \ sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4,\
    \ 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc\
    \ sum_squares(lst: [Double]) -> Int {\n    return lst.map { $0.rounded(.up) }.map\
    \ { $0 * $0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3ow2k9cs.swift:17:49: error: cannot convert value of type 'Double'\
    \ to closure result type 'Int'\n    return lst.map { $0.rounded(.up) }.map { $0\
    \ * $0 }.reduce(0, +)\n                                             ~~~^~~~\n\
    \                                             Int(   )\n"
  stdout: ''
  timestamp: 1660009740
