language: swift
name: HumanEval_132_is_nested
results:
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var open = 0\n    var close = 0\n    for char in string\
    \ {\n        if char == \"[\" {\n            open += 1\n        } else if char\
    \ == \"]\" {\n            close += 1\n        }\n    }\n    return open > 0 &&\
    \ open == close\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxtvl54e7/tmpxtvl54e7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b717fff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b717fcf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b717fcf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b717fcef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxtvl54e7                        0x000055afd73f954b <unavailable> + 5451

    5    libc.so.6                          0x00002b71801e5460 __libc_start_main +
    245

    6    tmpxtvl54e7                        0x000055afd73f9099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // square bracket only\n    if !string.contains(\"[\"\
    ) || !string.contains(\"]\") {\n        return false\n    }\n    \n    let string\
    \ = Array(string)\n    var stack: [String] = []\n    \n    for bracket in string\
    \ {\n        // push all left bracket into stack\n        if bracket == \"[\"\
    \ {\n            stack.append(String(bracket))\n        } else {\n           \
    \ // check if the stack is empty\n            // if it is empty, the string is\
    \ invalid because\n            // there are no more left bracket to match with\
    \ the right bracket\n            if stack.isEmpty {\n                return false\n\
    \            }\n            \n            // pop off the last bracket in the stack\n\
    \            stack.removeLast()\n        }\n    }\n    \n    // check if the stack\
    \ is empty\n    // if it is empty, all brackets has been matched\n    // if not,\
    \ the string is invalid because the number of left brackets and right brackets\
    \ is not equal\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2i3bk7cy/tmp2i3bk7cy.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf4faa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf4f798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf4f798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf4f7977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2i3bk7cy                        0x00005568a5acda5b <unavailable> + 6747

    5    libc.so.6                          0x00002aaf4fc8d460 __libc_start_main +
    245

    6    tmp2i3bk7cy                        0x00005568a5acd5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.isEmpty {\n        return false\n    }\n  \
    \  var stack = Stack<Character>()\n    for bracket in string {\n        if bracket\
    \ == \"[\" {\n            stack.push(bracket)\n        } else {\n            if\
    \ stack.isEmpty {\n                return false\n            }\n            _\
    \ = stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4b4kbvzy.swift:21:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  // your code here\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpntdt2a5l/tmpntdt2a5l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e95b3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e95836b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e95836988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e958357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntdt2a5l                        0x000055c98066525b <unavailable> + 4699

    5    libc.so.6                          0x00002b2e95d2b460 __libc_start_main +
    245

    6    tmpntdt2a5l                        0x000055c980664ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var index = string.startIndex\n    var openCount = 0\n\
    \    var closeCount = 0\n    while index != string.endIndex {\n        let char\
    \ = string[index]\n        if char == \"[\" {\n            openCount += 1\n  \
    \      } else if char == \"]\" {\n            closeCount += 1\n        }\n   \
    \     if closeCount > openCount {\n            return false\n        }\n     \
    \   index = string.index(after: index)\n    }\n    return openCount > closeCount\
    \ ? false : openCount > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpi8mec5xm/tmpi8mec5xm.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44190d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4418dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4418dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4418dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8mec5xm                        0x00005570136e45fb <unavailable> + 5627

    5    libc.so.6                          0x00002b44192c4460 __libc_start_main +
    245

    6    tmpi8mec5xm                        0x00005570136e4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let leftBracket = Character(\"[\")\n    let rightBracket\
    \ = Character(\"]\")\n    let characters = Array(string)\n    let reversedCharacters\
    \ = characters.reversed()\n    var leftBracketCount = 0\n    var rightBracketCount\
    \ = 0\n    for char in characters {\n        if char == leftBracket {\n      \
    \      leftBracketCount += 1\n        }\n    }\n    for char in reversedCharacters\
    \ {\n        if char == rightBracket {\n            rightBracketCount += 1\n \
    \       }\n    }\n    if rightBracketCount > leftBracketCount {\n        return\
    \ false\n    }\n    var leftBracketOpened = 0\n    var rightBracketOpened = 0\n\
    \    for char in characters {\n        if char == leftBracket {\n            leftBracketOpened\
    \ += 1\n        } else if char == rightBracket {\n            rightBracketOpened\
    \ += 1\n        }\n        if rightBracketOpened > leftBracketOpened {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2twdhzc2/tmp2twdhzc2.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90986ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba909565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba909565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9095647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2twdhzc2                        0x000055e5c7f2896b <unavailable> + 6507

    5    libc.so.6                          0x00002ba909a5a460 __libc_start_main +
    245

    6    tmp2twdhzc2                        0x000055e5c7f284b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let string = string.map { char -> Character in\n    \
    \    if char == \"[\" {\n            return char\n        } else {\n         \
    \   return \"]\"\n        }\n    }\n    var stack = [Character]()\n    for char\
    \ in string {\n        if char == \"[\" {\n            stack.append(char)\n  \
    \      } else {\n            if let last = stack.last {\n                if last\
    \ == \"[\" {\n                    stack.removeLast()\n                } else {\n\
    \                    return false\n                }\n            } else {\n \
    \               return false\n            }\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpr08ky58c/tmpr08ky58c.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f59c06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f598fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f598fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f598fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr08ky58c                        0x0000556a8af9d9ab <unavailable> + 6571

    5    libc.so.6                          0x00002b3f59df2460 __libc_start_main +
    245

    6    tmpr08ky58c                        0x0000556a8af9d4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for char in string {\n        if char\
    \ == \"[\" {\n            count += 1\n        } else if char == \"]\" {\n    \
    \        count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg_djm1wa/tmpg_djm1wa.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba607403c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6070fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6070fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6070f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_djm1wa                        0x00005632227ee54b <unavailable> + 5451

    5    libc.so.6                          0x00002ba6075ef460 __libc_start_main +
    245

    6    tmpg_djm1wa                        0x00005632227ee099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp26lkbd25/tmp26lkbd25.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06c9697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06c938eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06c938e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06c938d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26lkbd25                        0x000055be596ae25b <unavailable> + 4699

    5    libc.so.6                          0x00002b06c9883460 __libc_start_main +
    245

    6    tmp26lkbd25                        0x000055be596adee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if let poppedChar = stack.popLast() {\n       \
    \         if poppedChar != \"[\" {\n                    return false\n       \
    \         }\n            } else {\n                return false\n            }\n\
    \        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpigcqpoc2/tmpigcqpoc2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaae08ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaadd81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaadd81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaadd807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigcqpoc2                        0x0000558d200b47bb <unavailable> + 6075

    5    libc.so.6                          0x00002aeaae276460 __libc_start_main +
    245

    6    tmpigcqpoc2                        0x0000558d200b4309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let openingBrackets = Set<Character>(arrayLiteral: \"\
    [\")\n    let validSequence = [Character]()\n    var currentSequence = [Character]()\n\
    \    var stack = [Character]()\n    \n    for bracket in string {\n        if\
    \ openingBrackets.contains(bracket) {\n            stack.append(bracket)\n   \
    \     } else {\n            // check if there is any opening bracket\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.removeLast()\n        }\n    }\n    \n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpdn5p1bq7/tmpdn5p1bq7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad998945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad99863cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad99863c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad99863b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn5p1bq7                        0x000055e42662e94b <unavailable> + 6475

    5    libc.so.6                          0x00002ad998b31460 __libc_start_main +
    245

    6    tmpdn5p1bq7                        0x000055e42662e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var queue: [Character] = []\n    \n    for char\
    \ in string {\n        if char == \"[\" {\n            queue.append(char)\n  \
    \      } else if char == \"]\" {\n            if queue.isEmpty {\n           \
    \     return false\n            } else {\n                queue.removeFirst()\n\
    \            }\n        }\n    }\n    \n    return queue.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd88wj1do/tmpd88wj1do.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b5762c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b5459b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b5459988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b54587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd88wj1do                        0x000055d19a3c17cb <unavailable> + 6091

    5    libc.so.6                          0x00002b42b594e460 __libc_start_main +
    245

    6    tmpd88wj1do                        0x000055d19a3c1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let list = string.map { $0 == \"[\" ? 1 : -1 }\n    return\
    \ (0 ..< list.count).map { list.prefix($0).reduce(0, +) }.filter { $0 < 0 }.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpwn2mbyl0/tmpwn2mbyl0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fbd28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fba1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fba1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fba1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn2mbyl0                        0x00005588b2d009db <unavailable> + 6619

    5    libc.so.6                          0x00002ab1fbf14460 __libc_start_main +
    245

    6    tmpwn2mbyl0                        0x00005588b2d00529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var openBrackets: [Character] = []\n    for c in string\
    \ {\n        if c == \"[\" {\n            openBrackets.append(c)\n        } else\
    \ if c == \"]\" {\n            if openBrackets.count == 0 {\n                return\
    \ false\n            }\n            openBrackets.removeLast()\n        }\n   \
    \ }\n    return openBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg0hxkl0o/tmpg0hxkl0o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13c49aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13c46a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13c46a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13c46a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0hxkl0o                        0x000055fb60c927db <unavailable> + 6107

    5    libc.so.6                          0x00002b13c4b9a460 __libc_start_main +
    245

    6    tmpg0hxkl0o                        0x000055fb60c92329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var left = 0\n    var right = 0\n    for c in string\
    \ {\n        if c == \"[\" {\n            left += 1\n        } else if c == \"\
    ]\" {\n            right += 1\n        }\n        if right > left {\n        \
    \    return false\n        }\n    }\n    return left == right\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpvcqf9dnr/tmpvcqf9dnr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b590c471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b590c168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b590c168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b590c1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvcqf9dnr                        0x000055fb4ecfd54b <unavailable> + 5451

    5    libc.so.6                          0x00002b590c65d460 __libc_start_main +
    245

    6    tmpvcqf9dnr                        0x000055fb4ecfd099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var queue = Queue<Character>()\n    for bracket in string\
    \ {\n        if bracket == \"[\" {\n            queue.enqueue(item: bracket)\n\
    \        } else {\n            if queue.isEmpty() {\n                return false\n\
    \            } else {\n                _ = queue.dequeue()\n            }\n  \
    \      }\n    }\n    return queue.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb1vh_pwu.swift:18:17: error: cannot find 'Queue' in scope\n   \
    \ var queue = Queue<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in string\
    \ {\n        if bracket == \"[\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \"]\" {\n            if stack.isEmpty() {\n             \
    \   return false\n            } else {\n                stack.pop()\n        \
    \    }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1jllxxrq.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let chars = Array(string)\n    var count = 0\n    for\
    \ c in chars {\n        if c == \"[\" {\n            count += 1\n        } else\
    \ if c == \"]\" {\n            count -= 1\n        }\n        if count < 0 {\n\
    \            return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmppvde_mq7/tmppvde_mq7.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8f735c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8f42cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8f42c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8f42b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvde_mq7                        0x0000556acf58075b <unavailable> + 5979

    5    libc.so.6                          0x00002b4e8f921460 __libc_start_main +
    245

    6    tmppvde_mq7                        0x0000556acf5802a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // add code here\n    var stack: [Character] = []\n \
    \   for char in string {\n        if char == \"[\" {\n            stack.append(char)\n\
    \        } else if char == \"]\" {\n            if stack.count == 0 {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpwxe6czja/tmpwxe6czja.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9560860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9560557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9560557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95605567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxe6czja                        0x0000561e76c057db <unavailable> + 6107

    5    libc.so.6                          0x00002b9560a4c460 __libc_start_main +
    245

    6    tmpwxe6czja                        0x0000561e76c05329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [String] = []\n    for i in string {\n   \
    \     if i == \"[\" {\n            stack.append(\"[\")\n        } else if i ==\
    \ \"]\" {\n            if stack.count == 0 {\n                return false\n \
    \           } else {\n                stack.removeLast()\n            }\n    \
    \    }\n    }\n    return stack.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpmw99me6j/tmpmw99me6j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc5057cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc50273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc50273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc502727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmw99me6j                        0x00005638d9ca169b <unavailable> + 5787

    5    libc.so.6                          0x00002adc50768460 __libc_start_main +
    245

    6    tmpmw99me6j                        0x00005638d9ca1329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(value: char)\n       \
    \ } else if char == \"]\" {\n            if stack.peek() == \"[\" {\n        \
    \        stack.pop()\n            } else {\n                return false\n   \
    \         }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb2d4zjmq.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for character in\
    \ string {\n        if character == \"[\" {\n            stack.push(character)\n\
    \        } else if character == \"]\" {\n            if let bracket = stack.pop()\
    \ {\n                if bracket != \"[\" {\n                    return false\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyxt7mwr1.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxhmi2_k9/tmpxhmi2_k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eacafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eac7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eac7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eac7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhmi2_k9                        0x000055e3b3f4b2fb <unavailable> + 4859

    5    libc.so.6                          0x00002b5eacce7460 __libc_start_main +
    245

    6    tmpxhmi2_k9                        0x000055e3b3f4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var array_of_characters = Array(string)\n    var\
    \ counter_of_open_brackets = 0\n    var counter_of_closed_brackets = 0\n    \n\
    \    for i in 0..<array_of_characters.count {\n        if array_of_characters[i]\
    \ == \"[\" {\n            counter_of_open_brackets += 1\n        } else if array_of_characters[i]\
    \ == \"]\" {\n            counter_of_closed_brackets += 1\n        }\n    }\n\
    \    \n    if counter_of_open_brackets == counter_of_closed_brackets {\n     \
    \   return false\n    } else {\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpw_qck_1a/tmpw_qck_1a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a42d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a3fd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a3fd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a3fcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_qck_1a                        0x0000560043d176eb <unavailable> + 5867

    5    libc.so.6                          0x00002b51a44c5460 __libc_start_main +
    245

    6    tmpw_qck_1a                        0x0000560043d17379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var stack: [Character] = []\n    \n    for bracket\
    \ in string {\n        if bracket == \"[\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \"]\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                let _ = stack.popLast()\n\
    \            }\n        }\n    }\n    \n    return stack.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpnzksjc4q/tmpnzksjc4q.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77f500ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77f4d01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77f4d01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77f4d007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzksjc4q                        0x0000556e95b7b81b <unavailable> + 6171

    5    libc.so.6                          0x00002b77f51f6460 __libc_start_main +
    245

    6    tmpnzksjc4q                        0x0000556e95b7b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var open = 0\n    var close = 0\n    \n    for\
    \ bracket in string {\n        if bracket == \"[\" {\n            open += 1\n\
    \        } else if bracket == \"]\" {\n            close += 1\n        }\n   \
    \ }\n    \n    return open == close\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp0_byb107/tmp0_byb107.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b081a049c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0819d40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0819d40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0819d3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_byb107                        0x0000563c83cc654b <unavailable> + 5451

    5    libc.so.6                          0x00002b081a235460 __libc_start_main +
    245

    6    tmp0_byb107                        0x0000563c83cc6099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.push(c)\n        } else if c == \"\
    ]\" {\n            if stack.isEmpty {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx_o6cvcy.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in string\
    \ {\n        if bracket == \"[\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \"]\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9r87gs2.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var index = 0\n    var last = 0\n    var stack = [Int]()\n\
    \    for c in string {\n        if c == \"[\" {\n            stack.append(index)\n\
    \        } else {\n            if stack.count == 0 {\n                return false\n\
    \            }\n            last = stack.popLast()!\n        }\n        index\
    \ += 1\n    }\n    return index - last > 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmprpzh26wa/tmprpzh26wa.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ff3409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ff3100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ff3100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ff30ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpzh26wa                        0x000055764eea981b <unavailable> + 6171

    5    libc.so.6                          0x00002b5ff35f5460 __libc_start_main +
    245

    6    tmprpzh26wa                        0x000055764eea9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var stack = Stack<Character>()\n    \n    for character\
    \ in string {\n        switch character {\n        case \"[\":\n            stack.push(character)\n\
    \        case \"]\":\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        default:\n\
    \            print(\"wrong character\")\n        }\n    }\n    \n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppanop4ey.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxhmi2_k9/tmpxhmi2_k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eacafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eac7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eac7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eac7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhmi2_k9                        0x000055e3b3f4b2fb <unavailable> + 4859

    5    libc.so.6                          0x00002b5eacce7460 __libc_start_main +
    245

    6    tmpxhmi2_k9                        0x000055e3b3f4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  var stack = [Character]()\n  for c in string {\n    if\
    \ c == \"[\" {\n      stack.append(c)\n    } else if c == \"]\" {\n      if stack.isEmpty\
    \ {\n        return false\n      }\n      stack.removeLast()\n    }\n  }\n  return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp5hal8d6s/tmp5hal8d6s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b862c178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b862be6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b862be6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b862be6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hal8d6s                        0x000055d23f4497bb <unavailable> + 6075

    5    libc.so.6                          0x00002b862c364460 __libc_start_main +
    245

    6    tmp5hal8d6s                        0x000055d23f449309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ !stack.isEmpty {\n            stack.removeLast()\n        } else {\n       \
    \     return false\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpx5sba0w8/tmpx5sba0w8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f384dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f381d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f381d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f381d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5sba0w8                        0x000055a8d89b57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b3f386ca460 __libc_start_main +
    245

    6    tmpx5sba0w8                        0x000055a8d89b5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  var stack = [Character]()\n  for bracket in string {\n\
    \    if bracket == \"[\" {\n      stack.append(bracket)\n    } else if bracket\
    \ == \"]\" {\n      if stack.last == \"[\" {\n        stack.removeLast()\n   \
    \   } else {\n        return false\n      }\n    }\n  }\n  return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpal8x92mi/tmpal8x92mi.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fe7ea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fe7b9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fe7b9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fe7b9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal8x92mi                        0x000055c8dec2781b <unavailable> + 6171

    5    libc.so.6                          0x00002b2fe8094460 __libc_start_main +
    245

    6    tmpal8x92mi                        0x000055c8dec27369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for char in string {\n        if char\
    \ == \"[\" {\n            count += 1\n        } else if char == \"]\" {\n    \
    \        count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg_djm1wa/tmpg_djm1wa.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba607403c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6070fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6070fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6070f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_djm1wa                        0x00005632227ee54b <unavailable> + 5451

    5    libc.so.6                          0x00002ba6075ef460 __libc_start_main +
    245

    6    tmpg_djm1wa                        0x00005632227ee099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var maxDepth = 0\n    var depth = 0\n    for char in\
    \ string {\n        if char == \"[\" {\n            depth += 1\n            maxDepth\
    \ = max(maxDepth, depth)\n        } else if char == \"]\" {\n            depth\
    \ -= 1\n        }\n    }\n    return maxDepth > 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4h75bzdr/tmp4h75bzdr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a4fc5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a4f954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a4f954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a4f9537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4h75bzdr                        0x0000562b4765c95d <unavailable> + 6493

    5    libc.so.6                          0x00002b6a4fe49460 __libc_start_main +
    245

    6    tmp4h75bzdr                        0x0000562b4765c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var stack = [Character]()\n    \n    for character\
    \ in string {\n        switch character {\n        case \"[\":\n            stack.append(character)\n\
    \        case \"]\":\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                let left = stack.popLast()\n          \
    \      if left != \"[\" {\n                    return false\n                }\n\
    \            }\n        default:\n            continue\n        }\n    }\n   \
    \ \n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmps8q_mjo7/tmps8q_mjo7.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05fbe9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05fbb96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05fbb96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05fbb957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8q_mjo7                        0x000055720e8c57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b05fc08b460 __libc_start_main +
    245

    6    tmps8q_mjo7                        0x000055720e8c5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpucwgj23u/tmpucwgj23u.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3af71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3af416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3af416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3af4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucwgj23u                        0x0000563336c1425b <unavailable> + 4699

    5    libc.so.6                          0x00002ae3af90b460 __libc_start_main +
    245

    6    tmpucwgj23u                        0x0000563336c13ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    var valid_subsequence\
    \ = false\n    var found_subsequence = false\n    for c in string {\n        if\
    \ (c == \"[\") {\n            if (stack.count > 0) {\n                valid_subsequence\
    \ = true\n            }\n            stack.append(c)\n        } else if (c ==\
    \ \"]\") {\n            if (stack.count > 0) {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    if (stack.count == 0 && valid_subsequence) {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpwla5u8wm/tmpwla5u8wm.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a3babc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a38a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a38a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a38a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwla5u8wm                        0x000055e4326bbc7b <unavailable> + 7291

    5    libc.so.6                          0x00002b59a3d97460 __libc_start_main +
    245

    6    tmpwla5u8wm                        0x000055e4326bb2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var leftBracketsCount = 0\n    var rightBracketsCount\
    \ = 0\n    for char in string {\n        if char == \"[\" {\n            leftBracketsCount\
    \ += 1\n        } else if char == \"]\" {\n            rightBracketsCount += 1\n\
    \        }\n    }\n    return leftBracketsCount == rightBracketsCount\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpptejca9w/tmpptejca9w.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b094eb16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094e80db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094e80d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094e80c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptejca9w                        0x00005634c562d54b <unavailable> + 5451

    5    libc.so.6                          0x00002b094ed02460 __libc_start_main +
    245

    6    tmpptejca9w                        0x00005634c562d099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // your code goes here\n    // loop through the string\n\
    \    // filter the brackets if it's not empty\n    let brackets = string.filter\
    \ { $0 == \"[\" || $0 == \"]\" }\n    // check if brackets contains a valid subsequence\
    \ of brackets where at least one bracket in the subsequence is nested.\n    return\
    \ brackets.contains(\"[\") && brackets.contains(\"]\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpeb5f0ygx/tmpeb5f0ygx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c12178c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c11e6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c11e6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c11e6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeb5f0ygx                        0x0000561ae60b45ab <unavailable> + 5547

    5    libc.so.6                          0x00002b2c12364460 __libc_start_main +
    245

    6    tmpeb5f0ygx                        0x0000561ae60b4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // Initialize a dictionary to keep track of the count\
    \ of open and closed brackets\n    var dict = [Character: Int]()\n    // Add the\
    \ brackets to the dictionary\n    for bracket in string {\n        dict[bracket]\
    \ = dict[bracket, default: 0] + 1\n    }\n    // If there are no open brackets,\
    \ then there is no nesting\n    if dict[\"[\"] == nil {\n        return false\n\
    \    }\n    // If there are more closed brackets than open brackets, then there\
    \ is no nesting\n    if dict[\"[\"]! < dict[\"]\"]! {\n        return false\n\
    \    }\n    // If there are equal numbers of open and closed brackets, then there\
    \ is no nesting\n    if dict[\"[\"]! == dict[\"]\"]! {\n        return false\n\
    \    }\n    // Otherwise, there is nesting\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpw7ufhnpg/tmpw7ufhnpg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfa3478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfa316fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfa316f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfa316e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7ufhnpg                        0x0000558fcf44a60b <unavailable> + 5643

    5    libc.so.6                          0x00002abfa3664460 __libc_start_main +
    245

    6    tmpw7ufhnpg                        0x0000558fcf44a299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var brackets = [Character]()\n    for i in string {\n\
    \        if i == \"[\" {\n            brackets.append(i)\n        } else if i\
    \ == \"]\" {\n            if brackets.isEmpty {\n                return false\n\
    \            } else {\n                brackets.removeLast()\n            }\n\
    \        }\n    }\n    return brackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpivop3acn/tmpivop3acn.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae13bce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae13b9d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae13b9d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae13b9d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivop3acn                        0x00005641a9f107bb <unavailable> + 6075

    5    libc.so.6                          0x00002ae13becd460 __libc_start_main +
    245

    6    tmpivop3acn                        0x00005641a9f10309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var temp = \"\"\n    for ch in string {\n        if ch\
    \ == \"[\" {\n            temp.append(ch)\n        } else if temp != \"\" {\n\
    \            temp.removeLast()\n        }\n    }\n    return temp == \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2o8dl7fl/tmp2o8dl7fl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f82dcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f82ac2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f82ac2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f82ac17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o8dl7fl                        0x000056449bde670b <unavailable> + 5899

    5    libc.so.6                          0x00002b2f82fb7460 __libc_start_main +
    245

    6    tmp2o8dl7fl                        0x000056449bde6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var openBrackets = 0\n    var nestedBrackets = 0\n  \
    \  for c in string {\n        if c == \"[\" {\n            openBrackets += 1\n\
    \        } else if c == \"]\" {\n            if openBrackets > 0 {\n         \
    \       openBrackets -= 1\n                nestedBrackets += 1\n            }\n\
    \        }\n    }\n    return nestedBrackets > 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpyi51bi8l/tmpyi51bi8l.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5570652c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5570349b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5570349988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55703487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi51bi8l                        0x000055e0914a54ab <unavailable> + 5291

    5    libc.so.6                          0x00002b557083e460 __libc_start_main +
    245

    6    tmpyi51bi8l                        0x000055e0914a5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // First, we need to remove all the non-bracket characters\n\
    \    let clean_string = string.filter { $0 == \"[\" || $0 == \"]\" }\n    // Then,\
    \ we need to make sure we can parse the string\n    if let parsed_string = try?\
    \ Parse.any_brackets(clean_string) {\n        // This function will parse the\
    \ string for us\n        return is_nested(string: parsed_string)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphx9t714i.swift:21:33: error: cannot find 'Parse' in scope\n   \
    \ if let parsed_string = try? Parse.any_brackets(clean_string) {\n           \
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let array = Array(string)\n    var map = [Character:\
    \ Int]()\n    for char in array {\n        if char == \"[\" {\n            map[\"\
    [\"] = (map[\"[\"] ?? 0) + 1\n        } else {\n            if let value = map[\"\
    [\"] {\n                if value == 0 {\n                    return false\n  \
    \              } else {\n                    map[\"[\"] = value - 1\n        \
    \        }\n            } else {\n                return false\n            }\n\
    \        }\n    }\n    return map[\"[\"] == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpicwrlk_h/tmpicwrlk_h.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b98128c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b97e1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b97e1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b97e1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicwrlk_h                        0x00005572c9daf88b <unavailable> + 6283

    5    libc.so.6                          0x00002b8b98314460 __libc_start_main +
    245

    6    tmpicwrlk_h                        0x00005572c9daf3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.count == 0 {\n        return false\n    }\n\
    \    if string.count % 2 != 0 {\n        return false\n    }\n    var opened =\
    \ 0\n    var closed = 0\n    var arr = Array(string)\n    var lastSeen = \"\"\n\
    \    for bracket in arr {\n        if bracket == \"[\" {\n            opened +=\
    \ 1\n            lastSeen = \"[\"\n        } else {\n            closed += 1\n\
    \            lastSeen = \"]\"\n        }\n        if closed > opened {\n     \
    \       return false\n        }\n    }\n    if opened != closed {\n        return\
    \ false\n    }\n    if lastSeen == \"[\" {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp9dm6rkhq/tmp9dm6rkhq.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14dcb7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14dc871b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14dc871988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14dc8707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dm6rkhq                        0x0000560e63f8489b <unavailable> + 6299

    5    libc.so.6                          0x00002b14dcd66460 __libc_start_main +
    245

    6    tmp9dm6rkhq                        0x0000560e63f843e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.isEmpty {\n        return false\n    }\n  \
    \  var stack = [Character]()\n    for c in string {\n        if c == \"[\" {\n\
    \            stack.append(c)\n        } else if c == \"]\" {\n            if let\
    \ last = stack.last {\n                if last == \"[\" {\n                  \
    \  stack.removeLast()\n                } else {\n                    return false\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmprhmjrw9q/tmprhmjrw9q.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46070b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4606dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4606dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4606dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhmjrw9q                        0x0000556ab78cf86b <unavailable> + 6251

    5    libc.so.6                          0x00002b46072a1460 __libc_start_main +
    245

    6    tmprhmjrw9q                        0x0000556ab78cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.push(c)\n        } else if c == \"\
    ]\" {\n            if let last = stack.last {\n                if last == \"[\"\
    \ {\n                    stack.pop()\n                } else {\n             \
    \       stack.push(c)\n                }\n            } else {\n             \
    \   stack.push(c)\n            }\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphanh2oi7.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  let stack = Stack<Character>()\n  for char in string {\n\
    \    switch char {\n    case \"[\":\n      stack.push(value: char)\n    case \"\
    ]\":\n      if stack.isEmpty() {\n        return false\n      }\n      if stack.pop()\
    \ == \"[\" {\n        return true\n      }\n    default:\n      return false\n\
    \    }\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc4bq2ovs.swift:18:15: error: cannot find 'Stack' in scope\n  let\
    \ stack = Stack<Character>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var queue: [String] = []\n    for char in string {\n\
    \        if let first = queue.first, first == \"\", let last = queue.last, last\
    \ == \"\" {\n            queue.append(String(char))\n        } else if let first\
    \ = queue.first, first == \"[\", let last = queue.last, last == \"]\" {\n    \
    \        queue.append(String(char))\n        } else if let first = queue.first,\
    \ first == \"[\", let last = queue.last, last == \"[\" {\n            queue.append(String(char))\n\
    \        } else if let first = queue.first, first == \"]\", let last = queue.last,\
    \ last == \"]\" {\n            queue.append(String(char))\n        } else if let\
    \ first = queue.first, first == \"]\", let last = queue.last, last == \"[\" {\n\
    \            queue.append(String(char))\n        } else {\n            queue.append(String(char))\n\
    \        }\n    }\n    if let first = queue.first, first == \"[\", let last =\
    \ queue.last, last == \"]\" {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmprd0sgqul/tmprd0sgqul.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab25273bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab252432b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab252432988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2524317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprd0sgqul                        0x000055b58dec46eb <unavailable> + 5867

    5    libc.so.6                          0x00002ab252927460 __libc_start_main +
    245

    6    tmprd0sgqul                        0x000055b58dec42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let allowedChars = Set<Character>(\"[]\")\n    let filtered\
    \ = string.filter { allowedChars.contains($0) }\n    let filteredCount = filtered.count\n\
    \    if filteredCount == 0 {\n        return false\n    }\n    if filteredCount\
    \ % 2 != 0 {\n        return false\n    }\n    var characterStack = [Character]()\n\
    \    for char in filtered {\n        if char == \"[\" {\n            characterStack.append(char)\n\
    \        } else {\n            if characterStack.count == 0 {\n              \
    \  return false\n            }\n            characterStack.removeLast()\n    \
    \    }\n    }\n    return characterStack.count == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4_brw8xr/tmp4_brw8xr.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d9bfc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d9bcbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d9bcbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d9bcbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_brw8xr                        0x000055a0cae1babb <unavailable> + 6843

    5    libc.so.6                          0x00002b0d9c1b2460 __libc_start_main +
    245

    6    tmp4_brw8xr                        0x000055a0cae1b609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let stack = Stack<Character>()\n    var is_subsequence\
    \ = false\n    for c in string {\n        if c == \"[\" {\n            stack.push(elem:\
    \ c)\n        } else if c == \"]\" {\n            if stack.is_empty() {\n    \
    \            is_subsequence = true\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.is_empty() && is_subsequence\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0eaoe3w1.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.push(c)\n        } else if c == \"\
    ]\" {\n            if stack.isEmpty {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx_o6cvcy.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let chars = Array(string)\n    var stack = [Character]()\n\
    \    for c in chars {\n        if c == \"[\" {\n            stack.append(c)\n\
    \        } else if c == \"]\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg7qu8rq5/tmpg7qu8rq5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1be6442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1be6139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1be6139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1be61387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7qu8rq5                        0x000056020e1b394b <unavailable> + 6475

    5    libc.so.6                          0x00002b1be662e460 __libc_start_main +
    245

    6    tmpg7qu8rq5                        0x000056020e1b3499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // TODO: Complete this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp95jifiql/tmp95jifiql.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba771e3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba771b31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba771b31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba771b307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95jifiql                        0x000055ff12e8225b <unavailable> + 4699

    5    libc.so.6                          0x00002ba772026460 __libc_start_main +
    245

    6    tmp95jifiql                        0x000055ff12e81ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var stack = Stack<Character>()\n    \n    for character\
    \ in string {\n        if character == \"[\" {\n            stack.push(element:\
    \ character)\n        } else if character == \"]\" {\n            if stack.isEmpty()\
    \ {\n                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    \n    return stack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6040ancw.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var left = 0\n    var right = 0\n    var found = false\n\
    \    for char in string {\n        if left < right {\n            return false\n\
    \        }\n        if char == \"[\" {\n            left += 1\n        } else\
    \ if char == \"]\" {\n            right += 1\n        }\n        if left > 0 &&\
    \ right > 0 {\n            found = true\n        }\n    }\n    return left ==\
    \ right && found\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp0ngun5q8/tmp0ngun5q8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba089973c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba08966ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba08966a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0896697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ngun5q8                        0x000055a4f5ee954b <unavailable> + 5451

    5    libc.so.6                          0x00002ba089b5f460 __libc_start_main +
    245

    6    tmp0ngun5q8                        0x000055a4f5ee9099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(item: char)\n        }\
    \ else if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdwg5ea52.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var characterArray = [Character]()\n    for character\
    \ in string {\n        characterArray.append(character)\n    }\n    var result\
    \ = false\n    while !characterArray.isEmpty {\n        let character = characterArray.removeFirst()\n\
    \        if character == \"[\" {\n            if characterArray.first == \"[\"\
    \ {\n                let _ = characterArray.removeFirst()\n                result\
    \ = true\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpiefkwehf/tmpiefkwehf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44be6f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44be3efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44be3ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44be3ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiefkwehf                        0x000055de8926e73b <unavailable> + 5947

    5    libc.so.6                          0x00002b44be8e4460 __libc_start_main +
    245

    6    tmpiefkwehf                        0x000055de8926e329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var string_: String = string\n    var found_open_bracket:\
    \ Bool = false\n    var found_closed_bracket: Bool = false\n    \n    // Remove\
    \ all spaces from string\n    let string_no_space = string_.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    \n    // Count the brackets in the string\n    if let\
    \ count_open_bracket = string_no_space.components(separatedBy: \"[\").count as?\
    \ Int,\n        let count_closed_bracket = string_no_space.components(separatedBy:\
    \ \"]\").count as? Int {\n        if count_open_bracket != count_closed_bracket\
    \ {\n            return false\n        }\n    }\n    \n    // Loop through the\
    \ string checking for brackets\n    for char in string_no_space {\n        if\
    \ char == \"[\" {\n            found_open_bracket = true\n        }\n        if\
    \ char == \"]\" {\n            found_closed_bracket = true\n        }\n    }\n\
    \    \n    // Return result\n    if found_open_bracket && found_closed_bracket\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgtsgxdbt.swift:24:35: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let string_no_space = string_.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                          ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let brackets = string.characters.map { $0 }\n    var\
    \ count = 0\n    var max = 0\n    for i in 0..<brackets.count {\n        if brackets[i]\
    \ == \"[\" {\n            count += 1\n        } else {\n            count -= 1\n\
    \        }\n        if count > max {\n            max = count\n        }\n   \
    \ }\n    return count == 0 && max >= 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd84uy0ji.swift:18:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let brackets = string.characters.map { $0 }\n     \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var string = string\n    var stack = Stack<Character>()\n\
    \    var previous: Character = \".\"\n    var current: Character\n    for c in\
    \ string {\n        current = c\n        if c == \"[\" {\n            stack.push(c)\n\
    \        } else if c == \"]\" {\n            if !stack.isEmpty {\n           \
    \     stack.pop()\n            } else {\n                return false\n      \
    \      }\n        }\n        previous = current\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp814k7kaa.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for c in string {\n  \
    \      if c == \"[\" {\n            stack.append(c)\n        } else if !stack.isEmpty\
    \ {\n            stack.removeLast()\n        } else {\n            return false\n\
    \        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2fiji18g/tmp2fiji18g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d6b752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d6b449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d6b449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d6b4487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fiji18g                        0x0000560a605387bb <unavailable> + 6075

    5    libc.so.6                          0x00002b7d6b93e460 __libc_start_main +
    245

    6    tmp2fiji18g                        0x0000560a60538309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.characters.count % 2 != 0 {\n        return\
    \ false\n    }\n    var characters = string.characters\n    var nest = true\n\
    \    while nest {\n        var firstIndex = characters.startIndex\n        var\
    \ lastIndex = characters.endIndex.advancedBy(-1)\n        while firstIndex !=\
    \ lastIndex {\n            let firstChar = characters[firstIndex]\n          \
    \  let lastChar = characters[lastIndex]\n            if firstChar == \"[\" &&\
    \ lastChar == \"]\" {\n                characters.removeAtIndex(firstIndex)\n\
    \                characters.removeAtIndex(lastIndex.predecessor())\n         \
    \       break\n            }\n            firstIndex = firstIndex.successor()\n\
    \            lastIndex = lastIndex.predecessor()\n        }\n        if firstIndex\
    \ == lastIndex {\n            return false\n        }\n        if characters.count\
    \ == 0 {\n            nest = false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpacbvcfux.swift:18:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count % 2 != 0 {\n           \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpacbvcfux.swift:21:29:\
    \ error: 'characters' is unavailable: Please use String directly\n    var characters\
    \ = string.characters\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpacbvcfux.swift:25:45: error: value of\
    \ type 'String.Index' has no member 'advancedBy'\n        var lastIndex = characters.endIndex.advancedBy(-1)\n\
    \                        ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpacbvcfux.swift:30:28:\
    \ error: value of type 'String' has no member 'removeAtIndex'\n              \
    \  characters.removeAtIndex(firstIndex)\n                ~~~~~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpacbvcfux.swift:31:28: error: value of type 'String' has no member 'removeAtIndex'\n\
    \                characters.removeAtIndex(lastIndex.predecessor())\n         \
    \       ~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpacbvcfux.swift:34:37: error: value of\
    \ type 'String.Index' has no member 'successor'\n            firstIndex = firstIndex.successor()\n\
    \                         ~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for char in string {\n        switch\
    \ char {\n        case \"[\":\n            count += 1\n        case \"]\":\n \
    \           count -= 1\n        default:\n            break\n        }\n     \
    \   if count < 0 {\n            return false\n        }\n    }\n    return count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpgnxhep8u/tmpgnxhep8u.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ea710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ea407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ea407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ea4067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnxhep8u                        0x000055a71f63f54b <unavailable> + 5451

    5    libc.so.6                          0x00002b54ea8fc460 __libc_start_main +
    245

    6    tmpgnxhep8u                        0x000055a71f63f099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if let last = stack.last {\n                if\
    \ last == \"[\" {\n                    stack.removeLast()\n                } else\
    \ {\n                    return false\n                }\n            } else {\n\
    \                return false\n            }\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg3cozvlk/tmpg3cozvlk.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1af7f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1af4eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1af4ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1af4e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3cozvlk                        0x000055a8b708781b <unavailable> + 6171

    5    libc.so.6                          0x00002ac1af9df460 __libc_start_main +
    245

    6    tmpg3cozvlk                        0x000055a8b7087369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpucwgj23u/tmpucwgj23u.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3af71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3af416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3af416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3af4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucwgj23u                        0x0000563336c1425b <unavailable> + 4699

    5    libc.so.6                          0x00002ae3af90b460 __libc_start_main +
    245

    6    tmpucwgj23u                        0x0000563336c13ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let bracketSet = Set(\"[]\")\n    var stringSet = Set(string)\n\
    \    if stringSet.isSubset(of: bracketSet) {\n        for _ in 1...string.count\
    \ {\n            stringSet.remove(\"[]\")\n            stringSet.remove(\"[]\"\
    )\n            if stringSet.isEmpty {\n                return true\n         \
    \   }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu2uxigum.swift:22:30: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            stringSet.remove(\"\
    []\")\n                             ^\n/tmp/tmpu2uxigum.swift:23:30: error: cannot\
    \ convert value of type 'String' to expected argument type 'String.Element' (aka\
    \ 'Character')\n            stringSet.remove(\"[]\")\n                       \
    \      ^\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let str = Array(string)\n    var leftCount = 0\n    var\
    \ rightCount = 0\n    var isNested = false\n    for char in str {\n        if\
    \ leftCount == rightCount {\n            isNested = false\n        }\n       \
    \ if char == \"[\" {\n            leftCount += 1\n        } else if char == \"\
    ]\" {\n            rightCount += 1\n        }\n        if leftCount < rightCount\
    \ {\n            return false\n        }\n        if leftCount > rightCount {\n\
    \            isNested = true\n        }\n    }\n    return isNested\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpo1ys9n50/tmpo1ys9n50.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b766510dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7664e04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7664e04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7664e037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo1ys9n50                        0x000055c2b8bb075b <unavailable> + 5979

    5    libc.so.6                          0x00002b76652f9460 __libc_start_main +
    245

    6    tmpo1ys9n50                        0x000055c2b8bb02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let brackets = string.map { String($0) }\n    var stack\
    \ = [String]()\n    for bracket in brackets {\n        if bracket == \"[\" {\n\
    \            stack.append(bracket)\n        } else {\n            if stack.count\
    \ == 0 {\n                return false\n            } else {\n               \
    \ stack.removeLast()\n            }\n        }\n    }\n    return stack.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpj9bddzg8/tmpj9bddzg8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b984db46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b984d83db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b984d83d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b984d83c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj9bddzg8                        0x00005596bd2868cb <unavailable> + 6347

    5    libc.so.6                          0x00002b984dd32460 __libc_start_main +
    245

    6    tmpj9bddzg8                        0x00005596bd286419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let count_left_bracket = string.reduce(0) {\n       \
    \ let (acc, curr) = ($0, $1)\n        return curr == \"[\" ? acc + 1 : acc\n \
    \   }\n    let count_right_bracket = string.reduce(0) {\n        let (acc, curr)\
    \ = ($0, $1)\n        return curr == \"]\" ? acc + 1 : acc\n    }\n    return\
    \ count_left_bracket == count_right_bracket\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg3nrllea/tmpg3nrllea.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa46494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa46494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa464937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3nrllea                        0x000055cda2a3e57b <unavailable> + 5499

    5    libc.so.6                          0x00002baa46989460 __libc_start_main +
    245

    6    tmpg3nrllea                        0x000055cda2a3e0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let brackets = string.split(separator: \"[\")\n    var\
    \ stack = Stack<String>()\n    for i in brackets.indices {\n        let bracket\
    \ = brackets[i]\n        if bracket == \"\" {\n            continue\n        }\n\
    \        if bracket.last == \"]\" {\n            stack.pop()\n        } else {\n\
    \            stack.push(element: bracket)\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp43cy5fa7.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxhmi2_k9/tmpxhmi2_k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eacafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eac7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eac7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eac7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhmi2_k9                        0x000055e3b3f4b2fb <unavailable> + 4859

    5    libc.so.6                          0x00002b5eacce7460 __libc_start_main +
    245

    6    tmpxhmi2_k9                        0x000055e3b3f4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  var stack = Stack<Character>()\n  for char in string {\n\
    \    if char == \"[\" {\n      stack.push(char)\n    } else if char == \"]\" {\n\
    \      if stack.isEmpty {\n        return false\n      } else {\n        stack.pop()\n\
    \      }\n    }\n  }\n  return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6gth8vy9.swift:18:15: error: cannot find 'Stack' in scope\n  var\
    \ stack = Stack<Character>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    let str = Array(string)\n\
    \    for char in str {\n        if char == \"[\" {\n            stack.append(char)\n\
    \        } else if char == \"]\" {\n            guard let lastChar = stack.popLast()\
    \ else {\n                return false\n            }\n            if lastChar\
    \ != \"[\" {\n                return false\n            }\n        }\n    }\n\
    \    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpkvgno11t/tmpkvgno11t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17310c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1730dc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1730dc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1730dbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvgno11t                        0x0000559c81ebd94b <unavailable> + 6475

    5    libc.so.6                          0x00002b17312b5460 __libc_start_main +
    245

    6    tmpkvgno11t                        0x0000559c81ebd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if let topChar = stack.last {\n               \
    \ if topChar == \"[\" {\n                    stack.removeLast()\n            \
    \    } else {\n                    stack.append(char)\n                }\n   \
    \         } else {\n                stack.append(char)\n            }\n      \
    \  }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpwqv8v0fz/tmpwqv8v0fz.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8c873dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8c8434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8c8434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8c84337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqv8v0fz                        0x0000558ba3a9c86b <unavailable> + 6251

    5    libc.so.6                          0x00002ae8c8929460 __libc_start_main +
    245

    6    tmpwqv8v0fz                        0x0000558ba3a9c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var leftBrackets = 0\n    var isNested = false\n    for\
    \ character in string {\n        switch character {\n        case \"[\":\n   \
    \         leftBrackets += 1\n        case \"]\":\n            if leftBrackets\
    \ == 0 {\n                return false\n            }\n            if leftBrackets\
    \ == 1 {\n                isNested = true\n            }\n            leftBrackets\
    \ -= 1\n        default:\n            continue\n        }\n    }\n    return isNested\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpep8r3pm_/tmpep8r3pm_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c2b40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c2b104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c2b104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c2b1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpep8r3pm_                        0x000055ecc5ffe54b <unavailable> + 5451

    5    libc.so.6                          0x00002b5c2b5f9460 __libc_start_main +
    245

    6    tmpep8r3pm_                        0x000055ecc5ffe099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var bracketsStack = [Character]()\n    var firstBracketIndex\
    \ = 0\n    var lastBracketIndex = 0\n    for i in 0 ..< string.count {\n     \
    \   if string[i] == \"[\" {\n            bracketsStack.append(string[i])\n   \
    \         if firstBracketIndex == 0 {\n                firstBracketIndex = i\n\
    \            }\n        } else if string[i] == \"]\" {\n            if bracketsStack.count\
    \ > 0 {\n                bracketsStack.removeLast()\n            } else {\n  \
    \              firstBracketIndex = 0\n            }\n            lastBracketIndex\
    \ = i\n        }\n    }\n    return firstBracketIndex < lastBracketIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprqgs52et.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if string[i]\
    \ == \"[\" {\n           ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmprqgs52et.swift:23:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            bracketsStack.append(string[i])\n                               \
    \  ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmprqgs52et.swift:27:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        }\
    \ else if string[i] == \"]\" {\n                  ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let chars = Array(string)\n    var level = 0\n    for\
    \ char in chars {\n        if char == \"[\" {\n            level += 1\n      \
    \  } else if char == \"]\" {\n            level -= 1\n        }\n        if level\
    \ < 0 {\n            return false\n        }\n    }\n    return level == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpbv51sovl/tmpbv51sovl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58a33ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58a30f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58a30f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58a30f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbv51sovl                        0x000055b47634575b <unavailable> + 5979

    5    libc.so.6                          0x00002b58a35eb460 __libc_start_main +
    245

    6    tmpbv51sovl                        0x000055b4763452a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.append(c)\n        } else if c ==\
    \ \"]\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmps4pe2rb8/tmps4pe2rb8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42e451ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42e4215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42e4215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42e42147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4pe2rb8                        0x000055aa2017d81b <unavailable> + 6171

    5    libc.so.6                          0x00002b42e470a460 __libc_start_main +
    245

    6    tmps4pe2rb8                        0x000055aa2017d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    var isNested = false\n\
    \    for c in string {\n        if c == \"[\" {\n            stack.push(c)\n \
    \       } else if c == \"]\" {\n            if stack.empty() {\n             \
    \   return false\n            } else {\n                if stack.pop() == \"[\"\
    \ {\n                    isNested = true\n                }\n            }\n \
    \       }\n    }\n    return isNested\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_8k5ut2w.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // Implement your function here\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpff3vv81y/tmpff3vv81y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa24e26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa24b1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa24b1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa24b1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpff3vv81y                        0x00005596cae0c25b <unavailable> + 4699

    5    libc.so.6                          0x00002baa25012460 __libc_start_main +
    245

    6    tmpff3vv81y                        0x00005596cae0bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for character in string\
    \ {\n        if character == \"[\" {\n            stack.append(character)\n  \
    \      } else if character == \"]\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpewqvxnqd/tmpewqvxnqd.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae420f7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae420c72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae420c72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae420c717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewqvxnqd                        0x000055ad0ddf17bb <unavailable> + 6075

    5    libc.so.6                          0x00002ae421167460 __libc_start_main +
    245

    6    tmpewqvxnqd                        0x000055ad0ddf1309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var closureCount = 0\n    for char in string {\n    \
    \    if char == \"[\" {\n            closureCount += 1\n        } else if char\
    \ == \"]\" {\n            closureCount -= 1\n        }\n        if closureCount\
    \ < 0 {\n            return false\n        }\n    }\n    return closureCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\") ==\
    \ true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpnril9npr/tmpnril9npr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21c2c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21c2993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21c2993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21c29927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnril9npr                        0x000056427286c54b <unavailable> + 5451

    5    libc.so.6                          0x00002b21c2e88460 __libc_start_main +
    245

    6    tmpnril9npr                        0x000056427286c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp38im6a6_/tmp38im6a6_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac521faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac521ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac521ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac521ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38im6a6_                        0x000055824847481b <unavailable> + 6171

    5    libc.so.6                          0x00002ac522196460 __libc_start_main +
    245

    6    tmp38im6a6_                        0x0000558248474369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let stack = Stack<Character>()\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.push(c)\n        } else if c == \"\
    ]\" {\n            if let _ = stack.pop() {\n                // Do nothing\n \
    \           } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ybdbgf0.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var leftBrackets: Int = 0\n    var rightBrackets: Int\
    \ = 0\n    var hasNestedBrackets: Bool = false\n    for bracket in string {\n\
    \        if bracket == \"[\" {\n            leftBrackets += 1\n        } else\
    \ if bracket == \"]\" {\n            rightBrackets += 1\n        }\n        if\
    \ leftBrackets == rightBrackets + 1 {\n            hasNestedBrackets = true\n\
    \        }\n    }\n    return leftBrackets == rightBrackets && hasNestedBrackets\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmposz819ye/tmposz819ye.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40522f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4051ff0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4051ff0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4051fef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposz819ye                        0x0000558f35a5354b <unavailable> + 5451

    5    libc.so.6                          0x00002b40524e5460 __libc_start_main +
    245

    6    tmposz819ye                        0x0000558f35a53099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var bracketStack = [String]()\n    \n    for character\
    \ in string {\n        switch character {\n        case \"[\":\n            bracketStack.append(\"\
    [\")\n        case \"]\":\n            if bracketStack.last == \"[\" {\n     \
    \           bracketStack.removeLast()\n            } else {\n                bracketStack.append(\"\
    ]\")\n            }\n        default:\n            break\n        }\n    }\n \
    \   \n    if bracketStack.isEmpty {\n        return true\n    } else {\n     \
    \   return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmps7vz8a23/tmps7vz8a23.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd7c5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd7955b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd7955988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd79547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7vz8a23                        0x0000562d911a087b <unavailable> + 6267

    5    libc.so.6                          0x00002aebd7e4a460 __libc_start_main +
    245

    6    tmps7vz8a23                        0x0000562d911a03c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let toArr = Array(string)\n    var stack = Stack<Character>()\n\
    \    for char in toArr {\n        if char == \"[\" {\n            stack.push(char)\n\
    \        } else if char == \"]\" {\n            if stack.isEmpty() {\n       \
    \         return false\n            } else {\n                stack.pop()\n  \
    \          }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpregir2wg.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var openBracketsCount = 0\n    var closedBracketsCount\
    \ = 0\n    var cannotBeNested = false\n    for s in string {\n        if s ==\
    \ \"[\" {\n            openBracketsCount += 1\n        } else if s == \"]\" {\n\
    \            closedBracketsCount += 1\n        }\n        if closedBracketsCount\
    \ > openBracketsCount {\n            cannotBeNested = true\n        }\n    }\n\
    \    if openBracketsCount == closedBracketsCount && !cannotBeNested {\n      \
    \  return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp36cj8c5t/tmp36cj8c5t.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac384fb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac384cadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac384cad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac384cac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36cj8c5t                        0x000055dc6a3a754b <unavailable> + 5451

    5    libc.so.6                          0x00002ac3851a2460 __libc_start_main +
    245

    6    tmp36cj8c5t                        0x000055dc6a3a7099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  var stack = Stack<Character>()\n  for c in string {\n \
    \   if stack.isEmpty() || c == \"[\" {\n      stack.push(element: c)\n    } else\
    \ {\n      if let top = stack.pop() {\n        if top != \"[\" {\n          return\
    \ false\n        }\n      }\n    }\n  }\n  return stack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphx4dggsm.swift:18:15: error: cannot find 'Stack' in scope\n  var\
    \ stack = Stack<Character>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.isEmpty {\n        return false\n    }\n  \
    \  if string.count % 2 != 0 {\n        return false\n    }\n    var stack = Stack<Character>()\n\
    \    for character in string {\n        if stack.isEmpty {\n            stack.push(element:\
    \ character)\n        } else {\n            if stack.peek() == character {\n \
    \               stack.push(element: character)\n            } else {\n       \
    \         stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprf383dwx.swift:24:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var openSquareBrackets = 0\n    var openSquareBracketsRequireClosing\
    \ = 0\n    for c in string {\n        if c == \"[\" {\n            openSquareBrackets\
    \ += 1\n            openSquareBracketsRequireClosing += 1\n        } else if c\
    \ == \"]\" {\n            if openSquareBracketsRequireClosing > 0 {\n        \
    \        openSquareBracketsRequireClosing -= 1\n            } else {\n       \
    \         return false\n            }\n        }\n    }\n    return openSquareBracketsRequireClosing\
    \ > 0 ? false : true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmptnonz26e/tmptnonz26e.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0460c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae045db9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae045db9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae045db87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnonz26e                        0x000055cfaa3f954b <unavailable> + 5451

    5    libc.so.6                          0x00002ae0462ae460 __libc_start_main +
    245

    6    tmptnonz26e                        0x000055cfaa3f9099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var openingCount = 0\n    var closingCount = 0\n    for\
    \ char in string {\n        if char == \"[\" {\n            openingCount += 1\n\
    \        } else if char == \"]\" {\n            closingCount += 1\n        }\n\
    \    }\n    return closingCount < openingCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpj8a931yb/tmpj8a931yb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b545eeffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b545ebf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b545ebf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b545ebf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8a931yb                        0x0000555984caa40b <unavailable> + 5131

    5    libc.so.6                          0x00002b545f0eb460 __libc_start_main +
    245

    6    tmpj8a931yb                        0x0000555984caa099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for character in string {\n      \
    \  if character == \"[\" {\n            count += 1\n        } else if character\
    \ == \"]\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp99w2yw5o/tmp99w2yw5o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada1b602c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada1b2f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada1b2f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada1b2f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99w2yw5o                        0x000055e0ff21454b <unavailable> + 5451

    5    libc.so.6                          0x00002ada1b7ee460 __libc_start_main +
    245

    6    tmp99w2yw5o                        0x000055e0ff214099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // YOUR CODE HERE\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2r747bo9/tmp2r747bo9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeddde7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedddb74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedddb74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedddb737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r747bo9                        0x000055dbfbdd425b <unavailable> + 4699

    5    libc.so.6                          0x00002aedde069460 __libc_start_main +
    245

    6    tmp2r747bo9                        0x000055dbfbdd3ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var bracketStack = Stack<Character>()\n    var seenCorrectBracket\
    \ = false\n    for bracket in string {\n        if bracket == \"[\" {\n      \
    \      bracketStack.push(bracket)\n        } else if bracket == \"]\" {\n    \
    \        if bracketStack.count == 0 {\n                return false\n        \
    \    } else {\n                if bracketStack.pop() == \"[\" {\n            \
    \        seenCorrectBracket = true\n                }\n            }\n       \
    \ }\n    }\n    return bracketStack.count == 0 && seenCorrectBracket\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9q_yv7qj.swift:18:24: error: cannot find 'Stack' in scope\n   \
    \ var bracketStack = Stack<Character>()\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp38im6a6_/tmp38im6a6_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac521faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac521ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac521ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac521ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38im6a6_                        0x000055824847481b <unavailable> + 6171

    5    libc.so.6                          0x00002ac522196460 __libc_start_main +
    245

    6    tmp38im6a6_                        0x0000558248474369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    var charArray = Array(string)\n\
    \    for char in charArray {\n        if char == \"[\" {\n            stack.append(char)\n\
    \        } else if char == \"]\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpw4q22c98/tmpw4q22c98.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a45317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a4500eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a4500e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a4500d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4q22c98                        0x000056094dac094b <unavailable> + 6475

    5    libc.so.6                          0x00002b1a45503460 __libc_start_main +
    245

    6    tmpw4q22c98                        0x000056094dac0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    let string = Array(string)\n\
    \    var matching = true\n    for c in string {\n        if stack.isEmpty && c\
    \ == \"]\" {\n            matching = false\n            break\n        }\n   \
    \     if c == \"[\" {\n            stack.append(c)\n        } else if c == \"\
    ]\" {\n            if stack.isEmpty {\n                matching = false\n    \
    \            break\n            }\n            stack.removeLast()\n        }\n\
    \    }\n    if !stack.isEmpty {\n        matching = false\n    }\n    return matching\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpv41_d9ox/tmpv41_d9ox.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9de56f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9de53e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9de53e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9de53e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv41_d9ox                        0x0000561d4c5e196b <unavailable> + 6507

    5    libc.so.6                          0x00002b9de58de460 __libc_start_main +
    245

    6    tmpv41_d9ox                        0x0000561d4c5e14b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.append(c)\n        } else if c ==\
    \ \"]\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmps4pe2rb8/tmps4pe2rb8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42e451ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42e4215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42e4215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42e42147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4pe2rb8                        0x000055aa2017d81b <unavailable> + 6171

    5    libc.so.6                          0x00002b42e470a460 __libc_start_main +
    245

    6    tmps4pe2rb8                        0x000055aa2017d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var isNested = false\n    var stack = Stack<Character>()\n\
    \    for char in string {\n        if stack.count > 0 {\n            if char ==\
    \ \"]\" {\n                if stack.peek() == \"[\" {\n                    stack.pop()\n\
    \                    isNested = true\n                } else {\n             \
    \       stack.push(char)\n                }\n            } else {\n          \
    \      stack.push(char)\n            }\n        } else {\n            stack.push(char)\n\
    \        }\n    }\n    return isNested\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1w1hmjec.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    var invalid = false\n\
    \    for c in string {\n        if c == \"[\" {\n            stack.push(element:\
    \ c)\n        } else if c == \"]\" {\n            if stack.isEmpty() {\n     \
    \           invalid = true\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return !invalid && stack.isEmpty()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpczjtuuo_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for char in string {\n        if char\
    \ == \"[\" {\n            count += 1\n        } else if char == \"]\" {\n    \
    \        count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg_djm1wa/tmpg_djm1wa.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba607403c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6070fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6070fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6070f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_djm1wa                        0x00005632227ee54b <unavailable> + 5451

    5    libc.so.6                          0x00002ba6075ef460 __libc_start_main +
    245

    6    tmpg_djm1wa                        0x00005632227ee099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let stringArray = Array(string)\n    var stack = [Character]()\n\
    \    for i in 0..<stringArray.count {\n        let char = stringArray[i]\n   \
    \     if char == \"[\" {\n            stack.append(char)\n        } else if char\
    \ == \"]\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpfu83fxvr/tmpfu83fxvr.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2315cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2312c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2312c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2312c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfu83fxvr                        0x0000555b6f22d9bb <unavailable> + 6587

    5    libc.so.6                          0x00002ad2317ba460 __libc_start_main +
    245

    6    tmpfu83fxvr                        0x0000555b6f22d509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.count == 0 {\n        return false\n    }\n\
    \    var stack = Stack<Character>()\n    for character in string {\n        if\
    \ character == \"[\" {\n            stack.push(character)\n        } else if character\
    \ == \"]\" {\n            if let topElement = stack.peek() {\n               \
    \ if topElement == \"[\" {\n                    stack.pop()\n                }\
    \ else {\n                    stack.push(character)\n                }\n     \
    \       } else {\n                stack.push(character)\n            }\n     \
    \   }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu1p6q5ob.swift:21:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if stack.count == 0 {\n            stack.append(char)\n        } else\
    \ {\n            if char == \"[\" {\n                stack.append(char)\n    \
    \        } else {\n                if stack.last == \"[\" {\n                \
    \    stack.removeLast()\n                } else {\n                    stack.append(char)\n\
    \                }\n            }\n        }\n    }\n    return stack.count ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\") ==\
    \ true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpe6t_cuye/tmpe6t_cuye.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45aa93fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45aa636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45aa636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45aa6357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6t_cuye                        0x0000558dc585083b <unavailable> + 6203

    5    libc.so.6                          0x00002b45aab2b460 __libc_start_main +
    245

    6    tmpe6t_cuye                        0x0000558dc5850389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [String]()\n    var index = 0\n    while\
    \ index < string.count {\n        let element = string[index]\n        if element\
    \ == \"[\" {\n            stack.append(element)\n        } else {\n          \
    \  if stack.isEmpty {\n                return false\n            }\n         \
    \   stack.removeLast()\n        }\n        index += 1\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwqaoxgoh.swift:21:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let element\
    \ = string[index]\n                      ^~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpwqaoxgoh.swift:23:26: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            stack.append(element)\n                         ^\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for bracket in string {\n        if\
    \ bracket == \"[\" {\n            count += 1\n        } else if bracket == \"\
    ]\" {\n            count -= 1\n        }\n        if count < 0 {\n           \
    \ return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp78ew1pv0/tmp78ew1pv0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab933997c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab93368eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab93368e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab93368d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78ew1pv0                        0x00005580fac2654b <unavailable> + 5451

    5    libc.so.6                          0x00002ab933b83460 __libc_start_main +
    245

    6    tmp78ew1pv0                        0x00005580fac26099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let string = string.filter{$0 == \"[\" || $0 == \"]\"\
    }\n    guard string.count % 2 == 0 else { return false }\n    var count = 0\n\
    \    for char in string {\n        if char == \"[\" {\n            count += 1\n\
    \        } else {\n            count -= 1\n        }\n        if count < 0 {\n\
    \            return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpyacpzyuf/tmpyacpzyuf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0879ec0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0879bb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0879bb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0879bb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyacpzyuf                        0x000056486886e70b <unavailable> + 5899

    5    libc.so.6                          0x00002b087a0ac460 __libc_start_main +
    245

    6    tmpyacpzyuf                        0x000056486886e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    var isNested = false\n    for char\
    \ in string {\n        if char == \"[\" {\n            count += 1\n        } else\
    \ if char == \"]\" {\n            count -= 1\n        }\n        if count == -1\
    \ {\n            return false\n        }\n        if count == 0 {\n          \
    \  isNested = true\n        }\n    }\n    return isNested\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpsdzv8mda/tmpsdzv8mda.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eb90b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eb8daeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eb8dae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eb8dad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdzv8mda                        0x000056069231554b <unavailable> + 5451

    5    libc.so.6                          0x00002b6eb92a3460 __libc_start_main +
    245

    6    tmpsdzv8mda                        0x0000560692315099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var nested = true\n    var string = string\n    while\
    \ nested {\n        if string.contains(\"[[\") || string.contains(\"]]\") {\n\
    \            string = string.replacingOccurrences(of: \"[[\", with: \"\")\n  \
    \          string = string.replacingOccurrences(of: \"]]\", with: \"\")\n    \
    \    } else {\n            nested = false\n        }\n    }\n    return string.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmztdqtvv.swift:22:29: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n            string = string.replacingOccurrences(of:\
    \ \"[[\", with: \"\")\n                     ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmztdqtvv.swift:23:29:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \     string = string.replacingOccurrences(of: \"]]\", with: \"\")\n         \
    \            ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let length = string.count\n    guard length > 0 else\
    \ { return false }\n    var stack = Stack<Character>()\n    var index = 0\n  \
    \  for char in string {\n        if char == \"[\" {\n            stack.push(element:\
    \ char)\n        } else if !stack.isEmpty() {\n            stack.pop()\n     \
    \   } else {\n            return false\n        }\n        index += 1\n    }\n\
    \    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy9mj7eqq.swift:20:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var storage = [Character]()\n    var count = 0\n    for\
    \ ch in string {\n        switch ch {\n        case \"[\":\n            storage.append(ch)\n\
    \        case \"]\":\n            count += 1\n            if !storage.isEmpty\
    \ {\n                storage.removeLast()\n            }\n        default:\n \
    \           break\n        }\n    }\n    return count > 0 && storage.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2fjecnhv/tmp2fjecnhv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89bf3a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89bf097b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89bf097988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89bf0967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fjecnhv                        0x00005555d8d5e7bb <unavailable> + 6075

    5    libc.so.6                          0x00002b89bf58c460 __libc_start_main +
    245

    6    tmp2fjecnhv                        0x00005555d8d5e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for character in string\
    \ {\n        if character == \"[\" {\n            stack.append(character)\n  \
    \      } else if character == \"]\" {\n            if let last = stack.last {\n\
    \                if last == \"[\" {\n                    stack.removeLast()\n\
    \                } else {\n                    return false\n                }\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpexipzg22/tmpexipzg22.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a907e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a904e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a904e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a904df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexipzg22                        0x000055f700d4386b <unavailable> + 6251

    5    libc.so.6                          0x00002b0a909d5460 __libc_start_main +
    245

    6    tmpexipzg22                        0x000055f700d433b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var brackets = [Character]()\n    \n    for bracket\
    \ in string {\n        if bracket == \"[\" {\n            brackets.append(bracket)\n\
    \        } else if bracket == \"]\" {\n            if brackets.count == 0 {\n\
    \                return false\n            } else {\n                brackets.removeLast()\n\
    \            }\n        }\n    }\n    \n    return brackets.count == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp1zrkrk6g/tmp1zrkrk6g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac98b6ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac98b3e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac98b3e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac98b3e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zrkrk6g                        0x00005577cf41e78b <unavailable> + 6027

    5    libc.so.6                          0x00002ac98b8d7460 __libc_start_main +
    245

    6    tmp1zrkrk6g                        0x00005577cf41e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var string = string\n    var bracketStack = Stack<Character>()\n\
    \    for character in string {\n        if character == \"[\" {\n            bracketStack.push(item:\
    \ character)\n        } else if character == \"]\" {\n            if bracketStack.isEmpty()\
    \ {\n                return false\n            } else {\n                bracketStack.pop()\n\
    \            }\n        }\n    }\n    return bracketStack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbl7cika9.swift:19:24: error: cannot find 'Stack' in scope\n   \
    \ var bracketStack = Stack<Character>()\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    guard !string.isEmpty else { return false }\n    guard\
    \ string.filter({$0 == \"[\"}).count == string.filter({$0 == \"]\"}).count else\
    \ { return false }\n    if string.contains(\"][\") { return false }\n    var cur\
    \ = 0\n    var result = true\n    for (i, c) in string.enumerated() {\n      \
    \  if c == \"[\" {\n            cur += 1\n        } else {\n            cur -=\
    \ 1\n        }\n        if cur < 0 { return false }\n        result = result &&\
    \ cur > 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg5e00_ae/tmpg5e00_ae.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9045da1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9045a98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9045a98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9045a977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5e00_ae                        0x0000560bc20c37bb <unavailable> + 6075

    5    libc.so.6                          0x00002b9045f8d460 __libc_start_main +
    245

    6    tmpg5e00_ae                        0x0000560bc20c3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for letter in string\
    \ {\n        if letter == \"[\" {\n            stack.append(letter)\n        }\
    \ else if letter == \"]\" {\n            if let last = stack.last {\n        \
    \        if last == \"[\" {\n                    stack.removeLast()\n        \
    \        } else {\n                    return false\n                }\n     \
    \       } else {\n                return false\n            }\n        }\n   \
    \ }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp9i2_scnm/tmp9i2_scnm.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac635a3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac635735b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac635735988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6357347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i2_scnm                        0x00005617d925886b <unavailable> + 6251

    5    libc.so.6                          0x00002ac635c2a460 __libc_start_main +
    245

    6    tmp9i2_scnm                        0x00005617d92583b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let arr = string.split(separator: \"[\")\n    \n    if\
    \ arr.count == 0 {\n        return false\n    }\n    \n    for i in 0..<arr.count\
    \ {\n        let nested = arr[i].split(separator: \"]\")\n        if nested.count\
    \ > 1 {\n            return true\n        }\n    }\n    \n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpb4gl_dfl/tmpb4gl_dfl.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6068f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6065f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6065f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6065ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4gl_dfl                        0x000055b69f40769b <unavailable> + 5787

    5    libc.so.6                          0x00002ba606ae5460 __libc_start_main +
    245

    6    tmpb4gl_dfl                        0x000055b69f407329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var count = 0\n    for char in string {\n        if char\
    \ == \"[\" {\n            count += 1\n        } else if char == \"]\" {\n    \
    \        count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg_djm1wa/tmpg_djm1wa.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba607403c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6070fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6070fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6070f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_djm1wa                        0x00005632227ee54b <unavailable> + 5451

    5    libc.so.6                          0x00002ba6075ef460 __libc_start_main +
    245

    6    tmpg_djm1wa                        0x00005632227ee099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpayi6knt1.swift:18:12: error: 'nil' is incompatible with return\
    \ type 'Bool'\n    return nil\n           ^\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in string\
    \ {\n        if bracket == \"[\" {\n            stack.push(item: bracket)\n  \
    \      } else if bracket == \"]\" {\n            if stack.peek() == \"[\" {\n\
    \                stack.pop()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdeo8257i.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  var stack = Array<Character>()\n  for char in string {\n\
    \    if char == \"[\" {\n      stack.append(char)\n    } else if char == \"]\"\
    \ {\n      if stack.isEmpty {\n        return false\n      } else {\n        stack.removeLast()\n\
    \      }\n    }\n  }\n  return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp9_xcvnds/tmp9_xcvnds.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e38953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e3864ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e3864a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e386497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_xcvnds                        0x0000557edaa0e7bb <unavailable> + 6075

    5    libc.so.6                          0x00002b3e38b3f460 __libc_start_main +
    245

    6    tmp9_xcvnds                        0x0000557edaa0e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  let opening: Character = \"[\"\n  let closing: Character\
    \ = \"]\"\n  var stack: [Character] = []\n  for char in string {\n    if char\
    \ == opening {\n      stack.append(char)\n    } else if char == closing {\n  \
    \    if stack.last == opening {\n        stack.removeLast()\n      } else {\n\
    \        return false\n      }\n    }\n  }\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpimuqp7o9/tmpimuqp7o9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af23de44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af23db3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af23db3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23db3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimuqp7o9                        0x0000557b832e67db <unavailable> + 6107

    5    libc.so.6                          0x00002af23e030460 __libc_start_main +
    245

    6    tmpimuqp7o9                        0x0000557b832e6329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var dict: [Character: Int] = [:]\n    for char in string\
    \ {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    if dict[\"[\"] ==\
    \ dict[\"]\"] {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmptemurob9/tmptemurob9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd81f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd7ee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fd7ee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fd7ee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptemurob9                        0x0000559e0e7295ab <unavailable> + 5547

    5    libc.so.6                          0x00002b4fd83dd460 __libc_start_main +
    245

    6    tmptemurob9                        0x0000559e0e729239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let stack = Stack<Character>()\n    for ch in string\
    \ {\n        if ch == \"[\" {\n            stack.push(ch)\n        } else if ch\
    \ == \"]\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptg9_osyb.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    if string.count == 0 {\n        return false\n    }\n\
    \    if string.count == 1 {\n        return false\n    }\n    if string.count\
    \ == 2 {\n        return string.prefix(1) == \"[\" && string.suffix(1) == \"]\"\
    \n    }\n    var minimum_length = string.count\n    for index in 0..<string.count\
    \ {\n        var temp_string = string\n        temp_string.remove(at: temp_string.index(temp_string.startIndex,\
    \ offsetBy: index))\n        if is_nested(string: temp_string) {\n           \
    \ return true\n        }\n        if temp_string.count < minimum_length {\n  \
    \          minimum_length = temp_string.count\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpcv5i8es7/tmpcv5i8es7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27c3ef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27c3bedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27c3bed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27c3bec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv5i8es7                        0x0000562de644287b <unavailable> + 6267

    5    libc.so.6                          0x00002b27c40e2460 __libc_start_main +
    245

    6    tmpcv5i8es7                        0x0000562de6442469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var arr = [Character]()\n    for character in string\
    \ {\n        if character == \"[\" {\n            arr.append(character)\n    \
    \    } else if character == \"]\" {\n            if arr.count == 0 {\n       \
    \         return false\n            } else {\n                arr.removeLast()\n\
    \            }\n        }\n    }\n    return arr.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp3ytde8hs/tmp3ytde8hs.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c1953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c164ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c164a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c16497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ytde8hs                        0x0000557441c0a78b <unavailable> + 6027

    5    libc.so.6                          0x00002ae3c1b3f460 __libc_start_main +
    245

    6    tmp3ytde8hs                        0x0000557441c0a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var depth = 0\n    for character in string {\n      \
    \  if character == \"[\" {\n            depth += 1\n        } else if character\
    \ == \"]\" {\n            depth -= 1\n        }\n        if depth < 0 {\n    \
    \        return false\n        }\n    }\n    return depth == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmplf9kk4hz/tmplf9kk4hz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83ed551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83ed248b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83ed248988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83ed2477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplf9kk4hz                        0x00005596eef6f54b <unavailable> + 5451

    5    libc.so.6                          0x00002b83ed73d460 __libc_start_main +
    245

    6    tmplf9kk4hz                        0x00005596eef6f099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var previous: String?\n    var count = 0\n    for char\
    \ in string {\n        let character = String(char)\n        if character == \"\
    [\" {\n            count += 1\n        } else if character == \"]\" {\n      \
    \      count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n        if let p = previous {\n            if p == \"[\" && character\
    \ == \"]\" {\n                previous = nil\n            } else {\n         \
    \       previous = character\n            }\n        } else {\n            previous\
    \ = character\n        }\n    }\n    return previous == nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpsfv96h74/tmpsfv96h74.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b138dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b135d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b135d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b135d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfv96h74                        0x000055f6b57843bb <unavailable> + 5051

    5    libc.so.6                          0x00002b8b13aca460 __libc_start_main +
    245

    6    tmpsfv96h74                        0x000055f6b5784049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp38im6a6_/tmp38im6a6_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac521faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac521ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac521ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac521ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38im6a6_                        0x000055824847481b <unavailable> + 6171

    5    libc.so.6                          0x00002ac522196460 __libc_start_main +
    245

    6    tmp38im6a6_                        0x0000558248474369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for c in string {\n  \
    \      if stack.isEmpty {\n            stack.append(c)\n        } else {\n   \
    \         if stack.last == \"[\" && c == \"]\" {\n                stack.removeLast()\n\
    \            } else {\n                stack.append(c)\n            }\n      \
    \  }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp1e29n8m0/tmp1e29n8m0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121f824c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121f51bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121f51b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121f51a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1e29n8m0                        0x000055b56fcef81b <unavailable> + 6171

    5    libc.so.6                          0x00002b121fa10460 __libc_start_main +
    245

    6    tmp1e29n8m0                        0x000055b56fcef369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [String]()\n    for c in string {\n     \
    \   if c == \"[\" {\n            stack.append(\"[\")\n        } else if c == \"\
    ]\" {\n            if stack.last == \"[\" {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpg3i7cs03/tmpg3i7cs03.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34bac54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34ba94bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34ba94b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34ba94a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3i7cs03                        0x000055d7ec88f87b <unavailable> + 6267

    5    libc.so.6                          0x00002b34bae40460 __libc_start_main +
    245

    6    tmpg3i7cs03                        0x000055d7ec88f3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    func isClosingBracket(_ bracket: Character) ->\
    \ Bool {\n        return bracket == \"]\"\n    }\n    \n    func isOpeningBracket(_\
    \ bracket: Character) -> Bool {\n        return bracket == \"[\"\n    }\n    \n\
    \    // If a string is empty it is not a bracket sequence\n    guard !string.isEmpty\
    \ else {\n        return false\n    }\n    \n    // If a string only contains\
    \ one bracket, it is not a bracket sequence\n    guard string.count > 1 else {\n\
    \        return false\n    }\n    \n    // Filter by closing brackets\n    let\
    \ closingBrackets = string.filter { isClosingBracket($0) }\n    \n    // If a\
    \ string only contains one closing bracket, it is not a bracket sequence\n   \
    \ guard closingBrackets.count > 1 else {\n        return false\n    }\n    \n\
    \    // Filter by opening brackets\n    let openingBrackets = string.filter {\
    \ isOpeningBracket($0) }\n    \n    // If a string only contains one opening bracket,\
    \ it is not a bracket sequence\n    guard openingBrackets.count > 1 else {\n \
    \       return false\n    }\n    \n    // Is the number of opening and closing\
    \ brackets the same?\n    guard openingBrackets.count == closingBrackets.count\
    \ else {\n        return false\n    }\n    \n    // If the first bracket is a\
    \ closing bracket, the bracket sequence is invalid\n    guard isOpeningBracket(string.first!)\
    \ else {\n        return false\n    }\n    \n    // If the last bracket is an\
    \ opening bracket, the bracket sequence is invalid\n    guard isClosingBracket(string.last!)\
    \ else {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp9uy932ur/tmp9uy932ur.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addcd16cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addcce63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addcce63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addcce627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uy932ur                        0x00005614413ef7cb <unavailable> + 6091

    5    libc.so.6                          0x00002addcd358460 __libc_start_main +
    245

    6    tmp9uy932ur                        0x00005614413ef319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var left = 0\n    var right = 0\n    for char in string\
    \ {\n        if char == \"[\" {\n            left += 1\n        } else if char\
    \ == \"]\" {\n            right += 1\n        }\n        if right > left {\n \
    \           return false\n        }\n    }\n    return left == right && left !=\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\") ==\
    \ true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpoq_e477w/tmpoq_e477w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefd8dd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefd8ac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefd8ac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefd8ac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoq_e477w                        0x00005591e389254b <unavailable> + 5451

    5    libc.so.6                          0x00002aefd8fbc460 __libc_start_main +
    245

    6    tmpoq_e477w                        0x00005591e3892099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    var isNested = false\n\
    \    for character in string {\n        switch character {\n        case \"[\"\
    :\n            stack.append(character)\n        case \"]\":\n            if stack.isEmpty\
    \ || stack.last! != \"[\" {\n                return false\n            }\n   \
    \         stack.removeLast()\n            if !stack.isEmpty {\n              \
    \  isNested = true\n            }\n        default:\n            return false\n\
    \        }\n    }\n    return stack.isEmpty && isNested\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpnm3n68yt/tmpnm3n68yt.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10baf7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10bac72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10bac72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10bac717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnm3n68yt                        0x00005573174e9dfb <unavailable> + 7675

    5    libc.so.6                          0x00002b10bb167460 __libc_start_main +
    245

    6    tmpnm3n68yt                        0x00005573174e9459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    let openBrackets = string.filter({ $0 == \"[\"\
    \ })\n    let closeBrackets = string.filter({ $0 == \"]\" })\n    \n    if openBrackets.count\
    \ == closeBrackets.count {\n        return false\n    }\n    \n    var currentOpenBrackets\
    \ = 0\n    var currentCloseBrackets = 0\n    \n    for char in string {\n    \
    \    if char == \"[\" {\n            currentOpenBrackets += 1\n        } else\
    \ if char == \"]\" {\n            currentCloseBrackets += 1\n        }\n     \
    \   \n        if currentCloseBrackets > currentOpenBrackets {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp8162zrbn/tmp8162zrbn.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1528358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b152804fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b152804f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b152804e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8162zrbn                        0x000055c81e1e252b <unavailable> + 5419

    5    libc.so.6                          0x00002b1528544460 __libc_start_main +
    245

    6    tmp8162zrbn                        0x000055c81e1e21b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var valid_nested_string = false\n    var stack = Stack<Character>()\n\
    \    for c in string {\n        switch c {\n        case \"[\":\n            stack.push(item:\
    \ c)\n        case \"]\":\n            if stack.peek() == \"[\" {\n          \
    \      valid_nested_string = true\n            }\n            stack.pop()\n  \
    \      default:\n            print(\"Unexpected character!\")\n        }\n   \
    \ }\n    return valid_nested_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaswz8cjw.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ stack.count > 0 {\n            stack.removeLast()\n        } else {\n      \
    \      return false\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp5_yq3cyc/tmp5_yq3cyc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97454eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97451e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97451e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97451e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_yq3cyc                        0x000055b95646778b <unavailable> + 6027

    5    libc.so.6                          0x00002b97456da460 __libc_start_main +
    245

    6    tmp5_yq3cyc                        0x000055b9564672d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // 1.\n    var new_string = string\n    for i in 0...new_string.count\
    \ - 1 {\n        if i < new_string.count - 1 {\n            let index_first =\
    \ new_string.index(new_string.startIndex, offsetBy: i)\n            let index_second\
    \ = new_string.index(new_string.startIndex, offsetBy: i + 1)\n            if new_string[index_first]\
    \ == \"[\" && new_string[index_second] == \"]\" {\n                new_string.remove(at:\
    \ index_first)\n                new_string.remove(at: index_second)\n        \
    \        i -= 2\n            }\n        }\n    }\n    // 2.\n    if new_string.count\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxkjdcews.swift:27:19: error: left side of mutating operator isn't\
    \ mutable: 'i' is a 'let' constant\n                i -= 2\n                ~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let pairs = string.reduce(into: []) { (result, char)\
    \ in\n        if char == \"[\" {\n            result.append(char)\n        } else\
    \ if let last = result.last, last == \"[\" {\n            result.removeLast()\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ pairs.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn2xbgorb.swift:21:43: error: cannot convert value of type 'Any'\
    \ to expected argument type 'String'\n        } else if let last = result.last,\
    \ last == \"[\" {\n                                          ^\n             \
    \                                  as! String\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let stack = Stack<Character>()\n    var is_nested = false\n\
    \    for char in string {\n        if char == \"[\" {\n            stack.push(char)\n\
    \        } else if char == \"]\" {\n            if stack.pop() == \"[\" {\n  \
    \              is_nested = true\n            }\n        }\n    }\n    return is_nested\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0pq7vers.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxhmi2_k9/tmpxhmi2_k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eacafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eac7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eac7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eac7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhmi2_k9                        0x000055e3b3f4b2fb <unavailable> + 4859

    5    libc.so.6                          0x00002b5eacce7460 __libc_start_main +
    245

    6    tmpxhmi2_k9                        0x000055e3b3f4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // Write your code here\n    var stack = [Character]()\n\
    \    var brackets: [Character] = [\"[\", \"]\"]\n    for char in string {\n  \
    \      if char == brackets[0] {\n            stack.append(char)\n        } else\
    \ if !stack.isEmpty && char == brackets[1] {\n            stack.removeLast()\n\
    \        } else {\n            return false\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpqvl9uo_q/tmpqvl9uo_q.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc94606c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc942fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc942fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc942fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvl9uo_q                        0x0000560cd706190b <unavailable> + 6411

    5    libc.so.6                          0x00002adc947f2460 __libc_start_main +
    245

    6    tmpqvl9uo_q                        0x0000560cd7061459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp26lkbd25/tmp26lkbd25.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06c9697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06c938eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06c938e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06c938d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26lkbd25                        0x000055be596ae25b <unavailable> + 4699

    5    libc.so.6                          0x00002b06c9883460 __libc_start_main +
    245

    6    tmp26lkbd25                        0x000055be596adee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let brackets = string.filter { $0 == \"[\" || $0 == \"\
    ]\" }\n    var max_length = 0\n    var current_length = 0\n    var depth = 0\n\
    \    for bracket in brackets {\n        if bracket == \"[\" {\n            depth\
    \ += 1\n            current_length += 1\n        } else {\n            depth -=\
    \ 1\n            if depth < 0 {\n                current_length = 0\n        \
    \        depth = 0\n            } else {\n                current_length += 1\n\
    \            }\n        }\n        max_length = max(max_length, current_length)\n\
    \    }\n    return max_length >= 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmprekhuhm1/tmprekhuhm1.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba192590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba192287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba192287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1922867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprekhuhm1                        0x000055bbc6e4861b <unavailable> + 5659

    5    libc.so.6                          0x00002ba19277c460 __libc_start_main +
    245

    6    tmprekhuhm1                        0x000055bbc6e48209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var buffer: [Character] = []\n    var bracketCount =\
    \ 0\n    var lastBracket: Character?\n    for char in string {\n        if char\
    \ == \"]\" {\n            bracketCount += 1\n            lastBracket = char\n\
    \        } else if char == \"[\" {\n            bracketCount -= 1\n          \
    \  lastBracket = char\n        }\n        \n        if (bracketCount < 0) {\n\
    \            return false\n        }\n    }\n    \n    if (bracketCount != 0)\
    \ {\n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpodtpvdj6/tmpodtpvdj6.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32084f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32081ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32081ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32081eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodtpvdj6                        0x000055a4fe8ab4bb <unavailable> + 5307

    5    libc.so.6                          0x00002b32086e1460 __libc_start_main +
    245

    6    tmpodtpvdj6                        0x000055a4fe8ab149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    if string.count == 0 {\n        return false\n\
    \    }\n    \n    // Stack to store the brackets\n    var stack = [Character]()\n\
    \    \n    for char in string {\n        // Push if it is an opening bracket\n\
    \        if char == \"[\" {\n            stack.append(char)\n        }\n     \
    \   // Pop if it is an closing bracket\n        else if char == \"]\" {\n    \
    \        // If stack is empty, string is not valid\n            if stack.count\
    \ == 0 {\n                return false\n            }\n            else {\n  \
    \              stack.removeLast()\n            }\n        }\n    }\n    \n   \
    \ // Return true if stack is empty, false otherwise\n    return stack.count ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\") ==\
    \ true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxx8gqd04/tmpxx8gqd04.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24a539dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24a5094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24a5094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24a50937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxx8gqd04                        0x00005649cf69e7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b24a5589460 __libc_start_main +
    245

    6    tmpxx8gqd04                        0x00005649cf69e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<String>()\n    for char in string {\n\
    \        let charString = String(char)\n        if charString == \"[\" {\n   \
    \         stack.push(item: charString)\n        } else if charString == \"]\"\
    \ {\n            if let top = stack.top() {\n                if top == \"[\" {\n\
    \                    stack.pop()\n                } else {\n                 \
    \   return false\n                }\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsy6olnkt.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return string.nested()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm8sbo8ap.swift:18:19: error: value of type 'String' has no member\
    \ 'nested'\n    return string.nested()\n           ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var stringArray = Array(string)\n    var check\
    \ = [String]()\n    \n    for index in 0..<stringArray.count {\n        if stringArray[index]\
    \ == \"[\" {\n            check.append(\"[\")\n        } else if stringArray[index]\
    \ == \"]\" {\n            if check.count > 0 {\n                check.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    \n    if check.count > 0 {\n        return false\n    } else {\n \
    \       return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpzb57o724/tmpzb57o724.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5142edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba513fe4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba513fe4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba513fe37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzb57o724                        0x0000559baef11a1b <unavailable> + 6683

    5    libc.so.6                          0x00002ba5144d9460 __libc_start_main +
    245

    6    tmpzb57o724                        0x0000559baef11569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxhmi2_k9/tmpxhmi2_k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eacafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eac7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eac7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eac7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhmi2_k9                        0x000055e3b3f4b2fb <unavailable> + 4859

    5    libc.so.6                          0x00002b5eacce7460 __libc_start_main +
    245

    6    tmpxhmi2_k9                        0x000055e3b3f4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for s in string {\n  \
    \      if (s == \"[\") {\n            stack.append(s)\n        } else if (s ==\
    \ \"]\") {\n            if (stack.count > 0) {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmppxp7f_49/tmppxp7f_49.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84eb649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84eb340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84eb340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84eb33f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxp7f_49                        0x0000557f62aa878b <unavailable> + 6027

    5    libc.so.6                          0x00002b84eb835460 __libc_start_main +
    245

    6    tmppxp7f_49                        0x0000557f62aa82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxhmi2_k9/tmpxhmi2_k9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eacafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eac7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eac7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eac7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhmi2_k9                        0x000055e3b3f4b2fb <unavailable> + 4859

    5    libc.so.6                          0x00002b5eacce7460 __libc_start_main +
    245

    6    tmpxhmi2_k9                        0x000055e3b3f4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  // TODO: Implement function here\n  return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpawzhii25/tmpawzhii25.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52361d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5235ecdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5235ecd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5235ecc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawzhii25                        0x000055694bb6825b <unavailable> + 4699

    5    libc.so.6                          0x00002b52363c2460 __libc_start_main +
    245

    6    tmpawzhii25                        0x000055694bb67ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let chars = string.map {String($0)}\n    var stack =\
    \ Stack<String>()\n    if chars.count % 2 != 0 {\n        return false\n    }\n\
    \    for char in chars {\n        if char == \"[\" {\n            stack.push(char)\n\
    \        } else {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                _ = stack.pop()\n            }\n      \
    \  }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplapqiuvq.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var left_count = 0\n    var right_count = 0\n    for\
    \ char in string {\n        if char == \"[\" {\n            left_count += 1\n\
    \        } else if char == \"]\" {\n            right_count += 1\n        }\n\
    \        if right_count > left_count {\n            return false\n        }\n\
    \    }\n    return left_count > right_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp2hptg_01/tmp2hptg_01.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b070a0a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0709d9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0709d9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0709d9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hptg_01                        0x00005597a742540b <unavailable> + 5131

    5    libc.so.6                          0x00002b070a294460 __libc_start_main +
    245

    6    tmp2hptg_01                        0x00005597a7425099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var chars = [Character]()\n    var depth = 0\n    for\
    \ char in string {\n        if char == \"[\" {\n            depth += 1\n     \
    \   } else if char == \"]\" {\n            depth -= 1\n        }\n        if depth\
    \ < 0 {\n            return false\n        }\n        chars.append(char)\n   \
    \ }\n    var nestedCount = 0\n    for i in 0..<chars.count {\n        let char\
    \ = chars[i]\n        if char == \"[\" {\n            for j in i+1..<chars.count\
    \ {\n                if chars[j] == \"]\" {\n                    nestedCount +=\
    \ 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return nestedCount > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpwi1otv4d/tmpwi1otv4d.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876f646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876f33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876f33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876f33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwi1otv4d                        0x000055f3b6b9287b <unavailable> + 6267

    5    libc.so.6                          0x00002b876f832460 __libc_start_main +
    245

    6    tmpwi1otv4d                        0x000055f3b6b923c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var counter = 0\n    for char in string {\n        if\
    \ char == \"[\" {\n            counter += 1\n        } else if char == \"]\" {\n\
    \            counter -= 1\n        }\n        if counter < 0 {\n            return\
    \ false\n        }\n    }\n    return counter == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpvo2xrukh/tmpvo2xrukh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba909dddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba909ad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba909ad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba909ad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvo2xrukh                        0x000055b90db6254b <unavailable> + 5451

    5    libc.so.6                          0x00002ba909fc9460 __libc_start_main +
    245

    6    tmpvo2xrukh                        0x000055b90db62099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(item: char)\n        }\
    \ else if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdwg5ea52.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for ch in string\
    \ {\n        if ch == \"[\" {\n            stack.push(ch)\n        } else if ch\
    \ == \"]\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                let _ = stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6hb40i5u.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    var nested = true\n    var counts = 0\n    \n \
    \   for char in string {\n        switch char {\n        case \"[\":\n       \
    \     counts += 1\n        case \"]\":\n            counts -= 1\n        default:\n\
    \            fatalError(\"Not a valid bracket\")\n        }\n        \n      \
    \  if counts < 0 {\n            nested = false\n        }\n    }\n    \n    if\
    \ counts != 0 {\n        nested = false\n    }\n    \n    return nested\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpk7cv4hps/tmpk7cv4hps.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ec4f5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ec4c54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ec4c54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ec4c537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7cv4hps                        0x000055e65584354b <unavailable> + 5451

    5    libc.so.6                          0x00002b4ec5149460 __libc_start_main +
    245

    6    tmpk7cv4hps                        0x000055e655843099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    \n    let closingBrackets: [Character] = [\"}\", \"]\"\
    , \")\"]\n    let mapping: [Character: Character] = [\"]\": \"[\", \"}\": \"{\"\
    , \")\": \"(\"]\n    var stack: [Character] = []\n    \n    for char in string\
    \ {\n        if closingBrackets.contains(char) {\n            if stack.last ==\
    \ mapping[char] {\n                stack.removeLast()\n            } else {\n\
    \                return false\n            }\n        } else {\n            stack.append(char)\n\
    \        }\n    }\n    \n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpj3lgci_7/tmpj3lgci_7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add8a9c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add8a6b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add8a6b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add8a6b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3lgci_7                        0x0000561b75511a4b <unavailable> + 6731

    5    libc.so.6                          0x00002add8abae460 __libc_start_main +
    245

    6    tmpj3lgci_7                        0x0000561b75511599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var brackets = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            brackets.push(char)\n        } else\
    \ if char == \"]\" {\n            if brackets.isEmpty {\n                return\
    \ false\n            } else {\n                brackets.pop()\n            }\n\
    \        }\n    }\n    return brackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1e4d4m2l.swift:18:20: error: cannot find 'Stack' in scope\n   \
    \ var brackets = Stack<Character>()\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return string.trimmingCharacters(in: .whitespaces).reduce(into:\
    \ (first: [Character](), second: [Character]())) { (result, char) in\n       \
    \ if char == \"[\" {\n            result.first.append(char)\n        } else {\n\
    \            if let last = result.first.last {\n                if last == \"\
    [\" {\n                    result.first.removeLast()\n                } else {\n\
    \                    result.second.append(char)\n                }\n         \
    \   } else {\n                result.second.append(char)\n            }\n    \
    \    }\n    }.first.isEmpty && !string.hasPrefix(\"]\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsw5praaa.swift:18:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    return string.trimmingCharacters(in: .whitespaces).reduce(into:\
    \ (first: [Character](), second: [Character]())) { (result, char) in\n       \
    \    ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpsw5praaa.swift:18:43: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    return string.trimmingCharacters(in:\
    \ .whitespaces).reduce(into: (first: [Character](), second: [Character]())) {\
    \ (result, char) in\n                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n  var openBrackets = 0\n  var closeBrackets = 0\n  var hasOpen\
    \ = false\n  var hasClose = false\n  var nested = false\n  for c in string {\n\
    \    if c == \"[\" {\n      openBrackets += 1\n      hasOpen = true\n    } else\
    \ if c == \"]\" {\n      closeBrackets += 1\n      hasClose = true\n    }\n  \
    \  if hasOpen && hasClose {\n      nested = true\n    }\n  }\n  return nested\
    \ && (openBrackets == closeBrackets)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp1rmy_33x/tmp1rmy_33x.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88b7f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88b4e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88b4e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88b4e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rmy_33x                        0x0000557598d5954b <unavailable> + 5451

    5    libc.so.6                          0x00002af88b9de460 __libc_start_main +
    245

    6    tmp1rmy_33x                        0x0000557598d59099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if stack.isEmpty || char == \"[\" {\n            stack.append(char)\n\
    \        } else {\n            stack.removeLast()\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpbbkyrxqh/tmpbbkyrxqh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc32109c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc31e00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc31e00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc31dff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbkyrxqh                        0x000055aa279af7bb <unavailable> + 6075

    5    libc.so.6                          0x00002afc322f5460 __libc_start_main +
    245

    6    tmpbbkyrxqh                        0x000055aa279af309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ !stack.isEmpty {\n            stack.removeLast()\n        } else {\n       \
    \     return false\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpx5sba0w8/tmpx5sba0w8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f384dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f381d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f381d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f381d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5sba0w8                        0x000055a8d89b57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b3f386ca460 __libc_start_main +
    245

    6    tmpx5sba0w8                        0x000055a8d89b5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let reversed = string.reversed()\n    var brackets =\
    \ [[Character]]()\n    for char in reversed {\n        if let sub = brackets.last,\
    \ sub.count == 1, sub.last! == char {\n            brackets.removeLast()\n   \
    \     } else {\n            brackets.append([char])\n        }\n    }\n    return\
    \ brackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp69cdlpyc/tmp69cdlpyc.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0039c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0039966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0039966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00399657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69cdlpyc                        0x000055bed11a6d45 <unavailable> + 7493

    5    libc.so.6                          0x00002b0039e5b460 __libc_start_main +
    245

    6    tmp69cdlpyc                        0x000055bed11a65c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var nested = false\n    let startingCount = string.filter\
    \ { $0 == \"[\" }.count\n    let endingCount = string.filter { $0 == \"]\" }.count\n\
    \    let numbers = [startingCount, endingCount]\n    let maxNumber = numbers.max()\n\
    \    if startingCount == endingCount && startingCount != 0 {\n        nested =\
    \ true\n    } else if endingCount < startingCount && startingCount != 0 {\n  \
    \      nested = true\n    } else if endingCount > startingCount && endingCount\
    \ != 0 {\n        nested = true\n    }\n    if startingCount == endingCount &&\
    \ startingCount == 0 {\n        nested = false\n    }\n    return nested\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpz3kiabqm/tmpz3kiabqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60030dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6002dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6002dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6002dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3kiabqm                        0x0000564ffa90b6bb <unavailable> + 5819

    5    libc.so.6                          0x00002b60032c6460 __libc_start_main +
    245

    6    tmpz3kiabqm                        0x0000564ffa90b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    let input = string.filter { $0 == \"[\" || $0 == \"]\"\
    \ }\n    guard input.count > 1 else { return false }\n    var stack = [Character]()\n\
    \    for char in input {\n        if char == \"[\" {\n            stack.append(char)\n\
    \        } else {\n            if let last = stack.last, last == \"[\" {\n   \
    \             stack.removeLast()\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxzliqhpw/tmpxzliqhpw.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27903bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27900b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27900b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27900b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzliqhpw                        0x0000556f6efeb94b <unavailable> + 6475

    5    libc.so.6                          0x00002b27905a8460 __libc_start_main +
    245

    6    tmpxzliqhpw                        0x0000556f6efeb499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // implement your code here\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpahynfchn/tmpahynfchn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac673fb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac673cadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac673cad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac673cac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahynfchn                        0x000055a7f1cb125b <unavailable> + 4699

    5    libc.so.6                          0x00002ac6741a2460 __libc_start_main +
    245

    6    tmpahynfchn                        0x000055a7f1cb0ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var bStack = [Character]()\n    for c in string {\n \
    \       if c == \"[\" {\n            bStack.append(c)\n        } else if c ==\
    \ \"]\" {\n            if bStack.count == 0 {\n                return false\n\
    \            } else {\n                bStack.removeLast()\n            }\n  \
    \      }\n    }\n    return bStack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmplqkij43z/tmplqkij43z.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82d144ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82d1145b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82d1145988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82d11447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqkij43z                        0x000055aadd9c978b <unavailable> + 6027

    5    libc.so.6                          0x00002b82d163a460 __libc_start_main +
    245

    6    tmplqkij43z                        0x000055aadd9c92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                if stack.last! == \"[\" {\n           \
    \         stack.removeLast()\n                } else {\n                    return\
    \ false\n                }\n            }\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmprtl9411i/tmprtl9411i.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8dd1e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8dcedab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8dceda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8dced97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtl9411i                        0x00005561cd93990b <unavailable> + 6411

    5    libc.so.6                          0x00002ad8dd3cf460 __libc_start_main +
    245

    6    tmprtl9411i                        0x00005561cd939459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // create empty stack\n    var stack = Stack<Character>()\n\
    \    // for each character in string\n    for character in string {\n        //\
    \ if character is an opening bracket\n        if character == \"[\" {\n      \
    \      // push it onto the stack\n            stack.push(character)\n        }\n\
    \        // else\n        else {\n            // pop bracket off of stack\n  \
    \          // return false if no brackets are on stack\n            guard let\
    \ bracket = stack.pop() else { return false }\n            // return false if\
    \ bracket is not a closing bracket\n            if bracket != \"[\" { return false\
    \ }\n        }\n    }\n    // return true if stack is empty\n    // return false\
    \ if stack has brackets on it\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf6i2x2h5.swift:19:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpd73mf8y8/tmpd73mf8y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeca16c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeca13bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeca13bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeca13ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd73mf8y8                        0x000055d1889ff25b <unavailable> + 4699

    5    libc.so.6                          0x00002aeca18b0460 __libc_start_main +
    245

    6    tmpd73mf8y8                        0x000055d1889feee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var string = string\n    while string.count > 1 {\n \
    \       string = string.replacingOccurrences(of: \"[]\", with: \"\")\n    }\n\
    \    return string == \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpybo32dfg.swift:20:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        string = string.replacingOccurrences(of: \"\
    []\", with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
