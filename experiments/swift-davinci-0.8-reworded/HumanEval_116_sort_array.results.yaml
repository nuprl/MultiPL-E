language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var dic: [Int: [Int]] = [:]\n    var\
    \ maxNum = 0\n    for n in arr {\n        let num = String(n, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        dic[num] = (dic[num] ?? []) + [n]\n        maxNum\
    \ = max(maxNum, num)\n    }\n    var result: [Int] = []\n    for i in 0...maxNum\
    \ {\n        result += dic[i]?.sorted() ?? []\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = arr.sorted(by: { $0.hammingWeight\
    \ > $1.hammingWeight })\n    for i in 1..<sorted.count {\n        if sorted[i].hammingWeight\
    \ == sorted[i - 1].hammingWeight {\n            if sorted[i] < sorted[i - 1] {\n\
    \                sorted.swapAt(i, i - 1)\n            }\n        }\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6l0aak2t.swift:13:38: error: value of type 'Int' has no member\
    \ 'hammingWeight'\n    var sorted = arr.sorted(by: { $0.hammingWeight > $1.hammingWeight\
    \ })\n                                  ~~ ^~~~~~~~~~~~~\n/tmp/tmp6l0aak2t.swift:13:57:\
    \ error: value of type 'Int' has no member 'hammingWeight'\n    var sorted = arr.sorted(by:\
    \ { $0.hammingWeight > $1.hammingWeight })\n                                 \
    \                    ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort\
    \ {\n        let n1 = $0.nonzeroBitCount\n        let n2 = $1.nonzeroBitCount\n\
    \        return n1 < n2 || (n1 == n2 && $0 < $1)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpx5e7s_mg/tmpx5e7s_mg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad38fcd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad38f9c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad38f9c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad38f9c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5e7s_mg                        0x000055fbabe505ab <unavailable> + 5547

    5    libc.so.6                          0x00002ad38febd460 __libc_start_main +
    245

    6    tmpx5e7s_mg                        0x000055fbabe50049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { num1, num2\
    \ in\n        let ones1 = String(num1, radix: 2).filter { $0 == \"1\" }.count\n\
    \        let ones2 = String(num2, radix: 2).filter { $0 == \"1\" }.count\n   \
    \     return ones1 == ones2 ? num1 < num2 : ones1 < ones2\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  return arr.sorted(by: { a, b in\n  \
    \  let comp = compare_ones(a, b)\n    return comp != 0 ? comp < 0 : a < b\n  })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxat6x6a5.swift:14:16: error: cannot find 'compare_ones' in scope\n\
    \    let comp = compare_ones(a, b)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var answer: [Int] = []\n    var ones:\
    \ [Int] = []\n    var zeros: [Int] = []\n    var sorted: [Int] = []\n    var bin:\
    \ [Int] = []\n    for number in arr {\n        bin = decimalToBinary(number: number)\n\
    \        if bin.contains(1) {\n            ones.append(number)\n        } else\
    \ {\n            zeros.append(number)\n        }\n    }\n    answer = ones\n \
    \   sorted = sortedByNumberOfOnes(arr: answer)\n    answer = sorted\n    answer.append(contentsOf:\
    \ zeros)\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxugm8c5o.swift:19:15: error: cannot find 'decimalToBinary' in scope\n\
    \        bin = decimalToBinary(number: number)\n              ^~~~~~~~~~~~~~~\n\
    /tmp/tmpxugm8c5o.swift:27:14: error: cannot find 'sortedByNumberOfOnes' in scope\n\
    \    sorted = sortedByNumberOfOnes(arr: answer)\n             ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // Implement your solution here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_cosmkea/tmp_cosmkea.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46f4673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46f436ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46f436a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46f43697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cosmkea                        0x0000564dd09853e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b46f485f460 __libc_start_main +
    245

    6    tmp_cosmkea                        0x0000564dd0984fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        var binaryA = String(a, radix: 2)\n        var binaryB = String(b,\
    \ radix: 2)\n        if binaryA.count < binaryB.count {\n            for _ in\
    \ 0..<binaryB.count - binaryA.count {\n                binaryA = \"0\" + binaryA\n\
    \            }\n        } else if binaryA.count > binaryB.count {\n          \
    \  for _ in 0..<binaryA.count - binaryB.count {\n                binaryB = \"\
    0\" + binaryB\n            }\n        }\n        let onesA = binaryA.filter({\
    \ $0 == \"1\" }).count\n        let onesB = binaryB.filter({ $0 == \"1\" }).count\n\
    \        if onesA == onesB {\n            return a < b\n        }\n        return\
    \ onesA < onesB\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let lhsValue\
    \ = lhs ?? 0\n        let rhsValue = rhs ?? 0\n        let lhsBits = lhsValue.bitCount\n\
    \        let rhsBits = rhsValue.bitCount\n        return lhsBits == rhsBits ?\
    \ lhsValue < rhsValue : lhsBits < rhsBits\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpya90y3pf.swift:14:24: error: cannot find 'lhs' in scope\n     \
    \   let lhsValue = lhs ?? 0\n                       ^~~\n/tmp/tmpya90y3pf.swift:15:24:\
    \ error: cannot find 'rhs' in scope\n        let rhsValue = rhs ?? 0\n       \
    \                ^~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { Int(String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count) < Int(String($1, radix: 2).filter {\
    \ $0 == \"1\" }.count) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpba91v0yr/tmpba91v0yr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b795277dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7952474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7952474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79524737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba91v0yr                        0x000055cf75f73814 <unavailable> + 6164

    5    libc.so.6                          0x00002b7952969460 __libc_start_main +
    245

    6    tmpba91v0yr                        0x000055cf75f733f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        if $0.nonzeroBitCount\
    \ != $1.nonzeroBitCount {\n            return $0.nonzeroBitCount < $1.nonzeroBitCount\n\
    \        }\n        return $0 < $1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpkk0f3wox/tmpkk0f3wox.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae550f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae550c36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae550c36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae550c357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk0f3wox                        0x000055d41ae7c59b <unavailable> + 5531

    5    libc.so.6                          0x00002ae55112b460 __libc_start_main +
    245

    6    tmpkk0f3wox                        0x000055d41ae7c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        var aOnes = 0\n        var bOnes = 0\n        for c in a.description.characters\
    \ {\n            if c == \"1\" {\n                aOnes += 1\n            }\n\
    \        }\n        for c in b.description.characters {\n            if c == \"\
    1\" {\n                bOnes += 1\n            }\n        }\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2jc9yn2x.swift:16:32: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in a.description.characters {\n         \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2jc9yn2x.swift:21:32: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in b.description.characters {\n         \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr.sorted(by: { (lhs,\
    \ rhs) -> Bool in\n        let lhsOneCount = lhs.countBits(of: 1)\n        let\
    \ rhsOneCount = rhs.countBits(of: 1)\n        if lhsOneCount == rhsOneCount {\n\
    \            return lhs < rhs\n        }\n        return lhsOneCount < rhsOneCount\n\
    \    })\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5jl8zdbx.swift:14:31: error: value of type 'Int' has no member\
    \ 'countBits'\n        let lhsOneCount = lhs.countBits(of: 1)\n              \
    \            ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let onesCount1\
    \ = $0.onesCount\n        let onesCount2 = $1.onesCount\n        return onesCount1\
    \ < onesCount2 || (onesCount1 == onesCount2 && $0 < $1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp63td9_so.swift:14:29: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let onesCount1 = $0.onesCount\n                       \
    \  ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {a, b in\n \
    \       let aOne = a.numberOfOnes()\n        let bOne = b.numberOfOnes()\n   \
    \     if aOne == bOne {\n            return a < b\n        }\n        return aOne\
    \ < bOne\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnsyjfikb.swift:14:22: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOne = a.numberOfOnes()\n                   ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { a, b in\n\
    \        let countA = a.nonzeroBitCount\n        let countB = b.nonzeroBitCount\n\
    \        return countA == countB ? a < b : countA < countB\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp44g2hqez/tmp44g2hqez.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e3c0f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e3bdebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e3bdeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e3bdea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44g2hqez                        0x0000561d079c659b <unavailable> + 5531

    5    libc.so.6                          0x00002b4e3c2e0460 __libc_start_main +
    245

    6    tmp44g2hqez                        0x0000561d079c6039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var list = arr\n    list.sort { (a,\
    \ b) -> Bool in\n        let aCount = a.numOfOnes()\n        let bCount = b.numOfOnes()\n\
    \        if aCount == bCount {\n            return a < b\n        }\n        return\
    \ aCount < bCount\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpon6943no.swift:15:24: error: value of type 'Int' has no member\
    \ 'numOfOnes'\n        let aCount = a.numOfOnes()\n                     ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let (num1,\
    \ num2) = ($0, $1)\n        let (bit1, bit2) = (numberOfOnes(num1), numberOfOnes(num2))\n\
    \        return bit1 == bit2 ? num1 < num2 : bit1 < bit2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpydgr5bjv.swift:15:29: error: cannot find 'numberOfOnes' in scope\n\
    \        let (bit1, bit2) = (numberOfOnes(num1), numberOfOnes(num2))\n       \
    \                     ^~~~~~~~~~~~\n/tmp/tmpydgr5bjv.swift:15:49: error: cannot\
    \ find 'numberOfOnes' in scope\n        let (bit1, bit2) = (numberOfOnes(num1),\
    \ numberOfOnes(num2))\n                                                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted {\n      \
    \  if $0.nonzeroBitCount != $1.nonzeroBitCount {\n            return $0.nonzeroBitCount\
    \ < $1.nonzeroBitCount\n        }\n        return $0 < $1\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmph12u01qu/tmph12u01qu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb5d552c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb5d249b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb5d249988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb5d2487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph12u01qu                        0x000055febef0f59b <unavailable> + 5531

    5    libc.so.6                          0x00002afb5d73e460 __libc_start_main +
    245

    6    tmph12u01qu                        0x000055febef0f039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let ones = arr.map { $0.nonzeroBitCount\
    \ }\n    return zip(arr, ones).sorted { a, b in\n        if a.1 == b.1 {\n   \
    \         return a.0 < b.0\n        }\n        return a.1 < b.1\n    }.map { $0.0\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpnlgbmxk2/tmpnlgbmxk2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab78e3a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab78e09eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab78e09e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab78e09d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlgbmxk2                        0x000055bef5bdb69b <unavailable> + 5787

    5    libc.so.6                          0x00002ab78e593460 __libc_start_main +
    245

    6    tmpnlgbmxk2                        0x000055bef5bdb139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { (lhs, rhs)\
    \ -> Bool in\n        let l = lhs.nonzeroBitCount\n        let r = rhs.nonzeroBitCount\n\
    \        if l == r {\n            return lhs < rhs\n        }\n        return\
    \ l < r\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpwcatm1fd/tmpwcatm1fd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cf4c36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cf492db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cf492d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cf492c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcatm1fd                        0x000055f1f8faa59b <unavailable> + 5531

    5    libc.so.6                          0x00002b1cf4e22460 __libc_start_main +
    245

    6    tmpwcatm1fd                        0x000055f1f8faa039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var decimalNumbers = arr.map { ($0,\
    \ countDecimalOnes($0)) }\n    decimalNumbers.sort { (lhs, rhs) -> Bool in\n \
    \       if lhs.1 == rhs.1 {\n            return lhs.0 < rhs.0\n        }\n   \
    \     return lhs.1 < rhs.1\n    }\n    return decimalNumbers.map { $0.0 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpngnso4le.swift:13:41: error: cannot find 'countDecimalOnes' in\
    \ scope\n    var decimalNumbers = arr.map { ($0, countDecimalOnes($0)) }\n   \
    \                                     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        $0.onesCount\
    \ < $1.onesCount\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmplvluk2io.swift:14:12: error: value of type 'Int' has no member\
    \ 'onesCount'\n        $0.onesCount < $1.onesCount\n        ~~ ^~~~~~~~~\n/tmp/tmplvluk2io.swift:14:27:\
    \ error: value of type 'Int' has no member 'onesCount'\n        $0.onesCount <\
    \ $1.onesCount\n                       ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        var a\
    \ = $0\n        var b = $1\n        let aCount = countOnes(number: &a)\n     \
    \   let bCount = countOnes(number: &b)\n        if aCount == bCount {\n      \
    \      return $0 < $1\n        }\n        return aCount < bCount\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqwzwsnhp.swift:16:22: error: cannot find 'countOnes' in scope\n\
    \        let aCount = countOnes(number: &a)\n                     ^~~~~~~~~\n\
    /tmp/tmpqwzwsnhp.swift:17:22: error: cannot find 'countOnes' in scope\n      \
    \  let bCount = countOnes(number: &b)\n                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // your code here\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpms0c1dvs/tmpms0c1dvs.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd6a98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd678fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd678f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd678e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpms0c1dvs                        0x00005647950b73e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b1dd6c84460 __libc_start_main +
    245

    6    tmpms0c1dvs                        0x00005647950b6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var dict = Dictionary<Int, [Int]>()\n\
    \    for item in arr {\n        let key = String(item, radix: 2).filter { $0 ==\
    \ \"1\" }.count\n        if let values = dict[key] {\n            dict[key] =\
    \ values + [item]\n        } else {\n            dict[key] = [item]\n        }\n\
    \    }\n    var result = [Int]()\n    for key in dict.keys.sorted() {\n      \
    \  result += dict[key]!.sorted()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        String(lhs, radix: 2).count == String(rhs, radix: 2).count\
    \ ? lhs < rhs : String(lhs, radix: 2).count < String(rhs, radix: 2).count\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp1pa910w5/tmp1pa910w5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e37e36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e37b2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e37b2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e37b2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pa910w5                        0x000056409275e554 <unavailable> + 5460

    5    libc.so.6                          0x00002b0e38022460 __libc_start_main +
    245

    6    tmp1pa910w5                        0x000056409275e139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // nil-safety\n    guard arr.count\
    \ > 0 else { return [] }\n    \n    // As in the Kata, it must be implemented\
    \ like this:\n    // let binary: [String] = arr.map { String($0, radix: 2) }\n\
    \    let binary: [String] = arr.map { String($0, radix: 2) }\n    let ones: [Int]\
    \ = binary.map {\n        var n = 0\n        for c in $0 {\n            if c ==\
    \ \"1\" { n += 1 }\n        }\n        return n\n    }\n    // zip() can be used\
    \ to combine two Arrays.\n    let sortedArray = zip(arr, ones).sorted { $0.1 <\
    \ $1.1 }.map { $0.0 }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpbfvy35rj/tmpbfvy35rj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dbb7c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dbb4bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dbb4bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dbb4be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfvy35rj                        0x0000556b8bcaf834 <unavailable> + 6196

    5    libc.so.6                          0x00002b2dbb9b4460 __libc_start_main +
    245

    6    tmpbfvy35rj                        0x0000556b8bcaf419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted {\n      \
    \  ($0 & 1, $0) < ($1 & 1, $1)\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpr1p9bxxd/tmpr1p9bxxd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52e6ea5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52e6b9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52e6b9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52e6b9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1p9bxxd                        0x0000559c66920504 <unavailable> + 5380

    5    libc.so.6                          0x00002b52e7091460 __libc_start_main +
    245

    6    tmpr1p9bxxd                        0x0000559c669200e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { num1, num2 in\n\
    \        (num1.nonzeroBitCount, num1) < (num2.nonzeroBitCount, num2)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4oamjzvf/tmp4oamjzvf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46d5523c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46d521ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46d521a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46d52197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4oamjzvf                        0x0000564d05ebc64b <unavailable> + 5707

    5    libc.so.6                          0x00002b46d570f460 __libc_start_main +
    245

    6    tmp4oamjzvf                        0x0000564d05ebc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ aOnes = String($0, radix: 2).components(separatedBy: \"1\").count - 1\n    \
    \    let bOnes = String($1, radix: 2).components(separatedBy: \"1\").count - 1\n\
    \        return aOnes == bOnes ? $0 < $1 : aOnes < bOnes\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpze0xfesv.swift:14:42: error: value of type 'String' has no member\
    \ 'components'\n        let aOnes = String($0, radix: 2).components(separatedBy:\
    \ \"1\").count - 1\n                    ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { count_ones(value:\
    \ $0) < count_ones(value: $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp73bo_idd.swift:13:29: error: cannot find 'count_ones' in scope\n\
    \    return arr.sorted(by: { count_ones(value: $0) < count_ones(value: $1) })\n\
    \                            ^~~~~~~~~~\n/tmp/tmp73bo_idd.swift:13:53: error:\
    \ cannot find 'count_ones' in scope\n    return arr.sorted(by: { count_ones(value:\
    \ $0) < count_ones(value: $1) })\n                                           \
    \         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  //return arr.sorted(by: { abs($0) %\
    \ 2 == 1 ? $0.ones(digit: 1) > $1.ones(digit: 1) : $0 > $1})\n  return arr.sorted(by:\
    \ { (lhs, rhs) -> Bool in\n    if abs(lhs) % 2 == abs(rhs) % 2 {\n      return\
    \ abs(lhs) < abs(rhs)\n    } else {\n      return abs(lhs) % 2 == 1\n    }\n \
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmprqdpoj_m/tmprqdpoj_m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33d76a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33d739cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33d739c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33d739b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqdpoj_m                        0x000055978d90e5d4 <unavailable> + 5588

    5    libc.so.6                          0x00002b33d7891460 __libc_start_main +
    245

    6    tmprqdpoj_m                        0x000055978d90e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // sort the input array\n    let sortedArray\
    \ = arr.sorted { (left: Int, right: Int) -> Bool in\n        let leftToBinary\
    \ = String(left, radix: 2, uppercase: false)\n        let rightToBinary = String(right,\
    \ radix: 2, uppercase: false)\n        let totalOfOneLeft = leftToBinary.filter\
    \ { $0 == \"1\" }.count\n        let totalOfOneRight = rightToBinary.filter {\
    \ $0 == \"1\" }.count\n        return totalOfOneLeft < totalOfOneRight\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpmd85_upi/tmpmd85_upi.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58acc3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58ac933b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58ac933988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58ac9327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd85_upi                        0x0000559c08fe6714 <unavailable> + 5908

    5    libc.so.6                          0x00002b58ace28460 __libc_start_main +
    245

    6    tmpmd85_upi                        0x0000559c08fe62f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var array = arr\n    array.sort {\
    \ (i, j) -> Bool in\n        let bi = String(i, radix: 2).count\n        let bj\
    \ = String(j, radix: 2).count\n        if bi == bj {\n            return i < j\n\
    \        }\n        return bi < bj\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpsjgrb1po/tmpsjgrb1po.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4836ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b48065b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b48065988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b480647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjgrb1po                        0x000055ddcf65c564 <unavailable> + 5476

    5    libc.so.6                          0x00002b3b4855a460 __libc_start_main +
    245

    6    tmpsjgrb1po                        0x000055ddcf65c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // TODO\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpetodxpcf/tmpetodxpcf.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe0dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebddd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebddd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebddd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetodxpcf                        0x000055ed0b3083e4 <unavailable> + 5092

    5    libc.so.6                          0x00002aaebe2c8460 __libc_start_main +
    245

    6    tmpetodxpcf                        0x000055ed0b307fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (x, y) -> Bool\
    \ in\n        if x.nonzeroBitCount < y.nonzeroBitCount {\n            return true\n\
    \        } else if x.nonzeroBitCount > y.nonzeroBitCount {\n            return\
    \ false\n        } else {\n            return x < y\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsihr4y8g/tmpsihr4y8g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c16932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c16629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c16629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c166287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsihr4y8g                        0x0000556d085fc59b <unavailable> + 5531

    5    libc.so.6                          0x00002b8c16b1e460 __libc_start_main +
    245

    6    tmpsihr4y8g                        0x0000556d085fc039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let arr = arr.map { (num: Int) ->\
    \ (Int, String) in\n        return (num, String(num, radix: 2))\n    }.sorted\
    \ { (left: (Int, String), right: (Int, String)) -> Bool in\n        if left.1.count\
    \ == right.1.count {\n            return left.0 < right.0\n        }\n       \
    \ return left.1.count < right.1.count\n    }\n    return arr.map { (tuple: (Int,\
    \ String)) -> Int in\n        return tuple.0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_d_6_29d/tmp_d_6_29d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae561fe5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae561cdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae561cdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae561cdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_d_6_29d                        0x000055a49c3e8604 <unavailable> + 5636

    5    libc.so.6                          0x00002ae5621d1460 __libc_start_main +
    245

    6    tmp_d_6_29d                        0x000055a49c3e81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        if $0.nonzeroBitCount\
    \ == $1.nonzeroBitCount {\n            return $0 < $1\n        }\n        return\
    \ $0.nonzeroBitCount < $1.nonzeroBitCount\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv5b1jed9/tmpv5b1jed9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1c4bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c1c1b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c1c1b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c1c1b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv5b1jed9                        0x00005650dc1d759b <unavailable> + 5531

    5    libc.so.6                          0x00002b3c1c6a9460 __libc_start_main +
    245

    6    tmpv5b1jed9                        0x00005650dc1d7039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    \n    guard arr.count > 1 else { return\
    \ arr }\n    \n    return arr.sorted { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        \n\
    \        return aBinary.countOf(substring: \"1\") == bBinary.countOf(substring:\
    \ \"1\") ? a < b : aBinary.countOf(substring: \"1\") < bBinary.countOf(substring:\
    \ \"1\")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvjomwll7.swift:20:24: error: value of type 'String' has no member\
    \ 'countOf'\n        return aBinary.countOf(substring: \"1\") == bBinary.countOf(substring:\
    \ \"1\") ? a < b : aBinary.countOf(substring: \"1\") < bBinary.countOf(substring:\
    \ \"1\")\n               ~~~~~~~ ^~~~~~~\n/tmp/tmpvjomwll7.swift:20:59: error:\
    \ value of type 'String' has no member 'countOf'\n        return aBinary.countOf(substring:\
    \ \"1\") == bBinary.countOf(substring: \"1\") ? a < b : aBinary.countOf(substring:\
    \ \"1\") < bBinary.countOf(substring: \"1\")\n                               \
    \                   ~~~~~~~ ^~~~~~~\n/tmp/tmpvjomwll7.swift:20:101: error: value\
    \ of type 'String' has no member 'countOf'\n        return aBinary.countOf(substring:\
    \ \"1\") == bBinary.countOf(substring: \"1\") ? a < b : aBinary.countOf(substring:\
    \ \"1\") < bBinary.countOf(substring: \"1\")\n                               \
    \                                                             ~~~~~~~ ^~~~~~~\n\
    /tmp/tmpvjomwll7.swift:20:135: error: value of type 'String' has no member 'countOf'\n\
    \        return aBinary.countOf(substring: \"1\") == bBinary.countOf(substring:\
    \ \"1\") ? a < b : aBinary.countOf(substring: \"1\") < bBinary.countOf(substring:\
    \ \"1\")\n                                                                   \
    \                                                           ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var answer = arr\n    for i in 0..<answer.count\
    \ {\n        for j in 0..<answer.count - 1 {\n            if (answer[j].onesCount()\
    \ > answer[j + 1].onesCount()) {\n                let tmp = answer[j]\n      \
    \          answer[j] = answer[j + 1]\n                answer[j + 1] = tmp\n  \
    \          } else if (answer[j].onesCount() == answer[j + 1].onesCount()) {\n\
    \                if (answer[j] > answer[j + 1]) {\n                    let tmp\
    \ = answer[j]\n                    answer[j] = answer[j + 1]\n               \
    \     answer[j + 1] = tmp\n                }\n            }\n        }\n    }\n\
    \    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4j_k579m.swift:16:55: error: value of type 'Int' has no member\
    \ 'onesCount'\n            if (answer[j].onesCount() > answer[j + 1].onesCount())\
    \ {\n                                        ~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp4j_k579m.swift:16:27:\
    \ error: value of type 'Int' has no member 'onesCount'\n            if (answer[j].onesCount()\
    \ > answer[j + 1].onesCount()) {\n                ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp4j_k579m.swift:20:63:\
    \ error: value of type 'Int' has no member 'onesCount'\n            } else if\
    \ (answer[j].onesCount() == answer[j + 1].onesCount()) {\n                   \
    \                             ~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp4j_k579m.swift:20:34:\
    \ error: value of type 'Int' has no member 'onesCount'\n            } else if\
    \ (answer[j].onesCount() == answer[j + 1].onesCount()) {\n                   \
    \    ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { binaryCount(n:\
    \ $0) == binaryCount(n: $1) ? $0 < $1 : binaryCount(n: $0) < binaryCount(n: $1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnysg_6_7.swift:13:29: error: cannot find 'binaryCount' in scope\n\
    \    return arr.sorted(by: { binaryCount(n: $0) == binaryCount(n: $1) ? $0 < $1\
    \ : binaryCount(n: $0) < binaryCount(n: $1) })\n                            ^~~~~~~~~~~\n\
    /tmp/tmpnysg_6_7.swift:13:51: error: cannot find 'binaryCount' in scope\n    return\
    \ arr.sorted(by: { binaryCount(n: $0) == binaryCount(n: $1) ? $0 < $1 : binaryCount(n:\
    \ $0) < binaryCount(n: $1) })\n                                              \
    \    ^~~~~~~~~~~\n/tmp/tmpnysg_6_7.swift:13:82: error: cannot find 'binaryCount'\
    \ in scope\n    return arr.sorted(by: { binaryCount(n: $0) == binaryCount(n: $1)\
    \ ? $0 < $1 : binaryCount(n: $0) < binaryCount(n: $1) })\n                   \
    \                                                              ^~~~~~~~~~~\n/tmp/tmpnysg_6_7.swift:13:103:\
    \ error: cannot find 'binaryCount' in scope\n    return arr.sorted(by: { binaryCount(n:\
    \ $0) == binaryCount(n: $1) ? $0 < $1 : binaryCount(n: $0) < binaryCount(n: $1)\
    \ })\n                                                                       \
    \                               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        numA,\
    \ numB in\n        let binA = String(numA, radix: 2)\n        let binB = String(numB,\
    \ radix: 2)\n        let onesA = binA.filter({ $0 == \"1\" }).count\n        let\
    \ onesB = binB.filter({ $0 == \"1\" }).count\n        return onesA == onesB ?\
    \ numA < numB : onesA < onesB\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aValue = a.nonzeroBitCount\n        let bValue = b.nonzeroBitCount\n\
    \        if aValue != bValue {\n            return aValue < bValue\n        }\n\
    \        return a < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmph48me7e9/tmph48me7e9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c0a0f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c09defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c09def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c09dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph48me7e9                        0x0000565494d2459b <unavailable> + 5531

    5    libc.so.6                          0x00002b2c0a2e4460 __libc_start_main +
    245

    6    tmph48me7e9                        0x0000565494d24039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { $0.decimal\
    \ < $1.decimal })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpi97cs594.swift:13:32: error: value of type 'Int' has no member\
    \ 'decimal'\n    return arr.sorted(by: { $0.decimal < $1.decimal })\n        \
    \                    ~~ ^~~~~~~\n/tmp/tmpi97cs594.swift:13:45: error: value of\
    \ type 'Int' has no member 'decimal'\n    return arr.sorted(by: { $0.decimal <\
    \ $1.decimal })\n                                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sortedArr = arr.sorted {\n   \
    \     let numberOfBits = $0.nonzeroBitCount\n        let numberOfBits2 = $1.nonzeroBitCount\n\
    \        return numberOfBits == numberOfBits2 ? $0 < $1 : numberOfBits < numberOfBits2\n\
    \    }\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsreoo4r3/tmpsreoo4r3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7c9d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7c9a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7c9a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7c9a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsreoo4r3                        0x0000555fae9ed59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab7c9f0e460 __libc_start_main +
    245

    6    tmpsreoo4r3                        0x0000555fae9ed039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        if a.onesCount == b.onesCount {\n            return a < b\n    \
    \    }\n        return a.onesCount < b.onesCount\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbyrwhkg_.swift:14:14: error: value of type 'Int' has no member\
    \ 'onesCount'\n        if a.onesCount == b.onesCount {\n           ~ ^~~~~~~~~\n\
    /tmp/tmpbyrwhkg_.swift:14:29: error: value of type 'Int' has no member 'onesCount'\n\
    \        if a.onesCount == b.onesCount {\n                          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        if a.nonzeroBitCount == b.nonzeroBitCount {\n            return\
    \ a < b\n        }\n        return a.nonzeroBitCount < b.nonzeroBitCount\n   \
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe0dj_bnx/tmpe0dj_bnx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b98659c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b98350b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b98350988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b9834f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0dj_bnx                        0x000056319624059b <unavailable> + 5531

    5    libc.so.6                          0x00002b8b98845460 __libc_start_main +
    245

    6    tmpe0dj_bnx                        0x0000563196240039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let digits = arr.map { convert_to_binary_digits($0)\
    \ }\n    return zip(arr, digits).sorted { (i1, i2) in\n        if i1.1.count ==\
    \ i2.1.count {\n            return i1.0 < i2.0\n        }\n        return i1.1.count\
    \ < i2.1.count\n    }.map { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1dw9miu2.swift:13:28: error: cannot find 'convert_to_binary_digits'\
    \ in scope\n    let digits = arr.map { convert_to_binary_digits($0) }\n      \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1dw9miu2.swift:14:12:\
    \ error: generic parameter 'Sequence2' could not be inferred\n    return zip(arr,\
    \ digits).sorted { (i1, i2) in\n           ^\nSwift.zip:1:24: note: in call to\
    \ function 'zip'\n@inlinable public func zip<Sequence1, Sequence2>(_ sequence1:\
    \ Sequence1, _ sequence2: Sequence2) -> Zip2Sequence<Sequence1, Sequence2> where\
    \ Sequence1 : Sequence, Sequence2 : Sequence\n                       ^\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var arr = arr\n    arr.sortInPlace\
    \ { lhs, rhs in\n        lhs.onesCount != rhs.onesCount ? lhs.onesCount < rhs.onesCount\
    \ : lhs < rhs\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp74tweo15.swift:14:9: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    arr.sortInPlace { lhs, rhs in\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979781
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {$0.nonzeros()\
    \ < $1.nonzeros()})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpz1r2eoz7.swift:13:31: error: value of type 'Int' has no member\
    \ 'nonzeros'\n    return arr.sorted(by: {$0.nonzeros() < $1.nonzeros()})\n   \
    \                        ~~ ^~~~~~~~\n/tmp/tmpz1r2eoz7.swift:13:47: error: value\
    \ of type 'Int' has no member 'nonzeros'\n    return arr.sorted(by: {$0.nonzeros()\
    \ < $1.nonzeros()})\n                                           ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    \n    let sortedDict = arr.map{ ($0,\
    \ String($0, radix: 2).components(separatedBy: \"1\").count - 1) }.sorted {\n\
    \        return ($0.1 < $1.1) || (($0.1 == $1.1) && ($0.0 < $1.0))\n    }\n  \
    \  \n    return sortedDict.map{ $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgl5pd85u.swift:14:57: error: value of type 'String' has no member\
    \ 'components'\n    let sortedDict = arr.map{ ($0, String($0, radix: 2).components(separatedBy:\
    \ \"1\").count - 1) }.sorted {\n                                   ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        var aOnes = 0\n        var bOnes = 0\n        for i in a...1\
    \ {\n            aOnes += i\n        }\n        for i in b...1 {\n           \
    \ bOnes += i\n        }\n        return aOnes > bOnes\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f9143c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f8e3a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac4f8e3a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac4f8e3a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac4f8e39bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpog2mojxg                        0x0000563a870a71e0 <unavailable> + 8672

    6    libswiftCore.so                    0x00002ac4f8f5bc90 MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 770

    7    libswiftCore.so                    0x00002ac4f8f5c110 MutableCollection<>._insertionSort(within:by:)
    + 356

    8    libswiftCore.so                    0x00002ac4f8f5ad30 UnsafeMutableBufferPointer._stableSortImpl(by:)
    + 319

    9    libswiftCore.so                    0x00002ac4f8f5ad15 <unavailable> + 2616597

    10   libswiftCore.so                    0x00002ac4f908065a <unavailable> + 3819098

    11   libswiftCore.so                    0x00002ac4f8e6f720 ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)
    + 130

    12   libswiftCore.so                    0x00002ac4f8e6f70f <unavailable> + 1652495

    13   libswiftCore.so                    0x00002ac4f8f5a460 MutableCollection<>.sort(by:)
    + 771

    14   libswiftCore.so                    0x00002ac4f8f5a370 Sequence.sorted(by:)
    + 193

    15   tmpog2mojxg                        0x0000563a870a7020 <unavailable> + 8224

    16   tmpog2mojxg                        0x0000563a870a64f4 <unavailable> + 5364

    17   libc.so.6                          0x00002ac4f932f460 __libc_start_main +
    245

    18   tmpog2mojxg                        0x0000563a870a61c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var arr = arr\n    arr.sort {\n  \
    \      let a = $0\n        let b = $1\n        var result = false\n        if\
    \ a > 0 && b > 0 {\n            result = countOne(x: a) < countOne(x: b)\n   \
    \     } else if a < 0 && b < 0 {\n            result = countOne(x: a) > countOne(x:\
    \ b)\n        } else if a > 0 && b < 0 {\n            result = true\n        }\
    \ else if a < 0 && b > 0 {\n            result = false\n        } else if a ==\
    \ 0 && b > 0 {\n            result = true\n        } else if a > 0 && b == 0 {\n\
    \            result = false\n        } else if a == 0 && b < 0 {\n           \
    \ result = false\n        } else if a < 0 && b == 0 {\n            result = true\n\
    \        }\n        return result\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqm64_q8r.swift:19:22: error: cannot find 'countOne' in scope\n\
    \            result = countOne(x: a) < countOne(x: b)\n                     ^~~~~~~~\n\
    /tmp/tmpqm64_q8r.swift:19:39: error: cannot find 'countOne' in scope\n       \
    \     result = countOne(x: a) < countOne(x: b)\n                             \
    \         ^~~~~~~~\n/tmp/tmpqm64_q8r.swift:21:22: error: cannot find 'countOne'\
    \ in scope\n            result = countOne(x: a) > countOne(x: b)\n           \
    \          ^~~~~~~~\n/tmp/tmpqm64_q8r.swift:21:39: error: cannot find 'countOne'\
    \ in scope\n            result = countOne(x: a) > countOne(x: b)\n           \
    \                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBits = a.nonzeroBitCount\n        let bBits = b.nonzeroBitCount\n\
    \        if aBits != bBits {\n            return aBits < bBits\n        }\n  \
    \      return a < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpgc_zy3i0/tmpgc_zy3i0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65c3162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65c2e59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65c2e59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65c2e587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgc_zy3i0                        0x000055df9196b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b65c334e460 __libc_start_main +
    245

    6    tmpgc_zy3i0                        0x000055df9196b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    arr.sorted { (a, b) -> Bool in\n \
    \       let (aOne, aZero) = countOnes(a)\n        let (bOne, bZero) = countOnes(b)\n\
    \        if aOne == bOne {\n            return a < b\n        }\n        return\
    \ aOne < bOne\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4tbjac87.swift:14:29: error: cannot find 'countOnes' in scope\n\
    \        let (aOne, aZero) = countOnes(a)\n                            ^~~~~~~~~\n\
    /tmp/tmp4tbjac87.swift:15:29: error: cannot find 'countOnes' in scope\n      \
    \  let (bOne, bZero) = countOnes(b)\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    return arr.sorted { (a, b) -> Bool in\n        guard a > 0, b > 0\
    \ else { return a < b }\n        return binary(a) == binary(b) ? a < b : binary(a)\
    \ < binary(b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphvz_l43q.swift:16:16: error: cannot find 'binary' in scope\n  \
    \      return binary(a) == binary(b) ? a < b : binary(a) < binary(b)\n       \
    \        ^~~~~~\n/tmp/tmphvz_l43q.swift:16:29: error: cannot find 'binary' in\
    \ scope\n        return binary(a) == binary(b) ? a < b : binary(a) < binary(b)\n\
    \                            ^~~~~~\n/tmp/tmphvz_l43q.swift:16:49: error: cannot\
    \ find 'binary' in scope\n        return binary(a) == binary(b) ? a < b : binary(a)\
    \ < binary(b)\n                                                ^~~~~~\n/tmp/tmphvz_l43q.swift:16:61:\
    \ error: cannot find 'binary' in scope\n        return binary(a) == binary(b)\
    \ ? a < b : binary(a) < binary(b)\n                                          \
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { ($0.numberOfOnes(),\
    \ $0) < ($1.numberOfOnes(), $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu9lx7sxu.swift:13:33: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n    return arr.sorted(by: { ($0.numberOfOnes(), $0) < ($1.numberOfOnes(),\
    \ $1) })\n                             ~~ ^~~~~~~~~~~~\n/tmp/tmpu9lx7sxu.swift:13:59:\
    \ error: value of type 'Int' has no member 'numberOfOnes'\n    return arr.sorted(by:\
    \ { ($0.numberOfOnes(), $0) < ($1.numberOfOnes(), $1) })\n                   \
    \                                    ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var ones = [[Int]]()\n    arr.forEach\
    \ {\n        let binaryString = String($0, radix: 2)\n        let binaryArray\
    \ = Array(binaryString)\n        var num = 0\n        binaryArray.forEach {\n\
    \            if $0 == \"1\" {\n                num += 1\n            }\n     \
    \   }\n        if ones.count > num {\n            ones[num].append($0)\n     \
    \   } else {\n            ones.append([$0])\n        }\n    }\n    var sorted\
    \ = [Int]()\n    ones.forEach {\n        let sortedValue = $0.sorted(by: { $0\
    \ < $1 })\n        sorted.append(contentsOf: sortedValue)\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmph5lf8lqh/tmph5lf8lqh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2909339c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2909030b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2909030988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b290902f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5lf8lqh                        0x0000557d3f7f5984 <unavailable> + 6532

    5    libc.so.6                          0x00002b2909525460 __libc_start_main +
    245

    6    tmph5lf8lqh                        0x0000557d3f7f5569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted: [Int] = arr.sorted { (num1,\
    \ num2) -> Bool in\n        let binary1 = String(num1, radix: 2)\n        let\
    \ binary2 = String(num2, radix: 2)\n        if binary1.characters.filter({ $0\
    \ == \"1\" }).count == binary2.characters.filter({ $0 == \"1\" }).count {\n  \
    \          return num1 < num2\n        }\n        return binary1.characters.filter({\
    \ $0 == \"1\" }).count < binary2.characters.filter({ $0 == \"1\" }).count\n  \
    \  }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmbwvkk2y.swift:16:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        if binary1.characters.filter({ $0 == \"1\" }).count\
    \ == binary2.characters.filter({ $0 == \"1\" }).count {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmbwvkk2y.swift:16:70:\
    \ error: 'characters' is unavailable: Please use String directly\n        if binary1.characters.filter({\
    \ $0 == \"1\" }).count == binary2.characters.filter({ $0 == \"1\" }).count {\n\
    \                                                                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmbwvkk2y.swift:19:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ binary1.characters.filter({ $0 == \"1\" }).count < binary2.characters.filter({\
    \ $0 == \"1\" }).count\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmbwvkk2y.swift:19:73: error: 'characters'\
    \ is unavailable: Please use String directly\n        return binary1.characters.filter({\
    \ $0 == \"1\" }).count < binary2.characters.filter({ $0 == \"1\" }).count\n  \
    \                                                                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var newArr = arr.sorted(by: { $0 >\
    \ $1 })\n    var onesArr = [Int]()\n    for num in newArr {\n        let numberOfOnes\
    \ = num.bin.filter { $0 == \"1\" }.count\n        onesArr.append(numberOfOnes)\n\
    \    }\n    for i in 0..<newArr.count {\n        for j in 0..<newArr.count - 1\
    \ {\n            if onesArr[j] == onesArr[j + 1] {\n                if newArr[j]\
    \ > newArr[j + 1] {\n                    let tmp = newArr[j]\n               \
    \     newArr[j] = newArr[j + 1]\n                    newArr[j + 1] = tmp\n   \
    \             }\n            }\n        }\n    }\n    return newArr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqstjldmg.swift:16:32: error: value of type 'Int' has no member\
    \ 'bin'\n        let numberOfOnes = num.bin.filter { $0 == \"1\" }.count\n   \
    \                        ~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort\
    \ { (a, b) -> Bool in\n        if onesInBinary(a) == onesInBinary(b) {\n     \
    \       return a < b\n        }\n        return onesInBinary(a) < onesInBinary(b)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvwagv0i8.swift:15:12: error: cannot find 'onesInBinary' in scope\n\
    \        if onesInBinary(a) == onesInBinary(b) {\n           ^~~~~~~~~~~~\n/tmp/tmpvwagv0i8.swift:15:31:\
    \ error: cannot find 'onesInBinary' in scope\n        if onesInBinary(a) == onesInBinary(b)\
    \ {\n                              ^~~~~~~~~~~~\n/tmp/tmpvwagv0i8.swift:18:16:\
    \ error: cannot find 'onesInBinary' in scope\n        return onesInBinary(a) <\
    \ onesInBinary(b)\n               ^~~~~~~~~~~~\n/tmp/tmpvwagv0i8.swift:18:34:\
    \ error: cannot find 'onesInBinary' in scope\n        return onesInBinary(a) <\
    \ onesInBinary(b)\n                                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var newArr = arr.map { (number) ->\
    \ (number: Int, binary: String) in\n        return (number, String(number, radix:\
    \ 2))\n    }\n    newArr.sort { (obj1, obj2) -> Bool in\n        if obj1.binary.filter({\
    \ $0 == \"1\" }).count == obj2.binary.filter({ $0 == \"1\" }).count {\n      \
    \      return obj1.number < obj2.number\n        }\n        return obj1.binary.filter({\
    \ $0 == \"1\" }).count < obj2.binary.filter({ $0 == \"1\" }).count\n    }\n  \
    \  return newArr.map { $0.number }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (first: Int,\
    \ second: Int) -> Bool in\n        let firstOnes = String(first, radix: 2).filter({\
    \ $0 == \"1\" }).count\n        let secondOnes = String(second, radix: 2).filter({\
    \ $0 == \"1\" }).count\n        if firstOnes == secondOnes {\n            return\
    \ first < second\n        }\n        return firstOnes < secondOnes\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var oneCounts = [Int: [Int]]()\n \
    \   for a in arr {\n        let aString = String(a, radix: 2)\n        var numOnes\
    \ = 0\n        for c in aString {\n            if c == \"1\" {\n             \
    \   numOnes += 1\n            }\n        }\n        if oneCounts[numOnes] == nil\
    \ {\n            oneCounts[numOnes] = [a]\n        } else {\n            oneCounts[numOnes]!.append(a)\n\
    \        }\n    }\n    var result = [Int]()\n    for i in 0...arr.count {\n  \
    \      if let a = oneCounts[i] {\n            result.append(contentsOf: a.sorted())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    arr.sorted {\n        let a = $0\n\
    \        let b = $1\n        let (aBits, bBits) = (bits(n: a), bits(n: b))\n \
    \       if aBits == bBits {\n            return a < b\n        }\n        return\
    \ aBits < bBits\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpofrkjdj4.swift:16:31: error: cannot find 'bits' in scope\n    \
    \    let (aBits, bBits) = (bits(n: a), bits(n: b))\n                         \
    \     ^~~~\n/tmp/tmpofrkjdj4.swift:16:43: error: cannot find 'bits' in scope\n\
    \        let (aBits, bBits) = (bits(n: a), bits(n: b))\n                     \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.ones\n        let rhsOnes = rhs.ones\n  \
    \      if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n    \
    \    return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5bbeh1q_.swift:14:27: error: value of type 'Int' has no member\
    \ 'ones'\n        let lhsOnes = lhs.ones\n                      ~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var d = Dictionary<Int, [Int]>()\n\
    \    for i in arr {\n        let c = String(i, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        if d[c] == nil {\n            d[c] = [i]\n        } else {\n\
    \            d[c]!.append(i)\n        }\n    }\n    return d.keys.sorted().flatMap\
    \ {\n        d[$0]!.sorted()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { $0.binaryDescription.filter({\
    \ $0 == \"1\" }).count == $1.binaryDescription.filter({ $0 == \"1\" }).count ?\
    \ $0 < $1 : $0.binaryDescription.filter({ $0 == \"1\" }).count < $1.binaryDescription.filter({\
    \ $0 == \"1\" }).count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp49pr8war.swift:13:32: error: value of type 'Int' has no member\
    \ 'binaryDescription'\n    return arr.sorted(by: { $0.binaryDescription.filter({\
    \ $0 == \"1\" }).count == $1.binaryDescription.filter({ $0 == \"1\" }).count ?\
    \ $0 < $1 : $0.binaryDescription.filter({ $0 == \"1\" }).count < $1.binaryDescription.filter({\
    \ $0 == \"1\" }).count })\n                            ~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp49pr8war.swift:13:84: error: value of type 'Int' has no member 'binaryDescription'\n\
    \    return arr.sorted(by: { $0.binaryDescription.filter({ $0 == \"1\" }).count\
    \ == $1.binaryDescription.filter({ $0 == \"1\" }).count ? $0 < $1 : $0.binaryDescription.filter({\
    \ $0 == \"1\" }).count < $1.binaryDescription.filter({ $0 == \"1\" }).count })\n\
    \                                                                            \
    \    ~~ ^~~~~~~~~~~~~~~~~\n/tmp/tmp49pr8war.swift:13:145: error: value of type\
    \ 'Int' has no member 'binaryDescription'\n    return arr.sorted(by: { $0.binaryDescription.filter({\
    \ $0 == \"1\" }).count == $1.binaryDescription.filter({ $0 == \"1\" }).count ?\
    \ $0 < $1 : $0.binaryDescription.filter({ $0 == \"1\" }).count < $1.binaryDescription.filter({\
    \ $0 == \"1\" }).count })\n                                                  \
    \                                                                            \
    \               ~~ ^~~~~~~~~~~~~~~~~\n/tmp/tmp49pr8war.swift:13:196: error: value\
    \ of type 'Int' has no member 'binaryDescription'\n    return arr.sorted(by: {\
    \ $0.binaryDescription.filter({ $0 == \"1\" }).count == $1.binaryDescription.filter({\
    \ $0 == \"1\" }).count ? $0 < $1 : $0.binaryDescription.filter({ $0 == \"1\" }).count\
    \ < $1.binaryDescription.filter({ $0 == \"1\" }).count })\n                  \
    \                                                                            \
    \                                                                            \
    \                      ~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979763
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).replacingOccurrences(of: \"0\", with: \"\")\n       \
    \ let b = String($1, radix: 2).replacingOccurrences(of: \"0\", with: \"\")\n \
    \       if a.count == b.count {\n            return $0 < $1\n        }\n     \
    \   return a.count < b.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpry7orit7.swift:14:38: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        let a = String($0, radix: 2).replacingOccurrences(of:\
    \ \"0\", with: \"\")\n                ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    let sortedArr = arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        if aOnes != bOnes {\n      \
    \      return aOnes < bOnes\n        }\n        return a < b\n    }\n    return\
    \ sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        numOfOnes($0)\
    \ == numOfOnes($1) ? $0 < $1 : numOfOnes($0) < numOfOnes($1)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0z0nhnzu.swift:14:9: error: cannot find 'numOfOnes' in scope\n\
    \        numOfOnes($0) == numOfOnes($1) ? $0 < $1 : numOfOnes($0) < numOfOnes($1)\n\
    \        ^~~~~~~~~\n/tmp/tmp0z0nhnzu.swift:14:26: error: cannot find 'numOfOnes'\
    \ in scope\n        numOfOnes($0) == numOfOnes($1) ? $0 < $1 : numOfOnes($0) <\
    \ numOfOnes($1)\n                         ^~~~~~~~~\n/tmp/tmp0z0nhnzu.swift:14:52:\
    \ error: cannot find 'numOfOnes' in scope\n        numOfOnes($0) == numOfOnes($1)\
    \ ? $0 < $1 : numOfOnes($0) < numOfOnes($1)\n                                \
    \                   ^~~~~~~~~\n/tmp/tmp0z0nhnzu.swift:14:68: error: cannot find\
    \ 'numOfOnes' in scope\n        numOfOnes($0) == numOfOnes($1) ? $0 < $1 : numOfOnes($0)\
    \ < numOfOnes($1)\n                                                          \
    \         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var nonNeg = arr.filter { $0 >= 0\
    \ }\n    var neg = arr.filter { $0 < 0 }\n    nonNeg.sort { a, b in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       let a1Count = aBinary.reduce(0) { $1 == \"1\" ? $0 + 1 : $0 }\n      \
    \  let b1Count = bBinary.reduce(0) { $1 == \"1\" ? $0 + 1 : $0 }\n        if a1Count\
    \ != b1Count {\n            return a1Count < b1Count\n        }\n        return\
    \ a < b\n    }\n    return neg + nonNeg\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9fz3zfj9/tmp9fz3zfj9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa34e5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa34b51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa34b51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa34b507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fz3zfj9                        0x000055cc49ede94b <unavailable> + 6475

    5    libc.so.6                          0x00002afa35046460 __libc_start_main +
    245

    6    tmp9fz3zfj9                        0x000055cc49ede3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  return arr.sorted {\n    let onesA =\
    \ $0.onesCount\n    let onesB = $1.onesCount\n    return onesA == onesB ? $0 <\
    \ $1 : onesA < onesB\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjsxmbaig.swift:14:20: error: value of type 'Int' has no member\
    \ 'onesCount'\n    let onesA = $0.onesCount\n                ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let numberOfOnes\
    \ = ($0).countOnes()\n        let numberOfOnes2 = ($1).countOnes()\n        if\
    \ numberOfOnes == numberOfOnes2 {\n            return $0 < $1\n        }\n   \
    \     return numberOfOnes < numberOfOnes2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphsr2j374.swift:14:33: error: value of type 'Int' has no member\
    \ 'countOnes'\n        let numberOfOnes = ($0).countOnes()\n                 \
    \          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        var x = a\n        var y = b\n        var ax = 0\n        var\
    \ bx = 0\n        while x > 0 {\n            if x % 2 != 0 {\n               \
    \ ax += 1\n            }\n            x /= 2\n        }\n        while y > 0 {\n\
    \            if y % 2 != 0 {\n                bx += 1\n            }\n       \
    \     y /= 2\n        }\n        if ax == bx {\n            return a < b\n   \
    \     }\n        return ax < bx\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpav4r_0ic/tmpav4r_0ic.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b49706c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b493fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b493fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b493fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpav4r_0ic                        0x000055afe330363b <unavailable> + 5691

    5    libc.so.6                          0x00002b3b498f2460 __libc_start_main +
    245

    6    tmpav4r_0ic                        0x000055afe33030d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (first, second)\
    \ -> Bool in\n        let firstCount = first.oneCount()\n        let secondCount\
    \ = second.oneCount()\n        return firstCount == secondCount ? first < second\
    \ : firstCount < secondCount\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxkefzxzq.swift:14:32: error: value of type 'Int' has no member\
    \ 'oneCount'\n        let firstCount = first.oneCount()\n                    \
    \     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted: [(Int, Int)] = arr.map\
    \ { return ($0, $0.nonzeroBitCount) }.sorted { $0.1 == $1.1 ? $0.0 < $1.0 : $0.1\
    \ < $1.1 }\n    return sorted.map { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpwyz2wweq/tmpwyz2wweq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78bc512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78bc209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78bc209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78bc2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwyz2wweq                        0x00005638e00d264b <unavailable> + 5707

    5    libc.so.6                          0x00002b78bc6fe460 __libc_start_main +
    245

    6    tmpwyz2wweq                        0x00005638e00d20e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  let sortedOnesBinary = arr.sorted(by:\
    \ { count_ones(a: $0) < count_ones(a: $1) })\n  return sortedOnesBinary.sorted(by:\
    \ {$0 < $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpeabtm53t.swift:13:43: error: cannot find 'count_ones' in scope\n\
    \  let sortedOnesBinary = arr.sorted(by: { count_ones(a: $0) < count_ones(a: $1)\
    \ })\n                                          ^~~~~~~~~~\n/tmp/tmpeabtm53t.swift:13:63:\
    \ error: cannot find 'count_ones' in scope\n  let sortedOnesBinary = arr.sorted(by:\
    \ { count_ones(a: $0) < count_ones(a: $1) })\n                               \
    \                               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  var array = arr\n  array.sort(by: {\
    \ (lhs, rhs) -> Bool in\n    var lhsBinary = lhs\n    var rhsBinary = rhs\n  \
    \  var lhsOnes = 0\n    var rhsOnes = 0\n    while lhsBinary > 0 {\n      if lhsBinary\
    \ % 2 == 1 {\n        lhsOnes += 1\n      }\n      lhsBinary /= 2\n    }\n   \
    \ while rhsBinary > 0 {\n      if rhsBinary % 2 == 1 {\n        rhsOnes += 1\n\
    \      }\n      rhsBinary /= 2\n    }\n    if lhsOnes == rhsOnes {\n      return\
    \ lhs < rhs\n    }\n    return lhsOnes < rhsOnes\n  })\n  return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp8kjo8xrh/tmp8kjo8xrh.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b58f4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b58c44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b58c44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b58c437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kjo8xrh                        0x000055ddc622864b <unavailable> + 5707

    5    libc.so.6                          0x00002b4b59139460 __libc_start_main +
    245

    6    tmp8kjo8xrh                        0x000055ddc62280e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  return arr.sorted(by: {\n    (a: Int,\
    \ b: Int) -> Bool in\n    let aOnes = onesInBinaryString(a)\n    let bOnes = onesInBinaryString(b)\n\
    \    if aOnes < bOnes {\n      return true\n    } else if aOnes > bOnes {\n  \
    \    return false\n    } else {\n      return a < b\n    }\n  })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptapc040k.swift:15:17: error: cannot find 'onesInBinaryString' in\
    \ scope\n    let aOnes = onesInBinaryString(a)\n                ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptapc040k.swift:16:17: error: cannot find 'onesInBinaryString' in scope\n\
    \    let bOnes = onesInBinaryString(b)\n                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp5ofsa1iy/tmp5ofsa1iy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e038d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e035cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e035cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e035ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ofsa1iy                        0x000055ebc012959b <unavailable> + 5531

    5    libc.so.6                          0x00002b7e03ac0460 __libc_start_main +
    245

    6    tmp5ofsa1iy                        0x000055ebc0129039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        var aBin = [Int](repeating: 0, count: 8)\n        var bBin = [Int](repeating:\
    \ 0, count: 8)\n        (aBin, _) = convertIntToBinaryArray(value: a, binaryArray:\
    \ aBin)\n        (bBin, _) = convertIntToBinaryArray(value: b, binaryArray: bBin)\n\
    \        let aSum = sumBinaryArray(array: aBin)\n        let bSum = sumBinaryArray(array:\
    \ bBin)\n        if aSum < bSum {\n            return true\n        } else if\
    \ aSum > bSum {\n            return false\n        } else {\n            return\
    \ a < b\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_nj_j0oj.swift:16:21: error: cannot find 'convertIntToBinaryArray'\
    \ in scope\n        (aBin, _) = convertIntToBinaryArray(value: a, binaryArray:\
    \ aBin)\n                    ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_nj_j0oj.swift:17:21:\
    \ error: cannot find 'convertIntToBinaryArray' in scope\n        (bBin, _) = convertIntToBinaryArray(value:\
    \ b, binaryArray: bBin)\n                    ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_nj_j0oj.swift:18:20:\
    \ error: cannot find 'sumBinaryArray' in scope\n        let aSum = sumBinaryArray(array:\
    \ aBin)\n                   ^~~~~~~~~~~~~~\n/tmp/tmp_nj_j0oj.swift:19:20: error:\
    \ cannot find 'sumBinaryArray' in scope\n        let bSum = sumBinaryArray(array:\
    \ bBin)\n                   ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let (ones_a,\
    \ _) = countOne(num: $0)\n        let (ones_b, _) = countOne(num: $1)\n      \
    \  if ones_a == ones_b {\n            return $0 < $1\n        }\n        return\
    \ ones_a < ones_b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpweo6gxm1.swift:14:27: error: cannot find 'countOne' in scope\n\
    \        let (ones_a, _) = countOne(num: $0)\n                          ^~~~~~~~\n\
    /tmp/tmpweo6gxm1.swift:15:27: error: cannot find 'countOne' in scope\n       \
    \ let (ones_b, _) = countOne(num: $1)\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {(a: Int, b:\
    \ Int) -> Bool in\n        let aStr = String(a, radix: 2)\n        let bStr =\
    \ String(b, radix: 2)\n        let a1s = aStr.filter({$0 == \"1\"}).count\n  \
    \      let b1s = bStr.filter({$0 == \"1\"}).count\n        if a1s != b1s {\n \
    \           return a1s < b1s\n        }\n        return a < b\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        var aa = a\n        var bb = b\n        var a1s = 0\n        var\
    \ b1s = 0\n        while aa > 0 {\n            a1s += aa % 2\n            aa /=\
    \ 2\n        }\n        while bb > 0 {\n            b1s += bb % 2\n          \
    \  bb /= 2\n        }\n        if a1s < b1s {\n            return true\n     \
    \   } else if a1s > b1s {\n            return false\n        } else {\n      \
    \      return a < b\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpdl3d8_xs/tmpdl3d8_xs.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ee4740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ee4437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ee4437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ee44367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl3d8_xs                        0x00005626c58d563b <unavailable> + 5691

    5    libc.so.6                          0x00002b9ee492c460 __libc_start_main +
    245

    6    tmpdl3d8_xs                        0x00005626c58d50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    var ones = [Int]()\n    var zeros = [Int]()\n    for number in arr\
    \ {\n        var binary = String(number, radix: 2)\n        if binary.count <\
    \ 8 {\n            while binary.count < 8 {\n                binary = \"0\" +\
    \ binary\n            }\n        }\n        if binary.contains(\"1\") {\n    \
    \        var count = 0\n            for char in binary {\n                if char\
    \ == \"1\" {\n                    count += 1\n                }\n            }\n\
    \            ones.append(count)\n        } else {\n            zeros.append(number)\n\
    \        }\n    }\n    var numbers = [Int]()\n    for _ in ones {\n        let\
    \ zero = zeros.removeFirst()\n        numbers.append(zero)\n    }\n    for _ in\
    \ zeros {\n        let one = ones.removeFirst()\n        numbers.append(one)\n\
    \    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b8845208c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8844eff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8844eff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8844eff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8844efebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8844eeeff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp65997jt3                        0x00005620ad45ec6d <unavailable> + 11373

    7    tmp65997jt3                        0x00005620ad45daa4 <unavailable> + 6820

    8    libc.so.6                          0x00002b88453f4460 __libc_start_main +
    245

    9    tmp65997jt3                        0x00005620ad45d779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let onesLhs = countOnes(lhs)\n        let onesRhs = countOnes(rhs)\n\
    \        if onesLhs == onesRhs {\n            return lhs < rhs\n        }\n  \
    \      return onesLhs < onesRhs\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp441_x6aw.swift:14:23: error: cannot find 'countOnes' in scope\n\
    \        let onesLhs = countOnes(lhs)\n                      ^~~~~~~~~\n/tmp/tmp441_x6aw.swift:15:23:\
    \ error: cannot find 'countOnes' in scope\n        let onesRhs = countOnes(rhs)\n\
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp5lo95x36/tmp5lo95x36.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22ec184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22ebe7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22ebe7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22ebe7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lo95x36                        0x0000562f826d43e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b22ec370460 __libc_start_main +
    245

    6    tmp5lo95x36                        0x0000562f826d3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let ones = arr.map { $0.numberOfOnes\
    \ }\n    return arr.sorted { ones[$0] == ones[$1] ? $0 < $1 : ones[$0] < ones[$1]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp62p6yr0e.swift:13:29: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n    let ones = arr.map { $0.numberOfOnes }\n               \
    \          ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    let sorted = arr.sorted {\n        let lhsOnes = $0.numberOfOnes()\n\
    \        let rhsOnes = $1.numberOfOnes()\n        if lhsOnes == rhsOnes {\n  \
    \          return $0 < $1\n        }\n        return lhsOnes < rhsOnes\n    }\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpwnya6ct9.swift:15:26: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let lhsOnes = $0.numberOfOnes()\n                  \
    \    ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // your code here\n    if arr.count\
    \ == 0 {\n        return []\n    }\n    let sortedArr = arr.sorted { (a, b) ->\
    \ Bool in\n        a.description.count > b.description.count\n    }\n    return\
    \ sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqsdyjbtc/tmpqsdyjbtc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf58599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf58290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf58290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf5828f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsdyjbtc                        0x000055a62294f594 <unavailable> + 5524

    5    libc.so.6                          0x00002adf58785460 __libc_start_main +
    245

    6    tmpqsdyjbtc                        0x000055a62294f179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // Your code here\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpyyg4wxvo/tmpyyg4wxvo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade75af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade757f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade757f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade757ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyyg4wxvo                        0x0000555f39a8d3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ade75ce5460 __libc_start_main +
    245

    6    tmpyyg4wxvo                        0x0000555f39a8cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.count\
    \ == b.count {\n            return $0 < $1\n        }\n        return a.count\
    \ < b.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp8a28f5_o/tmp8a28f5_o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ce6d96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ce6a8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ce6a8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ce6a8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8a28f5_o                        0x00005617f86a9554 <unavailable> + 5460

    5    libc.so.6                          0x00002b5ce6f82460 __libc_start_main +
    245

    6    tmp8a28f5_o                        0x00005617f86a9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        return\
    \ $0.numberOfOnes != $1.numberOfOnes ? $0.numberOfOnes < $1.numberOfOnes : $0\
    \ < $1\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnm2o7abl.swift:14:19: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        return $0.numberOfOnes != $1.numberOfOnes ? $0.numberOfOnes\
    \ < $1.numberOfOnes : $0 < $1\n               ~~ ^~~~~~~~~~~~\n/tmp/tmpnm2o7abl.swift:14:38:\
    \ error: value of type 'Int' has no member 'numberOfOnes'\n        return $0.numberOfOnes\
    \ != $1.numberOfOnes ? $0.numberOfOnes < $1.numberOfOnes : $0 < $1\n         \
    \                         ~~ ^~~~~~~~~~~~\n/tmp/tmpnm2o7abl.swift:14:56: error:\
    \ value of type 'Int' has no member 'numberOfOnes'\n        return $0.numberOfOnes\
    \ != $1.numberOfOnes ? $0.numberOfOnes < $1.numberOfOnes : $0 < $1\n         \
    \                                           ~~ ^~~~~~~~~~~~\n/tmp/tmpnm2o7abl.swift:14:74:\
    \ error: value of type 'Int' has no member 'numberOfOnes'\n        return $0.numberOfOnes\
    \ != $1.numberOfOnes ? $0.numberOfOnes < $1.numberOfOnes : $0 < $1\n         \
    \                                                             ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    let max = arr.max()\
    \ ?? 0\n    let newMax = binary_repr(max)\n    let sorted = arr.sorted { (a, b)\
    \ -> Bool in\n        binary_repr(a) == binary_repr(b) ? a < b : binary_repr(a)\
    \ < binary_repr(b)\n    }\n    let count = Double(newMax).log2()\n    var group\
    \ = [Int]()\n    for i in 0...count {\n        for j in 0..<sorted.count {\n \
    \           if binary_repr(sorted[j]) == i {\n                group.append(sorted[j])\n\
    \            }\n        }\n        result = result.map { value in\n          \
    \  if group.contains(value) {\n                let index = group.firstIndex(of:\
    \ value) ?? 0\n                return group[index]\n            } else {\n   \
    \             return value\n            }\n        }\n        group.removeAll()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmbqod7ms.swift:15:18: error: cannot find 'binary_repr' in scope\n\
    \    let newMax = binary_repr(max)\n                 ^~~~~~~~~~~\n/tmp/tmpmbqod7ms.swift:17:9:\
    \ error: cannot find 'binary_repr' in scope\n        binary_repr(a) == binary_repr(b)\
    \ ? a < b : binary_repr(a) < binary_repr(b)\n        ^~~~~~~~~~~\n/tmp/tmpmbqod7ms.swift:17:27:\
    \ error: cannot find 'binary_repr' in scope\n        binary_repr(a) == binary_repr(b)\
    \ ? a < b : binary_repr(a) < binary_repr(b)\n                          ^~~~~~~~~~~\n\
    /tmp/tmpmbqod7ms.swift:17:52: error: cannot find 'binary_repr' in scope\n    \
    \    binary_repr(a) == binary_repr(b) ? a < b : binary_repr(a) < binary_repr(b)\n\
    \                                                   ^~~~~~~~~~~\n/tmp/tmpmbqod7ms.swift:17:69:\
    \ error: cannot find 'binary_repr' in scope\n        binary_repr(a) == binary_repr(b)\
    \ ? a < b : binary_repr(a) < binary_repr(b)\n                                \
    \                                    ^~~~~~~~~~~\n/tmp/tmpmbqod7ms.swift:19:32:\
    \ error: reference to member 'log2' cannot be resolved without a contextual type\n\
    \    let count = Double(newMax).log2()\n                               ^\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // Your code here\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpyyg4wxvo/tmpyyg4wxvo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade75af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade757f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade757f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade757ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyyg4wxvo                        0x0000555f39a8d3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ade75ce5460 __libc_start_main +
    245

    6    tmpyyg4wxvo                        0x0000555f39a8cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var newArr = arr.map { (value) ->\
    \ (Int, Int) in\n        let string = String(value, radix: 2)\n        return\
    \ (Int(string.filter { $0 == \"1\" }.count), value)\n    }\n    newArr.sort {\
    \ (first, second) -> Bool in\n        if first.0 != second.0 {\n            return\
    \ first.0 < second.0\n        } else {\n            return first.1 < second.1\n\
    \        }\n    }\n    return newArr.map { $0.1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  return arr.sorted {\n    let onesL =\
    \ $0.nonzeroBitCount\n    let onesR = $1.nonzeroBitCount\n    return onesL ==\
    \ onesR ? $0 < $1 : onesL < onesR\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpajj6br20/tmpajj6br20.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace74a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace7476cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace7476c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace7476b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajj6br20                        0x000055631209c59b <unavailable> + 5531

    5    libc.so.6                          0x00002ace74c61460 __libc_start_main +
    245

    6    tmpajj6br20                        0x000055631209c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ bin1 = String($0, radix: 2, uppercase: false)\n        let bin2 = String($1,\
    \ radix: 2, uppercase: false)\n        if bin1.components(separatedBy: \"1\").count\
    \ == bin2.components(separatedBy: \"1\").count {\n            return $0 < $1\n\
    \        }\n        return bin1.components(separatedBy: \"1\").count < bin2.components(separatedBy:\
    \ \"1\").count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5ruh57ym.swift:16:17: error: value of type 'String' has no member\
    \ 'components'\n        if bin1.components(separatedBy: \"1\").count == bin2.components(separatedBy:\
    \ \"1\").count {\n           ~~~~ ^~~~~~~~~~\n/tmp/tmp5ruh57ym.swift:16:60: error:\
    \ value of type 'String' has no member 'components'\n        if bin1.components(separatedBy:\
    \ \"1\").count == bin2.components(separatedBy: \"1\").count {\n              \
    \                                        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).components(separatedBy: \"1\").count - 1\n        let\
    \ b = String($1, radix: 2).components(separatedBy: \"1\").count - 1\n        return\
    \ a > b || (a == b && $0 > $1)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzbe326kd.swift:14:38: error: value of type 'String' has no member\
    \ 'components'\n        let a = String($0, radix: 2).components(separatedBy: \"\
    1\").count - 1\n                ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        getOnes(num:\
    \ $0) < getOnes(num: $1) ||\n        (getOnes(num: $0) == getOnes(num: $1) &&\
    \ $0 < $1)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjra9ugwq.swift:14:9: error: cannot find 'getOnes' in scope\n  \
    \      getOnes(num: $0) < getOnes(num: $1) ||\n        ^~~~~~~\n/tmp/tmpjra9ugwq.swift:14:28:\
    \ error: cannot find 'getOnes' in scope\n        getOnes(num: $0) < getOnes(num:\
    \ $1) ||\n                           ^~~~~~~\n/tmp/tmpjra9ugwq.swift:15:10: error:\
    \ cannot find 'getOnes' in scope\n        (getOnes(num: $0) == getOnes(num: $1)\
    \ && $0 < $1)\n         ^~~~~~~\n/tmp/tmpjra9ugwq.swift:15:30: error: cannot find\
    \ 'getOnes' in scope\n        (getOnes(num: $0) == getOnes(num: $1) && $0 < $1)\n\
    \                             ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { first, second\
    \ in\n        var firstResult = 0\n        var secondResult = 0\n        for char\
    \ in String(first, radix: 2).characters {\n            if char == \"1\" {\n  \
    \              firstResult += 1\n            }\n        }\n        for char in\
    \ String(second, radix: 2).characters {\n            if char == \"1\" {\n    \
    \            secondResult += 1\n            }\n        }\n        if firstResult\
    \ == secondResult {\n            return first < second\n        }\n        return\
    \ firstResult < secondResult\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphtrogl8_.swift:16:45: error: 'characters' is unavailable: Please\
    \ use String directly\n        for char in String(first, radix: 2).characters\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphtrogl8_.swift:21:46: error: 'characters'\
    \ is unavailable: Please use String directly\n        for char in String(second,\
    \ radix: 2).characters {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  var array: [Int] = arr.sorted(by: {\
    \ $0 < $1 })\n  var low = 0\n  var high = array.count - 1\n  while low < high\
    \ {\n    let l = array[low]\n    let h = array[high]\n    let l1 = getOnes(for:\
    \ l)\n    let h1 = getOnes(for: h)\n    if l1 < h1 {\n      low += 1\n    } else\
    \ if l1 > h1 {\n      high -= 1\n    } else {\n      if l > h {\n        low +=\
    \ 1\n        high -= 1\n      } else {\n        let tmp = array[low]\n       \
    \ array[low] = array[high]\n        array[high] = tmp\n        low += 1\n    \
    \    high -= 1\n      }\n    }\n  }\n  return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqxkkyeof.swift:19:14: error: cannot find 'getOnes' in scope\n \
    \   let l1 = getOnes(for: l)\n             ^~~~~~~\n/tmp/tmpqxkkyeof.swift:20:14:\
    \ error: cannot find 'getOnes' in scope\n    let h1 = getOnes(for: h)\n      \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (left, right)\
    \ -> Bool in\n        let leftBinary = String(left, radix: 2).map { $0 == \"1\"\
    \ }.filter { $0 }.count\n        let rightBinary = String(right, radix: 2).map\
    \ { $0 == \"1\" }.filter { $0 }.count\n        return leftBinary < rightBinary\
    \ || leftBinary == rightBinary && left < right\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sortedPairs = arr.map({ Int(String($0,\
    \ radix: 2, uppercase: false))! })\n        .enumerated()\n        .sorted(by:\
    \ { (pair1, pair2) -> Bool in\n            if pair1.element != pair2.element {\n\
    \                return pair1.element < pair2.element\n            } else {\n\
    \                return arr[pair1.offset] < arr[pair2.offset]\n            }\n\
    \        })\n    return sortedPairs.map({ arr[$0.offset] })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp6r9m0kq9/tmp6r9m0kq9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96c3ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96c399db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96c399d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96c399c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6r9m0kq9                        0x0000563ebb5da854 <unavailable> + 6228

    5    libc.so.6                          0x00002b96c3e92460 __libc_start_main +
    245

    6    tmp6r9m0kq9                        0x0000563ebb5da439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    return arr.sorted {\n        if $0.nonzeroBitCount < $1.nonzeroBitCount\
    \ {\n            return true\n        } else if $0.nonzeroBitCount > $1.nonzeroBitCount\
    \ {\n            return false\n        } else {\n            return $0 < $1\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp62lb6k4o/tmp62lb6k4o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0c72eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0c6fe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0c6fe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0c6fe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62lb6k4o                        0x00005611f016c5fb <unavailable> + 5627

    5    libc.so.6                          0x00002ae0c74da460 __libc_start_main +
    245

    6    tmp62lb6k4o                        0x00005611f016c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        return aBinary.components(separatedBy: \"1\").count > bBinary.components(separatedBy:\
    \ \"1\").count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppbvq8qiu.swift:16:24: error: value of type 'String' has no member\
    \ 'components'\n        return aBinary.components(separatedBy: \"1\").count >\
    \ bBinary.components(separatedBy: \"1\").count\n               ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmppbvq8qiu.swift:16:69: error: value of type 'String' has no member 'components'\n\
    \        return aBinary.components(separatedBy: \"1\").count > bBinary.components(separatedBy:\
    \ \"1\").count\n                                                            ~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sortedArr = arr.sorted(by: { $0.toBinaryString().filter({\
    \ $0 == \"1\" }).count < $1.toBinaryString().filter({ $0 == \"1\" }).count })\n\
    \    var items: [Int] = []\n    var lastValue = -1\n    for item in sortedArr\
    \ {\n        if item.toBinaryString().filter({ $0 == \"1\" }).count == lastValue\
    \ {\n            items.append(item)\n        } else {\n            if items.count\
    \ > 0 {\n                sortedArr.filter({ items.contains($0) }).sorted(by: {\
    \ $0 < $1 }).forEach({ _ = items.popLast() })\n                items.append(contentsOf:\
    \ sortedArr.filter({ items.contains($0) }).sorted(by: { $0 < $1 }))\n        \
    \    }\n            items.append(item)\n            lastValue = item.toBinaryString().filter({\
    \ $0 == \"1\" }).count\n        }\n    }\n    return items\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpfhl2unt2.swift:13:41: error: value of type 'Int' has no member\
    \ 'toBinaryString'\n    let sortedArr = arr.sorted(by: { $0.toBinaryString().filter({\
    \ $0 == \"1\" }).count < $1.toBinaryString().filter({ $0 == \"1\" }).count })\n\
    \                                     ~~ ^~~~~~~~~~~~~~\n/tmp/tmpfhl2unt2.swift:13:91:\
    \ error: value of type 'Int' has no member 'toBinaryString'\n    let sortedArr\
    \ = arr.sorted(by: { $0.toBinaryString().filter({ $0 == \"1\" }).count < $1.toBinaryString().filter({\
    \ $0 == \"1\" }).count })\n                                                  \
    \                                     ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979758
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { (lhs, rhs)\
    \ -> Bool in\n        let left = (lhs >= 0) ? lhs : -lhs\n        let right =\
    \ (rhs >= 0) ? rhs : -rhs\n        let leftCount = getOneCount(left)\n       \
    \ let rightCount = getOneCount(right)\n        if leftCount == rightCount {\n\
    \            return left < right\n        }\n        return leftCount < rightCount\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpc_h4jebv.swift:16:25: error: cannot find 'getOneCount' in scope\n\
    \        let leftCount = getOneCount(left)\n                        ^~~~~~~~~~~\n\
    /tmp/tmpc_h4jebv.swift:17:26: error: cannot find 'getOneCount' in scope\n    \
    \    let rightCount = getOneCount(right)\n                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ num1Ones = $0.binaryRepresentation.components(separatedBy: \"1\").count - 1\n\
    \        let num2Ones = $1.binaryRepresentation.components(separatedBy: \"1\"\
    ).count - 1\n        if num1Ones == num2Ones {\n            return $0 < $1\n \
    \       }\n        return num1Ones < num2Ones\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpd9paal26.swift:14:27: error: value of type 'Int' has no member\
    \ 'binaryRepresentation'\n        let num1Ones = $0.binaryRepresentation.components(separatedBy:\
    \ \"1\").count - 1\n                       ~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (lhs, rhs)\
    \ -> Bool in\n        let lhsStr = String(lhs, radix: 2)\n        let rhsStr =\
    \ String(rhs, radix: 2)\n        let lhsOnes = lhsStr.filter { $0 == \"1\" }.count\n\
    \        let rhsOnes = rhsStr.filter { $0 == \"1\" }.count\n        if lhsOnes\
    \ == rhsOnes {\n            return lhs < rhs\n        }\n        return lhsOnes\
    \ < rhsOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n        if lhsBinary.count == rhsBinary.count {\n \
    \           return lhs < rhs\n        }\n        return lhsBinary.count < rhsBinary.count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpw_h2l9df/tmpw_h2l9df.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b9c4f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b9c1e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b9c1e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b9c1e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_h2l9df                        0x000056316de98554 <unavailable> + 5460

    5    libc.so.6                          0x00002b1b9c6dc460 __libc_start_main +
    245

    6    tmpw_h2l9df                        0x000056316de98139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (left, right)\
    \ -> Bool in\n        let sumLeft = left.binary.countOnes\n        let sumRight\
    \ = right.binary.countOnes\n        return sumLeft < sumRight || (sumLeft == sumRight\
    \ && left < right)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvkmwxkom.swift:14:28: error: value of type 'Int' has no member\
    \ 'binary'\n        let sumLeft = left.binary.countOnes\n                    \
    \  ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        if $0\
    \ < 0 && $1 < 0 {\n            return $0 < $1\n        }\n        if $0 < 0 {\n\
    \            return false\n        }\n        if $1 < 0 {\n            return\
    \ true\n        }\n        let oneCounts = (onesCount($0), onesCount($1))\n  \
    \      if oneCounts.0 == oneCounts.1 {\n            return $0 < $1\n        }\n\
    \        return oneCounts.0 < oneCounts.1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpedgwjkm2.swift:23:26: error: cannot find 'onesCount' in scope\n\
    \        let oneCounts = (onesCount($0), onesCount($1))\n                    \
    \     ^~~~~~~~~\n/tmp/tmpedgwjkm2.swift:23:41: error: cannot find 'onesCount'\
    \ in scope\n        let oneCounts = (onesCount($0), onesCount($1))\n         \
    \                               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { first, second\
    \ in\n        let firstValue = String(first, radix: 2).filter { $0 == \"1\" }.count\n\
    \        let secondValue = String(second, radix: 2).filter { $0 == \"1\" }.count\n\
    \        if firstValue == secondValue {\n            return first < second\n \
    \       }\n        return firstValue < secondValue\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  var res = arr\n  res.sort(by: { (a,\
    \ b) -> Bool in\n    a.countOneBits() < b.countOneBits() || (a.countOneBits()\
    \ == b.countOneBits() && a < b)\n  })\n  return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpx02ocjio.swift:15:7: error: value of type 'Int' has no member 'countOneBits'\n\
    \    a.countOneBits() < b.countOneBits() || (a.countOneBits() == b.countOneBits()\
    \ && a < b)\n    ~ ^~~~~~~~~~~~\n/tmp/tmpx02ocjio.swift:15:26: error: value of\
    \ type 'Int' has no member 'countOneBits'\n    a.countOneBits() < b.countOneBits()\
    \ || (a.countOneBits() == b.countOneBits() && a < b)\n                       ~\
    \ ^~~~~~~~~~~~\n/tmp/tmpx02ocjio.swift:15:47: error: value of type 'Int' has no\
    \ member 'countOneBits'\n    a.countOneBits() < b.countOneBits() || (a.countOneBits()\
    \ == b.countOneBits() && a < b)\n                                            ~\
    \ ^~~~~~~~~~~~\n/tmp/tmpx02ocjio.swift:15:67: error: value of type 'Int' has no\
    \ member 'countOneBits'\n    a.countOneBits() < b.countOneBits() || (a.countOneBits()\
    \ == b.countOneBits() && a < b)\n                                            \
    \                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort\
    \ { (a, b) -> Bool in\n        (a.nonzeroBitCount, a) < (b.nonzeroBitCount, b)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpugrqm9z0/tmpugrqm9z0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf91184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf90e7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf90e7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf90e7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpugrqm9z0                        0x00005603f186164b <unavailable> + 5707

    5    libc.so.6                          0x00002acf91370460 __libc_start_main +
    245

    6    tmpugrqm9z0                        0x00005603f18610e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ bin0 = String($0, radix: 2)\n        let bin1 = String($1, radix: 2)\n     \
    \   let cmp = bin0.split(separator: \"1\").count.compare(bin1.split(separator:\
    \ \"1\").count)\n        if cmp == .orderedSame {\n            return $0.compare($1)\
    \ == .orderedAscending\n        }\n        return cmp == .orderedAscending\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqioejbnv.swift:16:52: error: value of type 'Int' has no member\
    \ 'compare'\n        let cmp = bin0.split(separator: \"1\").count.compare(bin1.split(separator:\
    \ \"1\").count)\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        var b1\
    \ = UInt64(bitPattern: $0), b2 = UInt64(bitPattern: $1)\n        let ones1 = UInt64(~b1).nonzeroBitCount\n\
    \        let ones2 = UInt64(~b2).nonzeroBitCount\n        if ones1 != ones2 {\n\
    \            return ones1 < ones2\n        }\n        if b1 == b2 {\n        \
    \    return $0 < $1\n        }\n        var d1 = 0, d2 = 0\n        while b1 >\
    \ 0 {\n            b1 /= 10\n            d1 += 1\n        }\n        while b2\
    \ > 0 {\n            b2 /= 10\n            d2 += 1\n        }\n        return\
    \ d1 < d2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpwe6kziix.swift:14:37: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        var b1 = UInt64(bitPattern: $0),\
    \ b2 = UInt64(bitPattern: $1)\n                                    ^\n       \
    \                             Int64( )\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr.sorted {\n   \
    \     $0.onesCount < $1.onesCount\n    }\n    sortedArr.sort {\n        $0.onesCount\
    \ == $1.onesCount ? $0 < $1 : false\n    }\n    return sortedArr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppli981lu.swift:14:12: error: value of type 'Int' has no member\
    \ 'onesCount'\n        $0.onesCount < $1.onesCount\n        ~~ ^~~~~~~~~\n/tmp/tmppli981lu.swift:14:27:\
    \ error: value of type 'Int' has no member 'onesCount'\n        $0.onesCount <\
    \ $1.onesCount\n                       ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979757
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        (a, b)\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let a1Count = aBinary.filter { $0 == \"1\" }.count\n    \
    \    let b1Count = bBinary.filter { $0 == \"1\" }.count\n        if a1Count ==\
    \ b1Count {\n            return a < b\n        }\n        return a1Count < b1Count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // Base case: empty array\n    guard\
    \ arr.count > 0 else { return [] }\n    \n    // Dictionary to map binary representation\
    \ of numbers with their indeces\n    var binaryMap = [String: [Int]]()\n    \n\
    \    // Loop over array elements\n    for (i, element) in arr.enumerated() {\n\
    \        // Base case: empty array\n        if binaryMap.isEmpty {\n         \
    \   // Initialize map with first pair\n            binaryMap[String(element, radix:\
    \ 2)] = [i]\n        } else {\n            // Check if element's binary representation\
    \ is in map\n            if let indeces = binaryMap[String(element, radix: 2)]\
    \ {\n                // Binary representation found, append index\n          \
    \      binaryMap[String(element, radix: 2)] = indeces + [i]\n            } else\
    \ {\n                // Binary representation not found, append new key\n    \
    \            binaryMap[String(element, radix: 2)] = [i]\n            }\n     \
    \   }\n    }\n    \n    // Sort keys by binary representation\n    let binaryMapKeys\
    \ = binaryMap.keys.sorted(by: { (s1, s2) -> Bool in\n        s1.count < s2.count\n\
    \    })\n    \n    // Return sorted array\n    return binaryMapKeys.flatMap {\
    \ binaryMap[$0]!.map { arr[$0] } }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp0j_r2huo/tmp0j_r2huo.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f7e0b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f7ddafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f7ddaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f7ddae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0j_r2huo                        0x000055bc56a17cb4 <unavailable> + 7348

    5    libc.so.6                          0x00002b5f7e2a4460 __libc_start_main +
    245

    6    tmp0j_r2huo                        0x000055bc56a17899 <unavailable> + 6297

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { (i1, i2)\
    \ -> Bool in\n        let ones1 = i1.numberOfOnes()\n        let ones2 = i2.numberOfOnes()\n\
    \        if ones1 == ones2 {\n            return i1 < i2\n        }\n        return\
    \ ones1 < ones2\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpolux_a4k.swift:14:24: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let ones1 = i1.numberOfOnes()\n                    ~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    let decimal = arr.sorted()\n    var ones = [[Int]]()\n    for num\
    \ in decimal {\n        let bin = String(num, radix: 2).components(separatedBy:\
    \ \"\").map { Int($0) ?? 0 }\n        ones.append(bin)\n    }\n    ones.sort(by:\
    \ { a, b in\n        let count = min(a.count, b.count)\n        for i in 0..<count\
    \ {\n            if a[i] == b[i] { continue }\n            return a[i] < b[i]\n\
    \        }\n        return a.count < b.count\n    })\n    var result = [Int]()\n\
    \    for var i in 0..<ones.count {\n        for var j in 0..<ones[i].count {\n\
    \            j += 1\n            if j == ones[i].count {\n                result.append(decimal[i])\n\
    \                i += 1\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4efolmhd.swift:17:41: error: value of type 'String' has no member\
    \ 'components'\n        let bin = String(num, radix: 2).components(separatedBy:\
    \ \"\").map { Int($0) ?? 0 }\n                  ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhs_ones = lhs.nonzeroBitCount\n        let rhs_ones =\
    \ rhs.nonzeroBitCount\n        return lhs_ones < rhs_ones || (lhs_ones == rhs_ones\
    \ && lhs < rhs)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsk4obc7h/tmpsk4obc7h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23943f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23940edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23940ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23940ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsk4obc7h                        0x00005556715f159b <unavailable> + 5531

    5    libc.so.6                          0x00002b23945e2460 __libc_start_main +
    245

    6    tmpsk4obc7h                        0x00005556715f1039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ b1 = String($0, radix: 2).filter({ $0 == \"1\" }).count\n        let b2 = String($1,\
    \ radix: 2).filter({ $0 == \"1\" }).count\n        return b1 == b2 ? $0 < $1 :\
    \ b1 < b2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort\
    \ { a, b in\n        if Int(String(a, radix: 2)) == Int(String(b, radix: 2)) {\n\
    \            return a < b\n        }\n        return countOnes(a) < countOnes(b)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpq7c5eiwx.swift:18:16: error: cannot find 'countOnes' in scope\n\
    \        return countOnes(a) < countOnes(b)\n               ^~~~~~~~~\n/tmp/tmpq7c5eiwx.swift:18:31:\
    \ error: cannot find 'countOnes' in scope\n        return countOnes(a) < countOnes(b)\n\
    \                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        a.numberOfOnes() < b.numberOfOnes() || (a.numberOfOnes() == b.numberOfOnes()\
    \ && a < b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7_b21ch1.swift:14:11: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        a.numberOfOnes() < b.numberOfOnes() || (a.numberOfOnes()\
    \ == b.numberOfOnes() && a < b)\n        ~ ^~~~~~~~~~~~\n/tmp/tmp7_b21ch1.swift:14:30:\
    \ error: value of type 'Int' has no member 'numberOfOnes'\n        a.numberOfOnes()\
    \ < b.numberOfOnes() || (a.numberOfOnes() == b.numberOfOnes() && a < b)\n    \
    \                       ~ ^~~~~~~~~~~~\n/tmp/tmp7_b21ch1.swift:14:51: error: value\
    \ of type 'Int' has no member 'numberOfOnes'\n        a.numberOfOnes() < b.numberOfOnes()\
    \ || (a.numberOfOnes() == b.numberOfOnes() && a < b)\n                       \
    \                         ~ ^~~~~~~~~~~~\n/tmp/tmp7_b21ch1.swift:14:71: error:\
    \ value of type 'Int' has no member 'numberOfOnes'\n        a.numberOfOnes() <\
    \ b.numberOfOnes() || (a.numberOfOnes() == b.numberOfOnes() && a < b)\n      \
    \                                                              ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<result.count\
    \ {\n        for j in (i+1)..<result.count {\n            let value1 = result[i]\n\
    \            let value2 = result[j]\n            if decToBin(dec: value1) < decToBin(dec:\
    \ value2) {\n                result.swapAt(i, j)\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpcgesdj6q.swift:18:16: error: cannot find 'decToBin' in scope\n\
    \            if decToBin(dec: value1) < decToBin(dec: value2) {\n            \
    \   ^~~~~~~~\n/tmp/tmpcgesdj6q.swift:18:40: error: cannot find 'decToBin' in scope\n\
    \            if decToBin(dec: value1) < decToBin(dec: value2) {\n            \
    \                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    var array = arr\n    let sortedNumbers = array.sorted { (a, b) ->\
    \ Bool in\n        let aOnes = countOnes(of: a)\n        let bOnes = countOnes(of:\
    \ b)\n        return aOnes < bOnes || (aOnes == bOnes && a < b)\n    }\n    return\
    \ sortedNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpt6j41jip.swift:16:21: error: cannot find 'countOnes' in scope\n\
    \        let aOnes = countOnes(of: a)\n                    ^~~~~~~~~\n/tmp/tmpt6j41jip.swift:17:21:\
    \ error: cannot find 'countOnes' in scope\n        let bOnes = countOnes(of: b)\n\
    \                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (_lhs: Int,\
    \ _rhs: Int) -> Bool in\n        let lhs = String(_lhs, radix: 2).count\n    \
    \    let rhs = String(_rhs, radix: 2).count\n        if lhs < rhs {\n        \
    \    return true\n        } else if lhs > rhs {\n            return false\n  \
    \      } else {\n            return _lhs < _rhs\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3bh2ri3s/tmp3bh2ri3s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aa5b9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aa5893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aa5893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aa58927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bh2ri3s                        0x00005623a8a82554 <unavailable> + 5460

    5    libc.so.6                          0x00002b9aa5d88460 __libc_start_main +
    245

    6    tmp3bh2ri3s                        0x00005623a8a82139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let val1\
    \ = $0.nonzeroBitCount\n        let val2 = $1.nonzeroBitCount\n        return\
    \ val1 == val2 ? $0 < $1 : val1 < val2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmplkcbyi8c/tmplkcbyi8c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fb62fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fb5ff5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fb5ff5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fb5ff47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkcbyi8c                        0x000055fe9caed59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fb64ea460 __libc_start_main +
    245

    6    tmplkcbyi8c                        0x000055fe9caed039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let ones_tuples = arr.map {($0, \"\
    \\($0)\".filter{$0 == \"1\"}.count)}.sorted {\n        if $0.1 == $1.1 {\n   \
    \         return $0.0 < $1.0\n        }\n        return $0.1 < $1.1\n    }\n \
    \   return ones_tuples.map {$0.0}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpeypnaakp/tmpeypnaakp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12ee82bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12ee522b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12ee522988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12ee5217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeypnaakp                        0x0000555eb4258a04 <unavailable> + 6660

    5    libc.so.6                          0x00002b12eea17460 __libc_start_main +
    245

    6    tmpeypnaakp                        0x0000555eb42585e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (i1, i2) -> Bool\
    \ in\n        var c1 = 0\n        var c2 = 0\n        var i = i1\n        var\
    \ j = i2\n        while i > 0 {\n            if i & 1 == 1 {\n               \
    \ c1 += 1\n            }\n            i >>= 1\n        }\n        while j > 0\
    \ {\n            if j & 1 == 1 {\n                c2 += 1\n            }\n   \
    \         j >>= 1\n        }\n        if c1 == c2 {\n            return i1 < i2\n\
    \        }\n        return c1 < c2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3arxn7r6/tmp3arxn7r6.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5652fdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5652cd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5652cd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5652cd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3arxn7r6                        0x000056159954b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b56531ca460 __libc_start_main +
    245

    6    tmp3arxn7r6                        0x000056159954b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        var\
    \ count = 0\n        for digit in String($0, radix: 2) {\n            if digit\
    \ == \"1\" {\n                count += 1\n            }\n        }\n        var\
    \ count2 = 0\n        for digit in String($1, radix: 2) {\n            if digit\
    \ == \"1\" {\n                count2 += 1\n            }\n        }\n        if\
    \ count == count2 {\n            return $0 < $1\n        }\n        return count\
    \ < count2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    return arr.sorted {(n1, n2) in\n        let ones1 = n1.nonzeroBitCount\n\
    \        let ones2 = n2.nonzeroBitCount\n        if ones1 == ones2 {\n       \
    \     return n1 < n2\n        }\n        return ones1 < ones2\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqo_kfxb8/tmpqo_kfxb8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b002a4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b002a1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b002a1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b002a1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo_kfxb8                        0x00005634f6bb763b <unavailable> + 5691

    5    libc.so.6                          0x00002b002a6bf460 __libc_start_main +
    245

    6    tmpqo_kfxb8                        0x00005634f6bb70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ bits = [String](repeating: \"0\", count: 32 - String($0, radix: 2).count) +\
    \ String($0, radix: 2).map { String($0) }\n        let bits1 = [String](repeating:\
    \ \"0\", count: 32 - String($1, radix: 2).count) + String($1, radix: 2).map {\
    \ String($0) }\n        let ones = bits.filter { $0 == \"1\" }.count\n       \
    \ let ones1 = bits1.filter { $0 == \"1\" }.count\n        if ones == ones1 {\n\
    \            return $0 < $1\n        }\n        return ones < ones1\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        return compare(a, b)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppurz09gm.swift:14:16: error: cannot find 'compare' in scope\n \
    \       return compare(a, b)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.numberOfOnes\n        let rhsOnes = rhs.numberOfOnes\n\
    \        if lhsOnes != rhsOnes {\n            return lhsOnes < rhsOnes\n     \
    \   }\n        return lhs < rhs\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_8hfbg5o.swift:14:27: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let lhsOnes = lhs.numberOfOnes\n                   \
    \   ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let countA = a.nonzeroBitCount\n        let countB = b.nonzeroBitCount\n\
    \        return countA == countB ? a < b : countA < countB\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmps_jvhzy8/tmps_jvhzy8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63002f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62fffebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62fffeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62fffea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_jvhzy8                        0x00005606c41e159b <unavailable> + 5531

    5    libc.so.6                          0x00002b63004e0460 __libc_start_main +
    245

    6    tmps_jvhzy8                        0x00005606c41e1039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { s, e in\n    \
    \    if (s & 1) == (e & 1) {\n            return s < e\n        }\n        if\
    \ (s & 1) == 1 {\n            return false\n        }\n        return true\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpx6ztc39t/tmpx6ztc39t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68343d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68340ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68340ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68340cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6ztc39t                        0x000055a9959c4454 <unavailable> + 5204

    5    libc.so.6                          0x00002b68345c3460 __libc_start_main +
    245

    6    tmpx6ztc39t                        0x000055a9959c4039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let countLhs = lhs.nonzeroBitCount\n        let countRhs =\
    \ rhs.nonzeroBitCount\n        return countLhs < countRhs || (countLhs == countRhs\
    \ && lhs < rhs)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmphvmy95m4/tmphvmy95m4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d3b280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d3af77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d3af77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d3af767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvmy95m4                        0x000055e41dfb559b <unavailable> + 5531

    5    libc.so.6                          0x00002b7d3b46c460 __libc_start_main +
    245

    6    tmphvmy95m4                        0x000055e41dfb5039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<result.count\
    \ {\n        for j in i+1..<result.count {\n            let iBinary = String(result[i],\
    \ radix: 2)\n            let jBinary = String(result[j], radix: 2)\n         \
    \   let iOnes = iBinary.filter({ $0 == \"1\" }).count\n            let jOnes =\
    \ jBinary.filter({ $0 == \"1\" }).count\n            if iOnes > jOnes {\n    \
    \            result.swapAt(i, j)\n            } else if iOnes == jOnes && result[i]\
    \ > result[j] {\n                result.swapAt(i, j)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { a, b in\n    \
    \    var aOne = 0\n        var bOne = 0\n        for a in String(a, radix: 2)\
    \ {\n            if a == \"1\" {\n                aOne += 1\n            }\n \
    \       }\n        for b in String(b, radix: 2) {\n            if b == \"1\" {\n\
    \                bOne += 1\n            }\n        }\n        if aOne == bOne\
    \ {\n            return a < b\n        }\n        return aOne < bOne\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let onesCount = arr.map { onesCount(in:\
    \ $0) }\n    let tuple = zip(arr, onesCount).sorted { $0.1 < $1.1 }\n    return\
    \ tuple.map { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptugmf4_f.swift:13:31: error: cannot call value of non-function\
    \ type '[T]'\n    let onesCount = arr.map { onesCount(in: $0) }\n            \
    \                  ^\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { x, y in\n    \
    \    let bitsX = Set(String(x, radix: 2).filter({ $0 == \"1\" }))\n        let\
    \ bitsY = Set(String(y, radix: 2).filter({ $0 == \"1\" }))\n        if bitsX.count\
    \ != bitsY.count {\n            return bitsX.count < bitsY.count\n        }\n\
    \        return x < y\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp5fczu2qu/tmp5fczu2qu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02949ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02946d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02946d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02946d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5fczu2qu                        0x0000560e406f1834 <unavailable> + 6196

    5    libc.so.6                          0x00002b0294bc9460 __libc_start_main +
    245

    6    tmp5fczu2qu                        0x0000560e406f1419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = arr.sorted(by: { $0.onesCount\
    \ < $1.onesCount })\n    sorted.sort { (a, b) -> Bool in\n        if a.onesCount\
    \ == b.onesCount {\n            return a < b\n        }\n        return true\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpb9dvdb4c.swift:13:38: error: value of type 'Int' has no member\
    \ 'onesCount'\n    var sorted = arr.sorted(by: { $0.onesCount < $1.onesCount })\n\
    \                                  ~~ ^~~~~~~~~\n/tmp/tmpb9dvdb4c.swift:13:53:\
    \ error: value of type 'Int' has no member 'onesCount'\n    var sorted = arr.sorted(by:\
    \ { $0.onesCount < $1.onesCount })\n                                         \
    \        ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let binToIntArr = arr.map { $0.binaryToInt\
    \ }\n    let sortedArr = arr.sorted { arr, arr1 in\n        if binToIntArr[arr]\
    \ < binToIntArr[arr1] {\n            return true\n        } else if binToIntArr[arr]\
    \ > binToIntArr[arr1] {\n            return false\n        } else {\n        \
    \    return arr < arr1\n        }\n    }\n    return sortedArr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsv30rl9n.swift:13:36: error: value of type 'Int' has no member\
    \ 'binaryToInt'\n    let binToIntArr = arr.map { $0.binaryToInt }\n          \
    \                      ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var numberOnes: [Int] = []\n    for\
    \ number in arr {\n        numberOnes.append(number.ones())\n    }\n    return\
    \ zipped(arr, numberOnes).sorted {\n        $0.1 < $1.1 || ($0.1 == $1.1 && $0.0\
    \ < $1.0)\n    }.map { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptufus2_s.swift:15:34: error: value of type 'Int' has no member\
    \ 'ones'\n        numberOnes.append(number.ones())\n                         \
    \ ~~~~~~ ^~~~\n/tmp/tmptufus2_s.swift:17:12: error: cannot find 'zipped' in scope\n\
    \    return zipped(arr, numberOnes).sorted {\n           ^~~~~~\n/tmp/tmptufus2_s.swift:17:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return zipped(arr,\
    \ numberOnes).sorted {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979936
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  let sorted = arr.sorted { (a, b) ->\
    \ Bool in\n    let aBinary = String(a, radix: 2)\n    let bBinary = String(b,\
    \ radix: 2)\n    let aOnes = aBinary.filter({ $0 == \"1\" }).count\n    let bOnes\
    \ = bBinary.filter({ $0 == \"1\" }).count\n    if aOnes == bOnes {\n      return\
    \ a < b\n    }\n    return aOnes < bOnes\n  }\n  return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let x\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let y = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return x == y ? $0 < $1 : x\
    \ < y\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (x, y) -> Bool\
    \ in\n        if x == y {\n            return x < y\n        }\n        if x.nonzeroBitCount\
    \ == y.nonzeroBitCount {\n            return x < y\n        }\n        return\
    \ x.nonzeroBitCount < y.nonzeroBitCount\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpeur3g5q9/tmpeur3g5q9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada673bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada670b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada670b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada670b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeur3g5q9                        0x00005564f6cac59b <unavailable> + 5531

    5    libc.so.6                          0x00002ada675a7460 __libc_start_main +
    245

    6    tmpeur3g5q9                        0x00005564f6cac039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (first: Int, second:\
    \ Int) -> Bool in\n        let f = String(first, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        let s = String(second, radix: 2).filter { $0 == \"1\" }.count\n\
    \        return f == s ? first < second : f < s\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sortedByOneCount = arr.sorted\
    \ {\n        let count = countOnes($0)\n        let otherCount = countOnes($1)\n\
    \        if count == otherCount {\n            return $0 < $1\n        }\n   \
    \     return count < otherCount\n    }\n    return sortedByOneCount\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnaaqyl5t.swift:14:21: error: cannot find 'countOnes' in scope\n\
    \        let count = countOnes($0)\n                    ^~~~~~~~~\n/tmp/tmpnaaqyl5t.swift:15:26:\
    \ error: cannot find 'countOnes' in scope\n        let otherCount = countOnes($1)\n\
    \                         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = arr.sorted()\n    for\
    \ i in (0..<sorted.count - 1).reversed() {\n        for j in 0..<i {\n       \
    \     let a = sorted[j]\n            let b = sorted[j + 1]\n            if a.trailingZeroBitCount\
    \ > b.trailingZeroBitCount {\n                sorted.swapAt(j, j + 1)\n      \
    \      } else if a.trailingZeroBitCount == b.trailingZeroBitCount && a > b {\n\
    \                sorted.swapAt(j, j + 1)\n            }\n        }\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp161c1uk7/tmp161c1uk7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0cd8d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0cd5c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0cd5c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0cd5c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp161c1uk7                        0x000055985d375a24 <unavailable> + 6692

    5    libc.so.6                          0x00002af0cdabd460 __libc_start_main +
    245

    6    tmp161c1uk7                        0x000055985d375609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  return arr.sorted(by: { (x, y) -> Bool\
    \ in\n    var x1 = x\n    var y1 = y\n    var xOnes = 0\n    var yOnes = 0\n \
    \   while x1 > 0 {\n      xOnes += x1 % 2\n      x1 /= 2\n    }\n    while y1\
    \ > 0 {\n      yOnes += y1 % 2\n      y1 /= 2\n    }\n    if xOnes == yOnes {\n\
    \      return x < y\n    }\n    return xOnes < yOnes\n  })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpv1mrz4w_/tmpv1mrz4w_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3658f5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3658c54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3658c54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3658c537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1mrz4w_                        0x000055e4162c863b <unavailable> + 5691

    5    libc.so.6                          0x00002b3659149460 __libc_start_main +
    245

    6    tmpv1mrz4w_                        0x000055e4162c80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (first, second)\
    \ -> Bool in\n        let firstBitsCount = countOnes(in: first)\n        let secondBitsCount\
    \ = countOnes(in: second)\n        if firstBitsCount == secondBitsCount {\n  \
    \          return first < second\n        }\n        return firstBitsCount < secondBitsCount\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1v9pzo_v.swift:14:30: error: cannot find 'countOnes' in scope\n\
    \        let firstBitsCount = countOnes(in: first)\n                         \
    \    ^~~~~~~~~\n/tmp/tmp1v9pzo_v.swift:15:31: error: cannot find 'countOnes' in\
    \ scope\n        let secondBitsCount = countOnes(in: second)\n               \
    \               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  var newArr = arr\n  newArr.sort(by:\
    \ {\n    String($0, radix: 2).filter { $0 == \"1\" }.count < String($1, radix:\
    \ 2).filter { $0 == \"1\" }.count\n  })\n  newArr.sort(by: {\n    String($0, radix:\
    \ 2).filter { $0 == \"1\" }.count == String($1, radix: 2).filter { $0 == \"1\"\
    \ }.count\n      ? $0 < $1\n      : false\n  })\n  return newArr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  var ones: [Int] = []\n  var zeros: [Int]\
    \ = []\n  for n in arr {\n    if String(n, radix: 2).characters.filter({$0 ==\
    \ \"1\"}).count > 0 {\n      ones.append(n)\n    } else {\n      zeros.append(n)\n\
    \    }\n  }\n  ones.sortInPlace({\n    if String($0, radix: 2).characters.filter({$0\
    \ == \"1\"}).count > String($1, radix: 2).characters.filter({$0 == \"1\"}).count\
    \ {\n      return true\n    } else if String($0, radix: 2).characters.filter({$0\
    \ == \"1\"}).count == String($1, radix: 2).characters.filter({$0 == \"1\"}).count\
    \ {\n      return $0 < $1\n    } else {\n      return false\n    }\n  })\n  zeros.sortInPlace()\n\
    \  return zeros + ones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbbj5g9fo.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    if String(n, radix: 2).characters.filter({$0 == \"\
    1\"}).count > 0 {\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpbbj5g9fo.swift:22:8: error: value of type\
    \ '[Int]' has no member 'sortInPlace'\n  ones.sortInPlace({\n  ~~~~ ^~~~~~~~~~~\n\
    /tmp/tmpbbj5g9fo.swift:31:9: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \  zeros.sortInPlace()\n  ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (lhs, rhs)\
    \ -> Bool in\n        let lhsNumberOfOnes = lhs.binaryValue.filter({ (char) ->\
    \ Bool in\n            return char == \"1\"\n        }).count\n        let rhsNumberOfOnes\
    \ = rhs.binaryValue.filter({ (char) -> Bool in\n            return char == \"\
    1\"\n        }).count\n        if lhsNumberOfOnes == rhsNumberOfOnes {\n     \
    \       return lhs < rhs\n        }\n        return lhsNumberOfOnes < rhsNumberOfOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpc0jtxf51.swift:14:35: error: value of type 'Int' has no member\
    \ 'binaryValue'\n        let lhsNumberOfOnes = lhs.binaryValue.filter({ (char)\
    \ -> Bool in\n                              ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let oneCount = arr.map { $0.countOnes()\
    \ }\n    let tupleArr = zip(arr, oneCount)\n    let sortedArr = tupleArr.sorted\
    \ { $0.1 == $1.1 ? $0.0 < $1.0 : $0.1 < $1.1 }\n    return sortedArr.map { $0.0\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmplrkiql08.swift:13:33: error: value of type 'Int' has no member\
    \ 'countOnes'\n    let oneCount = arr.map { $0.countOnes() }\n               \
    \              ~~ ^~~~~~~~~\n/tmp/tmplrkiql08.swift:15:21: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    let sortedArr = tupleArr.sorted\
    \ { $0.1 == $1.1 ? $0.0 < $1.0 : $0.1 < $1.1 }\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979833
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let obj = Dictionary(grouping: arr)\
    \ { number in\n        return number.bitString.components(separatedBy: \"1\").count\n\
    \    }\n    return obj.sorted {\n        $0.key > $1.key\n    }.flatMap { $0.value\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpc6gzihgz.swift:14:23: error: value of type 'Int' has no member\
    \ 'bitString'\n        return number.bitString.components(separatedBy: \"1\").count\n\
    \               ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { $0.binary.count\
    \ == $1.binary.count ? $0 < $1 : $0.binary.count < $1.binary.count })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp32z_sr2w.swift:13:32: error: value of type 'Int' has no member\
    \ 'binary'\n    return arr.sorted(by: { $0.binary.count == $1.binary.count ? $0\
    \ < $1 : $0.binary.count < $1.binary.count })\n                            ~~\
    \ ^~~~~~\n/tmp/tmp32z_sr2w.swift:13:51: error: value of type 'Int' has no member\
    \ 'binary'\n    return arr.sorted(by: { $0.binary.count == $1.binary.count ? $0\
    \ < $1 : $0.binary.count < $1.binary.count })\n                              \
    \                 ~~ ^~~~~~\n/tmp/tmp32z_sr2w.swift:13:79: error: value of type\
    \ 'Int' has no member 'binary'\n    return arr.sorted(by: { $0.binary.count ==\
    \ $1.binary.count ? $0 < $1 : $0.binary.count < $1.binary.count })\n         \
    \                                                                  ~~ ^~~~~~\n\
    /tmp/tmp32z_sr2w.swift:13:97: error: value of type 'Int' has no member 'binary'\n\
    \    return arr.sorted(by: { $0.binary.count == $1.binary.count ? $0 < $1 : $0.binary.count\
    \ < $1.binary.count })\n                                                     \
    \                                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    //    guard arr.count > 1 else { return\
    \ arr }\n    //    let ones = arr.reduce([Int]()) {\n    //        let binary\
    \ = String($1, radix: 2)\n    //        var result = $0\n    //        result.append(contentsOf:\
    \ binary.filter { $0 == \"1\" }.map { Int($0) })\n    //        return result\n\
    \    //    }\n    //    return zip(arr, ones).sorted { $0.1 < $1.1 }.map { $0.0\
    \ }\n    return arr.sorted {\n        let a = String($0, radix: 2).filter { $0\
    \ == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var bucketDict = [Int: [Int]]()\n\
    \    var result = [Int]()\n    \n    for n in arr {\n        var binaryDigits\
    \ = getBinaryDigits(n)\n        if !bucketDict.keys.contains(binaryDigits) {\n\
    \            bucketDict[binaryDigits] = [n]\n        } else {\n            bucketDict[binaryDigits]?.append(n)\n\
    \        }\n    }\n    \n    for key in bucketDict.keys.sorted() {\n        var\
    \ bucket = bucketDict[key]!\n        result.append(contentsOf: bucket.sorted())\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp05fijz4l.swift:17:28: error: cannot find 'getBinaryDigits' in scope\n\
    \        var binaryDigits = getBinaryDigits(n)\n                           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (num1, num2) ->\
    \ Bool in\n        let ones1 = num1.decimalToBinary().reduce(0) { $0 + ($1 ==\
    \ \"1\" ? 1 : 0) }\n        let ones2 = num2.decimalToBinary().reduce(0) { $0\
    \ + ($1 == \"1\" ? 1 : 0) }\n        return ones1 == ones2 ? num1 < num2 : ones1\
    \ < ones2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpy_khwrtt.swift:14:26: error: value of type 'Int' has no member\
    \ 'decimalToBinary'\n        let ones1 = num1.decimalToBinary().reduce(0) { $0\
    \ + ($1 == \"1\" ? 1 : 0) }\n                    ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  let zeroes = arr.filter { $0.binaryOnes\
    \ == 0 }\n  let sorted = arr.filter { $0.binaryOnes > 0 }.sorted { $0.binaryOnes\
    \ == $1.binaryOnes ? $0 < $1 : $0.binaryOnes < $1.binaryOnes }\n  return zeroes\
    \ + sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxxuz_5m4.swift:13:32: error: value of type 'Int' has no member\
    \ 'binaryOnes'\n  let zeroes = arr.filter { $0.binaryOnes == 0 }\n           \
    \                 ~~ ^~~~~~~~~~\n/tmp/tmpxxuz_5m4.swift:14:32: error: value of\
    \ type 'Int' has no member 'binaryOnes'\n  let sorted = arr.filter { $0.binaryOnes\
    \ > 0 }.sorted { $0.binaryOnes == $1.binaryOnes ? $0 < $1 : $0.binaryOnes < $1.binaryOnes\
    \ }\n                            ~~ ^~~~~~~~~~\n/tmp/tmpxxuz_5m4.swift:14:61:\
    \ error: value of type 'Int' has no member 'binaryOnes'\n  let sorted = arr.filter\
    \ { $0.binaryOnes > 0 }.sorted { $0.binaryOnes == $1.binaryOnes ? $0 < $1 : $0.binaryOnes\
    \ < $1.binaryOnes }\n                                                        \
    \ ~~ ^~~~~~~~~~\n/tmp/tmpxxuz_5m4.swift:14:78: error: value of type 'Int' has\
    \ no member 'binaryOnes'\n  let sorted = arr.filter { $0.binaryOnes > 0 }.sorted\
    \ { $0.binaryOnes == $1.binaryOnes ? $0 < $1 : $0.binaryOnes < $1.binaryOnes }\n\
    \                                                                          ~~\
    \ ^~~~~~~~~~\n/tmp/tmpxxuz_5m4.swift:14:104: error: value of type 'Int' has no\
    \ member 'binaryOnes'\n  let sorted = arr.filter { $0.binaryOnes > 0 }.sorted\
    \ { $0.binaryOnes == $1.binaryOnes ? $0 < $1 : $0.binaryOnes < $1.binaryOnes }\n\
    \                                                                            \
    \                        ~~ ^~~~~~~~~~\n/tmp/tmpxxuz_5m4.swift:14:120: error:\
    \ value of type 'Int' has no member 'binaryOnes'\n  let sorted = arr.filter {\
    \ $0.binaryOnes > 0 }.sorted { $0.binaryOnes == $1.binaryOnes ? $0 < $1 : $0.binaryOnes\
    \ < $1.binaryOnes }\n                                                        \
    \                                                            ~~ ^~~~~~~~~~\n/tmp/tmpxxuz_5m4.swift:15:17:\
    \ error: cannot convert return expression of type 'String' to return type '[Int]'\n\
    \  return zeroes + sorted\n         ~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard arr.count > 1 else { return\
    \ arr }\n    var result = arr\n    result.sort { (left, right) -> Bool in\n  \
    \      let leftBinary = String(left, radix: 2)\n        let rightBinary = String(right,\
    \ radix: 2)\n        if leftBinary.count != rightBinary.count {\n            return\
    \ leftBinary.count < rightBinary.count\n        }\n        let leftOnes = leftBinary.split(separator:\
    \ \"1\").count - 1\n        let rightOnes = rightBinary.split(separator: \"1\"\
    ).count - 1\n        if leftOnes != rightOnes {\n            return leftOnes <\
    \ rightOnes\n        }\n        return left < right\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvf_cxbm5/tmpvf_cxbm5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5acb9fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5acb6f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5acb6f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5acb6f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf_cxbm5                        0x0000561a54b7a7e4 <unavailable> + 6116

    5    libc.so.6                          0x00002b5acbbe9460 __libc_start_main +
    245

    6    tmpvf_cxbm5                        0x0000561a54b7a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    \n    var temp = [Int]()\n    var\
    \ map = [Int: Int]()\n    var result = [Int]()\n    \n    for i in arr {\n   \
    \     temp.append(i)\n        map[i] = i.nonzeroBitCount\n    }\n    \n    temp.sort()\n\
    \    \n    for i in temp {\n        let count = map[i]!\n        var index = 0\n\
    \        while index < result.count && map[result[index]]! <= count {\n      \
    \      index += 1\n        }\n        result.insert(i, at: index)\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3bt7_3u9/tmp3bt7_3u9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11ec71bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ec412b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ec412988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ec4117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bt7_3u9                        0x00005638217cdb3b <unavailable> + 6971

    5    libc.so.6                          0x00002b11ec907460 __libc_start_main +
    245

    6    tmp3bt7_3u9                        0x00005638217cd5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    \n    return arr.sorted(by: {\n  \
    \      let binaryA = String($0, radix: 2)\n        let binaryB = String($1, radix:\
    \ 2)\n        if binaryA.filter({$0 == \"1\"}).count == binaryB.filter({$0 ==\
    \ \"1\"}).count {\n            return $0 < $1\n        }\n        return binaryA.filter({$0\
    \ == \"1\"}).count < binaryB.filter({$0 == \"1\"}).count\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for i in arr {\n        let count =\
    \ String(i, radix: 2).components(separatedBy: \"1\").count - 1\n        if count\
    \ > 0 {\n            ones.append(i)\n        } else {\n            zeros.append(i)\n\
    \        }\n    }\n    ones.sort(by: {String($0, radix: 2).components(separatedBy:\
    \ \"1\").count - 1 > String($1, radix: 2).components(separatedBy: \"1\").count\
    \ - 1})\n    zeros.sort(by: {$0 > $1})\n    result.append(contentsOf: zeros)\n\
    \    result.append(contentsOf: ones)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpo9nfdnz4.swift:17:41: error: value of type 'String' has no member\
    \ 'components'\n        let count = String(i, radix: 2).components(separatedBy:\
    \ \"1\").count - 1\n                    ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpo9nfdnz4.swift:24:41:\
    \ error: value of type 'String' has no member 'components'\n    ones.sort(by:\
    \ {String($0, radix: 2).components(separatedBy: \"1\").count - 1 > String($1,\
    \ radix: 2).components(separatedBy: \"1\").count - 1})\n                   ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpo9nfdnz4.swift:24:103: error: value of type 'String' has\
    \ no member 'components'\n    ones.sort(by: {String($0, radix: 2).components(separatedBy:\
    \ \"1\").count - 1 > String($1, radix: 2).components(separatedBy: \"1\").count\
    \ - 1})\n                                                                    \
    \             ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sortedArr = arr.sorted { left,\
    \ right in\n        var leftCount = 0\n        var rightCount = 0\n        var\
    \ leftValue = left\n        var rightValue = right\n        while leftValue >\
    \ 0 {\n            leftCount += leftValue % 2\n            leftValue /= 2\n  \
    \      }\n        while rightValue > 0 {\n            rightCount += rightValue\
    \ % 2\n            rightValue /= 2\n        }\n        if leftCount == rightCount\
    \ {\n            return left < right\n        }\n        return leftCount < rightCount\n\
    \    }\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpcv3t9n1h/tmpcv3t9n1h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acebd7c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acebd4bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acebd4ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acebd4b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv3t9n1h                        0x000055ddc9f8b63b <unavailable> + 5691

    5    libc.so.6                          0x00002acebd9af460 __libc_start_main +
    245

    6    tmpcv3t9n1h                        0x000055ddc9f8b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var countedOnes: [(count: Int, value:\
    \ Int)] = []\n    for a in arr {\n        countedOnes.append((count: Integer.countOnes(a),\
    \ value: a))\n    }\n    countedOnes.sort { (lhs, rhs) -> Bool in\n        if\
    \ lhs.count == rhs.count {\n            return lhs.value < rhs.value\n       \
    \ }\n        return lhs.count < rhs.count\n    }\n    return countedOnes.map {\
    \ $0.value }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_887d24v.swift:15:36: error: cannot find 'Integer' in scope\n \
    \       countedOnes.append((count: Integer.countOnes(a), value: a))\n        \
    \                           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let zipped = zip(arr, arr.map { num\
    \ -> (Int, Int) in\n        (num, num.nonzeroBitCount)\n    })\n    return zipped.sorted\
    \ {\n        $0.1.1 == $1.1.1 ? $0.1.0 < $1.1.0 : $0.1.1 < $1.1.1\n    }.map {\
    \ $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpwvkwjs26/tmpwvkwjs26.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac864314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac86400bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac86400b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac86400a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvkwjs26                        0x000055572496269b <unavailable> + 5787

    5    libc.so.6                          0x00002ac864500460 __libc_start_main +
    245

    6    tmpwvkwjs26                        0x0000555724962139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp5lo95x36/tmp5lo95x36.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22ec184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22ebe7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22ebe7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22ebe7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lo95x36                        0x0000562f826d43e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b22ec370460 __libc_start_main +
    245

    6    tmp5lo95x36                        0x0000562f826d3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var zeroOnesArray = [(0, 0)]\n   \
    \ for n in arr {\n        var n = n\n        var ones = 0\n        while n > 0\
    \ {\n            ones += n & 1\n            n >>= 1\n        }\n        zeroOnesArray.append((n,\
    \ ones))\n    }\n    zeroOnesArray.sort {\n        if $0.1 == $1.1 {\n       \
    \     return $0.0 < $1.0\n        }\n        return $0.1 < $1.1\n    }\n    return\
    \ zeroOnesArray.map { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmppviz04w_/tmppviz04w_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b482382dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4823524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4823524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48235237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppviz04w_                        0x000055c07e058704 <unavailable> + 5892

    5    libc.so.6                          0x00002b4823a19460 __libc_start_main +
    245

    6    tmppviz04w_                        0x000055c07e0582e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard !arr.isEmpty else { return []\
    \ }\n    var countMap = [Int: Int]()\n    var sortedArr = [Int]()\n    for i in\
    \ arr {\n        let count = countOnes(from: i)\n        if countMap[count] ==\
    \ nil {\n            countMap[count] = 1\n        } else {\n            countMap[count]!\
    \ += 1\n        }\n    }\n    for (k, v) in countMap {\n        for _ in 0..<v\
    \ {\n            let val = arr.filter { countOnes(from: $0) == k }.sorted().first!\n\
    \            sortedArr.append(val)\n        }\n    }\n    return sortedArr\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpo8k5uuea.swift:17:21: error: cannot find 'countOnes' in scope\n\
    \        let count = countOnes(from: i)\n                    ^~~~~~~~~\n/tmp/tmpo8k5uuea.swift:26:36:\
    \ error: cannot find 'countOnes' in scope\n            let val = arr.filter {\
    \ countOnes(from: $0) == k }.sorted().first!\n                               \
    \    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var arr = arr\n    arr.sort(by: {\n\
    \        let n1: UInt = UInt(bitPattern: $0)\n        let n2: UInt = UInt(bitPattern:\
    \ $1)\n        let bin1 = String(n1, radix: 2)\n        let bin2 = String(n2,\
    \ radix: 2)\n        let ones1 = bin1.filter { $0 == \"1\" }.count\n        let\
    \ ones2 = bin2.filter { $0 == \"1\" }.count\n        if ones1 == ones2 {\n   \
    \         return n1 < n2\n        }\n        return ones1 < ones2\n    })\n  \
    \  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_ej06e3g/tmp_ej06e3g.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e95fa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e95c9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e95c9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e95c9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej06e3g                        0x000055b86eb4c8ab <unavailable> + 6315

    5    libc.so.6                          0x00002b4e96192460 __libc_start_main +
    245

    6    tmp_ej06e3g                        0x000055b86eb4c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard !arr.isEmpty else { return []\
    \ }\n    guard arr.count > 1 else { return arr }\n    guard arr.contains(where:\
    \ { $0 < 0 }) else { return arr.sorted() }\n    return arr.sorted(by: {\n    \
    \    let firstBinary = String($0, radix: 2).count\n        let secondBinary =\
    \ String($1, radix: 2).count\n        return firstBinary > secondBinary ? true\
    \ : firstBinary < secondBinary ? false : $0 < $1\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpmuk5l2je/tmpmuk5l2je.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae39fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae39faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae39faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae39faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmuk5l2je                        0x00005568be7a1754 <unavailable> + 5972

    5    libc.so.6                          0x00002ae39ffe7460 __libc_start_main +
    245

    6    tmpmuk5l2je                        0x00005568be7a1339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        return\
    \ $0.onesCount < $1.onesCount || ($0.onesCount == $1.onesCount && $0 < $1)\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpty9_3hdg.swift:14:19: error: value of type 'Int' has no member\
    \ 'onesCount'\n        return $0.onesCount < $1.onesCount || ($0.onesCount ==\
    \ $1.onesCount && $0 < $1)\n               ~~ ^~~~~~~~~\n/tmp/tmpty9_3hdg.swift:14:34:\
    \ error: value of type 'Int' has no member 'onesCount'\n        return $0.onesCount\
    \ < $1.onesCount || ($0.onesCount == $1.onesCount && $0 < $1)\n              \
    \                ~~ ^~~~~~~~~\n/tmp/tmpty9_3hdg.swift:14:51: error: value of type\
    \ 'Int' has no member 'onesCount'\n        return $0.onesCount < $1.onesCount\
    \ || ($0.onesCount == $1.onesCount && $0 < $1)\n                             \
    \                  ~~ ^~~~~~~~~\n/tmp/tmpty9_3hdg.swift:14:67: error: value of\
    \ type 'Int' has no member 'onesCount'\n        return $0.onesCount < $1.onesCount\
    \ || ($0.onesCount == $1.onesCount && $0 < $1)\n                             \
    \                                  ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var arr = arr\n    arr.sort(by: {\
    \ binary_ones(Int64($0)) != binary_ones(Int64($1)) ? binary_ones(Int64($0)) <\
    \ binary_ones(Int64($1)) : $0 < $1 })\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpwtdlb6gu.swift:14:20: error: cannot find 'binary_ones' in scope\n\
    \    arr.sort(by: { binary_ones(Int64($0)) != binary_ones(Int64($1)) ? binary_ones(Int64($0))\
    \ < binary_ones(Int64($1)) : $0 < $1 })\n                   ^~~~~~~~~~~\n/tmp/tmpwtdlb6gu.swift:14:46:\
    \ error: cannot find 'binary_ones' in scope\n    arr.sort(by: { binary_ones(Int64($0))\
    \ != binary_ones(Int64($1)) ? binary_ones(Int64($0)) < binary_ones(Int64($1))\
    \ : $0 < $1 })\n                                             ^~~~~~~~~~~\n/tmp/tmpwtdlb6gu.swift:14:71:\
    \ error: cannot find 'binary_ones' in scope\n    arr.sort(by: { binary_ones(Int64($0))\
    \ != binary_ones(Int64($1)) ? binary_ones(Int64($0)) < binary_ones(Int64($1))\
    \ : $0 < $1 })\n                                                             \
    \         ^~~~~~~~~~~\n/tmp/tmpwtdlb6gu.swift:14:96: error: cannot find 'binary_ones'\
    \ in scope\n    arr.sort(by: { binary_ones(Int64($0)) != binary_ones(Int64($1))\
    \ ? binary_ones(Int64($0)) < binary_ones(Int64($1)) : $0 < $1 })\n           \
    \                                                                            \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    guard !arr.isEmpty else { return []\
    \ }\n    return arr.sorted(by: {\n        let countOfOnesInBinary = $0.nonzeroBitCount\n\
    \        let countOfOnesInBinary2 = $1.nonzeroBitCount\n        guard countOfOnesInBinary\
    \ != countOfOnesInBinary2 else {\n            return $0 < $1\n        }\n    \
    \    return countOfOnesInBinary < countOfOnesInBinary2\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpei2wnfiy/tmpei2wnfiy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85eec64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85ee95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85ee95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85ee95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpei2wnfiy                        0x000055700463263b <unavailable> + 5691

    5    libc.so.6                          0x00002b85eee50460 __libc_start_main +
    245

    6    tmpei2wnfiy                        0x00005570046320d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var n = arr.map { (a: Int) -> (Int,\
    \ Int) in\n        (a, String(a, radix: 2).split(separator: \"1\").count)\n  \
    \  }\n    n.sort(by: { $0.1 < $1.1 })\n    return n.map { $0.0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_m6aiaqq/tmp_m6aiaqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e8f675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e8f36cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e8f36c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e8f36b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m6aiaqq                        0x0000558d91901854 <unavailable> + 6228

    5    libc.so.6                          0x00002b6e8f861460 __libc_start_main +
    245

    6    tmp_m6aiaqq                        0x0000558d91901439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n\
    \    }\n    return arr.sorted {\n        let decimalValue = $0 < $1\n        let\
    \ binaryValue = String($0, radix: 2).count < String($1, radix: 2).count\n    \
    \    return binaryValue || (decimalValue && !binaryValue)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpbe1jrqk0/tmpbe1jrqk0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25cacb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25ca9afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25ca9af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25ca9ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbe1jrqk0                        0x0000558a2b7275e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b25caea4460 __libc_start_main +
    245

    6    tmpbe1jrqk0                        0x0000558a2b7271c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { sortHelper(a:\
    \ $0, b: $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbsu9vxnc.swift:13:29: error: cannot find 'sortHelper' in scope\n\
    \    return arr.sorted(by: { sortHelper(a: $0, b: $1) })\n                   \
    \         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { (a, b) ->\
    \ Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let countOfOnesA = aBinary.characters.reduce(0) { $1 == \"\
    1\" ? $0 + 1 : $0 }\n        let countOfOnesB = bBinary.characters.reduce(0) {\
    \ $1 == \"1\" ? $0 + 1 : $0 }\n        if countOfOnesA > countOfOnesB {\n    \
    \        return true\n        } else if countOfOnesA < countOfOnesB {\n      \
    \      return false\n        } else {\n            return a < b\n        }\n \
    \   }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpv_mcee5w.swift:16:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        let countOfOnesA = aBinary.characters.reduce(0)\
    \ { $1 == \"1\" ? $0 + 1 : $0 }\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv_mcee5w.swift:17:36:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ countOfOnesB = bBinary.characters.reduce(0) { $1 == \"1\" ? $0 + 1 : $0 }\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = arr.map { (v: Int) ->\
    \ (Int, Int) in\n        return (v, countOnes(v))\n    }\n    sorted.sort { (left,\
    \ right) -> Bool in\n        if left.1 < right.1 {\n            return true\n\
    \        } else if left.1 > right.1 {\n            return false\n        } else\
    \ {\n            return left.0 < right.0\n        }\n    }\n    return sorted.map\
    \ { $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphu2og13u.swift:14:20: error: cannot find 'countOnes' in scope\n\
    \        return (v, countOnes(v))\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var res = arr\n    for i in (0..<res.count).reversed()\
    \ {\n        for j in 0..<i {\n            let b1 = String(res[j], radix: 2)\n\
    \            let b2 = String(res[j + 1], radix: 2)\n            let n1 = b1.filter\
    \ { $0 == \"1\" }.count\n            let n2 = b2.filter { $0 == \"1\" }.count\n\
    \            if n1 > n2 || (n1 == n2 && res[j] > res[j + 1]) {\n             \
    \   res.swapAt(j, j + 1)\n            }\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var dic = [Int: [Int]]()\n    var\
    \ arr = arr\n    arr.sort()\n    arr.forEach { dic[$0, default: []].append($0)\
    \ }\n    var result = [Int]()\n    arr.forEach { result.append(contentsOf: dic[$0]!.sorted())\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpbprupsqj/tmpbprupsqj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313a510c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313a207b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313a207988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313a2067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbprupsqj                        0x000055a2089849a4 <unavailable> + 6564

    5    libc.so.6                          0x00002b313a6fc460 __libc_start_main +
    245

    6    tmpbprupsqj                        0x000055a208984589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (left, right)\
    \ -> Bool in\n        let l = String(left, radix: 2)\n        let r = String(right,\
    \ radix: 2)\n        if l.reduce(0, { $0 + ($1 == \"1\" ? 1 : 0) }) == r.reduce(0,\
    \ { $0 + ($1 == \"1\" ? 1 : 0) }) {\n            return left < right\n       \
    \ }\n        return l.reduce(0, { $0 + ($1 == \"1\" ? 1 : 0) }) < r.reduce(0,\
    \ { $0 + ($1 == \"1\" ? 1 : 0) })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979758
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  var sorted = arr.sorted { $0 < $1 }\n\
    \  sorted.sort {\n    countOnes(n: $0) < countOnes(n: $1)\n  }\n  return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpq0y3e4t7.swift:15:5: error: cannot find 'countOnes' in scope\n\
    \    countOnes(n: $0) < countOnes(n: $1)\n    ^~~~~~~~~\n/tmp/tmpq0y3e4t7.swift:15:24:\
    \ error: cannot find 'countOnes' in scope\n    countOnes(n: $0) < countOnes(n:\
    \ $1)\n                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n  let result = arr.sorted(by: { (lhs,\
    \ rhs) -> Bool in\n    if lhs == rhs {\n      return lhs < rhs\n    } else {\n\
    \      return lhs.onesCount() < rhs.onesCount()\n    }\n  })\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpckpurxw6.swift:17:18: error: value of type 'Int' has no member\
    \ 'onesCount'\n      return lhs.onesCount() < rhs.onesCount()\n             ~~~\
    \ ^~~~~~~~~\n/tmp/tmpckpurxw6.swift:17:36: error: value of type 'Int' has no member\
    \ 'onesCount'\n      return lhs.onesCount() < rhs.onesCount()\n              \
    \                 ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (x, y) -> Bool\
    \ in\n        if (x == y) {\n            return x < y\n        }\n        var\
    \ a = x\n        var b = y\n        var aOnes = 0\n        var bOnes = 0\n   \
    \     while (a > 0) {\n            if (a % 2 == 1) {\n                aOnes +=\
    \ 1\n            }\n            a /= 2\n        }\n        while (b > 0) {\n \
    \           if (b % 2 == 1) {\n                bOnes += 1\n            }\n   \
    \         b /= 2\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmplqkxrmf1/tmplqkxrmf1.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8f4d7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8f4a75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8f4a75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8f4a747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqkxrmf1                        0x000055da9aaff4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002ac8f4f6a460 __libc_start_main +
    245

    6    tmplqkxrmf1                        0x000055da9aaff0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var zeros = [Int]()\n    var ones\
    \ = [Int]()\n    var twos = [Int]()\n    var threes = [Int]()\n    var fours =\
    \ [Int]()\n    var fives = [Int]()\n    var sixes = [Int]()\n    var sevens =\
    \ [Int]()\n    var eights = [Int]()\n    var nines = [Int]()\n    var tens = [Int]()\n\
    \    var elevens = [Int]()\n    var twelves = [Int]()\n    var thirteens = [Int]()\n\
    \    var fourteens = [Int]()\n    var fifteens = [Int]()\n    var sixteen = [Int]()\n\
    \    for x in arr {\n        if x == 0 {\n            zeros.append(x)\n      \
    \  } else if x == 1 {\n            ones.append(x)\n        } else if x == 2 {\n\
    \            twos.append(x)\n        } else if x == 3 {\n            threes.append(x)\n\
    \        } else if x == 4 {\n            fours.append(x)\n        } else if x\
    \ == 5 {\n            fives.append(x)\n        } else if x == 6 {\n          \
    \  sixes.append(x)\n        } else if x == 7 {\n            sevens.append(x)\n\
    \        } else if x == 8 {\n            eights.append(x)\n        } else if x\
    \ == 9 {\n            nines.append(x)\n        } else if x == 10 {\n         \
    \   tens.append(x)\n        } else if x == 11 {\n            elevens.append(x)\n\
    \        } else if x == 12 {\n            twelves.append(x)\n        } else if\
    \ x == 13 {\n            thirteens.append(x)\n        } else if x == 14 {\n  \
    \          fourteens.append(x)\n        } else if x == 15 {\n            fifteens.append(x)\n\
    \        } else if x == 16 {\n            sixteen.append(x)\n        }\n    }\n\
    \    let finalArr = zeros + ones + twos + threes + fours +\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: '/tmp/tmp995p6xkj.swift:68:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    // Your code here\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpyyg4wxvo/tmpyyg4wxvo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade75af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade757f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade757f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade757ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyyg4wxvo                        0x0000555f39a8d3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ade75ce5460 __libc_start_main +
    245

    6    tmpyyg4wxvo                        0x0000555f39a8cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        let\
    \ aOnes = a.filter({ $0 == \"1\" }).count\n        let bOnes = b.filter({ $0 ==\
    \ \"1\" }).count\n        if aOnes == bOnes {\n            return $0 < $1\n  \
    \      }\n        return aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        return aOnes == bOnes ? a < b : aOnes < bOnes\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpwmrejxrr/tmpwmrejxrr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bb9b2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bb9821b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bb9821988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bb98207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmrejxrr                        0x000055954cf6c59b <unavailable> + 5531

    5    libc.so.6                          0x00002b1bb9d16460 __libc_start_main +
    245

    6    tmpwmrejxrr                        0x000055954cf6c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let arr_ = arr.map { Int(String($0,\
    \ radix: 2, uppercase: false).split(separator: \"1\").count) }\n    var temp =\
    \ Array(zip(arr_, arr))\n    temp.sort { $0.0 < $1.0 }\n    return temp.map {\
    \ $0.1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpyw_9bqgg/tmpyw_9bqgg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b518e3c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b518e0bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b518e0bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b518e0bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyw_9bqgg                        0x00005625a1739a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b518e5b2460 __libc_start_main +
    245

    6    tmpyw_9bqgg                        0x00005625a17395f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1659979756
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ count1 = $0.nonzeroBitCount\n        let count2 = $1.nonzeroBitCount\n     \
    \   if count1 == count2 {\n            return $0 < $1\n        }\n        return\
    \ count1 < count2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvi7q7og0/tmpvi7q7og0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83880e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8387de0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8387de0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8387ddf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi7q7og0                        0x000055c9ba35759b <unavailable> + 5531

    5    libc.so.6                          0x00002b83882d5460 __libc_start_main +
    245

    6    tmpvi7q7og0                        0x000055c9ba357039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979756
