language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        case 0.0:\n            result.append(\"E\")\n        default:\n\
    \            result.append(\"not a valid grade\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3w_294rx/tmp3w_294rx.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fc4952c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fc4649b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fc4649988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fc46487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3w_294rx                        0x0000561981f168d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b1fc4b3e460 __libc_start_main +
    245

    6    tmp3w_294rx                        0x0000561981f163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case 3.7...:\n            result.append(\"A\")\n        case 3.3...:\n\
    \            result.append(\"A-\")\n        case 3.0...:\n            result.append(\"\
    B+\")\n        case 2.7...:\n            result.append(\"B\")\n        case 2.3...:\n\
    \            result.append(\"B-\")\n        case 2.0...:\n            result.append(\"\
    C+\")\n        case 1.7...:\n            result.append(\"C\")\n        case 1.3...:\n\
    \            result.append(\"C-\")\n        case 1.0...:\n            result.append(\"\
    D+\")\n        case 0.7...:\n            result.append(\"D\")\n        case 0.0...:\n\
    \            result.append(\"D-\")\n        default:\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpe8j6szia/tmpe8j6szia.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67efe41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67efb38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67efb38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67efb377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8j6szia                        0x00005617a3fff936 <unavailable> + 6454

    5    libc.so.6                          0x00002b67f002d460 __libc_start_main +
    245

    6    tmpe8j6szia                        0x00005617a3fff459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeLetters: [Double: String] = [4.0: \"A+\"\
    , 3.7: \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0: \"C+\",\
    \ 1.7: \"C\", 1.3: \"C-\", 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\", -1.0: \"E\"]\n\
    \    return grades.map({ grade in\n        var letter = \"\"\n        for gradeCutoff\
    \ in gradeLetters.keys.sorted().reversed() {\n            if grade >= gradeCutoff\
    \ {\n                letter = gradeLetters[gradeCutoff]!\n                break\n\
    \            }\n        }\n        return letter\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppsecevmr/tmppsecevmr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af15c33cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af15c033b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af15c033988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af15c0327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppsecevmr                        0x00005604a7338ba6 <unavailable> + 7078

    5    libc.so.6                          0x00002af15c528460 __libc_start_main +
    245

    6    tmppsecevmr                        0x00005604a73386c9 <unavailable> + 5833

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp3bw3h00_.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var array = [String]()\n    var i = 0\n    while\
    \ i < grades.count {\n        let gpa = grades[i]\n        if gpa == 4.0 {\n \
    \           array.append(\"A+\")\n        } else if gpa > 3.7 {\n            array.append(\"\
    A\")\n        } else if gpa > 3.3 {\n            array.append(\"A-\")\n      \
    \  } else if gpa > 3.0 {\n            array.append(\"B+\")\n        } else if\
    \ gpa > 2.7 {\n            array.append(\"B\")\n        } else if gpa > 2.3 {\n\
    \            array.append(\"B-\")\n        } else if gpa > 2.0 {\n           \
    \ array.append(\"C+\")\n        } else if gpa > 1.7 {\n            array.append(\"\
    C\")\n        } else if gpa > 1.3 {\n            array.append(\"C-\")\n      \
    \  } else if gpa > 1.0 {\n            array.append(\"D+\")\n        } else if\
    \ gpa > 0.7 {\n            array.append(\"D\")\n        } else if gpa > 0.0 {\n\
    \            array.append(\"D-\")\n        } else {\n            array.append(\"\
    E\")\n        }\n        i += 1\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014231
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var i = 0\n    for grade\
    \ in grades {\n        if grade > 3.7 {\n            grades[i] = \"A+\"\n    \
    \    } else if grade > 3.3 {\n            grades[i] = \"A\"\n        } else if\
    \ grade > 3.0 {\n            grades[i] = \"A-\"\n        } else if grade > 2.7\
    \ {\n            grades[i] = \"B+\"\n        } else if grade > 2.3 {\n       \
    \     grades[i] = \"B\"\n        } else if grade > 2.0 {\n            grades[i]\
    \ = \"B-\"\n        } else if grade > 1.7 {\n            grades[i] = \"C+\"\n\
    \        } else if grade > 1.3 {\n            grades[i] = \"C\"\n        } else\
    \ if grade > 1.0 {\n            grades[i] = \"C-\"\n        } else if grade >\
    \ 0.7 {\n            grades[i] = \"D+\"\n        } else if grade > 0.0 {\n   \
    \         grades[i] = \"D\"\n        } else if grade == 0.0 {\n            grades[i]\
    \ = \"D-\"\n        } else {\n            grades[i] = \"E\"\n        }\n     \
    \   i += 1\n    }\n    return grades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaosd4wpn.swift:29:25: error: cannot assign value of type 'String'\
    \ to subscript of type 'Double'\n            grades[i] = \"A+\"\n            \
    \            ^~~~\n/tmp/tmpaosd4wpn.swift:31:25: error: cannot assign value of\
    \ type 'String' to subscript of type 'Double'\n            grades[i] = \"A\"\n\
    \                        ^~~\n/tmp/tmpaosd4wpn.swift:33:25: error: cannot assign\
    \ value of type 'String' to subscript of type 'Double'\n            grades[i]\
    \ = \"A-\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:35:25: error:\
    \ cannot assign value of type 'String' to subscript of type 'Double'\n       \
    \     grades[i] = \"B+\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:37:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"B\"\n                        ^~~\n/tmp/tmpaosd4wpn.swift:39:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"B-\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:41:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"C+\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:43:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"C\"\n                        ^~~\n/tmp/tmpaosd4wpn.swift:45:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"C-\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:47:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"D+\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:49:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"D\"\n                        ^~~\n/tmp/tmpaosd4wpn.swift:51:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \            grades[i] = \"D-\"\n                        ^~~~\n/tmp/tmpaosd4wpn.swift:53:25:\
    \ error: cannot assign value of type 'String' to subscript of type 'Double'\n\
    \        "
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades: [String]\
    \ = []\n    grades.sort()\n    for i in grades {\n        switch i {\n       \
    \ case 4.0:\n            letterGrades.append(\"A+\")\n        case 3.7..<4.0:\n\
    \            letterGrades.append(\"A\")\n        case 3.3..<3.7:\n           \
    \ letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n            letterGrades.append(\"\
    B+\")\n        case 2.7..<3.0:\n            letterGrades.append(\"B\")\n     \
    \   case 2.3..<2.7:\n            letterGrades.append(\"B-\")\n        case 2.0..<2.3:\n\
    \            letterGrades.append(\"C+\")\n        case 1.7..<2.0:\n          \
    \  letterGrades.append(\"C\")\n        case 1.3..<1.7:\n            letterGrades.append(\"\
    C-\")\n        case 1.0..<1.3:\n            letterGrades.append(\"D+\")\n    \
    \    case 0.7..<1.0:\n            letterGrades.append(\"D\")\n        case 0.0..<0.7:\n\
    \            letterGrades.append(\"D-\")\n        case 0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"Not a GPA\")\n     \
    \   }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl4l3kc1g/tmpl4l3kc1g.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae53fc3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae53f935b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae53f935988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae53f9347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4l3kc1g                        0x00005622618999f6 <unavailable> + 6646

    5    libc.so.6                          0x00002ae53fe2a460 __libc_start_main +
    245

    6    tmpl4l3kc1g                        0x0000562261899519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output: [String] = []\n    for i in grades\
    \ {\n        if i >= 4.0 {\n            output.append(\"A+\")\n        } else\
    \ if i >= 3.7 {\n            output.append(\"A\")\n        } else if i >= 3.3\
    \ {\n            output.append(\"A-\")\n        } else if i >= 3.0 {\n       \
    \     output.append(\"B+\")\n        } else if i >= 2.7 {\n            output.append(\"\
    B\")\n        } else if i >= 2.3 {\n            output.append(\"B-\")\n      \
    \  } else if i >= 2.0 {\n            output.append(\"C+\")\n        } else if\
    \ i >= 1.7 {\n            output.append(\"C\")\n        } else if i >= 1.3 {\n\
    \            output.append(\"C-\")\n        } else if i >= 1.0 {\n           \
    \ output.append(\"D+\")\n        } else if i >= 0.7 {\n            output.append(\"\
    D\")\n        } else if i >= 0.0 {\n            output.append(\"D-\")\n      \
    \  } else {\n            output.append(\"E\")\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpyodl_x99/tmpyodl_x99.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95047dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af950174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af950174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9501737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyodl_x99                        0x000055904dd807a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af950669460 __libc_start_main +
    245

    6    tmpyodl_x99                        0x000055904dd802c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    var grade = 0.0\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptu7r0gcn/tmptu7r0gcn.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cf33c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cf30bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cf30bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cf30ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptu7r0gcn                        0x0000560f180f47f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b0cf35b0460 __libc_start_main +
    245

    6    tmptu7r0gcn                        0x0000560f180f4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    let grades:\
    \ [Double] = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n  \
    \  let letter: [String] = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\n    for grade in grades {\n        if\
    \ grades.contains(grade) {\n            letterGrades.append(letter[grades.firstIndex(of:\
    \ grade)!])\n        } else {\n            letterGrades.append(\"E\")\n      \
    \  }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkrt04s2o/tmpkrt04s2o.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b050f4dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b050f1d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b050f1d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b050f1d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrt04s2o                        0x000055ce683289a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b050f6ca460 __libc_start_main +
    245

    6    tmpkrt04s2o                        0x000055ce683284c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var result = [String]()\n    \n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.append(\"A+\")\n\
    \        } else if grade > 3.7 {\n            result.append(\"A\")\n        }\
    \ else if grade > 3.3 {\n            result.append(\"A-\")\n        } else if\
    \ grade > 3.0 {\n            result.append(\"B+\")\n        } else if grade >\
    \ 2.7 {\n            result.append(\"B\")\n        } else if grade > 2.3 {\n \
    \           result.append(\"B-\")\n        } else if grade > 2.0 {\n         \
    \   result.append(\"C+\")\n        } else if grade > 1.7 {\n            result.append(\"\
    C\")\n        } else if grade > 1.3 {\n            result.append(\"C-\")\n   \
    \     } else if grade > 1.0 {\n            result.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            result.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let table: [Double: String] = [4.0: \"A+\", 3.7:\
    \ \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0: \"C+\", 1.7:\
    \ \"C\", 1.3: \"C-\", 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\"]\n    var result: [String]\
    \ = []\n    for grade in grades {\n        for (key, value) in table {\n     \
    \       if grade > key {\n                result.append(value)\n             \
    \   break\n            }\n        }\n        if result.count != grades.count {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptawti596/tmptawti596.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718aca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b718a99fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b718a99f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b718a99e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptawti596                        0x0000556e7373ca66 <unavailable> + 6758

    5    libc.so.6                          0x00002b718ae94460 __libc_start_main +
    245

    6    tmptawti596                        0x0000556e7373c589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let letterGrades = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    let\
    \ gradeNumbers = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0,\
    \ 0.0]\n    var result = [String]()\n    var i = 0\n    while i < grades.count\
    \ {\n        var j = 0\n        while j < gradeNumbers.count - 1 {\n         \
    \   if grades[i] > gradeNumbers[j] && grades[i] <= gradeNumbers[j + 1] {\n   \
    \             result.append(letterGrades[j])\n                break\n        \
    \    }\n            j += 1\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpf6c3ow1e/tmpf6c3ow1e.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b973582cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9735523b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9735523988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97355227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6c3ow1e                        0x00005588a4744786 <unavailable> + 6022

    5    libc.so.6                          0x00002b9735a18460 __libc_start_main +
    245

    6    tmpf6c3ow1e                        0x00005588a47442a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let letterGrades = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    let\
    \ gpa = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    var\
    \ numericalGrades = [String]()\n    for g in grades {\n        var letter = \"\
    \"\n        if g >= 4.0 {\n            letter = letterGrades[0]\n        } else\
    \ if g == 0.0 {\n            letter = letterGrades[letterGrades.count - 1]\n \
    \       } else {\n            for i in 0..<gpa.count {\n                if gpa[i]\
    \ < g {\n                    letter = letterGrades[i + 1]\n                  \
    \  break\n                }\n            }\n        }\n        numericalGrades.append(letter)\n\
    \    }\n    return numericalGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppwsyvdbm/tmppwsyvdbm.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9f706bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9f6d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9f6d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9f6d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwsyvdbm                        0x00005652ff594ad6 <unavailable> + 6870

    5    libc.so.6                          0x00002ad9f7257460 __libc_start_main +
    245

    6    tmppwsyvdbm                        0x00005652ff5945f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return [\"A\", \"B\", \"\
    C\", \"D\", \"E\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqi19wvlr/tmpqi19wvlr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fa225ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa1f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa1f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa1f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi19wvlr                        0x000055a9376355e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b8fa244a460 __libc_start_main +
    245

    6    tmpqi19wvlr                        0x000055a937635109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesWithLetter = [String]()\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            gradesWithLetter.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            gradesWithLetter.append(\"\
    A\")\n        } else if grade >= 3.3 {\n            gradesWithLetter.append(\"\
    A-\")\n        } else if grade >= 3.0 {\n            gradesWithLetter.append(\"\
    B+\")\n        } else if grade >= 2.7 {\n            gradesWithLetter.append(\"\
    B\")\n        } else if grade >= 2.3 {\n            gradesWithLetter.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            gradesWithLetter.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            gradesWithLetter.append(\"\
    C\")\n        } else if grade >= 1.3 {\n            gradesWithLetter.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            gradesWithLetter.append(\"\
    D+\")\n        } else if grade >= 0.7 {\n            gradesWithLetter.append(\"\
    D\")\n        } else if grade >= 0.0 {\n            gradesWithLetter.append(\"\
    D-\")\n        } else {\n            gradesWithLetter.append(\"E\")\n        }\n\
    \    }\n    return gradesWithLetter\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzraybg73/tmpzraybg73.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1d7ea3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1d7b9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1d7b9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1d7b997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzraybg73                        0x000055c0810fd7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002af1d808f460 __libc_start_main +
    245

    6    tmpzraybg73                        0x000055c0810fd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { g in\n        switch g {\n\
    \        case 4.0:  return \"A+\"\n        case 3.7..<4.0: return \"A\"\n    \
    \    case 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n  \
    \      case 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n \
    \       case 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n\
    \        case 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n\
    \        case 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n\
    \        default: return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnllcmaqs/tmpnllcmaqs.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad584738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad58442fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad58442f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad58442e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnllcmaqs                        0x000055577f0547b6 <unavailable> + 6070

    5    libc.so.6                          0x00002ad584924460 __libc_start_main +
    245

    6    tmpnllcmaqs                        0x000055577f0542d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n\
    \        switch g {\n        case 4.0:\n            result.append(\"A+\")\n  \
    \      case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphap0kepf/tmphap0kepf.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2a7433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2a712ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2a712a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2a71297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphap0kepf                        0x00005651986db926 <unavailable> + 6438

    5    libc.so.6                          0x00002ac2a761f460 __libc_start_main +
    245

    6    tmphap0kepf                        0x00005651986db449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    var letters = [String]()\n\
    \    for g in grades {\n        if g >= 4.0 {\n            letters.append(\"A+\"\
    )\n        } else if g >= 3.7 {\n            letters.append(\"A\")\n        }\
    \ else if g >= 3.3 {\n            letters.append(\"A-\")\n        } else if g\
    \ >= 3.0 {\n            letters.append(\"B+\")\n        } else if g >= 2.7 {\n\
    \            letters.append(\"B\")\n        } else if g >= 2.3 {\n           \
    \ letters.append(\"B-\")\n        } else if g >= 2.0 {\n            letters.append(\"\
    C+\")\n        } else if g >= 1.7 {\n            letters.append(\"C\")\n     \
    \   } else if g >= 1.3 {\n            letters.append(\"C-\")\n        } else if\
    \ g >= 1.0 {\n            letters.append(\"D+\")\n        } else if g >= 0.7 {\n\
    \            letters.append(\"D\")\n        } else if g >= 0.0 {\n           \
    \ letters.append(\"D-\")\n        } else {\n            letters.append(\"E\")\n\
    \        }\n    }\n    return letters\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpwpqtyg1d/tmpwpqtyg1d.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d01bfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d018f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d018f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d018f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpqtyg1d                        0x0000557e981e37f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8d01de6460 __libc_start_main +
    245

    6    tmpwpqtyg1d                        0x0000557e981e3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmprzaj__9n.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if (grade >= 4.0) {\n            letterGrades.append(\"A+\"\
    )\n        } else if (grade >= 3.7) {\n            letterGrades.append(\"A\")\n\
    \        } else if (grade >= 3.3) {\n            letterGrades.append(\"A-\")\n\
    \        } else if (grade >= 3.0) {\n            letterGrades.append(\"B+\")\n\
    \        } else if (grade >= 2.7) {\n            letterGrades.append(\"B\")\n\
    \        } else if (grade >= 2.3) {\n            letterGrades.append(\"B-\")\n\
    \        } else if (grade >= 2.0) {\n            letterGrades.append(\"C+\")\n\
    \        } else if (grade >= 1.7) {\n            letterGrades.append(\"C\")\n\
    \        } else if (grade >= 1.3) {\n            letterGrades.append(\"C-\")\n\
    \        } else if (grade >= 1.0) {\n            letterGrades.append(\"D+\")\n\
    \        } else if (grade >= 0.7) {\n            letterGrades.append(\"D\")\n\
    \        } else if (grade >= 0.0) {\n            letterGrades.append(\"D-\")\n\
    \        } else {\n            letterGrades.append(\"E\")\n        }\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpwwlcmyd5/tmpwwlcmyd5.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e37ab4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e377abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e377ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e377aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwlcmyd5                        0x000055d3f5e387f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5e37ca0460 __libc_start_main +
    245

    6    tmpwwlcmyd5                        0x000055d3f5e38319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case let x where x >= 4.0: return \"A+\"\n        case let x where x >= 3.7:\
    \ return \"A\"\n        case let x where x >= 3.3: return \"A-\"\n        case\
    \ let x where x >= 3.0: return \"B+\"\n        case let x where x >= 2.7: return\
    \ \"B\"\n        case let x where x >= 2.3: return \"B-\"\n        case let x\
    \ where x >= 2.0: return \"C+\"\n        case let x where x >= 1.7: return \"\
    C\"\n        case let x where x >= 1.3: return \"C-\"\n        case let x where\
    \ x >= 1.0: return \"D+\"\n        case let x where x >= 0.7: return \"D\"\n \
    \       case let x where x >= 0.0: return \"D-\"\n        default: return \"E\"\
    \n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfwizidb5/tmpfwizidb5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14ea330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14ea027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14ea027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14ea0267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwizidb5                        0x0000560c44c91686 <unavailable> + 5766

    5    libc.so.6                          0x00002b14ea51c460 __libc_start_main +
    245

    6    tmpfwizidb5                        0x0000560c44c911a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesList = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            gradesList.append(\"A+\")\n      \
    \  } else if grade > 3.7 {\n            gradesList.append(\"A\")\n        } else\
    \ if grade > 3.3 {\n            gradesList.append(\"A-\")\n        } else if grade\
    \ > 3.0 {\n            gradesList.append(\"B+\")\n        } else if grade > 2.7\
    \ {\n            gradesList.append(\"B\")\n        } else if grade > 2.3 {\n \
    \           gradesList.append(\"B-\")\n        } else if grade > 2.0 {\n     \
    \       gradesList.append(\"C+\")\n        } else if grade > 1.7 {\n         \
    \   gradesList.append(\"C\")\n        } else if grade > 1.3 {\n            gradesList.append(\"\
    C-\")\n        } else if grade > 1.0 {\n            gradesList.append(\"D+\")\n\
    \        } else if grade > 0.7 {\n            gradesList.append(\"D\")\n     \
    \   } else if grade > 0.0 {\n            gradesList.append(\"D-\")\n        }\
    \ else {\n            gradesList.append(\"E\")\n        }\n    }\n    return gradesList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code goes here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6qm38ili/tmp6qm38ili.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e20813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e2050ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e2050a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e205097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qm38ili                        0x0000560598daa5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b0e209ff460 __libc_start_main +
    245

    6    tmp6qm38ili                        0x0000560598daa109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let letters = [\"E\", \"D-\", \"D\", \"D+\", \"\
    C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"]\n    let numberOfLetters\
    \ = letters.count\n    let gpas = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0,\
    \ 3.3, 3.7, 4.0]\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        var index = 0\n        for gpa in gpas {\n            if grade >= gpa\
    \ {\n                index += 1\n            }\n        }\n        letterGrades.append(letters[index\
    \ % numberOfLetters])\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpznyt3vao/tmpznyt3vao.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf8e21bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf8df12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf8df12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf8df117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznyt3vao                        0x000055dfb8b27936 <unavailable> + 6454

    5    libc.so.6                          0x00002adf8e407460 __libc_start_main +
    245

    6    tmpznyt3vao                        0x000055dfb8b27459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpk63efnt0/tmpk63efnt0.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6c408ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6c3d81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6c3d81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6c3d807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk63efnt0                        0x0000555cc8f2bbfc <unavailable> + 7164

    5    libc.so.6                          0x00002ac6c4276460 __libc_start_main +
    245

    6    tmpk63efnt0                        0x0000555cc8f2b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your solution here\n    let grade_map:\
    \ [Double: String] = [4.0: \"A+\", 3.7: \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7:\
    \ \"B\", 2.3: \"B-\", 2.0: \"C+\", 1.7: \"C\", 1.3: \"C-\", 1.0: \"D+\", 0.7:\
    \ \"D\", 0.0: \"D-\", -1.0: \"E\"]\n    var letter_grades: [String] = []\n   \
    \ for grade in grades {\n        if grade_map[grade] != nil {\n            letter_grades.append(grade_map[grade]!)\n\
    \        } else {\n            var grade_values = Array(grade_map.keys).sorted()\n\
    \            for i in 0..<grade_values.count {\n                if grade < grade_values[i]\
    \ {\n                    letter_grades.append(grade_map[grade_values[i]]!)\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfun1xp8h/tmpfun1xp8h.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0440c9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0440991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0440991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04409907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfun1xp8h                        0x0000564473b85cc6 <unavailable> + 7366

    5    libc.so.6                          0x00002b0440e86460 __libc_start_main +
    245

    6    tmpfun1xp8h                        0x0000564473b857e9 <unavailable> + 6121

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade in\n        switch grade\
    \ {\n        case 4.0: return \"A+\"\n        case let g where g > 3.7: return\
    \ \"A\"\n        case let g where g > 3.3: return \"A-\"\n        case let g where\
    \ g > 3.0: return \"B+\"\n        case let g where g > 2.7: return \"B\"\n   \
    \     case let g where g > 2.3: return \"B-\"\n        case let g where g > 2.0:\
    \ return \"C+\"\n        case let g where g > 1.7: return \"C\"\n        case\
    \ let g where g > 1.3: return \"C-\"\n        case let g where g > 1.0: return\
    \ \"D+\"\n        case let g where g > 0.7: return \"D\"\n        case let g where\
    \ g > 0.0: return \"D-\"\n        default: return \"E\"\n        }\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: Write some code to solve this coding challenge\n\
    \    var result = [String]()\n    for grade in grades {\n        switch grade\
    \ {\n        case _ where grade > 4.0:\n            result.append(\"A+\")\n  \
    \      case _ where grade >= 3.7:\n            result.append(\"A\")\n        case\
    \ _ where grade >= 3.3:\n            result.append(\"A-\")\n        case _ where\
    \ grade >= 3.0:\n            result.append(\"B+\")\n        case _ where grade\
    \ >= 2.7:\n            result.append(\"B\")\n        case _ where grade >= 2.3:\n\
    \            result.append(\"B-\")\n        case _ where grade >= 2.0:\n     \
    \       result.append(\"C+\")\n        case _ where grade >= 1.7:\n          \
    \  result.append(\"C\")\n        case _ where grade >= 1.3:\n            result.append(\"\
    C-\")\n        case _ where grade >= 1.0:\n            result.append(\"D+\")\n\
    \        case _ where grade >= 0.7:\n            result.append(\"D\")\n      \
    \  case _ where grade >= 0.0:\n            result.append(\"D-\")\n        default:\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3jqcdd84/tmp3jqcdd84.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47fcc7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47fc973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47fc973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47fc9727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jqcdd84                        0x000055ff2f95e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b47fce68460 __libc_start_main +
    245

    6    tmp3jqcdd84                        0x000055ff2f95e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var result:[String]\
    \ = []\n    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpx2d5e6x7/tmpx2d5e6x7.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4e8ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4e89e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4e89e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4e89e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2d5e6x7                        0x000055ee3eda47a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ac4e8eda460 __libc_start_main +
    245

    6    tmpx2d5e6x7                        0x000055ee3eda42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    let aps = \"A+\"\
    \n    let a = \"A\"\n    let am = \"A-\"\n    let bps = \"B+\"\n    let b = \"\
    B\"\n    let bm = \"B-\"\n    let cps = \"C+\"\n    let c = \"C\"\n    let cm\
    \ = \"C-\"\n    let dps = \"D+\"\n    let d = \"D\"\n    let dm = \"D-\"\n   \
    \ let e = \"E\"\n    for grade in grades {\n        switch grade {\n        case\
    \ _ where grade >= 4.0:\n            result.append(aps)\n        case _ where\
    \ grade > 3.7:\n            result.append(a)\n        case _ where grade > 3.3:\n\
    \            result.append(am)\n        case _ where grade > 3.0:\n          \
    \  result.append(bps)\n        case _ where grade > 2.7:\n            result.append(b)\n\
    \        case _ where grade > 2.3:\n            result.append(bm)\n        case\
    \ _ where grade > 2.0:\n            result.append(cps)\n        case _ where grade\
    \ > 1.7:\n            result.append(c)\n        case _ where grade > 1.3:\n  \
    \          result.append(cm)\n        case _ where grade > 1.0:\n            result.append(dps)\n\
    \        case _ where grade > 0.7:\n            result.append(d)\n        case\
    \ _ where grade > 0.0:\n            result.append(dm)\n        default:\n    \
    \        result.append(e)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: implement this function\n    // Hint:\
    \ use switch and where condition\n    var lettergrades = [String]()\n    for i\
    \ in grades {\n        switch i {\n        case 4.0:\n            lettergrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            lettergrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            lettergrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            lettergrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  lettergrades.append(\"B\")\n        case 2.3..<2.7:\n            lettergrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            lettergrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            lettergrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            lettergrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  lettergrades.append(\"D+\")\n        case 0.7..<1.0:\n            lettergrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            lettergrades.append(\"D-\")\n     \
    \   case 0.0:\n            lettergrades.append(\"E\")\n        default:\n    \
    \        lettergrades.append(\"\")\n        }\n    }\n    return lettergrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6ajz6dg3/tmp6ajz6dg3.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba023fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b9ff36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b9ff36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b9ff357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ajz6dg3                        0x000055a4bdcab926 <unavailable> + 6438

    5    libc.so.6                          0x00002b6ba042b460 __libc_start_main +
    245

    6    tmp6ajz6dg3                        0x000055a4bdcab449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpriy04j7e/tmpriy04j7e.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba644c3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba644936b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba644936988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6449357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpriy04j7e                        0x000055e9bf7657b6 <unavailable> + 6070

    5    libc.so.6                          0x00002ba644e2b460 __libc_start_main +
    245

    6    tmpriy04j7e                        0x000055e9bf7652d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case let x where x >= 4.0:\n            return \"A+\"\n        case let x\
    \ where x >= 3.7:\n            return \"A\"\n        case let x where x >= 3.3:\n\
    \            return \"A-\"\n        case let x where x >= 3.0:\n            return\
    \ \"B+\"\n        case let x where x >= 2.7:\n            return \"B\"\n     \
    \   case let x where x >= 2.3:\n            return \"B-\"\n        case let x\
    \ where x >= 2.0:\n            return \"C+\"\n        case let x where x >= 1.7:\n\
    \            return \"C\"\n        case let x where x >= 1.3:\n            return\
    \ \"C-\"\n        case let x where x >= 1.0:\n            return \"D+\"\n    \
    \    case let x where x >= 0.7:\n            return \"D\"\n        case let x\
    \ where x >= 0.0:\n            return \"D-\"\n        default:\n            return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpejerkggo/tmpejerkggo.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac899c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac899902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac899902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8999017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejerkggo                        0x000055a73341d686 <unavailable> + 5766

    5    libc.so.6                          0x00002ac899df7460 __libc_start_main +
    245

    6    tmpejerkggo                        0x000055a73341d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString: [String] = []\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            gradesString.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            gradesString.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            gradesString.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            gradesString.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            gradesString.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            gradesString.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            gradesString.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            gradesString.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            gradesString.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            gradesString.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            gradesString.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            gradesString.append(\"D-\")\n        } else {\n            gradesString.append(\"\
    E\")\n        }\n    }\n    return gradesString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for i in grades\
    \ {\n        switch i {\n        case 4.0...:\n            result.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            result.append(\"A\")\n        case 3.3..<3.7:\n\
    \            result.append(\"A-\")\n        case 3.0..<3.3:\n            result.append(\"\
    B+\")\n        case 2.7..<3.0:\n            result.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            result.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         result.append(\"C+\")\n        case 1.7..<2.0:\n            result.append(\"\
    C\")\n        case 1.3..<1.7:\n            result.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            result.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         result.append(\"D\")\n        case 0.0..<0.7:\n            result.append(\"\
    D-\")\n        default:\n            result.append(\"E\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpi8_alkpz/tmpi8_alkpz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1692d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1692a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1692a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1692a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8_alkpz                        0x0000562e12456976 <unavailable> + 6518

    5    libc.so.6                          0x00002b1692f7f460 __libc_start_main +
    245

    6    tmpi8_alkpz                        0x0000562e12456499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var newGrades = [String]()\n    for grade in grades\
    \ {\n        switch grade {\n        case let x where x >= 4.0:\n            newGrades.append(\"\
    A+\")\n        case let x where x >= 3.7:\n            newGrades.append(\"A\"\
    )\n        case let x where x >= 3.3:\n            newGrades.append(\"A-\")\n\
    \        case let x where x >= 3.0:\n            newGrades.append(\"B+\")\n  \
    \      case let x where x >= 2.7:\n            newGrades.append(\"B\")\n     \
    \   case let x where x >= 2.3:\n            newGrades.append(\"B-\")\n       \
    \ case let x where x >= 2.0:\n            newGrades.append(\"C+\")\n        case\
    \ let x where x >= 1.7:\n            newGrades.append(\"C\")\n        case let\
    \ x where x >= 1.3:\n            newGrades.append(\"C-\")\n        case let x\
    \ where x >= 1.0:\n            newGrades.append(\"D+\")\n        case let x where\
    \ x >= 0.7:\n            newGrades.append(\"D\")\n        case let x where x >=\
    \ 0.0:\n            newGrades.append(\"D-\")\n        default:\n            newGrades.append(\"\
    E\")\n        }\n    }\n    return newGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpx_lajs_x/tmpx_lajs_x.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b351c398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b351c08fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b351c08f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b351c08e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_lajs_x                        0x00005558df6147f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b351c584460 __libc_start_main +
    245

    6    tmpx_lajs_x                        0x00005558df614319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // write your code here\n    let dictionary = [4.0:\
    \ \"A+\", 3.7: \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0:\
    \ \"C+\", 1.7: \"C\", 1.3: \"C-\", 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\"]\n   \
    \ var result: [String] = []\n    for grade in grades {\n        if grade == 0.0\
    \ {\n            result.append(\"E\")\n        } else {\n            for (key,\
    \ value) in dictionary {\n                if grade >= key {\n                \
    \    result.append(value)\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm5vuy3s_/tmpm5vuy3s_.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b646ed37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b646ea2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b646ea2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b646ea2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5vuy3s_                        0x00005642fba329c6 <unavailable> + 6598

    5    libc.so.6                          0x00002b646ef23460 __libc_start_main +
    245

    6    tmpm5vuy3s_                        0x00005642fba324e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var res = [String]()\n    for i in grades {\n \
    \       switch i {\n        case 4.0:\n            res.append(\"A+\")\n      \
    \  case let x where x >= 3.7:\n            res.append(\"A\")\n        case let\
    \ x where x >= 3.3:\n            res.append(\"A-\")\n        case let x where\
    \ x >= 3.0:\n            res.append(\"B+\")\n        case let x where x >= 2.7:\n\
    \            res.append(\"B\")\n        case let x where x >= 2.3:\n         \
    \   res.append(\"B-\")\n        case let x where x >= 2.0:\n            res.append(\"\
    C+\")\n        case let x where x >= 1.7:\n            res.append(\"C\")\n   \
    \     case let x where x >= 1.3:\n            res.append(\"C-\")\n        case\
    \ let x where x >= 1.0:\n            res.append(\"D+\")\n        case let x where\
    \ x >= 0.7:\n            res.append(\"D\")\n        case let x where x >= 0.0:\n\
    \            res.append(\"D-\")\n        default:\n            res.append(\"E\"\
    )\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2kboyk0l/tmp2kboyk0l.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5d0d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5d0a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5d0a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5d0a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kboyk0l                        0x0000563ddced07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002af5d0ef8460 __libc_start_main +
    245

    6    tmp2kboyk0l                        0x0000563ddced0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"You should study a bit more\")\n        }\n   \
    \ }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphqkgpqmx/tmphqkgpqmx.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab910e6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab910b64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab910b64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab910b637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqkgpqmx                        0x000055a4f7e02926 <unavailable> + 6438

    5    libc.so.6                          0x00002ab911059460 __libc_start_main +
    245

    6    tmphqkgpqmx                        0x000055a4f7e02449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case _ where grade > 3.7:\n            letterGrades.append(\"A\"\
    )\n        case _ where grade > 3.3:\n            letterGrades.append(\"A-\")\n\
    \        case _ where grade > 3.0:\n            letterGrades.append(\"B+\")\n\
    \        case _ where grade > 2.7:\n            letterGrades.append(\"B\")\n \
    \       case _ where grade > 2.3:\n            letterGrades.append(\"B-\")\n \
    \       case _ where grade > 2.0:\n            letterGrades.append(\"C+\")\n \
    \       case _ where grade > 1.7:\n            letterGrades.append(\"C\")\n  \
    \      case _ where grade > 1.3:\n            letterGrades.append(\"C-\")\n  \
    \      case _ where grade > 1.0:\n            letterGrades.append(\"D+\")\n  \
    \      case _ where grade > 0.7:\n            letterGrades.append(\"D\")\n   \
    \     case _ where grade > 0.0:\n            letterGrades.append(\"D-\")\n   \
    \     default:\n            letterGrades.append(\"E\")\n        }\n    }\n   \
    \ return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code goes here\n    var letterGradeArray\
    \ = [String]()\n    for grade in grades {\n        switch grade {\n        case\
    \ _ where grade >= 4.0:\n            letterGradeArray.append(\"A+\")\n       \
    \ case _ where grade >= 3.7:\n            letterGradeArray.append(\"A\")\n   \
    \     case _ where grade >= 3.3:\n            letterGradeArray.append(\"A-\")\n\
    \        case _ where grade >= 3.0:\n            letterGradeArray.append(\"B+\"\
    )\n        case _ where grade >= 2.7:\n            letterGradeArray.append(\"\
    B\")\n        case _ where grade >= 2.3:\n            letterGradeArray.append(\"\
    B-\")\n        case _ where grade >= 2.0:\n            letterGradeArray.append(\"\
    C+\")\n        case _ where grade >= 1.7:\n            letterGradeArray.append(\"\
    C\")\n        case _ where grade >= 1.3:\n            letterGradeArray.append(\"\
    C-\")\n        case _ where grade >= 1.0:\n            letterGradeArray.append(\"\
    D+\")\n        case _ where grade >= 0.7:\n            letterGradeArray.append(\"\
    D\")\n        case _ where grade >= 0.0:\n            letterGradeArray.append(\"\
    D-\")\n        default:\n            letterGradeArray.append(\"E\")\n        }\n\
    \    }\n    return letterGradeArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprrpdkcxl/tmprrpdkcxl.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc5efd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5eccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc5eccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc5ecca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrpdkcxl                        0x0000560cb5d277f6 <unavailable> + 6134

    5    libc.so.6                          0x00002abc5f1c0460 __libc_start_main +
    245

    6    tmprrpdkcxl                        0x0000560cb5d27319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrade = [\"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\"]\n    var gpa: [Double] = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0]\n    var letterList: [String] = []\n    let last =\
    \ grades.count\n    var i = 0\n    while i < last {\n        var j = 0\n     \
    \   while j < gpa.count {\n            if grades[i] > gpa[j] {\n             \
    \   letterList.append(letterGrade[j])\n                break\n            }\n\
    \            else if j == gpa.count - 1 {\n                letterList.append(letterGrade[12])\n\
    \            }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ letterList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqmzlcnqf/tmpqmzlcnqf.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf1d76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf1d465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf1d465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf1d4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmzlcnqf                        0x0000557eb084e736 <unavailable> + 5942

    5    libc.so.6                          0x00002aaf1d95a460 __libc_start_main +
    245

    6    tmpqmzlcnqf                        0x0000557eb084e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzqc7qfdr/tmpzqc7qfdr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67efeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67ece1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67ece1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67ece07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqc7qfdr                        0x0000559fdf6475e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba67f1d6460 __libc_start_main +
    245

    6    tmpzqc7qfdr                        0x0000559fdf647109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letterGrades.append(\"A\")\n \
    \       } else if grade > 3.3 {\n            letterGrades.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            letterGrades.append(\"B+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return [\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnhrgkw4s/tmpnhrgkw4s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad82ba92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad82b789b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad82b789988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad82b7887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhrgkw4s                        0x000056106eb61721 <unavailable> + 5921

    5    libc.so.6                          0x00002ad82bc7e460 __libc_start_main +
    245

    6    tmpnhrgkw4s                        0x000056106eb61109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var grade = [String]()\n\
    \    for i in grades {\n        if i >= 4.0 {\n            grade.append(\"A+\"\
    )\n        } else if i >= 3.7 {\n            grade.append(\"A\")\n        } else\
    \ if i >= 3.3 {\n            grade.append(\"A-\")\n        } else if i >= 3.0\
    \ {\n            grade.append(\"B+\")\n        } else if i >= 2.7 {\n        \
    \    grade.append(\"B\")\n        } else if i >= 2.3 {\n            grade.append(\"\
    B-\")\n        } else if i >= 2.0 {\n            grade.append(\"C+\")\n      \
    \  } else if i >= 1.7 {\n            grade.append(\"C\")\n        } else if i\
    \ >= 1.3 {\n            grade.append(\"C-\")\n        } else if i >= 1.0 {\n \
    \           grade.append(\"D+\")\n        } else if i >= 0.7 {\n            grade.append(\"\
    D\")\n        } else if i >= 0.0 {\n            grade.append(\"D-\")\n       \
    \ } else {\n            grade.append(\"E\")\n        }\n    }\n    return grade\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5l9y9ta8/tmp5l9y9ta8.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae11a0eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae119de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae119de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae119de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5l9y9ta8                        0x0000555d56f4c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae11a2da460 __libc_start_main +
    245

    6    tmp5l9y9ta8                        0x0000555d56f4c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let grades_scale = [\n        4.0: \"A+\",\n  \
    \      3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"\
    B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n      \
    \  1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\"\
    ,\n    ]\n    var grades_res: [String] = []\n    for grade in grades {\n     \
    \   if let letter_grade = grades_scale.first(where: {$0.key <= grade})?.value\
    \ {\n            grades_res.append(letter_grade)\n        } else {\n         \
    \   grades_res.append(\"E\")\n        }\n    }\n    return grades_res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpt5y5puux/tmpt5y5puux.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74d4204c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74d3efbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74d3efb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74d3efa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5y5puux                        0x0000557dbf9ee8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b74d43f0460 __libc_start_main +
    245

    6    tmpt5y5puux                        0x0000557dbf9ee419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    var result: [String] = []\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            result.append(\"A\")\n  \
    \      } else if grade >= 3.3 {\n            result.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            result.append(\"B+\")\n        } else if\
    \ grade >= 2.7 {\n            result.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            result.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            result.append(\"C+\")\n        } else if grade >= 1.7 {\n       \
    \     result.append(\"C\")\n        } else if grade >= 1.3 {\n            result.append(\"\
    C-\")\n        } else if grade >= 1.0 {\n            result.append(\"D+\")\n \
    \       } else if grade >= 0.7 {\n            result.append(\"D\")\n        }\
    \ else if grade >= 0.0 {\n            result.append(\"D-\")\n        } else {\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpq6wp_t5l/tmpq6wp_t5l.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a4380dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a43504b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a43504988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a435037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6wp_t5l                        0x0000563be2fa57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8a439f9460 __libc_start_main +
    245

    6    tmpq6wp_t5l                        0x0000563be2fa52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade in\n        let gpa =\
    \ min(max(grade, 0), 4)\n        if gpa == 4 {\n            return \"A+\"\n  \
    \      } else if gpa > 3.7 {\n            return \"A\"\n        } else if gpa\
    \ > 3.3 {\n            return \"A-\"\n        } else if gpa > 3 {\n          \
    \  return \"B+\"\n        } else if gpa > 2.7 {\n            return \"B\"\n  \
    \      } else if gpa > 2.3 {\n            return \"B-\"\n        } else if gpa\
    \ > 2 {\n            return \"C+\"\n        } else if gpa > 1.7 {\n          \
    \  return \"C\"\n        } else if gpa > 1.3 {\n            return \"C-\"\n  \
    \      } else if gpa > 1 {\n            return \"D+\"\n        } else if gpa >\
    \ 0.7 {\n            return \"D\"\n        } else if gpa > 0 {\n            return\
    \ \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            result.append(\"A+\"\
    )\n        case (3.7 + 0.1)...4.0:\n            result.append(\"A\")\n       \
    \ case (3.3 + 0.1)...3.7:\n            result.append(\"A-\")\n        case (3.0\
    \ + 0.1)...3.3:\n            result.append(\"B+\")\n        case (2.7 + 0.1)...3.0:\n\
    \            result.append(\"B\")\n        case (2.3 + 0.1)...2.7:\n         \
    \   result.append(\"B-\")\n        case (2.0 + 0.1)...2.3:\n            result.append(\"\
    C+\")\n        case (1.7 + 0.1)...2.0:\n            result.append(\"C\")\n   \
    \     case (1.3 + 0.1)...1.7:\n            result.append(\"C-\")\n        case\
    \ (1.0 + 0.1)...1.3:\n            result.append(\"D+\")\n        case (0.7 + 0.1)...1.0:\n\
    \            result.append(\"D\")\n        case (0.0 + 0.1)...0.7:\n         \
    \   result.append(\"D-\")\n        case 0.0:\n            result.append(\"E\"\
    )\n        default:\n            result.append(\"out of range\")\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprboembn_/tmprboembn_.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad23d016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad23cd0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad23cd0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad23cd0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprboembn_                        0x000055a09207af24 <unavailable> + 7972

    5    libc.so.6                          0x00002ad23d202460 __libc_start_main +
    245

    6    tmprboembn_                        0x000055a09207a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeAsLetter = grades.map {\n        switch\
    \ $0 {\n        case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n\
    \            return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n\
    \        case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n\
    \            return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n\
    \        case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n\
    \            return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n\
    \        case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n    return gradeAsLetter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp18g_30ei/tmp18g_30ei.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90261f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9025eecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9025eec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9025eeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18g_30ei                        0x00005647842c77b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b90263e1460 __libc_start_main +
    245

    6    tmp18g_30ei                        0x00005647842c72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var result: [String]\
    \ = []\n    for i in grades {\n        if i == 4.0 {\n            result.append(\"\
    A+\")\n        } else if i > 3.7 {\n            result.append(\"A\")\n       \
    \ } else if i > 3.3 {\n            result.append(\"A-\")\n        } else if i\
    \ > 3.0 {\n            result.append(\"B+\")\n        } else if i > 2.7 {\n  \
    \          result.append(\"B\")\n        } else if i > 2.3 {\n            result.append(\"\
    B-\")\n        } else if i > 2.0 {\n            result.append(\"C+\")\n      \
    \  } else if i > 1.7 {\n            result.append(\"C\")\n        } else if i\
    \ > 1.3 {\n            result.append(\"C-\")\n        } else if i > 1.0 {\n  \
    \          result.append(\"D+\")\n        } else if i > 0.7 {\n            result.append(\"\
    D\")\n        } else if i > 0.0 {\n            result.append(\"D-\")\n       \
    \ } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0...:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   default:\n            letterGrades.append(\"E\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn52m_8ac/tmpn52m_8ac.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60a6063c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60a5d5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60a5d5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60a5d597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn52m_8ac                        0x000055c0df8279c6 <unavailable> + 6598

    5    libc.so.6                          0x00002b60a624f460 __libc_start_main +
    245

    6    tmpn52m_8ac                        0x000055c0df8274e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var results = [String]()\n  for grade in grades {\n\
    \    switch grade {\n    case 4.0:\n      results.append(\"A+\")\n    case let\
    \ x where x > 3.7:\n      results.append(\"A\")\n    case let x where x > 3.3:\n\
    \      results.append(\"A-\")\n    case let x where x > 3.0:\n      results.append(\"\
    B+\")\n    case let x where x > 2.7:\n      results.append(\"B\")\n    case let\
    \ x where x > 2.3:\n      results.append(\"B-\")\n    case let x where x > 2.0:\n\
    \      results.append(\"C+\")\n    case let x where x > 1.7:\n      results.append(\"\
    C\")\n    case let x where x > 1.3:\n      results.append(\"C-\")\n    case let\
    \ x where x > 1.0:\n      results.append(\"D+\")\n    case let x where x > 0.7:\n\
    \      results.append(\"D\")\n    case let x where x > 0.0:\n      results.append(\"\
    D-\")\n    default:\n      results.append(\"E\")\n    }\n  }\n  return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxz159fh_/tmpxz159fh_.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9995ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a99651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a99651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a996507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz159fh_                        0x000055e14d06c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a99b46460 __libc_start_main +
    245

    6    tmpxz159fh_                        0x000055e14d06c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case let g where g >= 4.0:\n            return \"A+\"\n        case let g\
    \ where g >= 3.7:\n            return \"A\"\n        case let g where g >= 3.3:\n\
    \            return \"A-\"\n        case let g where g >= 3.0:\n            return\
    \ \"B+\"\n        case let g where g >= 2.7:\n            return \"B\"\n     \
    \   case let g where g >= 2.3:\n            return \"B-\"\n        case let g\
    \ where g >= 2.0:\n            return \"C+\"\n        case let g where g >= 1.7:\n\
    \            return \"C\"\n        case let g where g >= 1.3:\n            return\
    \ \"C-\"\n        case let g where g >= 1.0:\n            return \"D+\"\n    \
    \    case let g where g >= 0.7:\n            return \"D\"\n        case let g\
    \ where g >= 0.0:\n            return \"D-\"\n        default:\n            return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmps7wd6nb6/tmps7wd6nb6.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebad98bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebad682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebad682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebad6817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7wd6nb6                        0x00005630f0390686 <unavailable> + 5766

    5    libc.so.6                          0x00002aebadb77460 __libc_start_main +
    245

    6    tmps7wd6nb6                        0x00005630f03901a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for i in grades {\n\
    \        switch i {\n        case 4.0:\n            result.append(\"A+\")\n  \
    \      case _ where i >= 3.7:\n            result.append(\"A\")\n        case\
    \ _ where i >= 3.3:\n            result.append(\"A-\")\n        case _ where i\
    \ >= 3.0:\n            result.append(\"B+\")\n        case _ where i >= 2.7:\n\
    \            result.append(\"B\")\n        case _ where i >= 2.3:\n          \
    \  result.append(\"B-\")\n        case _ where i >= 2.0:\n            result.append(\"\
    C+\")\n        case _ where i >= 1.7:\n            result.append(\"C\")\n    \
    \    case _ where i >= 1.3:\n            result.append(\"C-\")\n        case _\
    \ where i >= 1.0:\n            result.append(\"D+\")\n        case _ where i >=\
    \ 0.7:\n            result.append(\"D\")\n        case _ where i >= 0.0:\n   \
    \         result.append(\"D-\")\n        default:\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpum0kv1o1/tmpum0kv1o1.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e3446ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e34161b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e34161988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e341607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum0kv1o1                        0x00005634045197f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b9e34656460 __libc_start_main +
    245

    6    tmpum0kv1o1                        0x0000563404519319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2q46o5co/tmp2q46o5co.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b453c021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b453bd18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b453bd18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b453bd177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2q46o5co                        0x000056375593d5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b453c20d460 __libc_start_main +
    245

    6    tmp2q46o5co                        0x000056375593d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grade = \"\"\n    var grades = [String]()\n\
    \    for i in grades {\n        if i >= 4.0 {\n            grade = \"A+\"\n  \
    \      } else if i > 3.7 {\n            grade = \"A\"\n        } else if i > 3.3\
    \ {\n            grade = \"A-\"\n        } else if i > 3.0 {\n            grade\
    \ = \"B+\"\n        } else if i > 2.7 {\n            grade = \"B\"\n        }\
    \ else if i > 2.3 {\n            grade = \"B-\"\n        } else if i > 2.0 {\n\
    \            grade = \"C+\"\n        } else if i > 1.7 {\n            grade =\
    \ \"C\"\n        } else if i > 1.3 {\n            grade = \"C-\"\n        } else\
    \ if i > 1.0 {\n            grade = \"D+\"\n        } else if i > 0.7 {\n    \
    \        grade = \"D\"\n        } else if i > 0.0 {\n            grade = \"D-\"\
    \n        } else {\n            grade = \"E\"\n        }\n        grades.append(grade)\n\
    \    }\n    return grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe3cy75jx.swift:28:14: error: binary operator '>=' cannot be applied\
    \ to operands of type 'String' and 'Double'\n        if i >= 4.0 {\n         \
    \  ~ ^  ~~~\n/tmp/tmpe3cy75jx.swift:30:21: error: binary operator '>' cannot be\
    \ applied to operands of type 'String' and 'Double'\n        } else if i > 3.7\
    \ {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:32:21: error: binary operator\
    \ '>' cannot be applied to operands of type 'String' and 'Double'\n        } else\
    \ if i > 3.3 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:34:21: error:\
    \ binary operator '>' cannot be applied to operands of type 'String' and 'Double'\n\
    \        } else if i > 3.0 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:36:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 2.7 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:38:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 2.3 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:40:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 2.0 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:42:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 1.7 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:44:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 1.3 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:46:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 1.0 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:48:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 0.7 {\n                  ~ ^ ~~~\n/tmp/tmpe3cy75jx.swift:50:21:\
    \ error: binary operator '>' cannot be applied to operands of type 'String' and\
    \ 'Double'\n        } else if i > 0.0 {\n                  ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzqc7qfdr/tmpzqc7qfdr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67efeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67ece1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67ece1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67ece07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqc7qfdr                        0x0000559fdf6475e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba67f1d6460 __libc_start_main +
    245

    6    tmpzqc7qfdr                        0x0000559fdf647109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // TODO: Implement this!\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpv7p4bw5y/tmpv7p4bw5y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a4e71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a4b68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a4b68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a4b677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7p4bw5y                        0x00005608b9fda5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ad9a505d460 __libc_start_main +
    245

    6    tmpv7p4bw5y                        0x00005608b9fda109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for i in grades\
    \ {\n        if i == 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if i >= 3.7 {\n            letterGrades.append(\"A\")\n        } else if\
    \ i >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if i >=\
    \ 3.0 {\n            letterGrades.append(\"B+\")\n        } else if i >= 2.7 {\n\
    \            letterGrades.append(\"B\")\n        } else if i >= 2.3 {\n      \
    \      letterGrades.append(\"B-\")\n        } else if i >= 2.0 {\n           \
    \ letterGrades.append(\"C+\")\n        } else if i >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if i >= 1.3 {\n            letterGrades.append(\"C-\")\n\
    \        } else if i >= 1.0 {\n            letterGrades.append(\"D+\")\n     \
    \   } else if i >= 0.7 {\n            letterGrades.append(\"D\")\n        } else\
    \ if i > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n  \
    \          letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3_2u6cux/tmp3_2u6cux.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba532b5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba532851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba532851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5328507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_2u6cux                        0x00005603ab2277f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba532d46460 __libc_start_main +
    245

    6    tmp3_2u6cux                        0x00005603ab227319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let grades = grades.map {$0/4}\n    let maxValue\
    \ = grades.max() ?? 0\n    var results = [String]()\n    for grade in grades {\n\
    \        switch grade/maxValue {\n        case 0..<0.08:\n            results.append(\"\
    E\")\n        case 0.08..<0.18:\n            results.append(\"D-\")\n        case\
    \ 0.18..<0.28:\n            results.append(\"D\")\n        case 0.28..<0.38:\n\
    \            results.append(\"D+\")\n        case 0.38..<0.48:\n            results.append(\"\
    C-\")\n        case 0.48..<0.58:\n            results.append(\"C\")\n        case\
    \ 0.58..<0.68:\n            results.append(\"C+\")\n        case 0.68..<0.78:\n\
    \            results.append(\"B-\")\n        case 0.78..<0.88:\n            results.append(\"\
    B\")\n        case 0.88..<0.98:\n            results.append(\"B+\")\n        case\
    \ 0.98..<1.08:\n            results.append(\"A-\")\n        case 1.08..<1.18:\n\
    \            results.append(\"A\")\n        default:\n            results.append(\"\
    A+\")\n        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu0sk_qs5/tmpu0sk_qs5.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01bbd19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01bba10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01bba10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01bba0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0sk_qs5                        0x000055b3079c8a36 <unavailable> + 6710

    5    libc.so.6                          0x00002b01bbf05460 __libc_start_main +
    245

    6    tmpu0sk_qs5                        0x000055b3079c8559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var result: [String] = []\n  for i in grades {\n\
    \    if i == 4.0 {\n      result.append(\"A+\")\n    } else if i > 3.7 {\n   \
    \   result.append(\"A\")\n    } else if i > 3.3 {\n      result.append(\"A-\"\
    )\n    } else if i > 3.0 {\n      result.append(\"B+\")\n    } else if i > 2.7\
    \ {\n      result.append(\"B\")\n    } else if i > 2.3 {\n      result.append(\"\
    B-\")\n    } else if i > 2.0 {\n      result.append(\"C+\")\n    } else if i >\
    \ 1.7 {\n      result.append(\"C\")\n    } else if i > 1.3 {\n      result.append(\"\
    C-\")\n    } else if i > 1.0 {\n      result.append(\"D+\")\n    } else if i >\
    \ 0.7 {\n      result.append(\"D\")\n    } else if i > 0.0 {\n      result.append(\"\
    D-\")\n    } else {\n      result.append(\"E\")\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        var grade_string = \"\"\n        switch grade {\n        case\
    \ 4.0:\n            grade_string = \"A+\"\n        case 3.7..<4.0:\n         \
    \   grade_string = \"A\"\n        case 3.3..<3.7:\n            grade_string =\
    \ \"A-\"\n        case 3.0..<3.3:\n            grade_string = \"B+\"\n       \
    \ case 2.7..<3.0:\n            grade_string = \"B\"\n        case 2.3..<2.7:\n\
    \            grade_string = \"B-\"\n        case 2.0..<2.3:\n            grade_string\
    \ = \"C+\"\n        case 1.7..<2.0:\n            grade_string = \"C\"\n      \
    \  case 1.3..<1.7:\n            grade_string = \"C-\"\n        case 1.0..<1.3:\n\
    \            grade_string = \"D+\"\n        case 0.7..<1.0:\n            grade_string\
    \ = \"D\"\n        case 0.0..<0.7:\n            grade_string = \"D-\"\n      \
    \  case 0.0:\n            grade_string = \"E\"\n        default:\n           \
    \ grade_string = \"Invalid GPA\"\n        }\n        letter_grades.append(grade_string)\n\
    \    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphs8laqtc/tmphs8laqtc.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b834aa91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b834a788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b834a788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b834a7877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs8laqtc                        0x0000559c0dd2b926 <unavailable> + 6438

    5    libc.so.6                          0x00002b834ac7d460 __libc_start_main +
    245

    6    tmphs8laqtc                        0x0000559c0dd2b449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeDict: [Double: String] = [\n        4.0:\
    \ \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n \
    \       2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7:\
    \ \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n  \
    \      0.0: \"D-\",\n        -1.0: \"E\",\n    ]\n    return grades.map { grade\
    \ in\n        for (key, value) in gradeDict {\n            if key <= grade {\n\
    \                return value\n            }\n        }\n        return \"E\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp44j441a3/tmp44j441a3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d3bdd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d3bacdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d3bacd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d3bacc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44j441a3                        0x000055cf17e958a6 <unavailable> + 6310

    5    libc.so.6                          0x00002b3d3bfc2460 __libc_start_main +
    245

    6    tmp44j441a3                        0x000055cf17e953c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for i in\
    \ grades {\n        if i >= 4.0 {\n            letter_grades.append(\"A+\")\n\
    \        } else if i >= 3.7 {\n            letter_grades.append(\"A\")\n     \
    \   } else if i >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if i >= 3.0 {\n            letter_grades.append(\"B+\")\n        } else\
    \ if i >= 2.7 {\n            letter_grades.append(\"B\")\n        } else if i\
    \ >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else if i >= 2.0\
    \ {\n            letter_grades.append(\"C+\")\n        } else if i >= 1.7 {\n\
    \            letter_grades.append(\"C\")\n        } else if i >= 1.3 {\n     \
    \       letter_grades.append(\"C-\")\n        } else if i >= 1.0 {\n         \
    \   letter_grades.append(\"D+\")\n        } else if i >= 0.7 {\n            letter_grades.append(\"\
    D\")\n        } else if i >= 0.0 {\n            letter_grades.append(\"D-\")\n\
    \        } else {\n            letter_grades.append(\"E\")\n        }\n    }\n\
    \    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpb1uce5ig/tmpb1uce5ig.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf71b44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf7183bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf7183b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf7183a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1uce5ig                        0x000055be5dae37a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aaf71d30460 __libc_start_main +
    245

    6    tmpb1uce5ig                        0x000055be5dae32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Define the letter grades\n    let letter_grades\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"]\n    // Define the numerical grades\n    let numerical_grades\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    //\
    \ Define an empty array of strings to store our grades\n    var letter_grades_array\
    \ = [String]()\n    // Loop through the grades array\n    for i in grades {\n\
    \        // Loop through the numerical grades array\n        for j in 0..<numerical_grades.count\
    \ {\n            // If the grade is less than the current numerical grade, append\
    \ the current letter grade to the array\n            if i < numerical_grades[j]\
    \ {\n                letter_grades_array.append(letter_grades[j])\n          \
    \      break\n            }\n        }\n    }\n    // Return the letter grades\
    \ array\n    return letter_grades_array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl3atsmsj/tmpl3atsmsj.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e522ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e51fc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e51fc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e51fc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3atsmsj                        0x0000558b2785da86 <unavailable> + 6790

    5    libc.so.6                          0x00002b5e524b8460 __libc_start_main +
    245

    6    tmpl3atsmsj                        0x0000558b2785d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({\n        if $0 == 4.0 {\n \
    \           return \"A+\"\n        } else if $0 > 3.7 {\n            return \"\
    A\"\n        } else if $0 > 3.3 {\n            return \"A-\"\n        } else if\
    \ $0 > 3.0 {\n            return \"B+\"\n        } else if $0 > 2.7 {\n      \
    \      return \"B\"\n        } else if $0 > 2.3 {\n            return \"B-\"\n\
    \        } else if $0 > 2.0 {\n            return \"C+\"\n        } else if $0\
    \ > 1.7 {\n            return \"C\"\n        } else if $0 > 1.3 {\n          \
    \  return \"C-\"\n        } else if $0 > 1.0 {\n            return \"D+\"\n  \
    \      } else if $0 > 0.7 {\n            return \"D\"\n        } else if $0 >\
    \ 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\
    \n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzd4bshlr/tmpzd4bshlr.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26274e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26271dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26271da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26271d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4bshlr                        0x000056416df8a7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b26276cf460 __libc_start_main +
    245

    6    tmpzd4bshlr                        0x000056416df8a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrade = [String]()\n    for i in grades\
    \ {\n        if i == 4.0 {\n            letterGrade.append(\"A+\")\n        }\n\
    \        else if i > 3.7 {\n            letterGrade.append(\"A\")\n        }\n\
    \        else if i > 3.3 {\n            letterGrade.append(\"A-\")\n        }\n\
    \        else if i > 3.0 {\n            letterGrade.append(\"B+\")\n        }\n\
    \        else if i > 2.7 {\n            letterGrade.append(\"B\")\n        }\n\
    \        else if i > 2.3 {\n            letterGrade.append(\"B-\")\n        }\n\
    \        else if i > 2.0 {\n            letterGrade.append(\"C+\")\n        }\n\
    \        else if i > 1.7 {\n            letterGrade.append(\"C\")\n        }\n\
    \        else if i > 1.3 {\n            letterGrade.append(\"C-\")\n        }\n\
    \        else if i > 1.0 {\n            letterGrade.append(\"D+\")\n        }\n\
    \        else if i > 0.7 {\n            letterGrade.append(\"D\")\n        }\n\
    \        else if i > 0.0 {\n            letterGrade.append(\"D-\")\n        }\n\
    \        else {\n            letterGrade.append(\"E\")\n        }\n    }\n   \
    \ return letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade in\n        switch grade\
    \ {\n        case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n \
    \           return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n\
    \        case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n\
    \            return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n\
    \        case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n\
    \            return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n\
    \        case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptkvmw_id/tmptkvmw_id.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9046c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8d3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8d3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8d3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptkvmw_id                        0x0000564dae5857b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b27f9232460 __libc_start_main +
    245

    6    tmptkvmw_id                        0x0000564dae5852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            grades.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            grades.append(\"A\")\n        case 3.3..<3.7:\n\
    \            grades.append(\"A-\")\n        case 3.0..<3.3:\n            grades.append(\"\
    B+\")\n        case 2.7..<3.0:\n            grades.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            grades.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         grades.append(\"C+\")\n        case 1.7..<2.0:\n            grades.append(\"\
    C\")\n        case 1.3..<1.7:\n            grades.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            grades.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         grades.append(\"D\")\n        case 0.0..<0.7:\n            grades.append(\"\
    D-\")\n        case 0.0:\n            grades.append(\"E\")\n        default:\n\
    \            grades.append(\"Invalid\")\n        }\n    }\n    return grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7c4axlma.swift:28:14: error: expression pattern of type 'Double'\
    \ cannot match values of type 'String'\n        case 4.0:\n             ^\n/tmp/tmp7c4axlma.swift:28:14:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case 4.0:\n             ^\n/tmp/tmp7c4axlma.swift:30:14:\
    \ error: expression pattern of type 'Range<Double>' cannot match values of type\
    \ 'String'\n        case 3.7..<4.0:\n             ^\n/tmp/tmp7c4axlma.swift:30:14:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case 3.7..<4.0:\n             ^\n/tmp/tmp7c4axlma.swift:32:14:\
    \ error: expression pattern of type 'Range<Double>' cannot match values of type\
    \ 'String'\n        case 3.3..<3.7:\n             ^\n/tmp/tmp7c4axlma.swift:32:14:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case 3.3..<3.7:\n             ^\n/tmp/tmp7c4axlma.swift:34:14:\
    \ error: expression pattern of type 'Range<Double>' cannot match values of type\
    \ 'String'\n        case 3.0..<3.3:\n             ^\n/tmp/tmp7c4axlma.swift:34:14:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case 3.0..<3.3:\n             ^\n/tmp/tmp7c4axlma.swift:36:14:\
    \ error: expression pattern of type 'Range<Double>' cannot match values of type\
    \ 'String'\n        case 2.7..<3.0:\n             ^\n/tmp/tmp7c4axlma.swift:36:14:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case 2.7..<3.0:\n             ^\n/tmp/tmp7c4axlma.swift:38:14:\
    \ error: expression pattern of type 'Range<Double>' cannot match values of type\
    \ 'String'\n        case 2.3..<2.7:\n             ^\n/tmp/tmp7c4axlma.swift:38:14:\
    \ note: overloads for '~=' exist with these partially matching parameter lists:\
    \ (Substring, String)\n        case 2.3..<2.7:\n             ^\n/tmp/tmp7c4axlma.swift:40:14:\
    \ error: expression pattern of type 'Range<Double>' cannot match values of type\
    \ 'String'\n        case"
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({\n        if $0 >= 4.0 {\n \
    \           return \"A+\"\n        } else if $0 >= 3.7 {\n            return \"\
    A\"\n        } else if $0 >= 3.3 {\n            return \"A-\"\n        } else\
    \ if $0 >= 3.0 {\n            return \"B+\"\n        } else if $0 >= 2.7 {\n \
    \           return \"B\"\n        } else if $0 >= 2.3 {\n            return \"\
    B-\"\n        } else if $0 >= 2.0 {\n            return \"C+\"\n        } else\
    \ if $0 >= 1.7 {\n            return \"C\"\n        } else if $0 >= 1.3 {\n  \
    \          return \"C-\"\n        } else if $0 >= 1.0 {\n            return \"\
    D+\"\n        } else if $0 >= 0.7 {\n            return \"D\"\n        } else\
    \ if $0 >= 0.0 {\n            return \"D-\"\n        } else {\n            return\
    \ \"E\"\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdaqkag4o/tmpdaqkag4o.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f0b8d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f0b5cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f0b5ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f0b5c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdaqkag4o                        0x000055f0ba3dc686 <unavailable> + 5766

    5    libc.so.6                          0x00002b7f0babf460 __libc_start_main +
    245

    6    tmpdaqkag4o                        0x000055f0ba3dc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for GPA in\
    \ grades {\n        var letterGrade: String\n        switch GPA {\n        case\
    \ 4.0:\n            letterGrade = \"A+\"\n        case 3.7..<4.0:\n          \
    \  letterGrade = \"A\"\n        case 3.3..<3.7:\n            letterGrade = \"\
    A-\"\n        case 3.0..<3.3:\n            letterGrade = \"B+\"\n        case\
    \ 2.7..<3.0:\n            letterGrade = \"B\"\n        case 2.3..<2.7:\n     \
    \       letterGrade = \"B-\"\n        case 2.0..<2.3:\n            letterGrade\
    \ = \"C+\"\n        case 1.7..<2.0:\n            letterGrade = \"C\"\n       \
    \ case 1.3..<1.7:\n            letterGrade = \"C-\"\n        case 1.0..<1.3:\n\
    \            letterGrade = \"D+\"\n        case 0.7..<1.0:\n            letterGrade\
    \ = \"D\"\n        case 0.0..<0.7:\n            letterGrade = \"D-\"\n       \
    \ default:\n            letterGrade = \"E\"\n        }\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_toi8p71/tmp_toi8p71.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b336564bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3365342b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3365342988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33653417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_toi8p71                        0x0000556f389048d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b3365837460 __libc_start_main +
    245

    6    tmp_toi8p71                        0x0000556f389043f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for value\
    \ in grades {\n        switch value {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case let value where value > 3.7:\n            letter_grades.append(\"\
    A\")\n        case let value where value > 3.3:\n            letter_grades.append(\"\
    A-\")\n        case let value where value > 3.0:\n            letter_grades.append(\"\
    B+\")\n        case let value where value > 2.7:\n            letter_grades.append(\"\
    B\")\n        case let value where value > 2.3:\n            letter_grades.append(\"\
    B-\")\n        case let value where value > 2.0:\n            letter_grades.append(\"\
    C+\")\n        case let value where value > 1.7:\n            letter_grades.append(\"\
    C\")\n        case let value where value > 1.3:\n            letter_grades.append(\"\
    C-\")\n        case let value where value > 1.0:\n            letter_grades.append(\"\
    D+\")\n        case let value where value > 0.7:\n            letter_grades.append(\"\
    D\")\n        case let value where value > 0.0:\n            letter_grades.append(\"\
    D-\")\n        default:\n            letter_grades.append(\"E\")\n        }\n\
    \    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            output.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            output.append(\"A\")\n        case 3.3..<3.7:\n\
    \            output.append(\"A-\")\n        case 3.0..<3.3:\n            output.append(\"\
    B+\")\n        case 2.7..<3.0:\n            output.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            output.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         output.append(\"C+\")\n        case 1.7..<2.0:\n            output.append(\"\
    C\")\n        case 1.3..<1.7:\n            output.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            output.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         output.append(\"D\")\n        case 0.0..<0.7:\n            output.append(\"\
    D-\")\n        default:\n            output.append(\"E\")\n        }\n    }\n\
    \    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnh_86mks/tmpnh_86mks.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8894e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8891dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8891da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8891d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnh_86mks                        0x00005557e62b98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ae8896cf460 __libc_start_main +
    245

    6    tmpnh_86mks                        0x00005557e62b93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmprzaj__9n.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"Error\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl_layvbg/tmpl_layvbg.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a9310cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a92e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a92e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a92e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_layvbg                        0x000055b12d9078d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b3a932f8460 __libc_start_main +
    245

    6    tmpl_layvbg                        0x000055b12d9073f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades: [String]\
    \ = []\n    var index = 0\n    while index < grades.count {\n        if grades[index]\
    \ == 4.0 {\n            letterGrades.append(\"A+\")\n        } else if grades[index]\
    \ >= 3.7 {\n            letterGrades.append(\"A\")\n        } else if grades[index]\
    \ >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if grades[index]\
    \ >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grades[index]\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if grades[index]\
    \ >= 2.3 {\n            letterGrades.append(\"B-\")\n        } else if grades[index]\
    \ >= 2.0 {\n            letterGrades.append(\"C+\")\n        } else if grades[index]\
    \ >= 1.7 {\n            letterGrades.append(\"C\")\n        } else if grades[index]\
    \ >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else if grades[index]\
    \ >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if grades[index]\
    \ >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grades[index]\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n        index += 1\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp19b57fmy/tmp19b57fmy.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23fb095c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23fad8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23fad8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23fad8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19b57fmy                        0x000055caac32d6e6 <unavailable> + 5862

    5    libc.so.6                          0x00002b23fb281460 __libc_start_main +
    245

    6    tmp19b57fmy                        0x000055caac32d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var arr = [String]()\n    \n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            arr.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            arr.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            arr.append(\"A-\")\n        } else if grade >=\
    \ 3.0 {\n            arr.append(\"B+\")\n        } else if grade >= 2.7 {\n  \
    \          arr.append(\"B\")\n        } else if grade >= 2.3 {\n            arr.append(\"\
    B-\")\n        } else if grade >= 2.0 {\n            arr.append(\"C+\")\n    \
    \    } else if grade >= 1.7 {\n            arr.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            arr.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            arr.append(\"D+\")\n        } else if grade >= 0.7 {\n      \
    \      arr.append(\"D\")\n        } else if grade >= 0.0 {\n            arr.append(\"\
    D-\")\n        } else {\n            arr.append(\"E\")\n        }\n    }\n   \
    \ \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp31g1pnmi/tmp31g1pnmi.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76ec2f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76ebfefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76ebfef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76ebfee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31g1pnmi                        0x00005643edeb67f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b76ec4e4460 __libc_start_main +
    245

    6    tmp31g1pnmi                        0x00005643edeb6319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp3bw3h00_.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var results = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            results.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            results.append(\"A\")\n        } else if\
    \ grade >= 3.3 {\n            results.append(\"A-\")\n        } else if grade\
    \ >= 3.0 {\n            results.append(\"B+\")\n        } else if grade >= 2.7\
    \ {\n            results.append(\"B\")\n        } else if grade >= 2.3 {\n   \
    \         results.append(\"B-\")\n        } else if grade >= 2.0 {\n         \
    \   results.append(\"C+\")\n        } else if grade >= 1.7 {\n            results.append(\"\
    C\")\n        } else if grade >= 1.3 {\n            results.append(\"C-\")\n \
    \       } else if grade >= 1.0 {\n            results.append(\"D+\")\n       \
    \ } else if grade >= 0.7 {\n            results.append(\"D\")\n        } else\
    \ if grade >= 0.0 {\n            results.append(\"D-\")\n        } else {\n  \
    \          results.append(\"E\")\n        }\n    }\n    return results\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu4n6jnqa/tmpu4n6jnqa.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad255338c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25502fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25502f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25502e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4n6jnqa                        0x000056431994c7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ad255524460 __libc_start_main +
    245

    6    tmpu4n6jnqa                        0x000056431994c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  let letterGrades = grades.map { gpa in\n    switch\
    \ gpa {\n    case 4.0:\n      return \"A+\"\n    case 3.7...4.0:\n      return\
    \ \"A\"\n    case 3.3...3.7:\n      return \"A-\"\n    case 3.0...3.3:\n     \
    \ return \"B+\"\n    case 2.7...3.0:\n      return \"B\"\n    case 2.3...2.7:\n\
    \      return \"B-\"\n    case 2.0...2.3:\n      return \"C+\"\n    case 1.7...2.0:\n\
    \      return \"C\"\n    case 1.3...1.7:\n      return \"C-\"\n    case 1.0...1.3:\n\
    \      return \"D+\"\n    case 0.7...1.0:\n      return \"D\"\n    case 0.0...0.7:\n\
    \      return \"D-\"\n    case 0.0:\n      return \"E\"\n    default:\n      return\
    \ \"Invalid GPA\"\n    }\n  }\n  return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpcnn1lhvm/tmpcnn1lhvm.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7158a48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b715873fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b715873f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b715873e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnn1lhvm                        0x000055672938a7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b7158c34460 __libc_start_main +
    245

    6    tmpcnn1lhvm                        0x000055672938a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let score = [\n        [\"A+\", 4.0],\n       \
    \ [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\"\
    , 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n\
    \        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n     \
    \   [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ]\n    var result: [String] = []\n\
    \    for grade in grades {\n        for index in 0..<score.count {\n         \
    \   if score[index][1] <= grade {\n                result.append(score[index][0])\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv3y2l208.swift:43:28: error: cannot convert value of type 'Any'\
    \ to expected argument type 'Double'\n            if score[index][1] <= grade\
    \ {\n                           ^\n                               as! Double\n\
    /tmp/tmpv3y2l208.swift:44:43: error: cannot convert value of type 'Any' to expected\
    \ argument type 'String'\n                result.append(score[index][0])\n   \
    \                                       ^\n                                  \
    \            as! String\n"
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var result = [String]()\n\
    \    for i in grades {\n        if i == 4.0 {\n            result.append(\"A+\"\
    )\n        } else if i > 3.7 {\n            result.append(\"A\")\n        } else\
    \ if i > 3.3 {\n            result.append(\"A-\")\n        } else if i > 3.0 {\n\
    \            result.append(\"B+\")\n        } else if i > 2.7 {\n            result.append(\"\
    B\")\n        } else if i > 2.3 {\n            result.append(\"B-\")\n       \
    \ } else if i > 2.0 {\n            result.append(\"C+\")\n        } else if i\
    \ > 1.7 {\n            result.append(\"C\")\n        } else if i > 1.3 {\n   \
    \         result.append(\"C-\")\n        } else if i > 1.0 {\n            result.append(\"\
    D+\")\n        } else if i > 0.7 {\n            result.append(\"D\")\n       \
    \ } else if i > 0.0 {\n            result.append(\"D-\")\n        } else {\n \
    \           result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var rtn = [String]()\n    for grade in grades {\n\
    \        if grade == 4.0 {\n            rtn.append(\"A+\")\n        } else if\
    \ grade > 3.7 {\n            rtn.append(\"A\")\n        } else if grade > 3.3\
    \ {\n            rtn.append(\"A-\")\n        } else if grade > 3.0 {\n       \
    \     rtn.append(\"B+\")\n        } else if grade > 2.7 {\n            rtn.append(\"\
    B\")\n        } else if grade > 2.3 {\n            rtn.append(\"B-\")\n      \
    \  } else if grade > 2.0 {\n            rtn.append(\"C+\")\n        } else if\
    \ grade > 1.7 {\n            rtn.append(\"C\")\n        } else if grade > 1.3\
    \ {\n            rtn.append(\"C-\")\n        } else if grade > 1.0 {\n       \
    \     rtn.append(\"D+\")\n        } else if grade > 0.7 {\n            rtn.append(\"\
    D\")\n        } else if grade > 0.0 {\n            rtn.append(\"D-\")\n      \
    \  } else {\n            rtn.append(\"E\")\n        }\n    }\n    return rtn\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            output.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            output.append(\"A\")\n        } else if grade\
    \ > 3.3 {\n            output.append(\"A-\")\n        } else if grade > 3.0 {\n\
    \            output.append(\"B+\")\n        } else if grade > 2.7 {\n        \
    \    output.append(\"B\")\n        } else if grade > 2.3 {\n            output.append(\"\
    B-\")\n        } else if grade > 2.0 {\n            output.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            output.append(\"C\")\n        } else\
    \ if grade > 1.3 {\n            output.append(\"C-\")\n        } else if grade\
    \ > 1.0 {\n            output.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            output.append(\"D\")\n        } else if grade > 0.0 {\n         \
    \   output.append(\"D-\")\n        } else {\n            output.append(\"E\")\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvrh85czo/tmpvrh85czo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad78afb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad78acadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad78acad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad78acac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrh85czo                        0x000055ae16cda5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ad78b1a2460 __libc_start_main +
    245

    6    tmpvrh85czo                        0x000055ae16cda109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for gpa in\
    \ grades {\n        switch gpa {\n        case _ where gpa >= 4.0:\n         \
    \   letterGrades.append(\"A+\")\n        case _ where gpa >= 3.7:\n          \
    \  letterGrades.append(\"A\")\n        case _ where gpa >= 3.3:\n            letterGrades.append(\"\
    A-\")\n        case _ where gpa >= 3.0:\n            letterGrades.append(\"B+\"\
    )\n        case _ where gpa >= 2.7:\n            letterGrades.append(\"B\")\n\
    \        case _ where gpa >= 2.3:\n            letterGrades.append(\"B-\")\n \
    \       case _ where gpa >= 2.0:\n            letterGrades.append(\"C+\")\n  \
    \      case _ where gpa >= 1.7:\n            letterGrades.append(\"C\")\n    \
    \    case _ where gpa >= 1.3:\n            letterGrades.append(\"C-\")\n     \
    \   case _ where gpa >= 1.0:\n            letterGrades.append(\"D+\")\n      \
    \  case _ where gpa >= 0.7:\n            letterGrades.append(\"D\")\n        case\
    \ _ where gpa >= 0.0:\n            letterGrades.append(\"D-\")\n        default:\n\
    \            letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpy10yydvo/tmpy10yydvo.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adca7154c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adca6e4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adca6e4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adca6e4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy10yydvo                        0x000055b7a89f27a6 <unavailable> + 6054

    5    libc.so.6                          0x00002adca7340460 __libc_start_main +
    245

    6    tmpy10yydvo                        0x000055b7a89f22c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    var arrGrades:[String]\
    \ = []\n    for grade in grades {\n        switch grade {\n        case 4.0:\n\
    \            arrGrades.append(\"A+\")\n        case let x where x > 3.7:\n   \
    \         arrGrades.append(\"A\")\n        case let x where x > 3.3:\n       \
    \     arrGrades.append(\"A-\")\n        case let x where x > 3.0:\n          \
    \  arrGrades.append(\"B+\")\n        case let x where x > 2.7:\n            arrGrades.append(\"\
    B\")\n        case let x where x > 2.3:\n            arrGrades.append(\"B-\")\n\
    \        case let x where x > 2.0:\n            arrGrades.append(\"C+\")\n   \
    \     case let x where x > 1.7:\n            arrGrades.append(\"C\")\n       \
    \ case let x where x > 1.3:\n            arrGrades.append(\"C-\")\n        case\
    \ let x where x > 1.0:\n            arrGrades.append(\"D+\")\n        case let\
    \ x where x > 0.7:\n            arrGrades.append(\"D\")\n        case let x where\
    \ x > 0.0:\n            arrGrades.append(\"D-\")\n        default:\n         \
    \   arrGrades.append(\"E\")\n        }\n    }\n    return arrGrades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if (grade >= 4.0) {\n            letterGrades.append(\"\
    A+\")\n        } else if (grade >= 3.7) {\n            letterGrades.append(\"\
    A\")\n        } else if (grade >= 3.3) {\n            letterGrades.append(\"A-\"\
    )\n        } else if (grade >= 3.0) {\n            letterGrades.append(\"B+\"\
    )\n        } else if (grade >= 2.7) {\n            letterGrades.append(\"B\")\n\
    \        } else if (grade >= 2.3) {\n            letterGrades.append(\"B-\")\n\
    \        } else if (grade >= 2.0) {\n            letterGrades.append(\"C+\")\n\
    \        } else if (grade >= 1.7) {\n            letterGrades.append(\"C\")\n\
    \        } else if (grade >= 1.3) {\n            letterGrades.append(\"C-\")\n\
    \        } else if (grade >= 1.0) {\n            letterGrades.append(\"D+\")\n\
    \        } else if (grade >= 0.7) {\n            letterGrades.append(\"D\")\n\
    \        } else if (grade >= 0.0) {\n            letterGrades.append(\"D-\")\n\
    \        } else {\n            letterGrades.append(\"E\")\n        }\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1a5bub8z/tmp1a5bub8z.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7ee248c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7edf3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7edf3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7edf3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1a5bub8z                        0x00005590630f27a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad7ee434460 __libc_start_main +
    245

    6    tmp1a5bub8z                        0x00005590630f22c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var outputGrades = [String]()\n\
    \    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n            outputGrades.append(\"\
    A+\")\n        }\n        else if grades[i] >= 3.7 {\n            outputGrades.append(\"\
    A\")\n        }\n        else if grades[i] >= 3.3 {\n            outputGrades.append(\"\
    A-\")\n        }\n        else if grades[i] >= 3.0 {\n            outputGrades.append(\"\
    B+\")\n        }\n        else if grades[i] >= 2.7 {\n            outputGrades.append(\"\
    B\")\n        }\n        else if grades[i] >= 2.3 {\n            outputGrades.append(\"\
    B-\")\n        }\n        else if grades[i] >= 2.0 {\n            outputGrades.append(\"\
    C+\")\n        }\n        else if grades[i] >= 1.7 {\n            outputGrades.append(\"\
    C\")\n        }\n        else if grades[i] >= 1.3 {\n            outputGrades.append(\"\
    C-\")\n        }\n        else if grades[i] >= 1.0 {\n            outputGrades.append(\"\
    D+\")\n        }\n        else if grades[i] >= 0.7 {\n            outputGrades.append(\"\
    D\")\n        }\n        else if grades[i] >= 0.0 {\n            outputGrades.append(\"\
    D-\")\n        }\n        else {\n            outputGrades.append(\"E\")\n   \
    \     }\n    }\n    return outputGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfcnibcd7/tmpfcnibcd7.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b102b524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b102b21bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b102b21b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b102b21a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcnibcd7                        0x00005599bdde38c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b102b710460 __libc_start_main +
    245

    6    tmpfcnibcd7                        0x00005599bdde33e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrade = [String]()\n    for value in\
    \ grades {\n        if value == 4.0 {\n            letterGrade.append(\"A+\")\n\
    \        } else if value > 3.7 {\n            letterGrade.append(\"A\")\n    \
    \    } else if value > 3.3 {\n            letterGrade.append(\"A-\")\n       \
    \ } else if value > 3.0 {\n            letterGrade.append(\"B+\")\n        } else\
    \ if value > 2.7 {\n            letterGrade.append(\"B\")\n        } else if value\
    \ > 2.3 {\n            letterGrade.append(\"B-\")\n        } else if value > 2.0\
    \ {\n            letterGrade.append(\"C+\")\n        } else if value > 1.7 {\n\
    \            letterGrade.append(\"C\")\n        } else if value > 1.3 {\n    \
    \        letterGrade.append(\"C-\")\n        } else if value > 1.0 {\n       \
    \     letterGrade.append(\"D+\")\n        } else if value > 0.7 {\n          \
    \  letterGrade.append(\"D\")\n        } else if value > 0.0 {\n            letterGrade.append(\"\
    D-\")\n        } else {\n            letterGrade.append(\"E\")\n        }\n  \
    \  }\n    return letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            output.append(\"A+\"\
    )\n        case 3.7..<4.0:\n            output.append(\"A\")\n        case 3.3..<3.7:\n\
    \            output.append(\"A-\")\n        case 3.0..<3.3:\n            output.append(\"\
    B+\")\n        case 2.7..<3.0:\n            output.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            output.append(\"B-\")\n        case 2.0..<2.3:\n   \
    \         output.append(\"C+\")\n        case 1.7..<2.0:\n            output.append(\"\
    C\")\n        case 1.3..<1.7:\n            output.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            output.append(\"D+\")\n        case 0.7..<1.0:\n   \
    \         output.append(\"D\")\n        case 0.0..<0.7:\n            output.append(\"\
    D-\")\n        default:\n            output.append(\"E\")\n        }\n    }\n\
    \    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnh_86mks/tmpnh_86mks.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8894e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8891dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8891da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8891d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnh_86mks                        0x00005557e62b98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ae8896cf460 __libc_start_main +
    245

    6    tmpnh_86mks                        0x00005557e62b93f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7..<4.0:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3..<3.7:\n            gradesArray.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7..<3.0:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3..<2.7:\n            gradesArray.append(\"\
    B-\")\n        case 2.0..<2.3:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7..<2.0:\n            gradesArray.append(\"C\")\n        case 1.3..<1.7:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0..<1.3:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7..<1.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0..<0.7:\n            gradesArray.append(\"D-\")\n      \
    \  case 0.0:\n            gradesArray.append(\"E\")\n        default:\n      \
    \      print(\"Error: invalid GPA\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfptt4my_/tmpfptt4my_.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a1c452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a1c149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a1c149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a1c1487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfptt4my_                        0x000055b202c199f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b9a1c63e460 __libc_start_main +
    245

    6    tmpfptt4my_                        0x000055b202c19519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var results = [String]()\n    \n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            results.append(\"A+\")\n\
    \        } else if grade > 3.7 {\n            results.append(\"A\")\n        }\
    \ else if grade > 3.3 {\n            results.append(\"A-\")\n        } else if\
    \ grade > 3.0 {\n            results.append(\"B+\")\n        } else if grade >\
    \ 2.7 {\n            results.append(\"B\")\n        } else if grade > 2.3 {\n\
    \            results.append(\"B-\")\n        } else if grade > 2.0 {\n       \
    \     results.append(\"C+\")\n        } else if grade > 1.7 {\n            results.append(\"\
    C\")\n        } else if grade > 1.3 {\n            results.append(\"C-\")\n  \
    \      } else if grade > 1.0 {\n            results.append(\"D+\")\n        }\
    \ else if grade > 0.7 {\n            results.append(\"D\")\n        } else if\
    \ grade > 0.0 {\n            results.append(\"D-\")\n        } else {\n      \
    \      results.append(\"E\")\n        }\n    }\n    \n    return results\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_arr = [String]()\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            grades_arr.append(\"A+\")\n      \
    \  } else if grade >= 3.7 {\n            grades_arr.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            grades_arr.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            grades_arr.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            grades_arr.append(\"B\")\n        } else if grade >= 2.3\
    \ {\n            grades_arr.append(\"B-\")\n        } else if grade >= 2.0 {\n\
    \            grades_arr.append(\"C+\")\n        } else if grade >= 1.7 {\n   \
    \         grades_arr.append(\"C\")\n        } else if grade >= 1.3 {\n       \
    \     grades_arr.append(\"C-\")\n        } else if grade >= 1.0 {\n          \
    \  grades_arr.append(\"D+\")\n        } else if grade >= 0.7 {\n            grades_arr.append(\"\
    D\")\n        } else if grade >= 0.0 {\n            grades_arr.append(\"D-\")\n\
    \        } else {\n            grades_arr.append(\"E\")\n        }\n    }\n  \
    \  return grades_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0frvqdcb/tmp0frvqdcb.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1033bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10338b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10338b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10338b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0frvqdcb                        0x000055ba327d97f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b1033daa460 __libc_start_main +
    245

    6    tmp0frvqdcb                        0x000055ba327d9319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for index\
    \ in 0...grades.count - 1 {\n        let grade = grades[index]\n        if grade\
    \ == 4.0 {\n            letterGrades.append(\"A+\")\n        } else if grade >=\
    \ 3.7 {\n            letterGrades.append(\"A\")\n        } else if grade >= 3.3\
    \ {\n            letterGrades.append(\"A-\")\n        } else if grade >= 3.0 {\n\
    \            letterGrades.append(\"B+\")\n        } else if grade >= 2.7 {\n \
    \           letterGrades.append(\"B\")\n        } else if grade >= 2.3 {\n   \
    \         letterGrades.append(\"B-\")\n        } else if grade >= 2.0 {\n    \
    \        letterGrades.append(\"C+\")\n        } else if grade >= 1.7 {\n     \
    \       letterGrades.append(\"C\")\n        } else if grade >= 1.3 {\n       \
    \     letterGrades.append(\"C-\")\n        } else if grade >= 1.0 {\n        \
    \    letterGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n         \
    \   letterGrades.append(\"D\")\n        } else if grade >= 0.0 {\n           \
    \ letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm_qjhu4v/tmpm_qjhu4v.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0875ef5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0875becb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0875bec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0875beb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_qjhu4v                        0x000055cc1a332876 <unavailable> + 6262

    5    libc.so.6                          0x00002b08760e1460 __libc_start_main +
    245

    6    tmpm_qjhu4v                        0x000055cc1a332399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0: return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case\
    \ 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case\
    \ 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case\
    \ 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case\
    \ 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case\
    \ 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default:\
    \ return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpelckq0z7/tmpelckq0z7.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b455aa42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b455a739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b455a739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b455a7387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelckq0z7                        0x00005565aaddd7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b455ac2e460 __libc_start_main +
    245

    6    tmpelckq0z7                        0x00005565aaddd2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n \
    \       } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n      \
    \  } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n      \
    \      letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013958
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case let x where x > 3.7:\n\
    \            return \"A\"\n        case let x where x > 3.3:\n            return\
    \ \"A-\"\n        case let x where x > 3.0:\n            return \"B+\"\n     \
    \   case let x where x > 2.7:\n            return \"B\"\n        case let x where\
    \ x > 2.3:\n            return \"B-\"\n        case let x where x > 2.0:\n   \
    \         return \"C+\"\n        case let x where x > 1.7:\n            return\
    \ \"C\"\n        case let x where x > 1.3:\n            return \"C-\"\n      \
    \  case let x where x > 1.0:\n            return \"D+\"\n        case let x where\
    \ x > 0.7:\n            return \"D\"\n        case let x where x > 0.0:\n    \
    \        return \"D-\"\n        default:\n            return \"E\"\n        }\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    //Write your function here\n    var arr = [String]()\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            arr.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            arr.append(\"A\")\n     \
    \   } else if grade >= 3.3 {\n            arr.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            arr.append(\"B+\")\n        } else if grade >= 2.7\
    \ {\n            arr.append(\"B\")\n        } else if grade >= 2.3 {\n       \
    \     arr.append(\"B-\")\n        } else if grade >= 2.0 {\n            arr.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            arr.append(\"C\")\n     \
    \   } else if grade >= 1.3 {\n            arr.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            arr.append(\"D+\")\n        } else if grade >= 0.7\
    \ {\n            arr.append(\"D\")\n        } else if grade >= 0.0 {\n       \
    \     arr.append(\"D-\")\n        } else {\n            arr.append(\"E\")\n  \
    \      }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzv160by0/tmpzv160by0.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff9b613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff9b30ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff9b30a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff9b3097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzv160by0                        0x000055738c2867f6 <unavailable> + 6134

    5    libc.so.6                          0x00002aff9b7ff460 __libc_start_main +
    245

    6    tmpzv160by0                        0x000055738c286319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    var letter_grades = [String]()\n    \n  \
    \  for grade in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  \n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9sv98q0r/tmp9sv98q0r.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b795493ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7954631b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7954631988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79546307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9sv98q0r                        0x0000557bd39a57f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7954b26460 __libc_start_main +
    245

    6    tmp9sv98q0r                        0x0000557bd39a5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case let g where g > 3.7:\n\
    \            return \"A\"\n        case let g where g > 3.3:\n            return\
    \ \"A-\"\n        case let g where g > 3.0:\n            return \"B+\"\n     \
    \   case let g where g > 2.7:\n            return \"B\"\n        case let g where\
    \ g > 2.3:\n            return \"B-\"\n        case let g where g > 2.0:\n   \
    \         return \"C+\"\n        case let g where g > 1.7:\n            return\
    \ \"C\"\n        case let g where g > 1.3:\n            return \"C-\"\n      \
    \  case let g where g > 1.0:\n            return \"D+\"\n        case let g where\
    \ g > 0.7:\n            return \"D\"\n        case let g where g > 0.0:\n    \
    \        return \"D-\"\n        default:\n            return \"E\"\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({\n        switch $0 {\n    \
    \    case let grade where grade >= 4.0:\n            return \"A+\"\n        case\
    \ let grade where grade >= 3.7:\n            return \"A\"\n        case let grade\
    \ where grade >= 3.3:\n            return \"A-\"\n        case let grade where\
    \ grade >= 3.0:\n            return \"B+\"\n        case let grade where grade\
    \ >= 2.7:\n            return \"B\"\n        case let grade where grade >= 2.3:\n\
    \            return \"B-\"\n        case let grade where grade >= 2.0:\n     \
    \       return \"C+\"\n        case let grade where grade >= 1.7:\n          \
    \  return \"C\"\n        case let grade where grade >= 1.3:\n            return\
    \ \"C-\"\n        case let grade where grade >= 1.0:\n            return \"D+\"\
    \n        case let grade where grade >= 0.7:\n            return \"D\"\n     \
    \   case let grade where grade >= 0.0:\n            return \"D-\"\n        default:\n\
    \            return \"E\"\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpi93kyikb/tmpi93kyikb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad5a959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5a650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5a650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5a64f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi93kyikb                        0x000055583deab686 <unavailable> + 5766

    5    libc.so.6                          0x00002aad5ab45460 __libc_start_main +
    245

    6    tmpi93kyikb                        0x000055583deab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var finalGrades: [String] = []\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            finalGrades.append(\"A+\")\n\
    \        } else if grade >= 3.7 {\n            finalGrades.append(\"A\")\n   \
    \     } else if grade >= 3.3 {\n            finalGrades.append(\"A-\")\n     \
    \   } else if grade >= 3.0 {\n            finalGrades.append(\"B+\")\n       \
    \ } else if grade >= 2.7 {\n            finalGrades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            finalGrades.append(\"B-\")\n        } else if\
    \ grade >= 2.0 {\n            finalGrades.append(\"C+\")\n        } else if grade\
    \ >= 1.7 {\n            finalGrades.append(\"C\")\n        } else if grade >=\
    \ 1.3 {\n            finalGrades.append(\"C-\")\n        } else if grade >= 1.0\
    \ {\n            finalGrades.append(\"D+\")\n        } else if grade >= 0.7 {\n\
    \            finalGrades.append(\"D\")\n        } else if grade >= 0.0 {\n   \
    \         finalGrades.append(\"D-\")\n        } else {\n            finalGrades.append(\"\
    E\")\n        }\n    }\n    return finalGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu54_3xts/tmpu54_3xts.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cfc7b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cfc4b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cfc4b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cfc4af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu54_3xts                        0x000055e1475747a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5cfc9a5460 __libc_start_main +
    245

    6    tmpu54_3xts                        0x000055e1475742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({\n        switch $0 {\n    \
    \    case 4.0: return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case\
    \ 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case\
    \ 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case\
    \ 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case\
    \ 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case\
    \ 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default:\
    \ return \"E\"\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnw4gm31c/tmpnw4gm31c.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c6738dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c67084b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c67084988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c670837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnw4gm31c                        0x000055be9c77c7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b5c67579460 __libc_start_main +
    245

    6    tmpnw4gm31c                        0x000055be9c77c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let letterGrades = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    let\
    \ gpas = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    var\
    \ results = [String]()\n    for grade in grades {\n        if grade == 4.0 {\n\
    \            results.append(letterGrades[0])\n        } else if grade == 0.0 {\n\
    \            results.append(letterGrades[12])\n        } else {\n            for\
    \ i in 0...gpas.count - 1 {\n                if grade > gpas[i] {\n          \
    \          results.append(letterGrades[i + 1])\n                    break\n  \
    \              }\n            }\n        }\n    }\n    return results\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphqlshrj6/tmphqlshrj6.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f78d4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f78a46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f78a46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f78a457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqlshrj6                        0x000056254c186a86 <unavailable> + 6790

    5    libc.so.6                          0x00002b5f78f3b460 __libc_start_main +
    245

    6    tmphqlshrj6                        0x000056254c1865a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_with_letters = [String]()\n    var sum\
    \ = 0.0\n    var gpa = 0.0\n    for grade in grades {\n        sum += grade\n\
    \    }\n    gpa = sum / Double(grades.count)\n    if gpa > 4.0 {\n        grades_with_letters.append(\"\
    A+\")\n    } else if gpa >= 3.7 {\n        grades_with_letters.append(\"A\")\n\
    \    } else if gpa >= 3.3 {\n        grades_with_letters.append(\"A-\")\n    }\
    \ else if gpa >= 3.0 {\n        grades_with_letters.append(\"B+\")\n    } else\
    \ if gpa >= 2.7 {\n        grades_with_letters.append(\"B\")\n    } else if gpa\
    \ >= 2.3 {\n        grades_with_letters.append(\"B-\")\n    } else if gpa >= 2.0\
    \ {\n        grades_with_letters.append(\"C+\")\n    } else if gpa >= 1.7 {\n\
    \        grades_with_letters.append(\"C\")\n    } else if gpa >= 1.3 {\n     \
    \   grades_with_letters.append(\"C-\")\n    } else if gpa >= 1.0 {\n        grades_with_letters.append(\"\
    D+\")\n    } else if gpa >= 0.7 {\n        grades_with_letters.append(\"D\")\n\
    \    } else if gpa > 0.0 {\n        grades_with_letters.append(\"D-\")\n    }\
    \ else {\n        grades_with_letters.append(\"E\")\n    }\n    return grades_with_letters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpr6gz8zxb/tmpr6gz8zxb.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b7674c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b736bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b736b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b736a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6gz8zxb                        0x000055f172fac856 <unavailable> + 6230

    5    libc.so.6                          0x00002ae3b7860460 __libc_start_main +
    245

    6    tmpr6gz8zxb                        0x000055f172fac379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let letter = grades.map { $0 >= 4.0 ? \"A+\" :\
    \ $0 >= 3.7 ? \"A\" : $0 >= 3.3 ? \"A-\" : $0 >= 3.0 ? \"B+\" : $0 >= 2.7 ? \"\
    B\" : $0 >= 2.3 ? \"B-\" : $0 >= 2.0 ? \"C+\" : $0 >= 1.7 ? \"C\" : $0 >= 1.3\
    \ ? \"C-\" : $0 >= 1.0 ? \"D+\" : $0 >= 0.7 ? \"D\" : $0 >= 0.0 ? \"D-\" : \"\
    E\" }\n    return letter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqj29_c8j/tmpqj29_c8j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d10b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d0dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d0dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d0dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqj29_c8j                        0x000055eea7adc686 <unavailable> + 5766

    5    libc.so.6                          0x00002ac5d12a1460 __libc_start_main +
    245

    6    tmpqj29_c8j                        0x000055eea7adc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for gpa in\
    \ grades {\n        if gpa == 4.0 {\n            letter_grades.append(\"A+\")\n\
    \        } else if gpa > 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if gpa > 3.3 {\n            letter_grades.append(\"A-\")\n       \
    \ } else if gpa > 3.0 {\n            letter_grades.append(\"B+\")\n        } else\
    \ if gpa > 2.7 {\n            letter_grades.append(\"B\")\n        } else if gpa\
    \ > 2.3 {\n            letter_grades.append(\"B-\")\n        } else if gpa > 2.0\
    \ {\n            letter_grades.append(\"C+\")\n        } else if gpa > 1.7 {\n\
    \            letter_grades.append(\"C\")\n        } else if gpa > 1.3 {\n    \
    \        letter_grades.append(\"C-\")\n        } else if gpa > 1.0 {\n       \
    \     letter_grades.append(\"D+\")\n        } else if gpa > 0.7 {\n          \
    \  letter_grades.append(\"D\")\n        } else if gpa > 0.0 {\n            letter_grades.append(\"\
    D-\")\n        } else {\n            letter_grades.append(\"E\")\n        }\n\
    \    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  //Your code here\n  return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpq6jppezu/tmpq6jppezu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6634fe2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6634cd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6634cd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6634cd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6jppezu                        0x00005650e45af5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b66351ce460 __libc_start_main +
    245

    6    tmpq6jppezu                        0x00005650e45af109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    //Write your code here\n    return [\"\"]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpctgc_mao/tmpctgc_mao.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac42e110c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac42de07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac42de07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac42de067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctgc_mao                        0x00005643e418a5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ac42e2fc460 __libc_start_main +
    245

    6    tmpctgc_mao                        0x00005643e418a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case _ where grade >= 4.0:\n  \
    \          letter_grades.append(\"A+\")\n        case _ where grade >= 3.7:\n\
    \            letter_grades.append(\"A\")\n        case _ where grade >= 3.3:\n\
    \            letter_grades.append(\"A-\")\n        case _ where grade >= 3.0:\n\
    \            letter_grades.append(\"B+\")\n        case _ where grade >= 2.7:\n\
    \            letter_grades.append(\"B\")\n        case _ where grade >= 2.3:\n\
    \            letter_grades.append(\"B-\")\n        case _ where grade >= 2.0:\n\
    \            letter_grades.append(\"C+\")\n        case _ where grade >= 1.7:\n\
    \            letter_grades.append(\"C\")\n        case _ where grade >= 1.3:\n\
    \            letter_grades.append(\"C-\")\n        case _ where grade >= 1.0:\n\
    \            letter_grades.append(\"D+\")\n        case _ where grade >= 0.7:\n\
    \            letter_grades.append(\"D\")\n        case _ where grade >= 0.0:\n\
    \            letter_grades.append(\"D-\")\n        default:\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8r30odzz/tmp8r30odzz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0865bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae08352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae08352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae083517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8r30odzz                        0x0000558c9722e7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aae08847460 __libc_start_main +
    245

    6    tmp8r30odzz                        0x0000558c9722e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for eachGrade\
    \ in grades {\n        switch eachGrade {\n        case 4.0...:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case ..<0.0:\n            letterGrades.append(\"E\")\n        default:\n \
    \           letterGrades.append(\"ERROR\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpobatrhiz/tmpobatrhiz.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba84c627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba84c31eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba84c31e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba84c31d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpobatrhiz                        0x000055b524394a06 <unavailable> + 6662

    5    libc.so.6                          0x00002ba84c813460 __libc_start_main +
    245

    6    tmpobatrhiz                        0x000055b524394529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var final_letter_grades: [String] = []\n    for\
    \ gpa in grades {\n        if gpa == 4.0 {\n            final_letter_grades.append(\"\
    A+\")\n        } else if gpa > 3.7 {\n            final_letter_grades.append(\"\
    A\")\n        } else if gpa > 3.3 {\n            final_letter_grades.append(\"\
    A-\")\n        } else if gpa > 3.0 {\n            final_letter_grades.append(\"\
    B+\")\n        } else if gpa > 2.7 {\n            final_letter_grades.append(\"\
    B\")\n        } else if gpa > 2.3 {\n            final_letter_grades.append(\"\
    B-\")\n        } else if gpa > 2.0 {\n            final_letter_grades.append(\"\
    C+\")\n        } else if gpa > 1.7 {\n            final_letter_grades.append(\"\
    C\")\n        } else if gpa > 1.3 {\n            final_letter_grades.append(\"\
    C-\")\n        } else if gpa > 1.0 {\n            final_letter_grades.append(\"\
    D+\")\n        } else if gpa > 0.7 {\n            final_letter_grades.append(\"\
    D\")\n        } else if gpa > 0.0 {\n            final_letter_grades.append(\"\
    D-\")\n        } else {\n            final_letter_grades.append(\"E\")\n     \
    \   }\n    }\n    return final_letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case _ where $0 >= 4.0:\n            return \"A+\"\n        case _ where\
    \ $0 >= 3.7:\n            return \"A\"\n        case _ where $0 >= 3.3:\n    \
    \        return \"A-\"\n        case _ where $0 >= 3.0:\n            return \"\
    B+\"\n        case _ where $0 >= 2.7:\n            return \"B\"\n        case\
    \ _ where $0 >= 2.3:\n            return \"B-\"\n        case _ where $0 >= 2.0:\n\
    \            return \"C+\"\n        case _ where $0 >= 1.7:\n            return\
    \ \"C\"\n        case _ where $0 >= 1.3:\n            return \"C-\"\n        case\
    \ _ where $0 >= 1.0:\n            return \"D+\"\n        case _ where $0 >= 0.7:\n\
    \            return \"D\"\n        case _ where $0 >= 0.0:\n            return\
    \ \"D-\"\n        default:\n            return \"E\"\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2gyeotgj/tmp2gyeotgj.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20be1dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20bded3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20bded3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20bded27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gyeotgj                        0x00005581565d4686 <unavailable> + 5766

    5    libc.so.6                          0x00002b20be3c8460 __libc_start_main +
    245

    6    tmp2gyeotgj                        0x00005581565d41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        break\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphjq00mno/tmphjq00mno.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada404d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada401c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada401c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada401c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjq00mno                        0x000055e997851926 <unavailable> + 6438

    5    libc.so.6                          0x00002ada406bc460 __libc_start_main +
    245

    6    tmphjq00mno                        0x000055e997851449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    let gpa_scale:\
    \ [Double] = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n  \
    \  let letter_scale: [String] = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\"\
    , \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\n    for grade in grades {\n \
    \       if grade > 4.0 {\n            letter_grades.append(\"A+\")\n        }\
    \ else if grade < 0.0 {\n            letter_grades.append(\"E\")\n        } else\
    \ {\n            for i in 0..<gpa_scale.count {\n                if grade >= gpa_scale[i]\
    \ {\n                    letter_grades.append(letter_scale[i])\n             \
    \       break\n                }\n            }\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp58o_ip64/tmp58o_ip64.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec51c2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec51924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec51924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec519237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58o_ip64                        0x0000564d421fba26 <unavailable> + 6694

    5    libc.so.6                          0x00002aec51e19460 __libc_start_main +
    245

    6    tmp58o_ip64                        0x0000564d421fb549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  // your code here\n  return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpex9u57k1/tmpex9u57k1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57e54f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57e51e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57e51e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57e51e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpex9u57k1                        0x000056343f8bd5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b57e56dc460 __libc_start_main +
    245

    6    tmpex9u57k1                        0x000056343f8bd109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // Write your code here\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzqc7qfdr/tmpzqc7qfdr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba67efeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba67ece1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba67ece1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba67ece07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqc7qfdr                        0x0000559fdf6475e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba67f1d6460 __libc_start_main +
    245

    6    tmpzqc7qfdr                        0x0000559fdf647109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var solution: [String] = []\n    grades.forEach\
    \ { (grade) in\n        if grade >= 4.0 {\n            solution.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            solution.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            solution.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            solution.append(\"B+\")\n        } else\
    \ if grade >= 2.7 {\n            solution.append(\"B\")\n        } else if grade\
    \ >= 2.3 {\n            solution.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            solution.append(\"C+\")\n        } else if grade >= 1.7 {\n \
    \           solution.append(\"C\")\n        } else if grade >= 1.3 {\n       \
    \     solution.append(\"C-\")\n        } else if grade >= 1.0 {\n            solution.append(\"\
    D+\")\n        } else if grade >= 0.7 {\n            solution.append(\"D\")\n\
    \        } else if grade > 0.0 {\n            solution.append(\"D-\")\n      \
    \  } else {\n            solution.append(\"E\")\n        }\n    }\n    return\
    \ solution\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4c5t0m9o/tmp4c5t0m9o.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e98f5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e98c55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e98c55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e98c547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c5t0m9o                        0x000056099d8b76a6 <unavailable> + 5798

    5    libc.so.6                          0x00002b9e9914a460 __libc_start_main +
    245

    6    tmp4c5t0m9o                        0x000056099d8b71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnuw1umli/tmpnuw1umli.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f6741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f6438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f6438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f64377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnuw1umli                        0x0000558a9ec66721 <unavailable> + 5921

    5    libc.so.6                          0x00002b00f692d460 __libc_start_main +
    245

    6    tmpnuw1umli                        0x0000558a9ec66109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmprzaj__9n.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014231
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({ gpa in\n        switch gpa\
    \ {\n        case 4.0:\n            return \"A+\"\n        case let gpa where\
    \ gpa > 3.7:\n            return \"A\"\n        case let gpa where gpa > 3.3:\n\
    \            return \"A-\"\n        case let gpa where gpa > 3.0:\n          \
    \  return \"B+\"\n        case let gpa where gpa > 2.7:\n            return \"\
    B\"\n        case let gpa where gpa > 2.3:\n            return \"B-\"\n      \
    \  case let gpa where gpa > 2.0:\n            return \"C+\"\n        case let\
    \ gpa where gpa > 1.7:\n            return \"C\"\n        case let gpa where gpa\
    \ > 1.3:\n            return \"C-\"\n        case let gpa where gpa > 1.0:\n \
    \           return \"D+\"\n        case let gpa where gpa > 0.7:\n           \
    \ return \"D\"\n        case let gpa where gpa > 0.0:\n            return \"D-\"\
    \n        default:\n            return \"E\"\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    var grade_in_letter\
    \ = \"\"\n    for grade in grades {\n        if grade == 4.0 {\n            grade_in_letter\
    \ = \"A+\"\n        }\n        else if grade > 3.7 {\n            grade_in_letter\
    \ = \"A\"\n        }\n        else if grade > 3.3 {\n            grade_in_letter\
    \ = \"A-\"\n        }\n        else if grade > 3.0 {\n            grade_in_letter\
    \ = \"B+\"\n        }\n        else if grade > 2.7 {\n            grade_in_letter\
    \ = \"B\"\n        }\n        else if grade > 2.3 {\n            grade_in_letter\
    \ = \"B-\"\n        }\n        else if grade > 2.0 {\n            grade_in_letter\
    \ = \"C+\"\n        }\n        else if grade > 1.7 {\n            grade_in_letter\
    \ = \"C\"\n        }\n        else if grade > 1.3 {\n            grade_in_letter\
    \ = \"C-\"\n        }\n        else if grade > 1.0 {\n            grade_in_letter\
    \ = \"D+\"\n        }\n        else if grade > 0.7 {\n            grade_in_letter\
    \ = \"D\"\n        }\n        else if grade > 0.0 {\n            grade_in_letter\
    \ = \"D-\"\n        }\n        else {\n            grade_in_letter = \"E\"\n \
    \       }\n        letter_grades.append(grade_in_letter)\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var grades = grades\n  var letterGrade: [String]\
    \ = []\n  for i in 0...grades.count - 1 {\n    if grades[i] >= 4.0 {\n      letterGrade.append(\"\
    A+\")\n    } else if grades[i] >= 3.7 {\n      letterGrade.append(\"A\")\n   \
    \ } else if grades[i] >= 3.3 {\n      letterGrade.append(\"A-\")\n    } else if\
    \ grades[i] >= 3.0 {\n      letterGrade.append(\"B+\")\n    } else if grades[i]\
    \ >= 2.7 {\n      letterGrade.append(\"B\")\n    } else if grades[i] >= 2.3 {\n\
    \      letterGrade.append(\"B-\")\n    } else if grades[i] >= 2.0 {\n      letterGrade.append(\"\
    C+\")\n    } else if grades[i] >= 1.7 {\n      letterGrade.append(\"C\")\n   \
    \ } else if grades[i] >= 1.3 {\n      letterGrade.append(\"C-\")\n    } else if\
    \ grades[i] >= 1.0 {\n      letterGrade.append(\"D+\")\n    } else if grades[i]\
    \ >= 0.7 {\n      letterGrade.append(\"D\")\n    } else if grades[i] >= 0.0 {\n\
    \      letterGrade.append(\"D-\")\n    } else {\n      letterGrade.append(\"E\"\
    )\n    }\n  }\n  return letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmply2oixnb/tmply2oixnb.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad48aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad48798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad48798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad487977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmply2oixnb                        0x000055e3ba032876 <unavailable> + 6262

    5    libc.so.6                          0x00002aad48c8d460 __libc_start_main +
    245

    6    tmply2oixnb                        0x000055e3ba032399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grade_array: [String] = []\n    var gpa = 0.0\n\
    \    var letter_grade = \"\"\n    for gpa in grades {\n        if gpa >= 4.0 {\n\
    \            letter_grade = \"A+\"\n        } else if gpa >= 3.7 {\n         \
    \   letter_grade = \"A\"\n        } else if gpa >= 3.3 {\n            letter_grade\
    \ = \"A-\"\n        } else if gpa >= 3.0 {\n            letter_grade = \"B+\"\n\
    \        } else if gpa >= 2.7 {\n            letter_grade = \"B\"\n        } else\
    \ if gpa >= 2.3 {\n            letter_grade = \"B-\"\n        } else if gpa >=\
    \ 2.0 {\n            letter_grade = \"C+\"\n        } else if gpa >= 1.7 {\n \
    \           letter_grade = \"C\"\n        } else if gpa >= 1.3 {\n           \
    \ letter_grade = \"C-\"\n        } else if gpa >= 1.0 {\n            letter_grade\
    \ = \"D+\"\n        } else if gpa >= 0.7 {\n            letter_grade = \"D\"\n\
    \        } else if gpa >= 0.0 {\n            letter_grade = \"D-\"\n        }\
    \ else {\n            letter_grade = \"E\"\n        }\n        grade_array.append(letter_grade)\n\
    \    }\n    return grade_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm9z0zn_f/tmpm9z0zn_f.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6aa8b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6aa5acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6aa5ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6aa5ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9z0zn_f                        0x000055f53fb4d7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ab6aaaa1460 __libc_start_main +
    245

    6    tmpm9z0zn_f                        0x000055f53fb4d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  // Write your code here.\n  var result = [String]()\n\
    \  for grade in grades {\n    if grade == 4.0 {\n      result.append(\"A+\")\n\
    \    } else if grade > 3.7 {\n      result.append(\"A\")\n    } else if grade\
    \ > 3.3 {\n      result.append(\"A-\")\n    } else if grade > 3.0 {\n      result.append(\"\
    B+\")\n    } else if grade > 2.7 {\n      result.append(\"B\")\n    } else if\
    \ grade > 2.3 {\n      result.append(\"B-\")\n    } else if grade > 2.0 {\n  \
    \    result.append(\"C+\")\n    } else if grade > 1.7 {\n      result.append(\"\
    C\")\n    } else if grade > 1.3 {\n      result.append(\"C-\")\n    } else if\
    \ grade > 1.0 {\n      result.append(\"D+\")\n    } else if grade > 0.7 {\n  \
    \    result.append(\"D\")\n    } else if grade > 0.0 {\n      result.append(\"\
    D-\")\n    } else {\n      result.append(\"E\")\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output: [String] = []\n    for i in grades\
    \ {\n        if i >= 4.0 {\n            output.append(\"A+\")\n        } else\
    \ if i >= 3.7 {\n            output.append(\"A\")\n        } else if i >= 3.3\
    \ {\n            output.append(\"A-\")\n        } else if i >= 3.0 {\n       \
    \     output.append(\"B+\")\n        } else if i >= 2.7 {\n            output.append(\"\
    B\")\n        } else if i >= 2.3 {\n            output.append(\"B-\")\n      \
    \  } else if i >= 2.0 {\n            output.append(\"C+\")\n        } else if\
    \ i >= 1.7 {\n            output.append(\"C\")\n        } else if i >= 1.3 {\n\
    \            output.append(\"C-\")\n        } else if i >= 1.0 {\n           \
    \ output.append(\"D+\")\n        } else if i >= 0.7 {\n            output.append(\"\
    D\")\n        } else if i > 0.0 {\n            output.append(\"D-\")\n       \
    \ } else {\n            output.append(\"E\")\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7zwwfakn/tmp7zwwfakn.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0aa4162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0aa3e59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0aa3e59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0aa3e587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zwwfakn                        0x00005593160767a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b0aa434e460 __libc_start_main +
    245

    6    tmp7zwwfakn                        0x00005593160762c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map({ (grade) -> String in\n    \
    \    switch grade {\n        case 4.0:\n            return \"A+\"\n        case\
    \ let x where x > 3.7:\n            return \"A\"\n        case let x where x >\
    \ 3.3:\n            return \"A-\"\n        case let x where x > 3.0:\n       \
    \     return \"B+\"\n        case let x where x > 2.7:\n            return \"\
    B\"\n        case let x where x > 2.3:\n            return \"B-\"\n        case\
    \ let x where x > 2.0:\n            return \"C+\"\n        case let x where x\
    \ > 1.7:\n            return \"C\"\n        case let x where x > 1.3:\n      \
    \      return \"C-\"\n        case let x where x > 1.0:\n            return \"\
    D+\"\n        case let x where x > 0.7:\n            return \"D\"\n        case\
    \ let x where x > 0.0:\n            return \"D-\"\n        default:\n        \
    \    return \"E\"\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    \n    let not_accepted_grades: [Double] = [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    let letter_grades:\
    \ [String] = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\"]\n    var result_grades: [String] = []\n    \n   \
    \ for i in 0..<grades.count {\n        var grade_index: Int = 0\n        var grade:\
    \ Double = grades[i]\n        if grade > 4.0 {\n            grade = 4.0\n    \
    \    }\n        if grade < 0.0 {\n            grade = 0.0\n        }\n       \
    \ for j in 0..<not_accepted_grades.count {\n            if grade >= not_accepted_grades[j]\
    \ {\n                grade_index = j\n                break\n            }\n \
    \       }\n        result_grades.append(letter_grades[grade_index])\n    }\n \
    \   return result_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpyn9quzuj/tmpyn9quzuj.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17df26fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17def66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17def66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17def657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn9quzuj                        0x0000564e8bfd98c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b17df45b460 __libc_start_main +
    245

    6    tmpyn9quzuj                        0x0000564e8bfd93e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letter = [String]()\n\
    \    for grade in grades {\n        switch grade {\n        case 4.0:\n      \
    \      letter.append(\"A+\")\n        case 3.7..<4.0:\n            letter.append(\"\
    A\")\n        case 3.3..<3.7:\n            letter.append(\"A-\")\n        case\
    \ 3.0..<3.3:\n            letter.append(\"B+\")\n        case 2.7..<3.0:\n   \
    \         letter.append(\"B\")\n        case 2.3..<2.7:\n            letter.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letter.append(\"C+\")\n        case\
    \ 1.7..<2.0:\n            letter.append(\"C\")\n        case 1.3..<1.7:\n    \
    \        letter.append(\"C-\")\n        case 1.0..<1.3:\n            letter.append(\"\
    D+\")\n        case 0.7..<1.0:\n            letter.append(\"D\")\n        case\
    \ 0.0..<0.7:\n            letter.append(\"D-\")\n        default:\n          \
    \  letter.append(\"E\")\n        }\n    }\n    return letter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp57sxkv_d/tmp57sxkv_d.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf9152fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf91226b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf91226988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf912257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57sxkv_d                        0x000055d1e7a86926 <unavailable> + 6438

    5    libc.so.6                          0x00002aaf9171b460 __libc_start_main +
    245

    6    tmp57sxkv_d                        0x000055d1e7a86449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        if $0 >= 4.0 {\n \
    \           return \"A+\"\n        } else if $0 >= 3.7 {\n            return \"\
    A\"\n        } else if $0 >= 3.3 {\n            return \"A-\"\n        } else\
    \ if $0 >= 3.0 {\n            return \"B+\"\n        } else if $0 >= 2.7 {\n \
    \           return \"B\"\n        } else if $0 >= 2.3 {\n            return \"\
    B-\"\n        } else if $0 >= 2.0 {\n            return \"C+\"\n        } else\
    \ if $0 >= 1.7 {\n            return \"C\"\n        } else if $0 >= 1.3 {\n  \
    \          return \"C-\"\n        } else if $0 >= 1.0 {\n            return \"\
    D+\"\n        } else if $0 >= 0.7 {\n            return \"D\"\n        } else\
    \ if $0 >= 0.0 {\n            return \"D-\"\n        } else {\n            return\
    \ \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmplxoeae3e/tmplxoeae3e.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a162fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a1326b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a1326988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a13257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplxoeae3e                        0x000055f7a6745686 <unavailable> + 5766

    5    libc.so.6                          0x00002b00a181b460 __libc_start_main +
    245

    6    tmplxoeae3e                        0x000055f7a67451a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letters = [String]()\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letters.append(\"\
    A+\")\n        case let g where g > 3.7:\n            letters.append(\"A\")\n\
    \        case let g where g > 3.3:\n            letters.append(\"A-\")\n     \
    \   case let g where g > 3.0:\n            letters.append(\"B+\")\n        case\
    \ let g where g > 2.7:\n            letters.append(\"B\")\n        case let g\
    \ where g > 2.3:\n            letters.append(\"B-\")\n        case let g where\
    \ g > 2.0:\n            letters.append(\"C+\")\n        case let g where g > 1.7:\n\
    \            letters.append(\"C\")\n        case let g where g > 1.3:\n      \
    \      letters.append(\"C-\")\n        case let g where g > 1.0:\n           \
    \ letters.append(\"D+\")\n        case let g where g > 0.7:\n            letters.append(\"\
    D\")\n        case let g where g > 0.0:\n            letters.append(\"D-\")\n\
    \        default:\n            letters.append(\"E\")\n        }\n    }\n    return\
    \ letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    //Your code goes here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpv_ebpd3i.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0: return \"A+\"\n        case 3.7..<4.0: return \"A\"\n        case\
    \ 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n        case\
    \ 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n        case\
    \ 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n        case\
    \ 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n        case\
    \ 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n        default:\
    \ return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpelckq0z7/tmpelckq0z7.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b455aa42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b455a739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b455a739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b455a7387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelckq0z7                        0x00005565aaddd7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b455ac2e460 __libc_start_main +
    245

    6    tmpelckq0z7                        0x00005565aaddd2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            output.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            output.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            output.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            output.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         output.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ output.append(\"B-\")\n        } else if grade >= 2.0 {\n            output.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            output.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            output.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            output.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            output.append(\"D\")\n        } else if grade >\
    \ 0.0 {\n            output.append(\"D-\")\n        } else {\n            output.append(\"\
    E\")\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmplx3ld1mu/tmplx3ld1mu.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab72404cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab723d43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab723d43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab723d427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplx3ld1mu                        0x00005649832077a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ab724238460 __libc_start_main +
    245

    6    tmplx3ld1mu                        0x00005649832072c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    //YOUR CODE HERE\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpv30geck7/tmpv30geck7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addf9d41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addf9a38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addf9a38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addf9a377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv30geck7                        0x000056339084d5e6 <unavailable> + 5606

    5    libc.so.6                          0x00002addf9f2d460 __libc_start_main +
    245

    6    tmpv30geck7                        0x000056339084d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letterGrades: [String]\
    \ = []\n    var letter: String = \"\"\n    while grades.count > 0 {\n        letter\
    \ = \"\"\n        if grades[0] == 4.0 {\n            letter = \"A+\"\n       \
    \ } else if grades[0] > 3.7 {\n            letter = \"A\"\n        } else if grades[0]\
    \ > 3.3 {\n            letter = \"A-\"\n        } else if grades[0] > 3.0 {\n\
    \            letter = \"B+\"\n        } else if grades[0] > 2.7 {\n          \
    \  letter = \"B\"\n        } else if grades[0] > 2.3 {\n            letter = \"\
    B-\"\n        } else if grades[0] > 2.0 {\n            letter = \"C+\"\n     \
    \   } else if grades[0] > 1.7 {\n            letter = \"C\"\n        } else if\
    \ grades[0] > 1.3 {\n            letter = \"C-\"\n        } else if grades[0]\
    \ > 1.0 {\n            letter = \"D+\"\n        } else if grades[0] > 0.7 {\n\
    \            letter = \"D\"\n        } else if grades[0] > 0.0 {\n           \
    \ letter = \"D-\"\n        } else if grades[0] == 0.0 {\n            letter =\
    \ \"E\"\n        }\n        letterGrades.append(letter)\n        grades.remove(at:\
    \ 0)\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n      \
    \      letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_e648e_q/tmp_e648e_q.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1592c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae158fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae158fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae158fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e648e_q                        0x0000559655f5e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae1594ad460 __libc_start_main +
    245

    6    tmp_e648e_q                        0x0000559655f5e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdb23odh5/tmpdb23odh5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad95ae23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95ab1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95ab1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95ab197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdb23odh5                        0x00005602ef2735e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ad95b00f460 __libc_start_main +
    245

    6    tmpdb23odh5                        0x00005602ef273109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var final_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            final_grades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            final_grades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            final_grades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            final_grades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            final_grades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            final_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            final_grades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            final_grades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            final_grades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            final_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            final_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            final_grades.append(\"D-\")\n        } else {\n      \
    \      final_grades.append(\"E\")\n        }\n    }\n    return final_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmporgit57d/tmporgit57d.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7da859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7da550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7da550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7da54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmporgit57d                        0x000055a0736567a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad7daa45460 __libc_start_main +
    245

    6    tmporgit57d                        0x000055a0736562c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014233
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    var letters = [String]()\n\
    \    var grade: Double\n    var letter: String\n    let dictionary: [Double: String]\
    \ = [\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n     \
    \   3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\"\
    ,\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7:\
    \ \"D\",\n        0.0: \"D-\",\n        -1.0: \"E\"\n    ]\n    for i in 0..<grades.count\
    \ {\n        if grades[i] == 0.0 {\n            grades[i] = -1.0\n        }\n\
    \        grade = grades[i]\n        while grade < 4.0 {\n            grade +=\
    \ 0.1\n        }\n        switch grade {\n        case 4.0...5.0:\n          \
    \  letter = dictionary[4.0]!\n        case 3.7...4.0:\n            letter = dictionary[3.7]!\n\
    \        case 3.3...3.7:\n            letter = dictionary[3.3]!\n        case\
    \ 3.0...3.3:\n            letter = dictionary[3.0]!\n        case 2.7...3.0:\n\
    \            letter = dictionary[2.7]!\n        case 2.3...2.7:\n            letter\
    \ = dictionary[2.3]!\n        case 2.0...2.3:\n            letter = dictionary[2.0]!\n\
    \        case 1.7...2.0:\n            letter = dictionary[1.7]!\n        case\
    \ 1.3...1.7:\n            letter = dictionary[1.3]!\n        case 1.0...1.3:\n\
    \            letter = dictionary[1.0]!\n        case 0.7...1.0:\n            letter\
    \ = dictionary[0.7]!\n        case 0.0...0.7:\n            letter = dictionary[0.0]!\n\
    \        case -1.0...0.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpozs6pegh.swift:77:22: error: expected member name following '.'\n\
    \        case -1.0...0.\n                     ^\n/tmp/tmpozs6pegh.swift:77:23:\
    \ error: expected ':' after 'case'\n        case -1.0...0.\n                 \
    \     ^\n/tmp/tmpozs6pegh.swift:98:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpozs6pegh.swift:44:31:\
    \ note: to match this opening '{'\n    for i in 0..<grades.count {\n         \
    \                     ^\n/tmp/tmpozs6pegh.swift:98:66: error: expected '}' at\
    \ end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) ==\
    \ [\"E\", \"D-\"])\n                                                         \
    \        ^\n/tmp/tmpozs6pegh.swift:24:59: note: to match this opening '{'\nfunc\
    \ numerical_letter_grade(grades: [Double]) -> [String] {\n                   \
    \                                       ^\n/tmp/tmpozs6pegh.swift:81:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014233
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // We solve this problem by looping through the\
    \ grades and adding a letter\n    // grade to a results array for each grade we\
    \ find\n    var results: [String] = []\n    for grade in grades {\n        if\
    \ grade == 4.0 {\n            results.append(\"A+\")\n        } else if grade\
    \ > 3.7 {\n            results.append(\"A\")\n        } else if grade > 3.3 {\n\
    \            results.append(\"A-\")\n        } else if grade > 3.0 {\n       \
    \     results.append(\"B+\")\n        } else if grade > 2.7 {\n            results.append(\"\
    B\")\n        } else if grade > 2.3 {\n            results.append(\"B-\")\n  \
    \      } else if grade > 2.0 {\n            results.append(\"C+\")\n        }\
    \ else if grade > 1.7 {\n            results.append(\"C\")\n        } else if\
    \ grade > 1.3 {\n            results.append(\"C-\")\n        } else if grade >\
    \ 1.0 {\n            results.append(\"D+\")\n        } else if grade > 0.7 {\n\
    \            results.append(\"D\")\n        } else if grade > 0.0 {\n        \
    \    results.append(\"D-\")\n        } else {\n            results.append(\"E\"\
    )\n        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var finalGrade = [String]()\n    for index in 0..<grades.count\
    \ {\n        switch grades[index] {\n        case 4.0:\n            finalGrade.append(\"\
    A+\")\n        case 3.7..<4.0:\n            finalGrade.append(\"A\")\n       \
    \ case 3.3..<3.7:\n            finalGrade.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            finalGrade.append(\"B+\")\n        case 2.7..<3.0:\n            finalGrade.append(\"\
    B\")\n        case 2.3..<2.7:\n            finalGrade.append(\"B-\")\n       \
    \ case 2.0..<2.3:\n            finalGrade.append(\"C+\")\n        case 1.7..<2.0:\n\
    \            finalGrade.append(\"C\")\n        case 1.3..<1.7:\n            finalGrade.append(\"\
    C-\")\n        case 1.0..<1.3:\n            finalGrade.append(\"D+\")\n      \
    \  case 0.7..<1.0:\n            finalGrade.append(\"D\")\n        case 0.0..<0.7:\n\
    \            finalGrade.append(\"D-\")\n        case 0.0:\n            finalGrade.append(\"\
    E\")\n        default:\n            finalGrade.append(\"error\")\n        }\n\
    \    }\n    return finalGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9mzs9ofr/tmp9mzs9ofr.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c994e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c991dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c991da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c991d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mzs9ofr                        0x0000562cb28d4956 <unavailable> + 6486

    5    libc.so.6                          0x00002b3c996cf460 __libc_start_main +
    245

    6    tmp9mzs9ofr                        0x0000562cb28d4479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // This is your job. Fill in this function.\n \
    \   // Feel free to add more functions or classes.\n    var letter_grade_array\
    \ = [String]()\n    for grade in grades {\n        var grade_letter = \"\"\n \
    \       switch grade {\n        case 4.0:\n            grade_letter = \"A+\"\n\
    \        case 3.7...:\n            grade_letter = \"A\"\n        case 3.3...:\n\
    \            grade_letter = \"A-\"\n        case 3.0...:\n            grade_letter\
    \ = \"B+\"\n        case 2.7...:\n            grade_letter = \"B\"\n        case\
    \ 2.3...:\n            grade_letter = \"B-\"\n        case 2.0...:\n         \
    \   grade_letter = \"C+\"\n        case 1.7...:\n            grade_letter = \"\
    C\"\n        case 1.3...:\n            grade_letter = \"C-\"\n        case 1.0...:\n\
    \            grade_letter = \"D+\"\n        case 0.7...:\n            grade_letter\
    \ = \"D\"\n        case 0.0...:\n            grade_letter = \"D-\"\n        default:\n\
    \            grade_letter = \"E\"\n        }\n        letter_grade_array.append(grade_letter)\n\
    \    }\n    return letter_grade_array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpam0guefx/tmpam0guefx.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae23e5cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae23e2c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae23e2c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae23e2c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam0guefx                        0x0000564dd75b2986 <unavailable> + 6534

    5    libc.so.6                          0x00002ae23e7b7460 __libc_start_main +
    245

    6    tmpam0guefx                        0x0000564dd75b24a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var results = [String]()\n    for i in grades {\n\
    \        switch i {\n        case 4.0:\n            results.append(\"A+\")\n \
    \       case 3.7..<4.0:\n            results.append(\"A\")\n        case 3.3..<3.7:\n\
    \            results.append(\"A-\")\n        case 3.0..<3.3:\n            results.append(\"\
    B+\")\n        case 2.7..<3.0:\n            results.append(\"B\")\n        case\
    \ 2.3..<2.7:\n            results.append(\"B-\")\n        case 2.0..<2.3:\n  \
    \          results.append(\"C+\")\n        case 1.7..<2.0:\n            results.append(\"\
    C\")\n        case 1.3..<1.7:\n            results.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            results.append(\"D+\")\n        case 0.7..<1.0:\n  \
    \          results.append(\"D\")\n        case 0.0..<0.7:\n            results.append(\"\
    D-\")\n        case 0.0:\n            results.append(\"E\")\n        default:\n\
    \            break\n        }\n    }\n    return results\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgyq41mee/tmpgyq41mee.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac898c1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac898912b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac898912988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8989117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyq41mee                        0x0000555764eea926 <unavailable> + 6438

    5    libc.so.6                          0x00002ac898e07460 __libc_start_main +
    245

    6    tmpgyq41mee                        0x0000555764eea449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n\
    \        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n \
    \       } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n \
    \       } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n  \
    \      } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n  \
    \      } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n   \
    \     } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n   \
    \     } else {\n            letter_grades.append(\"E\")\n        }\n    }\n  \
    \  return letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg5y0zgra/tmpg5y0zgra.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d221f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d21eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d21eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d21eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5y0zgra                        0x0000556d548d07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8d223e2460 __libc_start_main +
    245

    6    tmpg5y0zgra                        0x0000556d548d02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { grade in\n        switch grade\
    \ {\n        case 4.0: return \"A+\"\n        case 3.7..<4.0: return \"A\"\n \
    \       case 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n\
    \        case 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n\
    \        case 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n\
    \        case 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n\
    \        case 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n\
    \        default: return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpjy0ogj3v/tmpjy0ogj3v.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d17949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d17640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d17640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d1763f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjy0ogj3v                        0x0000563df3fbe7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b2d17b35460 __libc_start_main +
    245

    6    tmpjy0ogj3v                        0x0000563df3fbe2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var result = [String]()\n  var newGrades = grades\n\
    \  while !newGrades.isEmpty {\n    let gpa = newGrades.removeFirst()\n    switch\
    \ gpa {\n    case 4.0:\n      result.append(\"A+\")\n    case 3.7...4.0:\n   \
    \   result.append(\"A\")\n    case 3.3...3.7:\n      result.append(\"A-\")\n \
    \   case 3.0...3.3:\n      result.append(\"B+\")\n    case 2.7...3.0:\n      result.append(\"\
    B\")\n    case 2.3...2.7:\n      result.append(\"B-\")\n    case 2.0...2.3:\n\
    \      result.append(\"C+\")\n    case 1.7...2.0:\n      result.append(\"C\")\n\
    \    case 1.3...1.7:\n      result.append(\"C-\")\n    case 1.0...1.3:\n     \
    \ result.append(\"D+\")\n    case 0.7...1.0:\n      result.append(\"D\")\n   \
    \ case 0.0...0.7:\n      result.append(\"D-\")\n    case 0.0:\n      result.append(\"\
    E\")\n    default:\n      break\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprq77548k/tmprq77548k.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16000fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15ffdf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15ffdf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15ffdf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq77548k                        0x000055bd149e28f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b16002e6460 __libc_start_main +
    245

    6    tmprq77548k                        0x000055bd149e2419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades: [String] = []\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n \
    \       } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n    \
    \    } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n      \
    \  } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n       \
    \     letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp10c16rst/tmp10c16rst.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01bf33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac01bc2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac01bc2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac01bc297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10c16rst                        0x00005642021e47a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ac01c11f460 __libc_start_main +
    245

    6    tmp10c16rst                        0x00005642021e42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphsupun11/tmphsupun11.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba4ccec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba49c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba49c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba49c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsupun11                        0x00005579947d97a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b7ba4eba460 __libc_start_main +
    245

    6    tmphsupun11                        0x00005579947d92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var results: [String] = []\n    for i in grades\
    \ {\n        if i == 4.0 {\n            results.append(\"A+\")\n        } else\
    \ if i > 3.7 {\n            results.append(\"A\")\n        } else if i > 3.3 {\n\
    \            results.append(\"A-\")\n        } else if i > 3.0 {\n           \
    \ results.append(\"B+\")\n        } else if i > 2.7 {\n            results.append(\"\
    B\")\n        } else if i > 2.3 {\n            results.append(\"B-\")\n      \
    \  } else if i > 2.0 {\n            results.append(\"C+\")\n        } else if\
    \ i > 1.7 {\n            results.append(\"C\")\n        } else if i > 1.3 {\n\
    \            results.append(\"C-\")\n        } else if i > 1.0 {\n           \
    \ results.append(\"D+\")\n        } else if i > 0.7 {\n            results.append(\"\
    D\")\n        } else if i > 0.0 {\n            results.append(\"D-\")\n      \
    \  } else {\n            results.append(\"E\")\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case _ where $0 > 3.7:\n  \
    \          return \"A\"\n        case _ where $0 > 3.3:\n            return \"\
    A-\"\n        case _ where $0 > 3.0:\n            return \"B+\"\n        case\
    \ _ where $0 > 2.7:\n            return \"B\"\n        case _ where $0 > 2.3:\n\
    \            return \"B-\"\n        case _ where $0 > 2.0:\n            return\
    \ \"C+\"\n        case _ where $0 > 1.7:\n            return \"C\"\n        case\
    \ _ where $0 > 1.3:\n            return \"C-\"\n        case _ where $0 > 1.0:\n\
    \            return \"D+\"\n        case _ where $0 > 0.7:\n            return\
    \ \"D\"\n        case _ where $0 > 0.0:\n            return \"D-\"\n        default:\n\
    \            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_arr: [String] = []\n    for g in grades\
    \ {\n        if g >= 4.0 {\n            grades_arr.append(\"A+\")\n        } else\
    \ if g >= 3.7 {\n            grades_arr.append(\"A\")\n        } else if g >=\
    \ 3.3 {\n            grades_arr.append(\"A-\")\n        } else if g >= 3.0 {\n\
    \            grades_arr.append(\"B+\")\n        } else if g >= 2.7 {\n       \
    \     grades_arr.append(\"B\")\n        } else if g >= 2.3 {\n            grades_arr.append(\"\
    B-\")\n        } else if g >= 2.0 {\n            grades_arr.append(\"C+\")\n \
    \       } else if g >= 1.7 {\n            grades_arr.append(\"C\")\n        }\
    \ else if g >= 1.3 {\n            grades_arr.append(\"C-\")\n        } else if\
    \ g >= 1.0 {\n            grades_arr.append(\"D+\")\n        } else if g >= 0.7\
    \ {\n            grades_arr.append(\"D\")\n        } else if g >= 0.0 {\n    \
    \        grades_arr.append(\"D-\")\n        } else {\n            grades_arr.append(\"\
    E\")\n        }\n    }\n    return grades_arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpksgl5sj0/tmpksgl5sj0.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b948bb0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b948b802b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b948b802988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b948b8017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksgl5sj0                        0x00005602eb2047a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b948bcf7460 __libc_start_main +
    245

    6    tmpksgl5sj0                        0x00005602eb2042c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades = grades\n    for i in 0..<grades.count\
    \ {\n        if (grades[i] == 4.0) {\n            grades[i] = 14\n        } else\
    \ if (grades[i] > 3.7) {\n            grades[i] = 13\n        } else if (grades[i]\
    \ > 3.3) {\n            grades[i] = 12\n        } else if (grades[i] > 3.0) {\n\
    \            grades[i] = 11\n        } else if (grades[i] > 2.7) {\n         \
    \   grades[i] = 10\n        } else if (grades[i] > 2.3) {\n            grades[i]\
    \ = 9\n        } else if (grades[i] > 2.0) {\n            grades[i] = 8\n    \
    \    } else if (grades[i] > 1.7) {\n            grades[i] = 7\n        } else\
    \ if (grades[i] > 1.3) {\n            grades[i] = 6\n        } else if (grades[i]\
    \ > 1.0) {\n            grades[i] = 5\n        } else if (grades[i] > 0.7) {\n\
    \            grades[i] = 4\n        } else if (grades[i] > 0.0) {\n          \
    \  grades[i] = 3\n        } else if (grades[i] == 0.0) {\n            grades[i]\
    \ = 2\n        } else {\n            grades[i] = 1\n        }\n    }\n    var\
    \ grades_string = [String]()\n    for i in 0..<grades.count {\n        if (grades[i]\
    \ == 14) {\n            grades_string.append(\"A+\")\n        } else if (grades[i]\
    \ == 13) {\n            grades_string.append(\"A\")\n        } else if (grades[i]\
    \ == 12) {\n            grades_string.append(\"A-\")\n        } else if (grades[i]\
    \ == 11) {\n            grades_string.append(\"B+\")\n        } else if (grades[i]\
    \ == 10) {\n            grades_string.append(\"B\")\n        } else if (grades[i]\
    \ == 9) {\n            grades_string.append\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplpznmwfx.swift:91:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmplpznmwfx.swift:58:31:\
    \ note: to match this opening '{'\n    for i in 0..<grades.count {\n         \
    \                     ^\n/tmp/tmplpznmwfx.swift:91:66: error: expected '}' at\
    \ end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) ==\
    \ [\"E\", \"D-\"])\n                                                         \
    \        ^\n/tmp/tmplpznmwfx.swift:24:59: note: to match this opening '{'\nfunc\
    \ numerical_letter_grade(grades: [Double]) -> [String] {\n                   \
    \                                       ^\n/tmp/tmplpznmwfx.swift:70:27: error:\
    \ cannot reference 'mutating' method as function value\n            grades_string.append\n\
    \                          ^\n/tmp/tmplpznmwfx.swift:74:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grade_array = [String]()\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            grade_array.append(\"A+\")\n\
    \        } else if grade > 3.7 {\n            grade_array.append(\"A\")\n    \
    \    } else if grade > 3.3 {\n            grade_array.append(\"A-\")\n       \
    \ } else if grade > 3.0 {\n            grade_array.append(\"B+\")\n        } else\
    \ if grade > 2.7 {\n            grade_array.append(\"B\")\n        } else if grade\
    \ > 2.3 {\n            grade_array.append(\"B-\")\n        } else if grade > 2.0\
    \ {\n            grade_array.append(\"C+\")\n        } else if grade > 1.7 {\n\
    \            grade_array.append(\"C\")\n        } else if grade > 1.3 {\n    \
    \        grade_array.append(\"C-\")\n        } else if grade > 1.0 {\n       \
    \     grade_array.append(\"D+\")\n        } else if grade > 0.7 {\n          \
    \  grade_array.append(\"D\")\n        } else if grade > 0.0 {\n            grade_array.append(\"\
    D-\")\n        } else {\n            grade_array.append(\"E\")\n        }\n  \
    \  }\n    return grade_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpno3xufdl/tmpno3xufdl.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69bfad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69bf7cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69bf7cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69bf7cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno3xufdl                        0x000055642a1057f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b69bfcc2460 __libc_start_main +
    245

    6    tmpno3xufdl                        0x000055642a105319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesCopy = grades\n    var letterGrades =\
    \ [String]()\n    for grade in gradesCopy {\n        if grade >= 4.0 {\n     \
    \       letterGrades.append(\"A+\")\n        } else if grade > 3.7 {\n       \
    \     letterGrades.append(\"A\")\n        } else if grade > 3.3 {\n          \
    \  letterGrades.append(\"A-\")\n        } else if grade > 3.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grade > 2.7 {\n            letterGrades.append(\"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade > 2.0 {\n            letterGrades.append(\"C+\")\n  \
    \      } else if grade > 1.7 {\n            letterGrades.append(\"C\")\n     \
    \   } else if grade > 1.3 {\n            letterGrades.append(\"C-\")\n       \
    \ } else if grade > 1.0 {\n            letterGrades.append(\"D+\")\n        }\
    \ else if grade > 0.7 {\n            letterGrades.append(\"D\")\n        } else\
    \ if grade > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n\
    \            letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code here!\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8b4ufvnl/tmp8b4ufvnl.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7df7400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7df70f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7df70f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7df70f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8b4ufvnl                        0x000055b1015065e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b7df75ec460 __libc_start_main +
    245

    6    tmp8b4ufvnl                        0x000055b101506109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0: return \"A+\"\n        case let x where x > 3.7: return \"A\"\n\
    \        case let x where x > 3.3: return \"A-\"\n        case let x where x >\
    \ 3.0: return \"B+\"\n        case let x where x > 2.7: return \"B\"\n       \
    \ case let x where x > 2.3: return \"B-\"\n        case let x where x > 2.0: return\
    \ \"C+\"\n        case let x where x > 1.7: return \"C\"\n        case let x where\
    \ x > 1.3: return \"C-\"\n        case let x where x > 1.0: return \"D+\"\n  \
    \      case let x where x > 0.7: return \"D\"\n        case let x where x > 0.0:\
    \ return \"D-\"\n        default: return \"E\"\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map { value in\n        switch value\
    \ {\n        case 0.0:\n            return \"E\"\n        case 0.7...:\n     \
    \       return \"D\"\n        case 1.0...:\n            return \"D+\"\n      \
    \  case 1.3...:\n            return \"C-\"\n        case 1.7...:\n           \
    \ return \"C\"\n        case 2.0...:\n            return \"C+\"\n        case\
    \ 2.3...:\n            return \"B-\"\n        case 2.7...:\n            return\
    \ \"B\"\n        case 3.0...:\n            return \"B+\"\n        case 3.3...:\n\
    \            return \"A-\"\n        case 3.7...:\n            return \"A\"\n \
    \       case 4.0...:\n            return \"A+\"\n        default:\n          \
    \  return \"F\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp52oq6fpr/tmp52oq6fpr.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa933bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa930b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa930b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa930b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52oq6fpr                        0x0000559c79628816 <unavailable> + 6166

    5    libc.so.6                          0x00002afa935ab460 __libc_start_main +
    245

    6    tmp52oq6fpr                        0x0000559c79628339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n  var output: [String] = []\n  for grade in grades\
    \ {\n    switch grade {\n    case let x where x >= 4.0:\n      output.append(\"\
    A+\")\n    case let x where x >= 3.7:\n      output.append(\"A\")\n    case let\
    \ x where x >= 3.3:\n      output.append(\"A-\")\n    case let x where x >= 3.0:\n\
    \      output.append(\"B+\")\n    case let x where x >= 2.7:\n      output.append(\"\
    B\")\n    case let x where x >= 2.3:\n      output.append(\"B-\")\n    case let\
    \ x where x >= 2.0:\n      output.append(\"C+\")\n    case let x where x >= 1.7:\n\
    \      output.append(\"C\")\n    case let x where x >= 1.3:\n      output.append(\"\
    C-\")\n    case let x where x >= 1.0:\n      output.append(\"D+\")\n    case let\
    \ x where x >= 0.7:\n      output.append(\"D\")\n    case let x where x >= 0.0:\n\
    \      output.append(\"D-\")\n    default:\n      output.append(\"E\")\n    }\n\
    \  }\n  return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpa91c31t7/tmpa91c31t7.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b849cc1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849c911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849c911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849c9107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa91c31t7                        0x000055c3befc07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b849ce06460 __libc_start_main +
    245

    6    tmpa91c31t7                        0x000055c3befc02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade\
    \ in grades {\n        if grade > 4.0 {\n            letter_grades.append(\"A+\"\
    )\n        } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n \
    \       } else if grade > 3.0 {\n            letter_grades.append(\"B+\")\n  \
    \      } else if grade > 2.7 {\n            letter_grades.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade > 2.0 {\n            letter_grades.append(\"C+\")\n      \
    \  } else if grade > 1.7 {\n            letter_grades.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            letter_grades.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n      \
    \      letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7x5bgmb0/tmp7x5bgmb0.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3750cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf37203b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf37203988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf372027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5bgmb0                        0x00005584a5b617a6 <unavailable> + 6054

    5    libc.so.6                          0x00002adf376f8460 __libc_start_main +
    245

    6    tmp7x5bgmb0                        0x00005584a5b612c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result = [String]()\n    for grade in grades\
    \ {\n        switch grade {\n        case _ where grade == 4.0:\n            result.append(\"\
    A+\")\n        case _ where grade > 3.7:\n            result.append(\"A\")\n \
    \       case _ where grade > 3.3:\n            result.append(\"A-\")\n       \
    \ case _ where grade > 3.0:\n            result.append(\"B+\")\n        case _\
    \ where grade > 2.7:\n            result.append(\"B\")\n        case _ where grade\
    \ > 2.3:\n            result.append(\"B-\")\n        case _ where grade > 2.0:\n\
    \            result.append(\"C+\")\n        case _ where grade > 1.7:\n      \
    \      result.append(\"C\")\n        case _ where grade > 1.3:\n            result.append(\"\
    C-\")\n        case _ where grade > 1.0:\n            result.append(\"D+\")\n\
    \        case _ where grade > 0.7:\n            result.append(\"D\")\n       \
    \ case _ where grade > 0.0:\n            result.append(\"D-\")\n        default:\n\
    \            result.append(\"E\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeTable = [\n        (0.7, \"D-\"),\n  \
    \      (1.0, \"D+\"),\n        (1.3, \"C-\"),\n        (1.7, \"C\"),\n       \
    \ (2.0, \"C+\"),\n        (2.3, \"B-\"),\n        (2.7, \"B\"),\n        (3.0,\
    \ \"B+\"),\n        (3.3, \"A-\"),\n        (3.7, \"A\"),\n        (4.0, \"A+\"\
    )\n    ]\n    return grades.map { grade in\n        for (minimum, gradeLetter)\
    \ in gradeTable {\n            if grade >= minimum {\n                return gradeLetter\n\
    \            }\n        }\n        return \"E\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzmj9sf4e/tmpzmj9sf4e.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af510537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af51022eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af51022e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af51022d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmj9sf4e                        0x000055b59c5bf7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002af510723460 __libc_start_main +
    245

    6    tmpzmj9sf4e                        0x000055b59c5bf2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let grades = grades.map { Double($0) }\n    var\
    \ result = [String]()\n    for g in grades {\n        switch g {\n        case\
    \ 4.0:\n            result.append(\"A+\")\n        case 3.7...4.0:\n         \
    \   result.append(\"A\")\n        case 3.3...3.7:\n            result.append(\"\
    A-\")\n        case 3.0...3.3:\n            result.append(\"B+\")\n        case\
    \ 2.7...3.0:\n            result.append(\"B\")\n        case 2.3...2.7:\n    \
    \        result.append(\"B-\")\n        case 2.0...2.3:\n            result.append(\"\
    C+\")\n        case 1.7...2.0:\n            result.append(\"C\")\n        case\
    \ 1.3...1.7:\n            result.append(\"C-\")\n        case 1.0...1.3:\n   \
    \         result.append(\"D+\")\n        case 0.7...1.0:\n            result.append(\"\
    D\")\n        case 0.0...0.7:\n            result.append(\"D-\")\n        case\
    \ 0.0:\n            result.append(\"E\")\n        default:\n            result.append(\"\
    F\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptbz9_hk6/tmptbz9_hk6.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba053d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba050cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba050cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba050ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbz9_hk6                        0x00005605e17bb9e6 <unavailable> + 6630

    5    libc.so.6                          0x00002aba055c0460 __libc_start_main +
    245

    6    tmptbz9_hk6                        0x00005605e17bb509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesToReturn: [String] = []\n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            gradesToReturn.append(\"\
    A+\")\n        case 3.7..<4.0:\n            gradesToReturn.append(\"A\")\n   \
    \     case 3.3..<3.7:\n            gradesToReturn.append(\"A-\")\n        case\
    \ 3.0..<3.3:\n            gradesToReturn.append(\"B+\")\n        case 2.7..<3.0:\n\
    \            gradesToReturn.append(\"B\")\n        case 2.3..<2.7:\n         \
    \   gradesToReturn.append(\"B-\")\n        case 2.0..<2.3:\n            gradesToReturn.append(\"\
    C+\")\n        case 1.7..<2.0:\n            gradesToReturn.append(\"C\")\n   \
    \     case 1.3..<1.7:\n            gradesToReturn.append(\"C-\")\n        case\
    \ 1.0..<1.3:\n            gradesToReturn.append(\"D+\")\n        case 0.7..<1.0:\n\
    \            gradesToReturn.append(\"D\")\n        case 0.0..<0.7:\n         \
    \   gradesToReturn.append(\"D-\")\n        case 0.0:\n            gradesToReturn.append(\"\
    E\")\n        default:\n            gradesToReturn.append(\"invalid\")\n     \
    \   }\n    }\n    return gradesToReturn\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmplo4encs3/tmplo4encs3.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b519974cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5199443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5199443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51994427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo4encs3                        0x0000563bf49a08d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b5199938460 __libc_start_main +
    245

    6    tmplo4encs3                        0x0000563bf49a03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grades_table = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            grades_table.append(\"\
    A+\")\n        case 3.7...4.0:\n            grades_table.append(\"A\")\n     \
    \   case 3.3...3.7:\n            grades_table.append(\"A-\")\n        case 3.0...3.3:\n\
    \            grades_table.append(\"B+\")\n        case 2.7...3.0:\n          \
    \  grades_table.append(\"B\")\n        case 2.3...2.7:\n            grades_table.append(\"\
    B-\")\n        case 2.0...2.3:\n            grades_table.append(\"C+\")\n    \
    \    case 1.7...2.0:\n            grades_table.append(\"C\")\n        case 1.3...1.7:\n\
    \            grades_table.append(\"C-\")\n        case 1.0...1.3:\n          \
    \  grades_table.append(\"D+\")\n        case 0.7...1.0:\n            grades_table.append(\"\
    D\")\n        case 0.0...0.7:\n            grades_table.append(\"D-\")\n     \
    \   case 0.0:\n            grades_table.append(\"E\")\n        default:\n    \
    \        print(\"Could not calculate letter grade\")\n        }\n    }\n    return\
    \ grades_table\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptwa319_g/tmptwa319_g.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513b3f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513b0e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513b0e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513b0e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwa319_g                        0x00005628d2d9ba46 <unavailable> + 6726

    5    libc.so.6                          0x00002b513b5de460 __libc_start_main +
    245

    6    tmptwa319_g                        0x00005628d2d9b569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var graded_students = [String]()\n    for gpa in\
    \ grades {\n        switch gpa {\n        case 4.0:\n            graded_students.append(\"\
    A+\")\n        case ..<3.7:\n            graded_students.append(\"A\")\n     \
    \   case ..<3.3:\n            graded_students.append(\"A-\")\n        case ..<3.0:\n\
    \            graded_students.append(\"B+\")\n        case ..<2.7:\n          \
    \  graded_students.append(\"B\")\n        case ..<2.3:\n            graded_students.append(\"\
    B-\")\n        case ..<2.0:\n            graded_students.append(\"C+\")\n    \
    \    case ..<1.7:\n            graded_students.append(\"C\")\n        case ..<1.3:\n\
    \            graded_students.append(\"C-\")\n        case ..<1.0:\n          \
    \  graded_students.append(\"D+\")\n        case ..<0.7:\n            graded_students.append(\"\
    D\")\n        case ..<0.0:\n            graded_students.append(\"D-\")\n     \
    \   default:\n            graded_students.append(\"E\")\n        }\n    }\n  \
    \  return graded_students\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp25t6151z/tmp25t6151z.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4d84f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4d81edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4d81ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4d81ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25t6151z                        0x0000557cac15d986 <unavailable> + 6534

    5    libc.so.6                          0x00002ad4d86e2460 __libc_start_main +
    245

    6    tmp25t6151z                        0x0000557cac15d4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for i in grades\
    \ {\n        switch i {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        break\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgwqkgzuj/tmpgwqkgzuj.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c7787c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c747eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c747e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c747d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgwqkgzuj                        0x000055e3bf336926 <unavailable> + 6438

    5    libc.so.6                          0x00002b80c7973460 __libc_start_main +
    245

    6    tmpgwqkgzuj                        0x000055e3bf336449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return [\"\"][1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp649lqljg.swift:25:16: error: type of expression is ambiguous without\
    \ more context\n    return [\"\"][1]\n           ~~~~^~~\n"
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for gpa in grades\
    \ {\n        if gpa == 4.0 {\n            letterGrades.append(\"A+\")\n      \
    \  } else if gpa >= 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if gpa >= 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ gpa >= 3.0 {\n            letterGrades.append(\"B+\")\n        } else if gpa\
    \ >= 2.7 {\n            letterGrades.append(\"B\")\n        } else if gpa >= 2.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if gpa >= 2.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if gpa >= 1.7 {\n   \
    \         letterGrades.append(\"C\")\n        } else if gpa >= 1.3 {\n       \
    \     letterGrades.append(\"C-\")\n        } else if gpa >= 1.0 {\n          \
    \  letterGrades.append(\"D+\")\n        } else if gpa >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        } else if gpa >= 0.0 {\n            letterGrades.append(\"D-\")\n\
    \        } else {\n            letterGrades.append(\"E\")\n        }\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpafjrnajf/tmpafjrnajf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b11defc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b11ae6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b11ae6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b11ae57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafjrnajf                        0x00005575be7bf7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7b11fdb460 __libc_start_main +
    245

    6    tmpafjrnajf                        0x00005575be7bf319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var output = [String]()\n    for i in grades {\n\
    \        if i >= 4.0 {\n            output.append(\"A+\")\n        } else if i\
    \ >= 3.7 {\n            output.append(\"A\")\n        } else if i >= 3.3 {\n \
    \           output.append(\"A-\")\n        } else if i >= 3.0 {\n            output.append(\"\
    B+\")\n        } else if i >= 2.7 {\n            output.append(\"B\")\n      \
    \  } else if i >= 2.3 {\n            output.append(\"B-\")\n        } else if\
    \ i >= 2.0 {\n            output.append(\"C+\")\n        } else if i >= 1.7 {\n\
    \            output.append(\"C\")\n        } else if i >= 1.3 {\n            output.append(\"\
    C-\")\n        } else if i >= 1.0 {\n            output.append(\"D+\")\n     \
    \   } else if i >= 0.7 {\n            output.append(\"D\")\n        } else if\
    \ i >= 0.0 {\n            output.append(\"D-\")\n        } else {\n          \
    \  output.append(\"E\")\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpspmd2kaz/tmpspmd2kaz.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7b9ed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7b9bccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7b9bcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7b9bcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspmd2kaz                        0x0000555f6494a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba7ba0c1460 __libc_start_main +
    245

    6    tmpspmd2kaz                        0x0000555f6494a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu9lrvn39/tmpu9lrvn39.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95a8eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af95a5e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af95a5e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af95a5e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9lrvn39                        0x000055cbc1d7a7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002af95aad6460 __libc_start_main +
    245

    6    tmpu9lrvn39                        0x000055cbc1d7a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0..<100: return \"A+\"\n        case 3.7..<4.0: return \"A\"\n   \
    \     case 3.3..<3.7: return \"A-\"\n        case 3.0..<3.3: return \"B+\"\n \
    \       case 2.7..<3.0: return \"B\"\n        case 2.3..<2.7: return \"B-\"\n\
    \        case 2.0..<2.3: return \"C+\"\n        case 1.7..<2.0: return \"C\"\n\
    \        case 1.3..<1.7: return \"C-\"\n        case 1.0..<1.3: return \"D+\"\n\
    \        case 0.7..<1.0: return \"D\"\n        case 0.0..<0.7: return \"D-\"\n\
    \        default: return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphyout1y9/tmphyout1y9.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac332dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac32fd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac32fd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac32fd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyout1y9                        0x0000561f9e4f87b6 <unavailable> + 6070

    5    libc.so.6                          0x00002aac334ca460 __libc_start_main +
    245

    6    tmphyout1y9                        0x0000561f9e4f82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // your code goes here\n    var result: [String]\
    \ = []\n    for grade in grades {\n        if grade == 4.0 {\n            result.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            result.append(\"A\")\n   \
    \     } else if grade > 3.3 {\n            result.append(\"A-\")\n        } else\
    \ if grade > 3.0 {\n            result.append(\"B+\")\n        } else if grade\
    \ > 2.7 {\n            result.append(\"B\")\n        } else if grade > 2.3 {\n\
    \            result.append(\"B-\")\n        } else if grade > 2.0 {\n        \
    \    result.append(\"C+\")\n        } else if grade > 1.7 {\n            result.append(\"\
    C\")\n        } else if grade > 1.3 {\n            result.append(\"C-\")\n   \
    \     } else if grade > 1.0 {\n            result.append(\"D+\")\n        } else\
    \ if grade > 0.7 {\n            result.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp108uguym/tmp108uguym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6906c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6903bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6903bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6903bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp108uguym                        0x000055c853ce65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ba6908b2460 __libc_start_main +
    245

    6    tmp108uguym                        0x000055c853ce6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014232
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp74oqx9ly/tmp74oqx9ly.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb85b74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb8586bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb8586b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb8586a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74oqx9ly                        0x000056198cadd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002afb85d60460 __libc_start_main +
    245

    6    tmp74oqx9ly                        0x000056198cadd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7..<4.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3..<3.7:\n            letterGrades.append(\"A-\")\n        case 3.0..<3.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7..<3.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3..<2.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0..<2.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7..<2.0:\n            letterGrades.append(\"C\")\n        case 1.3..<1.7:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0..<1.3:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7..<1.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0..<0.7:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        print(\"Invalid grade\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4_0arjgl/tmp4_0arjgl.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba43c43fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba43c136b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba43c136988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba43c1357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_0arjgl                        0x000055620c29aa46 <unavailable> + 6726

    5    libc.so.6                          0x00002ba43c62b460 __libc_start_main +
    245

    6    tmp4_0arjgl                        0x000055620c29a569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    // write your code here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp088rb8oz.swift:26:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var newArray: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            newArray.append(\"A+\")\n        }\
    \ else if grade > 3.7 {\n            newArray.append(\"A\")\n        } else if\
    \ grade > 3.3 {\n            newArray.append(\"A-\")\n        } else if grade\
    \ > 3.0 {\n            newArray.append(\"B+\")\n        } else if grade > 2.7\
    \ {\n            newArray.append(\"B\")\n        } else if grade > 2.3 {\n   \
    \         newArray.append(\"B-\")\n        } else if grade > 2.0 {\n         \
    \   newArray.append(\"C+\")\n        } else if grade > 1.7 {\n            newArray.append(\"\
    C\")\n        } else if grade > 1.3 {\n            newArray.append(\"C-\")\n \
    \       } else if grade > 1.0 {\n            newArray.append(\"D+\")\n       \
    \ } else if grade > 0.7 {\n            newArray.append(\"D\")\n        } else\
    \ if grade > 0.0 {\n            newArray.append(\"D-\")\n        } else {\n  \
    \          newArray.append(\"E\")\n        }\n    }\n    return newArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var result: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.append(\"A+\")\n        } else\
    \ if grade >= 3.7 {\n            result.append(\"A\")\n        } else if grade\
    \ >= 3.3 {\n            result.append(\"A-\")\n        } else if grade >= 3.0\
    \ {\n            result.append(\"B+\")\n        } else if grade >= 2.7 {\n   \
    \         result.append(\"B\")\n        } else if grade >= 2.3 {\n           \
    \ result.append(\"B-\")\n        } else if grade >= 2.0 {\n            result.append(\"\
    C+\")\n        } else if grade >= 1.7 {\n            result.append(\"C\")\n  \
    \      } else if grade >= 1.3 {\n            result.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            result.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            result.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"\
    E\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdri1lvgf/tmpdri1lvgf.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295682ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2956525b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2956525988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29565247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdri1lvgf                        0x000055e4cf0bd7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2956a1a460 __libc_start_main +
    245

    6    tmpdri1lvgf                        0x000055e4cf0bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    return grades.map {\n        switch $0 {\n    \
    \    case 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n         \
    \   return \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n       \
    \ case 3.0..<3.3:\n            return \"B+\"\n        case 2.7..<3.0:\n      \
    \      return \"B\"\n        case 2.3..<2.7:\n            return \"B-\"\n    \
    \    case 2.0..<2.3:\n            return \"C+\"\n        case 1.7..<2.0:\n   \
    \         return \"C\"\n        case 1.3..<1.7:\n            return \"C-\"\n \
    \       case 1.0..<1.3:\n            return \"D+\"\n        case 0.7..<1.0:\n\
    \            return \"D\"\n        case 0.0..<0.7:\n            return \"D-\"\n\
    \        default:\n            return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu9lrvn39/tmpu9lrvn39.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95a8eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af95a5e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af95a5e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af95a5e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9lrvn39                        0x000055cbc1d7a7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002af95aad6460 __libc_start_main +
    245

    6    tmpu9lrvn39                        0x000055cbc1d7a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013958
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var grade_list = [String]()\n    for g in grades\
    \ {\n        switch g {\n        case 4.0:\n            grade_list.append(\"A+\"\
    )\n        case 3.7...:\n            grade_list.append(\"A\")\n        case 3.3...:\n\
    \            grade_list.append(\"A-\")\n        case 3.0...:\n            grade_list.append(\"\
    B+\")\n        case 2.7...:\n            grade_list.append(\"B\")\n        case\
    \ 2.3...:\n            grade_list.append(\"B-\")\n        case 2.0...:\n     \
    \       grade_list.append(\"C+\")\n        case 1.7...:\n            grade_list.append(\"\
    C\")\n        case 1.3...:\n            grade_list.append(\"C-\")\n        case\
    \ 1.0...:\n            grade_list.append(\"D+\")\n        case 0.7...:\n     \
    \       grade_list.append(\"D\")\n        case 0.0...:\n            grade_list.append(\"\
    D-\")\n        default:\n            grade_list.append(\"E\")\n        }\n   \
    \ }\n    return grade_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfnauhkgz/tmpfnauhkgz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63d8c79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63d8970b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63d8970988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63d896f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnauhkgz                        0x00005603be4eb986 <unavailable> + 6534

    5    libc.so.6                          0x00002b63d8e65460 __libc_start_main +
    245

    6    tmpfnauhkgz                        0x00005603be4eb4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660014234
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letter_grades = [String]()\n    for gpa in\
    \ grades {\n        switch gpa {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 0.0:\n            letter_grades.append(\"E\")\n        default:\n\
    \            let num = Int(gpa*10)\n            letter_grades.append(num_to_letter(num:\
    \ num))\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu7fjawmk.swift:34:34: error: cannot find 'num_to_letter' in scope\n\
    \            letter_grades.append(num_to_letter(num: num))\n                 \
    \                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014234
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you an array of GPAs for some students and you have to write\
    \ \n/// a function that can output an array of letter grades using the following\
    \ table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7\
    \                A \n/// > 3.3                A- \n/// > 3.0                B+\n\
    /// > 2.7                B \n/// > 2.3                B-\n/// > 2.0          \
    \      C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0\
    \                D+ \n/// > 0.7                D \n/// > 0.0                D-\n\
    /// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    let gradeDict = [4.0: \"A+\", 3.7: \"A\", 3.3:\
    \ \"A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0: \"C+\", 1.7: \"C\", 1.3:\
    \ \"C-\", 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\"]\n    var final: [String] = []\n\
    \    for grade in grades {\n        var currentGrade = \"E\"\n        for gpa\
    \ in gradeDict.keys {\n            if gpa <= grade {\n                currentGrade\
    \ = gradeDict[gpa]!\n                break\n            }\n        }\n       \
    \ final.append(currentGrade)\n    }\n    return final\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpv9eyjev3/tmpv9eyjev3.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f201fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f1fef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f1fef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f1fef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9eyjev3                        0x0000560244874b06 <unavailable> + 6918

    5    libc.so.6                          0x00002b5f203e9460 __libc_start_main +
    245

    6    tmpv9eyjev3                        0x0000560244874629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660014234
