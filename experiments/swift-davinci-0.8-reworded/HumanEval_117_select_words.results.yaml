language: swift
name: HumanEval_117_select_words
results:
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let letters = Set(\"abcdefghijklmnopqrstuvwxyz\")\n    var ans =\
    \ [String]()\n    for word in s.lowercased().split(separator: \" \") {\n     \
    \   var cons = 0\n        for c in word {\n            if letters.contains(c)\
    \ && !vowels.contains(c) {\n                cons += 1\n            }\n       \
    \ }\n        if cons == n {\n            ans.append(String(word))\n        }\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmppmflq8vj/tmppmflq8vj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3625381c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3625078b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3625078988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36250777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmflq8vj                        0x000055d6b41c9c79 <unavailable> + 7289

    5    libc.so.6                          0x00002b362556d460 __libc_start_main +
    245

    6    tmppmflq8vj                        0x000055d6b41c9729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { word in\n        word.components(separatedBy: vowels).count\
    \ - 1 == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8kyd9eq1.swift:20:38: error: cannot find 'vowels' in scope\n  \
    \      word.components(separatedBy: vowels).count - 1 == n\n                 \
    \                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\treturn []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8j9p5rhv/tmp8j9p5rhv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b5152dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b51224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b51224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b512237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8j9p5rhv                        0x000055d81af834c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b4b51719460 __libc_start_main +
    245

    6    tmp8j9p5rhv                        0x000055d81af830c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    for word in s.components(separatedBy: \" \") {\n        if !word.isEmpty\
    \ {\n            var numConsonants = 0\n            for char in word {\n     \
    \           if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"\
    o\" || char == \"u\") {\n                    continue\n                }\n   \
    \             numConsonants += 1\n            }\n            if numConsonants\
    \ == n {\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnwox9_65.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var m = [String]()\n\
    \  let l = s.split(separator: \" \")\n  for i in l {\n    if get_count(s: String(i))\
    \ == n {\n      m.append(String(i))\n    }\n  }\n  return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6b1sx0w6.swift:22:8: error: cannot find 'get_count' in scope\n\
    \    if get_count(s: String(i)) == n {\n       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        if consonants_counter(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7hjbc3xi.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let words = s.components(separatedBy: \" \")\n    return words.filter\
    \ { word in\n        word.reduce(0) { count, letter in\n            vowels.contains(letter)\
    \ ? count : count + 1\n        } == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwk7lv7t1.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var consonants = 0\n\
    \    var result = [String]()\n    let temp = s.components(separatedBy: \" \")\n\
    \    for i in temp {\n        for j in i {\n            switch j {\n         \
    \   case \"a\", \"e\", \"i\", \"o\", \"u\", \"y\":\n                break\n  \
    \          default:\n                consonants += 1\n            }\n        }\n\
    \        if consonants == n {\n            result.append(i)\n        }\n     \
    \   consonants = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb17geo7n.swift:21:18: error: value of type 'String' has no member\
    \ 'components'\n    let temp = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.split(separator:\
    \ \" \")\n    let vowels = \"aeiou\"\n    return words.filter {\n        $0.filter\
    \ {\n            !vowels.contains($0)\n        }.count == n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp565rlwe8.swift:21:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter {\n                 ^\n/tmp/tmp565rlwe8.swift:21:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter {\n        \
    \         ^\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var results = [String]()\n\
    \    let s = s.lowercased()\n    let words = s.components(separatedBy: \" \")\n\
    \    for var word in words {\n        let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n        var numberOfConsonants = 0\n        for var letter in word {\n\
    \            if !vowels.contains(String(letter)) {\n                numberOfConsonants\
    \ += 1\n            }\n        }\n        if numberOfConsonants == n {\n     \
    \       results.append(word)\n        }\n    }\n    return results\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl0crec9p.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words: [String]\
    \ = []\n    var word: String = \"\"\n    for char in s {\n        let lowChar\
    \ = String(char).lowercased()\n        if lowChar == \" \" {\n            if countConsonants(word)\
    \ == n {\n                words.append(word)\n            }\n            word\
    \ = \"\"\n        } else {\n            word += String(char)\n        }\n    }\n\
    \    if countConsonants(word) == n {\n        words.append(word)\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt87v7o4a.swift:24:16: error: cannot find 'countConsonants' in scope\n\
    \            if countConsonants(word) == n {\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpt87v7o4a.swift:32:8: error: cannot find 'countConsonants' in scope\n \
    \   if countConsonants(word) == n {\n       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter({ countConsonants(word: $0) == n })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp30avq27z.swift:19:52: error: cannot find 'countConsonants' in scope\n\
    \    return s.components(separatedBy: \" \").filter({ countConsonants(word: $0)\
    \ == n })\n                                                   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.contains(n, of: \"bcdfghjklmnpqrstvwxyz\") }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprlgu94sh.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.contains(n,\
    \ of: \"bcdfghjklmnpqrstvwxyz\") }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let onlyAlpha = s.replacingOccurrences(of:\
    \ \"[^a-zA-Z ]\", with: \"\", options: .regularExpression)\n    var words = onlyAlpha.components(separatedBy:\
    \ \" \")\n    words = words.filter {\n        let chars = Array($0.lowercased())\n\
    \        let consonants = chars.filter { !$0.isVowel }\n        return consonants.count\
    \ == n\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0v7hkrrl.swift:19:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let onlyAlpha = s.replacingOccurrences(of: \"[^a-zA-Z\
    \ ]\", with: \"\", options: .regularExpression)\n                    ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0v7hkrrl.swift:19:82: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    let onlyAlpha = s.replacingOccurrences(of:\
    \ \"[^a-zA-Z ]\", with: \"\", options: .regularExpression)\n                 \
    \                                                               ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.lowercased().components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if vowels.contains(letter) {\n\
    \                continue\n            } else if consonants.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3lrzvfbk.swift:21:32: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.lowercased().components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let s = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for str in s {\n        if str.count\
    \ > n {\n            var count = 0\n            for char in str {\n          \
    \      if !is_vowel(c: char) {\n                    count += 1\n             \
    \   }\n            }\n            if count == n {\n                result.append(str)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmps74vrzw5.swift:19:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if s.isEmpty {\n  \
    \      return []\n    }\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    let s = s.lowercased()\n    var temp = s.components(separatedBy: \" \")\n\
    \    temp = temp.filter { w in\n        var total = 0\n        for c in w {\n\
    \            if vowels.contains(c) {\n                total += 1\n           \
    \ }\n        }\n        return total == n\n    }\n    return temp\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpczhwqzsv.swift:25:18: error: value of type 'String' has no member\
    \ 'components'\n    var temp = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var words =\
    \ s.components(separatedBy: \" \")\n    var result = [String]()\n    for (index,\
    \ word) in words.enumerated() {\n        var number = 0\n        for letter in\
    \ word {\n            if consonants.contains(String(letter).lowercased()) {\n\
    \                number += 1\n            }\n        }\n        if number == n\
    \ {\n            result.append(word)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp70ht667i.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ selectedWords: [String] = []\n    let words = s.split(separator: \" \")\n  \
    \  for word in words {\n        var consonantCount = 0\n        for letter in\
    \ word {\n            if !vowels.contains(letter) {\n                consonantCount\
    \ += 1\n            }\n        }\n        if consonantCount == n {\n         \
    \   selectedWords.append(String(word))\n        }\n    }\n    return selectedWords\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tvar consonants: String\
    \ = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n\tvar consonantList: [String]\
    \ = []\n\tvar words: [String] = []\n\t\n\tvar result: [String] = []\n\t\n\tfor\
    \ i in s {\n\t\tif consonants.contains(i) {\n\t\t\tconsonantList.append(String(i))\n\
    \t\t}\n\t}\n\t\n\twords = s.components(separatedBy: \" \")\n\t\n\tfor i in words\
    \ {\n\t\tvar count: Int = 0\n\t\t\n\t\tfor j in i {\n\t\t\tif consonants.contains(j)\
    \ {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t\t\n\t\tif count == n {\n\t\t\tresult.append(i)\n\
    \t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuc8e0qma.swift:31:12: error: value of type 'String' has no member\
    \ 'components'\n        words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter {String($0).filter(\"bcdfghjklmnpqrstvwxyz\".contains).count ==\
    \ n}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_zj0dkqk.swift:19:36: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return s.split(separator: \" \").filter {String($0).filter(\"bcdfghjklmnpqrstvwxyz\"\
    .contains).count == n}\n                                   ^\n/tmp/tmp_zj0dkqk.swift:19:36:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return s.split(separator: \" \"\
    ).filter {String($0).filter(\"bcdfghjklmnpqrstvwxyz\".contains).count == n}\n\
    \                                   ^\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ wordCount = 0\n        for letter in word {\n            if !is_vowel(letter:\
    \ letter) {\n                wordCount += 1\n            }\n        }\n      \
    \  if wordCount == n {\n            result.append(String(word))\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv_bhrlcu.swift:24:17: error: cannot find 'is_vowel' in scope\n\
    \            if !is_vowel(letter: letter) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    var word = \"\"\n    var consonantsCount = 0\n    var i = 0\n    while i\
    \ < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n      \
    \  let char = s[index]\n        if char == \" \" {\n            i += 1\n     \
    \       continue\n        }\n        if isConsonant(c: char) {\n            consonantsCount\
    \ += 1\n        }\n        word += String(char)\n        if consonantsCount ==\
    \ n {\n            result.append(word)\n            consonantsCount = 0\n    \
    \        word = \"\"\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt1bfze23.swift:30:12: error: cannot find 'isConsonant' in scope\n\
    \        if isConsonant(c: char) {\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set([\"\
    a\", \"e\", \"i\", \"o\", \"u\"])\n    var words = s.components(separatedBy: \"\
    \ \")\n    for i in 0..<words.count {\n        var word = words[i]\n        word\
    \ = word.lowercased()\n        var consonants = 0\n        for j in 0..<word.count\
    \ {\n            if !vowels.contains(word[word.index(word.startIndex, offsetBy:\
    \ j)]) {\n                consonants += 1\n            }\n        }\n        if\
    \ consonants != n {\n            words.remove(at: i)\n        }\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptc4fs861.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiou\"\n    let s = s.lowercased()\n\
    \    var strArray = s.components(separatedBy: \" \")\n    var resultArray: [String]\
    \ = []\n    for i in 0..<strArray.count {\n        var consonantCounter = 0\n\
    \        var vowelCounter = 0\n        for j in 0..<strArray[i].count {\n    \
    \        let index = strArray[i].index(strArray[i].startIndex, offsetBy: j)\n\
    \            let char = strArray[i][index]\n            if consonants.contains(char)\
    \ {\n                consonantCounter += 1\n            } else if vowels.contains(char)\
    \ {\n                vowelCounter += 1\n            }\n        }\n        if consonantCounter\
    \ == n {\n            resultArray.append(strArray[i])\n        }\n    }\n    return\
    \ resultArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6by9jn4e.swift:22:22: error: value of type 'String' has no member\
    \ 'components'\n    var strArray = s.components(separatedBy: \" \")\n        \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    return words.filter {\
    \ $0.filter { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7j3oqw03.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let result = s.split(separator: \" \").filter({(word) -> Bool in\n     \
    \   return word.filter({!vowels.contains($0)}).count == n\n    })\n    return\
    \ result.map({String($0)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpajwc0r2f/tmpajwc0r2f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b922aa52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b922a749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b922a749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b922a7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajwc0r2f                        0x0000561251a81eab <unavailable> + 7851

    5    libc.so.6                          0x00002b922ac3e460 __libc_start_main +
    245

    6    tmpajwc0r2f                        0x0000561251a81599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tlet string = s.lowercased()\n\
    \tlet vowels = \"aeiou\"\n\tvar words = [String]()\n\tvar consonants = 0\n\tvar\
    \ word = \"\"\n\tfor char in string {\n\t\tif char != \" \" {\n\t\t\tword += String(char)\n\
    \t\t\tif !vowels.contains(char) {\n\t\t\t\tconsonants += 1\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tif consonants == n {\n\t\t\t\twords.append(word)\n\t\t\t}\n\t\t\tword\
    \ = \"\"\n\t\t\tconsonants = 0\n\t\t}\n\t}\n\tif consonants == n {\n\t\twords.append(word)\n\
    \t}\n\treturn words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp6by2nl12/tmp6by2nl12.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebb73b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebb70b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebb70b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebb70af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6by2nl12                        0x0000562d2ce8ca49 <unavailable> + 6729

    5    libc.so.6                          0x00002aebb75a5460 __libc_start_main +
    245

    6    tmp6by2nl12                        0x0000562d2ce8c4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  // Check that the input\
    \ is not empty\n  guard !s.isEmpty else { return [] }\n  // Split the string by\
    \ space\n  let words = s.split(separator: \" \")\n  // Create an empty array of\
    \ strings\n  var result = [String]()\n  // Loop over the words\n  for word in\
    \ words {\n    // Create an empty array of string\n    var chars = [String]()\n\
    \    // Loop over the characters in a word\n    for char in word {\n      // Check\
    \ that the character is a letter\n      guard char.isLetter else { continue }\n\
    \      // Convert the character to string\n      let char = String(char)\n   \
    \   // Convert the letter to lowercase\n      let lowercased = char.lowercased()\n\
    \      // If the letter is a vowel then skip it\n      if lowercased == \"a\"\
    \ || lowercased == \"e\" || lowercased == \"i\" || lowercased == \"o\" || lowercased\
    \ == \"u\" {\n        continue\n      }\n      // Append the character to the\
    \ array of string\n      chars.append(char)\n    }\n    // Count the number of\
    \ consonants in the word\n    let count = chars.count\n    // Check that the word\
    \ contains the correct number of consonants\n    if count == n {\n      // Append\
    \ the word to the result array\n      result.append(String(word))\n    }\n  }\n\
    \  // Return the result array\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tvar arr = [String]()\n\
    \tfor word in s.components(separatedBy: \" \") {\n\t\tvar c = 0\n\t\tfor char\
    \ in word {\n\t\t\tif !\"aeiou\".contains(char) {\n\t\t\t\tc += 1\n\t\t\t}\n\t\
    \t}\n\t\tif c == n {\n\t\t\tarr.append(word)\n\t\t}\n\t}\n\treturn arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp68_gidwx.swift:20:16: error: value of type 'String' has no member\
    \ 'components'\n        for word in s.components(separatedBy: \" \") {\n     \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = \"\
    qwrtypsdfghjklzxcvbnm\"\n    let words = s.split(separator: \" \")\n    return\
    \ words.filter({$0.filter( {consonants.contains($0) }).count == n}).map({String($0)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpyg70d0_b/tmpyg70d0_b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cd4eaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cd4ba5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cd4ba5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cd4ba47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg70d0_b                        0x000055d4f8896ae9 <unavailable> + 6889

    5    libc.so.6                          0x00002b4cd509a460 __libc_start_main +
    245

    6    tmpyg70d0_b                        0x000055d4f8896599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.split(separator: \" \")\n    return words.filter\
    \ { $0.filter { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpakh64ujy.swift:21:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter { $0.filter { !vowels.contains($0) }.count == n }\n \
    \                ^\n/tmp/tmpakh64ujy.swift:21:18: note: arguments to generic parameter\
    \ 'Element' ('String.SubSequence' (aka 'Substring') and 'String') are expected\
    \ to be equal\n    return words.filter { $0.filter { !vowels.contains($0) }.count\
    \ == n }\n                 ^\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  let words = s.split(separator:\
    \ \" \")\n  let vowels = \"aeiou\"\n  return words.filter { word in\n    word.lowercased().filter\
    \ { vowels.contains($0) }.count == n\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt7iqhfdr.swift:21:16: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \  return words.filter { word in\n               ^\n/tmp/tmpt7iqhfdr.swift:21:16:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n  return words.filter { word in\n  \
    \             ^\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var newArr = [String]()\n\
    \    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        var\
    \ count = 0\n        for j in i {\n            if (j == \"a\" || j == \"e\" ||\
    \ j == \"i\" || j == \"o\" || j == \"u\") {\n                count += 1\n    \
    \        }\n        }\n        if count == n {\n            newArr.append(i)\n\
    \        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgtjuws79.swift:20:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var stringArray = s.components(separatedBy:\
    \ \" \")\n    var outputArray = [String]()\n    for i in 0..<stringArray.count\
    \ {\n        if !isVowel(c: stringArray[i].characters.first!) {\n            var\
    \ cc = 0\n            for j in 0..<stringArray[i].characters.count {\n       \
    \         if !isVowel(c: stringArray[i].characters[stringArray[i].index(stringArray[i].startIndex,\
    \ offsetBy: j)]) {\n                    cc += 1\n                }\n         \
    \   }\n            if cc == n {\n                outputArray.append(stringArray[i])\n\
    \            }\n        }\n    }\n    return outputArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpom4n3l_4.swift:19:25: error: value of type 'String' has no member\
    \ 'components'\n    var stringArray = s.components(separatedBy: \" \")\n     \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tvar result = [String]()\n\
    \tvar count = 0\n\tvar words = \"\"\n\t\n\tfor i in s {\n\t\tif i != \" \" {\n\
    \t\t\twords += String(i)\n\t\t} else {\n\t\t\tfor j in words {\n\t\t\t\tif j !=\
    \ \"a\" && j != \"e\" && j != \"i\" && j != \"o\" && j != \"u\" {\n\t\t\t\t\t\
    count += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif count == n {\n\t\t\t\tresult.append(words)\n\
    \t\t\t}\n\t\t\tcount = 0\n\t\t\twords = \"\"\n\t\t}\n\t}\n\t\n\tfor i in words\
    \ {\n\t\tif i != \"a\" && i != \"e\" && i != \"i\" && i != \"o\" && i != \"u\"\
    \ {\n\t\t\tcount += 1\n\t\t}\n\t}\n\tif count == n {\n\t\tresult.append(words)\n\
    \t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2cb85aya/tmp2cb85aya.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f921dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f91ed1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f91ed1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f91ed07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cb85aya                        0x000056296a0accdb <unavailable> + 7387

    5    libc.so.6                          0x00002b3f923c6460 __libc_start_main +
    245

    6    tmp2cb85aya                        0x000056296a0ac3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let sArr = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in sArr {\n        var numConsonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                numConsonants +=\
    \ 1\n            }\n        }\n        if numConsonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp68jq5sus.swift:20:18: error: value of type 'String' has no member\
    \ 'components'\n    let sArr = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let s = s.lowercased()\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var consonants = 0\n        for c in word {\n\
    \            if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"\
    u\" {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6hgipg8p.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    //consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'\n\
    \    let vowels = Set(\"aeiouAEIOU\")\n    let sArray = s.split(separator: \"\
    \ \")\n    var result: [String] = []\n    for i in sArray {\n        var count\
    \ = 0\n        for j in i {\n            if(!vowels.contains(j)) {\n         \
    \       count += 1\n            }\n        }\n        if(count == n) {\n     \
    \       result.append(String(i))\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { word in\n        var cons = 0\n        let vowels = Set(\"aeiou\"\
    )\n        for char in word {\n            if !vowels.contains(char) {\n     \
    \           cons += 1\n            }\n        }\n        return cons == n\n  \
    \  }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpxhx9e9k9/tmpxhx9e9k9.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3724303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3723ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3723ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3723ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhx9e9k9                        0x0000563868c8c06b <unavailable> + 8299

    5    libc.so.6                          0x00002b37244ef460 __libc_start_main +
    245

    6    tmpxhx9e9k9                        0x0000563868c8b759 <unavailable> + 5977

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var curr_word = \"\"\n    for char in s {\n        if char == \" \" {\n \
    \           if count_consonants(str: curr_word) == n {\n                words.append(curr_word)\n\
    \            }\n            curr_word = \"\"\n        } else {\n            curr_word\
    \ += String(char)\n        }\n    }\n    if count_consonants(str: curr_word) ==\
    \ n {\n        words.append(curr_word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl9i7jp91.swift:23:16: error: cannot find 'count_consonants' in\
    \ scope\n            if count_consonants(str: curr_word) == n {\n            \
    \   ^~~~~~~~~~~~~~~~\n/tmp/tmpl9i7jp91.swift:31:8: error: cannot find 'count_consonants'\
    \ in scope\n    if count_consonants(str: curr_word) == n {\n       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard s.count > 0 else\
    \ { return [] }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ arr = s.split(separator: \" \")\n    var result: [String] = []\n    for i in\
    \ arr {\n        var consonants = 0\n        for j in i {\n            if !vowels.contains(String(j))\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(i))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp49gk11ih/tmp49gk11ih.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b1f7d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b1f4d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b1f4d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b1f4cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49gk11ih                        0x000055b8b993ef2b <unavailable> + 7979

    5    libc.so.6                          0x00002b5b1f9c5460 __libc_start_main +
    245

    6    tmp49gk11ih                        0x000055b8b993e619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var consonants = CharacterSet(charactersIn:\
    \ \"BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz\")\n  var words: [String] = []\n\
    \  for word in s.components(separatedBy: \" \") {\n    let numConsonants = word.filter({\
    \ consonants.contains($0.unicodeScalars.first!) }).count\n    if numConsonants\
    \ == n {\n      words.append(word)\n    }\n  }\n  return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxvfmbcun.swift:19:20: error: cannot find 'CharacterSet' in scope\n\
    \  var consonants = CharacterSet(charactersIn: \"BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz\"\
    )\n                   ^~~~~~~~~~~~\n/tmp/tmpxvfmbcun.swift:21:17: error: value\
    \ of type 'String' has no member 'components'\n  for word in s.components(separatedBy:\
    \ \" \") {\n              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard !s.isEmpty else\
    \ { return [] }\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        let wordConsonants = word.filter{!\"aeiouAEIOU\"\
    .contains($0)}\n        if wordConsonants.count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let arr = s.components(separatedBy:\
    \ \" \")\n    var res: [String] = []\n    for i in arr {\n        if i.consonants_count\
    \ == n {\n            res.append(i)\n        }\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9q034pzz.swift:19:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var arrayOfWords =\
    \ s.components(separatedBy: \" \")\n    var arrayConsonants = [String]()\n   \
    \ var arrayConsonantsWithN = [String]()\n    for i in 0..<arrayOfWords.count {\n\
    \        var stringConsonants = \"\"\n        for j in 0..<arrayOfWords[i].count\
    \ {\n            let index = arrayOfWords[i].index(arrayOfWords[i].startIndex,\
    \ offsetBy: j)\n            let charIndex = String(arrayOfWords[i][index])\n \
    \           if(charIndex == \"b\" || charIndex == \"c\" || charIndex == \"d\"\
    \ || charIndex == \"f\" || charIndex == \"g\" || charIndex == \"h\" || charIndex\
    \ == \"j\" || charIndex == \"k\" || charIndex == \"l\" || charIndex == \"m\" ||\
    \ charIndex == \"n\" || charIndex == \"p\" || charIndex == \"q\" || charIndex\
    \ == \"r\" || charIndex == \"s\" || charIndex == \"t\" || charIndex == \"v\" ||\
    \ charIndex == \"w\" || charIndex == \"x\" || charIndex == \"z\") {\n        \
    \        stringConsonants += charIndex\n            }\n        }\n        arrayConsonants.append(stringConsonants)\n\
    \    }\n    for i in 0..<arrayConsonants.count {\n        if(arrayConsonants[i].count\
    \ == n) {\n            arrayConsonantsWithN.append(arrayOfWords[i])\n        }\n\
    \    }\n    return arrayConsonantsWithN\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfbuvbys_.swift:19:26: error: value of type 'String' has no member\
    \ 'components'\n    var arrayOfWords = s.components(separatedBy: \" \")\n    \
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  return s.split(separator:\
    \ \" \").filter { $0.containsExactlyNConsonants(n) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph4ij_5ny.swift:19:46: error: reference to member 'containsExactlyNConsonants'\
    \ cannot be resolved without a contextual type\n  return s.split(separator: \"\
    \ \").filter { $0.containsExactlyNConsonants(n) }\n                          \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter {word in\n        return word.unicodeScalars.filter {\n      \
    \      !consonants.contains($0)\n        }.count == n\n    }.map { String($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb8uqo8sd.swift:21:14: error: cannot find 'consonants' in scope\n\
    \            !consonants.contains($0)\n             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter {\n        $0.count == n && $0.unicodeScalars.filter {\n     \
    \       !CharacterSet.letters.contains($0)\n        }.count == n\n    }.map {\n\
    \        String($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzgdm7sd4.swift:21:14: error: cannot find 'CharacterSet' in scope\n\
    \            !CharacterSet.letters.contains($0)\n             ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // Your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp366bmif4/tmp366bmif4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9af87afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9af84a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9af84a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9af84a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp366bmif4                        0x00005592727004c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9af899b460 __libc_start_main +
    245

    6    tmp366bmif4                        0x00005592727000c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let characters = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for char in characters {\n        var counter = 0\n        for letter in\
    \ char {\n            if !vowels.contains(letter) {\n                counter +=\
    \ 1\n            }\n        }\n        if counter == n {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz1zgn3wo.swift:20:24: error: value of type 'String' has no member\
    \ 'components'\n    let characters = s.components(separatedBy: \" \")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  guard !s.isEmpty else\
    \ { return [] }\n  let consonants = CharacterSet(charactersIn: \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n  return s.split(separator: \" \").filter {\n    $0.rangeOfCharacter(from:\
    \ consonants) != nil &&\n    $0.rangeOfCharacter(from: consonants, options: .caseInsensitive)\
    \ == nil\n  }.filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp__vn9mho.swift:20:20: error: cannot find 'CharacterSet' in scope\n\
    \  let consonants = CharacterSet(charactersIn: \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n                   ^~~~~~~~~~~~\n/tmp/tmp__vn9mho.swift:22:8: error: reference\
    \ to member 'rangeOfCharacter' cannot be resolved without a contextual type\n\
    \    $0.rangeOfCharacter(from: consonants) != nil &&\n       ^\n/tmp/tmp__vn9mho.swift:23:8:\
    \ error: reference to member 'rangeOfCharacter' cannot be resolved without a contextual\
    \ type\n    $0.rangeOfCharacter(from: consonants, options: .caseInsensitive) ==\
    \ nil\n       ^\n/tmp/tmp__vn9mho.swift:23:53: error: cannot infer contextual\
    \ base in reference to member 'caseInsensitive'\n    $0.rangeOfCharacter(from:\
    \ consonants, options: .caseInsensitive) == nil\n                            \
    \                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpmn6udowo/tmpmn6udowo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6659d81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6659a78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6659a78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6659a777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmn6udowo                        0x000055cd932034c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b6659f6d460 __libc_start_main +
    245

    6    tmpmn6udowo                        0x000055cd932030c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var counter = 0\n        for char in word {\n \
    \           if !vowels.contains(char) {\n                counter += 1\n      \
    \      }\n        }\n        if counter == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let stringArray = s.split(separator: \" \")\n    var outputArray = [String]()\n\
    \    for word in stringArray {\n        var consonantCount = 0\n        for character\
    \ in word {\n            if !vowels.contains(character) {\n                consonantCount\
    \ += 1\n            }\n        }\n        if consonantCount == n {\n         \
    \   outputArray.append(String(word))\n        }\n    }\n    return outputArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp9k8mivw6/tmp9k8mivw6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c11091c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c10d88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c10d88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c10d877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k8mivw6                        0x0000558593069f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b0c1127d460 __libc_start_main +
    245

    6    tmp9k8mivw6                        0x0000558593069609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var selectedWords = [String]()\n    for word in words {\n      \
    \  var word = word\n        var count = 0\n        for letter in word {\n    \
    \        if !letter.isVowel() {\n                count += 1\n            }\n \
    \       }\n        if count == n {\n            selectedWords.append(String(word))\n\
    \        }\n    }\n    return selectedWords\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmppbzaeiie.swift:25:24: error: value of type 'Character' has no member\
    \ 'isVowel'\n            if !letter.isVowel() {\n                ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = \"aeiouAEIOU\"\n    let consonants = s.filter({\n        !vowels.contains($0)\n\
    \    })\n    let pairs = s.components(separatedBy: \" \")\n    pairs.forEach {\
    \ word in\n        let count = word.filter({\n            !vowels.contains($0)\n\
    \        }).count\n        if count == n {\n            words.append(word)\n \
    \       }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkkp92cs1.swift:24:19: error: value of type 'String' has no member\
    \ 'components'\n    let pairs = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var res : [String]\
    \ = []\n    let words = s.components(separatedBy: \" \")\n    for word in words\
    \ {\n        if n == count_consonants(s: word) {\n            res.append(word)\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpygps7wkv.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.components(separatedBy:\
    \ \" \")\n    let vowels = \"aeiouAEIOU\"\n    var output = [String]()\n    var\
    \ consonants = 0\n    for word in words {\n        for letter in word {\n    \
    \        if !vowels.contains(letter) {\n                consonants += 1\n    \
    \        }\n        }\n        if consonants == n {\n            output.append(word)\n\
    \        }\n        consonants = 0\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo0457pmo.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter({ (word) -> Bool in\n        return word.count - word.uppercased().filter({\
    \ (c) -> Bool in\n            return !is_vowel(c: c)\n        }).count == n\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaxlmz0yv.swift:21:21: error: cannot find 'is_vowel' in scope\n\
    \            return !is_vowel(c: c)\n                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\treturn s.components(separatedBy:\
    \ \" \").filter { $0.contains_exactly(n: n) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc1dfobw8.swift:19:11: error: value of type 'String' has no member\
    \ 'components'\n        return s.components(separatedBy: \" \").filter { $0.contains_exactly(n:\
    \ n) }\n               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    for word in s.components(separatedBy: \" \") {\n        if findConsonants(word)\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptw2jhcha.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var wordsWithNConsonants = [String]()\n    for word in words {\n\
    \        if countConsonants(word: word) == n {\n            wordsWithNConsonants.append(word)\n\
    \        }\n    }\n    return wordsWithNConsonants\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmplf65jbhn.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tlet vowels = \"AEIOUaeiou\"\
    \n\tlet words = s.split(separator: \" \")\n\tvar result: [String] = []\n\tfor\
    \ word in words {\n\t\tvar count = 0\n\t\tfor c in word {\n\t\t\tif !vowels.contains(c)\
    \ {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t\tif count == n {\n\t\t\tresult.append(String(word))\n\
    \t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var output: [String] = []\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        var word\
    \ = word.lowercased()\n        for vowel in vowels {\n            word = word.replacingOccurrences(of:\
    \ vowel, with: \"\")\n        }\n        if word.count == n {\n            output.append(word)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9t27hcwx.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwl8fpa5q/tmpwl8fpa5q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98d1af2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98d17e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98d17e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98d17e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl8fpa5q                        0x000055d0af6a94c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b98d1cde460 __libc_start_main +
    245

    6    tmpwl8fpa5q                        0x000055d0af6a90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var result = [String]()\n\
    \  let words = s.split(separator: \" \")\n  let vowels = \"aeiou\"\n  for word\
    \ in words {\n    let consonants = word.filter { !vowels.contains($0) }\n    if\
    \ consonants.count == n {\n      result.append(String(word))\n    }\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp7oxw0_va/tmp7oxw0_va.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bba68fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bba386b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bba386988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bba3857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7oxw0_va                        0x000055666f362f4b <unavailable> + 8011

    5    libc.so.6                          0x00002b8bba87b460 __libc_start_main +
    245

    6    tmp7oxw0_va                        0x000055666f362639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\treturn []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8j9p5rhv/tmp8j9p5rhv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b5152dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b51224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b51224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b512237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8j9p5rhv                        0x000055d81af834c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b4b51719460 __libc_start_main +
    245

    6    tmp8j9p5rhv                        0x000055d81af830c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let letters = CharacterSet.letters\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for character in word.unicodeScalars\
    \ {\n            if !letters.contains(character) {\n                count += 1\n\
    \            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2ju_o7dp.swift:19:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmp2ju_o7dp.swift:20:19:\
    \ error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy:\
    \ \" \")\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if consonants(in:\
    \ word) == n {\n            result.append(String(word))\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpei5aul5x.swift:22:12: error: cannot find 'consonants' in scope\n\
    \        if consonants(in: word) == n {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    for word in s.split(separator:\
    \ \" \") {\n        var cn = 0\n        for letter in word {\n            if consonants.contains(letter)\
    \ {\n                cn += 1\n            }\n        }\n        if cn == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpfvmisweh/tmpfvmisweh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afed237bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afed2072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afed2072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afed20717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvmisweh                        0x000055ace4feaaf9 <unavailable> + 6905

    5    libc.so.6                          0x00002afed2567460 __libc_start_main +
    245

    6    tmpfvmisweh                        0x000055ace4fea5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter({ return $0.count == n}).map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8vem3xlr/tmp8vem3xlr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33d6ccbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33d69c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33d69c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33d69c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vem3xlr                        0x000056252d510904 <unavailable> + 6404

    5    libc.so.6                          0x00002b33d6eb7460 __libc_start_main +
    245

    6    tmp8vem3xlr                        0x000056252d510509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let symbols = CharacterSet.symbols\n\
    \    let punctuation = CharacterSet.punctuationCharacters\n    let letters = CharacterSet.letters\n\
    \    let words = s.lowercased().components(separatedBy: \" \")\n    let chars\
    \ = s.lowercased().characters.map{String($0)}\n    var selectedWords = [String]()\n\
    \    var consonants = [String]()\n    for i in 0..<chars.count {\n        if !vowels.contains(chars[i])\
    \ && !symbols.contains(chars[i].unicodeScalars.first!) && !punctuation.contains(chars[i].unicodeScalars.first!)\
    \ && letters.contains(chars[i].unicodeScalars.first!) {\n            consonants.append(chars[i])\n\
    \        }\n    }\n    for i in 0..<words.count {\n        if count_consonants(word:\
    \ words[i]) == n {\n            selectedWords.append(words[i])\n        }\n  \
    \  }\n    return selectedWords\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpijx2x35w.swift:20:19: error: cannot find 'CharacterSet' in scope\n\
    \    let symbols = CharacterSet.symbols\n                  ^~~~~~~~~~~~\n/tmp/tmpijx2x35w.swift:21:23:\
    \ error: cannot find 'CharacterSet' in scope\n    let punctuation = CharacterSet.punctuationCharacters\n\
    \                      ^~~~~~~~~~~~\n/tmp/tmpijx2x35w.swift:22:19: error: cannot\
    \ find 'CharacterSet' in scope\n    let letters = CharacterSet.letters\n     \
    \             ^~~~~~~~~~~~\n/tmp/tmpijx2x35w.swift:23:32: error: value of type\
    \ 'String' has no member 'components'\n    let words = s.lowercased().components(separatedBy:\
    \ \" \")\n                ~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpijx2x35w.swift:24:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = s.lowercased().characters.map{String($0)}\n                              \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // Write your code\
    \ here!\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8453rxwc/tmp8453rxwc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b279de1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b279db14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b279db14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b279db137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8453rxwc                        0x000055fd721134c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b279e009460 __libc_start_main +
    245

    6    tmp8453rxwc                        0x000055fd721130c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var numConsonants = 0\n        for letter in\
    \ word {\n            if !vowels.contains(letter) {\n                numConsonants\
    \ += 1\n            }\n        }\n        if numConsonants == n {\n          \
    \  result.append(String(word))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter({ ($0.count - $0.filter({ $0.isConsonant }).count) == n }).map\
    \ { \"\\($0)\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmjn2j4g0.swift:19:72: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isConsonant'\n    return s.split(separator: \" \"\
    ).filter({ ($0.count - $0.filter({ $0.isConsonant }).count) == n }).map { \"\\\
    ($0)\" }\n                                                                   \
    \ ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwl8fpa5q/tmpwl8fpa5q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98d1af2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98d17e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98d17e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98d17e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl8fpa5q                        0x000055d0af6a94c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b98d1cde460 __libc_start_main +
    245

    6    tmpwl8fpa5q                        0x000055d0af6a90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  let vowels = Set(\"aeiou\"\
    )\n  let s = s.lowercased()\n  let words = s.components(separatedBy: \" \")\n\
    \  var result = [String]()\n  for word in words {\n    var num = 0\n    for c\
    \ in word.characters {\n      if !vowels.contains(c) {\n        num += 1\n   \
    \   }\n    }\n    if num == n {\n      result.append(word)\n    }\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq0g4091o.swift:21:17: error: value of type 'String' has no member\
    \ 'components'\n  let words = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ .whitespaces)\n        .filter { $0.filter({ !\"aieouAEIOU\".contains($0) }).count\
    \ == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0o_hrdh1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: .whitespaces)\n         \
    \  ~ ^~~~~~~~~~\n/tmp/tmp0o_hrdh1.swift:19:39: error: cannot infer contextual\
    \ base in reference to member 'whitespaces'\n    return s.components(separatedBy:\
    \ .whitespaces)\n                                     ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard s.count > 0 else\
    \ { return [] }\n    let characters = Array(s.characters)\n    var words = [String]()\n\
    \    var word = [Character]()\n    for c in characters {\n        if c == \" \"\
    \ {\n            let consonants = word.filter { !c.is_vowel() }\n            if\
    \ consonants.count == n {\n                words.append(String(word))\n      \
    \      }\n            word = []\n        } else {\n            word.append(c)\n\
    \        }\n    }\n    if word.count > 0 {\n        let consonants = word.filter\
    \ { !c.is_vowel() }\n        if consonants.count == n {\n            words.append(String(word))\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzg4a_n6b.swift:20:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = Array(s.characters)\n            \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzg4a_n6b.swift:25:42: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n            let\
    \ consonants = word.filter { !c.is_vowel() }\n                               \
    \          ^\n                                           _ in\n/tmp/tmpzg4a_n6b.swift:25:47:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'is_vowel'\n\
    \            let consonants = word.filter { !c.is_vowel() }\n                \
    \                            ~ ^~~~~~~~\n/tmp/tmpzg4a_n6b.swift:35:41: error:\
    \ cannot find 'c' in scope\n        let consonants = word.filter { !c.is_vowel()\
    \ }\n                                        ^\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    var lettersArray: [Character] = []\n    var vowels = Set([\"a\", \"\
    e\", \"i\", \"o\", \"u\"])\n    var word: String = \"\"\n    for letter in s {\n\
    \        if letter == \" \" {\n            for item in word {\n              \
    \  if !vowels.contains(String(item)) {\n                    lettersArray.append(item)\n\
    \                }\n            }\n            if lettersArray.count == n {\n\
    \                result.append(word)\n            }\n            lettersArray\
    \ = []\n            word = \"\"\n        } else {\n            word += String(letter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp01kwixhn/tmp01kwixhn.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd153b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd150a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd150a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd150a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01kwixhn                        0x0000565036658aa9 <unavailable> + 6825

    5    libc.so.6                          0x00002acd1559c460 __libc_start_main +
    245

    6    tmp01kwixhn                        0x0000565036658559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { (word) -> Bool in\n        let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n        return word.lowercased().filter({ (c)\
    \ -> Bool in\n            return !vowels.contains(c)\n        }).count == n\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzkfm46vm.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { (word) ->\
    \ Bool in\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var result = [String]()\n    for word\
    \ in s.components(separatedBy: \" \") {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi35x08yo.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var splitted = s.split(separator:\
    \ \" \")\n    var res = [String]()\n    for i in 0..<splitted.count {\n      \
    \  if (count_consonants(splitted[i]) == n) {\n            res.append(String(splitted[i]))\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_8c8gqqa.swift:22:13: error: cannot find 'count_consonants' in\
    \ scope\n        if (count_consonants(splitted[i]) == n) {\n            ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var words = s.split(separator: \" \"\
    )\n    var filteredWords = [String]()\n    for word in words {\n        let consonants\
    \ = word.filter { !vowels.contains($0.lowercased()) }\n        if consonants.count\
    \ == n {\n            filteredWords.append(String(word))\n        }\n    }\n \
    \   return filteredWords\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp9f8wj3sc/tmp9f8wj3sc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafbfcb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafbf9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafbf9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafbf9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9f8wj3sc                        0x00005623e797aba9 <unavailable> + 7081

    5    libc.so.6                          0x00002aafbfea0460 __libc_start_main +
    245

    6    tmp9f8wj3sc                        0x00005623e797a659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.split(separator:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ c = 0\n        for char in word {\n            switch char {\n            case\
    \ \"a\", \"e\", \"i\", \"o\", \"u\", \"y\":\n                continue\n      \
    \      default:\n                c += 1\n            }\n        }\n        if\
    \ c == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy2se3vkp/tmpy2se3vkp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae448bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4488acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4488ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4488ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2se3vkp                        0x0000555f91eacab9 <unavailable> + 6841

    5    libc.so.6                          0x00002ae448da1460 __libc_start_main +
    245

    6    tmpy2se3vkp                        0x0000555f91eac569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words: [String]\
    \ = []\n    let letters = Set(\"qwrtypsdfghjklzxcvbnm\")\n    for word in s.split(separator:\
    \ \" \") {\n        let consonants = word.lowercased().filter({ letters.contains($0)\
    \ })\n        if consonants.count == n {\n            words.append(String(word))\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.components(separatedBy: \" \")\n    var consonants\
    \ = [String]()\n    for word in words {\n        var n1 = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                n1 +=\
    \ 1\n            }\n        }\n        if n1 == n {\n            consonants.append(word)\n\
    \        }\n    }\n    return consonants\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk0_1a097.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result: [String] =\
    \ []\n    for i in 0..<words.count {\n        let word = words[i]\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuj_f7h5t.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    s.split(separator: \" \").forEach {\n        if count_consonants(s:\
    \ String($0)) == n {\n            result.append(String($0))\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3a72o5v5.swift:21:12: error: cannot find 'count_consonants' in\
    \ scope\n        if count_consonants(s: String($0)) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    words.forEach { (word) in\n        var count = 0\n        word.forEach {\
    \ (c) in\n            if !vowels.contains(c) {\n                count += 1\n \
    \           }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4zw59tg7.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var myWordsArray =\
    \ s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in myWordsArray {\n        if !word.contains(\" \") {\n            let vowels\
    \ = CharacterSet(charactersIn: \"aeiou\")\n            let cons = CharacterSet(charactersIn:\
    \ \"bcdfghjklmnpqrstvwxyz\")\n            let vc = word.lowercased().components(separatedBy:\
    \ vowels)\n            let cc = word.lowercased().components(separatedBy: cons)\n\
    \            if cc.count - 1 == n {\n                result.append(word)\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_s8ah0_1.swift:19:26: error: value of type 'String' has no member\
    \ 'components'\n    var myWordsArray = s.components(separatedBy: \" \")\n    \
    \                   ~ ^~~~~~~~~~\n/tmp/tmp_s8ah0_1.swift:23:26: error: cannot\
    \ find 'CharacterSet' in scope\n            let vowels = CharacterSet(charactersIn:\
    \ \"aeiou\")\n                         ^~~~~~~~~~~~\n/tmp/tmp_s8ah0_1.swift:24:24:\
    \ error: cannot find 'CharacterSet' in scope\n            let cons = CharacterSet(charactersIn:\
    \ \"bcdfghjklmnpqrstvwxyz\")\n                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if (s.isEmpty) {\n\
    \        return [String]()\n    }\n    var result = [String]()\n    var array\
    \ = s.components(separatedBy: \" \")\n    array = array.filter {$0 != \"\"}\n\
    \    for var str in array {\n        var num = 0\n        for var char in str.characters\
    \ {\n            switch char {\n            case \"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n                break\n            default:\n\
    \                num += 1\n            }\n        }\n        if (num == n) {\n\
    \            result.append(str)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9g0yu438.swift:23:19: error: value of type 'String' has no member\
    \ 'components'\n    var array = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.lowercased().filter { \"aeiou\".contains($0) }.count == n\
    \ }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpevuxnieh/tmpevuxnieh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af61fe0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af61fb03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af61fb03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af61fb027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevuxnieh                        0x000055854b565a34 <unavailable> + 6708

    5    libc.so.6                          0x00002af61fff8460 __libc_start_main +
    245

    6    tmpevuxnieh                        0x000055854b565639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  return [String]()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsvimuxs6/tmpsvimuxs6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8779d34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8779a2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8779a2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8779a2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsvimuxs6                        0x00005577e9a86514 <unavailable> + 5396

    5    libc.so.6                          0x00002b8779f20460 __libc_start_main +
    245

    6    tmpsvimuxs6                        0x00005577e9a86119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    for (i, word) in words.enumerated() {\n        words[i] = String(word)\n\
    \    }\n    var consonants = 0\n    var result = [String]()\n    for word in words\
    \ {\n        for letter in word {\n            let letterValue = letter.unicodeScalars.first!.value\n\
    \            if letterValue < 97 || letterValue > 122 {\n                continue\n\
    \            }\n            switch letter {\n            case \"a\", \"e\", \"\
    i\", \"o\", \"u\":\n                continue\n            default:\n         \
    \       consonants += 1\n            }\n        }\n        if consonants == n\
    \ {\n            result.append(word)\n        }\n        consonants = 0\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnx9p11sm.swift:21:20: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.SubSequence' (aka 'Substring')\n        words[i]\
    \ = String(word)\n                   ^~~~~~~~~~~~\n/tmp/tmpnx9p11sm.swift:39:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(word)\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n   \
    \ @inlinable public mutating func append(_ newElement: __owned Element)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:4:37: note:\
    \ candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpnx9p11sm.swift:39:20:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            result.append(word)\n                   ^\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words : [String]\
    \ = []\n    var vowel = \"aeiou\"\n    let input = s.lowercased()\n    let inputArr\
    \ = input.split(separator: \" \")\n    for word in inputArr {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowel.contains(letter) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            words.append(String(word))\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmphtl00ger/tmphtl00ger.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba048642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba048339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba048339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0483387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtl00ger                        0x000055eafcd85b59 <unavailable> + 7001

    5    libc.so.6                          0x00002ba04882e460 __libc_start_main +
    245

    6    tmphtl00ger                        0x000055eafcd85609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  return s.components(separatedBy:\
    \ \" \").filter { word in\n    word.characters.filter { char in\n      let lowercasedChar\
    \ = String(char).lowercased()\n      return lowercasedChar != \"a\" && lowercasedChar\
    \ != \"e\" && lowercasedChar != \"i\" && lowercasedChar != \"o\" && lowercasedChar\
    \ != \"u\"\n    }.count == n\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vk5ld8b.swift:19:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \" \").filter { word in\n \
    \        ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var results: [String]\
    \ = []\n    var string = \"\"\n    for char in s {\n        if char == \" \" {\n\
    \            if consonants_number(s: string) == n {\n                results.append(string)\n\
    \            }\n            string = \"\"\n        } else {\n            string.append(char)\n\
    \        }\n    }\n    if consonants_number(s: string) == n {\n        results.append(string)\n\
    \    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdnfn7swm.swift:23:16: error: cannot find 'consonants_number' in\
    \ scope\n            if consonants_number(s: string) == n {\n               ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdnfn7swm.swift:31:8: error: cannot find 'consonants_number' in scope\n\
    \    if consonants_number(s: string) == n {\n       ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var words = s.split(separator: \" \"\
    )\n    for i in 0..<words.count {\n        words[i] = String(words[i])\n    }\n\
    \    var result = [String]()\n    for i in 0..<words.count {\n        var consonants\
    \ = 0\n        for j in 0..<words[i].count {\n            if !vowels.contains(String(words[i][words[i].index(words[i].startIndex,\
    \ offsetBy: j)])) {\n                consonants += 1\n            }\n        }\n\
    \        if consonants == n {\n            result.append(words[i])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmuw16eov.swift:22:20: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.SubSequence' (aka 'Substring')\n        words[i]\
    \ = String(words[i])\n                   ^~~~~~~~~~~~~~~~\n/tmp/tmpmuw16eov.swift:33:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(words[i])\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n   \
    \ @inlinable public mutating func append(_ newElement: __owned Element)\n    \
    \                                ^\nSwift.RangeReplaceableCollection:4:37: note:\
    \ candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpmuw16eov.swift:33:20:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            result.append(words[i])\n                  \
    \ ^\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let v = vowels\n  \
    \  let arr = s.components(separatedBy: \" \")\n    var res = [String]()\n    for\
    \ w in arr {\n        if count_consonants(s: w) == n {\n            res.append(w)\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg_mzvqh9.swift:19:13: error: cannot find 'vowels' in scope\n  \
    \  let v = vowels\n            ^~~~~~\n/tmp/tmpg_mzvqh9.swift:20:17: error: value\
    \ of type 'String' has no member 'components'\n    let arr = s.components(separatedBy:\
    \ \" \")\n              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var words = s.lowercased().split(separator:\
    \ \" \")\n    for i in 0..<words.count {\n        var consonants = 0\n       \
    \ for char in words[i] {\n            if !vowels.contains(String(char)) {\n  \
    \              consonants += 1\n            }\n        }\n        if consonants\
    \ != n {\n            words.remove(at: i)\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3yazr3wo.swift:32:12: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words\n           ^\n/tmp/tmp3yazr3wo.swift:32:12: note: arguments\
    \ to generic parameter 'Element' ('String.SubSequence' (aka 'Substring') and 'String')\
    \ are expected to be equal\n    return words\n           ^\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").map { String($0) }.filter { containsNConsecutiveConsonants($0, n) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2f9dxdu2.swift:19:64: error: cannot find 'containsNConsecutiveConsonants'\
    \ in scope\n    return s.split(separator: \" \").map { String($0) }.filter { containsNConsecutiveConsonants($0,\
    \ n) }\n                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    if s.isEmpty {\n        return result\n    }\n    let consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n    let wordArr = s.components(separatedBy: \" \"\
    )\n    for word in wordArr {\n        var wordConsonantsCount = 0\n        for\
    \ c in word.lowercased() {\n            if consonants.contains(c) {\n        \
    \        wordConsonantsCount += 1\n            }\n        }\n        if wordConsonantsCount\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdcbs2nhx.swift:24:21: error: value of type 'String' has no member\
    \ 'components'\n    let wordArr = s.components(separatedBy: \" \")\n         \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\treturn s.split(separator:\
    \ \" \").filter { word in word.filter { !$0.isVowel }.count == n }.map { String($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqk8hwe0.swift:19:68: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n        return s.split(separator: \" \"\
    ).filter { word in word.filter { !$0.isVowel }.count == n }.map { String($0) }\n\
    \                                                                       ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  let words = s.split(separator:\
    \ \" \")\n  var selectedWords = [String]()\n  for word in words {\n    var countConsonants\
    \ = 0\n    for character in word {\n      if character != \"a\" && character !=\
    \ \"e\" && character != \"i\" && character != \"o\" && character != \"u\" {\n\
    \        countConsonants += 1\n      }\n    }\n    if countConsonants == n {\n\
    \      selectedWords.append(String(word))\n    }\n  }\n  return selectedWords\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmphf6u07xa/tmphf6u07xa.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4305354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b430504bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b430504b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b430504a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphf6u07xa                        0x0000559994b87ecb <unavailable> + 7883

    5    libc.so.6                          0x00002b4305540460 __libc_start_main +
    245

    6    tmphf6u07xa                        0x0000559994b875b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if s.count == 0 {\n\
    \        return []\n    } else {\n        let words = s.components(separatedBy:\
    \ \" \")\n        var res: [String] = []\n        for word in words {\n      \
    \      var numConsonants = 0\n            for letter in word {\n             \
    \   if !isVowel(letter: letter) {\n                    numConsonants += 1\n  \
    \              }\n            }\n            if numConsonants == n {\n       \
    \         res.append(word)\n            }\n        }\n        return res\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd_2f3fm6.swift:22:23: error: value of type 'String' has no member\
    \ 'components'\n        let words = s.components(separatedBy: \" \")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { consonants(in: $0) == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8jgoroi9.swift:19:52: error: cannot find 'consonants' in scope\n\
    \    return s.components(separatedBy: \" \").filter { consonants(in: $0) == n\
    \ }\n                                                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let s = s.lowercased()\n    let arr = s.components(separatedBy:\
    \ \" \")\n    for word in arr {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                count += 1\n   \
    \         }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqm8i3q35.swift:22:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var consonant_count\
    \ = 0\n    var result = [String]()\n    let words = s.split(separator: \" \")\n\
    \    for word in words {\n        for char in word {\n            if consonants.contains(String(char).lowercased())\
    \ {\n                consonant_count += 1\n            }\n        }\n        if\
    \ consonant_count == n {\n            result.append(String(word))\n        }\n\
    \        consonant_count = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5mboy5uw/tmp5mboy5uw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a6039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a5d30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a5d30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a5d2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mboy5uw                        0x000056333be13bb9 <unavailable> + 7097

    5    libc.so.6                          0x00002b07a6225460 __libc_start_main +
    245

    6    tmp5mboy5uw                        0x000056333be13669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO: Write select_words\
    \ function here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp_gcwlxeg/tmp_gcwlxeg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac571b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac57185cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac57185c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac57185b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gcwlxeg                        0x0000561a1d8d14c4 <unavailable> + 5316

    5    libc.so.6                          0x00002ac571d51460 __libc_start_main +
    245

    6    tmp_gcwlxeg                        0x0000561a1d8d10c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var result = [String]()\n\
    \  let words = s.split(separator: \" \")\n  for word in words {\n    var count\
    \ = 0\n    for letter in word {\n      if is_consonant(letter: letter) {\n   \
    \     count += 1\n      }\n    }\n    if count == n {\n      result.append(String(word))\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc7_gqtg9.swift:24:10: error: cannot find 'is_consonant' in scope\n\
    \      if is_consonant(letter: letter) {\n         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let s = s.lowercased()\n\
    \    let vowels = \"aeiou\"\n    let chars = Array(s)\n    var word = [Character]()\n\
    \    var results = [String]()\n    var current_consonants = 0\n    for c in chars\
    \ {\n        if vowels.contains(c) {\n            current_consonants = 0\n   \
    \     } else {\n            current_consonants += 1\n        }\n        if current_consonants\
    \ <= n {\n            word.append(c)\n        } else {\n            word = [Character]()\n\
    \        }\n        if c == \" \" {\n            if word.count > 0 {\n       \
    \         let word_string = String(word)\n                if word_string.contains(vowels)\
    \ {\n                    word = [Character]()\n                } else {\n    \
    \                results.append(word_string)\n                    word = [Character]()\n\
    \                }\n            }\n        }\n    }\n    if word.count > 0 {\n\
    \        let word_string = String(word)\n        if word_string.contains(vowels)\
    \ {\n            word = [Character]()\n        } else {\n            results.append(word_string)\n\
    \            word = [Character]()\n        }\n    }\n    return results\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmplshyri16/tmplshyri16.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6faeee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6faebdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6faebdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6faebda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplshyri16                        0x00005597e78f1bb4 <unavailable> + 7092

    5    libc.so.6                          0x00002b6faf0d0460 __libc_start_main +
    245

    6    tmplshyri16                        0x00005597e78f17b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var result = [String]()\n\
    \  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    z\"]\n  let words = s.split(separator: \" \")\n  for word in words {\n    var\
    \ wordString = String(word)\n    var count = 0\n    for char in word {\n     \
    \ let character = String(char)\n      if consonants.contains(character) {\n  \
    \      count += 1\n      }\n    }\n    if count == n {\n      result.append(wordString)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpxydpztq3/tmpxydpztq3.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43acc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43a9b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43a9b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43a9b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxydpztq3                        0x0000559fe42ffb69 <unavailable> + 7017

    5    libc.so.6                          0x00002ae43aeae460 __libc_start_main +
    245

    6    tmpxydpztq3                        0x0000559fe42ff619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var result = [String]()\n  \
    \  let words = s.lowercased().split(separator: \" \")\n    for word in words {\n\
    \        var consonant_counter = 0\n        for i in word {\n            if consonants.contains(String(i))\
    \ {\n                consonant_counter += 1\n            }\n        }\n      \
    \  if consonant_counter == n {\n            result.append(String(word))\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp1eqh9w1p/tmp1eqh9w1p.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7d0b6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7d0863b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7d0863988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7d08627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1eqh9w1p                        0x00005599a412ebb9 <unavailable> + 7097

    5    libc.so.6                          0x00002ac7d0d58460 __libc_start_main +
    245

    6    tmp1eqh9w1p                        0x00005599a412e669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let words = s.split(separator: \" \")\n    var r = [String]()\n\
    \    for word in words {\n        var c = 0\n        for character in word {\n\
    \            if !vowels.contains(character) {\n                c += 1\n      \
    \      }\n        }\n        if c == n {\n            r.append(String(word))\n\
    \        }\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpjn6tho2x/tmpjn6tho2x.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57ed4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57ed1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57ed1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57ed1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn6tho2x                        0x000055e490a91feb <unavailable> + 8171

    5    libc.so.6                          0x00002b57ed6bf460 __libc_start_main +
    245

    6    tmpjn6tho2x                        0x000055e490a916d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    return words.filter({\
    \ word in word.lowercased().filter({ vowels.contains($0) }).count == n })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2oisife_.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\treturn []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8j9p5rhv/tmp8j9p5rhv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b5152dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b51224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b51224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b512237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8j9p5rhv                        0x000055d81af834c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b4b51719460 __libc_start_main +
    245

    6    tmp8j9p5rhv                        0x000055d81af830c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard s.count > 0 else\
    \ { return [] }\n    let vowels = \"aeiou\"\n    let words = s.split(separator:\
    \ \" \")\n    return words.filter {\n        $0.filter { !vowels.contains($0)\
    \ }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmppex7nrvu.swift:22:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter {\n                 ^\n/tmp/tmppex7nrvu.swift:22:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter {\n        \
    \         ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let l = \"a,e,i,o,u,y\"\
    .components(separatedBy: \",\")\n    let t = s.components(separatedBy: \" \")\n\
    \    var r = [String]()\n    for i in t {\n        var c = 0\n        for j in\
    \ i {\n            if !l.contains(String(j)) {\n                c += 1\n     \
    \       }\n        }\n        if c == n {\n            r.append(i)\n        }\n\
    \    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptrtwaksa.swift:19:27: error: value of type 'String' has no member\
    \ 'components'\n    let l = \"a,e,i,o,u,y\".components(separatedBy: \",\")\n \
    \           ~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmptrtwaksa.swift:20:15: error: value\
    \ of type 'String' has no member 'components'\n    let t = s.components(separatedBy:\
    \ \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { word in\n        word.lowercased().filter { \"aeiou\".contains($0)\
    \ }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaxrum7jt.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { word in\n\
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let sCharacters = s.components(separatedBy:\
    \ \" \")\n    var matches = [String]()\n    for word in sCharacters {\n      \
    \  var wordConsonants = 0\n        for character in word {\n            if !vowels.contains(String(character).lowercased())\
    \ {\n                wordConsonants += 1\n            }\n        }\n        if\
    \ wordConsonants == n {\n            matches.append(word)\n        }\n    }\n\
    \    return matches\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcdm55qar.swift:20:25: error: value of type 'String' has no member\
    \ 'components'\n    let sCharacters = s.components(separatedBy: \" \")\n     \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  let vowels = \"aeiouy\"\
    \n  let letters = s.lowercased().characters.map { String($0) }\n  var words =\
    \ [[String]]()\n  var nextWord = [String]()\n  var consonantsCount = 0\n  for\
    \ letter in letters {\n    if letter == \" \" {\n      words.append(nextWord)\n\
    \      nextWord = []\n      consonantsCount = 0\n    } else if vowels.contains(letter)\
    \ {\n      nextWord.append(letter)\n    } else {\n      nextWord.append(letter)\n\
    \      consonantsCount += 1\n    }\n  }\n  words.append(nextWord)\n  let result\
    \ = words.filter { $0.count > 1 && consonantsCount == n }\n  return result.map\
    \ { $0.joined() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwkocw06a.swift:20:32: error: 'characters' is unavailable: Please\
    \ use String directly\n  let letters = s.lowercased().characters.map { String($0)\
    \ }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var consonants = 0\n    var word = \"\"\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            consonants = 0\n            word = \"\"\n        }\
    \ else {\n            if isConsonant(char: char) {\n                consonants\
    \ += 1\n            }\n            word += String(char)\n        }\n    }\n  \
    \  if consonants == n {\n        words.append(word)\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpku18jykv.swift:30:16: error: cannot find 'isConsonant' in scope\n\
    \            if isConsonant(char: char) {\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let chars = s.filter\
    \ { $0 != \" \" }\n    let arr = chars.map { String($0) }\n    let set = arr.filter\
    \ { $0.count == n }\n    return set\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpxj3b9czl/tmpxj3b9czl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd6ad7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd6aa76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd6aa76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd6aa757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj3b9czl                        0x0000564f8199b864 <unavailable> + 6244

    5    libc.so.6                          0x00002afd6af6b460 __libc_start_main +
    245

    6    tmpxj3b9czl                        0x0000564f8199b469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    for w in s.components(separatedBy: \" \") {\n        var counter =\
    \ 0\n        for c in w {\n            if !isVowel(c: c) {\n                counter\
    \ += 1\n            }\n        }\n        if counter == n {\n            result.append(w)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4w6mzl8e.swift:20:16: error: value of type 'String' has no member\
    \ 'components'\n    for w in s.components(separatedBy: \" \") {\n            \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var result:\
    \ [String] = []\n    let words = s.split(separator: \" \")\n    for word in words\
    \ {\n        var counter = 0\n        for letter in word {\n            if consonants.contains(String(letter).lowercased())\
    \ {\n                counter += 1\n            }\n        }\n        if counter\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwvl9jxml/tmpwvl9jxml.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9210c06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92108fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92108fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92108fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvl9jxml                        0x00005567138a9b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b9210df2460 __libc_start_main +
    245

    6    tmpwvl9jxml                        0x00005567138a9619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpmn6udowo/tmpmn6udowo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6659d81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6659a78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6659a78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6659a777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmn6udowo                        0x000055cd932034c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b6659f6d460 __libc_start_main +
    245

    6    tmpmn6udowo                        0x000055cd932030c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014284
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if s.isEmpty {\n  \
    \      return []\n    }\n    let vowels = Set([\"a\", \"e\", \"i\", \"o\", \"\
    u\"])\n    let words = s.split(separator: \" \")\n    var res: [String] = []\n\
    \    for word in words {\n        var curr = 0\n        for letter in word {\n\
    \            if !vowels.contains(String(letter)) {\n                curr += 1\n\
    \            }\n        }\n        if curr == n {\n            res.append(String(word))\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpjihlc_1x/tmpjihlc_1x.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ff315ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ff2e51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ff2e51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ff2e507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjihlc_1x                        0x0000555bd5db8fbb <unavailable> + 8123

    5    libc.so.6                          0x00002b5ff3346460 __libc_start_main +
    245

    6    tmpjihlc_1x                        0x0000555bd5db86a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    for i in s.split(separator: \" \") {\n        var count = 0\n        for\
    \ j in i {\n            if j != \"a\" && j != \"e\" && j != \"i\" && j != \"o\"\
    \ && j != \"u\" {\n                count += 1\n            }\n        }\n    \
    \    if count == n {\n            result.append(String(i))\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpibg9xcsv/tmpibg9xcsv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cb458ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cb4281b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cb4281988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cb42807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibg9xcsv                        0x0000562b11115ecb <unavailable> + 7883

    5    libc.so.6                          0x00002b4cb4776460 __libc_start_main +
    245

    6    tmpibg9xcsv                        0x0000562b111155b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants().count == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb6d77_ew.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants().count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    var words = s.split(separator: \" \")\n    var results: [String] = []\n\
    \    for i in 0..<words.count {\n        var numConsonants = 0\n        for j\
    \ in 0..<words[i].count {\n            if !vowels.contains(words[i][j]) {\n  \
    \              numConsonants += 1\n            }\n        }\n        if numConsonants\
    \ == n {\n            results.append(String(words[i]))\n        }\n    }\n   \
    \ return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpog98sevs.swift:25:42: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Substring.Index' (aka 'String.Index')\n         \
    \   if !vowels.contains(words[i][j]) {\n                                     \
    \    ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tlet vowels = \"aeiou\"\
    \n\tlet words = s.components(separatedBy: \" \")\n\treturn words.filter { (word)\
    \ -> Bool in\n\t\treturn (word.unicodeScalars.filter { !vowels.contains($0) }).count\
    \ == n\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu0uuiv56.swift:20:16: error: value of type 'String' has no member\
    \ 'components'\n        let words = s.components(separatedBy: \" \")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for c in word {\n      \
    \      if !vowels.contains(c) {\n                count += 1\n            }\n \
    \       }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp0p01wfvh/tmp0p01wfvh.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8b63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8b332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8b332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8b3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0p01wfvh                        0x00005609f8a05f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b4e8b827460 __libc_start_main +
    245

    6    tmp0p01wfvh                        0x00005609f8a05609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var nConsWords: [String]\
    \ = []\n    let vowels = Set(\"aeiouAEIOU\")\n    let cWords = s.split(separator:\
    \ \" \")\n    for word in cWords {\n        var cCount = 0\n        for char in\
    \ word {\n            if !vowels.contains(char) {\n                cCount += 1\n\
    \            }\n        }\n        if cCount == n {\n            nConsWords.append(String(word))\n\
    \        }\n    }\n    return nConsWords\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if s.isEmpty {\n  \
    \      return []\n    }\n    return s.split(separator: \" \").filter { $0.countConsonants()\
    \ == n }.map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp6_j25wg.swift:22:48: error: reference to member 'countConsonants'\
    \ cannot be resolved without a contextual type\n    return s.split(separator:\
    \ \" \").filter { $0.countConsonants() == n }.map(String.init)\n             \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var result: [String] = []\n\
    \    var wordArray = s.components(separatedBy: \" \")\n    for word in wordArray\
    \ {\n        var consonantCount = 0\n        for char in word {\n            if\
    \ vowels.contains(String(char).lowercased()) {\n                consonantCount\
    \ += 1\n            }\n        }\n        if consonantCount == n {\n         \
    \   result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq2cois69.swift:22:23: error: value of type 'String' has no member\
    \ 'components'\n    var wordArray = s.components(separatedBy: \" \")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.split(separator: \" \")\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if is_vowel(c: char) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuiejc9li.swift:24:16: error: cannot find 'is_vowel' in scope\n\
    \            if is_vowel(c: char) {\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard s.count > 0 else\
    \ { return [] }\n    var result: [String] = []\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if word.count > 0 {\n            let\
    \ consonants = word.filter { \"bcdfghjklmnpqrstvwxyz\".contains($0) }\n      \
    \      if consonants.count == n {\n                result.append(word)\n     \
    \       }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkaeft5mu.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = \"\
    bcdfghjklmnpqrstvwxz\"\n    let vowels = \"aeiouy\"\n    var consonantCount =\
    \ 0\n    var arr = s.lowercased().split(separator: \" \")\n    for x in arr {\n\
    \        for y in x {\n            if consonants.contains(y) {\n             \
    \   consonantCount += 1\n            }\n        }\n        if consonantCount !=\
    \ n {\n            arr.remove(at: arr.firstIndex(of: x)!)\n        }\n       \
    \ consonantCount = 0\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4l7vlylp.swift:34:12: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return arr\n           ^\n/tmp/tmp4l7vlylp.swift:34:12: note: arguments to\
    \ generic parameter 'Element' ('String.SubSequence' (aka 'Substring') and 'String')\
    \ are expected to be equal\n    return arr\n           ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { word in\n        word.lowercased().filter { character in\n \
    \           return !isVowel(character)\n        }.count == n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqvinopww.swift:21:21: error: cannot find 'isVowel' in scope\n \
    \           return !isVowel(character)\n                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    let vowels = \"aeiou\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var counter = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                counter\
    \ += 1\n            }\n        }\n        if counter == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaaovvp49.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zbe2r1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO: Write your\
    \ code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpnh9gddyp/tmpnh9gddyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d2b69ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d2b391b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d2b391988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d2b3907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnh9gddyp                        0x0000560226d5a4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0d2b886460 __libc_start_main +
    245

    6    tmpnh9gddyp                        0x0000560226d5a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    if !s.isEmpty {\n        let all = s.components(separatedBy: \" \")\n   \
    \     for i in all {\n            if consonants_count(s: i) == n {\n         \
    \       result.append(i)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptnddzgn2.swift:21:21: error: value of type 'String' has no member\
    \ 'components'\n        let all = s.components(separatedBy: \" \")\n         \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if (s.isEmpty) {\n\
    \        return []\n    }\n\n    let ws = s.split(separator: \" \")\n    var res:\
    \ [String] = []\n    for w in ws {\n        if (countVowels(w: w) == n) {\n  \
    \          res.append(String(w))\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp9u_zvum.swift:26:13: error: cannot find 'countVowels' in scope\n\
    \        if (countVowels(w: w) == n) {\n            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  guard s.isEmpty == false\
    \ else { return [] }\n  let arr = s.split(separator: \" \")\n  return arr.filter\
    \ { (w) -> Bool in\n    var cnt = 0\n    for char in w {\n      if char.isConsonant\
    \ {\n        cnt += 1\n      }\n    }\n    return cnt == n\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjqmtyizt.swift:21:14: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \  return arr.filter { (w) -> Bool in\n             ^\n/tmp/tmpjqmtyizt.swift:21:14:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n  return arr.filter { (w) -> Bool in\n\
    \             ^\n/tmp/tmpjqmtyizt.swift:24:15: error: value of type 'Character'\
    \ has no member 'isConsonant'\n      if char.isConsonant {\n         ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    for word in s.components(separatedBy: \" \") {\n        if (countConsonants(word)\
    \ == n) {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc0jfpz9_.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var s = s\n    var\
    \ words: [String] = []\n    if s.count == 0 {\n        return words\n    }\n \
    \   if Array(s)[0] == \" \" {\n        s.removeFirst()\n    }\n    while !s.isEmpty\
    \ {\n        if s.firstIndex(of: \" \") == nil {\n            if count_consonants(s)\
    \ == n {\n                words.append(s)\n            }\n            break\n\
    \        }\n        let word = String(s[..<s.firstIndex(of: \" \")!])\n      \
    \  if count_consonants(word) == n {\n            words.append(word)\n        }\n\
    \        s.removeFirst(word.count + 1)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vm17q0d.swift:29:16: error: cannot find 'count_consonants' in\
    \ scope\n            if count_consonants(s) == n {\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp1vm17q0d.swift:35:12: error: cannot find 'count_consonants' in scope\n\
    \        if count_consonants(word) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var result: [String] = []\n    let words =\
    \ s.components(separatedBy: \" \")\n    for word in words {\n        if word.count\
    \ == n + 1 {\n            if !vowels.contains(word[word.startIndex]) {\n     \
    \           result.append(word)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmps4apseiy.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<words.count\
    \ {\n        words[i] = words[i].lowercased()\n        for v in vowels {\n   \
    \         words[i] = words[i].replacingOccurrences(of: v, with: \"\")\n      \
    \  }\n    }\n    var result = [String]()\n    for i in 0..<words.count {\n   \
    \     if words[i].count == n {\n            result.append(words[i])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmb7wntju.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var words = [String]()\n\
    \  var consonants = 0\n  var currentWord = \"\"\n  s.forEach {\n    if ($0 ==\
    \ \" \") {\n      if (consonants == n) {\n        words.append(currentWord)\n\
    \      }\n      consonants = 0\n      currentWord = \"\"\n    } else {\n     \
    \ if (!isVowel($0)) {\n        consonants += 1\n      }\n      currentWord.append($0)\n\
    \    }\n  }\n  if (consonants == n) {\n    words.append(currentWord)\n  }\n  return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq91by58a.swift:30:12: error: cannot find 'isVowel' in scope\n \
    \     if (!isVowel($0)) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  var res = [String]()\n\
    \  var i = 0\n  var temp = \"\"\n  var count = 0\n  for c in s {\n    if c ==\
    \ \" \" {\n      if count == n {\n        res.append(temp)\n      }\n      temp\
    \ = \"\"\n      count = 0\n    } else {\n      if c == \"a\" || c == \"e\" ||\
    \ c == \"i\" || c == \"o\" || c == \"u\" {\n        continue\n      } else {\n\
    \        count += 1\n        temp.append(c)\n      }\n    }\n  }\n  if count ==\
    \ n {\n    res.append(temp)\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpd68r5t4m/tmpd68r5t4m.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e54f98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e54c8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e54c8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e54c8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd68r5t4m                        0x000055b655ca7774 <unavailable> + 6004

    5    libc.so.6                          0x00002b8e55184460 __libc_start_main +
    245

    6    tmpd68r5t4m                        0x000055b655ca7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var arr = s.split(separator:\
    \ \" \")\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var consonants: [String] = []\n    for word in arr {\n        if !vowels.contains(word.lowercased().first!)\
    \ {\n            consonants.append(String(word))\n        }\n    }\n    return\
    \ consonants\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp150ukz70/tmp150ukz70.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb7539cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb75093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb75093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb750927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp150ukz70                        0x0000562ae9ea6a84 <unavailable> + 6788

    5    libc.so.6                          0x00002adb75588460 __libc_start_main +
    245

    6    tmp150ukz70                        0x0000562ae9ea6689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    return s.split(separator: \" \").filter { (word) -> Bool in\n\
    \        var counter = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                counter += 1\n            }\n        }\n        return counter\
    \ == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8l5fbsn8.swift:20:36: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return s.split(separator: \" \").filter { (word) -> Bool in\n           \
    \                        ^\n/tmp/tmp8l5fbsn8.swift:20:36: note: arguments to generic\
    \ parameter 'Element' ('String.SubSequence' (aka 'Substring') and 'String') are\
    \ expected to be equal\n    return s.split(separator: \" \").filter { (word) ->\
    \ Bool in\n                                   ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard !s.isEmpty else\
    \ { return [] }\n    let arr = s.components(separatedBy: \" \")\n    return arr.filter\
    \ { word in word.getConsonants().count == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp15y455ze.swift:20:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if (s.isEmpty) {\n\
    \        return []\n    }\n    return s.split(separator: \" \").filter { (word)\
    \ -> Bool in\n        word.filter({ (char) -> Bool in\n            \"aeiouAEIOU\"\
    .contains(char)\n        }).count == n\n    }.map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpht_q9y4i/tmpht_q9y4i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba298612c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba298309b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba298309988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2983087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpht_q9y4i                        0x000056213ae3c9e4 <unavailable> + 6628

    5    libc.so.6                          0x00002ba2987fe460 __libc_start_main +
    245

    6    tmpht_q9y4i                        0x000056213ae3c5e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result : [String]\
    \ = []\n    let vowel : Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       var cnt : Int = 0\n        for ch in word {\n            if !vowel.contains(ch)\
    \ {\n                cnt += 1\n            }\n        }\n        if cnt == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoz88177j.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter({ $0.countOfConsonants() == n }).map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi8hvpxmz.swift:19:48: error: reference to member 'countOfConsonants'\
    \ cannot be resolved without a contextual type\n    return s.split(separator:\
    \ \" \").filter({ $0.countOfConsonants() == n }).map { String($0) }\n        \
    \                                       ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return [\"Uncle\"]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb_3acdui/tmpb_3acdui.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9df86a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9df839bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9df839b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9df839a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_3acdui                        0x000055ccaaa284c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9df8890460 __libc_start_main +
    245

    6    tmpb_3acdui                        0x000055ccaaa280c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let letters = s.lowercased().components(separatedBy: \" \")\n    var words\
    \ = [String]()\n    for letter in letters {\n        var count = 0\n        for\
    \ l in letter {\n            if !vowels.contains(l) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            words.append(letter)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp07e_uw2w.swift:20:34: error: value of type 'String' has no member\
    \ 'components'\n    let letters = s.lowercased().components(separatedBy: \" \"\
    )\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = CharacterSet(charactersIn:\
    \ \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\")\n    let vowels = CharacterSet(charactersIn:\
    \ \"aAeEiIoOuU\")\n    var words = [String]()\n    let wordCount = s.components(separatedBy:\
    \ \" \")\n    for word in wordCount {\n        var consCount = 0\n        var\
    \ cons = 0\n        var vowel = 0\n        for char in word {\n            if\
    \ String(char).rangeOfCharacter(from: consonants) != nil {\n                consCount\
    \ += 1\n            }\n            if String(char).rangeOfCharacter(from: vowels)\
    \ != nil {\n                vowel += 1\n            }\n        }\n        cons\
    \ = consCount - vowel\n        if cons == n {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp10dw_2et.swift:19:22: error: cannot find 'CharacterSet' in scope\n\
    \    let consonants = CharacterSet(charactersIn: \"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\
    )\n                     ^~~~~~~~~~~~\n/tmp/tmp10dw_2et.swift:20:18: error: cannot\
    \ find 'CharacterSet' in scope\n    let vowels = CharacterSet(charactersIn: \"\
    aAeEiIoOuU\")\n                 ^~~~~~~~~~~~\n/tmp/tmp10dw_2et.swift:22:23: error:\
    \ value of type 'String' has no member 'components'\n    let wordCount = s.components(separatedBy:\
    \ \" \")\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var arr = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in arr {\n        if consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpehjew9yn.swift:19:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    var count: Int\
    \ = 0\n    var words = [String]()\n    let myStringArr = s.split(separator: \"\
    \ \")\n    for word in myStringArr {\n        for letter in word {\n         \
    \   if consonants.contains(String(letter).lowercased()) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            words.append(String(word))\n\
    \        }\n        count = 0\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpe129zybe/tmpe129zybe.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9dd57dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9dd274b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9dd274988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9dd2737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe129zybe                        0x0000562aec8f0bb9 <unavailable> + 7097

    5    libc.so.6                          0x00002ab9dd769460 __libc_start_main +
    245

    6    tmpe129zybe                        0x0000562aec8f0669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.filter(is_consonant).count == n }.map { String($0) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe920ifb7.swift:19:55: error: cannot find 'is_consonant' in scope\n\
    \    return s.split(separator: \" \").filter { $0.filter(is_consonant).count ==\
    \ n }.map { String($0) }\n                                                   \
    \   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let separatedWords = s.components(separatedBy:\
    \ \" \")\n    var selectedWords = [String]()\n    for word in separatedWords {\n\
    \        var count = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            selectedWords.append(word)\n        }\n    }\n    return selectedWords\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp03qzykv_.swift:20:28: error: value of type 'String' has no member\
    \ 'components'\n    let separatedWords = s.components(separatedBy: \" \")\n  \
    \                       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var res = [String]()\n    var vowels = Set<Character>(\"aeiouAEIOU\"\
    )\n    words = words.filter { !$0.isEmpty }\n    for word in words {\n       \
    \ var num = 0\n        for letter in word {\n            if !vowels.contains(letter)\
    \ {\n                num += 1\n            }\n        }\n        if num == n {\n\
    \            res.append(word)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpujx_00gb.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var count = 0\n    for i in s.lowercased() {\n        if i == \"a\" || i\
    \ == \"e\" || i == \"i\" || i == \"o\" || i == \"u\" {\n            continue\n\
    \        } else {\n            count += 1\n        }\n    }\n    if count == n\
    \ {\n        words.append(s)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpxgpe5unz/tmpxgpe5unz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae489bccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4898c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4898c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4898c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgpe5unz                        0x000055c057f6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ae489db8460 __libc_start_main +
    245

    6    tmpxgpe5unz                        0x000055c057f6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let letters = s.map { $0.lowercased() }\n \
    \   var words = [String]()\n    var word = [Character]()\n    var consonants =\
    \ 0\n    for letter in letters {\n        if letter == \" \" {\n            if\
    \ consonants == n {\n                words.append(String(word))\n            }\n\
    \            word = [Character]()\n            consonants = 0\n        } else\
    \ if !vowels.contains(letter) {\n            consonants += 1\n            word.append(letter)\n\
    \        } else {\n            word.append(letter)\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(String(word))\n    }\n    return words\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprix9pfs0.swift:33:18: error: no exact matches in call to instance\
    \ method 'append'\n            word.append(letter)\n                 ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n/tmp/tmprix9pfs0.swift:35:18:\
    \ error: no exact matches in call to instance method 'append'\n            word.append(letter)\n\
    \                 ^\nSwift.Array:7:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf\
    \ newElements: __owned S) where Element == S.Element, S : Sequence\n         \
    \                           ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable\
    \ public mutating func append<S>(contentsOf newElements: __owned S) where S :\
    \ Sequence, Self.Element == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let charArray = Array(s)\n    var word = \"\
    \"\n    var words = [String]()\n    var consonantsCount = 0\n    for i in charArray\
    \ {\n        if i != \" \" {\n            word.append(i)\n            if !vowels.contains(String(i))\
    \ {\n                consonantsCount += 1\n            }\n        } else {\n \
    \           if consonantsCount == n {\n                words.append(word)\n  \
    \          }\n            word = \"\"\n            consonantsCount = 0\n     \
    \   }\n    }\n    if consonantsCount == n {\n        words.append(word)\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp8l48d5nh/tmp8l48d5nh.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94b08d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94b05cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94b05ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94b05c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8l48d5nh                        0x000055b10fb03ecb <unavailable> + 7883

    5    libc.so.6                          0x00002b94b0abf460 __libc_start_main +
    245

    6    tmp8l48d5nh                        0x000055b10fb035b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n    let vowels = \"aeiou\"\n    let words = s.lowercased().components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if vowels.contains(letter) {\n\
    \                continue\n            }\n            count += 1\n        }\n\
    \        if count == n {\n            result.append(word)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwmm1t71k.swift:21:32: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.lowercased().components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let string = s.lowercased()\n\
    \    let array = string.components(separatedBy: \" \")\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var answer:\
    \ [String] = []\n    for word in array {\n        var counter = 0\n        for\
    \ char in word {\n            if consonants.contains(String(char)) {\n       \
    \         counter += 1\n            }\n        }\n        if counter == n {\n\
    \            answer.append(word)\n        }\n    }\n    return answer\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0yic1k7l.swift:20:24: error: value of type 'String' has no member\
    \ 'components'\n    let array = string.components(separatedBy: \" \")\n      \
    \          ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var ret = [String]()\n\
    \    var currentWord = \"\"\n    var currentConsonants = 0\n    for c in s {\n\
    \        if c == \" \" {\n            if currentConsonants == n {\n          \
    \      ret.append(currentWord)\n            }\n            currentWord = \"\"\n\
    \            currentConsonants = 0\n        } else {\n            currentWord\
    \ += String(c)\n            if c.isConsonant() {\n                currentConsonants\
    \ += 1\n            }\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpde5uixsr.swift:31:18: error: value of type 'Character' has no member\
    \ 'isConsonant'\n            if c.isConsonant() {\n               ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var wordCount = [String: Int]()\n    var words\
    \ = [String]()\n    let letters = s.split(separator: \" \")\n    for word in letters\
    \ {\n        let consts = word.filter { !vowels.contains(String($0)) }\n     \
    \   wordCount[String(word)] = consts.count\n    }\n    for (word, count) in wordCount\
    \ {\n        if count == n {\n            words.append(word)\n        }\n    }\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpnuenr9_6/tmpnuenr9_6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b921adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b91ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b91ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b91ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnuenr9_6                        0x000055d943ad21ab <unavailable> + 8619

    5    libc.so.6                          0x00002b8b92399460 __libc_start_main +
    245

    6    tmpnuenr9_6                        0x000055d943ad1899 <unavailable> + 6297

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tvar words = [String]()\n\
    \tvar startIndex = s.startIndex\n\tvar endIndex = s.startIndex\n\tvar searchRange\
    \ = startIndex..<s.endIndex\n\tfor endIndex in searchRange {\n\t\tif String(s[endIndex])\
    \ == \" \" {\n\t\t\tlet word = String(s[startIndex..<endIndex])\n\t\t\tif consonants(s:\
    \ word) == n {\n\t\t\t\twords.append(word)\n\t\t\t}\n\t\t\tsearchRange = (endIndex..<s.endIndex)\n\
    \t\t\tstartIndex = endIndex\n\t\t}\n\t}\n\tif consonants(s: String(s[startIndex..<s.endIndex]))\
    \ == n {\n\t\twords.append(String(s[startIndex..<s.endIndex]))\n\t}\n\treturn\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdpjewdxo.swift:23:18: error: referencing instance method 'makeIterator()'\
    \ on 'Range' requires that 'String.Index' conform to 'Strideable'\n        for\
    \ endIndex in searchRange {\n                        ^\nSwift.Range:1:11: note:\
    \ requirement from conditional conformance of 'Range<String.Index>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpdpjewdxo.swift:23:18:\
    \ error: protocol 'Sequence' requires that 'String.Index' conform to 'Strideable'\n\
    \        for endIndex in searchRange {\n                        ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n<unknown>:0: error: referencing instance method 'next()' on\
    \ 'Range' requires that 'String.Index' conform to 'Strideable'\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpdpjewdxo.swift:33:5:\
    \ error: cannot find 'consonants' in scope\n        if consonants(s: String(s[startIndex..<s.endIndex]))\
    \ == n {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  if s.isEmpty {\n    return\
    \ []\n  }\n\n  var words = s.components(separatedBy: \" \")\n  for word in words\
    \ {\n    if !hasConsonants(word, n) {\n      words.removeAll(where: {$0 == word})\n\
    \    }\n  }\n  return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3p5e83kp.swift:23:17: error: value of type 'String' has no member\
    \ 'components'\n  var words = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  let vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  let s = s.lowercased()\n  var words = s.components(separatedBy:\
    \ \" \")\n  var result = [String]()\n  for var word in words {\n    word = word.lowercased()\n\
    \    var counter = 0\n    for letter in word {\n      if !vowels.contains(String(letter))\
    \ {\n        counter += 1\n      }\n    }\n    if counter == n {\n      result.append(word)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpktpdvhmc.swift:21:17: error: value of type 'String' has no member\
    \ 'components'\n  var words = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    if s.isEmpty {\n  \
    \      return []\n    }\n    var arrayString = s.components(separatedBy: \" \"\
    )\n    var result: [String] = []\n    for word in arrayString {\n        if word.vowels_count()\
    \ != n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7u878bg1.swift:22:25: error: value of type 'String' has no member\
    \ 'components'\n    var arrayString = s.components(separatedBy: \" \")\n     \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard !s.isEmpty else\
    \ { return [] }\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let count = word.filter { $0.isConsonant\
    \ }.count\n        if count == n {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx6wxfu69.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var array = [String]()\n\
    \    let words = s.split(separator: \" \")\n    let vowels = \"aeiou\"\n    for\
    \ word in words {\n        var counter = 0\n        for letter in word {\n   \
    \         if !vowels.contains(letter) {\n                counter += 1\n      \
    \      }\n        }\n        if counter == n {\n            array.append(String(word))\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpkudstckf/tmpkudstckf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1c553ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1c5231b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1c5231988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1c52307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkudstckf                        0x0000556104314f1b <unavailable> + 7963

    5    libc.so.6                          0x00002ac1c5726460 __libc_start_main +
    245

    6    tmpkudstckf                        0x0000556104314609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return select_words(s:\
    \ s, n: n, n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc03pq5mm.swift:19:40: error: extra argument 'n' in call\n    return\
    \ select_words(s: s, n: n, n: n)\n                       ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let s = s.components(separatedBy:\
    \ \" \")\n    var a: [String] = []\n    for (i, e) in s.enumerated() {\n     \
    \   if vowelCount(e) == n {\n            a.append(e)\n        }\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpevxj080w.swift:19:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let consonants = Set(\"\
    bcdfghjklmnpqrstvwxyz\")\n    let arr = s.lowercased().split(separator: \" \"\
    )\n    var words = [String]()\n    for word in arr {\n        var count = 0\n\
    \        for char in word {\n            if consonants.contains(char) {\n    \
    \            count += 1\n            }\n        }\n        if count == n {\n \
    \           words.append(String(word))\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy9bjcvl5/tmpy9bjcvl5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b29a52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b29749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b29749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b297487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9bjcvl5                        0x00005642c3ffec79 <unavailable> + 7289

    5    libc.so.6                          0x00002b8b29c3e460 __libc_start_main +
    245

    6    tmpy9bjcvl5                        0x00005642c3ffe729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let countConsonants = CharacterSet(charactersIn: \"bcdfghjklmnpqrstvwxyz\"\
    )\n    let countVowels = CharacterSet(charactersIn: \"aeiou\")\n    s.lowercased().split(separator:\
    \ \" \").forEach { word in\n        var wordConsonants = 0\n        var wordVowels\
    \ = 0\n        word.unicodeScalars.forEach {\n            let scalar = $0\n  \
    \          if countConsonants.contains(scalar) {\n                wordConsonants\
    \ += 1\n            } else if countVowels.contains(scalar) {\n               \
    \ wordVowels += 1\n            }\n        }\n        if wordConsonants == n {\n\
    \            words.append(String(word))\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqfnhsr0j.swift:20:27: error: cannot find 'CharacterSet' in scope\n\
    \    let countConsonants = CharacterSet(charactersIn: \"bcdfghjklmnpqrstvwxyz\"\
    )\n                          ^~~~~~~~~~~~\n/tmp/tmpqfnhsr0j.swift:21:23: error:\
    \ cannot find 'CharacterSet' in scope\n    let countVowels = CharacterSet(charactersIn:\
    \ \"aeiou\")\n                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    let source = s.components(separatedBy: \" \")\n    for word in source\
    \ {\n        if countConsonants(word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_nahljdl.swift:20:20: error: value of type 'String' has no member\
    \ 'components'\n    let source = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    guard !s.isEmpty else\
    \ { return [] }\n    let words = s.components(separatedBy: \" \")\n    let vowels\
    \ = \"aeiou\"\n    return words.filter { word in\n        word.lowercased().filter\
    \ { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp18ll35vy.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n\tfunc count_consonants(s:\
    \ String) -> Int {\n\t\tfunc is_consonant(c: Character) -> Bool {\n\t\t\tswitch\
    \ c {\n\t\t\tcase \"a\", \"e\", \"i\", \"o\", \"u\", \" \":\n\t\t\t\treturn false\n\
    \t\t\tdefault:\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn s.filter(is_consonant).count\n\
    \t}\n\treturn s.components(separatedBy: \" \").filter { count_consonants(s: $0)\
    \ == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_l2q_qwz.swift:30:11: error: value of type 'String' has no member\
    \ 'components'\n        return s.components(separatedBy: \" \").filter { count_consonants(s:\
    \ $0) == n }\n               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // your code here\n\
    \    var arr = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for item in arr {\n        var count = 0\n        for c in item {\n     \
    \       if c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\"\
    \ && c != \"A\" && c != \"E\" && c != \"I\" && c != \"O\" && c != \"U\" {\n  \
    \              count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(item)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf2ytawzk.swift:20:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  guard !s.isEmpty else\
    \ { return [] }\n  let vowels = \"aeiou\"\n  let list = s.components(separatedBy:\
    \ \" \")\n  var result = [String]()\n  for str in list {\n    let filtered = str.filter\
    \ { !vowels.contains($0) }\n    if filtered.count == n {\n      result.append(str)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp32cpd6px.swift:21:16: error: value of type 'String' has no member\
    \ 'components'\n  let list = s.components(separatedBy: \" \")\n             ~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var stringArray = s.components(separatedBy:\
    \ \" \")\n    var stringsWithNconsonants = [String]()\n    var consonantCounter\
    \ = 0\n    for word in stringArray {\n        for char in word {\n           \
    \ for c in consonants {\n                if c == char {\n                    consonantCounter\
    \ += 1\n                }\n            }\n        }\n        if consonantCounter\
    \ == n {\n            stringsWithNconsonants.append(word)\n        }\n       \
    \ consonantCounter = 0\n    }\n    return stringsWithNconsonants\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcqds7uir.swift:21:25: error: value of type 'String' has no member\
    \ 'components'\n    var stringArray = s.components(separatedBy: \" \")\n     \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n  guard !s.isEmpty else\
    \ { return [] }\n  let arr = s.components(separatedBy: \" \")\n  let ans = arr.filter\
    \ { word in\n    word.filter { !consonants.contains($0) }.count == n\n  }\n  return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4nd6is5y.swift:20:15: error: value of type 'String' has no member\
    \ 'components'\n  let arr = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n\
    /tmp/tmp4nd6is5y.swift:22:20: error: cannot find 'consonants' in scope\n    word.filter\
    \ { !consonants.contains($0) }.count == n\n                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    for word in words {\n        var count = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter).lowercased()) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp50je9le5.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014286
