name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n/// Return nil if there is\
  \ no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>>\
  \ next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n\
  /// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int])\
  \ -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    guard lst.count > 1 else { return nil }\n    var lst2 = lst\n \
    \   lst2.sort()\n    var previous: Int?\n    for i in lst2 {\n        if previous\
    \ == nil {\n            previous = i\n        } else if previous != i {\n    \
    \        return i\n        }\n    }\n    return nil", "    var lst = lst\n   \
    \ if lst.count == 0 {\n        return nil\n    }\n    lst.sort()\n    if lst.count\
    \ == 1 {\n        return nil\n    }\n    for i in 0..<lst.count - 1 {\n      \
    \  if lst[i] != lst[i + 1] {\n            return lst[i + 1]\n        }\n    }\n\
    \    return nil", "    let lst = lst.sorted()\n    var current = lst[0]\n    var\
    \ previous = lst[0]\n    for i in lst[1...] {\n        if i == previous {\n  \
    \          continue\n        }\n        if i > previous {\n            return\
    \ i\n        }\n        current = i\n        previous = i\n    }\n    return nil",
  "    guard lst.count > 2 else { return nil }\n    var sm1 = Int.max\n    var sm2\
    \ = Int.max\n    for i in lst {\n        if i < sm1 {\n            sm2 = sm1\n\
    \            sm1 = i\n        } else if i < sm2 {\n            sm2 = i\n     \
    \   }\n    }\n    return sm2 == Int.max ? nil : sm2", "    guard lst.count > 1\
    \ else { return nil }\n    var lst = lst\n    lst.sort()\n    for (i, element)\
    \ in lst.enumerated() {\n        if i + 1 < lst.count && element != lst[i + 1]\
    \ {\n            return lst[i + 1]\n        }\n    }\n    return nil", "    \n\
    \    guard lst.count > 1 else { return nil }\n    \n    var sorted = lst.sorted()\n\
    \    var nextSmallest = Int.max\n    \n    while sorted.count > 0 {\n        let\
    \ first = sorted.removeFirst()\n        let second = sorted.first\n        \n\
    \        if let second = second {\n            if second > first {\n         \
    \       nextSmallest = min(nextSmallest, second)\n            }\n        }\n \
    \   }\n    \n    if nextSmallest != Int.max {\n        return nextSmallest\n \
    \   }\n    \n    return nil", "    guard !lst.isEmpty else { return nil }\n  \
    \  let sortedList = lst.sorted()\n    guard sortedList.first! != sortedList.last!\
    \ else { return nil }\n    return sortedList[1]", "    if lst.count == 0 {\n \
    \       return nil\n    }\n    if lst.count == 1 {\n        return nil\n    }\n\
    \    if lst.count == 2 {\n        if lst[0] == lst[1] {\n            return nil\n\
    \        }\n    }\n    var res = lst.sorted()\n    for i in 1..<res.count {\n\
    \        if res[i] > res[0] {\n            return res[i]\n        }\n    }\n \
    \   return nil", "    \n    let num = lst.count\n    var smallest = Int.max\n\
    \    var secondSmallest = Int.max\n    \n    if num <= 1 {\n        return nil\n\
    \    }\n    \n    for i in 0..<num {\n        if lst[i] < smallest {\n       \
    \     secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest && lst[i] != smallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    \n    if secondSmallest == Int.max {\n     \
    \   return nil\n    }\n    \n    return secondSmallest", "    if lst.count ==\
    \ 0 {\n        return nil\n    }\n    if lst.count == 1 {\n        return nil\n\
    \    }\n    var minimum = lst[0]\n    var second_smallest = lst[1]\n    for i\
    \ in 0..<lst.count {\n        if lst[i] < minimum {\n            second_smallest\
    \ = minimum\n            minimum = lst[i]\n        } else if lst[i] < second_smallest\
    \ {\n            second_smallest = lst[i]\n        }\n    }\n    return second_smallest",
  "    if (lst.count == 0) {\n        return nil\n    }\n    var current = lst[0]\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    var done = false\n\
    \    for item in lst {\n        if (item > smallest) {\n            secondSmallest\
    \ = smallest\n            smallest = item\n            done = true\n        }\
    \ else if (item < smallest && item > secondSmallest) {\n            secondSmallest\
    \ = item\n            done = true\n        }\n    }\n    if (done) {\n       \
    \ return secondSmallest\n    }\n    return nil", "    var sortedLst = lst.sorted()\n\
    \    var last: Int?\n    for item in sortedLst {\n        if let last = last {\n\
    \            if item > last {\n                return item\n            }\n  \
    \      }\n        last = item\n    }\n    return nil", "    let sortedLst = lst.sorted()\n\
    \    var tmp1 = 0\n    var tmp2 = 0\n    for i in sortedLst {\n        if tmp1\
    \ == 0 {\n            tmp1 = i\n        } else if tmp1 != i {\n            tmp2\
    \ = i\n            break\n        }\n    }\n    if tmp1 == tmp2 {\n        return\
    \ nil\n    }\n    return tmp2", "    \n    var sorted = lst.sorted()\n    var\
    \ i = 0\n    for value in sorted {\n        i += 1\n        if i == 1 {\n    \
    \        if value == sorted[i] {\n                return nil\n            }\n\
    \        }\n        if i == 2 {\n            return value\n        }\n    }\n\
    \    return nil", "    guard lst.count > 1 else { return nil }\n    var lst =\
    \ lst\n    let smallest = lst.remove(at: lst.minIndex()!)\n    let next_smallest\
    \ = lst.min()\n    if next_smallest == smallest {\n        return nil\n    }\n\
    \    return next_smallest", "    var min = Int.max\n    var nmin = Int.max\n \
    \   for i in lst {\n        if i < min {\n            nmin = min\n           \
    \ min = i\n        } else if i < nmin {\n            nmin = i\n        }\n   \
    \ }\n    return min == nmin ? nil : nmin", '    return lst.sorted()[safe: 1]',
  '    return nil', '    return nil', "    guard lst.count > 1 else { return nil }\n\
    \    guard let min = lst.min() else { return nil }\n    let minIndex = lst.firstIndex(of:\
    \ min)!\n    let rLst = Array(lst[minIndex + 1...])\n    return rLst.min()", " \
    \   var min = lst[0]\n    var secondMin = Int.max\n    for x in lst[1..<lst.count]\
    \ {\n        if x < min {\n            secondMin = min\n            min = x\n\
    \        } else if x < secondMin {\n            secondMin = x\n        }\n   \
    \ }\n    return secondMin == Int.max ? nil : secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var lst = lst\n    lst.sort()\n    for index in\
    \ 1..<lst.count {\n        if lst[index] != lst[index - 1] {\n            return\
    \ lst[index]\n        }\n    }\n    return nil", "    var min = Int.max\n    var\
    \ secMin = Int.max\n    for item in lst {\n        if item < min {\n         \
    \   secMin = min\n            min = item\n        } else if item < secMin {\n\
    \            secMin = item\n        }\n    }\n    return secMin == Int.max ? nil\
    \ : secMin", "    guard lst.count > 1 else { return nil }\n    let sortedList\
    \ = lst.sorted()\n    for i in 0..<sortedList.count - 1 {\n        if sortedList[i]\
    \ != sortedList[i + 1] {\n            return sortedList[i + 1]\n        }\n  \
    \  }\n    return nil", "    guard lst.count > 1 else { return nil }\n    let sortedLst\
    \ = lst.sorted()\n    for i in 0..<sortedLst.count - 1 {\n        if sortedLst[i]\
    \ != sortedLst[i + 1] {\n            return sortedLst[i + 1]\n        }\n    }\n\
    \    return nil", '    return nil', "    var a = Array(lst)\n    if a.count <\
    \ 2 {\n        return nil\n    }\n    a.sort()\n    return a[1]", "    guard lst.count\
    \ > 1 else { return nil }\n    let sorted = lst.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if sorted[i] != sorted[i+1] {\n            return sorted[i+1]\n \
    \       }\n    }\n    return nil", "    let sorted = lst.sorted()\n    if sorted.count\
    \ > 1 {\n        if sorted[0] != sorted[1] {\n            return sorted[1]\n \
    \       }\n    }\n    return nil", '    return nil', "    guard lst.count > 1\
    \ else { return nil }\n    let min = lst.min()\n    return lst.filter { $0 !=\
    \ min }.min()", "    var dic = [Int: Int]()\n    for num in lst {\n        dic[num]\
    \ = (dic[num] ?? 0) + 1\n    }\n    var counts = [Int](dic.keys).sorted()\n  \
    \  if counts.count == 0 {\n        return nil\n    }\n    if counts.count == 1\
    \ || counts[0] == counts[1] {\n        return nil\n    }\n    return counts[1]",
  "    let sorted = lst.sorted()\n    for num in sorted {\n        if let index =\
    \ sorted.index(of: num), sorted.indices.contains(index + 1) {\n            return\
    \ sorted[index + 1]\n        }\n    }\n    return nil", "    guard lst.count >\
    \ 1 else { return nil }\n    var copy = lst\n    copy.sort()\n    for (i, n) in\
    \ copy.enumerated() {\n        if i > 0 && n != copy[i - 1] {\n            return\
    \ n\n        }\n    }\n    return nil", "    guard lst.count > 1 else { return\
    \ nil }\n    let sortedList = lst.sorted()\n    return sortedList[1]", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var s\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    s = min\n            min = lst[i]\n        } else if lst[i] < s {\n     \
    \       s = lst[i]\n        }\n    }\n    return s", "    var smallest = Int.max\n\
    \    var second_smallest = Int.max\n    for i in lst {\n        if i < smallest\
    \ {\n            second_smallest = smallest\n            smallest = i\n      \
    \  } else if i < second_smallest {\n            second_smallest = i\n        }\n\
    \    }\n    return second_smallest == Int.max ? nil : second_smallest", '    return
    lst.sorted(by: <)[safe: 1]', "    guard lst.count > 1 else { return nil }\n  \
    \  guard lst.count > 2 else { return lst[1] }\n    var min = lst[0]\n    var minIndex\
    \ = 0\n    var secondMin = lst[1]\n    var secondMinIndex = 1\n    var i = 2\n\
    \    while i < lst.count {\n        if lst[i] < min {\n            secondMin =\
    \ min\n            secondMinIndex = minIndex\n            min = lst[i]\n     \
    \       minIndex = i\n        } else if lst[i] < secondMin {\n            secondMin\
    \ = lst[i]\n            secondMinIndex = i\n        }\n        i += 1\n    }\n\
    \    return minIndex != secondMinIndex ? secondMin : nil", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    if\
    \ min > min2 { swap(&min, &min2) }\n    for value in lst[2...] {\n        if value\
    \ < min {\n            min2 = min\n            min = value\n        } else if\
    \ value < min2 {\n            min2 = value\n        }\n    }\n    return min2",
  "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n \
    \       return nil\n    }\n    var lst = lst\n    lst.sort()\n    var smol = lst[0]\n\
    \    var smol2 = lst[1]\n    for number in lst {\n        if number == smol {\n\
    \            continue\n        }\n        if number == smol2 {\n            return\
    \ smol\n        }\n        if number < smol2 {\n            smol = smol2\n   \
    \         smol2 = number\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    let sortedLst = lst.sorted()\n    for i in 1..<sortedLst.count\
    \ {\n        if sortedLst[i] != sortedLst[i - 1] {\n            return sortedLst[i]\n\
    \        }\n    }\n    return nil", "    \n    if lst.count < 2 {\n        return\
    \ nil\n    }\n    \n    if lst.count == 2 {\n        if lst[0] != lst[1] {\n \
    \           return lst[1]\n        } else {\n            return nil\n        }\n\
    \    }\n    \n    let min = lst.min()!\n    let sortedLst = lst.sorted()\n   \
    \ for n in sortedLst {\n        if n > min {\n            return n\n        }\n\
    \    }\n    \n    return nil", "    if lst.count == 0 {\n        return nil\n\
    \    } else if lst.count == 1 {\n        return nil\n    } else {\n        var\
    \ lst = lst\n        lst.sort()\n        for i in 1..<lst.count {\n          \
    \  if lst[i] != lst[i-1] {\n                return lst[i]\n            }\n   \
    \     }\n        return nil\n    }", '  return lst.sorted().dropFirst().first',
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n  \
    \      if lst[0] != lst[1] {\n            return lst[1]\n        } else {\n  \
    \          return nil\n        }\n    }\n    var m1 = lst[0]\n    var m2 = lst[1]\n\
    \    for x in lst[2..<lst.count] {\n        if x < m1 {\n            m2 = m1\n\
    \            m1 = x\n        } else if x < m2 {\n            m2 = x\n        }\n\
    \    }\n    return m2", "    guard lst.count > 1 else { return nil }\n    let\
    \ sorted = lst.sorted()\n    guard sorted[0] != sorted[1] else { return nil }\n\
    \    return sorted[1]", "    var arr = lst\n    arr.sort()\n    if arr.count <=\
    \ 1 {\n        return nil\n    }\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] != arr[i + 1] {\n            return arr[i + 1]\n        }\n    }\n  \
    \  return nil", "    if lst.count < 2 {\n        return nil\n    }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil", " \
    \   \n    if lst.count < 2 {\n        return nil\n    }\n    \n    var min1 =\
    \ lst[0]\n    var min2 = lst[1]\n    \n    for i in 2 ..< lst.count {\n      \
    \  if lst[i] < min1 {\n            min2 = min1\n            min1 = lst[i]\n  \
    \      } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n\
    \    \n    return min2", '    return lst.sorted()[safe: 1]', "    guard lst.count\
    \ > 1 else { return nil }\n    let sortedList = lst.sorted()\n    var set: Set<Int>\
    \ = []\n    var secondSmallest: Int?\n    for num in sortedList {\n        if\
    \ !set.contains(num) {\n            set.insert(num)\n            if set.count\
    \ == 2 {\n                secondSmallest = num\n                break\n      \
    \      }\n        }\n    }\n    return secondSmallest", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    return lst.sorted()[1]", "    guard !lst.isEmpty\
    \ else { return nil }\n    guard lst.count > 1 else { return nil }\n    let result\
    \ = lst.sorted()\n    for index in 1...result.count-1 {\n        if result[index]\
    \ != result[index-1] {\n            return result[index]\n        }\n    }\n \
    \   return nil", "    var secondMin = 0\n    var min = 0\n    if lst.count <=\
    \ 1 {\n        return nil\n    }\n    if lst[0] > lst[1] {\n        min = lst[1]\n\
    \        secondMin = lst[0]\n    } else {\n        min = lst[0]\n        secondMin\
    \ = lst[1]\n    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n \
    \           secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    if lst.count < 2 {\n        return nil\n    }\n    var sortedList\
    \ = lst.sorted()\n    for i in 0..<sortedList.count - 1 {\n        if sortedList[i]\
    \ < sortedList[i + 1] {\n            return sortedList[i + 1]\n        }\n   \
    \ }\n    return nil", "    let sorted = lst.sorted()\n    if sorted.count < 2\
    \ {\n        return nil\n    }\n    if sorted[0] == sorted[1] {\n        return\
    \ nil\n    }\n    return sorted[1]", "    guard lst.count > 1 else { return nil\
    \ }\n    let sorted_lst = lst.sorted()\n    return sorted_lst[1]", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest: Int = lst[0]\n    var secondSmallest:\
    \ Int = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var arr = lst\n    arr.sort()\n    for i in 1..<arr.count\
    \ {\n        if arr[i] != arr[i - 1] {\n            return arr[i]\n        }\n\
    \    }\n    return nil", "    guard !lst.isEmpty else { return nil }\n    let\
    \ sorted = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i]\
    \ != sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n   \
    \ return nil", '    return nil', '    return lst.count > 1 ? lst.sorted()[1] :
    nil', '    return nil', '    return nil', "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    guard sorted[0] != sorted[1] else\
    \ { return nil }\n    return sorted[1]", "    guard lst.count > 2 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var lst = lst\n    if lst.count < 2 {\n        return nil\n    }\n    lst.sort()\n\
    \    if lst[0] == lst[1] {\n        return nil\n    }\n    return lst[1]", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    return lst.sorted()[1]",
  "    guard lst.count > 1 else { return nil }\n    var smallest, secondSmallest:\
    \ Int?\n    for i in lst {\n        if smallest == nil {\n            smallest\
    \ = i\n        } else if i < smallest! {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if secondSmallest == nil {\n       \
    \     secondSmallest = i\n        } else if i < secondSmallest! {\n          \
    \  secondSmallest = i\n        }\n    }\n    return secondSmallest", "    guard\
    \ lst.count > 1 else { return nil }\n    var sortedLst = lst.sorted()\n    for\
    \ i in 0..<sortedLst.count - 1 {\n        if sortedLst[i] != sortedLst[i + 1]\
    \ {\n            return sortedLst[i + 1]\n        }\n    }\n    return nil", " \
    \   guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n \
    \   for i in 0..<sorted.count-1 {\n        if sorted[i] != sorted[i+1] {\n   \
    \         return sorted[i+1]\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 2 else {\n        return nil\n    }\n    let sorted = lst.sorted()\n    if\
    \ sorted[0] != sorted[1] {\n        return sorted[1]\n    }\n    for i in 2..<sorted.count\
    \ {\n        if sorted[i] != sorted[i - 1] {\n            return sorted[i]\n \
    \       }\n    }\n    return nil", "    var list = lst\n    if (list.count < 2)\
    \ {\n        return nil\n    }\n    if (list.count == 2) {\n        return (list[0]\
    \ == list[1]) ? nil : list[1]\n    }\n    list.sort()\n    if (list[0] == list[1])\
    \ {\n        return (list[0] == list[2]) ? nil : list[2]\n    }\n    return list[1]",
  "    if lst.count < 2 {\n        return nil\n    }\n    var sorted = lst.sorted()\n\
    \    var last: Int? = nil\n    for i in sorted {\n        if i != last {\n   \
    \         return i\n        }\n        last = i\n    }\n    return nil", '    return
    nil', "    guard lst.count > 1 else { return nil }\n    return lst.sorted().lazy.dropFirst().min()",
  "    guard lst.count > 2 else {\n        return nil\n    }\n    let sorted = lst.sorted()\n\
    \    return sorted[1]", "    if lst.count < 2 {\n        return nil\n    }\n \
    \   let sortedLst = lst.sorted()\n    return sortedLst[1]", "    var set = Set<Int>()\n\
    \    lst.forEach { set.insert($0) }\n    let lst = Array(set).sorted()\n    if\
    \ lst.count > 1 {\n        return lst[1]\n    }\n    return nil", "    if lst.count\
    \ == 0 {\n        return nil\n    } else if lst.count == 1 {\n        return nil\n\
    \    } else {\n        let lst_sorted = lst.sorted(by: <)\n        let first_val\
    \ = lst_sorted[0]\n        var val = lst_sorted[1]\n        for i in 1...lst_sorted.count\
    \ - 1 {\n            if lst_sorted[i] != first_val {\n                val = lst_sorted[i]\n\
    \                break\n            }\n        }\n        return val\n    }",
  "  guard lst.count > 1 else { return nil }\n  return lst.sorted()[1]", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var lst = lst\n    lst.sort()\n    var\
    \ result = 0\n    for i in 1..<lst.count {\n        if lst[i] != lst[i - 1] {\n\
    \            result = lst[i]\n            break\n        }\n    }\n    return\
    \ result", "    var minimum: Int?\n    var minimum2: Int?\n    if lst.count >\
    \ 1 {\n        for item in lst {\n            if minimum == nil {\n          \
    \      minimum = item\n            } else if minimum != nil && item < minimum!\
    \ {\n                minimum2 = minimum\n                minimum = item\n    \
    \        } else if minimum2 == nil && item > minimum! {\n                minimum2\
    \ = item\n            } else if minimum2 != nil && item < minimum2! && item >\
    \ minimum! {\n                minimum2 = item\n            }\n        }\n    }\n\
    \    return minimum2", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  let sorted = lst.sorted()\n    var second = sorted[0]\n    for x in sorted[1...]\
    \ {\n        if x != second {\n            return second\n        }\n        second\
    \ = x\n    }\n    return nil", "    guard lst.count > 1 else { return nil }\n\
    \    guard lst.filter({ $0 == lst.first! }).count != lst.count else { return nil\
    \ }\n    var res = lst.first\n    for (i, el) in lst.enumerated() {\n        if\
    \ i != 0 {\n            if res! > el {\n                if res! == lst.first!\
    \ {\n                    res = el\n                } else {\n                \
    \    break\n                }\n            }\n        }\n    }\n    return res",
  "    if lst.count < 2 {\n        return nil\n    }\n    var lst = lst\n    var min\
    \ = lst[0]\n    var second_min = Int.max\n    for i in 0..<lst.count {\n     \
    \   if lst[i] < min {\n            second_min = min\n            min = lst[i]\n\
    \        } else if lst[i] < second_min && lst[i] != min {\n            second_min\
    \ = lst[i]\n        }\n    }\n    if second_min == Int.max {\n        return nil\n\
    \    }\n    return second_min", "    let sorted = lst.sorted()\n    var nums:\
    \ [Int] = []\n    var prev = sorted[0]\n    for item in sorted[1..<sorted.count]\
    \ {\n        if item == prev {\n            continue\n        }\n        nums.append(item)\n\
    \        prev = item\n    }\n    return nums.count < 2 ? nil : nums[1]", "   \
    \ if lst.count < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n   \
    \     if lst[0] != lst[1] {\n            return lst[1]\n        } else {\n   \
    \         return nil\n        }\n    }\n    var sorted = lst.sorted()\n    var\
    \ i = 0\n    while i < sorted.count - 1 {\n        if sorted[i] != sorted[i +\
    \ 1] {\n            return sorted[i + 1]\n        }\n        i += 1\n    }\n \
    \   return nil", "    \n    guard lst.count > 1 else {\n        return nil\n \
    \   }\n    \n    var temp = lst\n    let lowest = temp.removeFirst()\n    var\
    \ nextLowest = temp.removeFirst()\n    \n    if nextLowest == lowest {\n     \
    \   return nil\n    }\n    \n    if nextLowest < lowest {\n        nextLowest\
    \ = lowest\n    }\n    \n    while temp.count > 0 {\n        let nextNum = temp.removeFirst()\n\
    \        if nextNum == lowest {\n            return nil\n        }\n        if\
    \ nextNum < nextLowest {\n            nextLowest = nextNum\n        }\n    }\n\
    \    \n    return nextLowest", "    if lst.count == 0 {\n        return nil\n\
    \    }\n    let sortedLst = lst.sorted()\n    for i in 1..<sortedLst.count {\n\
    \        if sortedLst[i] != sortedLst[i - 1] {\n            return sortedLst[i]\n\
    \        }\n    }\n    return nil", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n\
    \        if i < min {\n            secondMin = min\n            min = i\n    \
    \    } else if i < secondMin {\n            secondMin = i\n        }\n    }\n\
    \    return secondMin == Int.max ? nil : secondMin", "    var current_min = Int.max\n\
    \    var current_2nd_min = Int.max\n    for n in lst {\n        if n < current_min\
    \ {\n            current_2nd_min = current_min\n            current_min = n\n\
    \        } else if n < current_2nd_min {\n            current_2nd_min = n\n  \
    \      }\n    }\n    return current_2nd_min != Int.max ? current_2nd_min : nil",
  "    guard lst.count > 2 else { return nil }\n    var smallest = lst[0]\n    var\
    \ next_smallest = lst[1]\n    if next_smallest < smallest {\n        smallest\
    \ = next_smallest\n        next_smallest = lst[0]\n    }\n    for num in lst[2...]\
    \ {\n        if num < smallest {\n            next_smallest = smallest\n     \
    \       smallest = num\n        } else if num < next_smallest {\n            next_smallest\
    \ = num\n        }\n    }\n    return next_smallest", "    let sorted = lst.sorted()\n\
    \    if sorted.count < 2 {\n        return nil\n    }\n    var previous = sorted[0]\n\
    \    for index in 1..<sorted.count {\n        if sorted[index] != previous {\n\
    \            return sorted[index]\n        }\n        previous = sorted[index]\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    let\
    \ sorted = lst.sorted()\n    for i in 0..<sorted.count {\n        if sorted[i]\
    \ != sorted[i+1] {\n            return sorted[i+1]\n        }\n    }\n    return\
    \ nil", "  if lst.count < 2 {\n    return nil\n  }\n  let sorted = lst.sorted()\n\
    \  var previous: Int?\n  for next in sorted {\n    if let prev = previous {\n\
    \      if prev != next {\n        return next\n      }\n    }\n    previous =\
    \ next\n  }\n  return nil", "    var arr = lst\n    arr.sort()\n    if arr.count\
    \ == 0 {\n        return nil\n    }\n    if arr.count == 1 {\n        return nil\n\
    \    }\n    for i in 1..<arr.count {\n        if arr[i] != arr[i-1] {\n      \
    \      return arr[i]\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    let sorted = lst.sorted()\n    var prev: Int?\n\
    \    for elem in sorted {\n        guard let prevValue = prev else {\n       \
    \     prev = elem\n            continue\n        }\n        if elem != prevValue\
    \ {\n            return elem\n        }\n    }\n    return nil", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n        i += 1\n    }\n    if\
    \ smallest == secondSmallest {\n        return nil\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n  \
    \  return sorted[1]", "    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var newList = [Int]()\n    var prev = sorted[0]\n    for\
    \ number in sorted {\n        if number != prev {\n            newList.append(number)\n\
    \        }\n        prev = number\n    }\n    return newList.count > 1 ? newList[1]\
    \ : nil", "    var result = [Int]()\n    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    result = lst.sorted()\n    for (i, v) in result.enumerated()\
    \ {\n        if i == 0 {\n            continue\n        }\n        if result[i]\
    \ != result[i - 1] {\n            return result[i]\n        }\n    }\n    return\
    \ nil", "    guard lst.count > 1 else { return nil }\n    let sortedList = lst.sorted()\n\
    \    for index in 0..<sortedList.count - 1 {\n        if sortedList[index] !=\
    \ sortedList[index + 1] {\n            return sortedList[index + 1]\n        }\n\
    \    }\n    return nil", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var smallest = Int.max\n    var second_smallest = Int.max\n    for x in lst\
    \ {\n        if x < smallest {\n            second_smallest = smallest\n     \
    \       smallest = x\n        } else if x < second_smallest {\n            second_smallest\
    \ = x\n        }\n    }\n    return second_smallest == Int.max ? nil : second_smallest",
  "    var min = Int.max\n    var second = Int.max\n    for elem in lst {\n      \
    \  if elem < min {\n            second = min\n            min = elem\n       \
    \ } else if elem < second {\n            second = elem\n        }\n    }\n   \
    \ return second == Int.max ? nil : second", "    guard lst.count > 1 else { return\
    \ nil }\n    var smallest_value = Int.max\n    var second_smallest_value = Int.max\n\
    \    for item in lst {\n        if item < smallest_value {\n            second_smallest_value\
    \ = smallest_value\n            smallest_value = item\n        } else if item\
    \ < second_smallest_value {\n            second_smallest_value = item\n      \
    \  }\n    }\n    return smallest_value == second_smallest_value ? nil : second_smallest_value",
  "    if (lst.count == 0) {\n        return nil\n    } else if (lst.count == 1) {\n\
    \        return nil\n    } else {\n        let sorted = lst.sorted()\n       \
    \ let first = sorted[0]\n        for i in 1..<sorted.count {\n            if (sorted[i]\
    \ != first) {\n                return sorted[i]\n            }\n        }\n  \
    \      return nil\n    }", "    if lst.count == 0 {\n        return nil\n    }\n\
    \    if lst.count == 1 {\n        return nil\n    }\n    var sorted = lst.sorted()\n\
    \    var unique = Set(sorted)\n    if unique.count == 1 {\n        return nil\n\
    \    }\n    for i in 1..<sorted.count {\n        if sorted[i] > sorted[0] {\n\
    \            return sorted[i]\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    var copiedLst = lst\n    copiedLst.sort()\n   \
    \ var previousValue = Int.min\n    for value in copiedLst {\n        if value\
    \ > previousValue {\n            previousValue = value\n            break\n  \
    \      }\n    }\n    return previousValue", "    \n    guard lst.count >= 2 else\
    \ { return nil }\n    \n    let max = lst.count - 1\n    let min = 0\n    \n \
    \   var secondSmallest = max\n    \n    for i in min..<max {\n        if lst[i]\
    \ < lst[secondSmallest] {\n            secondSmallest = i\n        }\n    }\n\
    \    \n    return lst[secondSmallest]", "    guard lst.count > 1 else { return\
    \ nil }\n    var count = 0\n    var nextSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if nextSmallest > lst[i] {\n            nextSmallest = lst[i]\n \
    \           count += 1\n        }\n    }\n    return count > 0 ? nextSmallest\
    \ : nil", "    let sorted = lst.sorted()\n    if sorted.count == 0 {\n       \
    \ return nil\n    }\n    if sorted.count == 1 {\n        return nil\n    }\n \
    \   if sorted.count == 2 {\n        if sorted[0] == sorted[1] {\n            return\
    \ nil\n        }\n    }\n    for i in 0...sorted.count - 2 {\n        if sorted[i]\
    \ != sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n   \
    \ return nil", "    var sorted = lst.sorted()\n    if sorted.count > 1 {\n   \
    \     for (index, _) in sorted.enumerated() {\n            if index > 0 {\n  \
    \              if sorted[index] > sorted[index - 1] {\n                    return\
    \ sorted[index - 1]\n                }\n            }\n        }\n    }\n    return\
    \ nil", "    var list = lst\n    list.sort()\n    if list.count > 1 {\n      \
    \  var check = list[0]\n        for i in 1..<list.count {\n            if list[i]\
    \ > check {\n                return list[i]\n            }\n        }\n    }\n\
    \    return nil", '    return lst.isEmpty ? nil : lst.sorted().count > 1 ? lst.sorted()[1]
    : nil', "    guard !lst.isEmpty else { return nil }\n    guard lst.count > 1 else\
    \ { return nil }\n    var dict: [Int: Int] = [:]\n    for (i, val) in lst.enumerated()\
    \ {\n        if dict[val] == nil {\n            dict[val] = i\n        }\n   \
    \ }\n    let nums = Array(dict.keys).sorted()\n    guard nums.count > 1 else {\
    \ return nil }\n    return nums[1]", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var second = lst[0]\n    var first = lst[0]\n    for number in lst\
    \ {\n        if number < first {\n            second = first\n            first\
    \ = number\n        } else if first < number && number < second {\n          \
    \  second = number\n        }\n    }\n    return second", "    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = nil\
    \ as Int?\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n    \
    \        nextSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if nextSmallest == nil || lst[i] < nextSmallest! {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return nextSmallest", "    let sorted = lst.sorted()\n\
    \    var previous: Int?\n    for number in sorted {\n        if let previous =\
    \ previous {\n            if number != previous {\n                return number\n\
    \            }\n        }\n        previous = number\n    }\n    return nil",
  "    var num = lst.sorted()\n    if num.count == 0 || num.count == 1 {\n       \
    \ return nil\n    } else {\n        var i = 0\n        while i < num.count - 1\
    \ {\n            if num[i] != num[i + 1] {\n                return num[i + 1]\n\
    \            }\n            i += 1\n        }\n        return nil\n    }", '    return
    lst.count > 1 ? Set(lst).sorted()[1] : nil', "    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for elem in lst {\n        if elem < min {\n            secondMin\
    \ = min\n            min = elem\n        } else if elem < secondMin && elem !=\
    \ min {\n            secondMin = elem\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n\
    \    guard lst.count != 2 else { return lst[0] == lst[1] ? nil : lst[1] }\n  \
    \  let sortedList = lst.sorted()\n    return sortedList[1]", "    guard !lst.isEmpty\
    \ else { return nil }\n    let sorted = lst.sorted()\n    return sorted[1]", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    let sorted = lst.sorted()\n\
    \    var smaller = sorted[0]\n    for i in 1..<sorted.count {\n        if sorted[i]\
    \ != smaller {\n            return sorted[i]\n        }\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    let min = lst.min()!\n    let\
    \ sorted = lst.sorted()\n    var next = min\n    for number in sorted {\n    \
    \    if number != min {\n            next = number\n            break\n      \
    \  }\n    }\n    return next", "    guard lst.count > 2 else { return nil }\n\
    \    var list = lst\n    list.sort()\n    return list[1]", "    var min1 = lst[0]\n\
    \    var min2 = min1\n    for i in 1..<lst.count {\n        if lst[i] < min1 {\n\
    \            min2 = min1\n            min1 = lst[i]\n        } else if lst[i]\
    \ < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2", " \
    \   guard !lst.isEmpty else { return nil }\n    guard lst.count > 1 else { return\
    \ nil }\n    var result = lst[0]\n    for i in 1..<lst.count {\n        result\
    \ = max(result, lst[i])\n    }\n    for i in 0..<lst.count {\n        if lst[i]\
    \ < result {\n            result = lst[i]\n            break\n        }\n    }\n\
    \    return result", "  if lst.count < 2 {\n    return nil\n  }\n  var min = lst[0]\n\
    \  var second = lst[1]\n  if second < min {\n    let temp = min\n    min = second\n\
    \    second = temp\n  }\n  for num in lst {\n    if num < min {\n      second\
    \ = min\n      min = num\n    } else if num < second {\n      second = num\n \
    \   }\n  }\n  return second", "    guard lst.count > 2 else { return nil }\n \
    \   return lst.sorted()[1]", "    guard !lst.isEmpty else { return nil }\n   \
    \ var currentMin = lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < currentMin {\n            nextMin = currentMin\n    \
    \        currentMin = lst[i]\n        } else if lst[i] < nextMin {\n         \
    \   nextMin = lst[i]\n        }\n    }\n    return nextMin != Int.max ? nextMin\
    \ : nil", "    var secondSmallest = 0\n    var smallest = lst[0]\n    var n =\
    \ 0\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i < secondSmallest {\n\
    \            secondSmallest = i\n        }\n        n += 1\n    }\n    if n <\
    \ 2 {\n        return nil\n    }\n    return secondSmallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    let sortedLst = lst.sorted()\n    return\
    \ sortedLst[1]", "    var array = lst\n    array.sort()\n    var idx = 0\n   \
    \ var previousValue = array[0]\n    for i in array {\n        if previousValue\
    \ != i {\n            idx += 1\n            if idx > 1 {\n                return\
    \ i\n            }\n        }\n        previousValue = i\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    return lst.sorted().unique().dropFirst().first",
  "    if lst.count == 0 {\n        return nil\n    } else if lst.count == 1 {\n \
    \       return nil\n    } else {\n        var smallest = lst[0]\n        var next_smallest\
    \ = lst[1]\n        if smallest > next_smallest {\n            smallest = lst[1]\n\
    \            next_smallest = lst[0]\n        }\n        for i in 2..<lst.count\
    \ {\n            if lst[i] < smallest {\n                next_smallest = smallest\n\
    \                smallest = lst[i]\n            } else if lst[i] < next_smallest\
    \ {\n                next_smallest = lst[i]\n            }\n        }\n      \
    \  return next_smallest\n    }", "  let sortedLst = lst.sorted()\n  if sortedLst.count\
    \ <= 1 {\n    return nil\n  }\n  return sortedLst[1]", "    guard lst.count >\
    \ 1 else { return nil }\n    let (sm1, sm2) = lst.reduce((lst[0], nil)) { (x:\
    \ (Int, Int?), y: Int) -> (Int, Int?) in\n        if y > x.0 {\n            return\
    \ (x.0, y)\n        } else if x.1 == nil || y > x.1! {\n            return (y,\
    \ x.1)\n        } else {\n            return (x.0, x.1)\n        }\n    }\n  \
    \  return sm2", "    var smallest = Int.max\n    var secondSmallest = Int.max\n\
    \    for n in lst {\n        if n < smallest {\n            secondSmallest = smallest\n\
    \            smallest = n\n        } else if n < secondSmallest {\n          \
    \  secondSmallest = n\n        }\n    }\n    return (secondSmallest == Int.max)\
    \ ? nil : secondSmallest", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var min = lst[0]\n    var ret = lst[1]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < min {\n            ret = min\n            min = lst[i]\n  \
    \      } else if lst[i] < ret {\n            ret = lst[i]\n        }\n    }\n\
    \    return ret", "    var m: Int? = nil\n    var n: Int? = nil\n    for i in\
    \ lst {\n        if let x = m {\n            if i < x {\n                n = m\n\
    \                m = i\n            } else if i < n ?? x {\n                n\
    \ = i\n            }\n        } else {\n            m = i\n        }\n    }\n\
    \    return n", "    if lst.count == 0 {\n        return nil\n    }\n    let minValue\
    \ = lst.min()\n    let lstMinusMinValue = lst.filter({ $0 != minValue })\n   \
    \ return lstMinusMinValue.min()", '    return nil', "    guard lst.count > 1 else\
    \ { return nil }\n    let sorted = lst.sorted()\n    return sorted[1]", "    let\
    \ sortedLst = lst.sorted()\n    for i in 1..<sortedLst.count {\n        if sortedLst[i\
    \ - 1] != sortedLst[i] {\n            return sortedLst[i]\n        }\n    }\n\
    \    return nil", "    var numbers = lst\n    numbers.sort(by: <)\n    let smallest\
    \ = numbers.first\n    var secondSmallest: Int?\n    for number in numbers {\n\
    \        if number > smallest! {\n            secondSmallest = number\n      \
    \      break\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 1 else { return nil }\n    var sorted = lst.sorted()\n    var smallest = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != smallest {\n            return i\n   \
    \     }\n    }\n    return nil", '    return nil', "    guard lst.count > 1 else\
    \ { return nil }\n    var min2 = lst[0]\n    var min1 = lst[0]\n    for num in\
    \ lst {\n        if num < min1 {\n            min2 = min1\n            min1 =\
    \ num\n        } else if num < min2 {\n            min2 = num\n        }\n   \
    \ }\n    if min1 == min2 {\n        return nil\n    }\n    return min2", "   \
    \ var minimum = Int.max\n    var secondMinimum = Int.max\n    for num in lst {\n\
    \        if num < minimum {\n            secondMinimum = minimum\n           \
    \ minimum = num\n        } else if num < secondMinimum {\n            secondMinimum\
    \ = num\n        }\n    }\n    return secondMinimum == Int.max ? nil : secondMinimum",
  "    guard lst.count > 1 else { return nil }\n    var smallest = Int.max\n    var\
    \ secondSmallest = Int.max\n    for num in lst {\n        if num < smallest {\n\
    \            secondSmallest = smallest\n            smallest = num\n        }\
    \ else if num < secondSmallest {\n            secondSmallest = num\n        }\n\
    \    }\n    return smallest == secondSmallest ? nil : secondSmallest", "    var\
    \ value: Int?\n    if lst.count > 1 {\n        let sorted = lst.sorted()\n   \
    \     value = sorted[1]\n    }\n    return value", "    guard lst.count > 1 else\
    \ { return nil }\n    var newLst = lst\n    newLst.sort()\n    if newLst[0] ==\
    \ newLst[1] {\n        return nil\n    }\n    return newLst[1]", "    var sortedArray\
    \ = lst.sorted()\n    if sortedArray.count == 0 {\n        return nil\n    }\n\
    \    if sortedArray.count == 1 {\n        return nil\n    }\n    var min = sortedArray[0]\n\
    \    var min2 = sortedArray[1]\n    for num in sortedArray {\n        if num <\
    \ min {\n            min2 = min\n            min = num\n        } else if num\
    \ < min2 {\n            min2 = num\n        }\n    }\n    return min2", "    guard\
    \ lst.count > 1 else { return nil }\n    let sortedLst = lst.sorted()\n    for\
    \ i in 1..<sortedLst.count {\n        if sortedLst[i - 1] != sortedLst[i] {\n\
    \            return sortedLst[i]\n        }\n    }\n    return nil", "    if lst.count\
    \ == 0 {\n        return nil\n    } else if lst.count == 1 {\n        return nil\n\
    \    } else {\n        let sorted = lst.sorted()\n        return sorted[1]\n \
    \   }", "    guard lst.count > 1 else { return nil }\n    let sortedLst = lst.sorted()\n\
    \    return sortedLst[1]", "  if lst.count < 2 {\n    return nil\n  }\n\n  let\
    \ first = lst.first\n  let second = lst.dropFirst().min()\n  let smallest = first!\
    \ < second! ? first! : second!\n\n  return lst.firstIndex(of: smallest) == lst.lastIndex(of:\
    \ smallest) ? nil : smallest", "    guard lst.count > 1 else { return nil }\n\
    \    let set = Set(lst)\n    guard set.count > 1 else { return nil }\n    let\
    \ sorted = set.sorted()\n    return sorted[1]", "    let sorted = lst.sorted()\n\
    \    for i in 0..<sorted.count {\n        if sorted[i] > sorted[0] {\n       \
    \     return sorted[i]\n        }\n    }\n    return nil", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    let sortedList = lst.sorted()\n    var result\
    \ = lst[0]\n    for index in 1..<sortedList.count {\n        if sortedList[index]\
    \ != sortedList[index - 1] {\n            result = sortedList[index]\n       \
    \     break\n        }\n    }\n    return result", "    if lst.count <= 1 {\n\
    \        return nil\n    }\n    var arr = lst\n    arr.sort()\n    for index in\
    \ 0..<arr.count {\n        if arr[index] != arr[index+1] {\n            return\
    \ arr[index+1]\n        }\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    var minNum = lst[0]\n    var nMinNum = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < minNum {\n            nMinNum = minNum\n\
    \            minNum = lst[i]\n        } else if lst[i] < nMinNum {\n         \
    \   nMinNum = lst[i]\n        }\n    }\n    return nMinNum", "    var result =\
    \ Int.max\n    var smallest = Int.max\n    for item in lst {\n        if item\
    \ < smallest {\n            result = smallest\n            smallest = item\n \
    \       } else if item < result {\n            result = item\n        }\n    }\n\
    \    return result == Int.max ? nil : result", "  guard lst.count > 2 else { return\
    \ nil }\n  let sortedUnique = Set(lst).sorted()\n  return sortedUnique[1]", " \
    \   var smallest = Int.max\n    var s_smallest = Int.max\n    for i in lst {\n\
    \        if i < smallest {\n            s_smallest = smallest\n            smallest\
    \ = i\n        } else if i < s_smallest {\n            s_smallest = i\n      \
    \  }\n    }\n    return smallest == s_smallest ? nil : s_smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var lstCopy = lst\n    lstCopy.sort()\n\
    \    if lstCopy[0] == lstCopy[1] {\n        return nil\n    }\n    return lstCopy[1]",
  "    let sorted = lst.sorted()\n    return sorted.isEmpty || sorted.first == sorted.last\
    \ ? nil : sorted[1]", "    guard lst.count > 2 else { return nil }\n    var min\
    \ = Int.max\n    var nextMin = Int.max\n    for n in lst {\n        if n < min\
    \ {\n            nextMin = min\n            min = n\n        } else if n < nextMin\
    \ {\n            nextMin = n\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin", '  return nil', "    guard lst.count > 1 else { return nil\
    \ }\n    return lst.sorted().dropFirst().first", "    if lst.count < 2 {\n   \
    \     return nil\n    }\n    if lst.count == 2 {\n        if lst[0] == lst[1]\
    \ {\n            return nil\n        }\n        return lst[0] < lst[1] ? lst[0]\
    \ : lst[1]\n    }\n    let sortedLst = lst.sorted()\n    for i in 1 ..< sortedLst.count\
    \ {\n        if sortedLst[i] != sortedLst[i - 1] {\n            return sortedLst[i]\n\
    \        }\n    }\n    return nil", "    guard lst.count > 1 else { return nil\
    \ }\n    var lst = lst\n    var smallest = lst.removeFirst()\n    var nextSmallest\
    \ = Int.max\n    for i in lst {\n        if i < smallest {\n            nextSmallest\
    \ = smallest\n            smallest = i\n        } else if i < nextSmallest {\n\
    \            nextSmallest = i\n        }\n    }\n    return smallest == nextSmallest\
    \ ? nil : nextSmallest", "  var smallest: Int?\n  var second_smallest: Int?\n\
    \  for item in lst {\n    if smallest == nil {\n      smallest = item\n    } else\
    \ if item < smallest! {\n      second_smallest = smallest\n      smallest = item\n\
    \    } else if item > smallest! && (second_smallest == nil || item < second_smallest!)\
    \ {\n      second_smallest = item\n    }\n  }\n  return second_smallest", "  \
    \  guard lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n  \
    \  return sorted[1]", "    let distinct = Set(lst)\n    let sorted = distinct.sorted()\n\
    \    if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]",
  "    guard !lst.isEmpty else { return nil }\n    guard lst.count > 1 else { return\
    \ nil }\n    let sortedArr = lst.sorted()\n    for i in 1..<sortedArr.count {\n\
    \        if sortedArr[i] != sortedArr[i - 1] {\n            return sortedArr[i]\n\
    \        }\n    }\n    return nil", "    if lst.count == 0 {\n        return nil\n\
    \    }\n    if lst.count == 1 {\n        return nil\n    }\n    var lstSorted\
    \ = lst.sorted()\n    if lstSorted[0] == lstSorted[1] {\n        lstSorted.removeFirst()\n\
    \    }\n    if lstSorted.count == 1 {\n        return nil\n    }\n    return lstSorted[1]",
  "    guard lst.count > 1 else { return nil }\n    let unsortedLst = lst.sorted()\n\
    \    return unsortedLst[1]", "    var minimum = Int.max\n    var secondMinimum\
    \ = Int.max\n    for e in lst {\n        if e < minimum {\n            secondMinimum\
    \ = minimum\n            minimum = e\n        } else if e < secondMinimum {\n\
    \            secondMinimum = e\n        }\n    }\n    return secondMinimum ==\
    \ Int.max ? nil : secondMinimum", "    let sorted = lst.sorted()\n    if sorted.count\
    \ < 2 {\n        return nil\n    }\n    var prev = sorted[0]\n    for current\
    \ in sorted[1...] {\n        if current != prev {\n            return current\n\
    \        }\n        prev = current\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    return lst.sorted()[1]", "    guard lst.count >\
    \ 1 else { return nil }\n    let sortedLst = lst.sorted()\n    if sortedLst[0]\
    \ == sortedLst[1] {\n        return nil\n    }\n    return sortedLst[1]", "  \
    \  \n    var lst = lst\n    if lst.count < 2 {\n        return nil\n    }\n  \
    \  \n    var n = lst.count\n    var minimum = lst[0]\n    var second_minimum =\
    \ lst[1]\n    \n    for i in 0..<n {\n        if lst[i] < minimum {\n        \
    \    second_minimum = minimum\n            minimum = lst[i]\n        }\n     \
    \   else if lst[i] > minimum && lst[i] < second_minimum {\n            second_minimum\
    \ = lst[i]\n        }\n    }\n    \n    if second_minimum == minimum {\n     \
    \   return nil\n    }\n    \n    return second_minimum", "    if lst.count < 2\
    \ {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var nextSmallest\
    \ = lst[1]\n\n    for i in 0...lst.count - 1 {\n        if lst[i] < smallest {\n\
    \            nextSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < nextSmallest {\n            nextSmallest = lst[i]\n       \
    \ }\n    }\n\n    return nextSmallest", "    guard lst.count > 1 else { return\
    \ nil }\n    let sortedList = lst.sorted()\n    for i in 1..<sortedList.count\
    \ {\n        if sortedList[i] != sortedList[i - 1] {\n            return sortedList[i]\n\
    \        }\n    }\n    return nil", "    guard lst.count > 1 else { return nil\
    \ }\n    let sortedLst = lst.sorted()\n    guard sortedLst[0] != sortedLst[1]\
    \ else { return nil }\n    return sortedLst[1]", "    guard lst.count > 1 else\
    \ { return nil }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for num in lst {\n        if num < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = num\n        } else if num < secondSmallest\
    \ {\n            secondSmallest = num\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ next_smallest = lst[1]\n    for i in lst {\n        if i > smallest {\n    \
    \        if i < next_smallest {\n                next_smallest = i\n         \
    \   }\n        } else {\n            smallest = i\n        }\n    }\n    if smallest\
    \ == next_smallest {\n        return nil\n    }\n    return next_smallest", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var sortedArray = lst.sorted()\n\
    \    var i = 0\n    while i < sortedArray.count - 1 {\n        if sortedArray[i]\
    \ != sortedArray[i + 1] {\n            return sortedArray[i + 1]\n        }\n\
    \        i += 1\n    }\n    return nil", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var sec_min = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            sec_min = min\n            min = lst[i]\n\
    \        } else if lst[i] < sec_min {\n            sec_min = lst[i]\n        }\n\
    \    }\n    return sec_min", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var sortedLst = lst.sorted()\n    for i in 0...sortedLst.count - 2 {\n\
    \        if sortedLst[i] != sortedLst[i + 1] {\n            return sortedLst[i\
    \ + 1]\n        }\n    }\n    return nil", '    return lst.count < 2 ? nil : lst.sorted()[1]',
  "    if lst.count < 2 {\n        return nil\n    }\n    var n1 = Int.max\n    var\
    \ n2 = Int.max\n    for n in lst {\n        if n < n1 {\n            n2 = n1\n\
    \            n1 = n\n        } else if n < n2 {\n            n2 = n\n        }\n\
    \    }\n    return n2", "    guard lst.count > 1 else { return nil }\n    let\
    \ sortedLst = lst.sorted()\n    return sortedLst[1]", '    return lst.sorted()[safe:
    1]', "    let array = lst.sorted()\n    var min = array[0]\n    for element in\
    \ array {\n        if min < element {\n            return min\n        }\n   \
    \     min = element\n    }\n    return nil", "    guard lst.count > 1 else { return\
    \ nil }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    if secondSmallest\
    \ < smallest {\n        smallest = secondSmallest\n        secondSmallest = lst[0]\n\
    \    }\n    for element in lst {\n        if element < smallest {\n          \
    \  secondSmallest = smallest\n            smallest = element\n        } else if\
    \ element < secondSmallest {\n            secondSmallest = element\n        }\n\
    \    }\n    return secondSmallest"]
stop_tokens:
- "\n}"
