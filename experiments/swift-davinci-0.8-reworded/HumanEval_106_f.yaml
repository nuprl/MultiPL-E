name: HumanEval_106_f
language: swift
prompt: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
  \ an array of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
  \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1 to\
  \ i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\nfunc\
  \ f(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n:\
  \ 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
  \ 2, 6])"
completions: ["    var values = [Int]()\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            var total = 1\n            for j in 1...i {\n             \
    \   total *= j\n            }\n            values.append(total)\n        } else\
    \ {\n            var total = 0\n            for j in 1...i {\n               \
    \ total += j\n            }\n            values.append(total)\n        }\n   \
    \ }\n    return values", "    var result = [Int]()\n    for i in 1...n {\n   \
    \     if i % 2 == 0 {\n            result.append(factorial(n: i))\n        } else\
    \ {\n            result.append(sum(n: i))\n        }\n    }\n    return result",
  "    return [Int](1...n).map { (num) -> Int in\n        if num % 2 == 0 {\n    \
    \        var s = 1\n            for i in 1...num {\n                s *= i\n \
    \           }\n            return s\n        } else {\n            var s = 0\n\
    \            for i in 1...num {\n                s += i\n            }\n     \
    \       return s\n        }\n    }", "    var output: [Int] = []\n    for index\
    \ in 1...n {\n        if index % 2 == 0 {\n            output.append(getFactorial(of:\
    \ index))\n        } else {\n            output.append(getSum(from: 1, to: index))\n\
    \        }\n    }\n    return output", "    var result = [Int]()\n    for i in\
    \ 1...n {\n        result.append(i.isMultiple(of: 2) ? factorial(i) : sum(i))\n\
    \    }\n    return result", "    var array = [Int]()\n    var mult = 1\n    var\
    \ sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n            mult *=\
    \ i\n            array.append(mult)\n        } else {\n            sum += i\n\
    \            array.append(sum)\n        }\n    }\n    return array", "    var\
    \ result: [Int] = []\n    for i in 1...n {\n        if i % 2 == 0 {\n        \
    \    result.append(i.factorial)\n        } else {\n            result.append(i.sumOfNumbers)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            result.append(factorial(n: i))\n\
    \        } else {\n            result.append(sum(n: i))\n        }\n    }\n  \
    \  return result", "  var output = [Int]()\n  for i in 1...n {\n    if i % 2 ==\
    \ 0 {\n      output.append(factorial(i))\n    } else {\n      output.append(sum(i))\n\
    \    }\n  }\n  return output", "    var result = [Int]()\n    var factorial =\
    \ 1\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n        \
    \    factorial *= i\n            result.append(factorial)\n        } else {\n\
    \            sum += i\n            result.append(sum)\n        }\n    }\n    return\
    \ result", "  var array = [Int]()\n  var sum = 0\n  for i in 1...n {\n    sum\
    \ = 0\n    if i % 2 == 0 {\n      sum = i\n      for j in 1..<i {\n        sum\
    \ *= j\n      }\n    } else {\n      for j in 1...i {\n        sum += j\n    \
    \  }\n    }\n    array.append(sum)\n  }\n  return array", "    var result: [Int]\
    \ = []\n    for number in 1...n {\n        var factorial = 1\n        var sum\
    \ = 0\n        if number % 2 == 0 {\n            for i in 1...number {\n     \
    \           factorial *= i\n            }\n            result.append(factorial)\n\
    \        } else {\n            for i in 1...number {\n                sum += i\n\
    \            }\n            result.append(sum)\n        }\n    }\n    return result",
  "    var array = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n      \
    \      var factorial = 1\n            for j in 1...i {\n                factorial\
    \ *= j\n            }\n            array.append(factorial)\n        } else {\n\
    \            var sum = 0\n            for k in 1...i {\n                sum +=\
    \ k\n            }\n            array.append(sum)\n        }\n    }\n    return\
    \ array", "    var result = [Int]()\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(factorial(n: i))\n        } else {\n        \
    \    result.append(sum(n: i))\n        }\n    }\n    return result", "    var\
    \ arr = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            arr.append(factorial(n:\
    \ i))\n        } else {\n            arr.append(i * (i + 1) / 2)\n        }\n\
    \    }\n    return arr", '  return []', "    var array: [Int] = []\n    for i\
    \ in 1...n {\n        if i % 2 == 0 {\n            var factorial = 1\n       \
    \     for j in 1...i {\n                factorial *= j\n            }\n      \
    \      array.append(factorial)\n        } else {\n            var sum = 0\n  \
    \          for j in 1...i {\n                sum += j\n            }\n       \
    \     array.append(sum)\n        }\n    }\n    return array", "  var result =\
    \ [Int]()\n  if n < 1 {\n    return result\n  }\n  result.append(1)\n  for i in\
    \ 1..<n {\n    if i % 2 == 0 {\n      result.append(factorial(i))\n    } else\
    \ {\n      result.append(result[i - 1] + i)\n    }\n  }\n  return result", '    return
    []', "    var result = [Int]()\n    if n < 1 {\n        return result\n    }\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            var temp = 1\n   \
    \         for j in 1...i {\n                temp *= j\n            }\n       \
    \     result.append(temp)\n        } else {\n            var temp = 0\n      \
    \      for j in 1...i {\n                temp += j\n            }\n          \
    \  result.append(temp)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1...n {\n        result.append(i % 2 == 0 ? (1...i).reduce(1,\
    \ { $0 * $1 }) : (1...i).reduce(0, { $0 + $1 }))\n    }\n    return result", " \
    \   var array = [Int]()\n    for index in 1...n {\n        array.append(getVal(index:\
    \ index))\n    }\n    return array", "    return (1...n).map {\n        $0 % 2\
    \ == 0 ?\n            (1...$0).reduce(1, { $0 * $1 }) :\n            (1...$0).reduce(0,\
    \ { $0 + $1 })\n    }", "    if n <= 0 {\n        return []\n    }\n    var result\
    \ = [Int]()\n    result.append(1)\n    var factorial = 1\n    for i in 1..<n {\n\
    \        if i % 2 == 0 {\n            factorial *= i\n            result.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            result.append(sum)\n      \
    \  }\n    }\n    return result", "    var result: [Int] = []\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            var factorial = 1\n            for j\
    \ in 1...i {\n                factorial *= j\n            }\n            result.append(factorial)\n\
    \        } else {\n            var numberSum = 0\n            for j in 1...i {\n\
    \                numberSum += j\n            }\n            result.append(numberSum)\n\
    \        }\n    }\n    return result", "    var array = [Int]()\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            var factorial = 1\n          \
    \  for j in 1...i {\n                factorial *= j\n            }\n         \
    \   array.append(factorial)\n        } else {\n            var sum = 0\n     \
    \       for j in 1...i {\n                sum += j\n            }\n          \
    \  array.append(sum)\n        }\n    }\n    return array", "    var result = [Int]()\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(Array(1...i).reduce(1,\
    \ *))\n        } else {\n            result.append(Array(1...i).reduce(0, +))\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for index\
    \ in 1...n {\n        if index % 2 == 0 {\n            var factorial = 1\n   \
    \         for i in 1...index {\n                factorial *= i\n            }\n\
    \            result.append(factorial)\n        } else {\n            var sum =\
    \ 0\n            for i in 1...index {\n                sum += i\n            }\n\
    \            result.append(sum)\n        }\n    }\n    return result", "    var\
    \ arrayOfNumbers: [Int] = []\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            arrayOfNumbers.append(factorial(of: i))\n        } else {\n     \
    \       arrayOfNumbers.append(sumOfNumbers(to: i))\n        }\n    }\n    return\
    \ arrayOfNumbers", "    return [Int](1...n).map {\n        $0 % 2 == 0 ? $0.factorial\
    \ : (1...$0).reduce(0, +)\n    }", "    if n == 0 {\n        return []\n    }\n\
    \    var result = [Int]()\n    for index in 1...n {\n        if index % 2 == 0\
    \ {\n            result.append(factorial(index))\n        } else {\n         \
    \   result.append(sumNumbers(index))\n        }\n    }\n    return result", " \
    \   var arr : [Int] = []\n    var temp : Int = 1\n    for i in 1...n {\n     \
    \   if i % 2 == 0 {\n            temp = i\n            for j in 1..<i {\n    \
    \            temp *= j\n            }\n            arr.append(temp)\n        }\n\
    \        else {\n            temp = 0\n            for j in 1...i {\n        \
    \        temp += j\n            }\n            arr.append(temp)\n        }\n \
    \   }\n    return arr", "    guard n > 0 else { return [] }\n    var result =\
    \ [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(factorial(i))\n\
    \        } else {\n            result.append(sumUpTo(i))\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var i = 1\n    while i <= n\
    \ {\n        if i % 2 == 0 {\n            result.append(factorial(i))\n      \
    \  } else {\n            result.append(sum(i))\n        }\n        i += 1\n  \
    \  }\n    return result", "    let array = Array(1...n)\n    return array.map\
    \ { i in\n        if i % 2 == 0 {\n            return factorial(i)\n        }\
    \ else {\n            return sumNumber(i)\n        }\n    }", "    var results\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            results.append(factorial(i))\n\
    \        } else {\n            results.append(sumUpTo(i))\n        }\n    }\n\
    \    return results", "    // write your code here\n    return []", '    return
    (1...n).map { $0 % 2 == 0 ? $0.factorial : $0.sum }', "    var result = [Int]()\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(factorial(n:\
    \ i))\n        } else {\n            result.append(sum(n: i))\n        }\n   \
    \ }\n    return result", "    var result: [Int] = []\n    for i in 1...n {\n \
    \       if i.isMultiple(of: 2) {\n            result.append(factorial(of: i))\n\
    \        } else {\n            result.append(sum(to: i))\n        }\n    }\n \
    \   return result", "    let result: [Int] = Array(1...n).map {\n        $0 %\
    \ 2 == 0 ? Array(1...$0).reduce(1, *) : Array(1...$0).reduce(0, +)\n    }\n  \
    \  return result", "    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(factorial(i))\n        } else {\n  \
    \          result.append(sum(i))\n        }\n    }\n    return result", "    let\
    \ factorialClosure = { (i: Int) -> Int in\n        if i % 2 == 0 {\n         \
    \   var result = 1\n            for j in 1...i {\n                result *= j\n\
    \            }\n            return result\n        } else {\n            var result\
    \ = 0\n            for j in 1...i {\n                result += j\n           \
    \ }\n            return result\n        }\n    }\n    var result = [Int]()\n \
    \   for i in 1...n {\n        result.append(factorialClosure(i))\n    }\n    return\
    \ result", "    // Your code here\n    return []", "    var arr = [Int]()\n  \
    \  for i in 1...n {\n        if i % 2 == 0 {\n            var product = 1\n  \
    \          for j in 1...i {\n                product *= j\n            }\n   \
    \         arr.append(product)\n        } else {\n            var sum = 0\n   \
    \         for j in 1...i {\n                sum += j\n            }\n        \
    \    arr.append(sum)\n        }\n    }\n    return arr", "    return [Int](1...n).map\
    \ { i in\n        return i % 2 == 0 ? (1...i).reduce(1, *) : Array(1...i).reduce(0,\
    \ +)\n    }", "    var factorial = 1\n    var num: [Int] = []\n    var int = 1\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n \
    \           num.append(factorial)\n        } else {\n            num.append(int)\n\
    \            int += i\n        }\n    }\n    return num", "  var result = [Int]()\n\
    \  for i in 1...n {\n    if i % 2 == 0 {\n      result.append(factorial(i))\n\
    \    } else {\n      result.append(sum(i))\n    }\n  }\n  return result", "  \
    \  var result = [Int]()\n    for index in 1...n {\n        if index % 2 == 0 {\n\
    \            result.append(factorial(i: index))\n        } else {\n          \
    \  result.append(sumOfNumbers(n: index))\n        }\n    }\n    return result",
  "    var array = [Int]()\n    for i in 1...n {\n        var x = 1\n        if i\
    \ % 2 == 0 {\n            for j in 1...i {\n                x *= j\n         \
    \   }\n        } else {\n            for j in 1...i {\n                x += j\n\
    \            }\n        }\n        array.append(x)\n    }\n    return array",
  "    var result = [Int]()\n    var factorial = 1\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial *= i\n            result.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            result.append(sum)\n      \
    \  }\n    }\n    return result", "    return (1...n).map {\n        ($0 % 2 ==\
    \ 0) ? factorial(n: $0) : $0.sumUp()\n    }", "    var result: [Int] = []\n  \
    \  for i in 1...n {\n        result.append(i % 2 == 0 ? factorial(num: i) : sumOfNumbers(num:\
    \ i))\n    }\n    return result", "    var result = [Int]()\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            var factorial = 1\n            for j\
    \ in 1...i {\n                factorial *= j\n            }\n            result.append(factorial)\n\
    \        } else {\n            var number = 0\n            for k in 1...i {\n\
    \                number += k\n            }\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var res = [Int]()\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            var fac = 1\n            for j in 1...i\
    \ {\n                fac *= j\n            }\n            res.append(fac)\n  \
    \      } else {\n            var sum = 0\n            for j in 1...i {\n     \
    \           sum += j\n            }\n            res.append(sum)\n        }\n\
    \    }\n    return res", "    var result: [Int] = []\n    for i in 1...n {\n \
    \       result.append(i.isMultiple(of: 2) ? (1...i).reduce(1, { $0 * $1 }) : (1...i).reduce(0,\
    \ { $0 + $1 }))\n    }\n    return result", "    var array = [Int]()\n    for\
    \ index in 1...n {\n        if index % 2 == 0 {\n            array.append(factorial(n:\
    \ index))\n        } else {\n            array.append(sum(n: index))\n       \
    \ }\n    }\n    return array", "    var array: [Int] = []\n    var factorial =\
    \ 1\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n        \
    \    factorial *= i\n            array.append(factorial)\n        } else {\n \
    \           sum += i\n            array.append(sum)\n        }\n    }\n    return\
    \ array", '    return (1...n).map { n in n % 2 == 0 ? n.factorial : n.sum }',
  "    let numbers = Array(1...n)\n    return numbers.map { $0 % 2 == 0 ? $0.factorial\
    \ : numbers.prefix(upTo: $0).reduce(0, +) }", "    var result = [Int]()\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            result.append(i.factorial)\n\
    \        } else {\n            result.append(i.sum)\n        }\n    }\n    return\
    \ result", '    return []', "    var arr = [Int]()\n    for i in 1...n {\n   \
    \     if i % 2 == 0 {\n            arr.append(factorial(i))\n        } else {\n\
    \            arr.append(Array(1...i).reduce(0, +))\n        }\n    }\n    return\
    \ arr", "    return (1...n).map { i in\n        i % 2 == 0 ? (1...i).reduce(1,\
    \ *) : (1...i).reduce(0, +)\n    }", "    if n <= 0 {\n        return []\n   \
    \ }\n    return Array((1...n)).map { $0 % 2 == 0 ? factorial($0) : summation($0)\
    \ }", "    var result = [Int]()\n    if n <= 0 {\n        return result\n    }\n\
    \    result.append(1)\n    if n == 1 {\n        return result\n    }\n    result.append(2)\n\
    \    if n == 2 {\n        return result\n    }\n    var currentValue = 2\n   \
    \ for i in 3...n {\n        currentValue += i - 1\n        if i % 2 == 0 {\n \
    \           var fac = 1\n            for j in 1...i {\n                fac *=\
    \ j\n            }\n            currentValue = fac\n        }\n        result.append(currentValue)\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            var factorial = 1\n            for j in\
    \ 1...i {\n                factorial *= j\n            }\n            result.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            result.append(sum)\n      \
    \  }\n    }\n    return result", '    return [Int](1...n).map { i in i % 2 ==
    0 ? (1...i).reduce(1, *) : (1...i).reduce(0, +) }', "    var data: [Int] = []\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            data.append(i.factorial)\n\
    \        } else {\n            data.append(i.summation)\n        }\n    }\n  \
    \  return data", "    var arr: [Int] = []\n    for i in 1...n {\n        if i\
    \ % 2 == 0 {\n            arr.append(factorial(i))\n        } else {\n       \
    \     arr.append(i)\n        }\n    }\n    return arr", "  var output = [Int]()\n\
    \  for i in 1...n {\n    if i % 2 == 0 {\n      output.append(factorial(i))\n\
    \    } else {\n      output.append(sumOfNumbersFromOneTo(i))\n    }\n  }\n  return\
    \ output", '    return [Int](1...n).map { $0.isMultiple(of: 2) ? factorial(of:
    $0) : sum(from: 1, to: $0) }', "  var result: [Int] = []\n  var n = n\n  while\
    \ n > 0 {\n    n -= 1\n    if n % 2 == 0 {\n      result.append(factorial(n))\n\
    \    } else {\n      result.append(sumNumbers(n))\n    }\n  }\n  return result",
  '    return (1...n).map { n in n.isMultiple(of: 2) ? n.factorial : (1...n).reduce(0,
    +) }', "    if n == 0 {\n        return []\n    }\n    return (1...n).map { i\
    \ in i % 2 == 0 ? factorial(i) : i.sumTo(i) }", "    // write your code here\n\
    \    return [Int]()", "    var result = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            result.append(factorial(x: i))\n        } else\
    \ {\n            result.append(sum(n: i))\n        }\n    }\n    return result",
  "    let array = [Int](1...n)\n    var finalArray = [Int]()\n    for element in\
    \ array {\n        if element % 2 == 0 {\n            finalArray.append(factorial(element))\n\
    \        } else {\n            finalArray.append(array.prefix(element).reduce(0,\
    \ +))\n        }\n    }\n    return finalArray", "    var arr = [Int]()\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            var sum = 1\n           \
    \ for j in 1...i {\n                sum *= j\n            }\n            arr.append(sum)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            arr.append(sum)\n        }\n\
    \    }\n    return arr", "    var factorial = 1\n    var array: [Int] = []\n \
    \   for i in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n  \
    \          array.append(factorial)\n        } else {\n            array.append(i\
    \ * (i + 1) / 2)\n        }\n    }\n    return array", "    var array = [Int]()\n\
    \    var result: Int = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n    \
    \        result = i\n            for j in 1..<i {\n                result *= j\n\
    \            }\n        } else {\n            result = 0\n            for j in\
    \ 1...i {\n                result += j\n            }\n        }\n        array.append(result)\n\
    \    }\n    return array", "    var result = [Int]()\n    for i in 1...n {\n \
    \       if i % 2 == 0 {\n            result.append(factorial(n: i))\n        }\
    \ else {\n            result.append(sumOfNumbersFromOneToN(n: i))\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(factorial(i))\n        } else\
    \ {\n            result.append(sum(from: 1, to: i))\n        }\n    }\n    return\
    \ result", "    var array = [Int]()\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            array.append(factorial(i))\n        } else {\n            array.append(sumNumberFromOneTo(i))\n\
    \        }\n    }\n    return array", "    var result: [Int] = []\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            result.append(i.factorial)\n \
    \       } else {\n            result.append(i.sumOfNumbers)\n        }\n    }\n\
    \    return result", "  var result = [Int]()\n  var i = 1\n  while i <= n {\n\
    \    result.append(i.isMultiple(of: 2) ? factorial(of: i) : sumOfNumbers(from:\
    \ 1, to: i))\n    i += 1\n  }\n  return result", "    var res = [Int]()\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            var factorial = 1\n     \
    \       for j in 1...i {\n                factorial *= j\n            }\n    \
    \        res.append(factorial)\n        } else {\n            var sum = 0\n  \
    \          for j in 1...i {\n                sum += j\n            }\n       \
    \     res.append(sum)\n        }\n    }\n    return res", '    return [Int](1...n).map
    { n in n % 2 == 0 ? factorial(n) : n.sequence() }', "    var output: [Int] = []\n\
    \    for i in 1...n {\n        if i%2 == 0 {\n            var factorial = 1\n\
    \            for j in 1...i {\n                factorial *= j\n            }\n\
    \            output.append(factorial)\n        } else {\n            var sum =\
    \ 0\n            for j in 1...i {\n                sum += j\n            }\n \
    \           output.append(sum)\n        }\n    }\n    return output", "  return\
    \ [Int](1...n).map { number in\n    if number % 2 == 0 {\n      return (1...number).reduce(1,\
    \ *)\n    } else {\n      return (1...number).reduce(0, +)\n    }\n  }", "   \
    \ var result: [Int] = []\n    var factorial = 1\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorial *= i\n            result.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            result.append(sum)\n      \
    \  }\n    }\n    return result", "    guard n > 0 else {\n        return []\n\
    \    }\n    var result = [Int]()\n    var sum = 0\n    for i in 1...n {\n    \
    \    sum += i\n        if i % 2 == 0 {\n            result.append(factorial(number:\
    \ i))\n        } else {\n            result.append(sum)\n        }\n    }\n  \
    \  return result", "    return (1...n).map {\n        $0 % 2 == 0 ? fatorial($0)\
    \ : $0.sum\n    }", "    var array = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            var num = 1\n            for j in 1...i {\n      \
    \          num *= j\n            }\n            array.append(num)\n        } else\
    \ {\n            var num = 0\n            for j in 1...i {\n                num\
    \ += j\n            }\n            array.append(num)\n        }\n    }\n    return\
    \ array", "    var arr = [Int]()\n    for i in 1...n {\n        if i % 2 == 0\
    \ {\n            arr.append(factorial(i))\n        } else {\n            arr.append(sum(i))\n\
    \        }\n    }\n    return arr", "    var result: [Int] = []\n    for i in\
    \ 1...n {\n        var j = i\n        var sum = 0\n        while j > 0 {\n   \
    \         sum += j\n            j -= 1\n        }\n        if i % 2 == 0 {\n \
    \           result.append(factorial(n: i))\n        } else {\n            result.append(sum)\n\
    \        }\n    }\n    return result", "    var arr = [Int]()\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            var ans = 1\n            for j in 1...i\
    \ {\n                ans *= j\n            }\n            arr.append(ans)\n  \
    \      } else {\n            var ans = 0\n            for j in 1...i {\n     \
    \           ans += j\n            }\n            arr.append(ans)\n        }\n\
    \    }\n    return arr", "    var result = [Int]()\n    for index in 1...n {\n\
    \        if index % 2 == 0 {\n            result.append(index.factorial)\n   \
    \     } else {\n            result.append(index.sumToN)\n        }\n    }\n  \
    \  return result", '    return []', "    var result = [Int]()\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            var factorial = 1\n            for n\
    \ in 1...i {\n                factorial *= n\n            }\n            result.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for n in 1...i {\n   \
    \             sum += n\n            }\n            result.append(sum)\n      \
    \  }\n    }\n    return result", "    return (1...n).map { element in\n      \
    \  element % 2 == 0 ? (1...element).reduce(1, *) : (1...element).reduce(0, +)\n\
    \    }", "    var result = [Int]()\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(factorial(n: i))\n        } else {\n        \
    \    result.append(sum(n: i))\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n          \
    \  result.append(i.factorial)\n        } else {\n            result.append(i.sum)\n\
    \        }\n    }\n    return result", "    return (1...n).map { number in\n \
    \       if number % 2 == 0 {\n            return fatorial(of: number)\n      \
    \  } else {\n            return (1...number).reduce(0, +)\n        }\n    }",
  "    var result: [Int] = []\n    var sum: Int = 0\n    for num in 1...n {\n    \
    \    sum = 1\n        for index in 1...num {\n            sum *= index\n     \
    \   }\n        result.append(sum)\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var factorial = 1\n    var sum = 0\n    for i in 1...n {\n \
    \       if i % 2 == 0 {\n            factorial *= i\n            result.append(factorial)\n\
    \        } else {\n            sum += i\n            result.append(sum)\n    \
    \    }\n    }\n    return result", '    return []', '    return 0', "    var result\
    \ = [Int]()\n    var sum = 0\n    for index in 1...n {\n        sum += index\n\
    \        if index % 2 == 0 {\n            result.append(factorial(of: index))\n\
    \        } else {\n            result.append(sum)\n        }\n    }\n    return\
    \ result", "    var array = [Int]()\n    var i = 1\n    while array.count < n\
    \ {\n        if i % 2 == 0 {\n            array.append(factorial(i))\n       \
    \ } else {\n            array.append(i * (i + 1) / 2)\n        }\n        i +=\
    \ 1\n    }\n    return array", "  var arr: [Int] = []\n  for i in 1...n {\n  \
    \  if i % 2 == 0 {\n      var product = 1\n      for x in 1...i {\n        product\
    \ *= x\n      }\n      arr.append(product)\n    } else {\n      var sum = 0\n\
    \      for x in 1...i {\n        sum += x\n      }\n      arr.append(sum)\n  \
    \  }\n  }\n  return arr", "    var fact: (Int) -> Int = { n in\n        var result\
    \ = 1\n        for i in 1...n {\n            result *= i\n        }\n        return\
    \ result\n    }\n    var sum: (Int) -> Int = { n in\n        var result = 0\n\
    \        for i in 1...n {\n            result += i\n        }\n        return\
    \ result\n    }\n    var array = [Int]()\n    for i in 1...n {\n        if i %\
    \ 2 == 0 {\n            array.append(fact(i))\n        } else {\n            array.append(sum(i))\n\
    \        }\n    }\n    return array", "    var result: [Int] = []\n    for i in\
    \ 1...n {\n        result.append(i % 2 == 0 ? factorial(i) : sumFromOneTo(i))\n\
    \    }\n    return result", "    var result: [Int] = []\n    var factorial = 1\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n \
    \           result.append(factorial)\n        } else {\n            result.append(i*(i+1)/2)\n\
    \        }\n    }\n    return result", "    // TO DO\n    let array = (1...n).map\
    \ { (index) -> Int in\n        return index % 2 == 0 ? getFactorial(index) : getSumTo(index)\n\
    \    }\n    return array", "    var array = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            array.append(factorial(of: i))\n        }\
    \ else {\n            array.append(sumNumbers(to: i))\n        }\n    }\n    return\
    \ array", "    return [Int](1...n).map { i in\n        i % 2 == 0 ? (1...i).reduce(1,\
    \ *) : (1...i).reduce(0, +)\n    }", "    return [Int](1...n).map { i in\n   \
    \     return i % 2 == 0 ? factorial(i) : sum(i)\n    }", "    return [Int](1...n).map\
    \ {\n        $0 % 2 == 0 ? (1...$0).reduce(1, *) : Array(1...$0).reduce(0, +)\n\
    \    }", "    var index = 0\n    var arr = [Int]()\n    while index < n {\n  \
    \      index += 1\n        if index % 2 == 0 {\n            var factorial = 1\n\
    \            for i in 1...index {\n                factorial *= i\n          \
    \  }\n            arr.append(factorial)\n        } else {\n            var sum\
    \ = 0\n            for i in 1...index {\n                sum += i\n          \
    \  }\n            arr.append(sum)\n        }\n    }\n    return arr", "    if\
    \ n < 1 {\n        return []\n    }\n    var results = [Int]()\n    results.append(1)\n\
    \    for i in 1..<n {\n        var result = 0\n        for j in 1...i {\n    \
    \        result += j\n        }\n        results.append(result)\n    }\n    return\
    \ results", "    // Write your code here\n    let result = (1...n).map { (i) ->\
    \ Int in\n        if i % 2 == 0 {\n            return i.factorial()\n        }\
    \ else {\n            return i.triangular()\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for index in 1...n {\n        if index % 2 == 0\
    \ {\n            var sum = 1\n            for j in 1...index {\n             \
    \   sum *= j\n            }\n            result.append(sum)\n        } else {\n\
    \            var sum = 0\n            for j in 1...index {\n                sum\
    \ += j\n            }\n            result.append(sum)\n        }\n    }\n    return\
    \ result", "  var result: [Int] = []\n  for i in 1...n {\n    if i % 2 == 0 {\n\
    \      var factorial = 1\n      for k in 1...i {\n        factorial *= k\n   \
    \   }\n      result.append(factorial)\n    } else {\n      var sum = 0\n     \
    \ for k in 1...i {\n        sum += k\n      }\n      result.append(sum)\n    }\n\
    \  }\n  return result", '    return Array(1...n).map{i in i % 2 == 0 ? Array(1...i).reduce(1,
    *) : Array(1...i).reduce(0, +)}', '    return []', '    return (1...n).map { $0
    % 2 == 0 ? $0.factorial : $0.sum() }', "    var arr = [Int]()\n    var i = 1\n\
    \    while arr.count < n {\n        if i % 2 == 0 {\n            arr.append(factorial(i))\n\
    \        } else {\n            arr.append(sumof(i))\n        }\n        i += 1\n\
    \    }\n    return arr", "    let numbers = Array(1...n)\n    return numbers.map\
    \ { $0 % 2 == 0 ? (1...$0).reduce(1, *) : (1...$0).reduce(0, +) }", "    var arr\
    \ = [Int]()\n    var fact = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            fact = 1\n            for j in 1...i {\n                fact *= j\n\
    \            }\n            arr.append(fact)\n        } else {\n            arr.append(i\
    \ * (i + 1) / 2)\n        }\n    }\n    return arr", "    var array : [Int] =\
    \ []\n    if n == 0 {\n        return array\n    }\n    for i in 1...n {\n   \
    \     if i % 2 == 0 {\n            var mult : Int = 1\n            for j in 1...i\
    \ {\n                mult *= j\n            }\n            array.append(mult)\n\
    \        } else {\n            var sum : Int = 0\n            for k in 1...i {\n\
    \                sum += k\n            }\n            array.append(sum)\n    \
    \    }\n    }\n    return array", "    var result = [Int]()\n    for i in 1...n\
    \ {\n        result.append(i % 2 == 0 ? factorial(of: i) : sum(of: i))\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in 1...n {\n     \
    \   if i % 2 == 0 {\n            result.append(factorial(n: i))\n        } else\
    \ {\n            result.append(sum(n: i))\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n     \
    \       var factorial = 1\n            for x in 1...i {\n                factorial\
    \ *= x\n            }\n            result.append(factorial)\n        } else {\n\
    \            var sum = 0\n            for x in 1...i {\n                sum +=\
    \ x\n            }\n            result.append(sum)\n        }\n    }\n    return\
    \ result", '    return []', '    return []', "    var result = [Int]()\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            result.append(factorial(i))\n\
    \        } else {\n            result.append(sumToN(i))\n        }\n    }\n  \
    \  return result", "    var result: [Int] = []\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            result.append(Int(factorial(UInt(i))))\n      \
    \  } else {\n            result.append(i * (i + 1) / 2)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    for index in 1...n {\n     \
    \   result.append(index.isMultiple(of: 2) ? factorial(n: index) : sum(n: index))\n\
    \    }\n    return result", "    // Write your solution here\n    return [Int]()",
  "    var arr = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n        \
    \    arr.append(factorial(i))\n        } else {\n            arr.append(sumOfNumbers(i))\n\
    \        }\n    }\n    return arr", "    var arr = [Int]()\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            var fac = 1\n            for j in 1...i\
    \ {\n                fac *= j\n            }\n            arr.append(fac)\n  \
    \      } else {\n            var sum = 0\n            for j in 1...i {\n     \
    \           sum += j\n            }\n            arr.append(sum)\n        }\n\
    \    }\n    return arr", "    var resultArray: [Int] = []\n    for number in 1...n\
    \ {\n        resultArray.append(number % 2 == 0 ? factorial(number: number) :\
    \ sum(to: number))\n    }\n    return resultArray", "    var arr = [Int]()\n \
    \   for i in 1...n {\n        if i % 2 == 0 {\n            arr.append(factorial(n:\
    \ i))\n        } else {\n            arr.append(sum(n: i))\n        }\n    }\n\
    \    return arr", "    var array = [Int]()\n    for i in 1...n {\n        if i\
    \ % 2 == 0 {\n            array.append(factorial(i))\n        } else {\n     \
    \       array.append(sumOfNumbersFrom1To(i))\n        }\n    }\n    return array",
  "    if n == 0 {\n        return []\n    }\n    let arr = Array(1...n)\n    return\
    \ arr.map { $0 % 2 == 0 ? (1...$0).reduce(1, *) : (1...$0).reduce(0, +) }", " \
    \   var result = [Int]()\n    var factorial = 1\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorial *= i\n            result.append(factorial)\n\
    \        } else {\n            result.append(i * (i + 1) / 2)\n        }\n   \
    \ }\n    return result", "    var result: [Int] = []\n    for i in 1...n {\n \
    \       if i % 2 == 0 {\n            var sum = 1\n            for j in 1...i {\n\
    \                sum *= j\n            }\n            result.append(sum)\n   \
    \     } else {\n            var sum = 0\n            for j in 1...i {\n      \
    \          sum += j\n            }\n            result.append(sum)\n        }\n\
    \    }\n    return result", "    let items = (1...n).map {\n        $0 % 2 ==\
    \ 0 ?\n            (1...$0).reduce(1, *) :\n            (1...$0).reduce(0, +)\n\
    \    }\n    return items", '    return [Int](1...n).map { n in n % 2 == 0 ? n.factorial
    : n.sum }', "    var result = [Int]()\n    for i in 1...n {\n        if i % 2\
    \ == 0 {\n            result.append(factorial(i))\n        } else {\n        \
    \    result.append(sumOfNumbers(i))\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    guard n > 0 else {\n        return result\n    }\n\
    \    result.append(1)\n    for i in 1..<n {\n        if i % 2 == 0 {\n       \
    \     var sum = 1\n            for j in 1...i {\n                sum *= j\n  \
    \          }\n            result.append(sum)\n        } else {\n            var\
    \ sum = 0\n            for j in 1...i {\n                sum += j\n          \
    \  }\n            result.append(sum)\n        }\n    }\n    return result", '    return
    []', '    return Array(1...n).map { $0 % 2 == 0 ? $0.factorial : $0.sumOfNumbers
    }', '    return []', "    \n    var a = [Int]()\n    \n    for i in 1...n {\n\
    \        var factorial = 1\n        var sum = 0\n        if i % 2 == 0 {\n   \
    \         for j in 1...i {\n                factorial *= j\n            }\n  \
    \          a.append(factorial)\n        } else {\n            for l in 1...i {\n\
    \                sum += l\n            }\n            a.append(sum)\n        }\n\
    \    }\n    return a", "    var newArr: [Int] = []\n    for i in 1...n {\n   \
    \     if i % 2 == 0 {\n            newArr.append(factorial(i))\n        } else\
    \ {\n            newArr.append(sum(i))\n        }\n    }\n    return newArr",
  "    var array: [Int] = []\n    for i in 1 ... n {\n        if i % 2 == 0 {\n  \
    \          var factorial = 1\n            for j in 1 ... i {\n               \
    \ factorial *= j\n            }\n            array.append(factorial)\n       \
    \ } else {\n            var sum = 0\n            for j in 1 ... i {\n        \
    \        sum += j\n            }\n            array.append(sum)\n        }\n \
    \   }\n    return array", "    // write your code here.\n    var temp = [Int]()\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            var total = 1\n  \
    \          for j in 1...i {\n                total *= j\n            }\n     \
    \       temp.append(total)\n        } else {\n            var total = 0\n    \
    \        for j in 1...i {\n                total += j\n            }\n       \
    \     temp.append(total)\n        }\n    }\n    return temp", "    var array =\
    \ [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            var factorial\
    \ = 1\n            for k in 1...i {\n                factorial *= k\n        \
    \    }\n            array.append(factorial)\n        } else {\n            var\
    \ sum = 0\n            for j in 1...i {\n                sum += j\n          \
    \  }\n            array.append(sum)\n        }\n    }\n    return array", "  \
    \  if n == 0 {\n        return []\n    }\n    var array = f(n: n - 1)\n    array.append(n.isMultiple(of:\
    \ 2) ? n.factorial() : n.sumOfNumbers())\n    return array", "    var result:\
    \ [Int] = []\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(factorial(i))\n\
    \        } else {\n            result.append(sum(i))\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in 1...n {\n        result.append(i.isMultiple(of:\
    \ 2) ? factorial(of: i) : i * (i + 1) / 2)\n    }\n    return result", "    return\
    \ Array(1...n).map {\n        $0 % 2 == 0 ?\n            (1...$0).reduce(1, {\
    \ $0 * $1 }) :\n            (1...$0).reduce(0, { $0 + $1 })\n    }", "  let arr\
    \ = (1...n).map { $0 % 2 == 0 ? $0.factorial : $0.triangle }\n  return arr", " \
    \   var outputArray: [Int] = []\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            var j = i\n            var factorial: Int = 1\n            while\
    \ j > 0 {\n                factorial *= j\n                j -= 1\n          \
    \  }\n            outputArray.append(factorial)\n        } else {\n          \
    \  var sum: Int = 0\n            for j in 1...i {\n                sum += j\n\
    \            }\n            outputArray.append(sum)\n        }\n    }\n    return\
    \ outputArray", "    var factorial = 1\n    var arr = [Int]()\n    for i in 1...n\
    \ {\n        if i % 2 == 0 {\n            factorial *= i\n            arr.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            arr.append(sum)\n        }\n\
    \    }\n    return arr", "  var factorial = 1\n  var array = [Int]()\n  for i\
    \ in 1...n {\n    if i % 2 == 0 {\n      factorial *= i\n      array.append(factorial)\n\
    \    } else {\n      array.append(i * (i + 1) / 2)\n    }\n  }\n  return array",
  "    var sequence = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n   \
    \         var counter = 1\n            for j in 1...i {\n                counter\
    \ *= j\n            }\n            sequence.append(counter)\n        } else {\n\
    \            var counter = 0\n            for j in 1...i {\n                counter\
    \ += j\n            }\n            sequence.append(counter)\n        }\n    }\n\
    \    return sequence", "    var result: [Int] = []\n    for i in 1...n {\n   \
    \     if i % 2 == 0 {\n            result.append(factorial(i))\n        } else\
    \ {\n            result.append(sum(n: i))\n        }\n    }\n    return result",
  "    return (1...n).map { number in\n        (1...number).reduce(number % 2 == 0\
    \ ? 1 : 0) {\n            (number % 2 == 0 ? $0 * $1 : $0 + $1)\n        }\n \
    \   }", '    return []', "    return [Int](1...n).map { (number) -> Int in\n \
    \       if number % 2 == 0 {\n            var factorial = 1\n            for i\
    \ in 1...number {\n                factorial *= i\n            }\n           \
    \ return factorial\n        } else {\n            return (1...number).reduce(0,\
    \ +)\n        }\n    }", "    var result: [Int] = []\n    for i in 1...n {\n \
    \       if i % 2 == 0 {\n            result.append(factorial(n: i))\n        }\
    \ else {\n            result.append(sum(n: i))\n        }\n    }\n    return result",
  "    return [Int](1...n).map({ (value) -> Int in\n        if value % 2 == 0 {\n\
    \            return (1...value).reduce(1, { $0 * $1 })\n        } else {\n   \
    \         return (1...value).reduce(0, { $0 + $1 })\n        }\n    })", "  var\
    \ result = [Int]()\n  for i in 1...n {\n    if i % 2 == 0 {\n      result.append(factorial(n:\
    \ i))\n    } else {\n      result.append(sumOfNumbers(n: i))\n    }\n  }\n  return\
    \ result", '    return []', "    var result = [Int]()\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            var f = 1\n            for j in 1...i {\n\
    \                f *= j\n            }\n            result.append(f)\n       \
    \ } else {\n            var s = 0\n            for j in 1...i {\n            \
    \    s += j\n            }\n            result.append(s)\n        }\n    }\n \
    \   return result", "    var array: [Int] = []\n    var sum: Int = 0\n    var\
    \ mult: Int = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n            mult\
    \ *= i\n            array.append(mult)\n        } else {\n            sum += i\n\
    \            array.append(sum)\n        }\n    }\n    return array", "    var\
    \ result = [Int]()\n    for i in 1..<n+1 {\n        if i%2 == 0 {\n          \
    \  result.append(factorial(n: i))\n        } else {\n            result.append(sumFromOneTo(n:\
    \ i))\n        }\n    }\n    return result", "    \n    var result = [Int]()\n\
    \    \n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(factorial(i))\n\
    \        } else {\n            result.append(i)\n        }\n    }\n    \n    return\
    \ result", "    var arr = [Int]()\n    for i in 1...n {\n        if i % 2 == 0\
    \ {\n            var multi = 1\n            for j in 1...i {\n               \
    \ multi *= j\n            }\n            arr.append(multi)\n        } else {\n\
    \            var sum = 0\n            for j in 1...i {\n                sum +=\
    \ j\n            }\n            arr.append(sum)\n        }\n    }\n    return\
    \ arr", "    var fList = [Int]()\n    for i in 1...n {\n        if i % 2 == 0\
    \ {\n            fList.append(factorial(n: i))\n        } else {\n           \
    \ fList.append(sum(n: i))\n        }\n    }\n    return fList", "    var array\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            array.append(i.factorial)\n\
    \        } else {\n            array.append(i.sum)\n        }\n    }\n    return\
    \ array", "    var result = [Int]()\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(factorial(i))\n        } else {\n           \
    \ result.append(sum(n: i))\n        }\n    }\n    return result", '    return
    0', "    var result = [Int]()\n    for i in 1...n {\n        let num = factorial(i)\
    \ ?? i * (i + 1) / 2\n        result.append(num)\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in 1...n {\n        result.append(i.isMultiple(of:\
    \ 2) ? factorial(num: i) : sum(num: i))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var i = 1\n    while i <= n {\n        var factorial = 1\n  \
    \      var j = 1\n        var sum = 0\n        if i % 2 == 0 {\n            while\
    \ j <= i {\n                factorial *= j\n                j += 1\n         \
    \   }\n            result.append(factorial)\n        } else {\n            while\
    \ j <= i {\n                sum += j\n                j += 1\n            }\n\
    \            result.append(sum)\n        }\n        i += 1\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 1...n {\n        if i.isMultiple(of:\
    \ 2) {\n            result.append(Int(factorial(n: Double(i))))\n        } else\
    \ {\n            result.append(i)\n        }\n    }\n    return result", "   \
    \ return [Int](1...n).map { (index) -> Int in\n        if index % 2 == 0 {\n \
    \           var factorial = 1\n            for i in 1...index {\n            \
    \    factorial *= i\n            }\n            return factorial\n        } else\
    \ {\n            return (1...index).reduce(0, +)\n        }\n    }", "    var\
    \ arr = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            arr.append(factorial(n:\
    \ i))\n        } else {\n            arr.append(sumNumber(n: i))\n        }\n\
    \    }\n    return arr", "    var array = [Int]()\n    for i in 1...n {\n    \
    \    array.append(i % 2 == 0 ? factorial(i) : numberSum(i))\n    }\n    return\
    \ array", "    var output: [Int] = []\n    for i in 1...n {\n        if i % 2\
    \ == 0 {\n            output.append(factorial(i))\n        } else {\n        \
    \    output.append(summation(i))\n        }\n    }\n    return output", "    //\
    \ your code here\n    return []", "    var num = n\n    var array = [Int]()\n\
    \    for _ in 1...num {\n        if num % 2 == 0 {\n            var sum = 1\n\
    \            for i in 1...num {\n                sum *= i\n            }\n   \
    \         array.append(sum)\n        } else {\n            var sum = 0\n     \
    \       for i in 1...num {\n                sum += i\n            }\n        \
    \    array.append(sum)\n        }\n        num -= 1\n    }\n    return array",
  "    var array = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n      \
    \      var factorial = 1\n            for k in 1...i {\n                factorial\
    \ *= k\n            }\n            array.append(factorial)\n        } else {\n\
    \            var sum = 0\n            for k in 1...i {\n                sum +=\
    \ k\n            }\n            array.append(sum)\n        }\n    }\n    return\
    \ array", "    var result = [Int]()\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            var factorial = 1\n            for j in 1...i {\n         \
    \       factorial *= j\n            }\n            result.append(factorial)\n\
    \        } else {\n            var sum = 0\n            for j in 1...i {\n   \
    \             sum += j\n            }\n            result.append(sum)\n      \
    \  }\n    }\n    return result", "    return 0..<n\n        .map { $0 + 1 }\n\
    \        .map { (idx: Int) -> Int in\n            if idx % 2 == 0 {\n        \
    \        return factorial(of: idx)\n            } else {\n                return\
    \ (1...idx).reduce(0, +)\n            }\n        }", "  var array = [Int]()\n\
    \  for i in 1...n {\n    if i % 2 == 0 {\n      var factorial = 1\n      for j\
    \ in 1...i {\n        factorial *= j\n      }\n      array.append(factorial)\n\
    \    } else {\n      var sum = 0\n      for j in 1...i {\n        sum += j\n \
    \     }\n      array.append(sum)\n    }\n  }\n  return array"]
stop_tokens:
- "\n}"
