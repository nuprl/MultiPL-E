language: swift
name: HumanEval_47_median
results:
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        let center = l.count / 2\n        return Double(l[center - 1]\
    \ + l[center]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // TODO: implement median\n    \n    //\
    \ We need to sort the array first\n    let sorted = insertionSort(array: l)\n\
    \    \n    // We need to check if we are looking at an even or odd number of elements\n\
    \    let count = sorted.count\n    let middle = count / 2\n    \n    if count\
    \ % 2 == 0 {\n        // If we have an even number of elements, we need to find\
    \ the middle two elements, then find the average of the two.\n        let firstMiddle\
    \ = sorted[middle]\n        let secondMiddle = sorted[middle - 1]\n        return\
    \ Double(firstMiddle + secondMiddle) / 2\n    } else {\n        // If we have\
    \ an odd number of elements, we need to find the middle element and return it\n\
    \        return Double(sorted[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnjg9yy4r.swift:11:18: error: cannot find 'insertionSort' in scope\n\
    \    let sorted = insertionSort(array: l)\n                 ^~~~~~~~~~~~~\n/tmp/tmpnjg9yy4r.swift:21:16:\
    \ error: value of optional type 'Double?' must be unwrapped to a value of type\
    \ 'Double'\n        return Double(firstMiddle + secondMiddle) / 2\n          \
    \     ^\n/tmp/tmpnjg9yy4r.swift:21:16: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n        return Double(firstMiddle\
    \ + secondMiddle) / 2\n               ^\n               (                    \
    \              ?? <#default value#>)\n/tmp/tmpnjg9yy4r.swift:21:16: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        return\
    \ Double(firstMiddle + secondMiddle) / 2\n               ^\n                 \
    \                                !\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let half =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[half\
    \ - 1] + sorted[half]) / 2\n    } else {\n        return Double(sorted[half])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let l_ = l.sorted()\n    let mid = l_.count\
    \ / 2\n    if l_.count % 2 == 0 {\n        return Double(l_[mid - 1] + l_[mid])\
    \ / 2\n    } else {\n        return Double(l_[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let middle = (l.count - 1) / 2\n    return\
    \ Double(l[middle])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpyp51fz1d/tmpyp51fz1d.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1e9d48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1e9a3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1e9a3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1e9a3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyp51fz1d                        0x000055c65d539471 <unavailable> + 5233

    5    libc.so.6                          0x00002ab1e9f34460 __libc_start_main +
    245

    6    tmpyp51fz1d                        0x000055c65d5390b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let l: [Double] = l.map({ Double($0) })\n\
    \    return median(l: l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpelqc0tgp.swift:9:22: error: cannot convert value of type '[Double]'\
    \ to expected argument type '[Int]'\n    return median(l: l)\n               \
    \      ^\n/tmp/tmpelqc0tgp.swift:9:22: note: arguments to generic parameter 'Element'\
    \ ('Double' and 'Int') are expected to be equal\n    return median(l: l)\n   \
    \                  ^\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    var tmpList =\
    \ l\n    tmpList.sort()\n    if count % 2 == 0 {\n        let a = tmpList[count\
    \ / 2 - 1]\n        let b = tmpList[count / 2]\n        return Double(a + b) /\
    \ 2\n    } else {\n        return Double(tmpList[count / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        let left = sorted[sorted.count / 2 - 1]\n        let right\
    \ = sorted[sorted.count / 2]\n        return Double(left + right) / 2\n    } else\
    \ {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return (sorted(l)[(l.count - 1) / 2] +\
    \ sorted(l)[l.count / 2]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3ye7h3q_.swift:8:13: error: cannot find 'sorted' in scope\n   \
    \ return (sorted(l)[(l.count - 1) / 2] + sorted(l)[l.count / 2]) / 2.0\n     \
    \       ^~~~~~\n/tmp/tmp3ye7h3q_.swift:8:44: error: cannot find 'sorted' in scope\n\
    \    return (sorted(l)[(l.count - 1) / 2] + sorted(l)[l.count / 2]) / 2.0\n  \
    \                                         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return average(l: l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkxj9xj2r.swift:8:12: error: cannot find 'average' in scope\n  \
    \  return average(l: l)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // Don't change the code below.\n    let\
    \ a = l.sorted()\n    return a.count % 2 == 0 ? Double(a[a.count / 2] + a[a.count\
    \ / 2 - 1]) / 2 : Double(a[a.count / 2])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let index = (l.count - 1) / 2\n    return\
    \ Double(l[index])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_25uttto/tmp_25uttto.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4915c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb460cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb460c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb460b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_25uttto                        0x0000562a7cd82471 <unavailable> + 5233

    5    libc.so.6                          0x00002aafb4b01460 __libc_start_main +
    245

    6    tmp_25uttto                        0x0000562a7cd820b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let n\
    \ = sortedList.count\n    let medianIndex = n / 2\n    if n % 2 == 0 {\n     \
    \   let medianLeft = Double(sortedList[medianIndex - 1])\n        let medianRight\
    \ = Double(sortedList[medianIndex])\n        return (medianLeft + medianRight)\
    \ / 2\n    } else {\n        return Double(sortedList[medianIndex])\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let lSorted = l.sorted()\n    let totalCount\
    \ = lSorted.count\n    let halfCount = totalCount / 2\n    if totalCount % 2 ==\
    \ 0 {\n        return Double(lSorted[halfCount - 1] + lSorted[halfCount]) / 2\n\
    \    } else {\n        return Double(lSorted[halfCount])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n\
    \    let halfOdd = n % 2 == 1\n    if halfOdd {\n        return Double(l[mid])\n\
    \    } else {\n        return Double(l[mid - 1] + l[mid]) / 2\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpuncyu_fc/tmpuncyu_fc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134e9cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134e6c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134e6c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134e6c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuncyu_fc                        0x00005598433ff471 <unavailable> + 5233

    5    libc.so.6                          0x00002b134ebba460 __libc_start_main +
    245

    6    tmpuncyu_fc                        0x00005598433ff0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let m = l.count / 2\n    let sortedArray\
    \ = l.sorted()\n    return l.count % 2 == 0 ?\n        Double(sortedArray[m -\
    \ 1] + sortedArray[m]) / 2 :\n        Double(sortedArray[m])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var list = l\n    list.sort()\n    if list.count\
    \ % 2 == 0 {\n        return Double(list[list.count / 2] + list[list.count / 2\
    \ - 1]) / 2\n    } else {\n        return Double(list[list.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    \n    // if length is odd, return middle\
    \ number\n    // if length is even, return average of two middle numbers\n   \
    \ \n    var length = l.count\n    var median: Double = 0\n    \n    // sort the\
    \ array\n    var sortedArray = l.sorted()\n    \n    if length % 2 == 0 {\n  \
    \      let firstMid = sortedArray[length / 2 - 1]\n        let secondMid = sortedArray[length\
    \ / 2]\n        median = Double(firstMid + secondMid) / 2\n    } else {\n    \
    \    median = Double(sortedArray[length / 2])\n    }\n    \n    return median\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return Double(l.sorted()[l.count / 2])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpjjl64s5m/tmpjjl64s5m.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1740f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1740c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1740c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1740c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjl64s5m                        0x000055a9fe3435ed <unavailable> + 5613

    5    libc.so.6                          0x00002b174111e460 __libc_start_main +
    245

    6    tmpjjl64s5m                        0x000055a9fe343149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let length = l.count\n    if length % 2\
    \ == 0 {\n        return Double(l[length / 2] + l[length / 2 - 1]) / 2\n    }\
    \ else {\n        return Double(l[length / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmptv2kdgcl/tmptv2kdgcl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6432822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6432519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6432519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64325187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptv2kdgcl                        0x000055e4f8ee4471 <unavailable> + 5233

    5    libc.so.6                          0x00002b6432a0e460 __libc_start_main +
    245

    6    tmptv2kdgcl                        0x000055e4f8ee40b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    let mid = l.count / 2\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return Double(l[mid] + l[mid-1])\
    \ / 2\n    } else {\n        return Double(l[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    return l.sorted()[l.count\
    \ / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgduu0x_a.swift:9:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.sorted()[l.count / 2]\n   \
    \        ~~~~~~~~~~^~~~~~~~~~~~~\n           Double(                )\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    guard !l.isEmpty else {\n        return\
    \ 0\n    }\n    let length = l.count\n    let middle = length / 2\n    if length\
    \ % 2 == 0 {\n        return Double(l[middle - 1] + l[middle]) / 2\n    } else\
    \ {\n        return Double(l[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcweqmce6/tmpcweqmce6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7b6cefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7b69e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7b69e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7b69e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcweqmce6                        0x0000564be3ac5501 <unavailable> + 5377

    5    libc.so.6                          0x00002ba7b6edb460 __libc_start_main +
    245

    6    tmpcweqmce6                        0x0000564be3ac5149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        let index1 = sorted.count / 2\n        let index2 = index1\
    \ - 1\n        return Double(sorted[index1] + sorted[index2]) / 2\n    } else\
    \ {\n        let index = (sorted.count - 1) / 2\n        return Double(sorted[index])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let l2 =\
    \ sortedL.count\n    let mid = l2 / 2\n    if l2 % 2 == 0 {\n        let medianEven\
    \ = Double(sortedL[mid - 1] + sortedL[mid]) / 2\n        return medianEven\n \
    \   } else {\n        let medianOdd = Double(sortedL[mid])\n        return medianOdd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    return Double(sorted[l.count\
    \ / 2] + sorted[(l.count - 1) / 2]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let medianIndex = Int(floor(Double(l.count)\
    \ / 2.0))\n    let sortedList = l.sorted()\n    if l.count % 2 == 0 {\n      \
    \  return (Double(sortedList[medianIndex - 1]) + Double(sortedList[medianIndex]))\
    \ / 2.0\n    } else {\n        return Double(sortedList[medianIndex])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd25y6kn9.swift:8:27: error: cannot find 'floor' in scope\n    let\
    \ medianIndex = Int(floor(Double(l.count) / 2.0))\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  let sorted = l.sorted()\n  let mid = sorted.count\
    \ / 2\n  return Double(sorted[mid] + sorted[mid - 1]) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmprvp9ebsv/tmprvp9ebsv.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cbad1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cbaa12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cbaa12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cbaa117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvp9ebsv                        0x00005648e6ec4501 <unavailable> + 5377

    5    libc.so.6                          0x00002b6cbaf07460 __libc_start_main +
    245

    6    tmprvp9ebsv                        0x00005648e6ec4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n % 2 == 0 {\n\
    \        let a = l[n / 2 - 1]\n        let b = l[n / 2]\n        return Double(a\
    \ + b) / 2\n    } else {\n        return Double(l[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_3qcgsc_/tmp_3qcgsc_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29836b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29833a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29833a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29833a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3qcgsc_                        0x0000555c783a8471 <unavailable> + 5233

    5    libc.so.6                          0x00002b298389e460 __libc_start_main +
    245

    6    tmp_3qcgsc_                        0x0000555c783a80b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let l = l.sorted()\n    let n = l.count\n\
    \    if n % 2 == 0 {\n        return Double(l[n / 2] + l[n / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(l[n / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sl = l.sorted()\n    let n = sl.count\n\
    \    let half = n / 2\n    if n % 2 == 0 {\n        return Double(sl[half - 1]\
    \ + sl[half]) / 2\n    } else {\n        return Double(sl[half])\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var medianIndex: Int\n    if l.count %\
    \ 2 == 0 {\n        medianIndex = l.count / 2\n    } else {\n        medianIndex\
    \ = (l.count - 1) / 2\n    }\n    let median: Double = Double(l[medianIndex])\n\
    \    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpocb_svnw/tmpocb_svnw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2651676c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b265136db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b265136d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b265136c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocb_svnw                        0x00005561fb506471 <unavailable> + 5233

    5    libc.so.6                          0x00002b2651862460 __libc_start_main +
    245

    6    tmpocb_svnw                        0x00005561fb5060b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l_double: [Double] = []\n    for num\
    \ in l {\n        l_double.append(Double(num))\n    }\n    return median(l: l_double)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3lyvjfko.swift:12:22: error: cannot convert value of type '[Double]'\
    \ to expected argument type '[Int]'\n    return median(l: l_double)\n        \
    \             ^\n/tmp/tmp3lyvjfko.swift:12:22: note: arguments to generic parameter\
    \ 'Element' ('Double' and 'Int') are expected to be equal\n    return median(l:\
    \ l_double)\n                     ^\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    \n    var sortedArray = l.sorted()\n  \
    \  let midIndex = sortedArray.count / 2\n    \n    if sortedArray.count % 2 ==\
    \ 0 {\n        let a = sortedArray[midIndex]\n        let b = sortedArray[midIndex\
    \ - 1]\n        return Double(a + b) / 2\n    } else {\n        return Double(sortedArray[midIndex])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n / 2\n  \
    \  if n % 2 == 0 {\n        return Double(l[m] + l[m - 1]) / 2\n    } else {\n\
    \        return Double(l[m])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwde9ipjl/tmpwde9ipjl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585333c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae58502ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae58502a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5850297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwde9ipjl                        0x0000556d8ccce471 <unavailable> + 5233

    5    libc.so.6                          0x00002ae58551f460 __libc_start_main +
    245

    6    tmpwde9ipjl                        0x0000556d8ccce0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    let sorted = l.sorted()\n    let num = l.count\n    let med = num /\
    \ 2\n    let a = sorted[med]\n    let b = sorted[med - 1]\n    if num % 2 == 0\
    \ {\n        return Double(a + b) / 2\n    } else {\n        return Double(a)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab153d81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab153a78561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab153a78286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab153a7813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab153a77bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab153877e83 <unavailable> + 188035

    6    tmpm_822gk4                        0x00005580c92efa11 <unavailable> + 6673

    7    tmpm_822gk4                        0x00005580c92ef624 <unavailable> + 5668

    8    libc.so.6                          0x00002ab153f6d460 __libc_start_main +
    245

    9    tmpm_822gk4                        0x00005580c92ef149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let nums = l.sorted()\n    let middle =\
    \ nums.count / 2\n    if nums.count % 2 == 0 {\n        return Double(nums[middle]\
    \ + nums[middle - 1]) / 2\n    } else {\n        return Double(nums[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let index\
    \ = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[index]\
    \ + sortedList[index - 1]) / 2\n    } else {\n        return Double(sortedList[index])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let li = l.sorted()\n    if li.count %\
    \ 2 == 0 {\n        return Double(li[li.count / 2] + li[li.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(li[li.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted_l = l.sorted()\n    let mid_index\
    \ = l.count / 2\n    if l.count % 2 == 0 {\n        return Double(sorted_l[mid_index]\
    \ + sorted_l[mid_index-1]) / 2\n    } else {\n        return Double(sorted_l[mid_index])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  let sortedArray = insertionSort(l: l)\n \
    \ var mid: Int = 0\n  var result: Double = 0\n  if sortedArray.count % 2 == 0\
    \ {\n    mid = sortedArray.count / 2\n    result = Double(sortedArray[mid] + sortedArray[mid\
    \ - 1]) / 2\n  } else {\n    mid = sortedArray.count / 2\n    result = Double(sortedArray[mid])\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcreoucle.swift:8:21: error: cannot find 'insertionSort' in scope\n\
    \  let sortedArray = insertionSort(l: l)\n                    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let n = sortedL.count\n\
    \    if n == 0 {\n        return 0\n    }\n    let mid = n / 2\n    if n % 2 ==\
    \ 0 {\n        return Double(sortedL[mid] + sortedL[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sortedL[mid])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // get length of l\n    let lLength = l.count\n\
    \    // Sort the array l\n    let lSorted = l.sorted()\n    // is it even?\n \
    \   if lLength % 2 == 0 {\n        // get the middle of the array\n        let\
    \ medianValue1 = lSorted[lLength / 2]\n        let medianValue2 = lSorted[lLength\
    \ / 2 - 1]\n        return Double(medianValue1 + medianValue2) / 2\n    } else\
    \ {\n        return Double(lSorted[lLength / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let size = l.count\n    if size == 0 {\n\
    \        return 0\n    }\n    if size % 2 == 0 {\n        return (Double(l[size\
    \ / 2 - 1]) + Double(l[size / 2])) / 2\n    } else {\n        return Double(l[size\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpmagevj2p/tmpmagevj2p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b951515cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9514e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9514e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9514e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmagevj2p                        0x000055b18fae2471 <unavailable> + 5233

    5    libc.so.6                          0x00002b9515348460 __libc_start_main +
    245

    6    tmpmagevj2p                        0x000055b18fae20b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return Double.nan\n\
    \    }\n    return Double(sum(l: l)) / Double(l.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyfnxhd7c.swift:11:19: error: cannot find 'sum' in scope\n    return\
    \ Double(sum(l: l)) / Double(l.count)\n                  ^~~\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  let sorted = l.sorted()\n  let mid = sorted.count\
    \ / 2\n  if sorted.count % 2 == 0 {\n    return Double(sorted[mid - 1] + sorted[mid])\
    \ / 2\n  } else {\n    return Double(sorted[mid])\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var temp = l\n    temp.sort()\n    if temp.count\
    \ % 2 == 0 {\n        return Double(temp[temp.count / 2] + temp[temp.count / 2\
    \ - 1]) / 2\n    } else {\n        return Double(temp[temp.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let median = l.sorted()[l.count / 2]\n\
    \    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpkkx8dgk2/tmpkkx8dgk2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf9d295c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf9cf8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf9cf8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf9cf8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkx8dgk2                        0x00005623d67a65ed <unavailable> + 5613

    5    libc.so.6                          0x00002aaf9d481460 __libc_start_main +
    245

    6    tmpkkx8dgk2                        0x00005623d67a6149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    guard l.count > 0 else { return 0 }\n \
    \   let sortedL = l.sorted()\n    let n = sortedL.count\n    let mid = n / 2\n\
    \    let midEven = (n % 2 == 0)\n    if midEven {\n        return Double(sortedL[mid]\
    \ + sortedL[mid - 1]) / 2\n    } else {\n        return Double(sortedL[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let center\
    \ = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[center\
    \ - 1] + sorted[center]) / 2\n    } else {\n        return Double(sorted[center])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    if l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu07_co9/tmpwu07_co9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77df3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77df0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77df0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77df0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu07_co9                        0x00005634df53c471 <unavailable> + 5233

    5    libc.so.6                          0x00002b77df5b7460 __libc_start_main +
    245

    6    tmpwu07_co9                        0x00005634df53c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let length\
    \ = sortedList.count\n    let middle = length / 2\n    if length % 2 == 0 {\n\
    \        return Double(sortedList[middle] + sortedList[middle - 1]) / 2\n    }\
    \ else {\n        return Double(sortedList[middle])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let array = l.sorted()\n    if array.count\
    \ % 2 == 0 {\n        let center = array.count / 2\n        return Double(array[center]\
    \ + array[center - 1]) / 2\n    } else {\n        return Double(array[array.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return (Double(l[l.count\
    \ / 2 - 1]) + Double(l[l.count / 2])) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcntaljk0/tmpcntaljk0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55054bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55051b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55051b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55051b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcntaljk0                        0x0000564d6eb8c471 <unavailable> + 5233

    5    libc.so.6                          0x00002b55056ab460 __libc_start_main +
    245

    6    tmpcntaljk0                        0x0000564d6eb8c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return l.reduce(0, +) / Double(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0op60xwz.swift:8:24: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    return\
    \ l.reduce(0, +) / Double(l.count)\n                       ^\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let s = l.sorted()\n    if s.count % 2\
    \ == 0 {\n        return Double(s[s.count / 2] + s[s.count / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(s[s.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // TODO: Implement\n    return 0.0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpmyzy0e7e/tmpmyzy0e7e.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c0d188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c0ce7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c0ce7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c0ce7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyzy0e7e                        0x00005639cf171321 <unavailable> + 4897

    5    libc.so.6                          0x00002b9c0d374460 __libc_start_main +
    245

    6    tmpmyzy0e7e                        0x00005639cf170f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = insertionSort(l: l)\n    if\
    \ sorted.count % 2 == 0 {\n        let mid = sorted.count / 2\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyle0261q.swift:8:18: error: cannot find 'insertionSort' in scope\n\
    \    let sorted = insertionSort(l: l)\n                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvv6v41x/tmpcvv6v41x.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvv6v41x                        0x000055c9678d9471 <unavailable> + 5233

    5    libc.so.6                          0x00002b543bae6460 __libc_start_main +
    245

    6    tmpcvv6v41x                        0x000055c9678d90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    let mid = count / 2\n    let mid2 = mid - 1\n    if count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid2]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    let sorted_l =\
    \ sort(l: l)\n    if sorted_l.count % 2 == 0 {\n        return Double(sorted_l[sorted_l.count\
    \ / 2] + sorted_l[sorted_l.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted_l[sorted_l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6_ald4r.swift:9:20: error: cannot find 'sort' in scope\n    let\
    \ sorted_l = sort(l: l)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvv6v41x/tmpcvv6v41x.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvv6v41x                        0x000055c9678d9471 <unavailable> + 5233

    5    libc.so.6                          0x00002b543bae6460 __libc_start_main +
    245

    6    tmpcvv6v41x                        0x000055c9678d90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let middle = l.count / 2\n    let sorted\
    \ = l.sorted()\n    return l.count % 2 == 0 ? (Double(sorted[middle - 1]) + Double(sorted[middle]))\
    \ / 2 : Double(sorted[middle])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return (l.count % 2 == 0) ?\n        Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2 :\n        Double(l[l.count / 2])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpp5bsp9_8/tmpp5bsp9_8.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b452e312c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b452e009b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b452e009988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b452e0087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5bsp9_8                        0x000055e1b5965471 <unavailable> + 5233

    5    libc.so.6                          0x00002b452e4fe460 __libc_start_main +
    245

    6    tmpp5bsp9_8                        0x000055e1b59650b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    let sortedList = l.sorted()\n    let index = l.count / 2\n    if l.count\
    \ % 2 == 0 {\n        return Double(sortedList[index - 1] + sortedList[index])\
    \ / 2\n    } else {\n        return Double(sortedList[index])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let len = l.count\n    let sortedList =\
    \ l.sorted()\n    if len % 2 == 0 {\n        let mid = len / 2\n        return\
    \ Double(sortedList[mid] + sortedList[mid - 1]) / 2\n    } else {\n        let\
    \ mid = len / 2\n        return Double(sortedList[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    guard l.count > 0 else { return 0 }\n \
    \   let s = l.sorted()\n    if s.count % 2 == 0 {\n        return Double(s[s.count\
    \ / 2] + s[s.count / 2 - 1]) / 2\n    } else {\n        return Double(s[s.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var c = l\n    c.sort()\n    if c.count\
    \ % 2 == 0 {\n        return Double(c[c.count / 2] + c[c.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(c[c.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    if l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu07_co9/tmpwu07_co9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77df3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77df0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77df0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77df0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu07_co9                        0x00005634df53c471 <unavailable> + 5233

    5    libc.so.6                          0x00002b77df5b7460 __libc_start_main +
    245

    6    tmpwu07_co9                        0x00005634df53c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvv6v41x/tmpcvv6v41x.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvv6v41x                        0x000055c9678d9471 <unavailable> + 5233

    5    libc.so.6                          0x00002b543bae6460 __libc_start_main +
    245

    6    tmpcvv6v41x                        0x000055c9678d90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // your code here\n    let a = l.sorted()\n\
    \    let lng = a.count\n    var m = Double(a[0])\n    if lng%2 == 0 {\n      \
    \  m = Double(a[lng/2] + a[lng/2-1])/2\n    } else {\n        m = Double(a[lng/2])\n\
    \    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    let s = l.sorted()\n    let m = s.count / 2\n    return Double(s[m])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpl6sly78t/tmpl6sly78t.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7ecc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c7e9b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c7e9b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c7e9b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6sly78t                        0x000056535d3425ed <unavailable> + 5613

    5    libc.so.6                          0x00002b4c7eeac460 __libc_start_main +
    245

    6    tmpl6sly78t                        0x000056535d342149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // FIXME\n    return 0.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpbflshkc4/tmpbflshkc4.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a4e1d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4dec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4dec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4dec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbflshkc4                        0x00005599e8c20321 <unavailable> + 4897

    5    libc.so.6                          0x00002b4a4e3be460 __libc_start_main +
    245

    6    tmpbflshkc4                        0x00005599e8c1ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var ret = 0.0\n    if l.count == 0 {\n\
    \        return 0.0\n    }\n    if l.count % 2 == 0 {\n        let a = l[l.count\
    \ / 2 - 1]\n        let b = l[l.count / 2]\n        ret = Double(a + b) / 2.0\n\
    \    } else {\n        ret = Double(l[l.count / 2])\n    }\n    return ret\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp2xqfeo9p/tmp2xqfeo9p.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb3eb9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb3e892b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb3e892988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb3e8917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xqfeo9p                        0x00005589d47a7471 <unavailable> + 5233

    5    libc.so.6                          0x00002abb3ed87460 __libc_start_main +
    245

    6    tmp2xqfeo9p                        0x00005589d47a70b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let middle = l.count / 2\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[middle] + l[middle - 1]) / 2\n    } else\
    \ {\n        return Double(l[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmprhywkyca/tmprhywkyca.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06bb280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06baf77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06baf77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06baf767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhywkyca                        0x00005601e828e471 <unavailable> + 5233

    5    libc.so.6                          0x00002b06bb46c460 __libc_start_main +
    245

    6    tmprhywkyca                        0x00005601e828e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid\
    \ - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let a: Double\
    \ = Double(sortedL[sortedL.count / 2])\n    let b: Double = Double(sortedL[(sortedL.count\
    \ / 2) - 1])\n    return (a + b) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmphi3zzx_h/tmphi3zzx_h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3b7f9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3b7c92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3b7c92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3b7c917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphi3zzx_h                        0x0000556d11e2a501 <unavailable> + 5377

    5    libc.so.6                          0x00002ba3b8187460 __libc_start_main +
    245

    6    tmphi3zzx_h                        0x0000556d11e2a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    let n = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return Double(l[n] + l[n-1]) / 2\n \
    \   } else {\n        return Double(l[n])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpmrldhurn/tmpmrldhurn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40e1d33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40e1a2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40e1a2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40e1a297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrldhurn                        0x000055aaf9d5e471 <unavailable> + 5233

    5    libc.so.6                          0x00002b40e1f1f460 __libc_start_main +
    245

    6    tmpmrldhurn                        0x000055aaf9d5e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var tmpArray = l\n    tmpArray.sort()\n\
    \    let count = tmpArray.count\n    let idx = count / 2\n    return Double(count\
    \ % 2 == 0 ? (tmpArray[idx - 1] + tmpArray[idx]) / 2 : tmpArray[idx])\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpygm1q0gd/tmpygm1q0gd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58a3675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58a336cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58a336c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58a336b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygm1q0gd                        0x0000557aba932813 <unavailable> + 6163

    5    libc.so.6                          0x00002b58a3861460 __libc_start_main +
    245

    6    tmpygm1q0gd                        0x0000557aba9321d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    if count % 2 == 0 {\n        let x = sorted[count / 2]\n\
    \        let y = sorted[count / 2 - 1]\n        return Double(x + y) / 2\n   \
    \ } else {\n        return Double(sorted[count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var sortedList = l.sorted()\n    if sortedList.count\
    \ % 2 == 0 {\n        let index1 = sortedList.count / 2\n        let index2 =\
    \ sortedList.count / 2 - 1\n        return Double(sortedList[index1] + sortedList[index2])\
    \ / 2\n    } else {\n        let index = sortedList.count / 2\n        return\
    \ Double(sortedList[index])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    let mid = count / 2\n    if count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let middle\
    \ = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[middle]\
    \ + sortedList[middle - 1]) / 2\n    } else {\n        return Double(sortedList[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let medianIndex\
    \ = sortedL.count / 2\n    if sortedL.count % 2 == 0 {\n        let median = (Double(sortedL[medianIndex])\
    \ + Double(sortedL[medianIndex - 1])) / 2\n        return median\n    } else {\n\
    \        return Double(sortedL[medianIndex])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid\
    \ - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle\
    \ = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle\
    \ - 1] + sorted[middle]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 1.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpey5f_jop/tmpey5f_jop.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a9f77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a9c6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a9c6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a9c6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpey5f_jop                        0x000055c982400321 <unavailable> + 4897

    5    libc.so.6                          0x00002ba3aa163460 __libc_start_main +
    245

    6    tmpey5f_jop                        0x000055c9823fff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedArray = l.sorted()\n    let mid\
    \ = sortedArray.count / 2\n    if sortedArray.count % 2 == 0 {\n        return\
    \ Double(sortedArray[mid - 1] + sortedArray[mid]) / 2\n    } else {\n        return\
    \ Double(sortedArray[mid])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let length\
    \ = sorted.count\n    let middle = length / 2\n    let median = (length % 2 ==\
    \ 0) ? (Double(sorted[middle - 1]) + Double(sorted[middle])) / 2 : Double(sorted[middle])\n\
    \    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count / 2) - 1] + sorted[sorted.count\
    \ / 2]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if l.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    guard !l.isEmpty else {\n        fatalError(\"\
    empty array\")\n    }\n    let m = l.sorted(by: <)\n    if m.count % 2 == 0 {\n\
    \        return Double(m[m.count / 2] + m[m.count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(m[m.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    if l.count % 2 == 0 {\n        let a = l[l.count / 2]\n        let\
    \ b = l[l.count / 2 - 1]\n        return Double(a + b) / 2\n    } else {\n   \
    \     return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpc0cgxs2y/tmpc0cgxs2y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60d26a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60d2398b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60d2398988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60d23977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc0cgxs2y                        0x000055c25220b471 <unavailable> + 5233

    5    libc.so.6                          0x00002b60d288d460 __libc_start_main +
    245

    6    tmpc0cgxs2y                        0x000055c25220b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n\
    \    return (n & 1) == 0 ? (Double(l[mid - 1]) + Double(l[mid])) / 2 : Double(l[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp4yovuzea/tmp4yovuzea.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94c4d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94c49fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94c49fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94c49f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4yovuzea                        0x0000562946b0f471 <unavailable> + 5233

    5    libc.so.6                          0x00002b94c4eef460 __libc_start_main +
    245

    6    tmp4yovuzea                        0x0000562946b0f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let count = l.count\n    let sorted = l.sorted()\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        let index1\
    \ = l.count / 2\n        let index2 = index1 - 1\n        return Double(l[index1]\
    \ + l[index2]) / 2\n    } else {\n        let index = l.count / 2\n        return\
    \ Double(l[index])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp6wo_gkdd/tmp6wo_gkdd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50d078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50d0485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50d0485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50d04847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wo_gkdd                        0x00005578a8e5d471 <unavailable> + 5233

    5    libc.so.6                          0x00002b50d097a460 __libc_start_main +
    245

    6    tmp6wo_gkdd                        0x00005578a8e5d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // TODO: implement your solution here\n\
    \    var low = l.sorted()\n    return Double(low[low.count/2])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpd_izc7j1/tmpd_izc7j1.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac668fe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac668cdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac668cdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac668cda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_izc7j1                        0x00005576d9af45ed <unavailable> + 5613

    5    libc.so.6                          0x00002ac6691d0460 __libc_start_main +
    245

    6    tmpd_izc7j1                        0x00005576d9af4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // TODO: Do some coding here!\n    return\
    \ 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpv5gndt7g/tmpv5gndt7g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba187d0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba187a05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba187a05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba187a047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv5gndt7g                        0x0000560ff3e76321 <unavailable> + 4897

    5    libc.so.6                          0x00002ba187efa460 __libc_start_main +
    245

    6    tmpv5gndt7g                        0x0000560ff3e75f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l.sorted()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return Double(l[mid] + l[mid - 1]) /\
    \ 2\n    } else {\n        return Double(l[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   } else if l.count % 2 == 0 {\n        let a = l[l.count / 2]\n        let\
    \ b = l[l.count / 2 - 1]\n        return Double(a + b) / 2\n    } else {\n   \
    \     return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp38x9qv7v/tmp38x9qv7v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d38a2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d38725b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d38725988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d387247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38x9qv7v                        0x000055935364c471 <unavailable> + 5233

    5    libc.so.6                          0x00002b1d38c1a460 __libc_start_main +
    245

    6    tmp38x9qv7v                        0x000055935364c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvv6v41x/tmpcvv6v41x.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvv6v41x                        0x000055c9678d9471 <unavailable> + 5233

    5    libc.so.6                          0x00002b543bae6460 __libc_start_main +
    245

    6    tmpcvv6v41x                        0x000055c9678d90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  if l.count == 0 {\n    return 0\n  }\n  if\
    \ l.count % 2 == 0 {\n    return (Double(l[l.count / 2]) + Double(l[l.count /\
    \ 2 - 1])) / 2\n  } else {\n    return Double(l[l.count / 2])\n  }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpw3asmtze/tmpw3asmtze.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f040b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f03dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f03dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f03dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3asmtze                        0x00005575a56f5471 <unavailable> + 5233

    5    libc.so.6                          0x00002b7f042a1460 __libc_start_main +
    245

    6    tmpw3asmtze                        0x00005575a56f50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedl = l.sorted()\n    if sortedl.count\
    \ % 2 == 0 {\n        let mid = sortedl.count / 2\n        return Double(sortedl[mid\
    \ - 1] + sortedl[mid]) / 2\n    } else {\n        return Double(sortedl[sortedl.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ l.count / 2\n    if l.count % 2 == 0 {\n        return Double(sorted[mid] +\
    \ sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   } else if l.count % 2 == 0 {\n        let m = l.count / 2\n        return\
    \ Double(l[m - 1] + l[m]) / 2\n    } else {\n        return Double(l[l.count /\
    \ 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmptv6ljrv8/tmptv6ljrv8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a1e63ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a1e335b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a1e335988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a1e3347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptv6ljrv8                        0x000055ce8a5d1471 <unavailable> + 5233

    5    libc.so.6                          0x00002b9a1e82a460 __libc_start_main +
    245

    6    tmptv6ljrv8                        0x000055ce8a5d10b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  let sorted = l.sorted()\n  let mid = sorted.count\
    \ / 2\n  if sorted.count % 2 == 0 {\n    return Double(sorted[mid] + sorted[mid-1])\
    \ / 2\n  } else {\n    return Double(sorted[mid])\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let m = l.count/2\n    if l.count % 2 ==\
    \ 0 {\n        return (Double(l[m-1]) + Double(l[m]))/2\n    } else {\n      \
    \  return Double(l[m])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcil486fd/tmpcil486fd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6a7494c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6a718bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6a718b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6a718a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcil486fd                        0x00005653b90de471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba6a7680460 __libc_start_main +
    245

    6    tmpcil486fd                        0x00005653b90de0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let half\
    \ = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[half\
    \ - 1] + sortedList[half]) / 2\n    } else {\n        return Double(sortedList[half])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let l = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        let left = Double(l[l.count / 2 - 1])\n        let right = Double(l[l.count\
    \ / 2])\n        return (left + right) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return average(l: (l.sorted()[l.count /\
    \ 2] + l.sorted()[(l.count - 1) / 2]))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqodxtx89.swift:8:12: error: cannot find 'average' in scope\n  \
    \  return average(l: (l.sorted()[l.count / 2] + l.sorted()[(l.count - 1) / 2]))\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    \n    var l = l\n    sort(&l)\n    let\
    \ n = l.count\n    let half = n/2\n    if n%2 == 0 {\n        return Double(l[half-1]\
    \ + l[half])/2\n    } else {\n        return Double(l[half])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpenjwvcwi.swift:10:5: error: cannot find 'sort' in scope\n    sort(&l)\n\
    \    ^~~~\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let l = l.sorted()\n    let count = l.count\n\
    \    let middle = l.count / 2\n    let median: Double\n    if count % 2 == 0 {\n\
    \        median = Double(l[middle - 1] + l[middle]) / 2\n    } else {\n      \
    \  median = Double(l[middle])\n    }\n    return median\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    if n % 2 == 0 {\n\
    \        return (Double(l[n / 2]) + Double(l[n / 2 - 1])) / 2\n    } else {\n\
    \        return Double(l[n / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp7e6tjldc/tmp7e6tjldc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d5ba41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d5b738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d5b738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d5b7377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e6tjldc                        0x000055bd1c250471 <unavailable> + 5233

    5    libc.so.6                          0x00002b9d5bc2d460 __libc_start_main +
    245

    6    tmp7e6tjldc                        0x000055bd1c2500b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let m = l.count / 2\n    let array = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return Double(array[m] + array[m-1]) / 2\n\
    \    } else {\n        return Double(array[m])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    if sortedL.count\
    \ % 2 == 0 {\n        return Double(sortedL[sortedL.count / 2] + sortedL[sortedL.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sortedL[sortedL.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = quickSort(l: l)\n    let\
    \ last = sortedList.count\n    let first = 0\n    if last % 2 == 0 {\n       \
    \ let mid = (last + first) / 2\n        return Double(sortedList[mid] + sortedList[mid\
    \ - 1]) / 2\n    } else {\n        let mid = (last + first) / 2\n        return\
    \ Double(sortedList[mid])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_wh_m36u.swift:8:22: error: cannot find 'quickSort' in scope\n\
    \    let sortedList = quickSort(l: l)\n                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return Double(l.sorted()[l.count / 2])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpjjl64s5m/tmpjjl64s5m.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1740f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1740c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1740c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1740c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjl64s5m                        0x000055a9fe3435ed <unavailable> + 5613

    5    libc.so.6                          0x00002b174111e460 __libc_start_main +
    245

    6    tmpjjl64s5m                        0x000055a9fe343149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return Double(medianInt(l: l))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2jv2iod2.swift:8:19: error: cannot find 'medianInt' in scope\n\
    \    return Double(medianInt(l: l))\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid-1]) / 2\n    } else {\n        return Double(sorted[mid])\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n/2\n    let\
    \ sorted = l.sorted()\n    if n % 2 == 0 {\n        return Double(sorted[m] +\
    \ sorted[m-1]) / 2\n    } else {\n        return Double(sorted[m])\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    \n    let len = l.count\n    let mid =\
    \ len / 2\n    if len % 2 == 0 {\n        return Double(l[mid - 1] + l[mid]) /\
    \ 2\n    } else {\n        return Double(l[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpetf59j5a/tmpetf59j5a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0f496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0f4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0f4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0f46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetf59j5a                        0x0000562580b8c471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0f4b59460 __libc_start_main +
    245

    6    tmpetf59j5a                        0x0000562580b8c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle\
    \ = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let s = l.sorted()\n    let n = s.count\n\
    \    if n % 2 == 0 {\n        return Double(s[n / 2] + s[n / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(s[n / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n \
    \   }\n    let sorted = l.sorted()\n    let middle = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    if (count % 2 == 0) {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let ls = l.sorted()\n    if ls.count %\
    \ 2 == 0 {\n        return Double(ls[ls.count / 2] + ls[ls.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(ls[ls.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedArray = l.sorted()\n    let mid\
    \ = sortedArray.count / 2\n    if sortedArray.count % 2 == 0 {\n        let lowMiddle\
    \ = sortedArray[mid]\n        let highMiddle = sortedArray[mid - 1]\n        return\
    \ Double(lowMiddle + highMiddle) / 2\n    } else {\n        return Double(sortedArray[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    let mid =\
    \ l.count / 2\n    if l.count % 2 == 0 {\n        return Double(l[mid] + l[mid\
    \ - 1]) / 2\n    } else {\n        return Double(l[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        let a =\
    \ l[l.count / 2]\n        let b = l[l.count / 2 - 1]\n        return Double(a\
    \ + b) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpgtbeug70/tmpgtbeug70.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95e665fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95e6356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95e6356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95e63557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtbeug70                        0x000055f37db36471 <unavailable> + 5233

    5    libc.so.6                          0x00002b95e684b460 __libc_start_main +
    245

    6    tmpgtbeug70                        0x000055f37db360b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let len = l.count\n    let sorted = l.sorted()\n\
    \    if len % 2 == 0 {\n        return Double(sorted[len / 2] + sorted[len / 2\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[len / 2])\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  if l.count % 2 == 0 {\n    let mid = l.count\
    \ / 2\n    return Double(l[mid] + l[mid - 1]) / 2\n  } else {\n    return Double(l[l.count\
    \ / 2])\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpz0r6zkgb/tmpz0r6zkgb.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a62c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a628fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a628fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a628fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0r6zkgb                        0x0000555935cd1471 <unavailable> + 5233

    5    libc.so.6                          0x00002b9a62df1460 __libc_start_main +
    245

    6    tmpz0r6zkgb                        0x0000555935cd10b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return (Double(l[l.count\
    \ / 2]) + Double(l[l.count / 2 - 1])) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpz7jojalu/tmpz7jojalu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48c1a03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48c16fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48c16fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48c16f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7jojalu                        0x000056329b39c471 <unavailable> + 5233

    5    libc.so.6                          0x00002b48c1bef460 __libc_start_main +
    245

    6    tmpz7jojalu                        0x000056329b39c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return median(l: l.toDouble)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7wbfbugu.swift:8:24: error: value of type '[Int]' has no member\
    \ 'toDouble'\n    return median(l: l.toDouble)\n                     ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // TODO: Implement\n    var n = l.count\n\
    \    var sortedArray = l.sorted()\n    var median = 0.0\n    if n % 2 == 0 {\n\
    \        median = Double(sortedArray[n/2] + sortedArray[n/2-1])/2\n    }\n   \
    \ else {\n        median = Double(sortedArray[n/2])\n    }\n    return median\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle\
    \ = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle\
    \ - 1] + sorted[middle]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedArray = l.sorted(by: <)\n   \
    \ if sortedArray.count % 2 == 0 {\n        return Double(sortedArray[sortedArray.count\
    \ / 2] + sortedArray[sortedArray.count / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(sortedArray[sortedArray.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    if l.count % 2\
    \ == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpajb52vr3/tmpajb52vr3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dde0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ddddbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ddddbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ddddbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajb52vr3                        0x000055cadb56d471 <unavailable> + 5233

    5    libc.so.6                          0x00002b8dde2b2460 __libc_start_main +
    245

    6    tmpajb52vr3                        0x000055cadb56d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        let middle = sorted.count / 2\n        return Double(sorted[middle\
    \ - 1] + sorted[middle]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var temp = l\n    temp.sort()\n    if temp.count\
    \ % 2 == 0 {\n        return Double(temp[temp.count / 2] + temp[temp.count / 2\
    \ - 1]) / 2\n    } else {\n        return Double(temp[temp.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // TODO: implement me\n    let n = l.count\n\
    \    if n == 0 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n    \
    \    let m1 = l[n/2]\n        let m2 = l[n/2-1]\n        return Double(m1+m2)/2\n\
    \    } else {\n        return Double(l[n/2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmps3gs23zz/tmps3gs23zz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbbecec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbbbc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fbbbc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fbbbc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3gs23zz                        0x000055a6e176c4b1 <unavailable> + 5297

    5    libc.so.6                          0x00002b9fbc0ba460 __libc_start_main +
    245

    6    tmps3gs23zz                        0x000055a6e176c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        let x =\
    \ l.count / 2\n        return Double(l[x] + l[x-1]) / 2\n    } else {\n      \
    \  return Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpomatr2mz/tmpomatr2mz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d02efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69cffe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69cffe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69cffe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomatr2mz                        0x000056075191d471 <unavailable> + 5233

    5    libc.so.6                          0x00002b69d04db460 __libc_start_main +
    245

    6    tmpomatr2mz                        0x000056075191d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n  let sortedList = l.sorted()\n  let mid =\
    \ l.count / 2\n  if l.count % 2 == 0 {\n    let avg = Double(sortedList[mid] +\
    \ sortedList[mid-1])/2\n    return avg\n  } else {\n    return Double(sortedList[mid])\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let middle = l.count / 2\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[middle - 1] + l[middle]) / 2\n    } else\
    \ {\n        return Double(l[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpkhsqiclk/tmpkhsqiclk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03bccc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03bc9bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03bc9bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03bc9ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkhsqiclk                        0x000055b874804471 <unavailable> + 5233

    5    libc.so.6                          0x00002b03bceb0460 __libc_start_main +
    245

    6    tmpkhsqiclk                        0x000055b8748040b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let s = l.sorted()\n    if l.count % 2\
    \ == 0 {\n        let m = l.count / 2\n        return Double(s[m] + s[m - 1])\
    \ / 2\n    } else {\n        return Double(s[l.count / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978398
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        let middle = n / 2\n        return Double(sorted[middle\
    \ - 1] + sorted[middle]) / 2\n    } else {\n        return Double(sorted[n / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var mid = l.count / 2\n    return l.count\
    \ % 2 == 0 ? Double(l[mid] + l[mid - 1]) / 2 : Double(l[mid])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp8epnbz97/tmp8epnbz97.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f76879c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f76570b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f76570988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f7656f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8epnbz97                        0x0000564e633a4471 <unavailable> + 5233

    5    libc.so.6                          0x00002b5f76a65460 __libc_start_main +
    245

    6    tmp8epnbz97                        0x0000564e633a40b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let list = l.sorted()\n    if l.count ==\
    \ 0 {\n        return 0\n    } else if l.count % 2 == 0 {\n        return Double(list[list.count\
    \ / 2] + list[list.count / 2 - 1]) / 2\n    } else {\n        return Double(list[list.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let arr = l.sorted()\n    if arr.count\
    \ % 2 == 0 {\n        return Double(arr[arr.count / 2] + arr[arr.count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(arr[arr.count / 2])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    guard l.count > 0 else {\n        return\
    \ 0\n    }\n    var tl = l\n    tl.sort()\n    if tl.count % 2 == 0 {\n      \
    \  return Double(tl[tl.count / 2] + tl[tl.count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(tl[tl.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    let list = mergeSort(l:\
    \ l)\n    let length = list.count\n    if length % 2 == 0 {\n        return Double(list[length\
    \ / 2] + list[length / 2 - 1]) / 2\n    } else {\n        return Double(list[length\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkywkhi9b.swift:9:16: error: cannot find 'mergeSort' in scope\n\
    \    let list = mergeSort(l: l)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var l2 = l\n    l2.sort()\n    if l2.count\
    \ % 2 == 0 {\n        return Double(l2[l2.count / 2] + l2[l2.count / 2 - 1]) /\
    \ 2\n    } else {\n        return Double(l2[l2.count / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    guard count > 0 else { return 0 }\n    if count % 2 == 0\
    \ {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n  \
    \  } else {\n        return Double(sorted[count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let middle\
    \ = sortedL.count / 2\n    if sortedL.count % 2 == 0 {\n        return Double(sortedL[middle]\
    \ + sortedL[middle - 1]) / 2\n    } else {\n        return Double(sortedL[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let length\
    \ = sortedL.count\n    let middle = length / 2\n    if length % 2 == 0 {\n   \
    \     return Double(sortedL[middle - 1] + sortedL[middle]) / 2\n    } else {\n\
    \        return Double(sortedL[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return (l.sorted()[l.count / 2] + l.sorted()[(l.count\
    \ / 2) - 1]) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpodqrt3r0.swift:8:37: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (l.sorted()[l.count / 2] + l.sorted()[(l.count\
    \ / 2) - 1]) / 2.0\n                                    ^\n           Double(\
    \                                                  )\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let n\
    \ = sortedList.count\n    if n % 2 == 0 {\n        return Double(sortedList[n\
    \ / 2] + sortedList[n / 2 - 1]) / 2\n    } else {\n        return Double(sortedList[n\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    if sortedList.count\
    \ % 2 == 0 {\n        return Double(sortedList[sortedList.count / 2] + sortedList[sortedList.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sortedList[sortedList.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvv6v41x/tmpcvv6v41x.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvv6v41x                        0x000055c9678d9471 <unavailable> + 5233

    5    libc.so.6                          0x00002b543bae6460 __libc_start_main +
    245

    6    tmpcvv6v41x                        0x000055c9678d90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmppck187b8/tmppck187b8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85559fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85556f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85556f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85556f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppck187b8                        0x000056324282e321 <unavailable> + 4897

    5    libc.so.6                          0x00002b8555be6460 __libc_start_main +
    245

    6    tmppck187b8                        0x000056324282df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var newList = l\n    newList.sort()\n \
    \   return Double(newList[newList.count / 2])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpibl_fud0/tmpibl_fud0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b414cd89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414ca80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414ca80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414ca7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibl_fud0                        0x000055bda683167d <unavailable> + 5757

    5    libc.so.6                          0x00002b414cf75460 __libc_start_main +
    245

    6    tmpibl_fud0                        0x000055bda68311d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedL = l.sorted()\n    let mid =\
    \ sortedL.count / 2\n    if (sortedL.count % 2 == 0) {\n        return Double(sortedL[mid]\
    \ + sortedL[mid - 1]) / 2\n    } else {\n        return Double(sortedL[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var ll = l\n    ll.sort()\n    let size\
    \ = ll.count\n    if size % 2 == 0 {\n        return Double(ll[size / 2] + ll[size\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(ll[size / 2])\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let size = l.count\n    let half = size\
    \ / 2\n    let sorted = l.sorted()\n    if size % 2 == 0 {\n        return Double(sorted[half]\
    \ + sorted[half - 1]) / 2\n    } else {\n        return Double(sorted[half])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    var median\
    \ = 0.0\n    let count = sortedList.count\n    if count == 0 {\n        return\
    \ 0.0\n    }\n    if count % 2 == 0 {\n        median = Double(sortedList[count\
    \ / 2] + sortedList[count / 2 - 1]) / 2\n    } else {\n        median = Double(sortedList[count\
    \ / 2])\n    }\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return (Double(l.sorted()[(l.count - 1)\
    \ / 2]) + Double(l.sorted()[l.count / 2])) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return Double(sorted(l)[l.count / 2])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsc90_e0j.swift:8:19: error: cannot find 'sorted' in scope\n   \
    \ return Double(sorted(l)[l.count / 2])\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp2xkw7muy/tmp2xkw7muy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b200174ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2001441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2001441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20014407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xkw7muy                        0x000056104c05b321 <unavailable> + 4897

    5    libc.so.6                          0x00002b2001936460 __libc_start_main +
    245

    6    tmp2xkw7muy                        0x000056104c05af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    return Double(sorted[sorted.count\
    \ / 2] + sorted[(sorted.count - 1) / 2]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        let left\
    \ = l[l.count / 2 - 1]\n        let right = l[l.count / 2]\n        return Double(left\
    \ + right) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmplmr0kcmy/tmplmr0kcmy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace5f39bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace5f092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace5f092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace5f0917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmr0kcmy                        0x00005584ccf20471 <unavailable> + 5233

    5    libc.so.6                          0x00002ace5f587460 __libc_start_main +
    245

    6    tmplmr0kcmy                        0x00005584ccf200b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var mid = (l.count / 2) - 1\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[mid] + l[mid + 1]) / 2\n    } else {\n \
    \       return Double(l[mid])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpe6nj5xkd/tmpe6nj5xkd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0f5ae2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0f57d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0f57d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0f57d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6nj5xkd                        0x0000557041727471 <unavailable> + 5233

    5    libc.so.6                          0x00002ba0f5cce460 __libc_start_main +
    245

    6    tmpe6nj5xkd                        0x00005570417270b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 1
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = insertionSort(l: l)\n    let\
    \ length = sorted.count\n    if length % 2 == 0 {\n        return Double(sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2\n    } else {\n        return Double(sorted[length\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvevrn8du.swift:8:18: error: cannot find 'insertionSort' in scope\n\
    \    let sorted = insertionSort(l: l)\n                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpcvv6v41x/tmpcvv6v41x.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvv6v41x                        0x000055c9678d9471 <unavailable> + 5233

    5    libc.so.6                          0x00002b543bae6460 __libc_start_main +
    245

    6    tmpcvv6v41x                        0x000055c9678d90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978397
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var values = l\n    values.sort()\n   \
    \ let len = values.count\n    if len == 0 {\n        return 0\n    }\n    if len\
    \ % 2 == 0 {\n        let evenMedian = (values[len / 2] + values[len / 2 - 1])\
    \ / 2\n        return Double(evenMedian)\n    } else {\n        return Double(values[len\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp0xd3_lwx/tmp0xd3_lwx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba52db58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba52d84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba52d84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba52d84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd3_lwx                        0x00005624d0831813 <unavailable> + 6163

    5    libc.so.6                          0x00002ba52dd44460 __libc_start_main +
    245

    6    tmp0xd3_lwx                        0x00005624d08311d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let len = l.count\n    let middle = len\
    \ / 2\n    if len % 2 == 0 {\n        return Double(l[middle] + l[middle - 1])\
    \ / 2\n    } else {\n        return Double(l[middle])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpznw8jrhq/tmpznw8jrhq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6f6b3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6f6831b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6f6831988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6f68307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznw8jrhq                        0x000055add4df4471 <unavailable> + 5233

    5    libc.so.6                          0x00002ac6f6d26460 __libc_start_main +
    245

    6    tmpznw8jrhq                        0x000055add4df40b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    return Double(l.sorted()[l.count / 2])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpjjl64s5m/tmpjjl64s5m.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1740f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1740c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1740c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1740c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjl64s5m                        0x000055a9fe3435ed <unavailable> + 5613

    5    libc.so.6                          0x00002b174111e460 __libc_start_main +
    245

    6    tmpjjl64s5m                        0x000055a9fe343149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    let middle = count / 2\n    if count % 2 == 0 {\n      \
    \  return Double(sorted[middle - 1] + sorted[middle]) / 2\n    } else {\n    \
    \    return Double(sorted[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: -4
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    // FIXME: implement...\n    var total :\
    \ Int = 0\n    var ave : Double = 0.0\n    for i in l {\n        total += i\n\
    \    }\n    ave = Double(total)/Double(l.count)\n    return ave\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp7ijq8sy2/tmp7ijq8sy2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93e5f9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93e5c93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93e5c93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93e5c927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ijq8sy2                        0x000055a95def55cd <unavailable> + 5581

    5    libc.so.6                          0x00002b93e6188460 __libc_start_main +
    245

    6    tmp7ijq8sy2                        0x000055a95def5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    let sorted = l.sorted()\n\
    \    let mid = l.count / 2\n    if (l.count % 2 == 0) {\n        return Double(sorted[mid]\
    \ + sorted[mid-1]) / 2\n    } else {\n        return Double(sorted[mid])\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    func median(l: [Int]) -> Double {\n    var temp = l\n    temp.sort()\n    if temp.count\
    \ % 2 == 0 {\n        return Double(temp[temp.count / 2] + temp[temp.count / 2\
    \ - 1]) / 2\n    } else {\n        return Double(temp[temp.count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978397
