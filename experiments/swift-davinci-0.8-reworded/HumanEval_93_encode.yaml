name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
  \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"\
  tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    var encoded = String()\n    for (index, letter) in message.enumerated()\
    \ {\n        var c: Character\n        switch letter {\n        case \"a\", \"\
    e\", \"i\", \"o\", \"u\":\n            c = Character(String(message[message.index(message.startIndex,\
    \ offsetBy: index + 2)]).uppercased())\n        default:\n            c = Character(String(letter).uppercased())\n\
    \        }\n        encoded.append(c)\n    }\n    return encoded", "    var arr\
    \ = Array(message)\n    for i in 0..<arr.count {\n        if let letter = arr[i].asciiValue\
    \ {\n            let code = letter < 97 ? letter + 32 : letter - 32\n        \
    \    arr[i] = String(UnicodeScalar(code)!)\n            if let letter = arr[i].asciiValue\
    \ {\n                if let newLetter = alpha(ascii: letter) {\n             \
    \       arr[i] = String(UnicodeScalar(newLetter)!)\n                }\n      \
    \      }\n        }\n    }\n    return String(arr)", "    var result = \"\"\n\
    \    let alphabet = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for character in\
    \ message {\n        if character.isUppercase {\n            if character == \"\
    Z\" {\n                result.append(\"B\")\n            } else {\n          \
    \      result.append(String(alphabet[alphabet.firstIndex(of: character)! + 1]).lowercased())\n\
    \            }\n        } else if character.isLowercase {\n            if character\
    \ == \"z\" {\n                result.append(\"b\")\n            } else {\n   \
    \             result.append(String(alphabet[alphabet.firstIndex(of: String(character).uppercased())!\
    \ + 1]))\n            }\n        } else {\n            result.append(character)\n\
    \        }\n    }\n    return result", "    return message.lowercased().map {\n\
    \        let char = $0\n        if let vowel = englishVowels.firstIndex(of: char)\
    \ {\n            return englishVowels[(vowel + 2) % 5]\n        } else {\n   \
    \         return char\n        }\n    }.map {\n        switch $0 {\n        case\
    \ \"a\":\n            return \"A\"\n        case \"e\":\n            return \"\
    E\"\n        case \"i\":\n            return \"I\"\n        case \"o\":\n    \
    \        return \"O\"\n        case \"u\":\n            return \"U\"\n       \
    \ default:\n            return $0\n        }\n    }.joined()", "    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let dictionary: [Character: Character] = [\"a\": \"c\", \"e\": \"g\", \"\
    i\": \"k\", \"o\": \"q\", \"u\": \"y\"]\n    for letter in message {\n       \
    \ if let letter = letter.lowercased().first {\n            if vowels.contains(letter)\
    \ {\n                encodedMessage.append(dictionary[letter]!)\n            }\
    \ else {\n                encodedMessage.append(letter)\n            }\n     \
    \   }\n    }\n    return encodedMessage", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var output = \"\"\n    for char in message\
    \ {\n        if let vowelIndex = vowels.firstIndex(of: char) {\n            let\
    \ newVowelIndex = (vowelIndex + 2) % vowels.count\n            output.append(vowels[newVowelIndex])\n\
    \        } else {\n            output.append(char)\n        }\n    }\n    return\
    \ output", "    var output = \"\"\n    for letter in message {\n        if letter.isUppercase\
    \ {\n            output.append(letter.lowercased())\n        } else {\n      \
    \      output.append(letter.uppercased())\n        }\n    }\n    return output",
  "    // Write your code here\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let vowels = \"aeiou\"\
    \n    var result = \"\"\n    for letter in message {\n        let index = lowercase.index(of:\
    \ letter)\n        let uppercaseIndex = uppercase.index(of: letter)\n        let\
    \ vowelIndex = vowels.index(of: letter)\n        if vowelIndex != nil {\n    \
    \        result.append(vowels[index(index: index(index: vowelIndex))])\n     \
    \   } else if uppercaseIndex != nil {\n            result.append(uppercase[index(index:\
    \ uppercaseIndex)])\n        } else if index != nil {\n            result.append(lowercase[index(index:\
    \ index)])\n        } else {\n            result.append(letter)\n        }\n \
    \   }\n    return result", "  var finalString = \"\"\n  let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  let upperAlpha = alpha.uppercased()\n  var alphaArray = Array(alpha)\n  var\
    \ upperAlphaArray = Array(upperAlpha)\n  for char in message {\n    if vowels.contains(char)\
    \ {\n      if let index = alphaArray.firstIndex(of: char) {\n        finalString.append(alphaArray[(index\
    \ + 2) % 26])\n      } else if let index = upperAlphaArray.firstIndex(of: char)\
    \ {\n        finalString.append(upperAlphaArray[(index + 2) % 26])\n      }\n\
    \    } else {\n      if let index = alphaArray.firstIndex(of: char) {\n      \
    \  finalString.append(upperAlphaArray[index])\n      } else if let index = upperAlphaArray.firstIndex(of:\
    \ char) {\n        finalString.append(alphaArray[index])\n      }\n    }\n  }\n\
    \  return finalString", "    let vowels = \"aeiou\".uppercased()\n    let newVowels\
    \ = \"cdfghjklmnpqrstvwxyz\".uppercased()\n    var newMessage = \"\"\n    for\
    \ char in message {\n        let charStr = String(char)\n        if vowels.contains(charStr)\
    \ {\n            if charStr == \"U\" {\n                newMessage += \"A\"\n\
    \            } else {\n                let index = vowels.index(of: charStr)!\n\
    \                let newIndex = vowels.index(index, offsetBy: 2)\n           \
    \     newMessage += String(newVowels[newIndex])\n            }\n        } else\
    \ {\n            if charStr == charStr.uppercased() {\n                newMessage\
    \ += charStr.lowercased()\n            } else {\n                newMessage +=\
    \ charStr.uppercased()\n            }\n        }\n    }\n    return newMessage",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded\
    \ = String()\n    for letter in message {\n        if let index = vowels.firstIndex(of:\
    \ letter) {\n            encoded.append(vowels[(index + 2) % vowels.count])\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded", "    var vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var output: String = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            var index = vowels.firstIndex(of: char)!\n            index =\
    \ (index + 2) % 5\n            output.append(vowels[index])\n        } else {\n\
    \            output.append(char)\n        }\n    }\n    return output", "    ///\
    \ Write code here\n    return \"\"", "    var encodedMessage = \"\"\n    for character\
    \ in message {\n        let asciiCharacter = character.asciiValue\n        if\
    \ asciiCharacter! >= 65 && asciiCharacter! <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(asciiCharacter!\
    \ + 32)!))\n        } else if asciiCharacter! >= 97 && asciiCharacter! <= 122\
    \ {\n            encodedMessage.append(Character(UnicodeScalar(asciiCharacter!\
    \ - 32)!))\n        } else {\n            encodedMessage.append(character)\n \
    \       }\n    }\n    return encodedMessage", "    var result = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let\
    \ alphabetArray = Array(alphabet)\n    for c in message {\n        let character\
    \ = String(c)\n        if character.lowercased() == character {\n            if\
    \ let index = alphabetArray.firstIndex(of: character.lowercased()) {\n       \
    \         result += alphabetArray[(index + 2) % alphabetArray.count].uppercased()\n\
    \            } else {\n                result += character\n            }\n  \
    \      } else {\n            if let index = alphabetArray.firstIndex(of: character.lowercased())\
    \ {\n                result += alphabetArray[(index + 2) % alphabetArray.count]\n\
    \            } else {\n                result += character\n            }\n  \
    \      }\n    }\n    return result", "    // your code here\n    let vowels =\
    \ \"aeiou\"\n    let english = \"abcdefghijklmnopqrstuvwxyz\"\n    var newMessage\
    \ = \"\"\n    for word in message {\n        let char = \"\\(word)\"\n       \
    \ let newChar = char.lowercased()\n        if vowels.contains(newChar) {\n   \
    \         if english.contains(newChar) {\n                let index = english.firstIndex(of:\
    \ newChar)!\n                let charIndex = english.index(index, offsetBy: 2)\n\
    \                let nextChar = english[charIndex]\n                newMessage.append(nextChar)\n\
    \            }\n        } else {\n            if english.contains(newChar) {\n\
    \                let index = english.firstIndex(of: newChar)!\n              \
    \  let charIndex = english.index(index, offsetBy: 2)\n                let nextChar\
    \ = english[charIndex]\n                newMessage.append(nextChar)\n        \
    \    }\n        }\n    }\n    return newMessage", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for c in message {\n        if c.isLetter {\n  \
    \          if c.isUppercase {\n                let index = alphabet.index(of:\
    \ c.lowercased())!\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)].uppercased())\n            } else {\n                let index\
    \ = alphabet.index(of: c.lowercased())!\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            }\n        } else {\n            encoded.append(c)\n\
    \        }\n    }\n    return encoded", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var messageList = Array(message)\n    for i\
    \ in 0..<messageList.count {\n        if vowels.contains(messageList[i]) {\n \
    \           var index = vowels.firstIndex(of: messageList[i])!\n            if\
    \ index == vowels.count - 1 {\n                index = -1\n            }\n   \
    \         messageList[i] = vowels[index + 2]\n        } else {\n            messageList[i]\
    \ = messageList[i].uppercased()\n        }\n    }\n    return String(messageList)",
  "\tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tlet alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tvar translatedMessage = \"\"\n\t\n\tfor character in message {\n\t\tlet isUppercase\
    \ = character.isUppercase\n\t\tlet lowercaseCharacter = character.lowercased()\n\
    \t\tif vowels.contains(lowercaseCharacter) {\n\t\t\tlet index = alphabet.index(of:\
    \ lowercaseCharacter)!\n\t\t\tlet newIndex = alphabet.index(index, offsetBy: 2)\n\
    \t\t\tlet newCharacter = alphabet[newIndex]\n\t\t\tif isUppercase {\n\t\t\t\t\
    translatedMessage.append(newCharacter.uppercased())\n\t\t\t} else {\n\t\t\t\t\
    translatedMessage.append(newCharacter)\n\t\t\t}\n\t\t} else {\n\t\t\tif isUppercase\
    \ {\n\t\t\t\ttranslatedMessage.append(lowercaseCharacter.uppercased())\n\t\t\t\
    } else {\n\t\t\t\ttranslatedMessage.append(lowercaseCharacter)\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn translatedMessage", "\t// YOUR CODE HERE\n\tlet chars = Array(message)\n\
    \tvar result: [Character] = []\n\tfor index in 0..<chars.count {\n\t\tlet character\
    \ = chars[index]\n\t\tlet isUpper = CharacterSet.uppercaseLetters.contains(character.unicodeScalars.first!)\n\
    \t\tlet isLower = CharacterSet.lowercaseLetters.contains(character.unicodeScalars.first!)\n\
    \t\tif isUpper || isLower {\n\t\t\tlet unicode = character.unicodeScalars.first!.value\n\
    \t\t\tlet newUnicode = unicode + (isUpper ? -33 : 33)\n\t\t\tlet newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \t\t\tswitch newChar {\n\t\t\tcase \"a\", \"e\", \"i\", \"o\", \"u\":\n\t\t\t\t\
    result.append(Character(UnicodeScalar(newUnicode + 2)!))\n\t\t\tdefault:\n\t\t\
    \t\tresult.append(newChar)\n\t\t\t}\n\t\t} else {\n\t\t\tresult.append(character)\n\
    \t\t}\n\t}\n\treturn String(result)", "    let lowercaseVowels = Set(\"aeiou\"\
    .characters)\n    var encodedMessage = \"\"\n    for scalar in message.unicodeScalars\
    \ {\n        let unicodeIndex = scalar.value\n        let unicodeIsLower = scalar.isLowercase\n\
    \        let unicodeIsVowel = lowercaseVowels.contains(scalar)\n        var newUnicodeIndex\
    \ = unicodeIndex\n        if unicodeIsVowel {\n            newUnicodeIndex +=\
    \ 2\n        }\n        let newUnicodeScalar = UnicodeScalar(newUnicodeIndex)!\n\
    \        let newScalar = unicodeIsLower ? newUnicodeScalar.uppercased() : newUnicodeScalar.lowercased()\n\
    \        encodedMessage.append(newScalar)\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for char in message {\n        encodedMessage\
    \ += String(encodeChar(char: char))\n    }\n    return encodedMessage", "    let\
    \ alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        let charString = String(char)\n        if let index =\
    \ alphabet.firstIndex(of: charString.lowercased()) {\n            if charString\
    \ == charString.lowercased() {\n                encoded += alphabet[(index + 2)\
    \ % alphabet.count].uppercased()\n            } else {\n                encoded\
    \ += alphabet[(index + 2) % alphabet.count]\n            }\n        } else {\n\
    \            encoded += charString\n        }\n    }\n    return encoded", " \
    \   let vowels = Set<Character>(\"aeiou\")\n    let nextVowels = Set<Character>(\"\
    cfjkpq\")\n    let vowelsToNext = zip(vowels, nextVowels).reduce(into: [:]) {\
    \ $0[$1.0] = $1.1 }\n    let nextVowelsToVowels = zip(nextVowels, vowels).reduce(into:\
    \ [:]) { $0[$1.0] = $1.1 }\n    let vowelsToVowels = zip(vowels, vowels).reduce(into:\
    \ [:]) { $0[$1.0] = $1.1 }\n    return String(message.map {\n        let lower\
    \ = Character(\"a\").distance(to: $0) >= 0\n        let upper = Character(\"A\"\
    ).distance(to: $0) >= 0\n        let isVowel = (lower || upper) && vowels.contains($0.lowercased())\n\
    \        let mapped = isVowel ? (vowelsToNext[$0.lowercased()] ?? nextVowelsToVowels[$0.lowercased()]\
    \ ?? vowelsToVowels[$0.lowercased()])! : $0\n        return (lower ? mapped :\
    \ mapped.uppercased())\n    })", '    return ""', "    var encodedMessage = \"\
    \"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = [\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"]\n    for char in message {\n        let lowercase =\
    \ String(char).lowercased()\n        if vowels.contains(lowercase) {\n       \
    \     if let index = alphabet.firstIndex(of: lowercase) {\n                encodedMessage\
    \ += alphabet[index + 2]\n            }\n        } else {\n            encodedMessage\
    \ += String(char).lowercased() == String(char) ? String(char).uppercased() : String(char).lowercased()\n\
    \        }\n    }\n    return encodedMessage", '    return ""', "    return message.map\
    \ { char in\n        switch char {\n        case \"a\", \"e\", \"i\", \"o\", \"\
    u\":\n            let idx = vowels.firstIndex(of: char)\n            let next\
    \ = vowels[(idx! + 2) % vowels.count]\n            return next\n        case \"\
    A\", \"E\", \"I\", \"O\", \"U\":\n            let idx = vowels.firstIndex(of:\
    \ char.lowercased())\n            let next = vowels[(idx! + 2) % vowels.count]\n\
    \            return next.uppercased()\n        default:\n            return char\n\
    \        }\n    }.joined()", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter == false {\n   \
    \         encodedMessage.append(char)\n        } else if String(char).lowercased()\
    \ == String(char) {\n            encodedMessage.append(String(char).uppercased())\n\
    \        } else {\n            encodedMessage.append(String(char).lowercased())\n\
    \        }\n    }\n    for char in encodedMessage {\n        if vowels.contains(String(char))\
    \ {\n            let charIndex = alphabet.index(of: char)\n            let newVowelIndex\
    \ = charIndex! + 2\n            encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ String(char), with: String(alphabet[newVowelIndex]))\n        }\n    }\n   \
    \ return encodedMessage", "    let messageChars = message.map { $0 }\n    let\
    \ vowels = \"aeiou\"\n    var encodedChars = [Character]()\n    for c in messageChars\
    \ {\n        if vowels.contains(c) {\n            let vowelIndex = vowels.firstIndex(of:\
    \ c)!\n            let newVowelIndex = (vowelIndex + 2) % vowels.count\n     \
    \       encodedChars.append(vowels[newVowelIndex])\n        } else {\n       \
    \     let lowerC = Character(String(c).lowercased())\n            let upperC =\
    \ Character(String(c).uppercased())\n            encodedChars.append(c == lowerC\
    \ ? upperC : lowerC)\n        }\n    }\n    return String(encodedChars)", "  \
    \  let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alpha:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let alphaMapping: [Character:\
    \ Character] = [\"a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"o\": \"q\", \"u\"\
    : \"y\"]\n    var encodedMessage = \"\"\n    for char in message {\n        if\
    \ vowels.contains(char) {\n            encodedMessage.append(alphaMapping[char]!)\n\
    \        } else if alpha.contains(char) {\n            let index = alpha.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alpha.count\n            encodedMessage.append(alpha[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let letters = Array(message)\n    var result\
    \ = [Character]()\n    let vowels = CharacterSet(charactersIn: \"aeiou\")\n  \
    \  let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in letters\
    \ {\n        if String(letter).rangeOfCharacter(from: vowels) != nil {\n     \
    \       let idx = (alphabet.firstIndex(of: letter)! + 2) % alphabet.count\n  \
    \          result.append(alphabet[idx])\n        } else {\n            result.append(letter)\n\
    \        }\n    }\n    return String(result)", "    // TODO: Implement this function\n\
    \    return \"\"", "\tlet vowels = \"aeiou\"\n\tlet alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tvar encoded = \"\"\n\tfor char in message {\n\t\tif vowels.contains(char)\
    \ {\n\t\t\tlet index = alphabet.index(of: char)\n\t\t\tlet nextIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n\t\t\tencoded.append(alphabet[nextIndex])\n\t\t} else {\n\t\t\t\
    encoded.append(char)\n\t\t}\n\t}\n\treturn encoded", "    // TODO: Write some\
    \ code to solve this coding challenge\n    return \"\"", "    let characters =\
    \ message.characters.map { (character) -> Character in\n        if \"aeiou\".characters.contains(character)\
    \ {\n            return \"eaiou\".characters[character.distance(to: \"e\")]\n\
    \        } else if \"AEIOU\".characters.contains(character) {\n            return\
    \ \"EAIOU\".characters[character.distance(to: \"E\")]\n        } else if \"abcdefghijklmnopqrstuvwxyz\"\
    .characters.contains(character) {\n            return \"cdefghijklmnopqrstuvwxyzab\"\
    .characters[character.distance(to: \"c\")]\n        } else if \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .characters.contains(character) {\n            return \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\
    .characters[character.distance(to: \"C\")]\n        } else {\n            return\
    \ character\n        }\n    }\n    return String(characters)", '    return ""',
  "    var result = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetArray = Array(alphabet)\n\
    \    for i in message {\n        var letter = String(i)\n        if letter.lowercased()\
    \ == letter {\n            letter = letter.uppercased()\n        } else {\n  \
    \          letter = letter.lowercased()\n        }\n        if vowels.contains(letter.lowercased())\
    \ {\n            let vowelIndex = alphabetArray.firstIndex(of: letter.lowercased())\n\
    \            if vowelIndex! < alphabetArray.count - 2 {\n                letter\
    \ = alphabetArray[vowelIndex! + 2]\n            } else {\n                letter\
    \ = alphabetArray[vowelIndex! - 24]\n            }\n        }\n        result.append(letter)\n\
    \    }\n    return result", '    return message.replacingOccurrences(of: "[a-z]",
    with: "", options: .regularExpression)', "    var result = \"\"\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let upperVowels = [\"A\", \"E\",\
    \ \"I\", \"O\", \"U\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  let upperAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for i in message {\n\
    \        if let index = alphabet.firstIndex(of: i) {\n            let shifted\
    \ = alphabet.index(index, offsetBy: 2)\n            result.append(alphabet[shifted])\n\
    \        } else if let index = upperAlphabet.firstIndex(of: i) {\n           \
    \ let shifted = upperAlphabet.index(index, offsetBy: 2)\n            result.append(upperAlphabet[shifted])\n\
    \        } else if vowels.contains(String(i)) {\n            result.append(upperVowels[vowels.firstIndex(of:\
    \ String(i))!])\n        } else {\n            result.append(i)\n        }\n \
    \   }\n    return result", "    return message.enumerated().map { (i, c) -> String\
    \ in\n        if c.isUppercase {\n            return String(c.lowercased().next(forward:\
    \ 2))\n        } else if c.isLowercase {\n            return String(c.uppercased().next(forward:\
    \ 2))\n        } else {\n            return String(c)\n        }\n    }.joined()",
  "    // TODO: Implement me\n    var encodedString = \"\"\n    var offset = 0\n \
    \   var newChar = \"\"\n    for char in message {\n        switch char {\n   \
    \     case \"a\":\n            offset = 2\n            newChar = \"c\"\n     \
    \   case \"A\":\n            offset = 2\n            newChar = \"C\"\n       \
    \ case \"e\":\n            offset = 2\n            newChar = \"g\"\n        case\
    \ \"E\":\n            offset = 2\n            newChar = \"G\"\n        case \"\
    i\":\n            offset = 2\n            newChar = \"k\"\n        case \"I\"\
    :\n            offset = 2\n            newChar = \"K\"\n        case \"o\":\n\
    \            offset = 2\n            newChar = \"q\"\n        case \"O\":\n  \
    \          offset = 2\n            newChar = \"Q\"\n        case \"u\":\n    \
    \        offset = 2\n            newChar = \"y\"\n        case \"U\":\n      \
    \      offset = 2\n            newChar = \"Y\"\n        default:\n           \
    \ offset = 0\n            newChar = String(char)\n        }\n        encodedString.append(newChar)\n\
    \    }\n    return encodedString", "    return message.map {\n        if let index\
    \ = \"AEIOU\".index(of: $0) {\n            let value = \"AEIOU\".index(index,\
    \ offsetBy: 2)\n            return \"AEIOU\"[value]\n        } else if let index\
    \ = \"aeiou\".index(of: $0) {\n            let value = \"aeiou\".index(index,\
    \ offsetBy: 2)\n            return \"aeiou\"[value]\n        } else if let index\
    \ = \"abcdefghijklmnopqrstuvwxyz\".index(of: $0) {\n            let value = \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\".index(index, offsetBy: 0)\n            return \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[value]\n        } else if let index = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .index(of: $0) {\n            let value = \"abcdefghijklmnopqrstuvwxyz\".index(index,\
    \ offsetBy: 0)\n            return \"abcdefghijklmnopqrstuvwxyz\"[value]\n   \
    \     } else {\n            return $0\n        }\n    }.joined()", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let encodedChar = encode(char: char)\n\
    \        encodedMessage.append(encodedChar)\n    }\n    return encodedMessage",
  "    // To make this much easier, I will set all letters to lowercase\n    let downcase\
    \ = message.lowercased()\n    // Initiate a variable that will contain the new\
    \ string\n    var new = \"\"\n    // Loop through the string\n    for char in\
    \ downcase {\n        // Check each char to see if it is a vowel\n        if char\
    \ == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\"\
    \ {\n            // Instead of checking the character again, I will add the 2nd\
    \ next character to the string.\n            switch char {\n            case \"\
    a\":\n                new.append(\"c\")\n            case \"e\":\n           \
    \     new.append(\"g\")\n            case \"i\":\n                new.append(\"\
    k\")\n            case \"o\":\n                new.append(\"s\")\n           \
    \ case \"u\":\n                new.append(\"y\")\n            default:\n     \
    \           break\n            }\n        } else {\n            // Else, if it's\
    \ not a vowel, add it to the string\n            new.append(char)\n        }\n\
    \    }\n    // Return the string\n    return new", "  var result = \"\"\n  for\
    \ char in message {\n    let encoded = encode(char: char)\n    result.append(encoded)\n\
    \  }\n  return result", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    var encoded = \"\"\n    for letter in message {\n        if vowels.contains(letter)\
    \ {\n            encoded.append(vowels[(vowels.firstIndex(of: letter)! + 2) %\
    \ vowels.count])\n        } else {\n            encoded.append(letter)\n     \
    \   }\n    }\n    return encoded.uppercased()", "    return message.map { char\
    \ in\n        switch char {\n        case \"a\", \"e\", \"i\", \"o\", \"u\":\n\
    \            return String(char).uppercased()\n        case \"A\", \"E\", \"I\"\
    , \"O\", \"U\":\n            return String(char).lowercased()\n        default:\n\
    \            return String(char)\n        }\n    }.joined()", "    // Your code\
    \ here.\n    return \"\";", '  return ""', "    var newMessage = \"\"\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for character in message {\n\
    \        if let index = letters.firstIndex(of: character) {\n            if vowels.contains(character)\
    \ {\n                newMessage.append(letters[(index + 2) % 26])\n          \
    \  } else {\n                newMessage.append(letters[(index + 26) % 26])\n \
    \           }\n        } else {\n            newMessage.append(character)\n  \
    \      }\n    }\n    return newMessage", "    let uppercase = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    let lowercase = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let vowels =\
    \ Set(\"aeiou\")\n    var newMessage = \"\"\n    for character in message {\n\
    \        if let index = uppercase.firstIndex(of: character) {\n            if\
    \ let newIndex = uppercase.index(index, offsetBy: 2, limitedBy: uppercase.count\
    \ - 1) {\n                if vowels.contains(uppercase[newIndex]) {\n        \
    \            newMessage.append(uppercase[newIndex])\n                } else {\n\
    \                    newMessage.append(uppercase[newIndex])\n                }\n\
    \            } else {\n                newMessage.append(character)\n        \
    \    }\n        } else if let index = lowercase.firstIndex(of: character) {\n\
    \            if let newIndex = lowercase.index(index, offsetBy: 2, limitedBy:\
    \ lowercase.count - 1) {\n                if vowels.contains(lowercase[newIndex])\
    \ {\n                    newMessage.append(lowercase[newIndex])\n            \
    \    } else {\n                    newMessage.append(lowercase[newIndex])\n  \
    \              }\n            } else {\n                newMessage.append(character)\n\
    \            }\n        } else {\n            newMessage.append(character)\n \
    \       }\n    }\n    return newMessage", "    let vowels = \"aeiou\"\n    let\
    \ message = message.lowercased()\n    var encoded = \"\"\n    for letter in message\
    \ {\n        if vowels.contains(letter) {\n            let vowelIndex = vowels.firstIndex(of:\
    \ letter)!\n            encoded.append(vowels[vowelIndex + 2])\n        } else\
    \ {\n            encoded.append(letter)\n        }\n    }\n    return encoded",
  '    return String()', "    /// First we define a list of vowels that are used in\
    \ english\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var message\
    \ = message\n    for index in message.indices {\n        let character = message[index]\n\
    \        /// Convert the string to lowercase to be able to compare to vowels\n\
    \        let lowercaseCharacter = String(character).lowercased()\n        ///\
    \ Check if the character is a vowel\n        if vowels.contains(lowercaseCharacter)\
    \ {\n            /// Index of the character in the vowels array\n            let\
    \ vowelIndex = vowels.firstIndex(of: lowercaseCharacter)!\n            /// Determine\
    \ the index of the letter that appears 2 places after the vowel\n            let\
    \ nextLetterIndex = (vowelIndex + 2) % vowels.count\n            /// Remove the\
    \ vowel and insert the letter two places ahead\n            message.remove(at:\
    \ index)\n            message.insert(contentsOf: vowels[nextLetterIndex], at:\
    \ index)\n        } else {\n            /// Convert to uppercase the non-vowels\
    \ characters\n            message.replaceSubrange(index...index, with: String(character).uppercased())\n\
    \        }\n    }\n    return message", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let letters = [Character](message)\n    var encoded = \"\"\
    \n    for char in letters {\n        let isLower = char.isLowercase\n        let\
    \ isUpper = char.isUppercase\n        var encodedChar = char\n        if isLower\
    \ || isUpper {\n            if isLower {\n                encodedChar = Character(char.uppercased())\n\
    \            }\n            if vowels.contains(String(encodedChar)) {\n      \
    \          var newIndex = letters.firstIndex(of: encodedChar)! + 2\n         \
    \       if newIndex > 25 {\n                    newIndex -= 26\n             \
    \   }\n                encodedChar = letters[newIndex]\n            }\n      \
    \      if isLower {\n                encodedChar = Character(encodedChar.lowercased())\n\
    \            }\n        }\n        encoded.append(encodedChar)\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let unicodeScalars = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let scalars = unicodeScalars.unicodeScalars\n    let values = scalars.map\
    \ { $0.value }\n    for letter in message {\n        if let asciiValue = letter.asciiValue\
    \ {\n            let index = Int(asciiValue)\n            var indexToAdd = 2\n\
    \            if asciiValue.isUppercase {\n                indexToAdd = -2\n  \
    \          }\n            if vowels.contains(letter) {\n                let value\
    \ = values[(index + indexToAdd) % 26]\n                let character = Character(UnicodeScalar(value)!)\n\
    \                encodedMessage.append(character)\n            } else {\n    \
    \            let newLetter = Character(UnicodeScalar(index + indexToAdd)!)\n \
    \               encodedMessage.append(newLetter)\n            }\n        }\n \
    \   }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    var input = message.lowercased()\n    // guard let index = vowels.index(of:\
    \ input) else { return input }\n    for letter in input {\n        let temp =\
    \ String(letter)\n        if vowels.contains(temp) {\n            if let index\
    \ = vowels.index(of: temp) {\n                if index == 4 {\n              \
    \      encodedMessage.append(vowels[0])\n                } else {\n          \
    \          encodedMessage.append(vowels[index + 2])\n                }\n     \
    \       }\n        } else if letters.contains(temp) {\n            if let index\
    \ = letters.index(of: temp) {\n                if index == 25 {\n            \
    \        encodedMessage.append(letters[0])\n                } else {\n       \
    \             encodedMessage.append(letters[index + 2])\n                }\n \
    \           }\n        } else {\n            encodedMessage.append(letter)\n \
    \       }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                encodedMessage.append(Character(ascii: char.asciiValue! +\
    \ 32))\n            } else {\n                encodedMessage.append(Character(ascii:\
    \ char.asciiValue! - 32))\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"A\", with: \"C\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"a\", with: \"c\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"E\", with: \"G\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"e\", with: \"g\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"I\", with: \"K\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"i\", with: \"k\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"O\", with: \"Q\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"o\", with: \"q\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"U\", with: \"S\")\n    encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ \"u\", with: \"s\")\n    return encodedMessage", "  let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  let alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  let\
    \ encodedMessage = message.map { character -> String in\n    let charString =\
    \ String(character)\n    if vowels.contains(charString.lowercased()) {\n     \
    \ if charString.lowercased() == \"u\" {\n        return \"a\"\n      } else {\n\
    \        return alphabet[alphabet.firstIndex(of: charString.lowercased())! + 2]\n\
    \      }\n    } else {\n      return charString\n    }\n  }\n  return encodedMessage.joined()",
  "    var encodedMessage = \"\"\n    var lowercasedMessage = message.lowercased()\n\
    \    var alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    for char in lowercasedMessage\
    \ {\n        if char == \" \" {\n            encodedMessage.append(\" \")\n  \
    \      } else if alphabet.contains(char) {\n            let position = alphabet.firstIndex(of:\
    \ char)!\n            let newPosition = position + 2\n            encodedMessage.append(alphabet[newPosition])\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if isVowel(character: char) {\n          \
    \  let encodedChar = characterAfter(char: char, times: 2)\n            encodedMessage.append(encodedChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2 = \"\
    fgjlnprtv\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = vowels.firstIndex(of: char) {\n        \
    \    encodedMessage.append(vowels2[vowels2.index(index, offsetBy: 2)])\n     \
    \   } else if let index = vowels2.firstIndex(of: char) {\n            encodedMessage.append(vowels[vowels.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let encoded = message.map\
    \ { letter -> Character in\n        let lowerLetter = letter.lowercased()\n  \
    \      if \"aeiou\".contains(lowerLetter) {\n            var encodedLetter = letter\n\
    \            encodedLetter.unicodeScalars.forEach {\n                $0.value\
    \ += 2\n            }\n            return encodedLetter\n        } else {\n  \
    \          return letter\n        }\n    }\n    return String(encoded).swapCase()",
  "    var encoded = \"\"\n    for char in message {\n        switch char {\n    \
    \    case \"A\", \"a\":\n            encoded += \"C\"\n        case \"E\", \"\
    e\":\n            encoded += \"G\"\n        case \"I\", \"i\":\n            encoded\
    \ += \"K\"\n        case \"O\", \"o\":\n            encoded += \"Q\"\n       \
    \ case \"U\", \"u\":\n            encoded += \"S\"\n        case \"a\"...\"z\"\
    :\n            encoded += String(Character(UnicodeScalar(UInt8(char.asciiValue!\
    \ + 2))!))\n        case \"A\"...\"Z\":\n            encoded += String(Character(UnicodeScalar(UInt8(char.asciiValue!\
    \ + 2))!))\n        default:\n            encoded += String(char)\n        }\n\
    \    }\n    return encoded", "    let vowels: [Character] = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let chars = Array(message)\n    var newChars: [Character]\
    \ = []\n    for char in chars {\n        if vowels.contains(char) {\n        \
    \    let index = vowels.firstIndex(of: char)!\n            let nextVowel = (index\
    \ + 2) % vowels.count\n            newChars.append(vowels[nextVowel])\n      \
    \  } else {\n            newChars.append(char)\n        }\n    }\n    return String(newChars).uppercased()",
  '    return ""', "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n    let dict = [\"a\":\"c\", \"e\":\"g\", \"i\":\"k\", \"o\":\"q\",\
    \ \"u\":\"y\"]\n    var result = \"\"\n    for letter in message {\n        let\
    \ ascii = letter.asciiValue\n        if ascii != nil {\n            if let asciiInt\
    \ = Int(ascii!) {\n                if asciiInt >= 65 && asciiInt <= 90 {\n   \
    \                 result.append(Character(UnicodeScalar(asciiInt + 32)!))\n  \
    \              } else if asciiInt >= 97 && asciiInt <= 122 {\n               \
    \     result.append(Character(UnicodeScalar(asciiInt - 32)!))\n              \
    \  } else {\n                    result.append(letter)\n                }\n  \
    \          }\n        }\n    }\n    var result2 = \"\"\n    for letter in result\
    \ {\n        if vowels.contains(letter) {\n            result2.append(dict[String(letter)]!)\n\
    \        } else {\n            result2.append(letter)\n        }\n    }\n    return\
    \ result2", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    for char\
    \ in message {\n        if char.isLetter {\n            let index = vowels.index(of:\
    \ char.lowercased())\n            if let index = index {\n                let\
    \ newIndex = (index + 2) % vowels.count\n                encoded.append(vowels[newIndex].uppercased())\n\
    \            } else {\n                encoded.append(char.uppercased())\n   \
    \         }\n        } else {\n            encoded.append(char)\n        }\n \
    \   }\n    return encoded", "  var encodedMessage = \"\"\n  let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  let nextTwoLetters = \"fgijklmnopqrstuvwxyzabcd\"\
    \n  for letter in message {\n    if vowels.contains(String(letter).lowercased())\
    \ {\n      let letterIndex = nextTwoLetters.index(nextTwoLetters.startIndex, offsetBy:\
    \ vowels.firstIndex(of: String(letter).lowercased())!)\n      encodedMessage.append(nextTwoLetters[letterIndex])\n\
    \    } else {\n      encodedMessage.append(letter)\n    }\n  }\n  return encodedMessage",
  "    let letters = message.map { $0 }\n    var encoded = \"\"\n    for letter in\
    \ letters {\n        var encodedLetter = letter\n        switch letter {\n   \
    \     case \"a\":\n            encodedLetter = \"c\"\n        case \"A\":\n  \
    \          encodedLetter = \"C\"\n        case \"e\":\n            encodedLetter\
    \ = \"g\"\n        case \"E\":\n            encodedLetter = \"G\"\n        case\
    \ \"i\":\n            encodedLetter = \"k\"\n        case \"I\":\n           \
    \ encodedLetter = \"K\"\n        case \"o\":\n            encodedLetter = \"q\"\
    \n        case \"O\":\n            encodedLetter = \"Q\"\n        case \"u\":\n\
    \            encodedLetter = \"s\"\n        case \"U\":\n            encodedLetter\
    \ = \"S\"\n        default:\n            if let letter = UnicodeScalar(String(letter)),\
    \ letter.isLetter {\n                let next = letter.next()\n              \
    \  let nextNext = next?.next()\n                if let nextNext = nextNext {\n\
    \                    encodedLetter = Character(nextNext)\n                }\n\
    \            }\n        }\n        encoded.append(encodedLetter)\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for ch in message {\n        if vowels.contains(ch)\
    \ {\n            let i = vowels.firstIndex(of: ch)!\n            encoded.append(vowels[i+2\
    \ % vowels.count])\n        } else if letters.contains(ch) {\n            let\
    \ i = letters.firstIndex(of: ch)!\n            encoded.append(letters[i+2 % letters.count])\n\
    \        } else {\n            encoded.append(ch)\n        }\n    }\n    return\
    \ encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let asciiOffset = Int((\"a\" as UnicodeScalar).value)\n    let encodedCharacters\
    \ = message.map { character -> Character in\n        var encodedCharacter = character\n\
    \        if let characterAsciiValue = character.asciiValue {\n            if vowels.contains(character)\
    \ {\n                let encodedAsciiValue = (Int(characterAsciiValue) + 2) %\
    \ 26 + asciiOffset\n                let encodedUnicodeScalar = UnicodeScalar(encodedAsciiValue)!\n\
    \                encodedCharacter = Character(encodedUnicodeScalar)\n        \
    \    }\n            let isUppercase = characterAsciiValue >= 65 && characterAsciiValue\
    \ <= 90\n            if isUppercase {\n                let encodedAsciiValue =\
    \ Int(characterAsciiValue) + 32\n                let encodedUnicodeScalar = UnicodeScalar(encodedAsciiValue)!\n\
    \                encodedCharacter = Character(encodedUnicodeScalar)\n        \
    \    } else {\n                let encodedAsciiValue = Int(characterAsciiValue)\
    \ - 32\n                let encodedUnicodeScalar = UnicodeScalar(encodedAsciiValue)!\n\
    \                encodedCharacter = Character(encodedUnicodeScalar)\n        \
    \    }\n        }\n        return encodedCharacter\n    }\n    return String(encodedCharacters)",
  "    // your code here\n    return \"\"", "    // Converts a string to a character\
    \ array\n    var characters = Array(message)\n    for i in 0..<characters.count\
    \ {\n        // Checks if the current character is uppercase\n        if characters[i].isUppercase\
    \ {\n            // If so, convert it to lowercase\n            characters[i]\
    \ = characters[i].lowercased()\n        } else {\n            // Otherwise, convert\
    \ it to uppercase\n            characters[i] = characters[i].uppercased()\n  \
    \      }\n        // Checks if the current character is a vowel\n        if isVowel(character:\
    \ characters[i]) {\n            // If so, convert it to the character 2 places\
    \ after it\n            characters[i] = replaceVowel(character: characters[i])\n\
    \        }\n    }\n    // Returns the modified string\n    return String(characters)",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabets:\
    \ [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        var index = alphabets.firstIndex(of:\
    \ letter)\n        if index != nil {\n            index = index! + 2\n       \
    \     if index! >= alphabets.count {\n                index = index! - alphabets.count\n\
    \            }\n            encodedMessage.append(alphabets[index!])\n       \
    \ } else {\n            index = alphabets.firstIndex(of: Character(letter.lowercased()))\n\
    \            if index != nil {\n                index = index! + 2\n         \
    \       if index! >= alphabets.count {\n                    index = index! - alphabets.count\n\
    \                }\n                encodedMessage.append(alphabets[index!].uppercased())\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    return encodedMessage", "    // your code here\n\
    \    return \"\"", '    return ""', "    return message.map { (letter) -> Character\
    \ in\n        guard letter.isLetter else { return letter }\n        switch letter\
    \ {\n        case \"a\", \"A\":\n            return letter.isUppercase ? \"C\"\
    \ : \"c\"\n        case \"e\", \"E\":\n            return letter.isUppercase ?\
    \ \"G\" : \"g\"\n        case \"i\", \"I\":\n            return letter.isUppercase\
    \ ? \"K\" : \"k\"\n        case \"o\", \"O\":\n            return letter.isUppercase\
    \ ? \"M\" : \"m\"\n        case \"u\", \"U\":\n            return letter.isUppercase\
    \ ? \"Q\" : \"q\"\n        default:\n            return letter.isUppercase ? Character(letter.lowercased())\
    \ : Character(letter.uppercased())\n        }\n    }.joined()", "\tlet vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tlet letters: Set<Character>\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n\t\n\tvar encoded = \"\"\n\tvar a = \"a\"\n\t\
    var i = 1\n\twhile i < 26 {\n\t\tlet c = Character(a)\n\t\tif vowels.contains(c)\
    \ {\n\t\t\tif (letters.contains(Character(a.uppercased()))) {\n\t\t\t\tencoded.append(c.uppercased())\n\
    \t\t\t} else {\n\t\t\t\tencoded.append(c)\n\t\t\t}\n\t\t} else {\n\t\t\tif (letters.contains(Character(a.lowercased())))\
    \ {\n\t\t\t\tencoded.append(c.lowercased())\n\t\t\t} else {\n\t\t\t\tencoded.append(c)\n\
    \t\t\t}\n\t\t}\n\t\ta = String(UnicodeScalar(UInt8(a, radix: 16)! + 1)!)\n\t\t\
    i += 1\n\t}\n\t\n\tvar newMessage = \"\"\n\tfor c in message {\n\t\tif vowels.contains(c)\
    \ {\n\t\t\tlet index = encoded.index(encoded.startIndex, offsetBy: 3)\n\t\t\t\
    newMessage.append(encoded[index])\n\t\t} else {\n\t\t\tif let idx = encoded.index(of:\
    \ c) {\n\t\t\t\tnewMessage.append(c)\n\t\t\t}\n\t\t}\n\t}\n\treturn newMessage",
  "    // open a loop to iterate through the array and change the cases based on\n\
    \    // the rules of the problem.\n    var newMessage = \"\"\n    for letter in\
    \ message {\n        if let char = letter.unicodeScalars.first {\n           \
    \ if char.value >= 65 && char.value <= 90 {\n                newMessage.append(Character(UnicodeScalar(char.value\
    \ + 32)!))\n            } else if char.value >= 97 && char.value <= 122 {\n  \
    \              newMessage.append(Character(UnicodeScalar(char.value - 32)!))\n\
    \            } else if char.value == 97 {\n                newMessage.append(\"\
    C\")\n            } else if char.value == 101 {\n                newMessage.append(\"\
    G\")\n            } else if char.value == 105 {\n                newMessage.append(\"\
    K\")\n            } else if char.value == 111 {\n                newMessage.append(\"\
    O\")\n            } else if char.value == 117 {\n                newMessage.append(\"\
    S\")\n            } else {\n                newMessage.append(letter)\n      \
    \      }\n        }\n    }\n    return newMessage", "    var array = Array(message)\n\
    \    for (index, item) in array.enumerated() {\n        var character = String(item)\n\
    \        if character.lowercased() == \"a\" {\n            character = \"c\"\n\
    \        } else if character.lowercased() == \"e\" {\n            character =\
    \ \"g\"\n        } else if character.lowercased() == \"i\" {\n            character\
    \ = \"k\"\n        } else if character.lowercased() == \"o\" {\n            character\
    \ = \"q\"\n        } else if character.lowercased() == \"u\" {\n            character\
    \ = \"y\"\n        } else if character.lowercased() == \"y\" {\n            character\
    \ = \"b\"\n        } else if character.lowercased() == \"t\" {\n            character\
    \ = \"v\"\n        } else if character.lowercased() == \"r\" {\n            character\
    \ = \"t\"\n        } else if character.lowercased() == \"e\" {\n            character\
    \ = \"g\"\n        } else if character.lowercased() == \"w\" {\n            character\
    \ = \"y\"\n        } else if character.lowercased() == \"q\" {\n            character\
    \ = \"s\"\n        } else if character.lowercased() == \"d\" {\n            character\
    \ = \"f\"\n        } else if character.lowercased() == \"f\" {\n            character\
    \ = \"h\"\n        } else if character.lowercased() == \"g\" {\n            character\
    \ = \"j\"\n        } else if character.lowercased() == \"h\" {\n            character\
    \ = \"l\"\n        } else if character.lowercased() == \"j\" {\n            character\
    \ = \"n\"\n        } else if character.lowercased() == \"k\" {\n            character\
    \ = \"p\"\n        } else if character.lowercased() == \"z\" {\n            character\
    \ = \"a\"\n        } else if character.lowercased() == \"x\" {\n            character\
    \ = \"z\"\n        } else if character.lowercased() == \"c\" {\n            character\
    \ = \"e\"\n        } else if character.lowercased() == \"v\" {\n            character\
    \ =", "    let vowels = \"aeiou\"\n    let offsetVowels = \"cgkmps\"\n    let\
    \ index: [Character:Int] = [\"a\":0, \"e\":1, \"i\":2, \"o\":3, \"u\":4]\n   \
    \ var result = \"\"\n    for char in message {\n        if let i = index[char]\
    \ {\n            result.append(offsetVowels[index[char]!])\n        } else if\
    \ let j = vowels.index(of: char) {\n            result.append(offsetVowels[j])\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result", "    let dictionary = [\n        \"a\": \"c\",\n        \"e\": \"g\"\
    ,\n        \"i\": \"k\",\n        \"o\": \"q\",\n        \"u\": \"w\",\n     \
    \   \"A\": \"C\",\n        \"E\": \"G\",\n        \"I\": \"K\",\n        \"O\"\
    : \"Q\",\n        \"U\": \"W\"\n    ]\n    var encodedString = \"\"\n    for char\
    \ in message {\n        if dictionary[String(char)] != nil {\n            encodedString\
    \ += dictionary[String(char)]!\n        } else {\n            encodedString +=\
    \ String(char)\n        }\n    }\n    return encodedString", "    var result =\
    \ \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    for letter in message {\n        if alphabet.contains(letter) {\n      \
    \      let index = alphabet.firstIndex(of: letter)!\n            let letterUpper\
    \ = alphabetUpper[index]\n            if vowels.contains(letter) {\n         \
    \       let indexForVowel = alphabet.firstIndex(of: letter)!\n               \
    \ if indexForVowel <= 23 {\n                    let indexOfVowelTwoForward = alphabet.index(after:\
    \ indexForVowel)\n                    let indexOfVowelOneForward = alphabet.index(after:\
    \ indexOfVowelTwoForward)\n                    let vowelTwoForward = alphabet[indexOfVowelTwoForward]\n\
    \                    let vowelOneForward = alphabet[indexOfVowelOneForward]\n\
    \                    let vowelTwoForwardUpper = alphabetUpper[indexOfVowelTwoForward]\n\
    \                    let vowelOneForwardUpper = alphabetUpper[indexOfVowelOneForward]\n\
    \                    if alphabet.contains(letter) {\n                        result.append(vowelTwoForward)\n\
    \                    } else {\n                        result.append(vowelTwoForwardUpper)\n\
    \                    }\n                } else {\n                    let startIndex\
    \ = alphabet.startIndex\n                    let indexOfVowelTwoForward = alphabet.index(startIndex,\
    \ offsetBy: 1)\n                    let indexOfVowelOneForward = alphabet.index(startIndex,\
    \ offsetBy: 2)\n                    let vowelTwoForward = alphabet[indexOfVowelTwoForward]\n\
    \                    let vowelOneForward = alphabet[indexOfVowelOneForward]\n\
    \                    let vowelTwoForwardUpper = alphabetUpper[indexOfVowelTwoForward]\n\
    \                    let vowelOneForwardUpper = alphabetUpper[indexOfVowelOneForward]\n\
    \                    if alphabet.contains(letter) {\n                        result.append(vowelTwoForward)\n\
    \                    } else {\n                        result.append(vowelTwoForwardUpper)\n\
    \                    }\n                }", "    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let letterChanges: [Character: Character]\
    \ = [\n        \"b\": \"d\",\n        \"c\": \"f\",\n        \"d\": \"g\",\n \
    \       \"e\": \"h\",\n        \"f\": \"j\",\n        \"g\": \"k\",\n        \"\
    h\": \"l\",\n        \"i\": \"m\",\n        \"j\": \"n\",\n        \"k\": \"p\"\
    ,\n        \"l\": \"q\",\n        \"m\": \"r\",\n        \"n\": \"s\",\n     \
    \   \"o\": \"t\",\n        \"p\": \"v\",\n        \"q\": \"w\",\n        \"r\"\
    : \"x\",\n        \"s\": \"y\",\n        \"t\": \"z\",\n        \"u\": \"a\",\n\
    \        \"v\": \"b\",\n        \"w\": \"c\",\n        \"x\": \"e\",\n       \
    \ \"y\": \"f\",\n        \"z\": \"g\"\n    ]\n    var encodedMessage = \"\"\n\
    \    for char in message {\n        if let lowercaseChar = char.lowercased().first\
    \ {\n            if vowels.contains(lowercaseChar) {\n                if let encodedChar\
    \ = letterChanges[lowercaseChar] {\n                    encodedMessage.append(encodedChar)\n\
    \                }\n            } else {\n                if char.isUppercase\
    \ {\n                    encodedMessage.append(lowercaseChar.uppercased())\n \
    \               } else {\n                    encodedMessage.append(lowercaseChar)\n\
    \                }\n            }\n        }\n    }\n    return encodedMessage",
  '    return ""', "    var message = message\n    let vowelSet = CharacterSet(charactersIn:\
    \ \"aeiou\")\n    let vowels = \"aeiou\"\n    for i in 0..<message.count {\n \
    \       let index = message.index(message.startIndex, offsetBy: i)\n        let\
    \ character = message[index]\n        if character.isUppercase {\n           \
    \ message.replaceSubrange(index...index, with: String(character).lowercased())\n\
    \        } else if character.isLowercase {\n            message.replaceSubrange(index...index,\
    \ with: String(character).uppercased())\n        }\n        if vowelSet.contains(UnicodeScalar(String(character))!)\
    \ {\n            let character = message[index]\n            let vowelIndex =\
    \ vowels.index(of: character)!\n            let correctIndex = vowels.index(after:\
    \ vowelIndex)\n            let correctIndex2 = vowels.index(after: correctIndex)\n\
    \            message.replaceSubrange(index...index, with: String(vowels[correctIndex2]))\n\
    \        }\n    }\n    return message", "    // TODO: Implement\n    return \"\
    \"", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   let vowelKeys: [Character:Character] = [\"a\":\"c\", \"e\":\"g\", \"i\":\"\
    k\", \"o\":\"q\", \"u\":\"y\"]\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            encodedMessage.append(vowelKeys[character]!)\n\
    \        } else if character.isUppercase {\n            encodedMessage.append(character.lowercased())\n\
    \        } else {\n            encodedMessage.append(character.uppercased())\n\
    \        }\n    }\n    return encodedMessage", "    var result = \"\"\n    for\
    \ char in message {\n        var letter = \"\"\n        switch char {\n      \
    \  case \"a\":\n            letter = \"c\"\n        case \"e\":\n            letter\
    \ = \"g\"\n        case \"i\":\n            letter = \"k\"\n        case \"o\"\
    :\n            letter = \"q\"\n        case \"u\":\n            letter = \"y\"\
    \n        default:\n            letter = \"\\(char)\"\n        }\n        let\
    \ newChar = letter.uppercased() == letter ? letter.lowercased() : letter.uppercased()\n\
    \        result += newChar\n    }\n    return result", "\tlet vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n\tvar messageArray = Array(message)\n\tvar encodedMessageArray\
    \ = [String]()\n\tfor i in 0..<messageArray.count {\n\t\tif messageArray[i] ==\
    \ \" \" {\n\t\t\tencodedMessageArray.append(\" \")\n\t\t} else if vowels.contains(String(messageArray[i]).lowercased())\
    \ {\n\t\t\tif messageArray[i] == \"u\" {\n\t\t\t\tencodedMessageArray.append(\"\
    a\")\n\t\t\t} else if messageArray[i] == \"U\" {\n\t\t\t\tencodedMessageArray.append(\"\
    A\")\n\t\t\t} else {\n\t\t\t\tvar letter = messageArray[i]\n\t\t\t\tletter = letter.successor().successor()\n\
    \t\t\t\tencodedMessageArray.append(String(letter))\n\t\t\t}\n\t\t} else {\n\t\t\
    \tencodedMessageArray.append(String(messageArray[i]).uppercased())\n\t\t}\n\t\
    }\n\tlet encodedMessage = encodedMessageArray.joined()\n\treturn encodedMessage",
  "    let lookup: [Character: Character] = [\n        \"a\": \"c\",\n        \"A\"\
    : \"C\",\n        \"e\": \"g\",\n        \"E\": \"G\",\n        \"i\": \"k\",\n\
    \        \"I\": \"K\",\n        \"o\": \"q\",\n        \"O\": \"Q\",\n       \
    \ \"u\": \"y\",\n        \"U\": \"Y\"\n    ]\n    var encoded = \"\"\n    for\
    \ char in message {\n        if let lookupChar = lookup[char] {\n            encoded.append(lookupChar)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  var encoded\
    \ = \"\"\n  for character in message {\n    if character.isLetter {\n      if\
    \ character.isUppercase {\n        encoded.append(character.lowercased())\n  \
    \    } else {\n        encoded.append(character.uppercased())\n      }\n    }\
    \ else {\n      encoded.append(character)\n    }\n  }\n  return encoded", "  \
    \  var encodedMessage = \"\"\n    for character in message {\n        if isVowel(character:\
    \ character) {\n            encodedMessage.append(getNextVowel(currentVowel: character))\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    var result = \"\"\n    for char in message\
    \ {\n        if let newChar = shift(char: char) {\n            result.append(newChar)\n\
    \        }\n    }\n    return result", "    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabets = [\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n    for character in message {\n        if vowels.contains(String(character).lowercased())\
    \ {\n            let index = alphabets.firstIndex(of: String(character).lowercased())\n\
    \            let tempIndex = index! + 2\n            if tempIndex < 26 {\n   \
    \             if String(character).lowercased() == String(character) {\n     \
    \               encodedMessage += alphabets[tempIndex]\n                } else\
    \ {\n                    encodedMessage += alphabets[tempIndex].uppercased()\n\
    \                }\n            } else {\n                let newIndex = tempIndex\
    \ - 26\n                if String(character).lowercased() == String(character)\
    \ {\n                    encodedMessage += alphabets[newIndex]\n             \
    \   } else {\n                    encodedMessage += alphabets[newIndex].uppercased()\n\
    \                }\n            }\n        } else {\n            if String(character).lowercased()\
    \ == String(character) {\n                encodedMessage += String(character).uppercased()\n\
    \            } else {\n                encodedMessage += String(character).lowercased()\n\
    \            }\n        }\n    }\n    return encodedMessage", "\tvar returnValue\
    \ = \"\"\n\tfor character in message {\n\t\tif (character == \"a\") {\n\t\t\t\
    returnValue += \"c\"\n\t\t} else if (character == \"e\") {\n\t\t\treturnValue\
    \ += \"g\"\n\t\t} else if (character == \"i\") {\n\t\t\treturnValue += \"k\"\n\
    \t\t} else if (character == \"o\") {\n\t\t\treturnValue += \"q\"\n\t\t} else if\
    \ (character == \"u\") {\n\t\t\treturnValue += \"y\"\n\t\t} else if (character\
    \ == \"A\") {\n\t\t\treturnValue += \"C\"\n\t\t} else if (character == \"E\")\
    \ {\n\t\t\treturnValue += \"G\"\n\t\t} else if (character == \"I\") {\n\t\t\t\
    returnValue += \"K\"\n\t\t} else if (character == \"O\") {\n\t\t\treturnValue\
    \ += \"Q\"\n\t\t} else if (character == \"U\") {\n\t\t\treturnValue += \"Y\"\n\
    \t\t} else {\n\t\t\treturnValue += String(character)\n\t\t}\n\t}\n\treturn returnValue",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        let index = String(char).lowercased().firstIndex(of:\
    \ char)\n        if let index = index {\n            if vowels.contains(char)\
    \ {\n                let newIndex = (index < vowels.index(before: vowels.endIndex))\
    \ ? index : vowels.startIndex\n                let move = (newIndex < vowels.index(before:\
    \ vowels.endIndex)) ? 2 : 1\n                let changedChar = vowels[vowels.index(newIndex,\
    \ offsetBy: move)]\n                encodedMessage.append(String(changedChar).uppercased())\n\
    \            } else {\n                let newIndex = (index < letters.index(before:\
    \ letters.endIndex)) ? index : letters.startIndex\n                let move =\
    \ (newIndex < letters.index(before: letters.endIndex)) ? 2 : 1\n             \
    \   let changedChar = letters[letters.index(newIndex, offsetBy: move)]\n     \
    \           encodedMessage.append(String(changedChar).uppercased())\n        \
    \    }\n        }\n    }\n    return encodedMessage", "    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = \"abcdefghijklmnopqrstuvwxyz\"\
    .map{$0}\n    var messageArray = message.map{$0}\n    for i in 0..<messageArray.count\
    \ {\n        if messageArray[i].isLetter {\n            let currentChar = messageArray[i]\n\
    \            if let index = alphabet.firstIndex(of: currentChar.lowercased().first!)\
    \ {\n                if index != 25 {\n                    if vowels.contains(currentChar.lowercased().first!)\
    \ {\n                        messageArray[i] = alphabet[index + 2]\n         \
    \           } else {\n                        messageArray[i] = alphabet[index\
    \ + 1]\n                    }\n                } else {\n                    if\
    \ vowels.contains(currentChar.lowercased().first!) {\n                       \
    \ messageArray[i] = alphabet[1]\n                    } else {\n              \
    \          messageArray[i] = alphabet[0]\n                    }\n            \
    \    }\n            }\n        }\n    }\n    var output = String(messageArray)\n\
    \    output = output.uppercased()\n    return output", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for letter in\
    \ message {\n        let char = String(letter)\n        if let index = vowels.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % vowels.count\n\
    \            encodedMessage += vowels[newIndex].uppercased()\n        } else {\n\
    \            encodedMessage += char.uppercased()\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var encoded = \"\"\n    for letter in message {\n        var newLetter\
    \ = letter\n        let aScalarValue = \"a\".unicodeScalars.first!.value\n   \
    \     if let asciiValue = letter.unicodeScalars.first?.value {\n            if\
    \ vowels.contains(letter) {\n                let newCharValue = ((asciiValue -\
    \ aScalarValue + 2) % 26) + aScalarValue\n                newLetter = Character(UnicodeScalar(newCharValue)!)\n\
    \            }\n            newLetter = newLetter.isUppercase ? newLetter.lowercased()\
    \ : newLetter.uppercased()\n        }\n        encoded.append(newLetter)\n   \
    \ }\n    return encoded", "    var encodedMessage = \"\"\n    let messageLowercased\
    \ = message.lowercased()\n    let alphabets = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    for character in messageLowercased {\n        if let index = alphabets.firstIndex(of:\
    \ character) {\n            encodedMessage += alphabets[(index + 2) % 26].uppercased()\n\
    \        } else {\n            encodedMessage += character.uppercased()\n    \
    \    }\n    }\n    return encodedMessage", "    let letters: [Character] = [\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"]\n    var encoded = \"\"\n    for letter in message {\n\
    \        if (letter.isLetter) {\n            if (letter.isUppercase) {\n     \
    \           var index = letters.firstIndex(of: letter.lowercased())!\n       \
    \         index = (index + 2) % 26\n                encoded.append(letters[index].uppercased())\n\
    \            } else {\n                var index = letters.firstIndex(of: letter)!\n\
    \                index = (index + 2) % 26\n                encoded.append(letters[index])\n\
    \            }\n        } else {\n            encoded.append(letter)\n       \
    \ }\n    }\n    return encoded", '    // your code here', "  let vowels = \"AEIOUaeiou\"\
    \n  let allLetters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \  var encoded = \"\"\n  var inVowel = false\n  for char in message {\n    if\
    \ allLetters.contains(char) {\n      if vowels.contains(char) {\n        inVowel\
    \ = true\n        encoded.append(char.advanced(by: 2))\n      } else {\n     \
    \   if inVowel {\n          encoded.append(char.advanced(by: -20))\n        }\
    \ else {\n          encoded.append(char.advanced(by: 2))\n        }\n      }\n\
    \    } else {\n      encoded.append(char)\n    }\n  }\n  return encoded", "  \
    \  var myString = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let dict: [Character: Character] = [\"a\": \"c\", \"e\": \"g\"\
    , \"i\": \"k\", \"o\": \"q\", \"u\": \"y\"]\n    for character in message {\n\
    \        if String(character).lowercased() == String(character) {\n          \
    \  if vowels.contains(character) {\n                myString.append(dict[character]!)\n\
    \            } else {\n                myString.append(character)\n          \
    \  }\n        } else {\n            if vowels.contains(character.lowercased().first!)\
    \ {\n                myString.append(dict[character.lowercased().first!]!.uppercased())\n\
    \            } else {\n                myString.append(character.lowercased().first!)\n\
    \            }\n        }\n    }\n    return myString", "    var encoded = \"\"\
    \n    let mapping = [\"a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"o\": \"q\", \"\
    u\": \"w\"]\n    for letter in message {\n        if let char = String(letter).lowercased().unicodeScalars.first\
    \ {\n            switch char {\n            case \"a\", \"e\", \"i\", \"o\", \"\
    u\":\n                encoded += mapping[String(letter).lowercased()] ?? \"\"\n\
    \            default:\n                encoded += String(letter).uppercased()\n\
    \            }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\
    \n    let newVowels = \"cfilor\"\n    var result = message.lowercased()\n    result\
    \ = result.map {\n        if vowels.contains($0) {\n            let index = vowels.firstIndex(of:\
    \ $0)!\n            return newVowels[index]\n        } else {\n            return\
    \ $0\n        }\n    }\n    return result", "    let vowels = \"aeiou\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var results = \"\"\n    for letter\
    \ in message {\n        let lowercased = String(letter).lowercased()\n       \
    \ if vowels.contains(lowercased) {\n            if let letterIndex = letters.firstIndex(of:\
    \ lowercased) {\n                let shiftedIndex = letterIndex.advanced(by: 2)\n\
    \                results.append(letters[shiftedIndex])\n            }\n      \
    \  } else {\n            results.append(letter)\n        }\n    }\n    return\
    \ results", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let vowelsInAlphabet = \"aeiou\"\n    let newVowelsInAlphabet = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowelsAndConsonants = message.map { char -> String in\n        let newChar\
    \ = String(char).lowercased()\n        if vowels.contains(Character(newChar))\
    \ {\n            guard let positionOfVowel = vowelsInAlphabet.firstIndex(of: Character(newChar))\
    \ else {\n                fatalError(\"Could not find vowel \\(newChar) in alphabet\"\
    )\n            }\n            let positionOfNewVowel = vowelsInAlphabet.index(positionOfVowel,\
    \ offsetBy: 2)\n            let newVowel = newVowelsInAlphabet[positionOfNewVowel]\n\
    \            return String(newVowel).uppercased()\n        } else {\n        \
    \    return String(char).uppercased()\n        }\n    }\n    return vowelsAndConsonants.joined()",
  "    //: Your code goes here\n    return \"\"", "    var messageCopy = message\n\
    \    messageCopy = messageCopy.lowercased()\n    var encoded = \"\"\n    var index\
    \ = 0\n    for char in messageCopy {\n        if char == \"a\" {\n           \
    \ encoded.append(\"c\")\n        } else if char == \"e\" {\n            encoded.append(\"\
    g\")\n        } else if char == \"i\" {\n            encoded.append(\"k\")\n \
    \       } else if char == \"o\" {\n            encoded.append(\"q\")\n       \
    \ } else if char == \"u\" {\n            encoded.append(\"w\")\n        } else\
    \ {\n            encoded.append(message[message.index(message.startIndex, offsetBy:\
    \ index)])\n        }\n        index += 1\n    }\n    return encoded", "    //\
    \ Convert the message to lower case.\n    let lowercase = message.lowercased()\n\
    \    // Convert the string to an array of characters.\n    let array = Array(lowercase)\n\
    \    // Create a variable to hold the encoded message.\n    var encoded = \"\"\
    \n    // For each character in the array\n    for char in array {\n        //\
    \ Check if the character is a consonant.\n        if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            switch\
    \ char {\n            case \"a\":\n                encoded += \"c\"\n        \
    \    case \"e\":\n                encoded += \"g\"\n            case \"i\":\n\
    \                encoded += \"k\"\n            case \"o\":\n                encoded\
    \ += \"m\"\n            case \"u\":\n                encoded += \"s\"\n      \
    \      default:\n                encoded += char.uppercased()\n            }\n\
    \        } else {\n            encoded += char.uppercased()\n        }\n    }\n\
    \    return encoded", "    var encodedMessage = \"\"\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    for letter in message {\n        if let asciiValue\
    \ = letter.asciiValue {\n            if asciiValue >= 65 && asciiValue <= 90 {\n\
    \                if let newAsciiValue = asciiValue + 33 {\n                  \
    \  if let newLetter = UnicodeScalar(newAsciiValue) {\n                       \
    \ encodedMessage.append(Character(newLetter))\n                    }\n       \
    \         }\n            } else if asciiValue >= 97 && asciiValue <= 122 {\n \
    \               if let newAsciiValue = asciiValue - 31 {\n                   \
    \ if let newLetter = UnicodeScalar(newAsciiValue) {\n                        encodedMessage.append(Character(newLetter))\n\
    \                    }\n                }\n            } else {\n            \
    \    encodedMessage.append(letter)\n            }\n        }\n    }\n    var returnValue\
    \ = \"\"\n    for character in encodedMessage {\n        if let letter = String(character).lowercased().first\
    \ {\n            if vowels.contains(String(letter)) {\n                if let\
    \ newLetter = UnicodeScalar(String(letter).asciiValue! + 2) {\n              \
    \      returnValue.append(Character(newLetter))\n                }\n         \
    \   } else {\n                returnValue.append(character)\n            }\n \
    \       }\n    }\n    return returnValue", "    var result = \"\"\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter\
    \ in message {\n        if vowels.contains(letter) {\n            let index =\
    \ letters.firstIndex(of: letter)\n            let newIndex = letters.index(index!,\
    \ offsetBy: 2)\n            result.append(letters[newIndex])\n        } else {\n\
    \            result.append(letter)\n        }\n    }\n    return result", "  \
    \  let letters = message.lowercased().characters.map { String($0) }\n    let alphabets\
    \ = \"abcdefghijklmnopqrstuvwxyz\".characters.map { String($0) }\n    var result\
    \ = \"\"\n    var i = 0\n    while i < letters.count {\n        if letters[i]\
    \ == \" \" {\n            result += \" \"\n        } else if letters[i] == \"\
    z\" {\n            result += \"b\"\n        } else if letters[i] == \"a\" {\n\
    \            result += \"c\"\n        } else if letters[i] == \"e\" {\n      \
    \      result += \"g\"\n        } else if letters[i] == \"i\" {\n            result\
    \ += \"k\"\n        } else if letters[i] == \"o\" {\n            result += \"\
    q\"\n        } else if letters[i] == \"u\" {\n            result += \"y\"\n  \
    \      } else {\n            let index = alphabets.index(of: letters[i])!\n  \
    \          result += alphabets[index + 2]\n        }\n        i += 1\n    }\n\
    \    return result.uppercased()", "    let vowels: [Character] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let vowel_indexes: [Int] = [0, 4, 8, 14, 20]\n   \
    \ var encoded_message: String = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowel_indexes.firstIndex(of: char.asciiValue! - 97)!\n\
    \            if index == 4 {\n                encoded_message.append(vowels[0])\n\
    \            } else {\n                encoded_message.append(vowels[index + 1])\n\
    \            }\n        } else if char.isUppercase {\n            encoded_message.append(char.lowercased())\n\
    \        } else {\n            encoded_message.append(char.uppercased())\n   \
    \     }\n    }\n    return encoded_message", "    let messageArray = Array(message)\n\
    \    var encodedMessage = [Character]()\n    let upperCase: [Character] = [\"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"\
    L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"\
    W\", \"X\", \"Y\", \"Z\"]\n    let lowerCase: [Character] = [\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"]\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    for character in messageArray {\n        if upperCase.contains(character)\
    \ {\n            let index = upperCase.firstIndex(of: character)!\n          \
    \  encodedMessage.append(lowerCase[index])\n        } else if lowerCase.contains(character)\
    \ {\n            let index = lowerCase.firstIndex(of: character)!\n          \
    \  encodedMessage.append(upperCase[index])\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    for (index, character) in encodedMessage.enumerated() {\n\
    \        if vowels.contains(character) {\n            encodedMessage[index] =\
    \ vowels[(vowels.firstIndex(of: character)! + 2) % 5]\n        }\n    }\n    return\
    \ String(encodedMessage)", "\tlet vowels: [Character] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n\tvar result = \"\"\n\tfor letter in message {\n\t\tif vowels.contains(letter)\
    \ {\n\t\t\tresult.append(vowels[(vowels.firstIndex(of: letter)! + 2) % vowels.count])\n\
    \t\t} else {\n\t\t\tif letter.isUppercase {\n\t\t\t\tresult.append(letter.lowercased())\n\
    \t\t\t} else {\n\t\t\t\tresult.append(letter.uppercased())\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result", "    let vowels = \"aeiou\".map { String($0) }\n    let vowelsReplaced\
    \ = \"cdfghjklmnpqrstvwxyz\".map { String($0) }\n    var result = \"\"\n    for\
    \ letter in message {\n        if let index = vowels.firstIndex(of: String(letter).lowercased())\
    \ {\n            result += vowelsReplaced[index]\n        } else {\n         \
    \   result += letter\n        }\n    }\n    return result", '    return ""', " \
    \   var encodedMessage = \"\"\n    for char in message {\n        let encodedChar\
    \ = encode(char: char)\n        encodedMessage.append(encodedChar)\n    }\n  \
    \  return encodedMessage", "    return message.lowercased().map { char in\n  \
    \      switch char {\n        case \"a\":\n            return \"c\"\n        case\
    \ \"e\":\n            return \"g\"\n        case \"i\":\n            return \"\
    k\"\n        case \"o\":\n            return \"q\"\n        case \"u\":\n    \
    \        return \"y\"\n        default:\n            return char\n        }\n\
    \    }.uppercased()", "    var encoded = \"\"\n    for character in message {\n\
    \        let char = String(character)\n        let upperCase = char.uppercased()\n\
    \        if char == upperCase {\n            encoded += char.lowercased()\n  \
    \      } else {\n            encoded += upperCase\n        }\n    }\n    return\
    \ encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let letters = Array(message.lowercased())\n\
    \    let encodedLetters = letters.map {\n        if vowels.contains($0) {\n  \
    \          let index = alphabet.firstIndex(of: $0)!\n            return alphabet[index.advanced(by:\
    \ 2)]\n        } else {\n            return String($0).uppercased()\n        }\n\
    \    }\n    return encodedLetters.joined()", '    return ""', "    var encoded\
    \ = \"\"\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for\
    \ char in message {\n        if alphabet.contains(char) {\n            let isUpperCase\
    \ = char.isUpperCase\n            let lowerCaseChar = char.lowercased()\n    \
    \        let index = alphabet.firstIndex(of: lowerCaseChar)!\n            var\
    \ letter: Character\n            if index == 25 {\n                letter = alphabet[1]\n\
    \            } else if index == 24 {\n                letter = alphabet[0]\n \
    \           } else {\n                letter = alphabet[index + 2]\n         \
    \   }\n            if isUpperCase {\n                encoded.append(letter.uppercased())\n\
    \            } else {\n                encoded.append(letter)\n            }\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let lowercasedMessage\
    \ = message.lowercased()\n    var result = \"\"\n    for letter in lowercasedMessage\
    \ {\n        if vowels.contains(String(letter)) {\n            let newLetterIndex\
    \ = ((vowels.firstIndex(of: String(letter))! + 2) % 5)\n            result +=\
    \ vowels[newLetterIndex]\n        } else {\n            result += String(letter)\n\
    \        }\n    }\n    return result.uppercased()", "    var arr = Array(message)\n\
    \    var new = String()\n    for char in arr {\n        let lower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        let index = lower.index(of:\
    \ char)\n        let index2 = upper.index(of: char)\n        if let idx = index\
    \ {\n            if char == \"a\" {\n                new.append(\"c\")\n     \
    \       } else if char == \"e\" {\n                new.append(\"g\")\n       \
    \     } else if char == \"i\" {\n                new.append(\"k\")\n         \
    \   } else if char == \"o\" {\n                new.append(\"q\")\n           \
    \ } else if char == \"u\" {\n                new.append(\"w\")\n            }\
    \ else {\n                new.append(lower[lower.index(idx, offsetBy: 2)])\n \
    \           }\n        } else if let idx2 = index2 {\n            if char == \"\
    A\" {\n                new.append(\"C\")\n            } else if char == \"E\"\
    \ {\n                new.append(\"G\")\n            } else if char == \"I\" {\n\
    \                new.append(\"K\")\n            } else if char == \"O\" {\n  \
    \              new.append(\"Q\")\n            } else if char == \"U\" {\n    \
    \            new.append(\"W\")\n            } else {\n                new.append(upper[upper.index(idx2,\
    \ offsetBy: 2)])\n            }\n        } else {\n            new.append(char)\n\
    \        }\n    }\n    return new", "    let vowels = Set(\"aeiou\")\n    let\
    \ letters = message.lowercased().map({char in\n        if vowels.contains(char)\
    \ {\n            return char.advanced(by: 2)\n        } else {\n            return\
    \ char\n        }\n    })\n    return String(letters).uppercased()", "    var\
    \ res: [Character] = []\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    let uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for c in message {\n\
    \        if lowercase.contains(c) {\n            let index = lowercase.firstIndex(of:\
    \ c)!\n            if index == 25 {\n                res.append(lowercase[lowercase.startIndex])\n\
    \            } else if index == 24 {\n                res.append(lowercase[lowercase.index(after:\
    \ index)])\n            } else {\n                res.append(lowercase[lowercase.index(index,\
    \ offsetBy: 2)])\n            }\n        } else if uppercase.contains(c) {\n \
    \           let index = uppercase.firstIndex(of: c)!\n            if index ==\
    \ 25 {\n                res.append(uppercase[uppercase.startIndex])\n        \
    \    } else if index == 24 {\n                res.append(uppercase[uppercase.index(after:\
    \ index)])\n            } else {\n                res.append(uppercase[uppercase.index(index,\
    \ offsetBy: 2)])\n            }\n        } else {\n            res.append(c)\n\
    \        }\n    }\n    return String(res)", "  var encodedMessage = \"\"\n  for\
    \ character in message {\n    encodedMessage += encodeCharacter(character: character)\n\
    \  }\n  return encodedMessage", "    var encodedMessage = \"\"\n    var allLowercased\
    \ = message.lowercased()\n    for letter in allLowercased {\n        encodedMessage.append(swapCase(letter:\
    \ letter))\n    }\n    return encodedMessage", "    let vowels = \"AEIOUaeiou\"\
    \n    let letters = Array(message)\n    var encoded = [Character]()\n    for letter\
    \ in letters {\n        if letter == \" \" {\n            encoded.append(\" \"\
    )\n        } else if let vowelIndex = vowels.firstIndex(of: letter) {\n      \
    \      let index = vowels.index(vowelIndex, offsetBy: 2)\n            encoded.append(vowels[index])\n\
    \        } else {\n            encoded.append(letter.isUppercase ? letter.lowercased()\
    \ : letter.uppercased())\n        }\n    }\n    return String(encoded)", "\tvar\
    \ result = \"\"\n\tlet lowerMessage = message.lowercased()\n\tlet messageArray\
    \ = Array(lowerMessage)\n\tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\
    let vowelIndices = [0, 4, 8, 14, 20]\n\tlet vowelLetters = [\"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n\tfor index in 0..<messageArray.count {\n\t\tif messageArray[index]\
    \ == \" \" {\n\t\t\tresult += \" \"\n\t\t} else if messageArray[index] == \"z\"\
    \ {\n\t\t\tresult += \"b\"\n\t\t} else if messageArray[index] == \"x\" {\n\t\t\
    \tresult += \"v\"\n\t\t} else if messageArray[index] == \"c\" {\n\t\t\tresult\
    \ += \"e\"\n\t\t} else if messageArray[index] == \"v\" {\n\t\t\tresult += \"x\"\
    \n\t\t} else if messageArray[index] == \"b\" {\n\t\t\tresult += \"d\"\n\t\t} else\
    \ if messageArray[index] == \"n\" {\n\t\t\tresult += \"p\"\n\t\t} else if messageArray[index]\
    \ == \"m\" {\n\t\t\tresult += \"o\"\n\t\t} else if messageArray[index] == \"l\"\
    \ {\n\t\t\tresult += \"n\"\n\t\t} else if messageArray[index] == \"k\" {\n\t\t\
    \tresult += \"m\"\n\t\t} else if messageArray[index] == \"j\" {\n\t\t\tresult\
    \ += \"l\"\n\t\t} else if messageArray[index] == \"h\" {\n\t\t\tresult += \"j\"\
    \n\t\t} else if messageArray[index] == \"g\" {\n\t\t\tresult += \"i\"\n\t\t} else\
    \ if messageArray[index] == \"f\" {\n\t\t\tresult += \"h\"\n\t\t} else if messageArray[index]\
    \ == \"d\" {\n\t\t\tresult += \"f\"\n\t\t} else if messageArray[index] == \"s\"\
    \ {\n\t\t\tresult += \"u\"\n\t\t} else if messageArray[index] == \"", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for\
    \ char in message {\n        switch char {\n        case \"a\", \"e\", \"i\",\
    \ \"o\", \"u\":\n            if let nextIndex = vowels.firstIndex(of: String(char).lowercased())\
    \ {\n                let aheadIndex = nextIndex + 2 > 4 ? 0 : nextIndex + 2\n\
    \                encoded.append(vowels[aheadIndex].uppercased())\n           \
    \ }\n        case \"A\", \"E\", \"I\", \"O\", \"U\":\n            if let nextIndex\
    \ = vowels.firstIndex(of: String(char).lowercased()) {\n                let aheadIndex\
    \ = nextIndex + 2 > 4 ? 0 : nextIndex + 2\n                encoded.append(vowels[aheadIndex])\n\
    \            }\n        default:\n            encoded.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        }\n    }\n    return encoded",
  "    var encoded = \"\"\n    let lowerCase = Set(\"aeiou\")\n    let upperCase =\
    \ Set(\"AEIOU\")\n    let alphabets = Set(\"abcdefghijklmnopqrstuvwxyz\")\n  \
    \  let uppercaseAlphabets = Set(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for char\
    \ in message {\n        if lowerCase.contains(char) {\n            var newChar\
    \ = char\n            var index = newChar.asciiValue! - \"a\".asciiValue!\n  \
    \          index = (index + 2) % 26\n            newChar = Character(UnicodeScalar(index\
    \ + \"a\".asciiValue!)!)\n            encoded.append(newChar)\n        } else\
    \ if upperCase.contains(char) {\n            var newChar = char\n            var\
    \ index = newChar.asciiValue! - \"A\".asciiValue!\n            index = (index\
    \ + 2) % 26\n            newChar = Character(UnicodeScalar(index + \"A\".asciiValue!)!)\n\
    \            encoded.append(newChar)\n        } else if alphabets.contains(char)\
    \ {\n            var newChar = char\n            var index = newChar.asciiValue!\
    \ - \"a\".asciiValue!\n            index = (index + 2) % 26\n            newChar\
    \ = Character(UnicodeScalar(index + \"a\".asciiValue!)!)\n            encoded.append(newChar.uppercased())\n\
    \        } else if uppercaseAlphabets.contains(char) {\n            var newChar\
    \ = char\n            var index = newChar.asciiValue! - \"A\".asciiValue!\n  \
    \          index = (index + 2) % 26\n            newChar = Character(UnicodeScalar(index\
    \ + \"A\".asciiValue!)!)\n            encoded.append(newChar.lowercased())\n \
    \       } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    var encodeMessage = \"\"\n    for\
    \ char in message {\n        if String(char).lowercased() == String(char) {\n\
    \            encodeMessage += String(char).uppercased()\n        } else {\n  \
    \          encodeMessage += String(char).lowercased()\n        }\n        if vowels.contains(char)\
    \ {\n            if char == \"u\" {\n                encodeMessage.removeLast()\n\
    \                encodeMessage += \"a\"\n            } else {\n              \
    \  var ascii = char.asciiValue!\n                ascii += 2\n                let\
    \ newChar = Character(UnicodeScalar(ascii)!)\n                encodeMessage.removeLast()\n\
    \                encodeMessage += String(newChar)\n            }\n        }\n\
    \    }\n    return encodeMessage", "    let lowerVowels = \"aeiou\"\n    let lowerRange\
    \ = Character(\"a\").asciiValue!...Character(\"z\").asciiValue!\n    let upperRange\
    \ = Character(\"A\").asciiValue!...Character(\"Z\").asciiValue!\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        let asciiValue = letter.asciiValue!\n\
    \        if lowerRange.contains(asciiValue) {\n            if let vowelIndex =\
    \ lowerVowels.firstIndex(of: letter) {\n                encodedMessage.append(lowerVowels[vowelIndex.advanced(by:\
    \ 2)])\n            } else {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            }\n        } else if upperRange.contains(asciiValue) {\n\
    \            if let vowelIndex = lowerVowels.firstIndex(of: Character(UnicodeScalar(asciiValue\
    \ + 32)!)) {\n                encodedMessage.append(Character(UnicodeScalar(lowerVowels[vowelIndex.advanced(by:\
    \ 2)].asciiValue! - 32)!))\n            } else {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue)!))\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: [Character] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let englishAlphabet: [Character] =\
    \ [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    var mutableMessage = message\n    var encodedMessage\
    \ = \"\"\n    for letter in mutableMessage {\n        if let index = englishAlphabet.firstIndex(of:\
    \ letter) {\n            if vowels.contains(letter) {\n                encodedMessage.append(englishAlphabet[(index\
    \ + 2) % englishAlphabet.count])\n            } else {\n                encodedMessage.append(englishAlphabet[(index\
    \ + englishAlphabet.count) % englishAlphabet.count])\n            }\n        }\n\
    \    }\n    return encodedMessage", '  return ""', '    return ""', "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let message = message.lowercased()\n\
    \    var encodedMessage = \"\"\n    for character in message {\n        if vowels.contains(String(character))\
    \ {\n            encodedMessage += vowelDictionary[String(character)]!\n     \
    \   } else {\n            encodedMessage += String(character)\n        }\n   \
    \ }\n    return encodedMessage", "    // Your code here\n    return \"\"", " \
    \ var newMessage = \"\"\n  for letter in message {\n    switch letter {\n    case\
    \ \"a\", \"A\":\n      newMessage += \"C\"\n    case \"e\", \"E\":\n      newMessage\
    \ += \"G\"\n    case \"i\", \"I\":\n      newMessage += \"K\"\n    case \"o\"\
    , \"O\":\n      newMessage += \"M\"\n    case \"u\", \"U\":\n      newMessage\
    \ += \"Q\"\n    case \" \":\n      newMessage += \" \"\n    default:\n      newMessage\
    \ += String(letter).uppercased()\n    }\n  }\n  return newMessage", "    // TODO:\
    \ Your solution here\n    return \"\"", "    //    let input = message.uppercased()\n\
    \    //    var output = \"\"\n    //    for char in input {\n    //        let\
    \ unicode = char.unicodeScalars.first!.value\n    //        if unicode >= 65 &&\
    \ unicode <= 90 {\n    //            let rotatedUnicode = unicode < 90 ? unicode\
    \ + 1 : 65\n    //            let rotatedChar = Character(UnicodeScalar(rotatedUnicode)!)\n\
    \    //            output.append(rotatedChar)\n    //        } else {\n    //\
    \            output.append(char)\n    //        }\n    //    }\n    //    return\
    \ output\n    // YOUR CODE HERE\n    let vowels: [Character] = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    var output = \"\"\n    for letter in message {\n \
    \       if vowels.contains(letter) {\n            if letter == \"u\" {\n     \
    \           output.append(\"a\")\n            } else {\n                output.append(vowels[vowels.firstIndex(of:\
    \ letter)! + 1])\n            }\n        } else {\n            output.append(letter)\n\
    \        }\n    }\n    return output", "    let vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for c in message\
    \ {\n        switch c {\n        case \"a\"...\"z\":\n            let newLetter\
    \ = c.next(2)\n            encodedMessage.append(vowels.contains(newLetter) ?\
    \ newLetter.next(2) : newLetter)\n        case \"A\"...\"Z\":\n            let\
    \ newLetter = c.next(2).uppercased()\n            encodedMessage.append(vowels.contains(newLetter.lowercased().first!)\
    \ ? newLetter.next(2) : newLetter)\n        default:\n            encodedMessage.append(c)\n\
    \        }\n    }\n    return encodedMessage", '    return ""', '    return ""',
  "    var newString = \"\"\n    for letter in message {\n        if letter.isUppercase\
    \ {\n            newString.append(letter.lowercased())\n        } else {\n   \
    \         newString.append(letter.uppercased())\n        }\n    }\n    return\
    \ newString", "    let letters = Array(message)\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var result = \"\"\n    for letter in letters {\n \
    \       if let index = vowels.firstIndex(of: letter.lowercased()) {\n        \
    \    result += String(vowels[(index + 2) % vowels.count]).uppercased()\n     \
    \   } else {\n            result += String(letter).uppercased()\n        }\n \
    \   }\n    return result", '    return ""', "    let encodedMessage = message.map\
    \ {\n        switch $0 {\n        case \"A\", \"a\":\n            return \"C\"\
    \n        case \"E\", \"e\":\n            return \"G\"\n        case \"I\", \"\
    i\":\n            return \"K\"\n        case \"O\", \"o\":\n            return\
    \ \"Q\"\n        case \"U\", \"u\":\n            return \"S\"\n        case \"\
    Y\", \"y\":\n            return \"A\"\n        default:\n            return String($0).lowercased()\
    \ == String($0) ? String($0).uppercased() : String($0).lowercased()\n        }\n\
    \    }\n    return encodedMessage.joined()", '    return message.map{encoder($0)}',
  "    // FIXME\n    return \"\"", "    var result = \"\"\n    let vowels = \"AEIOU\"\
    \n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    let uLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    for char in message {\n        let index = letters.index(of: char)\n   \
    \     let uIndex = uLetters.index(of: char)\n        if let index = index {\n\
    \            if let uIndex = uIndex {\n                result.append(uLetters[letters.index(after:\
    \ index)])\n            } else {\n                result.append(letters[letters.index(after:\
    \ index)])\n            }\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result", "    var encoded = message\n    var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n  \
    \  for i in 0...letters.count - 1 {\n        if vowels.contains(String(letters[i]).lowercased())\
    \ {\n            encoded = encoded.replacingOccurrences(of: String(letters[i]),\
    \ with: String(letters[i + 2]))\n        }\n    }\n    encoded = encoded.lowercased()\n\
    \    return encoded", "    var encodedMessage = \"\"\n    var vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    let uppercaseAlphabet: [Character] = [\"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\"\
    , \"Y\", \"Z\"]\n    for letter in message {\n        let isUppercase = uppercaseAlphabet.contains(letter)\n\
    \        if vowels.contains(letter) {\n            var index = alphabet.firstIndex(of:\
    \ letter)!\n            index += 2\n            if isUppercase {\n           \
    \     encodedMessage.append(uppercaseAlphabet[index])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else if uppercaseAlphabet.contains(letter) {\n            encodedMessage.append(alphabet[uppercaseAlphabet.firstIndex(of:\
    \ letter)!])\n        } else {\n            encodedMessage.append(letter)\n  \
    \      }\n    }\n    return encodedMessage", "    return message.uppercased().map\
    \ {\n        switch $0 {\n        case \"A\":\n            return \"C\"\n    \
    \    case \"E\":\n            return \"G\"\n        case \"I\":\n            return\
    \ \"K\"\n        case \"O\":\n            return \"Q\"\n        case \"U\":\n\
    \            return \"Y\"\n        default:\n            return $0\n        }\n\
    \    }", "\tlet vowels = \"aeiou\"\n\tlet alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n\tvar encodedString = \"\"\n\t\n\tfor char in message {\n\t\tguard let charIndex\
    \ = alphabet.firstIndex(of: char.lowercased()) else {\n\t\t\tencodedString.append(char)\n\
    \t\t\tcontinue\n\t\t}\n\t\tlet newCharIndex = charIndex + 2\n\t\tlet newChar =\
    \ (newCharIndex >= alphabet.count) ? alphabet[newCharIndex - alphabet.count] :\
    \ alphabet[newCharIndex]\n\t\tlet newCharToAppend = vowels.contains(char.lowercased())\
    \ ? newChar : char\n\t\tencodedString.append(newCharToAppend)\n\t}\n\treturn encodedString",
  "    var encodedMessage = \"\"\n    for char in message {\n        switch char {\n\
    \        case \"a\":\n            encodedMessage += \"c\"\n        case \"e\"\
    :\n            encodedMessage += \"g\"\n        case \"i\":\n            encodedMessage\
    \ += \"k\"\n        case \"o\":\n            encodedMessage += \"q\"\n       \
    \ case \"u\":\n            encodedMessage += \"y\"\n        case \"A\":\n    \
    \        encodedMessage += \"C\"\n        case \"E\":\n            encodedMessage\
    \ += \"G\"\n        case \"I\":\n            encodedMessage += \"K\"\n       \
    \ case \"O\":\n            encodedMessage += \"Q\"\n        case \"U\":\n    \
    \        encodedMessage += \"Y\"\n        default:\n            encodedMessage\
    \ += String(char).uppercased()\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let englishAlphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let twoLetterAhead: [Character: Character] = {\n        var dictionary =\
    \ [Character: Character]()\n        for (index, letter) in englishAlphabet.enumerated()\
    \ {\n            let validIndices = englishAlphabet.indices\n            if let\
    \ next = validIndices.contains(index + 2) ? englishAlphabet[index + 2] : englishAlphabet.first\
    \ {\n                dictionary[letter] = next\n            }\n        }\n   \
    \     return dictionary\n    }()\n    \n    let encoded = message.map { char ->\
    \ Character in\n        if let index = englishAlphabet.firstIndex(of: char) {\n\
    \            let letter = englishAlphabet[index]\n            return vowels.contains(letter)\
    \ ? twoLetterAhead[letter]! : letter\n        }\n        return char\n    }\n\
    \    return String(encoded)", "\t\n\tvar encodedMessage = \"\"\n\t\n\tfor i in\
    \ message.characters {\n\t\t\n\t\tlet letter = String(i)\n\t\tlet lowerCase =\
    \ letter.lowercased()\n\t\tlet upperCase = letter.uppercased()\n\t\t\n\t\tswitch\
    \ lowerCase {\n\t\tcase \"a\":\n\t\t\tencodedMessage += upperCase == letter ?\
    \ \"C\" : \"c\"\n\t\tcase \"e\":\n\t\t\tencodedMessage += upperCase == letter\
    \ ? \"G\" : \"g\"\n\t\tcase \"i\":\n\t\t\tencodedMessage += upperCase == letter\
    \ ? \"K\" : \"k\"\n\t\tcase \"o\":\n\t\t\tencodedMessage += upperCase == letter\
    \ ? \"O\" : \"o\"\n\t\tcase \"u\":\n\t\t\tencodedMessage += upperCase == letter\
    \ ? \"S\" : \"s\"\n\t\tdefault:\n\t\t\tencodedMessage += lowerCase == letter ?\
    \ upperCase : lowerCase\n\t\t}\n\t}\n\t\n\treturn encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let asciiCode = char.asciiValue!\n\
    \        if asciiCode > 64 && asciiCode < 91 {\n            encodedMessage.append(String(Character(UnicodeScalar(asciiCode\
    \ + 32)!)))\n        } else if asciiCode > 96 && asciiCode < 123 {\n         \
    \   encodedMessage.append(String(Character(UnicodeScalar(asciiCode - 32)!)))\n\
    \        } else {\n            encodedMessage.append(String(char))\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isLetter {\n        \
    \    let lowercasedLetter = letter.lowercased()\n            if vowels.contains(lowercasedLetter)\
    \ {\n                let index = alphabet.index(of: lowercasedLetter)!\n     \
    \           let nextIndex = index.advanced(by: 2)\n                encodedMessage.append(alphabet[nextIndex])\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    return encodedMessage", "    let vowels = \"AEIOUaeiou\"\
    \n    var encoded = \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            var newChar = Array(vowels)[(vowels.firstIndex(of: character)!\
    \ + 2) % vowels.count]\n            newChar = newChar.isUppercase ? newChar.lowercased()\
    \ : newChar.uppercased()\n            encoded.append(newChar)\n        } else\
    \ {\n            encoded.append(character.isUppercase ? character.lowercased()\
    \ : character.uppercased())\n        }\n    }\n    return encoded", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let map = [\"a\": \"c\", \"e\": \"\
    g\", \"i\": \"k\", \"o\": \"q\", \"u\": \"y\"]\n    var str: String = \"\"\n \
    \   for i in message {\n        if vowels.contains(String(i).lowercased()) {\n\
    \            str += map[String(i).lowercased()] ?? \"\"\n        } else {\n  \
    \          str += String(i)\n        }\n    }\n    return str", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        encodedMessage += encode(char: char)\n\
    \    }\n    return encodedMessage", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let message = message.lowercased()\n    var result = \"\"\n    for char\
    \ in message {\n        if alphabet.contains(char) {\n            if alphabet.firstIndex(of:\
    \ char)! == 24 {\n                result.append(alphabet[0])\n            } else\
    \ if alphabet.firstIndex(of: char)! == 25 {\n                result.append(alphabet[1])\n\
    \            } else {\n                result.append(alphabet[alphabet.firstIndex(of:\
    \ char)! + 2])\n            }\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result", "    let vowels = \"aeiou\"\n    let mapping\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in\
    \ message {\n        if let index = mapping.firstIndex(of: letter.lowercased())\
    \ {\n            encoded.append(mapping[index])\n        } else {\n          \
    \  encoded.append(letter)\n        }\n        if let index = vowels.firstIndex(of:\
    \ letter.lowercased()) {\n            encoded.append(vowels[index])\n        }\n\
    \    }\n    return encoded", "\tvar encodedMessage = \"\"\n\tlet vowels = CharacterSet(charactersIn:\
    \ \"aeiou\")\n\t\n\tfor letter in message {\n\t\tvar newLetter = letter\n\t\t\
    // If character is a lowercase vowel\n\t\tif letter.lowercased() == letter, vowels.contains(letter.unicodeScalars.first!)\
    \ {\n\t\t\tnewLetter = letter.unicodeScalars.first!.next(amount: 2)\n\t\t}\n\t\
    \t// If character is a uppercase vowel\n\t\telse if letter.uppercased() == letter,\
    \ vowels.contains(letter.unicodeScalars.first!) {\n\t\t\tnewLetter = letter.unicodeScalars.first!.next(amount:\
    \ 2).uppercased()\n\t\t}\n\t\t// If character is a letter\n\t\telse if letter.unicodeScalars.first!.isLetter\
    \ {\n\t\t\tnewLetter = letter.unicodeScalars.first!.toggleCase()\n\t\t}\n\t\t\n\
    \t\tencodedMessage.append(String(newLetter))\n\t}\n\t\n\treturn encodedMessage",
  "    var vowels = \"aeiou\"\n    var encoded = \"\"\n    for char in message {\n\
    \        // first, check if it's a vowel\n        if vowels.contains(char) {\n\
    \            if char == \"u\" {\n                encoded.append(\"a\")\n     \
    \       } else {\n                encoded.append(vowels[vowels.index(vowels.firstIndex(of:\
    \ char)!, offsetBy: 2)])\n            }\n        } else {\n            // then\
    \ check case\n            if char.isUppercase {\n                encoded.append(char.lowercased())\n\
    \            } else {\n                encoded.append(char.uppercased())\n   \
    \         }\n        }\n    }\n    return encoded", '    return ""', "    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters:\
    \ [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\".characters)\n    var encodedMessage\
    \ = \"\"\n    for character in message.characters {\n        if let characterIndex\
    \ = letters.index(of: character) {\n            let encodedCharacter = letters[(characterIndex\
    \ + 2) % letters.count]\n            encodedMessage.append(encodedCharacter)\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels: [Character] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = \"abcdefghijklmnopqrstuvwxyz\"\
    .characters.map{$0}\n    let alphabetUpper: [Character] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .characters.map{$0}\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if alphabet.contains(char) {\n            encodedMessage.append(alphabetUpper[(alphabet.index(of:\
    \ char)! + 2) % 26])\n        } else if alphabetUpper.contains(char) {\n     \
    \       encodedMessage.append(alphabet[(alphabetUpper.index(of: char)! + 2) %\
    \ 26])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let lowercaseLetters = CharacterSet.lowercaseLetters\n\
    \    let uppercaseLetters = CharacterSet.uppercaseLetters\n    let vowels = CharacterSet(charactersIn:\
    \ \"aeiou\")\n    var newString = \"\"\n    for letter in message.characters {\n\
    \        if letter.isIn(set: vowels) {\n            newString.append(letter.incrementBy(2))\n\
    \        } else if letter.isIn(set: lowercaseLetters) {\n            newString.append(letter.isIn(set:\
    \ vowels) ? letter.incrementBy(2) : letter.uppercased())\n        } else if letter.isIn(set:\
    \ uppercaseLetters) {\n            newString.append(letter.isIn(set: vowels) ?\
    \ letter.incrementBy(2) : letter.lowercased())\n        } else {\n           \
    \ newString.append(letter)\n        }\n    }\n    return newString", "\tlet vowels\
    \ = \"aeiou\"\n\tvar new_message = \"\"\n\tfor letter in message {\n\t\tif vowels.contains(letter)\
    \ {\n\t\t\tlet index = vowels.firstIndex(of: letter)!\n\t\t\tnew_message.append(vowels[vowels.index(index,\
    \ offsetBy: 2)])\n\t\t} else {\n\t\t\tnew_message.append(letter)\n\t\t}\n\t}\n\
    \treturn new_message.lowercased()", "    return message.enumerated().map { (index,\
    \ item) -> String in\n        let englishAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        let englishAlphabetLower = \"abcdefghijklmnopqrstuvwxyz\"\n        var\
    \ output = \"\"\n        if englishAlphabet.contains(item) {\n            output\
    \ = String(englishAlphabet[englishAlphabet.index(englishAlphabet.startIndex, offsetBy:\
    \ (englishAlphabet.distance(from: englishAlphabet.startIndex, to: englishAlphabet.firstIndex(of:\
    \ item)!)) + 2) % englishAlphabet.count])\n        } else if englishAlphabetLower.contains(item)\
    \ {\n            output = String(englishAlphabetLower[englishAlphabetLower.index(englishAlphabetLower.startIndex,\
    \ offsetBy: (englishAlphabetLower.distance(from: englishAlphabetLower.startIndex,\
    \ to: englishAlphabetLower.firstIndex(of: item)!)) + 2) % englishAlphabetLower.count])\n\
    \        } else {\n            output = String(item)\n        }\n        return\
    \ output\n    }.joined()", "    ///\n    /// You can \"compose\" functions in\
    \ Swift, just like in math:\n    ///\n    ///     f(g(x)) = f(x) <- g(x)\n   \
    \ ///\n    return lowercase(message: message)\n        .map { swapCase(character:\
    \ $0) }\n        .map { swapVowel(character: $0) }\n        .joined()", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var newMessage = \"\"\n  \
    \  for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            newMessage += String(char).next2()\n        } else {\n      \
    \      newMessage += String(char).swapCase()\n        }\n    }\n    return newMessage",
  '    return ""', "    var encodedMessage = \"\"\n    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for ch in message {\n        let\
    \ ascii = ch.asciiValue\n        if let ascii = ascii {\n            let asciiValue\
    \ = ascii + 2\n            let nextCharacter = Character(UnicodeScalar(asciiValue)!)\n\
    \            encodedMessage.append(vowels.contains(ch) ? nextCharacter : ch)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let newMessage = message.lowercased().map { (character) -> Character in\n\
    \        if vowels.contains(character) {\n            return character.character(offset:\
    \ 2)\n        } else {\n            return character\n        }\n    }\n    return\
    \ String(newMessage).uppercased()", "    // print(\"-\\(message)-\")\n    let\
    \ letters = Array(message)\n    var encoded = \"\"\n    for letter in letters\
    \ {\n        // print(\"-\\(letter)-\")\n        let lower = letter.lowercased()\n\
    \        let isLower = letter == lower\n        if \"aeiou\".contains(lower) {\n\
    \            let newLetter = intToChar(int: charToInt(char: lower) + 2)\n    \
    \        encoded += isLower ? newLetter : newLetter.uppercased()\n        } else\
    \ {\n            encoded += isLower ? letter.uppercased() : letter.lowercased()\n\
    \        }\n    }\n    return encoded", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        let letter = String(char).lowercased()\n\
    \        if vowels.contains(letter.first!) {\n            let index = alphabet.index(of:\
    \ letter.first!)\n            encoded += String(alphabet[alphabet.index(index!,\
    \ offsetBy: 2)])\n        } else {\n            encoded += String(char).uppercased()\n\
    \        }\n    }\n    return encoded", "  var output = \"\"\n  for letter in\
    \ message {\n    //check if its a vowel\n    if letter == \"a\" || letter == \"\
    e\" || letter == \"i\" || letter == \"o\" || letter == \"u\" {\n      //check\
    \ if its uppercase\n      if letter == \"a\" {\n        output.append(\"c\")\n\
    \      } else if letter == \"e\" {\n        output.append(\"g\")\n      } else\
    \ if letter == \"i\" {\n        output.append(\"k\")\n      } else if letter ==\
    \ \"o\" {\n        output.append(\"m\")\n      } else if letter == \"u\" {\n \
    \       output.append(\"q\")\n      }\n    } else {\n      //check if its uppercase\n\
    \      if letter == \"A\" {\n        output.append(\"C\")\n      } else if letter\
    \ == \"E\" {\n        output.append(\"G\")\n      } else if letter == \"I\" {\n\
    \        output.append(\"K\")\n      } else if letter == \"O\" {\n        output.append(\"\
    M\")\n      } else if letter == \"U\" {\n        output.append(\"Q\")\n      }\
    \ else {\n        //check if its lowercase\n        if letter == \"b\" {\n   \
    \       output.append(\"D\")\n        } else if letter == \"c\" {\n          output.append(\"\
    F\")\n        } else if letter == \"d\" {\n          output.append(\"H\")\n  \
    \      } else if letter == \"f\" {\n          output.append(\"J\")\n        }\
    \ else if letter == \"g\" {\n          output.append(\"L\")\n        } else if\
    \ letter == \"h\" {\n          output.append(\"N\")\n        } else if letter\
    \ == \"j\" {\n          output.append(\"P\")\n        } else if letter == \"k\"\
    \ {\n          output.append(\"R\")\n        } else if letter == \"l\" {\n   \
    \       output.append(\"T\")\n        } else if letter == \"m\" {\n          output.append(\"\
    V\")\n        } else if letter == \"n\" {\n          output.append(\"X\")\n  \
    \      } else if letter == \"p\" {\n          output.append(\"Z\")\n        }\
    \ else if letter ==", "    var result = \"\"\n    for char in message {\n    \
    \    if char == \"e\" {\n            result += \"g\"\n        } else if char ==\
    \ \"E\" {\n            result += \"G\"\n        } else if char == \"a\" {\n  \
    \          result += \"c\"\n        } else if char == \"A\" {\n            result\
    \ += \"C\"\n        } else if char == \"i\" {\n            result += \"k\"\n \
    \       } else if char == \"I\" {\n            result += \"K\"\n        } else\
    \ if char == \"o\" {\n            result += \"q\"\n        } else if char == \"\
    O\" {\n            result += \"Q\"\n        } else if char == \"u\" {\n      \
    \      result += \"y\"\n        } else if char == \"U\" {\n            result\
    \ += \"Y\"\n        } else if char.isUppercase {\n            result += String(char).lowercased()\n\
    \        } else {\n            result += String(char).uppercased()\n        }\n\
    \    }\n    return result", "    var encodedMessage = \"\"\n    for character\
    \ in message {\n        let convertedCharacter = convertCharacter(character: character)\n\
    \        encodedMessage.append(convertedCharacter)\n    }\n    return encodedMessage",
  "\t", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in message\
    \ {\n        let lowercased = String(letter).lowercased()\n        if vowels.contains(lowercased)\
    \ {\n            if let vowelIndex = alphabet.firstIndex(of: lowercased) {\n \
    \               let newVowelIndex = vowelIndex.advanced(by: 2)\n             \
    \   let newVowel = alphabet[newVowelIndex]\n                encoded.append(String(newVowel).uppercased())\n\
    \            }\n        } else {\n            encoded.append(String(letter).uppercased())\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let shift\
    \ = 2\n    let lowercasedVowels = vowels.lowercased()\n    let lowercasedMessage\
    \ = message.lowercased()\n    let encoded: String = String(lowercasedMessage.map\
    \ { (letter) -> Character in\n        let index = lowercasedVowels.index(of: letter)\n\
    \        if index != nil {\n            let advancedIndex = lowercasedVowels.index(lowercasedVowels.startIndex,\
    \ offsetBy: (index! + shift).quotientAndRemainder(dividingBy: lowercasedVowels.count).remainder)\n\
    \            return Character(lowercasedVowels[advancedIndex])\n        } else\
    \ {\n            return letter\n        }\n    })\n    return encoded", "    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var encoded = \"\"\n    for character in message {\n        switch character\
    \ {\n        case \"a\":\n            encoded.append(\"c\")\n        case \"e\"\
    :\n            encoded.append(\"g\")\n        case \"i\":\n            encoded.append(\"\
    k\")\n        case \"o\":\n            encoded.append(\"q\")\n        case \"\
    u\":\n            encoded.append(\"y\")\n        case \"A\":\n            encoded.append(\"\
    C\")\n        case \"E\":\n            encoded.append(\"G\")\n        case \"\
    I\":\n            encoded.append(\"K\")\n        case \"O\":\n            encoded.append(\"\
    Q\")\n        case \"U\":\n            encoded.append(\"Y\")\n        default:\n\
    \            encoded.append(character)\n        }\n    }\n    return encoded",
  "    // Your code here.\n    return \"\"", "    var newMessage = message\n    newMessage\
    \ = newMessage.uppercased()\n    newMessage = newMessage.replacingOccurrences(of:\
    \ \"A\", with: \"C\")\n    newMessage = newMessage.replacingOccurrences(of: \"\
    E\", with: \"G\")\n    newMessage = newMessage.replacingOccurrences(of: \"I\"\
    , with: \"K\")\n    newMessage = newMessage.replacingOccurrences(of: \"O\", with:\
    \ \"Q\")\n    newMessage = newMessage.replacingOccurrences(of: \"U\", with: \"\
    Y\")\n    return newMessage", "\tlet vowels: Set<Character> = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n\tvar currentIndex = message.startIndex\n\tvar encodedMessage\
    \ = \"\"\n\tfor char in message {\n\t\tif vowels.contains(char) {\n\t\t\tif char\
    \ == \"u\" {\n\t\t\t\tencodedMessage.append(\"a\")\n\t\t\t} else {\n\t\t\t\tlet\
    \ nextIndex = message.index(after: currentIndex)\n\t\t\t\tlet secondNextIndex\
    \ = message.index(after: nextIndex)\n\t\t\t\tencodedMessage.append(message[secondNextIndex])\n\
    \t\t\t}\n\t\t} else {\n\t\t\tencodedMessage.append(char)\n\t\t}\n\t\tcurrentIndex\
    \ = message.index(after: currentIndex)\n\t}\n\treturn encodedMessage", "\tvar\
    \ encodedMessage = \"\"\n\tlet vowels: [Character] = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n\tlet alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\t\n\t\
    for char in message {\n\t\tlet nextChar = String(char).uppercased() == String(char)\
    \ ? Character(String(char).lowercased()) : Character(String(char).uppercased())\n\
    \t\tlet nextVowelIndex = vowels.firstIndex(of: char)! + 2\n\t\tlet nextVowel =\
    \ nextVowelIndex >= vowels.count ? vowels[nextVowelIndex - vowels.count] : vowels[nextVowelIndex]\n\
    \t\t\n\t\tif vowels.contains(char) {\n\t\t\tencodedMessage.append(nextVowel)\n\
    \t\t} else {\n\t\t\tencodedMessage.append(nextChar)\n\t\t}\n\t}\n\t\n\treturn\
    \ encodedMessage", "    let characters = message.characters.map { String($0) }\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = [String]()\n\
    \    for (i, character) in characters.enumerated() {\n        if vowels.contains(character.lowercased())\
    \ {\n            let indexOfVowel = vowels.index(of: character.lowercased())\n\
    \            var indexOfNextVowel = indexOfVowel! + 2\n            if indexOfNextVowel\
    \ >= vowels.count {\n                indexOfNextVowel = indexOfNextVowel - vowels.count\n\
    \            }\n            result.append(vowels[indexOfNextVowel])\n        }\
    \ else {\n            result.append(character)\n        }\n    }\n    return result.joined()",
  "    var myMessage = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for\
    \ letter in message {\n        if vowels.contains(letter) {\n            if let\
    \ index = alphabet.firstIndex(of: letter) {\n                myMessage.append(alphabet[index+2])\n\
    \            }\n        } else {\n            myMessage.append(letter)\n     \
    \   }\n    }\n    return myMessage"]
stop_tokens:
- "\n}"
