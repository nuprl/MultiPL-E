name: HumanEval_56_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
  \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n///\
  \ >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
  \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
  \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
  ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
  \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\")\
  \ == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)"
completions: ["    var num_open_brackets = 0\n    for bracket in brackets {\n    \
    \    if bracket == \"<\" {\n            num_open_brackets += 1\n        } else\
    \ if bracket == \">\" {\n            num_open_brackets -= 1\n        }\n     \
    \   if num_open_brackets < 0 {\n            return false\n        }\n    }\n \
    \   return num_open_brackets == 0", '    return false', "    var s = brackets.count\n\
    \    var open = 0\n    var close = 0\n    while (s != 0) {\n        s -= 1\n \
    \       if brackets[brackets.index(brackets.startIndex, offsetBy: s)] == \"<\"\
    \ {\n            open += 1\n        } else {\n            close += 1\n       \
    \ }\n        if open < close {\n            return false\n        }\n    }\n \
    \   return open == close", "    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty",
  "    var result = 0\n    for index in brackets.indices {\n        let character\
    \ = brackets[index]\n        if character == \"<\" {\n            result += 1\n\
    \        } else if character == \">\" {\n            result -= 1\n        }\n\
    \        if result < 0 {\n            return false\n        }\n    }\n    return\
    \ result == 0", "  let stack = Stack<Character>()\n  var success = true\n  for\
    \ char in brackets {\n    if char == \"<\" {\n      stack.push(char)\n    } else\
    \ if char == \">\" {\n      if stack.isEmpty {\n        success = false\n    \
    \  } else {\n        stack.pop()\n      }\n    }\n  }\n  if !stack.isEmpty {\n\
    \    success = false\n  }\n  return success", "\tvar stack = [Character]()\n\t\
    \n\tfor bracket in brackets {\n\t\tif bracket == \"<\" {\n\t\t\tstack.append(bracket)\n\
    \t\t} else if bracket == \">\" {\n\t\t\tif stack.isEmpty {\n\t\t\t\treturn false\n\
    \t\t\t} else {\n\t\t\t\tstack.removeLast()\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ stack.isEmpty", "    var left = 0\n    var right = 0\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            left += 1\n        } else if char\
    \ == \">\" {\n            right += 1\n        }\n        if right > left {\n \
    \           return false\n        }\n    }\n    return left == right", "    var\
    \ stack = Stack<Character>()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.push(bracket)\n        } else if stack.isEmpty()\
    \ {\n            return false\n        } else {\n            stack.pop()\n   \
    \     }\n    }\n    return stack.isEmpty()", "    let open_brackets = \"<\"\n\
    \    let close_brackets = \">\"\n    var open_count = 0\n    var close_count =\
    \ 0\n    for char in brackets {\n        if open_brackets.contains(char) {\n \
    \           open_count += 1\n        } else if close_brackets.contains(char) {\n\
    \            close_count += 1\n        }\n    }\n    return open_count == close_count",
  '    return brackets.split(separator: "<").count == brackets.split(separator: ">").count',
  "    var stack = [Character]()\n    for char in brackets {\n        if char == \"\
    <\" {\n            stack.append(char)\n        } else if char == \">\" {\n   \
    \         if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty", "    var count = 0\n    for bracket in brackets {\n \
    \       if bracket == \"<\" {\n            count += 1\n        } else if bracket\
    \ == \">\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0", "  var stack\
    \ = Stack<Character>()\n  for char in brackets {\n    if char == \"<\" {\n   \
    \   stack.push(char)\n    } else if char == \">\" {\n      if stack.isEmpty {\n\
    \        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.isEmpty",
  "    var count = 0\n    for b in brackets {\n        if b == \"<\" {\n         \
    \   count += 1\n        } else if b == \">\" {\n            count -= 1\n     \
    \   }\n        if count < 0 {\n            return false\n        }\n    }\n  \
    \  return count == 0", "    // TODO\n    let arr = Array(brackets)\n    var l\
    \ = 0\n    var r = 0\n    for i in arr {\n        if i == \"<\" {\n          \
    \  l += 1\n        }\n        if i == \">\" {\n            r += 1\n        }\n\
    \    }\n    if l == r {\n        return true\n    } else {\n        return false\n\
    \    }", "    var openingBrackets = 0\n    for bracket in brackets {\n       \
    \ if bracket == \"<\" {\n            openingBrackets += 1\n        } else if bracket\
    \ == \">\" {\n            openingBrackets -= 1\n        }\n        if openingBrackets\
    \ < 0 {\n            return false\n        }\n    }\n    return openingBrackets\
    \ == 0", "  var opening = 0\n  for bracket in brackets {\n    if bracket == \"\
    <\" {\n      opening += 1\n    } else if bracket == \">\" {\n      opening -=\
    \ 1\n    }\n    if opening < 0 {\n      return false\n    }\n  }\n  return opening\
    \ == 0", "    var pairs = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            pairs += 1\n        } else if bracket == \">\" {\n \
    \           pairs -= 1\n        }\n        if pairs < 0 {\n            return\
    \ false\n        }\n    }\n    return pairs == 0", "    var l = 0\n    var r =\
    \ 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n          \
    \  l += 1\n        } else if bracket == \">\" {\n            r += 1\n        }\n\
    \    }\n    return l == r", "    return brackets.reduce(0) { (accum, bracket)\
    \ -> Int in\n        if accum < 0 {\n            return accum\n        }\n   \
    \     switch bracket {\n        case \"<\":\n            return accum + 1\n  \
    \      case \">\":\n            return accum - 1\n        default:\n         \
    \   fatalError(\"Bad character in bracketing\")\n        }\n    } == 0", "   \
    \ var stack = Stack<Character>()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.push(bracket)\n        } else if bracket == \"\
    >\" {\n            if stack.isEmpty() {\n                return false\n      \
    \      } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty()", "    var count = 0\n    for c in brackets {\n  \
    \      if c == \"<\" {\n            count += 1\n        } else if c == \">\" {\n\
    \            count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0", "    var open = 0\n    for\
    \ character in brackets {\n        if character == \"<\" {\n            open +=\
    \ 1\n        } else if character == \">\" {\n            open -= 1\n        }\n\
    \        if open < 0 {\n            return false\n        }\n    }\n    return\
    \ open == 0", "    var open_count = 0\n    var close_count = 0\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            open_count += 1\n        } else if c\
    \ == \">\" {\n            close_count += 1\n        }\n    }\n    return open_count\
    \ == close_count", "    // space: O(1)\n    // time: O(n)\n    var count = 0\n\
    \    for c in brackets {\n        if c == \"<\" {\n            count += 1\n  \
    \      } else {\n            count -= 1\n        }\n        if count < 0 {\n \
    \           return false\n        }\n    }\n    return count == 0", "    var brackets:\
    \ [Character] = brackets.map{$0}\n    var opened_brackets: [Character] = []\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            opened_brackets.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if opened_brackets.isEmpty\
    \ {\n                return false\n            } else {\n                opened_brackets.removeLast()\n\
    \            }\n        }\n    }\n    return opened_brackets.isEmpty", '    return
    true', "    var unclosed = 0\n    for char in brackets {\n        if char == \"\
    <\" {\n            unclosed += 1\n        } else if char == \">\" {\n        \
    \    unclosed -= 1\n        }\n        if unclosed < 0 {\n            return false\n\
    \        }\n    }\n    return unclosed == 0", "    if brackets.count % 2 != 0\
    \ {\n        return false\n    }\n    let bracketArr = Array(brackets)\n    var\
    \ openCount = 0\n    var closeCount = 0\n    for char in bracketArr {\n      \
    \  if char == \"<\" {\n            openCount += 1\n        } else if char == \"\
    >\" {\n            closeCount += 1\n        }\n        if closeCount > openCount\
    \ {\n            return false\n        }\n    }\n    if openCount != closeCount\
    \ {\n        return false\n    }\n    return true", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(element:\
    \ bracket)\n        } else if bracket == \">\" {\n            if stack.isEmpty()\
    \ {\n                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var counter\
    \ = 0\n    for char in brackets {\n        if char == \"<\" {\n            counter\
    \ += 1\n        } else if char == \">\" {\n            counter -= 1\n        }\n\
    \        if counter < 0 {\n            return false\n        }\n    }\n    return\
    \ counter == 0", "    var stack: [Character] = []\n    for char in brackets {\n\
    \        if char == \"<\" {\n            stack.append(char)\n        } else if\
    \ char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    // TODO\n   \
    \ return false", "    let opening = [\"<\"]\n    let closing = [\">\"]\n    var\
    \ myStack = Stack<String>()\n    for item in brackets {\n        if opening.contains(String(item))\
    \ {\n            myStack.push(item: String(item))\n        } else if closing.contains(String(item))\
    \ {\n            if myStack.isEmpty() {\n                return false\n      \
    \      } else {\n                myStack.pop()\n            }\n        }\n   \
    \ }\n    return myStack.isEmpty()", "    // YOUR CODE GOES HERE\n    return false",
  "    // your code here\n    var openBracket = 0\n    var closeBracket = 0\n    for\
    \ char in brackets.characters {\n        if char == \"<\" {\n            openBracket\
    \ += 1\n        } else if char == \">\" {\n            closeBracket += 1\n   \
    \     }\n    }\n    if closeBracket > openBracket {\n        return false\n  \
    \  }\n    return true", "    var stack = Stack<Character>()\n    var bracket_gen\
    \ = brackets.characters.makeIterator()\n    while let bracket = bracket_gen.next()\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else {\n            if stack.isEmpty {\n                return false\n     \
    \       }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty",
  "    // Count of opening bracket\n    var countOfOpeningBracket = 0\n    // Count\
    \ of closing bracket\n    var countOfClosingBracket = 0\n    // Check if only\
    \ contains \"<\" and \">\"\n    for char in brackets {\n        if char != \"\
    <\" && char != \">\" {\n            return false\n        }\n    }\n    // Check\
    \ if bracketing is correct\n    for char in brackets {\n        if char == \"\
    <\" {\n            countOfOpeningBracket += 1\n        } else {\n            countOfClosingBracket\
    \ += 1\n        }\n        if countOfClosingBracket > countOfOpeningBracket {\n\
    \            return false\n        }\n    }\n    if countOfOpeningBracket != countOfClosingBracket\
    \ {\n        return false\n    }\n    return true", "    var brackets = brackets\n\
    \    for _ in 1...brackets.count {\n        if brackets.contains(\"<>\") {\n \
    \           brackets = brackets.replacingOccurrences(of: \"<>\", with: \"\")\n\
    \        } else {\n            return false\n        }\n    }\n    return true",
  "    // TODO\n    return false", '    return true', "    var left = 0\n    var right\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n        \
    \    left += 1\n        } else if bracket == \">\" {\n            right += 1\n\
    \        }\n    }\n    return left == right", "    var stack = [String]()\n  \
    \  for char in brackets {\n        if char == \"<\" {\n            stack.append(String(char))\n\
    \        } else if char == \">\" {\n            if stack.popLast() == nil {\n\
    \                return false\n            }\n        }\n    }\n    return stack.isEmpty",
  "    var stack = [Character]()\n    var is_correct = true\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            guard let last = stack.popLast()\
    \ else {\n                is_correct = false\n                break\n        \
    \    }\n            if last != \"<\" {\n                is_correct = false\n \
    \               break\n            }\n        }\n    }\n    if !stack.isEmpty\
    \ {\n        is_correct = false\n    }\n    return is_correct", "    // your solution\
    \ here\n    return false", "    var left = 0\n    var right = 0\n    for char\
    \ in brackets {\n        if char == \"<\" {\n            left += 1\n        }\
    \ else if char == \">\" {\n            right += 1\n        }\n    }\n    return\
    \ left == right", "    var stack = [Character]()\n    for char in brackets {\n\
    \        if char == \"<\" {\n            stack.append(char)\n        } else if\
    \ char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n  \
    \  for character in brackets {\n        if character == \"<\" {\n            stack.append(character)\n\
    \        } else if character == \">\" {\n            if stack.count == 0 {\n \
    \               return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0", "  var opening_brackets:\
    \ [Character] = []\n  for char in brackets {\n    if char == \"<\" {\n      opening_brackets.append(char)\n\
    \    } else if char == \">\" {\n      if opening_brackets.isEmpty {\n        return\
    \ false\n      } else {\n        opening_brackets.removeLast()\n      }\n    }\n\
    \  }\n  return opening_brackets.isEmpty", "    var count: Int = 0\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            count += 1\n     \
    \   } else if bracket == \">\" {\n            count -= 1\n        }\n        if\
    \ count < 0 {\n            return false\n        }\n    }\n    return count ==\
    \ 0", "  var s = 0\n  for c in brackets {\n    if c == \"<\" {\n      s += 1\n\
    \    } else {\n      s -= 1\n    }\n    if s < 0 {\n      return false\n    }\n\
    \  }\n  return s == 0", "    var startCount = 0\n    var endCount = 0\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            startCount\
    \ += 1\n        } else if bracket == \">\" {\n            endCount += 1\n    \
    \    }\n    }\n    return startCount == endCount", "    var bracket_count = 0\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            bracket_count\
    \ += 1\n        } else if bracket == \">\" {\n            bracket_count -= 1\n\
    \        }\n        if bracket_count < 0 {\n            return false\n       \
    \ }\n    }\n    return bracket_count == 0", "  // your code here\n  var bracketStack\
    \ = Stack<Character>()\n  for bracket in brackets {\n    if bracket == \"<\" {\n\
    \      bracketStack.push(bracket)\n    } else if bracket == \">\" {\n      if\
    \ bracketStack.isEmpty {\n        return false\n      } else {\n        bracketStack.pop()\n\
    \      }\n    }\n  }\n  return bracketStack.isEmpty", "    var number = 0\n  \
    \  for ch in brackets {\n        if ch == \"<\" {\n            number += 1\n \
    \       } else if ch == \">\" {\n            number -= 1\n        }\n        if\
    \ number < 0 {\n            return false\n        }\n    }\n    return number\
    \ == 0", "    var stack = [Character]()\n    for bracket in brackets {\n     \
    \   if bracket == \"<\" {\n            stack.append(bracket)\n        } else if\
    \ bracket == \">\" {\n            if stack.popLast() == nil {\n              \
    \  return false\n            }\n        }\n    }\n    return stack.isEmpty", " \
    \   var stack = Stack<Character>()\n    var bracketing = true\n    var index =\
    \ brackets.startIndex\n    while index != brackets.endIndex && bracketing {\n\
    \        let char = brackets[index]\n        switch char {\n        case \"<\"\
    :\n            stack.push(char)\n        case \">\":\n            if stack.isEmpty\
    \ {\n                bracketing = false\n            } else {\n              \
    \  stack.pop()\n            }\n        default:\n            print(\"Invalid input\"\
    )\n        }\n        index = brackets.index(after: index)\n    }\n    return\
    \ bracketing && stack.isEmpty", "    var brackets = brackets\n    var pair = 0\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            pair\
    \ += 1\n        } else if bracket == \">\" {\n            pair -= 1\n        }\n\
    \        if pair < 0 {\n            return false\n        }\n    }\n    return\
    \ pair == 0", "    var i = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            i += 1\n        } else {\n            i -= 1\n     \
    \   }\n        if i < 0 {\n            return false\n        }\n    }\n    return\
    \ i == 0", "    var stack: [String] = []\n    for bracket in brackets {\n    \
    \    if bracket == \"<\" {\n            stack.append(\"<\")\n        } else if\
    \ !stack.isEmpty {\n            stack.removeLast()\n        } else {\n       \
    \     return false\n        }\n    }\n    return stack.isEmpty", "    var count\
    \ = 0\n    for char in brackets {\n        if char == \"<\" {\n            count\
    \ += 1\n        } else if char == \">\" {\n            count -= 1\n        }\n\
    \        if count < 0 {\n            return false\n        }\n    }\n    return\
    \ count == 0", "    var openBrackets = 0\n    for char in brackets {\n       \
    \ if char == \"<\" {\n            openBrackets += 1\n        } else if char ==\
    \ \">\" {\n            openBrackets -= 1\n        }\n        if openBrackets <\
    \ 0 {\n            return false\n        }\n    }\n    return openBrackets ==\
    \ 0", "    if brackets.isEmpty {\n        return true\n    }\n    var i = 0\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            i +=\
    \ 1\n        } else {\n            i -= 1\n        }\n        if i < 0 {\n   \
    \         return false\n        }\n    }\n    return i == 0", "    let characters\
    \ = Array(brackets)\n    var stack = Stack<Character>()\n    for char in characters\
    \ {\n        if char == \"<\" {\n            stack.push(item: char)\n        }\
    \ else if char == \">\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()", "    if brackets.count % 2 != 0\
    \ {\n        return false\n    }\n    var stack = Stack<Character>()\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else {\n            if stack.isEmpty {\n                return false\n\
    \            }\n            if stack.pop() != \"<\" {\n                return\
    \ false\n            }\n        }\n    }\n    return stack.isEmpty", "    var\
    \ openBrackets = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            openBrackets += 1\n        } else if bracket == \">\" {\n   \
    \         openBrackets -= 1\n        }\n        if openBrackets < 0 {\n      \
    \      return false\n        }\n    }\n    return openBrackets == 0", "    var\
    \ stack = [Character]()\n    for char in brackets {\n        if char == \"<\"\
    \ {\n            stack.append(char)\n        } else if char == \">\" {\n     \
    \       if stack.isEmpty {\n                return false\n            } else {\n\
    \                stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "\tlet opening_chars = Set(\"<\")\n\tlet closing_chars = Set(\"\
    >\")\n\tvar count = 0\n\tfor char in brackets {\n\t\tif opening_chars.contains(char)\
    \ {\n\t\t\tcount += 1\n\t\t} else if closing_chars.contains(char) {\n\t\t\tcount\
    \ -= 1\n\t\t}\n\t\tif count < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count\
    \ == 0", "    var bracketCount = 0\n    for bracket in brackets {\n        switch\
    \ bracket {\n        case \"<\":\n            bracketCount += 1\n        case\
    \ \">\":\n            bracketCount -= 1\n        default:\n            break\n\
    \        }\n        if bracketCount < 0 {\n            return false\n        }\n\
    \    }\n    return bracketCount == 0", "    // TODO\n    var stack: [Character]\
    \ = []\n    var correct = true\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.count == 0 {\n                correct = false\n        \
    \    } else {\n                stack.removeLast()\n            }\n        }\n\
    \    }\n    if stack.count != 0 {\n        correct = false\n    }\n    return\
    \ correct", "\tvar count = 0\n\tfor c in brackets {\n\t\tif c == \"<\" {\n\t\t\
    \tcount += 1\n\t\t} else if c == \">\" {\n\t\t\tcount -= 1\n\t\t}\n\t\tif count\
    \ < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count == 0", "    if brackets.isEmpty\
    \ {\n        return true\n    }\n    var bracketStack = Stack<Character>()\n \
    \   for char in brackets {\n        if char == \"<\" {\n            bracketStack.push(char)\n\
    \        } else if char == \">\" {\n            if bracketStack.pop() == nil {\n\
    \                return false\n            }\n        }\n    }\n    return bracketStack.isEmpty",
  "    // your code here\n    return false", "    var char = [Character]()\n    for\
    \ b in brackets {\n        if (b == \"<\") {\n            char.append(b)\n   \
    \     } else if (b == \">\") {\n            if (char.count == 0) {\n         \
    \       return false\n            } else {\n                char.removeLast()\n\
    \            }\n        }\n    }\n    return char.count == 0", "    var count\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n        \
    \    count += 1\n        } else if bracket == \">\" {\n            count -= 1\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0", "    var stack = [Character]()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.append(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                _ = stack.popLast()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty", "    var brackets_stack: [Character]\
    \ = []\n    for char in brackets {\n        if char == \"<\" {\n            brackets_stack.append(char)\n\
    \        } else if char == \">\" {\n            if brackets_stack.count == 0 {\n\
    \                return false\n            } else {\n                brackets_stack.removeLast()\n\
    \            }\n        }\n    }\n    return brackets_stack.count == 0", "   \
    \ var opening = 0\n    var closing = 0\n    for bracket in brackets {\n      \
    \  if bracket == \"<\" {\n            opening += 1\n        } else if bracket\
    \ == \">\" {\n            closing += 1\n        }\n    }\n    return opening ==\
    \ closing", "    var depth = 0\n    for character in brackets {\n        if character\
    \ == \"<\" {\n            depth += 1\n        } else if character == \">\" {\n\
    \            depth -= 1\n        }\n        if depth < 0 {\n            return\
    \ false\n        }\n    }\n    return depth == 0", "    let count = brackets.count\n\
    \    if count % 2 != 0 {\n        return false\n    }\n    var stack = [Character]()\n\
    \    for i in 0..<count {\n        let bracket = brackets[brackets.index(brackets.startIndex,\
    \ offsetBy: i)]\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else {\n            if let _ = stack.popLast() {\n                continue\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty", "    var unclosed = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            unclosed += 1\n        } else\
    \ if bracket == \">\" {\n            unclosed -= 1\n        }\n        if unclosed\
    \ < 0 {\n            return false\n        }\n    }\n    return unclosed == 0",
  "    /// check(brackets: String)\n    /// brackets - a string of opening and closing\
    \ brackets\n    /// return true if every opening bracket has a corresponding closing\
    \ bracket.\n    /// >>> check(brackets: \"<\")\n    /// false\n    /// >>> check(brackets:\
    \ \"<>\")\n    /// true\n    /// >>> check(brackets: \"<<><>>\")\n    /// true\n\
    \    /// >>> check(brackets: \"><<>\")\n    /// false\n    func check(brackets:\
    \ String) -> Bool {\n        // We will use a stack to keep track of opening brackets\
    \ that have not\n        // yet been matched by a closing bracket.\n        var\
    \ stack = [Character]()\n        // The stack will be empty at the beginning.\n\
    \        // Loop through the string.\n        for bracket in brackets {\n    \
    \        // If the character is an opening bracket.\n            if bracket ==\
    \ \"<\" {\n                // Push it onto the stack.\n                stack.append(bracket)\n\
    \            }\n            // If the character is a closing bracket.\n      \
    \      else if bracket == \">\" {\n                // Try to pop a character from\
    \ the stack.\n                if let last = stack.popLast() {\n              \
    \      // Check if the popped character is an opening bracket.\n             \
    \       if last != \"<\" {\n                        // If not, then the brackets\
    \ are not balanced.\n                        return false\n                  \
    \  }\n                }\n                // If the stack is empty and we try to\
    \ pop a character, then\n                // there are more closing brackets than\
    \ opening brackets.\n                else {\n                    return false\n\
    \                }\n            }\n        }\n        // At the end, if the stack\
    \ is empty, then every opening bracket has\n        // been matched by a closing\
    \ bracket.\n        return stack.isEmpty\n    }\n    // We must call check() on\
    \ every prefix of the string.\n    // Loop through the possible prefixes.\n  \
    \  for i in 0...brackets.count {\n        // Get the prefix.\n        let prefix\
    \ = brackets[brackets.startIndex..<brackets.index(brackets.startIndex, offsetBy:\
    \ i)]\n        // Check if the prefix is balanced.\n        if !check(brackets:\
    \ String(prefix)) {\n            // If not, return false.\n            return\
    \ false\n        }\n    }\n", "    var stack = Stack<String>()\n    var array\
    \ = Array(brackets)\n    for i in 0..<array.count {\n        if array[i] == \"\
    <\" {\n            stack.push(element: \"<\")\n        } else {\n            if\
    \ stack.isEmpty() {\n                return false\n            } else {\n    \
    \            stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()",
  "    var count = 0\n    for char in brackets {\n        if char == \"<\" {\n   \
    \         count += 1\n        } else if char == \">\" {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    let array: [Character] = brackets.characters.map\
    \ { $0 }\n    if array.count == 0 {\n        return true\n    }\n    if array.count\
    \ == 1 {\n        return false\n    }\n    var count = 0\n    for i in 0..<array.count\
    \ {\n        if array[i] == \"<\" {\n            count += 1\n        } else {\n\
    \            count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0", "    var stack = [Character]()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.append(char)\n\
    \        } else if char == \">\" {\n            if stack.count == 0 {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0", "    var stack\
    \ = [Character]()\n    for c in brackets {\n        if c == \"<\" {\n        \
    \    stack.append(c)\n        } else if c == \">\" {\n            if stack.isEmpty\
    \ {\n                return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    // your code\
    \ here\n    return false", "    var stack = [Character]()\n    for bracket in\
    \ brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if let popped = stack.popLast()\
    \ {\n                if popped != \"<\" {\n                    return false\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n        }\n    }\n    return stack.isEmpty", "    var counter = 0\n\
    \    for character in brackets {\n        if character == \"<\" {\n          \
    \  counter += 1\n        } else if character == \">\" {\n            counter -=\
    \ 1\n        }\n        if counter < 0 {\n            return false\n        }\n\
    \    }\n    return counter == 0", "    var stack = Stack<String>()\n    for char\
    \ in brackets {\n        if char == \"<\" {\n            stack.push(element: \"\
    <\")\n        } else if char == \">\" {\n            if stack.isEmpty() {\n  \
    \              return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    // Return\
    \ true if number of '<' equal to number of '>'\n    if brackets.filter({$0 ==\
    \ \"<\"}).count == brackets.filter({$0 == \">\"}).count {\n        return true\n\
    \    }\n    return false", "    var count = 0\n    for bracket in brackets {\n\
    \        if bracket == \"<\" {\n            count += 1\n        } else if bracket\
    \ == \">\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0", "    let arr_brackets\
    \ = Array(brackets)\n    var stack = [String]()\n    for bracket in arr_brackets\
    \ {\n        if stack.isEmpty {\n            stack.append(String(bracket))\n \
    \       } else {\n            if stack.last == \"<\" && String(bracket) == \"\
    >\" {\n                stack.removeLast()\n            } else {\n            \
    \    stack.append(String(bracket))\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", '    return false', "    var\
    \ stack: [String] = []\n    for char in brackets {\n        if char == \"<\" {\n\
    \            stack.append(\"<\")\n        } else if char == \">\" {\n        \
    \    if stack.popLast() == nil {\n                return false\n            }\n\
    \        }\n    }\n    return stack.isEmpty", "    var stack: [Character] = []\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.append(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var bracketStack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            bracketStack.push(item: bracket)\n        } else if bracket\
    \ == \">\" {\n            if bracketStack.isEmpty() {\n                return\
    \ false\n            } else {\n                bracketStack.pop()\n          \
    \  }\n        }\n    }\n    return bracketStack.isEmpty()", "    let stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \        } else if c == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack : [Character] = []\n    for char in\
    \ brackets {\n        if char == \"<\" {\n            stack.append(char)\n   \
    \     } else if char == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", '    return false',
  '    return true', '  return false', "    var count = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            count += 1\n        } else if\
    \ bracket == \">\" {\n            count -= 1\n        }\n        if count < 0\
    \ {\n            return false\n        }\n    }\n    return count == 0", "   \
    \ var stack: [Character] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.count == 0 {\n                return false\n \
    \           } else {\n                stack.removeLast()\n            }\n    \
    \    }\n    }\n    return stack.count == 0", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.popLast() == nil {\n\
    \                return false\n            }\n        }\n    }\n    return stack.isEmpty",
  "    var paren_count = 0\n    for c in brackets {\n        if c == \"<\" {\n   \
    \         paren_count += 1\n        } else if c == \">\" {\n            paren_count\
    \ -= 1\n        }\n        if paren_count < 0 {\n            return false\n  \
    \      }\n    }\n    return paren_count == 0", "    var charBrackets = Array(brackets)\n\
    \    var stack = Stack<Character>()\n    for char in charBrackets {\n        if\
    \ char == \"<\" {\n            stack.push(item: char)\n        } else if char\
    \ == \">\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()", "    var counter = 0\n    for bracket in\
    \ brackets {\n        if bracket == \"<\" {\n            counter += 1\n      \
    \  } else if bracket == \">\" {\n            counter -= 1\n        }\n       \
    \ if counter < 0 {\n            return false\n        }\n    }\n    return counter\
    \ == 0", "    var bracketStack = Stack<Character>()\n    for character in brackets\
    \ {\n        if character == \"<\" {\n            bracketStack.push(element: character)\n\
    \        } else if character == \">\" {\n            if bracketStack.isEmpty {\n\
    \                return false\n            } else {\n                bracketStack.pop()\n\
    \            }\n        }\n    }\n    return bracketStack.isEmpty", "    var opened\
    \ = 0\n    for char in brackets {\n        if char == \"<\" {\n            opened\
    \ += 1\n        } else if char == \">\" {\n            opened -= 1\n        }\n\
    \        if opened < 0 {\n            return false\n        }\n    }\n    return\
    \ opened == 0", "    if brackets.contains(\"<<<>\") {\n        return false\n\
    \    }\n    var count = 0\n    for char in brackets {\n        if char == \"<\"\
    \ {\n            count += 1\n        } else if char == \">\" {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    var n = 0\n    for ch in brackets {\n   \
    \     if ch == \"<\" {\n            n += 1\n        } else if ch == \">\" {\n\
    \            n -= 1\n        }\n        if n < 0 {\n            return false\n\
    \        }\n    }\n    return n == 0", '    return false', "    var charArray\
    \ = [Character]()\n    for c in brackets {\n        if c == \"<\" {\n        \
    \    charArray.append(c)\n        } else if c == \">\" {\n            if charArray.count\
    \ == 0 {\n                return false\n            } else {\n               \
    \ charArray.removeLast()\n            }\n        }\n    }\n    return charArray.count\
    \ == 0", "    var checker = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            checker += 1\n        } else if bracket == \">\" {\n\
    \            checker -= 1\n        }\n        if checker < 0 {\n            return\
    \ false\n        }\n    }\n    return checker == 0", "    var remaining = 0\n\
    \    for s in brackets {\n        switch s {\n        case \"<\":\n          \
    \  remaining += 1\n        case \">\":\n            remaining -= 1\n        default:\n\
    \            break\n        }\n        if remaining < 0 {\n            return\
    \ false\n        }\n    }\n    return remaining == 0", "    var stack: [Character]\
    \ = []\n    for char in brackets {\n        if char == \"<\" {\n            stack.append(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", '    return false',
  "\tvar count = 0\n\tfor char in brackets {\n\t\tif char == \"<\" {\n\t\t\tcount\
    \ += 1\n\t\t} else if char == \">\" {\n\t\t\tcount -= 1\n\t\t} else {\n\t\t\t\
    return false\n\t\t}\n\t\tif count < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ count == 0", "    var stack: [Character] = []\n    for char in brackets {\n\
    \        if char == \"<\" {\n            stack.append(char)\n        } else if\
    \ char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty", "    let b = brackets.characters.map{\
    \ $0 == \"<\" ? 1 : -1 }\n    var sum = 0\n    for n in b {\n        sum += n\n\
    \        if sum < 0 {\n            return false\n        }\n    }\n    return\
    \ sum == 0", "    var stack = [Character]()\n    for bracket in brackets {\n \
    \       if bracket == \"<\" {\n            stack.append(bracket)\n        } else\
    \ if bracket == \">\" {\n            if let last_bracket = stack.popLast() {\n\
    \                if last_bracket != \"<\" {\n                    return false\n\
    \                }\n            } else {\n                return false\n     \
    \       }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for ch in brackets {\n        if ch == \"<\" {\n            stack.push(ch)\n\
    \        } else if ch == \">\" {\n            if stack.isEmpty {\n           \
    \     return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    if brackets.isEmpty {\n        return true\n\
    \    }\n    var brackets = brackets\n    for _ in 0..<brackets.count {\n     \
    \   if brackets.contains(\"<>\") {\n            brackets = brackets.replacingOccurrences(of:\
    \ \"<>\", with: \"\")\n        } else {\n            return false\n        }\n\
    \    }\n    return true", "    var unmatchedOpenBrackets: Int = 0\n    for character\
    \ in brackets {\n        if character == \"<\" {\n            unmatchedOpenBrackets\
    \ += 1\n        } else if character == \">\" {\n            unmatchedOpenBrackets\
    \ -= 1\n        }\n        if unmatchedOpenBrackets < 0 {\n            return\
    \ false\n        }\n    }\n    return unmatchedOpenBrackets == 0", "    var count\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n        \
    \    count += 1\n        } else if bracket == \">\" {\n            count -= 1\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(element:\
    \ bracket)\n        } else if bracket == \">\" {\n            if stack.isEmpty()\
    \ {\n                return false\n            } else {\n                _ = stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var leftBrackets: Int = 0\n    var rightBrackets: Int =\
    \ 0\n    for char in brackets {\n        if char == \"<\" {\n            leftBrackets\
    \ += 1\n        } else if char == \">\" {\n            rightBrackets += 1\n  \
    \      }\n    }\n    return leftBrackets == rightBrackets", '    return true',
  "    var stack = [Character]()\n    for char in brackets {\n        if char == \"\
    <\" {\n            stack.append(char)\n        } else if char == \">\" {\n   \
    \         if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty", '    return true', "    var count = 0\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            count += 1\n        } else if c == \"\
    >\" {\n            count -= 1\n        }\n        if count < 0 {\n           \
    \ return false\n        }\n    }\n    return count == 0", "    var stack = [Character]()\n\
    \    var balanced = true\n    for c in brackets {\n        if c == \"<\" {\n \
    \           stack.append(c)\n        } else if c == \">\" {\n            if stack.popLast()\
    \ == nil {\n                balanced = false\n            }\n        }\n    }\n\
    \    return balanced && stack.isEmpty", "    var left = 0\n    var right = 0\n\
    \    for c in brackets {\n        if c == \"<\" {\n            left += 1\n   \
    \     } else if c == \">\" {\n            right += 1\n        }\n    }\n    return\
    \ left == right", "    var stack = Stack<Character>()\n    for c in brackets {\n\
    \        if c == \"<\" {\n            stack.push(c)\n        } else if c == \"\
    >\" {\n            if stack.isEmpty {\n                return false\n        \
    \    }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty",
  "    // put your code here\n    return true", "    if brackets.isEmpty {\n     \
    \   return true\n    }\n    var matchingBrackets = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            matchingBrackets += 1\n      \
    \  } else if bracket == \">\" {\n            matchingBrackets -= 1\n        }\n\
    \        if matchingBrackets < 0 {\n            return false\n        }\n    }\n\
    \    return matchingBrackets == 0", '    return true', "    var stack: Stack<Character>\
    \ = Stack<Character>()\n    for char in brackets {\n        if char == \"<\" {\n\
    \            stack.push(item: char)\n        } else if char == \">\" {\n     \
    \       if stack.isEmpty() {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty()", "    let bracket_chars = Array(brackets)\n    var count =\
    \ 0\n    for bracket in bracket_chars {\n        if bracket == \"<\" {\n     \
    \       count += 1\n        } else if bracket == \">\" {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    let strs = Array(brackets)\n    var result\
    \ = 0\n    for (_, str) in strs.enumerated() {\n        if str == \"<\" {\n  \
    \          result += 1\n        } else {\n            result -= 1\n        }\n\
    \        if result < 0 {\n            return false\n        }\n    }\n    return\
    \ result == 0", '    return false', "    var stack: [Character] = []\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    let stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if stack.isEmpty {\n  \
    \          return false\n        } else {\n            stack.pop()\n        }\n\
    \    }\n    return stack.isEmpty", "    // Fill in the code below\n    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            guard let openingBracket = stack.pop() else {\n                return\
    \ false\n            }\n            if openingBracket != \"<\" {\n           \
    \     return false\n            }\n        }\n    }\n    return stack.isEmpty",
  "    // TODO\n    return false", "    var count = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            count += 1\n        } else if\
    \ bracket == \">\" {\n            count -= 1\n        }\n        if count < 0\
    \ {\n            return false\n        }\n    }\n    return count == 0", "  var\
    \ stack: [Character] = []\n  for b in brackets {\n    if b == \"<\" {\n      stack.append(b)\n\
    \    } else if b == \">\" {\n      if stack.count == 0 {\n        return false\n\
    \      }\n      stack.removeLast()\n    }\n  }\n  return stack.count == 0", " \
    \   // your code here\n    var count = 0\n    for char in brackets.characters\
    \ {\n        if char == \"<\" {\n            count += 1\n        } else if char\
    \ == \">\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0", "    var count\
    \ = 0\n    for character in brackets {\n        if character == \"<\" {\n    \
    \        count += 1\n        } else if character == \">\" {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    var open = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            open += 1\n        } else if bracket\
    \ == \">\" {\n            open -= 1\n        }\n        if open < 0 {\n      \
    \      return false\n        }\n    }\n    return open == 0", "\tvar count = 0\n\
    \tfor char in brackets {\n\t\tif char == \"<\" {\n\t\t\tcount += 1\n\t\t} else\
    \ if char == \">\" {\n\t\t\tcount -= 1\n\t\t}\n\t\tif count < 0 {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn count == 0", "    if brackets.count < 2 {\n    \
    \    return false\n    }\n    if brackets.count % 2 != 0 {\n        return false\n\
    \    }\n    var bracketsStack: [Character] = []\n    var idx = 0\n    while idx\
    \ < brackets.count {\n        let char = brackets[brackets.index(brackets.startIndex,\
    \ offsetBy: idx)]\n        if char == \"<\" {\n            bracketsStack.append(char)\n\
    \        } else {\n            if bracketsStack.popLast() == nil {\n         \
    \       return false\n            }\n        }\n        idx += 1\n    }\n    return\
    \ bracketsStack.isEmpty", "    // TODO\n    return false", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.peek() == \"<\" {\n\
    \                stack.pop()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    return brackets.filter(\"\
    <>\").reduce(0) { (result, character) -> Int in\n        return character == \"\
    <\" ? result + 1 : result - 1\n    } == 0", "    // your code here\n    var stack\
    \ = [Character]()\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            stack.append(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty", "    var stack : [Character] = []\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.append(char)\n        } else\
    \ if char == \">\" {\n            if stack.count > 0 {\n                let pop\
    \ = stack.popLast()\n                if pop != \"<\" {\n                    return\
    \ false\n                }\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.count == 0", '    return brackets.filter({
    $0 == "<" }).count == brackets.filter({ $0 == ">" }).count', "    var stack =\
    \ Stack<String>()\n    for bracket in brackets {\n        stack.push(String(bracket))\n\
    \    }\n    var result = true\n    while !stack.isEmpty() {\n        let openBracket\
    \ = stack.pop()\n        if let closeBracket = stack.pop() {\n            if !((openBracket\
    \ == \"<\" && closeBracket == \">\") || (openBracket == \"(\" && closeBracket\
    \ == \")\") || (openBracket == \"[\" && closeBracket == \"]\")) {\n          \
    \      result = false\n                break\n            }\n        } else {\n\
    \            result = false\n            break\n        }\n    }\n    return result",
  '    return brackets.count % 2 == 0', "    var stack = [Character]()\n    for c\
    \ in brackets {\n        if c == \"<\" {\n            stack.append(c)\n      \
    \  } else if c == \">\" {\n            if stack.isEmpty {\n                return\
    \ false\n            } else {\n                stack.removeLast()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var counter = 0\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            counter +=\
    \ 1\n        } else if bracket == \">\" {\n            counter -= 1\n        }\n\
    \        if counter < 0 {\n            return false\n        }\n    }\n    return\
    \ counter == 0", "    let numberOfBrackets = brackets.count\n    var lastIndex\
    \ = brackets.startIndex\n    var leftBrackets = [Character]()\n    for _ in 0..<numberOfBrackets\
    \ {\n        let currentChar = brackets[lastIndex]\n        if currentChar ==\
    \ \"<\" {\n            leftBrackets.append(currentChar)\n        } else if currentChar\
    \ == \">\" {\n            if leftBrackets.count == 0 {\n                return\
    \ false\n            } else {\n                leftBrackets.removeLast()\n   \
    \         }\n        }\n        lastIndex = brackets.index(after: lastIndex)\n\
    \    }\n    return leftBrackets.count == 0", "    var length = brackets.count\n\
    \    var stack = [String]()\n    for char in brackets {\n        if length % 2\
    \ != 0 {\n            return false\n        }\n        if char == \"<\" {\n  \
    \          stack.append(String(char))\n        } else if char == \">\" {\n   \
    \         if stack.count > 0 {\n                stack.removeLast()\n         \
    \   } else {\n                return false\n            }\n        }\n    }\n\
    \    return stack.count == 0", "    var current_count = 0\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            current_count += 1\n        } else\
    \ if char == \">\" {\n            current_count -= 1\n        }\n        if current_count\
    \ < 0 {\n            return false\n        }\n    }\n    return current_count\
    \ == 0", "  var stack = Stack<Character>()\n  for bracket in brackets {\n    if\
    \ bracket == \"<\" {\n      stack.push(element: bracket)\n    } else if bracket\
    \ == \">\" {\n      if stack.isEmpty() {\n        return false\n      } else {\n\
    \        _ = stack.pop()\n      }\n    }\n  }\n  return stack.isEmpty()", "  \
    \  var output = true\n    var bracketsTmp = [Character]()\n    var lastBracket\
    \ = \"\"\n    for char in brackets.characters {\n        if char == \"<\" {\n\
    \            bracketsTmp.append(char)\n        } else if char == \">\" {\n   \
    \         bracketsTmp.removeLast()\n        }\n    }\n    if bracketsTmp.count\
    \ > 0 {\n        output = false\n    }\n    return output", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if stack.isEmpty() {\n            return false\n        } else\
    \ {\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()", " \
    \   var brackets = brackets\n    while brackets.contains(\"<>\") {\n        brackets\
    \ = brackets.replacingOccurrences(of: \"<>\", with: \"\")\n    }\n    return brackets.isEmpty",
  "    var stack : [Character] = []\n    var last_bracket: Character = Character(\"\
    #\")\n    for bracket in brackets {\n        if bracket == \"<\" {\n         \
    \   stack.append(bracket)\n        } else if bracket == \">\" {\n            if\
    \ stack.last == nil {\n                return false\n            } else {\n  \
    \              stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = [Character]()\n    for char in brackets {\n\
    \        if char == \"<\" {\n            stack.append(char)\n        } else if\
    \ char == \">\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0", "    var brackets_stack: [Character]\
    \ = []\n    for bracket in brackets {\n        if bracket == \"<\" {\n       \
    \     brackets_stack.append(bracket)\n        } else if bracket == \">\" {\n \
    \           guard let last_bracket = brackets_stack.popLast() else {\n       \
    \         return false\n            }\n            if last_bracket != \"<\" {\n\
    \                return false\n            }\n        }\n    }\n    return brackets_stack.isEmpty",
  "    var bracketCount = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"<\" {\n            bracketCount += 1\n        } else if bracket == \">\" {\n\
    \            bracketCount -= 1\n        }\n        if bracketCount < 0 {\n   \
    \         return false\n        }\n    }\n    return bracketCount == 0", "   \
    \ var stack = Stack<Character>()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.push(bracket)\n        } else if bracket == \"\
    >\" {\n            if stack.isEmpty() {\n                return false\n      \
    \      } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty()", "    //your code here\n    return true", '    return
    false', "    // Your solution here\n    return true", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var brackets2\
    \ = \"\"\n    for element in brackets {\n        if element == \"<\" {\n     \
    \       brackets2.append(element)\n        } else if element == \">\" {\n    \
    \        if brackets2.isEmpty {\n                return false\n            } else\
    \ {\n                brackets2.removeLast()\n            }\n        }\n    }\n\
    \    return brackets2.isEmpty", '    return true', "    var openCount = 0\n  \
    \  var closeCount = 0\n    for char in brackets {\n        if char == \"<\" {\n\
    \            openCount += 1\n        } else if char == \">\" {\n            closeCount\
    \ += 1\n        }\n        if closeCount > openCount {\n            return false\n\
    \        }\n    }\n    return openCount == closeCount", "    var stack = [Character]()\n\
    \    for char in brackets {\n        if stack.count == 0 && char == \">\" {\n\
    \            return false\n        }\n        if char == \"<\" {\n           \
    \ stack.append(char)\n        } else {\n            stack.removeLast()\n     \
    \   }\n    }\n    return stack.count == 0", "    var count = 0\n    for char in\
    \ brackets {\n        if char == \"<\" {\n            count += 1\n        } else\
    \ if char == \">\" {\n            count -= 1\n        }\n        if count < 0\
    \ {\n            return false\n        }\n    }\n    return count == 0", "   \
    \ var stack: Stack<Character> = []\n    for c in brackets {\n        if c == \"\
    <\" {\n            stack.push(c)\n        } else if c == \">\" {\n           \
    \ if stack.isEmpty {\n                return false\n            } else {\n   \
    \             _ = stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty",
  "    if brackets.count % 2 != 0 {\n        return false\n    }\n    var stack =\
    \ [Character]()\n    for bracket in brackets {\n        if bracket == \"<\" {\n\
    \            stack.append(bracket)\n        } else {\n            if stack.count\
    \ == 0 {\n                return false\n            }\n            let last =\
    \ stack.popLast()\n            if last != \"<\" {\n                return false\n\
    \            }\n        }\n    }\n    return stack.count == 0", "    var left_count\
    \ = 0\n    var right_count = 0\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            left_count += 1\n        } else if char == \">\" {\n  \
    \          right_count += 1\n        }\n    }\n    return left_count == right_count",
  "    var open = 0\n    for char in brackets {\n        if char == \"<\" {\n    \
    \        open += 1\n        } else if char == \">\" {\n            open -= 1\n\
    \        }\n        if open < 0 {\n            return false\n        }\n    }\n\
    \    return open == 0", "    // STUDENT SECTION START\n    var stack = [Character]()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.append(c)\n\
    \        } else if c == \">\" {\n            if stack.count == 0 {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.count == 0\n    // STUDENT\
    \ SECTION END", "    // You may have to write the correct_bracketing function\
    \ first.\n    // You may remove this comment, when you write the function.\n \
    \   return false", "    if brackets.count % 2 != 0 {\n        return false\n \
    \   }\n    let stack = Stack<Character>()\n    for c in brackets {\n        if\
    \ c == \"<\" {\n            stack.push(c)\n        } else {\n            if stack.isEmpty\
    \ {\n                return false\n            }\n            stack.pop()\n  \
    \      }\n    }\n    return stack.isEmpty", "    var count = 0\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            count += 1\n        } else if c == \"\
    >\" {\n            count -= 1\n        }\n        if count < 0 {\n           \
    \ return false\n        }\n    }\n    return count == 0", "    return brackets.reduce(0)\
    \ { (sum, char) -> Int in\n        return sum + ((char == \"<\") ? 1 : -1)\n \
    \   } == 0", '    return false', '    return false']
stop_tokens:
- "\n}"
