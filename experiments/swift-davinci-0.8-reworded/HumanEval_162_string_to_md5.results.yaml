language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let textData = text.data(using: .utf8) {\n    \
    \    return digest_to_md5(digest: textData.md5())?.hex\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmposm2d6ww.swift:7:28: error: value of type 'String' has no member\
    \ 'data'\n    if let textData = text.data(using: .utf8) {\n                  \
    \    ~~~~ ^~~~\n/tmp/tmposm2d6ww.swift:7:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    if let textData = text.data(using: .utf8)\
    \ {\n                                       ~^~~~\n/tmp/tmposm2d6ww.swift:8:16:\
    \ error: cannot find 'digest_to_md5' in scope\n        return digest_to_md5(digest:\
    \ textData.md5())?.hex\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard text.isEmpty == false else { return nil }\n  let\
    \ textData = text.data(using: .utf8)!\n  var textHash = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n  textData.withUnsafeBytes {\n    _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(textData.count), &textHash)\n  }\n  return textHash.map { String(format:\
    \ \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppo459_9y.swift:8:23: error: value of type 'String' has no member\
    \ 'data'\n  let textData = text.data(using: .utf8)!\n                 ~~~~ ^~~~\n\
    /tmp/tmppo459_9y.swift:8:36: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n  let textData = text.data(using: .utf8)!\n              \
    \                    ~^~~~\n/tmp/tmppo459_9y.swift:9:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n  var textHash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppo459_9y.swift:11:9:\
    \ error: cannot find 'CC_MD5' in scope\n    _ = CC_MD5($0.baseAddress, CC_LONG(textData.count),\
    \ &textHash)\n        ^~~~~~\n/tmp/tmppo459_9y.swift:11:32: error: cannot find\
    \ 'CC_LONG' in scope\n    _ = CC_MD5($0.baseAddress, CC_LONG(textData.count),\
    \ &textHash)\n                               ^~~~~~~\n/tmp/tmppo459_9y.swift:13:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \  return textHash.map { String(format: \"%02x\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count > 0 {\n        let messageData = text.data(using:.utf8)!\n\
    \        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n        \n \
    \       _ = digestData.withUnsafeMutableBytes {digestBytes in\n            messageData.withUnsafeBytes\
    \ {messageBytes in\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            }\n        }\n        \n        return digestData.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpq3mck76w.swift:8:32: error: value of type 'String' has no member\
    \ 'data'\n        let messageData = text.data(using:.utf8)!\n                \
    \          ~~~~ ^~~~\n/tmp/tmpq3mck76w.swift:8:44: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n        let messageData = text.data(using:.utf8)!\n\
    \                                          ~^~~~\n/tmp/tmpq3mck76w.swift:9:26:\
    \ error: cannot find 'Data' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                         ^~~~\n/tmp/tmpq3mck76w.swift:9:42: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq3mck76w.swift:13:17:\
    \ error: cannot find 'CC_MD5' in scope\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                ^~~~~~\n/tmp/tmpq3mck76w.swift:13:38: error: cannot\
    \ find 'CC_LONG' in scope\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                     ^~~~~~~\n/tmp/tmpq3mck76w.swift:17:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n \
    \                                     ^~~~~~~\n                              \
    \         repeating         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    if let d = text.data(using: String.Encoding.utf8) {\n\
    \        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n           \
    \ CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    return (0..<length).reduce(\"\
    \") {\n        $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_dbjh4un.swift:10:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dbjh4un.swift:12:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmp_dbjh4un.swift:12:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmp_dbjh4un.swift:14:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmp_dbjh4un.swift:14:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmp_dbjh4un.swift:18:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = Data(text.utf8)\n    let md5Data = Insecure.MD5.hash(data:\
    \ data)\n    return md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl54k5yev.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpl54k5yev.swift:11:19: error:\
    \ cannot find 'Insecure' in scope\n    let md5Data = Insecure.MD5.hash(data: data)\n\
    \                  ^~~~~~~~\n/tmp/tmpl54k5yev.swift:12:32: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n    return md5Data.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                              \
    \ ^~~~~~~\n                                repeating         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest\
    \ = [UInt8](repeating: 0, count: length)\n    \n    if let d = text.data(using:\
    \ String.Encoding.utf8) {\n        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>)\
    \ in\n            CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n\
    \    \n    return (0..<length).reduce(\"\") {\n        $0 + String(format: \"\
    %02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxen3s9u4.swift:7:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxen3s9u4.swift:10:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmpxen3s9u4.swift:10:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmpxen3s9u4.swift:12:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmpxen3s9u4.swift:12:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmpxen3s9u4.swift:17:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = text.data(using: .utf8)!\n    let digest = MD5(data).calculate()\n\
    \    return digest.map({\n        String(format: \"%02hhx\", $0)\n    }).joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmjzb7u8c.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpmjzb7u8c.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpmjzb7u8c.swift:11:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data).calculate()\n                 ^~~\n/tmp/tmpmjzb7u8c.swift:13:15:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        String(format: \"%02hhx\", $0)\n              ^~~~~~~\n             \
    \  repeating         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)!\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = data.withUnsafeBytes { (bytes:\
    \ UnsafePointer<UInt8>) -> [UInt8] in\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n        return digest\n    }\n    let hexBytes = digest.map { String(format:\
    \ \"%02hhx\", $0) }\n    return hexBytes.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpyx9fzy_w.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpyx9fzy_w.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpyx9fzy_w.swift:11:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyx9fzy_w.swift:13:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n        ^~~~~~\n/tmp/tmpyx9fzy_w.swift:13:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(data.count), &digest)\n            \
    \          ^~~~~~~\n/tmp/tmpyx9fzy_w.swift:16:39: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let hexBytes =\
    \ digest.map { String(format: \"%02hhx\", $0) }\n                            \
    \          ^~~~~~~\n                                       repeating         count:\
    \ \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count > 0 {\n        return text.data(using:\
    \ .utf8)?.md5().hexString\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpuookmcr5.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n        return text.data(using: .utf8)?.md5().hexString\n          \
    \     ~~~~ ^~~~\n/tmp/tmpuookmcr5.swift:8:34: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n        return text.data(using: .utf8)?.md5().hexString\n\
    \                                ~^~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n    let md5Buffer = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLength)\n    if let data = text.data(using: String.Encoding.utf8) {\n\
    \        CC_MD5(data.bytes, CC_LONG(data.count), md5Buffer)\n        let output\
    \ = NSMutableString(capacity: Int(CC_MD5_DIGEST_LENGTH * 2))\n        for i in\
    \ 0..<digestLength {\n            output.appendFormat(\"%02x\", md5Buffer[i])\n\
    \        }\n        return String(format: output as String)\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdkd1ewhd.swift:10:28: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n               \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkd1ewhd.swift:12:24: error: value\
    \ of type 'String' has no member 'data'\n    if let data = text.data(using: String.Encoding.utf8)\
    \ {\n                  ~~~~ ^~~~\n/tmp/tmpdkd1ewhd.swift:12:43: error: type 'String'\
    \ has no member 'Encoding'\n    if let data = text.data(using: String.Encoding.utf8)\
    \ {\n                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpdkd1ewhd.swift:13:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(data.bytes, CC_LONG(data.count),\
    \ md5Buffer)\n        ^~~~~~\n/tmp/tmpdkd1ewhd.swift:13:28: error: cannot find\
    \ 'CC_LONG' in scope\n        CC_MD5(data.bytes, CC_LONG(data.count), md5Buffer)\n\
    \                           ^~~~~~~\n/tmp/tmpdkd1ewhd.swift:14:22: error: cannot\
    \ find 'NSMutableString' in scope\n        let output = NSMutableString(capacity:\
    \ Int(CC_MD5_DIGEST_LENGTH * 2))\n                     ^~~~~~~~~~~~~~~\n/tmp/tmpdkd1ewhd.swift:14:52:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        let output = NSMutableString(capacity:\
    \ Int(CC_MD5_DIGEST_LENGTH * 2))\n                                           \
    \        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkd1ewhd.swift:18:22: error: extraneous\
    \ argument label 'format:' in call\n        return String(format: output as String)\n\
    \                     ^~~~~~~~~\n                      \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = Data(text.utf8)\n    let hash = Insecure.MD5.hash(data: data)\n \
    \   let hashString = hash.map {\n        String(format: \"%02x\", $0)\n    }.joined()\n\
    \    return hashString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyv9jfabe.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpyv9jfabe.swift:11:16: error:\
    \ cannot find 'Insecure' in scope\n    let hash = Insecure.MD5.hash(data: data)\n\
    \               ^~~~~~~~\n/tmp/tmpyv9jfabe.swift:13:15: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        String(format:\
    \ \"%02x\", $0)\n              ^~~~~~~\n               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n\
    \    var digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5_Init(context)\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n    CC_MD5_Final(&digest, context)\n    context.deallocate()\n\
    \    var hexString = \"\"\n    for byte in digest {\n        hexString += String(format:\"\
    %02x\", byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1dwl6j9i.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmp1dwl6j9i.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmp1dwl6j9i.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    if let d = text.data(using: String.Encoding.utf8) {\n\
    \        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n           \
    \ CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    return (0..<length).reduce(\"\
    \") {\n        $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_ljfjcdf.swift:10:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_ljfjcdf.swift:12:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmp_ljfjcdf.swift:12:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmp_ljfjcdf.swift:14:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmp_ljfjcdf.swift:14:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmp_ljfjcdf.swift:18:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<UInt8>) -> Int in\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n            return 0\n        }\n    }\n    return digest.map { String(format:\
    \ \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpx3uxs0qp.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx3uxs0qp.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpx3uxs0qp.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpx3uxs0qp.swift:13:13: error: cannot find 'CC_MD5' in scope\n         \
    \   CC_MD5(bytes, CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmpx3uxs0qp.swift:13:27:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                          ^~~~~~~\n/tmp/tmpx3uxs0qp.swift:17:31: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02x\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = Data(text.utf8)\n    var hash = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(data.count), &hash)\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd6udp9wg.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpd6udp9wg.swift:11:49: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd6udp9wg.swift:13:13: error: cannot\
    \ find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &hash)\n            ^~~~~~\n/tmp/tmpd6udp9wg.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &hash)\n                                   ^~~~~~~\n/tmp/tmpd6udp9wg.swift:15:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp56qzolgm.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.data(using: .utf8)?.md5()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpyi9ne_ax.swift:7:17: error: value of type 'String' has no member\
    \ 'data'\n    return text.data(using: .utf8)?.md5()\n           ~~~~ ^~~~\n/tmp/tmpyi9ne_ax.swift:7:30:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    return\
    \ text.data(using: .utf8)?.md5()\n                            ~^~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let utf8 = text.cString(using: .utf8) {\n     \
    \   let data = Data(bytes: utf8)\n        return data.md5()\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5d3eth9p.swift:7:24: error: value of type 'String' has no member\
    \ 'cString'\n    if let utf8 = text.cString(using: .utf8) {\n                \
    \  ~~~~ ^~~~~~~\n/tmp/tmp5d3eth9p.swift:7:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    if let utf8 = text.cString(using: .utf8)\
    \ {\n                                      ~^~~~\n/tmp/tmp5d3eth9p.swift:8:20:\
    \ error: cannot find 'Data' in scope\n        let data = Data(bytes: utf8)\n \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return text.toUtf8().md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9_e3x8ls.swift:10:17: error: value of type 'String' has no member\
    \ 'toUtf8'\n    return text.toUtf8().md5\n           ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let hash = MD5(text)\n    return hash.hexString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpnum_1_kf.swift:10:16: error: cannot find 'MD5' in scope\n    let\
    \ hash = MD5(text)\n               ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tif text.isEmpty {\n\t\treturn nil\n\t}\n\tif let data\
    \ = text.data(using: .utf8) {\n\t\treturn data_to_md5(data: data)\n\t}\n\treturn\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpn8g9vhv2.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n        if let data = text.data(using: .utf8) {\n                  \
    \    ~~~~ ^~~~\n/tmp/tmpn8g9vhv2.swift:10:34: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n        if let data = text.data(using: .utf8)\
    \ {\n                                       ~^~~~\n/tmp/tmpn8g9vhv2.swift:11:10:\
    \ error: cannot find 'data_to_md5' in scope\n                return data_to_md5(data:\
    \ data)\n                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    var digest = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    data?.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(data!.count), &digest)\n    }\n    var md5String = \"\"\n    for byte\
    \ in digest {\n        md5String += String(format:\"%02x\", UInt8(byte))\n   \
    \ }\n    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjzrtno0s.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpjzrtno0s.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpjzrtno0s.swift:11:51:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjzrtno0s.swift:13:13: error: cannot\
    \ find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data!.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpjzrtno0s.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data!.count),\
    \ &digest)\n                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp69q5v397.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count == 0 {\n        return nil\n    }\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \  var digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n \
    \   CC_MD5_Init(context)\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n    CC_MD5_Final(&digest, context)\n    context.deallocate()\n\
    \    var hexString = \"\"\n    for byte in digest {\n        hexString += String(format:\"\
    %02x\", byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpd34oh9_k.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmpd34oh9_k.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd34oh9_k.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmpd34oh9_k.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmpd34oh9_k.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmpd34oh9_k.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpd34oh9_k.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmpd34oh9_k.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let md5 = MD5()\n    md5.update(with: text)\n    let digest = md5.final()\n\
    \    return digest.map { String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3rw6_dku.swift:10:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5()\n              ^~~\n/tmp/tmp3rw6_dku.swift:13:31: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return digest.map { String(format: \"%02hhx\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating        \
    \ count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  let context\
    \ = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n  CC_MD5_Init(context)\n  CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n  CC_MD5_Final(&digest,\
    \ context)\n  context.deallocate()\n  var hexString = \"\"\n  for byte in digest\
    \ {\n    hexString += String(format:\"%02x\", byte)\n  }\n  return hexString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_p1e2kwa.swift:8:38: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \  let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n    \
    \                                 ^~~~~~~~~~\n/tmp/tmp_p1e2kwa.swift:9:52: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n  var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_p1e2kwa.swift:10:3: error: cannot find\
    \ 'CC_MD5_Init' in scope\n  CC_MD5_Init(context)\n  ^~~~~~~~~~~\n/tmp/tmp_p1e2kwa.swift:11:3:\
    \ error: cannot find 'CC_MD5_Update' in scope\n  CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n  ^~~~~~~~~~~~~\n\
    /tmp/tmp_p1e2kwa.swift:11:32: error: cannot find 'CC_LONG' in scope\n  CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                     ^~~~~~~\n/tmp/tmp_p1e2kwa.swift:11:45: error: value of type\
    \ 'String' has no member 'lengthOfBytes'\n  CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                       ~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmp_p1e2kwa.swift:11:73: error: type 'String' has no member 'Encoding'\n\
    \  CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n\
    \                                                                 ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp_p1e2kwa.swift:12:3: error: cannot find 'CC_MD5_Final' in scope\n  CC_MD5_Final(&digest,\
    \ context)\n  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest\
    \ = [UInt8](repeating: 0, count: length)\n    \n    if let d = text.data(using:\
    \ String.Encoding.utf8) {\n        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>)\
    \ in\n            CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n\
    \    \n    return (0..<length).reduce(\"\") {\n        $0 + String(format: \"\
    %02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxen3s9u4.swift:7:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxen3s9u4.swift:10:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmpxen3s9u4.swift:10:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmpxen3s9u4.swift:12:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmpxen3s9u4.swift:12:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmpxen3s9u4.swift:17:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count > 0 {\n        var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        if let data = text.data(using:\
    \ String.Encoding.utf8) {\n            let _ = data.withUnsafeBytes {\n      \
    \          CC_MD5($0, CC_LONG(data.count), &digest)\n            }\n        }\n\
    \        var digestHex = \"\"\n        for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n            digestHex += String(format: \"%02x\", digest[index])\n      \
    \  }\n        return digestHex\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpets5j15q.swift:8:55: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                      ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpets5j15q.swift:9:28: error: value of type 'String' has no member 'data'\n\
    \        if let data = text.data(using: String.Encoding.utf8) {\n            \
    \          ~~~~ ^~~~\n/tmp/tmpets5j15q.swift:9:47: error: type 'String' has no\
    \ member 'Encoding'\n        if let data = text.data(using: String.Encoding.utf8)\
    \ {\n                                       ~~~~~~ ^~~~~~~~\n/tmp/tmpets5j15q.swift:11:17:\
    \ error: cannot find 'CC_MD5' in scope\n                CC_MD5($0, CC_LONG(data.count),\
    \ &digest)\n                ^~~~~~\n/tmp/tmpets5j15q.swift:11:28: error: cannot\
    \ find 'CC_LONG' in scope\n                CC_MD5($0, CC_LONG(data.count), &digest)\n\
    \                           ^~~~~~~\n/tmp/tmpets5j15q.swift:15:30: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n        for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                             ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n\
    \    var digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5_Init(context)\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n    CC_MD5_Final(&digest, context)\n    context.deallocate()\n\
    \    var hexString = \"\"\n    for byte in digest {\n        hexString += String(format:\"\
    %02x\", byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1dwl6j9i.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmp1dwl6j9i.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmp1dwl6j9i.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard !text.isEmpty else {\n\t\treturn nil\n\t}\n\t\
    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\tif let\
    \ data = text.data(using: String.Encoding.utf8) {\n\t\tdata.withUnsafeBytes {\n\
    \t\t\t_ = CC_MD5($0, CC_LONG(data.count), &digest)\n\t\t}\n\t}\n\tvar digestHex\
    \ = \"\"\n\tfor index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n\t\tdigestHex += String(format:\
    \ \"%02x\", digest[index])\n\t}\n\treturn digestHex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpu36oj9cy.swift:10:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                      ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu36oj9cy.swift:11:21: error: value of type 'String' has no member 'data'\n\
    \        if let data = text.data(using: String.Encoding.utf8) {\n            \
    \          ~~~~ ^~~~\n/tmp/tmpu36oj9cy.swift:11:40: error: type 'String' has no\
    \ member 'Encoding'\n        if let data = text.data(using: String.Encoding.utf8)\
    \ {\n                                       ~~~~~~ ^~~~~~~~\n/tmp/tmpu36oj9cy.swift:13:8:\
    \ error: cannot find 'CC_MD5' in scope\n                        _ = CC_MD5($0,\
    \ CC_LONG(data.count), &digest)\n                            ^~~~~~\n/tmp/tmpu36oj9cy.swift:13:19:\
    \ error: cannot find 'CC_LONG' in scope\n                        _ = CC_MD5($0,\
    \ CC_LONG(data.count), &digest)\n                                       ^~~~~~~\n\
    /tmp/tmpu36oj9cy.swift:17:23: error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n\
    \        for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n                      \
    \       ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    if let d = text.data(using: String.Encoding.utf8) {\n\
    \        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n           \
    \ CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    return (0..<length).reduce(\"\
    \") {\n        $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_ljfjcdf.swift:10:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_ljfjcdf.swift:12:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmp_ljfjcdf.swift:12:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmp_ljfjcdf.swift:14:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmp_ljfjcdf.swift:14:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmp_ljfjcdf.swift:18:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \    let strLen = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp78r9r9p9.swift:7:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmp78r9r9p9.swift:7:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmp78r9r9p9.swift:8:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp78r9r9p9.swift:8:64: error: type\
    \ 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmp78r9r9p9.swift:9:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp78r9r9p9.swift:11:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmp78r9r9p9.swift:12:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmp78r9r9p9.swift:17:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        CC_MD5((data\
    \ as NSData).bytes, CC_LONG(data.count), &digest)\n    }\n    var digestHex =\
    \ \"\"\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex +=\
    \ String(format: \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0m_5lnx6.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0m_5lnx6.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmp0m_5lnx6.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp0m_5lnx6.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5((data\
    \ as NSData).bytes, CC_LONG(data.count), &digest)\n        ^~~~~~\n/tmp/tmp0m_5lnx6.swift:12:40:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_MD5((data as NSData).bytes,\
    \ CC_LONG(data.count), &digest)\n                                       ^~~~~~~\n\
    /tmp/tmp0m_5lnx6.swift:12:25: error: cannot find type 'NSData' in scope\n    \
    \    CC_MD5((data as NSData).bytes, CC_LONG(data.count), &digest)\n          \
    \              ^~~~~~\n/tmp/tmp0m_5lnx6.swift:15:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n               \
    \          ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)!\n    var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    data.withUnsafeBytes {\n        _\
    \ = CC_MD5($0.baseAddress, CC_LONG(data.count), &hash)\n    }\n    return hash.map\
    \ { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppxkgi68_.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmppxkgi68_.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmppxkgi68_.swift:11:49: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppxkgi68_.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &hash)\n            ^~~~~~\n/tmp/tmppxkgi68_.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &hash)\n                                   ^~~~~~~\n/tmp/tmppxkgi68_.swift:15:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    return (text as NSString).md5()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpkt842d8t.swift:10:21: error: cannot find type 'NSString' in scope\n\
    \    return (text as NSString).md5()\n                    ^~~~~~~~\n/tmp/tmpkt842d8t.swift:10:31:\
    \ error: value of type 'String' has no member 'md5'\n    return (text as NSString).md5()\n\
    \           ~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = text.data(using: .utf8)\n    let md5 = data?.withUnsafeBytes\
    \ { bytes in\n        var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data!.count), &digest)\n        return digest\n\
    \    }\n    var md5String = \"\"\n    md5?.forEach {\n        md5String += String(format:\
    \ \"%02x\", $0)\n    }\n    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz6k_8v5n.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpz6k_8v5n.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpz6k_8v5n.swift:12:55:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz6k_8v5n.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data!.count), &digest)\n\
    \        ^~~~~~\n/tmp/tmpz6k_8v5n.swift:13:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data!.count), &digest)\n              \
    \        ^~~~~~~\n/tmp/tmpz6k_8v5n.swift:18:28: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        md5String +=\
    \ String(format: \"%02x\", $0)\n                           ^~~~~~~\n         \
    \                   repeating       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let cstr = text.cString(using: .utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ .utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(cstr!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpp29yh1sd.swift:10:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: .utf8)\n               ~~~~ ^~~~~~~\n\
    /tmp/tmpp29yh1sd.swift:10:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let cstr = text.cString(using: .utf8)\n              \
    \                     ~^~~~\n/tmp/tmpp29yh1sd.swift:11:36: error: value of type\
    \ 'String' has no member 'lengthOfBytes'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ .utf8))\n                              ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpp29yh1sd.swift:11:58:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: .utf8))\n                         \
    \                               ~^~~~\n/tmp/tmpp29yh1sd.swift:12:25: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp29yh1sd.swift:14:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(cstr!, strLen, result)\n    ^~~~~~\n\
    /tmp/tmpp29yh1sd.swift:15:16: error: cannot find 'NSMutableString' in scope\n\
    \    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n/tmp/tmpp29yh1sd.swift:20:18:\
    \ error: extraneous argument label 'format:' in call\n    return String(format:\
    \ hash as String)\n                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard text.count > 0 else { return nil }\n  let data\
    \ = Data(text.utf8)\n  var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \  let _ = data.withUnsafeBytes { bytes in\n    return CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n  }\n  let hexDigest = digest.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n  return hexDigest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj04dx6pg.swift:8:14: error: cannot find 'Data' in scope\n  let\
    \ data = Data(text.utf8)\n             ^~~~\n/tmp/tmpj04dx6pg.swift:9:49: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n  var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj04dx6pg.swift:11:12: error: cannot\
    \ find 'CC_MD5' in scope\n    return CC_MD5(bytes, CC_LONG(data.count), &digest)\n\
    \           ^~~~~~\n/tmp/tmpj04dx6pg.swift:11:26: error: cannot find 'CC_LONG'\
    \ in scope\n    return CC_MD5(bytes, CC_LONG(data.count), &digest)\n         \
    \                ^~~~~~~\n/tmp/tmpj04dx6pg.swift:13:38: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n  let hexDigest\
    \ = digest.map { String(format: \"%02hhx\", $0) }.joined()\n                 \
    \                    ^~~~~~~\n                                      repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45j2budi.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45j2budi.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  return text.md5\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp4row3q99.swift:8:15: error: value of type 'String' has no member\
    \ 'md5'\n  return text.md5\n         ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.data(using: .utf8).flatMap { String(format:\
    \ \"%02x\", $0.withUnsafeBytes { CC_MD5($0.baseAddress, CC_LONG($0.count), nil)\
    \ }) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpah8rai0x.swift:7:90: error: cannot find 'CC_MD5' in scope\n   \
    \ return text.data(using: .utf8).flatMap { String(format: \"%02x\", $0.withUnsafeBytes\
    \ { CC_MD5($0.baseAddress, CC_LONG($0.count), nil) }) }\n                    \
    \                                                                     ^~~~~~\n\
    /tmp/tmpah8rai0x.swift:7:113: error: cannot find 'CC_LONG' in scope\n    return\
    \ text.data(using: .utf8).flatMap { String(format: \"%02x\", $0.withUnsafeBytes\
    \ { CC_MD5($0.baseAddress, CC_LONG($0.count), nil) }) }\n                    \
    \                                                                            \
    \                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if (text.isEmpty) {\n        return nil\n    }\n \
    \   let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpy68a057r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpy68a057r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpy68a057r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpy68a057r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy68a057r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpy68a057r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpy68a057r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let textStr = text.cString(using: .utf8)\n    let textLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ .utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(textStr!, textLen, result)\n    return stringFromResult(result:\
    \ result, length: digestLen)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnlqrdr3i.swift:10:24: error: value of type 'String' has no member\
    \ 'cString'\n    let textStr = text.cString(using: .utf8)\n                  ~~~~\
    \ ^~~~~~~\n/tmp/tmpnlqrdr3i.swift:10:40: error: cannot infer contextual base in\
    \ reference to member 'utf8'\n    let textStr = text.cString(using: .utf8)\n \
    \                                     ~^~~~\n/tmp/tmpnlqrdr3i.swift:11:37: error:\
    \ value of type 'String' has no member 'lengthOfBytes'\n    let textLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ .utf8))\n                               ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpnlqrdr3i.swift:11:59:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let textLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: .utf8))\n                         \
    \                                ~^~~~\n/tmp/tmpnlqrdr3i.swift:12:25: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnlqrdr3i.swift:14:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(textStr!, textLen, result)\n    ^~~~~~\n\
    /tmp/tmpnlqrdr3i.swift:15:12: error: cannot find 'stringFromResult' in scope\n\
    \    return stringFromResult(result: result, length: digestLen)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    var result: [CUnsignedChar] = [CUnsignedChar](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    let text_c_str = text.cString(using: .utf8)\n\
    \    CC_MD5(text_c_str, CC_LONG(text.lengthOfBytes(using: .utf8)), &result)\n\
    \    return result.reduce(\"\") { $0 + String(format: \"%02x\", $1) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmiz0i2no.swift:10:76: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var result: [CUnsignedChar] = [CUnsignedChar](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n                                               \
    \                            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmiz0i2no.swift:11:27:\
    \ error: value of type 'String' has no member 'cString'\n    let text_c_str =\
    \ text.cString(using: .utf8)\n                     ~~~~ ^~~~~~~\n/tmp/tmpmiz0i2no.swift:11:43:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let text_c_str\
    \ = text.cString(using: .utf8)\n                                         ~^~~~\n\
    /tmp/tmpmiz0i2no.swift:12:5: error: cannot find 'CC_MD5' in scope\n    CC_MD5(text_c_str,\
    \ CC_LONG(text.lengthOfBytes(using: .utf8)), &result)\n    ^~~~~~\n/tmp/tmpmiz0i2no.swift:12:24:\
    \ error: cannot find 'CC_LONG' in scope\n    CC_MD5(text_c_str, CC_LONG(text.lengthOfBytes(using:\
    \ .utf8)), &result)\n                       ^~~~~~~\n/tmp/tmpmiz0i2no.swift:12:37:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    CC_MD5(text_c_str,\
    \ CC_LONG(text.lengthOfBytes(using: .utf8)), &result)\n                      \
    \         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmiz0i2no.swift:12:59: error: cannot infer\
    \ contextual base in reference to member 'utf8'\n    CC_MD5(text_c_str, CC_LONG(text.lengthOfBytes(using:\
    \ .utf8)), &result)\n                                                        \
    \ ~^~~~\n/tmp/tmpmiz0i2no.swift:13:37: error: no exact matches in call to initializer\
    \ \n    return result.reduce(\"\") { $0 + String(format: \"%02x\", $1) }\n   \
    \                                 ^\n/tmp/tmpmiz0i2no.swift:13:37: note: candidate\
    \ has partially matching parameter list (repeating: String, count: Int)\n    return\
    \ result.reduce(\"\") { $0 + String(format: \"%02x\", $1) }\n                \
    \                    ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\nSwift.String:3:12:\
    \ note: candidate '(Strin"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.isEmpty == false else {\n        return\
    \ nil\n    }\n    let messageData = text.data(using:.utf8)!\n    var digestData\
    \ = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmksdp97a.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpmksdp97a.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpmksdp97a.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpmksdp97a.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmksdp97a.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpmksdp97a.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpmksdp97a.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ {\n            CC_MD5($0, CC_LONG(data.count), &digest)\n        }\n    }\n\
    \    var md5 = \"\"\n    for byte in digest {\n        md5 += String(format:\"\
    %02x\", UInt8(byte))\n    }\n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2in7dsj.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv2in7dsj.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpv2in7dsj.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpv2in7dsj.swift:13:13: error: cannot find 'CC_MD5' in scope\n         \
    \   CC_MD5($0, CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmpv2in7dsj.swift:13:24:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5($0, CC_LONG(data.count),\
    \ &digest)\n                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let rawstr = text.cString(using: String.Encoding.utf8)\n    let str\
    \ = UnsafePointer<UInt8>(rawstr)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgd75__p6.swift:10:23: error: value of type 'String' has no member\
    \ 'cString'\n    let rawstr = text.cString(using: String.Encoding.utf8)\n    \
    \             ~~~~ ^~~~~~~\n/tmp/tmpgd75__p6.swift:10:45: error: type 'String'\
    \ has no member 'Encoding'\n    let rawstr = text.cString(using: String.Encoding.utf8)\n\
    \                                     ~~~~~~ ^~~~~~~~\n/tmp/tmpgd75__p6.swift:12:18:\
    \ error: cannot find 'CC_LONG' in scope\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                 ^~~~~~~\n/tmp/tmpgd75__p6.swift:12:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n               \
    \          ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpgd75__p6.swift:12:59: error: type 'String'\
    \ has no member 'Encoding'\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpgd75__p6.swift:13:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgd75__p6.swift:15:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpgd75__p6.swift:16:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpgd75__p6.swift:21:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let data = text.data(using: .utf8)\n    return data_to_md5(data:\
    \ data)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzd894wr0.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpzd894wr0.swift:7:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpzd894wr0.swift:8:12:\
    \ error: cannot find 'data_to_md5' in scope\n    return data_to_md5(data: data)\n\
    \           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard text.isEmpty == false else {\n\t\treturn nil\n\
    \t}\n\t\n\tlet key = \"SALTED_MD5\"\n\t\n\tlet str = text + key\n\tlet length\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n\tlet messageData = str.data(using:.utf8)!\n\t\
    var digestData = Data(count: length)\n\t\n\t_ = digestData.withUnsafeMutableBytes\
    \ { digestBytes -> UInt8 in\n\t\tmessageData.withUnsafeBytes { messageBytes ->\
    \ UInt8 in\n\t\t\tif let messageBytesBaseAddress = messageBytes.baseAddress, let\
    \ digestBytesBlindMemory = digestBytes.bindMemory(to: UInt8.self).baseAddress\
    \ {\n\t\t\t\tlet messageLength = CC_LONG(messageData.count)\n\t\t\t\tCC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n\t\t\t}\n\t\t\treturn 0\n\t\t}\n\t}\n\
    \treturn digestData.map { String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp71yworip.swift:14:19: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        let length = Int(CC_MD5_DIGEST_LENGTH)\n                 \
    \        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp71yworip.swift:15:24: error: value of type\
    \ 'String' has no member 'data'\n        let messageData = str.data(using:.utf8)!\n\
    \                          ~~~ ^~~~\n/tmp/tmp71yworip.swift:15:36: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n        let messageData\
    \ = str.data(using:.utf8)!\n                                         ~^~~~\n/tmp/tmp71yworip.swift:16:19:\
    \ error: cannot find 'Data' in scope\n        var digestData = Data(count: length)\n\
    \                         ^~~~\n/tmp/tmp71yworip.swift:21:25: error: cannot find\
    \ 'CC_LONG' in scope\n                                let messageLength = CC_LONG(messageData.count)\n\
    \                                                    ^~~~~~~\n/tmp/tmp71yworip.swift:22:5:\
    \ error: cannot find 'CC_MD5' in scope\n                                CC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n                                ^~~~~~\n\
    /tmp/tmp71yworip.swift:27:32: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n        return digestData.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n                                      ^~~~~~~\n\
    \                                       repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let stringData = text.data(using: .utf8)\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    stringData?.withUnsafeBytes {\n  \
    \      _ = CC_MD5($0.baseAddress, CC_LONG(stringData!.count), &digest)\n    }\n\
    \    return digest.map({String(format: \"%02hhx\", $0)}).joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp23_bdxan.swift:10:27: error: value of type 'String' has no member\
    \ 'data'\n    let stringData = text.data(using: .utf8)\n                     ~~~~\
    \ ^~~~\n/tmp/tmp23_bdxan.swift:10:40: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let stringData = text.data(using: .utf8)\n           \
    \                           ~^~~~\n/tmp/tmp23_bdxan.swift:11:51: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                                        \
    \          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp23_bdxan.swift:13:13: error: cannot find\
    \ 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(stringData!.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmp23_bdxan.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(stringData!.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmp23_bdxan.swift:15:30:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map({String(format: \"%02hhx\", $0)}).joined()\n          \
    \                   ^~~~~~~\n                              repeating         count:\
    \ \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    if let d = text.data(using: String.Encoding.utf8) {\n\
    \        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n           \
    \ CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    return (0..<length).reduce(\"\
    \") {\n        $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_ljfjcdf.swift:10:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_ljfjcdf.swift:12:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmp_ljfjcdf.swift:12:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmp_ljfjcdf.swift:14:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmp_ljfjcdf.swift:14:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmp_ljfjcdf.swift:18:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count < 1 {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoaoukjpv.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count < 1 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpoaoukjpv.swift:10:28:\
    \ error: value of type 'String' has no member 'data'\n    let messageData = text.data(using:.utf8)!\n\
    \                      ~~~~ ^~~~\n/tmp/tmpoaoukjpv.swift:10:40: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpoaoukjpv.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpoaoukjpv.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoaoukjpv.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpoaoukjpv.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpoaoukjpv.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count > 0 {\n        let messageData = text.data(using:.utf8)!\n\
    \        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n        \n \
    \       _ = digestData.withUnsafeMutableBytes {digestBytes in\n            messageData.withUnsafeBytes\
    \ {messageBytes in\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            }\n        }\n        \n        return digestData.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpq3mck76w.swift:8:32: error: value of type 'String' has no member\
    \ 'data'\n        let messageData = text.data(using:.utf8)!\n                \
    \          ~~~~ ^~~~\n/tmp/tmpq3mck76w.swift:8:44: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n        let messageData = text.data(using:.utf8)!\n\
    \                                          ~^~~~\n/tmp/tmpq3mck76w.swift:9:26:\
    \ error: cannot find 'Data' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                         ^~~~\n/tmp/tmpq3mck76w.swift:9:42: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq3mck76w.swift:13:17:\
    \ error: cannot find 'CC_MD5' in scope\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                ^~~~~~\n/tmp/tmpq3mck76w.swift:13:38: error: cannot\
    \ find 'CC_LONG' in scope\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                     ^~~~~~~\n/tmp/tmpq3mck76w.swift:17:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n \
    \                                     ^~~~~~~\n                              \
    \         repeating         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let str = text.cString(using: String.Encoding.utf8)\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0 ..< digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfe8ixizc.swift:10:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpfe8ixizc.swift:10:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpfe8ixizc.swift:11:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpfe8ixizc.swift:11:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpfe8ixizc.swift:12:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfe8ixizc.swift:14:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpfe8ixizc.swift:15:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpfe8ixizc.swift:20:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n    var\
    \ digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5_Init(context)\n\
    \    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n\
    \    CC_MD5_Final(&digest, context)\n    context.deallocate()\n    var hexString\
    \ = \"\"\n    for byte in digest {\n        hexString += String(format:\"%02x\"\
    , byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppbm8_3qz.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmppbm8_3qz.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmppbm8_3qz.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmppbm8_3qz.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let messageData = text.data(using:.utf8)!\n    var\
    \ digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    \n    if let md5Hex = digestData.map({ String(format: \"%02hhx\"\
    , $0) }).joined() as String? {\n        return md5Hex\n    } else {\n        return\
    \ nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpln9amcyu.swift:7:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpln9amcyu.swift:7:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpln9amcyu.swift:8:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpln9amcyu.swift:8:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpln9amcyu.swift:12:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpln9amcyu.swift:12:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpln9amcyu.swift:16:44:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    if let md5Hex = digestData.map({ String(format: \"%02hhx\", $0) }).joined()\
    \ as String? {\n                                           ^~~~~~~\n         \
    \                                   repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = text.data(using: .utf8)\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    data?.withUnsafeBytes {\n        _\
    \ = CC_MD5($0.baseAddress, CC_LONG(data!.count), &digest)\n    }\n    var md5String\
    \ = \"\"\n    for byte in digest {\n        md5String += String(format:\"%02x\"\
    , UInt8(byte))\n    }\n    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7180booz.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp7180booz.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp7180booz.swift:11:51:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7180booz.swift:13:13: error: cannot\
    \ find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data!.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmp7180booz.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data!.count),\
    \ &digest)\n                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard text.characters.count > 0 else {\n\t\treturn nil\n\
    \t}\n\tlet data = text.data(using: String.Encoding.utf8)\n\treturn data?.md5.hex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf2k29gs8.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n        guard text.characters.count > 0 else {\n      \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpf2k29gs8.swift:10:18: error: value of type 'String' has no member\
    \ 'data'\n        let data = text.data(using: String.Encoding.utf8)\n        \
    \           ~~~~ ^~~~\n/tmp/tmpf2k29gs8.swift:10:37: error: type 'String' has\
    \ no member 'Encoding'\n        let data = text.data(using: String.Encoding.utf8)\n\
    \                                    ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let messageData = text.data(using:.utf8) {\n  \
    \      var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n        \n   \
    \     _ = digestData.withUnsafeMutableBytes {digestBytes in\n            messageData.withUnsafeBytes\
    \ {messageBytes in\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            }\n        }\n        \n        return digestData.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n    }\n    return nil\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5341jbq8.swift:7:31: error: value of type 'String' has no member\
    \ 'data'\n    if let messageData = text.data(using:.utf8) {\n                \
    \         ~~~~ ^~~~\n/tmp/tmp5341jbq8.swift:7:43: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    if let messageData = text.data(using:.utf8)\
    \ {\n                                         ~^~~~\n/tmp/tmp5341jbq8.swift:8:26:\
    \ error: cannot find 'Data' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                         ^~~~\n/tmp/tmp5341jbq8.swift:8:42: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5341jbq8.swift:12:17:\
    \ error: cannot find 'CC_MD5' in scope\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                ^~~~~~\n/tmp/tmp5341jbq8.swift:12:38: error: cannot\
    \ find 'CC_LONG' in scope\n                CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                     ^~~~~~~\n/tmp/tmp5341jbq8.swift:16:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n \
    \                                     ^~~~~~~\n                              \
    \         repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tif text.isEmpty {\n\t\treturn nil\n\t}\n\t\n\tlet messageData\
    \ = text.data(using:.utf8)!\n\tvar digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \t\n\t_ = digestData.withUnsafeMutableBytes {digestBytes in\n\t\tmessageData.withUnsafeBytes\
    \ {messageBytes in\n\t\t\tCC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n\
    \t\t}\n\t}\n\t\n\treturn digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7bftlp01.swift:11:25: error: value of type 'String' has no member\
    \ 'data'\n        let messageData = text.data(using:.utf8)!\n                \
    \          ~~~~ ^~~~\n/tmp/tmp7bftlp01.swift:11:37: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n        let messageData = text.data(using:.utf8)!\n\
    \                                          ~^~~~\n/tmp/tmp7bftlp01.swift:12:19:\
    \ error: cannot find 'Data' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                         ^~~~\n/tmp/tmp7bftlp01.swift:12:35: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7bftlp01.swift:16:4:\
    \ error: cannot find 'CC_MD5' in scope\n                        CC_MD5(messageBytes,\
    \ CC_LONG(messageData.count), digestBytes)\n                        ^~~~~~\n/tmp/tmp7bftlp01.swift:16:25:\
    \ error: cannot find 'CC_LONG' in scope\n                        CC_MD5(messageBytes,\
    \ CC_LONG(messageData.count), digestBytes)\n                                 \
    \            ^~~~~~~\n/tmp/tmp7bftlp01.swift:20:32: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        return\
    \ digestData.map { String(format: \"%02hhx\", $0) }.joined()\n               \
    \                       ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes:\
    \ UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfyr15ydm.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpfyr15ydm.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfyr15ydm.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpfyr15ydm.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpfyr15ydm.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let md5 = String(format: \"%02x\", String(text).md5.map { String(format:\
    \ \"%02hhx\", $0) })\n    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpgfoo595h.swift:10:21: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    let md5 = String(format:\
    \ \"%02x\", String(text).md5.map { String(format: \"%02hhx\", $0) })\n       \
    \             ^~~~~~~\n                     repeating       count: \n/tmp/tmpgfoo595h.swift:10:67:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let md5 = String(format: \"%02x\", String(text).md5.map { String(format:\
    \ \"%02hhx\", $0) })\n                                                       \
    \           ^~~~~~~\n                                                        \
    \           repeating         count: \n/tmp/tmpgfoo595h.swift:10:51: error: value\
    \ of type 'String' has no member 'md5'\n    let md5 = String(format: \"%02x\"\
    , String(text).md5.map { String(format: \"%02hhx\", $0) })\n                 \
    \                    ~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013584
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n\
    \    var digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5_Init(context)\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n    CC_MD5_Final(&digest, context)\n    context.deallocate()\n\
    \    var hexString = \"\"\n    for byte in digest {\n        hexString += String(format:\"\
    %02x\", byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1dwl6j9i.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmp1dwl6j9i.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmp1dwl6j9i.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return MD5(text).lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpee1_7a31.swift:10:12: error: cannot find 'MD5' in scope\n    return\
    \ MD5(text).lowercased()\n           ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = text.data(using: .utf8)!\n    let md5Hash = data.withUnsafeBytes\
    \ { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5Hash.map { String(format:\
    \ \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb6clbw68.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpb6clbw68.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpb6clbw68.swift:12:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb6clbw68.swift:13:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpb6clbw68.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpb6clbw68.swift:16:32: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return md5Hash.map { String(format: \"%02x\", $0) }.joined()\n          \
    \                     ^~~~~~~\n                                repeating     \
    \  count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  if (text.isEmpty) {\n    return nil\n  }\n  let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n  let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n  text.withCString { (pointer) -> Void in\n    CC_MD5(pointer, CC_LONG(strlen(pointer)),\
    \ result)\n  }\n  let hash = NSMutableString()\n  for i in 0..<digestLen {\n \
    \   hash.appendFormat(\"%02x\", result[i])\n  }\n  result.deallocate()\n  return\
    \ String(format: hash as String)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplc6kx6oh.swift:10:23: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n  let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                    \
    \  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplc6kx6oh.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(pointer, CC_LONG(strlen(pointer)), result)\n    ^~~~~~\n\
    /tmp/tmplc6kx6oh.swift:13:21: error: cannot find 'CC_LONG' in scope\n    CC_MD5(pointer,\
    \ CC_LONG(strlen(pointer)), result)\n                    ^~~~~~~\n/tmp/tmplc6kx6oh.swift:13:29:\
    \ error: cannot find 'strlen' in scope\n    CC_MD5(pointer, CC_LONG(strlen(pointer)),\
    \ result)\n                            ^~~~~~\n/tmp/tmplc6kx6oh.swift:15:14: error:\
    \ cannot find 'NSMutableString' in scope\n  let hash = NSMutableString()\n   \
    \          ^~~~~~~~~~~~~~~\n/tmp/tmplc6kx6oh.swift:20:16: error: extraneous argument\
    \ label 'format:' in call\n  return String(format: hash as String)\n         \
    \      ^~~~~~~~~\n                \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.isEmpty ? nil : Utils.md5(text)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3db29__1.swift:7:33: error: cannot find 'Utils' in scope\n    return\
    \ text.isEmpty ? nil : Utils.md5(text)\n                                ^~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    let md5Hex =  digestData.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n    return md5Hex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcyw6ep9_.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpcyw6ep9_.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpcyw6ep9_.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpcyw6ep9_.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcyw6ep9_.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpcyw6ep9_.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpcyw6ep9_.swift:18:42:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let md5Hex =  digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    \                                         ^~~~~~~\n                          \
    \                repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let utf8_text = [UInt8](text.utf8)\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n\
    \    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(utf8_text, CC_LONG(utf8_text.count), result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deallocate()\n    return String(format: hash as String)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpurh7l_zv.swift:11:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n                 \
    \        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpurh7l_zv.swift:13:5: error: cannot find\
    \ 'CC_MD5' in scope\n    CC_MD5(utf8_text, CC_LONG(utf8_text.count), result)\n\
    \    ^~~~~~\n/tmp/tmpurh7l_zv.swift:13:23: error: cannot find 'CC_LONG' in scope\n\
    \    CC_MD5(utf8_text, CC_LONG(utf8_text.count), result)\n                   \
    \   ^~~~~~~\n/tmp/tmpurh7l_zv.swift:14:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpurh7l_zv.swift:19:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45j2budi.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let data = text.data(using: .utf8) {\n        let\
    \ digest = data.withUnsafeBytes { (bytes: UnsafePointer<UInt8>) -> [UInt8] in\n\
    \            var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \            CC_MD5(bytes, CC_LONG(data.count), &digest)\n            return digest\n\
    \        }\n        return digest.map({ String(format: \"%02x\", $0) }).joined()\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw7j7vu6m.swift:7:24: error: value of type 'String' has no member\
    \ 'data'\n    if let data = text.data(using: .utf8) {\n                  ~~~~\
    \ ^~~~\n/tmp/tmpw7j7vu6m.swift:7:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    if let data = text.data(using: .utf8) {\n            \
    \                       ~^~~~\n/tmp/tmpw7j7vu6m.swift:9:59: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n            var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                     ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7j7vu6m.swift:10:13: error:\
    \ cannot find 'CC_MD5' in scope\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpw7j7vu6m.swift:10:27: error: cannot find\
    \ 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(data.count), &digest)\n\
    \                          ^~~~~~~\n/tmp/tmpw7j7vu6m.swift:13:35: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \      return digest.map({ String(format: \"%02x\", $0) }).joined()\n        \
    \                          ^~~~~~~\n                                   repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let cString = text.cString(using: .utf8)\n    guard let bytes = cString\
    \ else {\n        return nil\n    }\n    let length = CC_LONG(text.lengthOfBytes(using:\
    \ .utf8))\n    let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n    let result =\
    \ UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLength)\n    CC_MD5(bytes,\
    \ length, result)\n    let hash = NSMutableString()\n    for i in 0..<digestLength\
    \ {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n    result.deallocate()\n\
    \    return String(format: hash as String)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpack_aj7x.swift:10:24: error: value of type 'String' has no member\
    \ 'cString'\n    let cString = text.cString(using: .utf8)\n                  ~~~~\
    \ ^~~~~~~\n/tmp/tmpack_aj7x.swift:10:40: error: cannot infer contextual base in\
    \ reference to member 'utf8'\n    let cString = text.cString(using: .utf8)\n \
    \                                     ~^~~~\n/tmp/tmpack_aj7x.swift:14:18: error:\
    \ cannot find 'CC_LONG' in scope\n    let length = CC_LONG(text.lengthOfBytes(using:\
    \ .utf8))\n                 ^~~~~~~\n/tmp/tmpack_aj7x.swift:14:31: error: value\
    \ of type 'String' has no member 'lengthOfBytes'\n    let length = CC_LONG(text.lengthOfBytes(using:\
    \ .utf8))\n                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpack_aj7x.swift:14:53:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let length\
    \ = CC_LONG(text.lengthOfBytes(using: .utf8))\n                              \
    \                     ~^~~~\n/tmp/tmpack_aj7x.swift:15:28: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpack_aj7x.swift:17:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(bytes, length, result)\n  \
    \  ^~~~~~\n/tmp/tmpack_aj7x.swift:18:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpack_aj7x.swift:23:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<CChar>) -> Int in\n            return CC_MD5(bytes,\
    \ CC_LONG(data.count), &digest)\n        }\n    }\n    var md5 = \"\"\n    for\
    \ byte in digest {\n        md5 += String(format:\"%02x\", UInt8(byte))\n    }\n\
    \    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm4t63thr.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm4t63thr.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpm4t63thr.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpm4t63thr.swift:13:20: error: cannot find 'CC_MD5' in scope\n         \
    \   return CC_MD5(bytes, CC_LONG(data.count), &digest)\n                   ^~~~~~\n\
    /tmp/tmpm4t63thr.swift:13:34: error: cannot find 'CC_LONG' in scope\n        \
    \    return CC_MD5(bytes, CC_LONG(data.count), &digest)\n                    \
    \             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let utf8 = text.utf8\n    var bytes = Array<UInt8>(utf8)\n    let m\
    \ = MD5(&bytes)\n    let md5 = m.map { String(format: \"%02hhx\", $0) }.joined()\n\
    \    return md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxaihayio.swift:12:13: error: cannot find 'MD5' in scope\n    let\
    \ m = MD5(&bytes)\n            ^~~\n/tmp/tmpxaihayio.swift:13:29: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  let md5 = m.map { String(format: \"%02hhx\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating         count:\
    \ \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(data.count), &digest)\n    }\n    let hexBytes = digest.map { String(format:\
    \ \"%02hhx\", $0) }\n    return hexBytes.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphs1vqtay.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmphs1vqtay.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmphs1vqtay.swift:11:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphs1vqtay.swift:13:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmphs1vqtay.swift:13:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmphs1vqtay.swift:15:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexBytes = digest.map { String(format: \"%02hhx\", $0) }\n          \
    \                            ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n    var\
    \ digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5_Init(context)\n\
    \    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n\
    \    CC_MD5_Final(&digest, context)\n    context.deallocate()\n    var hexString\
    \ = \"\"\n    for byte in digest {\n        hexString += String(format:\"%02x\"\
    , byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppbm8_3qz.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmppbm8_3qz.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmppbm8_3qz.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmppbm8_3qz.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    return hash(string: text, algorithm: .md5)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmplmpwbuw4.swift:10:12: error: cannot find 'hash' in scope\n    return\
    \ hash(string: text, algorithm: .md5)\n           ^~~~\n/tmp/tmplmpwbuw4.swift:10:43:\
    \ error: cannot infer contextual base in reference to member 'md5'\n    return\
    \ hash(string: text, algorithm: .md5)\n                                      \
    \   ~^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return MD5(text).lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpee1_7a31.swift:10:12: error: cannot find 'MD5' in scope\n    return\
    \ MD5(text).lowercased()\n           ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    guard let data = text.data(using: .utf8) else {\n        return nil\n\
    \    }\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrt4mo6i.swift:10:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: .utf8) else {\n              \
    \       ~~~~ ^~~~\n/tmp/tmpnrt4mo6i.swift:10:40: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let data = text.data(using: .utf8)\
    \ else {\n                                      ~^~~~\n/tmp/tmpnrt4mo6i.swift:14:53:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnrt4mo6i.swift:15:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpnrt4mo6i.swift:15:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpnrt4mo6i.swift:18:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let data = text.data(using: .utf8) {\n        let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \            var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \            CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n         \
    \   return hash\n        }\n        return hash.map { String(format: \"%02x\"\
    , $0) }.joined()\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpxcwhbtbj.swift:7:24: error: value of type 'String' has no member\
    \ 'data'\n    if let data = text.data(using: .utf8) {\n                  ~~~~\
    \ ^~~~\n/tmp/tmpxcwhbtbj.swift:7:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    if let data = text.data(using: .utf8) {\n            \
    \                       ~^~~~\n/tmp/tmpxcwhbtbj.swift:9:57: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n            var hash = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                                        \
    \                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxcwhbtbj.swift:10:13: error: cannot\
    \ find 'CC_MD5' in scope\n            CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n            ^~~~~~\n/tmp/tmpxcwhbtbj.swift:10:39: error: cannot find\
    \ 'CC_LONG' in scope\n            CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n                                      ^~~~~~~\n/tmp/tmpxcwhbtbj.swift:13:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        return hash.map { String(format: \"%02x\", $0) }.joined()\n         \
    \                       ^~~~~~~\n                                 repeating  \
    \     count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n\n \
    \   var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n   \
    \ if let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<CChar>) -> Int in\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n            return 0\n        }\n    }\n\n    var digestHex = \"\"\
    \n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex += String(format:\
    \ \"%02x\", digest[index])\n    }\n\n    return digestHex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpwyuxzt37.swift:11:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwyuxzt37.swift:12:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpwyuxzt37.swift:12:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpwyuxzt37.swift:14:13: error: cannot find 'CC_MD5' in scope\n         \
    \   CC_MD5(bytes, CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmpwyuxzt37.swift:14:27:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                          ^~~~~~~\n/tmp/tmpwyuxzt37.swift:20:26: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let cText = text.cString(using: .utf8)\n    if cText\
    \ != nil {\n        let length = Int(CC_MD5_DIGEST_LENGTH)\n        let result\
    \ = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: length)\n        CC_MD5(cText!,\
    \ (CC_LONG)(strlen(cText!)), result)\n        let md5String = NSMutableString()\n\
    \        for i in 0..<length {\n            md5String.appendFormat(\"%02x\", result[i])\n\
    \        }\n        result.deallocate()\n        return md5String as String\n\
    \    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfkvdyt7b.swift:7:22: error: value of type 'String' has no member\
    \ 'cString'\n    let cText = text.cString(using: .utf8)\n                ~~~~\
    \ ^~~~~~~\n/tmp/tmpfkvdyt7b.swift:7:38: error: cannot infer contextual base in\
    \ reference to member 'utf8'\n    let cText = text.cString(using: .utf8)\n   \
    \                                 ~^~~~\n/tmp/tmpfkvdyt7b.swift:9:26: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n        let length = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfkvdyt7b.swift:11:9: error:\
    \ cannot find 'CC_MD5' in scope\n        CC_MD5(cText!, (CC_LONG)(strlen(cText!)),\
    \ result)\n        ^~~~~~\n/tmp/tmpfkvdyt7b.swift:11:25: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(cText!, (CC_LONG)(strlen(cText!)), result)\n      \
    \                  ^~~~~~~\n/tmp/tmpfkvdyt7b.swift:11:34: error: cannot find 'strlen'\
    \ in scope\n        CC_MD5(cText!, (CC_LONG)(strlen(cText!)), result)\n      \
    \                           ^~~~~~\n/tmp/tmpfkvdyt7b.swift:12:25: error: cannot\
    \ find 'NSMutableString' in scope\n        let md5String = NSMutableString()\n\
    \                        ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45j2budi.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard text.count > 0 else { return nil }\n\tvar digest\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\tif let data = text.data(using:\
    \ String.Encoding.utf8) {\n\t\tdata.withUnsafeBytes {\n\t\t\t_ = CC_MD5($0, CC_LONG(data.count),\
    \ &digest)\n\t\t}\n\t}\n\treturn digest.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpq5wymdm2.swift:8:48: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                      ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq5wymdm2.swift:9:21: error: value of type 'String' has no member 'data'\n\
    \        if let data = text.data(using: String.Encoding.utf8) {\n            \
    \          ~~~~ ^~~~\n/tmp/tmpq5wymdm2.swift:9:40: error: type 'String' has no\
    \ member 'Encoding'\n        if let data = text.data(using: String.Encoding.utf8)\
    \ {\n                                       ~~~~~~ ^~~~~~~~\n/tmp/tmpq5wymdm2.swift:11:8:\
    \ error: cannot find 'CC_MD5' in scope\n                        _ = CC_MD5($0,\
    \ CC_LONG(data.count), &digest)\n                            ^~~~~~\n/tmp/tmpq5wymdm2.swift:11:19:\
    \ error: cannot find 'CC_LONG' in scope\n                        _ = CC_MD5($0,\
    \ CC_LONG(data.count), &digest)\n                                       ^~~~~~~\n\
    /tmp/tmpq5wymdm2.swift:14:28: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n        return digest.map { String(format: \"\
    %02x\", $0) }.joined()\n                                  ^~~~~~~\n          \
    \                         repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count == 0 {\n        return nil\n    }\n\
    \    let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes:\
    \ UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkythkwaz.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpkythkwaz.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkythkwaz.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpkythkwaz.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpkythkwaz.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.characters.count > 0 else {\n        return\
    \ nil\n    }\n    \n    let utf8Text = text.utf8.map { $0 }\n    let md5Data =\
    \ md5(utf8Text)\n    let md5Hex = NSMutableString()\n    for byte in md5Data {\n\
    \        md5Hex.appendFormat(\"%02x\", UInt(byte))\n    }\n    \n    return md5Hex\
    \ as String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcyw9lf38.swift:7:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard text.characters.count > 0 else {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpcyw9lf38.swift:12:19:\
    \ error: cannot find 'md5' in scope\n    let md5Data = md5(utf8Text)\n       \
    \           ^~~\n/tmp/tmpcyw9lf38.swift:13:18: error: cannot find 'NSMutableString'\
    \ in scope\n    let md5Hex = NSMutableString()\n                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let textData = text.data(using: .utf8) {\n    \
    \    let md5 = textData.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n            var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \            CC_MD5(bytes, CC_LONG(textData.count), &hash)\n            return\
    \ hash\n        }\n        let md5Hex = md5.map { String(format: \"%02x\", $0)\
    \ }.joined()\n        return md5Hex\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_7dfadsu.swift:7:28: error: value of type 'String' has no member\
    \ 'data'\n    if let textData = text.data(using: .utf8) {\n                  \
    \    ~~~~ ^~~~\n/tmp/tmp_7dfadsu.swift:7:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    if let textData = text.data(using: .utf8)\
    \ {\n                                       ~^~~~\n/tmp/tmp_7dfadsu.swift:9:66:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n            var hash: [UInt8]\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                \
    \                                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_7dfadsu.swift:10:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(bytes, CC_LONG(textData.count),\
    \ &hash)\n            ^~~~~~\n/tmp/tmp_7dfadsu.swift:10:27: error: cannot find\
    \ 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(textData.count), &hash)\n\
    \                          ^~~~~~~\n/tmp/tmp_7dfadsu.swift:13:38: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \      let md5Hex = md5.map { String(format: \"%02x\", $0) }.joined()\n      \
    \                               ^~~~~~~\n                                    \
    \  repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let cStr = text.cString(using: String.Encoding.utf8)\n    let buffer = UnsafeMutablePointer<UInt8>.allocate(capacity:\
    \ 16)\n    CC_MD5(cStr!, CC_LONG(strlen(cStr!)), buffer)\n    var md5String =\
    \ \"\"\n    for idx in 0...15 {\n        let obcStrl = String.init(format: \"\
    %02x\", buffer[idx])\n        md5String.append(obcStrl)\n    }\n    free(buffer)\n\
    \    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2znd_69u.swift:10:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cStr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp2znd_69u.swift:10:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cStr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp2znd_69u.swift:12:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(cStr!, CC_LONG(strlen(cStr!)),\
    \ buffer)\n    ^~~~~~\n/tmp/tmp2znd_69u.swift:12:19: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(cStr!, CC_LONG(strlen(cStr!)), buffer)\n              \
    \    ^~~~~~~\n/tmp/tmp2znd_69u.swift:12:27: error: cannot find 'strlen' in scope\n\
    \    CC_MD5(cStr!, CC_LONG(strlen(cStr!)), buffer)\n                         \
    \ ^~~~~~\n/tmp/tmp2znd_69u.swift:15:30: error: no exact matches in call to initializer\
    \ \n        let obcStrl = String.init(format: \"%02x\", buffer[idx])\n       \
    \                      ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmp2znd_69u.swift:15:30:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        let obcStrl = String.init(format: \"%02x\", buffer[idx])\n   \
    \                          ^\nSwift.String:3:12: note: candidate '(String) ->\
    \ String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmp2znd_69u.swift:18:5: error: cannot\
    \ find 'free' in"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    let\
    \ bytes = [UInt8](text.utf8)\n    CC_MD5(bytes, CC_LONG(bytes.count), &hash)\n\
    \    return hash.hex()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzho4hrw1.swift:10:49: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzho4hrw1.swift:12:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(bytes, CC_LONG(bytes.count),\
    \ &hash)\n    ^~~~~~\n/tmp/tmpzho4hrw1.swift:12:19: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(bytes, CC_LONG(bytes.count), &hash)\n                 \
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = data.withUnsafeBytes { (bytes: UnsafePointer<UInt8>)\
    \ -> UInt8 in\n        CC_MD5(bytes, CC_LONG(data.count), &digest)\n        return\
    \ 0\n    }\n    return digest.reduce(\"\") { $0 + String(format: \"%02x\", $1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_to_md5(text: \"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") ==\
    \ nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf1l9xbfw.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpf1l9xbfw.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpf1l9xbfw.swift:11:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf1l9xbfw.swift:13:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n        ^~~~~~\n/tmp/tmpf1l9xbfw.swift:13:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(data.count), &digest)\n            \
    \          ^~~~~~~\n/tmp/tmpf1l9xbfw.swift:16:43: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return digest.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }\n                                  \
    \        ^~~~~~~\n                                           repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count == 0 {\n        return nil\n    }\n\
    \    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp5y1xo53x.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp5y1xo53x.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp5y1xo53x.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp5y1xo53x.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5y1xo53x.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp5y1xo53x.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp5y1xo53x.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpweklr40s.swift:7:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count == 0 {\n        return nil\n    }\n\
    \    return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3mmiwt9f.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n\
    \    var digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5_Init(context)\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n    CC_MD5_Final(&digest, context)\n    context.deallocate()\n\
    \    var hexString = \"\"\n    for byte in digest {\n        hexString += String(format:\"\
    %02x\", byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1dwl6j9i.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmp1dwl6j9i.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1dwl6j9i.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmp1dwl6j9i.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ if let _text = text.data(using: .utf8) {\n        let _md5 = _text.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n            var _md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n            CC_MD5(bytes, CC_LONG(text.count),\
    \ &_md5)\n            return _md5\n        }\n        let md5_str = _md5.map({String(format:\
    \ \"%02hhx\", $0)}).joined()\n        return md5_str\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpdf28tgez.swift:10:25: error: value of type 'String' has no member\
    \ 'data'\n    if let _text = text.data(using: .utf8) {\n                   ~~~~\
    \ ^~~~\n/tmp/tmpdf28tgez.swift:10:38: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    if let _text = text.data(using: .utf8) {\n           \
    \                         ~^~~~\n/tmp/tmpdf28tgez.swift:12:57: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n            var _md5 = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                                        \
    \                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdf28tgez.swift:13:13: error: cannot\
    \ find 'CC_MD5' in scope\n            CC_MD5(bytes, CC_LONG(text.count), &_md5)\n\
    \            ^~~~~~\n/tmp/tmpdf28tgez.swift:13:27: error: cannot find 'CC_LONG'\
    \ in scope\n            CC_MD5(bytes, CC_LONG(text.count), &_md5)\n          \
    \                ^~~~~~~\n/tmp/tmpdf28tgez.swift:16:39: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        let\
    \ md5_str = _md5.map({String(format: \"%02hhx\", $0)}).joined()\n            \
    \                          ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let cStr = text.cString(using: String.Encoding.utf8)\n    let buffer = UnsafeMutablePointer<UInt8>.allocate(capacity:\
    \ 16)\n    CC_MD5(cStr!, CC_LONG(strlen(cStr!)), buffer)\n    var md5String =\
    \ \"\"\n    for idx in 0...15 {\n        let obcStrl = String.init(format: \"\
    %02x\", buffer[idx])\n        md5String.append(obcStrl)\n    }\n    free(buffer)\n\
    \    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2znd_69u.swift:10:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cStr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp2znd_69u.swift:10:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cStr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp2znd_69u.swift:12:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(cStr!, CC_LONG(strlen(cStr!)),\
    \ buffer)\n    ^~~~~~\n/tmp/tmp2znd_69u.swift:12:19: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(cStr!, CC_LONG(strlen(cStr!)), buffer)\n              \
    \    ^~~~~~~\n/tmp/tmp2znd_69u.swift:12:27: error: cannot find 'strlen' in scope\n\
    \    CC_MD5(cStr!, CC_LONG(strlen(cStr!)), buffer)\n                         \
    \ ^~~~~~\n/tmp/tmp2znd_69u.swift:15:30: error: no exact matches in call to initializer\
    \ \n        let obcStrl = String.init(format: \"%02x\", buffer[idx])\n       \
    \                      ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmp2znd_69u.swift:15:30:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        let obcStrl = String.init(format: \"%02x\", buffer[idx])\n   \
    \                          ^\nSwift.String:3:12: note: candidate '(String) ->\
    \ String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmp2znd_69u.swift:18:5: error: cannot\
    \ find 'free' in"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let msg = text.data(using: .utf8)\n    let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n\
    \    let digest = UnsafeMutablePointer<UInt8>.allocate(capacity: digestLength)\n\
    \    CC_MD5(msg?.bytes, CC_LONG(msg?.count ?? 0), digest)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLength {\n        hash.appendFormat(\"%02x\", digest[i])\n\
    \    }\n    digest.deallocate()\n    return String(format: hash as String)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfmttsmzh.swift:10:20: error: value of type 'String' has no member\
    \ 'data'\n    let msg = text.data(using: .utf8)\n              ~~~~ ^~~~\n/tmp/tmpfmttsmzh.swift:10:33:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let msg\
    \ = text.data(using: .utf8)\n                               ~^~~~\n/tmp/tmpfmttsmzh.swift:11:28:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfmttsmzh.swift:13:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(msg?.bytes, CC_LONG(msg?.count\
    \ ?? 0), digest)\n    ^~~~~~\n/tmp/tmpfmttsmzh.swift:13:24: error: cannot find\
    \ 'CC_LONG' in scope\n    CC_MD5(msg?.bytes, CC_LONG(msg?.count ?? 0), digest)\n\
    \                       ^~~~~~~\n/tmp/tmpfmttsmzh.swift:14:16: error: cannot find\
    \ 'NSMutableString' in scope\n    let hash = NSMutableString()\n             \
    \  ^~~~~~~~~~~~~~~\n/tmp/tmpfmttsmzh.swift:19:18: error: extraneous argument label\
    \ 'format:' in call\n    return String(format: hash as String)\n             \
    \    ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let cString = text.cString(using: String.Encoding.utf8)\n    let byteArray\
    \ = [UInt8](cString!.dropLast())\n    let str = UnsafePointer<Int8>(byteArray)\n\
    \    let length = CUnsignedInt(byteArray.count)\n    let md5 = UnsafeMutablePointer<Int8>.allocate(capacity:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(str, length, md5)\n    let digest = stringFromResult(md5:\
    \ md5, length: Int(CC_MD5_DIGEST_LENGTH))\n    md5.deallocate()\n    return digest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpwstck45k.swift:10:24: error: value of type 'String' has no member\
    \ 'cString'\n    let cString = text.cString(using: String.Encoding.utf8)\n   \
    \               ~~~~ ^~~~~~~\n/tmp/tmpwstck45k.swift:10:46: error: type 'String'\
    \ has no member 'Encoding'\n    let cString = text.cString(using: String.Encoding.utf8)\n\
    \                                      ~~~~~~ ^~~~~~~~\n/tmp/tmpwstck45k.swift:14:65:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    let md5 = UnsafeMutablePointer<Int8>.allocate(capacity:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n                                               \
    \                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwstck45k.swift:15:5: error: cannot\
    \ find 'CC_MD5' in scope\n    CC_MD5(str, length, md5)\n    ^~~~~~\n/tmp/tmpwstck45k.swift:16:18:\
    \ error: cannot find 'stringFromResult' in scope\n    let digest = stringFromResult(md5:\
    \ md5, length: Int(CC_MD5_DIGEST_LENGTH))\n                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpwstck45k.swift:16:57: error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n\
    \    let digest = stringFromResult(md5: md5, length: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                        ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<UInt8>) -> Void in\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n        }\n    }\n    var md5String = \"\"\n    for byte in digest\
    \ {\n        md5String += String(format:\"%02x\", UInt8(byte))\n    }\n    return\
    \ md5String\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpofk6s5v4.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpofk6s5v4.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpofk6s5v4.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpofk6s5v4.swift:13:13: error: cannot find 'CC_MD5' in scope\n         \
    \   CC_MD5(bytes, CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmpofk6s5v4.swift:13:27:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    return data_to_md5(data: data!)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpa28058cm.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpa28058cm.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpa28058cm.swift:11:12:\
    \ error: cannot find 'data_to_md5' in scope\n    return data_to_md5(data: data!)\n\
    \           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  if text.isEmpty {\n    return nil\n  }\n\n  let md5\
    \ = text.data(using: .utf8)!.md5\n  return md5.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmti1kxl5.swift:11:18: error: value of type 'String' has no member\
    \ 'data'\n  let md5 = text.data(using: .utf8)!.md5\n            ~~~~ ^~~~\n/tmp/tmpmti1kxl5.swift:11:31:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n  let md5\
    \ = text.data(using: .utf8)!.md5\n                             ~^~~~\n/tmp/tmpmti1kxl5.swift:12:26:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \  return md5.map { String(format: \"%02hhx\", $0) }.joined()\n              \
    \           ^~~~~~~\n                          repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.isEmpty == false else {\n        return\
    \ nil\n    }\n    let messageData = text.data(using:.utf8)!\n    var digestData\
    \ = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpmksdp97a.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpmksdp97a.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpmksdp97a.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpmksdp97a.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmksdp97a.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpmksdp97a.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpmksdp97a.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.count == 0 {\n        return nil\n    }\n\
    \    let data = Data(text.utf8)\n    var digest = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    _ = data.withUnsafeBytes { bytes in\n      \
    \  CC_MD5(bytes, CC_LONG(data.count), &digest)\n    }\n    var digestHex = \"\"\
    \n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex += String(format:\
    \ \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpswphtcwy.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpswphtcwy.swift:11:51: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpswphtcwy.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &digest)\n\
    \        ^~~~~~\n/tmp/tmpswphtcwy.swift:13:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(data.count), &digest)\n               \
    \       ^~~~~~~\n/tmp/tmpswphtcwy.swift:16:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n               \
    \          ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ guard let textData = text.data(using: .utf8) else {\n        return nil\n  \
    \  }\n    var data = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    data.withUnsafeMutableBytes\
    \ { (bytes: UnsafeMutablePointer<UInt8>) in\n        _ = textData.withUnsafeBytes\
    \ { (bytes_: UnsafePointer<UInt8>) in\n            CC_MD5(bytes_, CC_LONG(textData.count),\
    \ bytes)\n        }\n    }\n    return data.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1b2kb70r.swift:10:31: error: value of type 'String' has no member\
    \ 'data'\n    guard let textData = text.data(using: .utf8) else {\n          \
    \               ~~~~ ^~~~\n/tmp/tmp1b2kb70r.swift:10:44: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let textData = text.data(using:\
    \ .utf8) else {\n                                          ~^~~~\n/tmp/tmp1b2kb70r.swift:13:16:\
    \ error: cannot find 'Data' in scope\n    var data = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \               ^~~~\n/tmp/tmp1b2kb70r.swift:13:32: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var data = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n          \
    \                     ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1b2kb70r.swift:16:13: error:\
    \ cannot find 'CC_MD5' in scope\n            CC_MD5(bytes_, CC_LONG(textData.count),\
    \ bytes)\n            ^~~~~~\n/tmp/tmp1b2kb70r.swift:16:28: error: cannot find\
    \ 'CC_LONG' in scope\n            CC_MD5(bytes_, CC_LONG(textData.count), bytes)\n\
    \                           ^~~~~~~\n/tmp/tmp1b2kb70r.swift:19:29: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return data.map { String(format: \"%02hhx\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating         count:\
    \ \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp56qzolgm.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    return data_to_md5(data: data!)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpa28058cm.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmpa28058cm.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmpa28058cm.swift:11:12:\
    \ error: cannot find 'data_to_md5' in scope\n    return data_to_md5(data: data!)\n\
    \           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let data = text.data(using: .utf8) {\n        let\
    \ md5 = try! Hash(algorithm: .md5, message: data).make()\n        let result =\
    \ md5.hexString\n        return result\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp4oi8q1fh.swift:7:24: error: value of type 'String' has no member\
    \ 'data'\n    if let data = text.data(using: .utf8) {\n                  ~~~~\
    \ ^~~~\n/tmp/tmp4oi8q1fh.swift:7:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    if let data = text.data(using: .utf8) {\n            \
    \                       ~^~~~\n/tmp/tmp4oi8q1fh.swift:8:24: error: cannot find\
    \ 'Hash' in scope\n        let md5 = try! Hash(algorithm: .md5, message: data).make()\n\
    \                       ^~~~\n/tmp/tmp4oi8q1fh.swift:8:41: error: cannot infer\
    \ contextual base in reference to member 'md5'\n        let md5 = try! Hash(algorithm:\
    \ .md5, message: data).make()\n                                       ~^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfso857mf.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpfso857mf.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfso857mf.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpfso857mf.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpfso857mf.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        CC_MD5((data\
    \ as NSData).bytes, CC_LONG(data.count), &digest)\n    }\n    var md5String =\
    \ \"\"\n    for byte in digest {\n        md5String += String(format:\"%02x\"\
    , UInt8(byte))\n    }\n    return md5String\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7lb9rnc9.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7lb9rnc9.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmp7lb9rnc9.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp7lb9rnc9.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5((data\
    \ as NSData).bytes, CC_LONG(data.count), &digest)\n        ^~~~~~\n/tmp/tmp7lb9rnc9.swift:12:40:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_MD5((data as NSData).bytes,\
    \ CC_LONG(data.count), &digest)\n                                       ^~~~~~~\n\
    /tmp/tmp7lb9rnc9.swift:12:25: error: cannot find type 'NSData' in scope\n    \
    \    CC_MD5((data as NSData).bytes, CC_LONG(data.count), &digest)\n          \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest\
    \ = [UInt8](repeating: 0, count: length)\n    \n    if let d = text.data(using:\
    \ String.Encoding.utf8) {\n        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>)\
    \ in\n            CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n\
    \    \n    return (0..<length).reduce(\"\") {\n        $0 + String(format: \"\
    %02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxen3s9u4.swift:7:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxen3s9u4.swift:10:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmpxen3s9u4.swift:10:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmpxen3s9u4.swift:12:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmpxen3s9u4.swift:12:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmpxen3s9u4.swift:17:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)!\n    let md5Data = MD5(data)\n    let md5Hex\
    \ = md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n    return md5Hex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3ibat266.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp3ibat266.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp3ibat266.swift:11:19: error: cannot find 'MD5'\
    \ in scope\n    let md5Data = MD5(data)\n                  ^~~\n/tmp/tmp3ibat266.swift:12:38:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let md5Hex = md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n  \
    \                                   ^~~~~~~\n                                \
    \      repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.characters.count > 0 else {\n        return\
    \ nil\n    }\n    \n    let str = text.cString(using: String.Encoding.utf8)\n\
    \    let strLen = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    \n    CC_MD5(str!, strLen, result)\n    \n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    \n    result.deinitialize()\n    \n    return String(format: hash\
    \ as String)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo7dgjuua.swift:7:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard text.characters.count > 0 else {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo7dgjuua.swift:11:20:\
    \ error: value of type 'String' has no member 'cString'\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n              ~~~~ ^~~~~~~\n/tmp/tmpo7dgjuua.swift:11:42:\
    \ error: type 'String' has no member 'Encoding'\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpo7dgjuua.swift:12:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpo7dgjuua.swift:12:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpo7dgjuua.swift:13:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo7dgjuua.swift:16:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpo7dgjuua.swift:18:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpo7dgjuua.swift:25:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if let data = text.data(using: .utf8) {\n        let\
    \ result = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))!\n        let resultBytes\
    \ = result.mutableBytes.assumingMemoryBound(to: UInt8.self)\n        CC_MD5(data.bytes,\
    \ CC_LONG(data.count), resultBytes)\n        return result.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpsn1lufym.swift:7:24: error: value of type 'String' has no member\
    \ 'data'\n    if let data = text.data(using: .utf8) {\n                  ~~~~\
    \ ^~~~\n/tmp/tmpsn1lufym.swift:7:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    if let data = text.data(using: .utf8) {\n            \
    \                       ~^~~~\n/tmp/tmpsn1lufym.swift:8:22: error: cannot find\
    \ 'NSMutableData' in scope\n        let result = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))!\n\
    \                     ^~~~~~~~~~~~~\n/tmp/tmpsn1lufym.swift:8:48: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n        let result = NSMutableData(length:\
    \ Int(CC_MD5_DIGEST_LENGTH))!\n                                              \
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsn1lufym.swift:10:9: error: cannot find 'CC_MD5'\
    \ in scope\n        CC_MD5(data.bytes, CC_LONG(data.count), resultBytes)\n   \
    \     ^~~~~~\n/tmp/tmpsn1lufym.swift:10:28: error: cannot find 'CC_LONG' in scope\n\
    \        CC_MD5(data.bytes, CC_LONG(data.count), resultBytes)\n              \
    \             ^~~~~~~\n/tmp/tmpsn1lufym.swift:11:35: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        return\
    \ result.map { String(format: \"%02hhx\", $0) }.joined()\n                   \
    \               ^~~~~~~\n                                   repeating        \
    \ count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: .utf8)\n    let result = data?.withUnsafeBytes {\
    \ bytes in\n        return CC_MD5(bytes, CC_LONG(data!.count), nil)\n    }\n \
    \   let hash = NSMutableString()\n    for i in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n\
    \        hash.appendFormat(\"%02x\", result![i])\n    }\n    return String(hash)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp4oyzouoy.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)\n               ~~~~ ^~~~\n/tmp/tmp4oyzouoy.swift:10:34:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let data\
    \ = text.data(using: .utf8)\n                                ~^~~~\n/tmp/tmp4oyzouoy.swift:12:16:\
    \ error: cannot find 'CC_MD5' in scope\n        return CC_MD5(bytes, CC_LONG(data!.count),\
    \ nil)\n               ^~~~~~\n/tmp/tmp4oyzouoy.swift:12:30: error: cannot find\
    \ 'CC_LONG' in scope\n        return CC_MD5(bytes, CC_LONG(data!.count), nil)\n\
    \                             ^~~~~~~\n/tmp/tmp4oyzouoy.swift:14:16: error: cannot\
    \ find 'NSMutableString' in scope\n    let hash = NSMutableString()\n        \
    \       ^~~~~~~~~~~~~~~\n/tmp/tmp4oyzouoy.swift:15:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    for i in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n                   \
    \  ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ let data = text.data(using: String.Encoding.utf8) {\n        CC_MD5((data as\
    \ NSData).bytes, CC_LONG(data.count), &digest)\n    }\n    var digestHex = \"\"\
    \n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex += String(format:\
    \ \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpoam735td.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoam735td.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpoam735td.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpoam735td.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5((data\
    \ as NSData).bytes, CC_LONG(data.count), &digest)\n        ^~~~~~\n/tmp/tmpoam735td.swift:12:40:\
    \ error: cannot find 'CC_LONG' in scope\n        CC_MD5((data as NSData).bytes,\
    \ CC_LONG(data.count), &digest)\n                                       ^~~~~~~\n\
    /tmp/tmpoam735td.swift:12:25: error: cannot find type 'NSData' in scope\n    \
    \    CC_MD5((data as NSData).bytes, CC_LONG(data.count), &digest)\n          \
    \              ^~~~~~\n/tmp/tmpoam735td.swift:15:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n               \
    \          ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.characters.count == 0 {\n        return nil\n\
    \    }\n    let str = text.cString(using: String.Encoding.utf8)\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp25e2nkun.swift:7:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if text.characters.count == 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp25e2nkun.swift:10:20:\
    \ error: value of type 'String' has no member 'cString'\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n              ~~~~ ^~~~~~~\n/tmp/tmp25e2nkun.swift:10:42:\
    \ error: type 'String' has no member 'Encoding'\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n                                  ~~~~~~ ^~~~~~~~\n/tmp/tmp25e2nkun.swift:11:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp25e2nkun.swift:11:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmp25e2nkun.swift:12:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp25e2nkun.swift:14:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmp25e2nkun.swift:15:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmp25e2nkun.swift:20:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n    var\
    \ digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5_Init(context)\n\
    \    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n\
    \    CC_MD5_Final(&digest, context)\n    context.deallocate()\n    var hexString\
    \ = \"\"\n    for byte in digest {\n        hexString += String(format:\"%02x\"\
    , byte)\n    }\n    return hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmppbm8_3qz.swift:10:40: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \    let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n  \
    \                                     ^~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:11:54:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:12:5: error: cannot\
    \ find 'CC_MD5_Init' in scope\n    CC_MD5_Init(context)\n    ^~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:13:5:\
    \ error: cannot find 'CC_MD5_Update' in scope\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n    ^~~~~~~~~~~~~\n\
    /tmp/tmppbm8_3qz.swift:13:34: error: cannot find 'CC_LONG' in scope\n    CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                       ^~~~~~~\n/tmp/tmppbm8_3qz.swift:13:47: error: value of\
    \ type 'String' has no member 'lengthOfBytes'\n    CC_MD5_Update(context, text,\
    \ CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n                \
    \                         ~~~~ ^~~~~~~~~~~~~\n/tmp/tmppbm8_3qz.swift:13:75: error:\
    \ type 'String' has no member 'Encoding'\n    CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                                  \
    \                 ~~~~~~ ^~~~~~~~\n/tmp/tmppbm8_3qz.swift:14:5: error: cannot\
    \ find 'CC_MD5_Final' in scope\n    CC_MD5_Final(&digest, context)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard text.count > 0 else { return nil }\n\treturn text.md5\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3m3_8i5k.swift:8:14: error: value of type 'String' has no member\
    \ 'md5'\n        return text.md5\n               ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    return try? Data(text.utf8).toHexString().md5()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprqessl8m.swift:10:17: error: cannot find 'Data' in scope\n    return\
    \ try? Data(text.utf8).toHexString().md5()\n                ^~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    guard\
    \ let messageData = text.data(using:.utf8) else { return nil }\n    var digestData\
    \ = Data(count: length)\n    \n    _ = digestData.withUnsafeMutableBytes { digestBytes\
    \ -> UInt8 in\n        messageData.withUnsafeBytes { messageBytes -> UInt8 in\n\
    \            if let messageBytesBaseAddress = messageBytes.baseAddress, let digestBytesBlindMemory\
    \ = digestBytes.bindMemory(to: UInt8.self).baseAddress {\n                let\
    \ messageLength = CC_LONG(messageData.count)\n                CC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n            }\n            return 0\n\
    \        }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptsll3uqb.swift:7:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptsll3uqb.swift:8:34: error: value of type 'String' has no member 'data'\n\
    \    guard let messageData = text.data(using:.utf8) else { return nil }\n    \
    \                        ~~~~ ^~~~\n/tmp/tmptsll3uqb.swift:8:46: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    guard let messageData\
    \ = text.data(using:.utf8) else { return nil }\n                             \
    \               ~^~~~\n/tmp/tmptsll3uqb.swift:9:22: error: cannot find 'Data'\
    \ in scope\n    var digestData = Data(count: length)\n                     ^~~~\n\
    /tmp/tmptsll3uqb.swift:14:37: error: cannot find 'CC_LONG' in scope\n        \
    \        let messageLength = CC_LONG(messageData.count)\n                    \
    \                ^~~~~~~\n/tmp/tmptsll3uqb.swift:15:17: error: cannot find 'CC_MD5'\
    \ in scope\n                CC_MD5(messageBytesBaseAddress, messageLength, digestBytesBlindMemory)\n\
    \                ^~~~~~\n/tmp/tmptsll3uqb.swift:20:35: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n    return digestData.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                              \
    \    ^~~~~~~\n                                   repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  let len =\
    \ Int(CC_MD5_DIGEST_LENGTH)\n  let messageData = text.data(using:.utf8)!\n  var\
    \ digestData = Data(count: len)\n  \n  _ = digestData.withUnsafeMutableBytes {\
    \ digestBytes -> UInt8 in\n    messageData.withUnsafeBytes { messageBytes -> UInt8\
    \ in\n      if let messageBytesBaseAddress = messageBytes.baseAddress, let digestBytesBlindMemory\
    \ = digestBytes.bindMemory(to: UInt8.self).baseAddress {\n        let messageLength\
    \ = CC_LONG(messageData.count)\n        CC_MD5(messageBytesBaseAddress, messageLength,\
    \ digestBytesBlindMemory)\n      }\n      return 0\n    }\n  }\n  return digestData.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl5cadzyo.swift:8:17: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n  let len = Int(CC_MD5_DIGEST_LENGTH)\n                ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpl5cadzyo.swift:9:26: error: value of type 'String' has no member 'data'\n\
    \  let messageData = text.data(using:.utf8)!\n                    ~~~~ ^~~~\n\
    /tmp/tmpl5cadzyo.swift:9:38: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n  let messageData = text.data(using:.utf8)!\n            \
    \                        ~^~~~\n/tmp/tmpl5cadzyo.swift:10:20: error: cannot find\
    \ 'Data' in scope\n  var digestData = Data(count: len)\n                   ^~~~\n\
    /tmp/tmpl5cadzyo.swift:15:29: error: cannot find 'CC_LONG' in scope\n        let\
    \ messageLength = CC_LONG(messageData.count)\n                            ^~~~~~~\n\
    /tmp/tmpl5cadzyo.swift:16:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n        ^~~~~~\n/tmp/tmpl5cadzyo.swift:21:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \  return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n       \
    \                         ^~~~~~~\n                                 repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        let value\
    \ = data as NSData\n        CC_MD5(value.bytes, CC_LONG(data.count), &digest)\n\
    \    }\n    var digestHex = \"\"\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n        digestHex += String(format: \"%02x\", digest[index])\n    }\n   \
    \ return digestHex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpslnp202m.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpslnp202m.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpslnp202m.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpslnp202m.swift:12:29: error: cannot find type 'NSData' in scope\n    \
    \    let value = data as NSData\n                            ^~~~~~\n/tmp/tmpslnp202m.swift:13:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(value.bytes, CC_LONG(data.count),\
    \ &digest)\n        ^~~~~~\n/tmp/tmpslnp202m.swift:13:29: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(value.bytes, CC_LONG(data.count), &digest)\n      \
    \                      ^~~~~~~\n/tmp/tmpslnp202m.swift:16:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if !text.isEmpty {\n        var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        if let data = text.data(using:\
    \ String.Encoding.utf8) {\n            CC_MD5((data as NSData).bytes, CC_LONG(data.count),\
    \ &digest)\n        }\n        var digestHex = \"\"\n        for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n            digestHex += String(format: \"%02x\", digest[index])\n      \
    \  }\n        return digestHex\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpitpqbigs.swift:8:55: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                      ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpitpqbigs.swift:9:28: error: value of type 'String' has no member 'data'\n\
    \        if let data = text.data(using: String.Encoding.utf8) {\n            \
    \          ~~~~ ^~~~\n/tmp/tmpitpqbigs.swift:9:47: error: type 'String' has no\
    \ member 'Encoding'\n        if let data = text.data(using: String.Encoding.utf8)\
    \ {\n                                       ~~~~~~ ^~~~~~~~\n/tmp/tmpitpqbigs.swift:10:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5((data as NSData).bytes,\
    \ CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmpitpqbigs.swift:10:44:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5((data as NSData).bytes,\
    \ CC_LONG(data.count), &digest)\n                                           ^~~~~~~\n\
    /tmp/tmpitpqbigs.swift:10:29: error: cannot find type 'NSData' in scope\n    \
    \        CC_MD5((data as NSData).bytes, CC_LONG(data.count), &digest)\n      \
    \                      ^~~~~~\n/tmp/tmpitpqbigs.swift:13:30: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n        for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                             ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    if let d = text.data(using: String.Encoding.utf8) {\n\
    \        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n           \
    \ CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    return (0..<length).reduce(\"\
    \") {\n        $0 + String(format: \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_dbjh4un.swift:10:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dbjh4un.swift:12:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmp_dbjh4un.swift:12:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmp_dbjh4un.swift:14:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmp_dbjh4un.swift:14:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmp_dbjh4un.swift:18:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let rawData = text.data(using: .utf8)!\n    let md5 = try! MD5(message:\
    \ rawData)\n    return md5.makeString()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpa4bt_ylz.swift:10:24: error: value of type 'String' has no member\
    \ 'data'\n    let rawData = text.data(using: .utf8)!\n                  ~~~~ ^~~~\n\
    /tmp/tmpa4bt_ylz.swift:10:37: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let rawData = text.data(using: .utf8)!\n             \
    \                      ~^~~~\n/tmp/tmpa4bt_ylz.swift:11:20: error: cannot find\
    \ 'MD5' in scope\n    let md5 = try! MD5(message: rawData)\n                 \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt_jyauhz.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tif let data = text.data(using: .utf8) {\n\t\treturn\
    \ data_to_md5(data: data)\n\t}\n\treturn nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ieugvq8.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n        if let data = text.data(using: .utf8) {\n                  \
    \    ~~~~ ^~~~\n/tmp/tmp2ieugvq8.swift:7:34: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n        if let data = text.data(using: .utf8)\
    \ {\n                                       ~^~~~\n/tmp/tmp2ieugvq8.swift:8:10:\
    \ error: cannot find 'data_to_md5' in scope\n                return data_to_md5(data:\
    \ data)\n                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    guard let data = text.data(using: .utf8) else {\n        return nil\n\
    \    }\n    return data_to_md5(data: data)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjfm37fje.swift:10:27: error: value of type 'String' has no member\
    \ 'data'\n    guard let data = text.data(using: .utf8) else {\n              \
    \       ~~~~ ^~~~\n/tmp/tmpjfm37fje.swift:10:40: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let data = text.data(using: .utf8)\
    \ else {\n                                      ~^~~~\n/tmp/tmpjfm37fje.swift:13:12:\
    \ error: cannot find 'data_to_md5' in scope\n    return data_to_md5(data: data)\n\
    \           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tif let data = text.data(using: .utf8) {\n\t\treturn\
    \ data_to_md5(data: data)\n\t}\n\treturn nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ieugvq8.swift:7:21: error: value of type 'String' has no member\
    \ 'data'\n        if let data = text.data(using: .utf8) {\n                  \
    \    ~~~~ ^~~~\n/tmp/tmp2ieugvq8.swift:7:34: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n        if let data = text.data(using: .utf8)\
    \ {\n                                       ~^~~~\n/tmp/tmp2ieugvq8.swift:8:10:\
    \ error: cannot find 'data_to_md5' in scope\n                return data_to_md5(data:\
    \ data)\n                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let md5 = MD5(text)\n    return md5.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv11jz7ok.swift:10:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n/tmp/tmpv11jz7ok.swift:11:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02hhx\", $0) }.joined()\n              \
    \             ^~~~~~~\n                            repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let cStr = text.cString(using: String.Encoding.utf8)\n\
    \    if let cStr = cStr {\n        var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(cStr, CC_LONG(strlen(cStr)), &digest)\n        let hash = NSMutableString()\n\
    \        for i in 0..<CC_MD5_DIGEST_LENGTH {\n            hash.appendFormat(\"\
    %02x\", digest[i])\n        }\n        return String(hash)\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo058w80k.swift:7:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cStr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpo058w80k.swift:7:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cStr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpo058w80k.swift:9:55:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo058w80k.swift:10:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(cStr, CC_LONG(strlen(cStr)), &digest)\n\
    \        ^~~~~~\n/tmp/tmpo058w80k.swift:10:22: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(cStr, CC_LONG(strlen(cStr)), &digest)\n              \
    \       ^~~~~~~\n/tmp/tmpo058w80k.swift:10:30: error: cannot find 'strlen' in\
    \ scope\n        CC_MD5(cStr, CC_LONG(strlen(cStr)), &digest)\n              \
    \               ^~~~~~\n/tmp/tmpo058w80k.swift:11:20: error: cannot find 'NSMutableString'\
    \ in scope\n        let hash = NSMutableString()\n                   ^~~~~~~~~~~~~~~\n\
    /tmp/tmpo058w80k.swift:12:22: error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n\
    \        for i in 0..<CC_MD5_DIGEST_LENGTH {\n                     ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.isEmpty ? nil : text.md5()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpnlq_sftb.swift:7:38: error: value of type 'String' has no member\
    \ 'md5'\n    return text.isEmpty ? nil : text.md5()\n                        \
    \        ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    return text.isEmpty ? nil : text.md5()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpnlq_sftb.swift:7:38: error: value of type 'String' has no member\
    \ 'md5'\n    return text.isEmpty ? nil : text.md5()\n                        \
    \        ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<CChar>) -> Int32 in\n            return CC_MD5(bytes,\
    \ CC_LONG(data.count), &digest)\n        }\n    }\n    var digestHex = \"\"\n\
    \    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex += String(format:\
    \ \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6u3nlxv9.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6u3nlxv9.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmp6u3nlxv9.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp6u3nlxv9.swift:13:20: error: cannot find 'CC_MD5' in scope\n         \
    \   return CC_MD5(bytes, CC_LONG(data.count), &digest)\n                   ^~~~~~\n\
    /tmp/tmp6u3nlxv9.swift:13:34: error: cannot find 'CC_LONG' in scope\n        \
    \    return CC_MD5(bytes, CC_LONG(data.count), &digest)\n                    \
    \             ^~~~~~~\n/tmp/tmp6u3nlxv9.swift:17:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n               \
    \          ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n  let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n  if let cstr = text.cString(using: String.Encoding.utf8) {\n  \
    \  CC_MD5(cstr, CC_LONG(cstr.count - 1), result)\n  }\n  let hash = NSMutableString()\n\
    \  for i in 0..<digestLen {\n    hash.appendFormat(\"%02x\", result[i])\n  }\n\
    \  result.deallocate()\n  return String(format: hash as String)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpdjybr_dw.swift:8:23: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n  let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                    \
    \  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdjybr_dw.swift:10:22: error: value of type 'String'\
    \ has no member 'cString'\n  if let cstr = text.cString(using: String.Encoding.utf8)\
    \ {\n                ~~~~ ^~~~~~~\n/tmp/tmpdjybr_dw.swift:10:44: error: type 'String'\
    \ has no member 'Encoding'\n  if let cstr = text.cString(using: String.Encoding.utf8)\
    \ {\n                                    ~~~~~~ ^~~~~~~~\n/tmp/tmpdjybr_dw.swift:11:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(cstr, CC_LONG(cstr.count -\
    \ 1), result)\n    ^~~~~~\n/tmp/tmpdjybr_dw.swift:11:18: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(cstr, CC_LONG(cstr.count - 1), result)\n              \
    \   ^~~~~~~\n/tmp/tmpdjybr_dw.swift:13:14: error: cannot find 'NSMutableString'\
    \ in scope\n  let hash = NSMutableString()\n             ^~~~~~~~~~~~~~~\n/tmp/tmpdjybr_dw.swift:18:16:\
    \ error: extraneous argument label 'format:' in call\n  return String(format:\
    \ hash as String)\n               ^~~~~~~~~\n                \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let ctext = text.cString(using: .utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ .utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(ctext!, len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deallocate()\n    return String(format: hash as String)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmptkn8wrsa.swift:10:22: error: value of type 'String' has no member\
    \ 'cString'\n    let ctext = text.cString(using: .utf8)\n                ~~~~\
    \ ^~~~~~~\n/tmp/tmptkn8wrsa.swift:10:38: error: cannot infer contextual base in\
    \ reference to member 'utf8'\n    let ctext = text.cString(using: .utf8)\n   \
    \                                 ~^~~~\n/tmp/tmptkn8wrsa.swift:11:33: error:\
    \ value of type 'String' has no member 'lengthOfBytes'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ .utf8))\n                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmptkn8wrsa.swift:11:55:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n    let len\
    \ = CUnsignedInt(text.lengthOfBytes(using: .utf8))\n                         \
    \                            ~^~~~\n/tmp/tmptkn8wrsa.swift:12:25: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmptkn8wrsa.swift:14:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(ctext!, len, result)\n    ^~~~~~\n\
    /tmp/tmptkn8wrsa.swift:15:16: error: cannot find 'NSMutableString' in scope\n\
    \    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n/tmp/tmptkn8wrsa.swift:20:18:\
    \ error: extraneous argument label 'format:' in call\n    return String(format:\
    \ hash as String)\n                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5.map { String(format: \"%02x\"\
    , $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5shmik9l.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp5shmik9l.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp5shmik9l.swift:12:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5shmik9l.swift:13:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmp5shmik9l.swift:13:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmp5shmik9l.swift:16:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    return text.md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp56qzolgm.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5()\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let md5_data = text.data(using: .utf8)!.md5()\n    let md5_text = Data(md5_data).hexEncodedString()\n\
    \    return md5_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl4jje62o.swift:10:25: error: value of type 'String' has no member\
    \ 'data'\n    let md5_data = text.data(using: .utf8)!.md5()\n                \
    \   ~~~~ ^~~~\n/tmp/tmpl4jje62o.swift:10:38: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let md5_data = text.data(using: .utf8)!.md5()\n\
    \                                    ~^~~~\n/tmp/tmpl4jje62o.swift:11:20: error:\
    \ cannot find 'Data' in scope\n    let md5_text = Data(md5_data).hexEncodedString()\n\
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    if\
    \ let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ { CC_MD5($0.baseAddress, CC_LONG(data.count), &digest) }\n    }\n    var digestHex\
    \ = \"\"\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex\
    \ += String(format: \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzxmtpeku.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzxmtpeku.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmpzxmtpeku.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpzxmtpeku.swift:12:40: error: cannot find 'CC_MD5' in scope\n        let\
    \ _ = data.withUnsafeBytes { CC_MD5($0.baseAddress, CC_LONG(data.count), &digest)\
    \ }\n                                       ^~~~~~\n/tmp/tmpzxmtpeku.swift:12:63:\
    \ error: cannot find 'CC_LONG' in scope\n        let _ = data.withUnsafeBytes\
    \ { CC_MD5($0.baseAddress, CC_LONG(data.count), &digest) }\n                 \
    \                                             ^~~~~~~\n/tmp/tmpzxmtpeku.swift:15:26:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if !text.isEmpty {\n        let str = text.cString(using:\
    \ String.Encoding.utf8)\n        let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n        let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n\
    \        let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \        CC_MD5(str!, strLen, result)\n        let hash = NSMutableString()\n\
    \        for i in 0..<digestLen {\n            hash.appendFormat(\"%02x\", result[i])\n\
    \        }\n        result.deinitialize()\n        return String(format: hash\
    \ as String)\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjp83w8zc.swift:8:24: error: value of type 'String' has no member\
    \ 'cString'\n        let str = text.cString(using: String.Encoding.utf8)\n   \
    \               ~~~~ ^~~~~~~\n/tmp/tmpjp83w8zc.swift:8:46: error: type 'String'\
    \ has no member 'Encoding'\n        let str = text.cString(using: String.Encoding.utf8)\n\
    \                                      ~~~~~~ ^~~~~~~~\n/tmp/tmpjp83w8zc.swift:9:40:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n        let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                        ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpjp83w8zc.swift:9:68: error:\
    \ type 'String' has no member 'Encoding'\n        let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \         ~~~~~~ ^~~~~~~~\n/tmp/tmpjp83w8zc.swift:10:29: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n              \
    \              ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjp83w8zc.swift:12:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(str!, strLen, result)\n        ^~~~~~\n\
    /tmp/tmpjp83w8zc.swift:13:20: error: cannot find 'NSMutableString' in scope\n\
    \        let hash = NSMutableString()\n                   ^~~~~~~~~~~~~~~\n/tmp/tmpjp83w8zc.swift:18:22:\
    \ error: extraneous argument label 'format:' in call\n        return String(format:\
    \ hash as String)\n                     ^~~~~~~~~\n                      \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.isEmpty == false else {\n        return\
    \ nil\n    }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        let _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<CChar>) -> Int in\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n            return 0\n        }\n    }\n    return digest.map({ String(format:\
    \ \"%02x\", $0) }).joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptwzmi_vg.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmptwzmi_vg.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmptwzmi_vg.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmptwzmi_vg.swift:13:13: error: cannot find 'CC_MD5' in scope\n         \
    \   CC_MD5(bytes, CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmptwzmi_vg.swift:13:27:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                          ^~~~~~~\n/tmp/tmptwzmi_vg.swift:17:31: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map({ String(format: \"%02x\", $0) }).joined()\n          \
    \                    ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    let\
    \ data = (text as NSString).data(using: String.Encoding.utf8.rawValue)! as NSData\n\
    \    CC_MD5(data.bytes, CC_LONG(data.length), &digest)\n    var result = String()\n\
    \    for byte in digest {\n        result += String(format: \"%02x\", byte)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxudlsgrg.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxudlsgrg.swift:11:25:\
    \ error: cannot find type 'NSString' in scope\n    let data = (text as NSString).data(using:\
    \ String.Encoding.utf8.rawValue)! as NSData\n                        ^~~~~~~~\n\
    /tmp/tmpxudlsgrg.swift:11:82: error: cannot find type 'NSData' in scope\n    let\
    \ data = (text as NSString).data(using: String.Encoding.utf8.rawValue)! as NSData\n\
    \                                                                            \
    \     ^~~~~~\n/tmp/tmpxudlsgrg.swift:11:54: error: type 'String' has no member\
    \ 'Encoding'\n    let data = (text as NSString).data(using: String.Encoding.utf8.rawValue)!\
    \ as NSData\n                                              ~~~~~~ ^~~~~~~~\n/tmp/tmpxudlsgrg.swift:11:35:\
    \ error: value of type 'String' has no member 'data'\n    let data = (text as\
    \ NSString).data(using: String.Encoding.utf8.rawValue)! as NSData\n          \
    \     ~~~~~~~~~~~~~~~~~~ ^~~~\n/tmp/tmpxudlsgrg.swift:12:5: error: cannot find\
    \ 'CC_MD5' in scope\n    CC_MD5(data.bytes, CC_LONG(data.length), &digest)\n \
    \   ^~~~~~\n/tmp/tmpxudlsgrg.swift:12:24: error: cannot find 'CC_LONG' in scope\n\
    \    CC_MD5(data.bytes, CC_LONG(data.length), &digest)\n                     \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let utf8Text = text.data(using: .utf8)\n    var md5Result = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(utf8Text!.bytes, CC_LONG(utf8Text!.count),\
    \ &md5Result)\n    return md5Result.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpdelqpp7a.swift:10:25: error: value of type 'String' has no member\
    \ 'data'\n    let utf8Text = text.data(using: .utf8)\n                   ~~~~\
    \ ^~~~\n/tmp/tmpdelqpp7a.swift:10:38: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let utf8Text = text.data(using: .utf8)\n             \
    \                       ~^~~~\n/tmp/tmpdelqpp7a.swift:11:54: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    var md5Result = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n                                               \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdelqpp7a.swift:12:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(utf8Text!.bytes, CC_LONG(utf8Text!.count), &md5Result)\n\
    \    ^~~~~~\n/tmp/tmpdelqpp7a.swift:12:29: error: cannot find 'CC_LONG' in scope\n\
    \    CC_MD5(utf8Text!.bytes, CC_LONG(utf8Text!.count), &md5Result)\n         \
    \                   ^~~~~~~\n/tmp/tmpdelqpp7a.swift:13:34: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n    return md5Result.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                              \
    \   ^~~~~~~\n                                  repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return text.md5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp45j2budi.swift:10:17: error: value of type 'String' has no member\
    \ 'md5'\n    return text.md5\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if !text.isEmpty {\n        if let data = text.data(using:\
    \ .utf8) {\n            var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \            data.withUnsafeBytes { bytes in\n                _ = CC_MD5(bytes,\
    \ CC_LONG(data.count), &digest)\n            }\n            return digest.map\
    \ { String(format: \"%02x\", $0) }.joined()\n        }\n    }\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1bj1dsd.swift:8:28: error: value of type 'String' has no member\
    \ 'data'\n        if let data = text.data(using: .utf8) {\n                  \
    \    ~~~~ ^~~~\n/tmp/tmpy1bj1dsd.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n        if let data = text.data(using: .utf8)\
    \ {\n                                       ~^~~~\n/tmp/tmpy1bj1dsd.swift:9:59:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n            var digest =\
    \ [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                  \
    \                                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy1bj1dsd.swift:11:21:\
    \ error: cannot find 'CC_MD5' in scope\n                _ = CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                    ^~~~~~\n/tmp/tmpy1bj1dsd.swift:11:35: error: cannot\
    \ find 'CC_LONG' in scope\n                _ = CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                                  ^~~~~~~\n/tmp/tmpy1bj1dsd.swift:13:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            return digest.map { String(format: \"%02x\", $0) }.joined()\n   \
    \                                   ^~~~~~~\n                                \
    \       repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    let formattedString = digestData.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n    return formattedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6zymm9u0.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp6zymm9u0.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp6zymm9u0.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp6zymm9u0.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6zymm9u0.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp6zymm9u0.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp6zymm9u0.swift:18:50:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let formattedString = digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    \                                                 ^~~~~~~\n                  \
    \                                repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)!\n    let res = NSMutableData(length:\
    \ Int(CC_MD5_DIGEST_LENGTH))!\n    CC_MD5((data as NSData).bytes, CC_LONG(data.count),\
    \ res.mutableBytes.assumingMemoryBound(to: UInt8.self))\n    return res.map {\
    \ String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpm7u1n8uc.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpm7u1n8uc.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpm7u1n8uc.swift:11:15: error: cannot find 'NSMutableData'\
    \ in scope\n    let res = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))!\n\
    \              ^~~~~~~~~~~~~\n/tmp/tmpm7u1n8uc.swift:11:41: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    let res = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))!\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm7u1n8uc.swift:12:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5((data as NSData).bytes, CC_LONG(data.count),\
    \ res.mutableBytes.assumingMemoryBound(to: UInt8.self))\n    ^~~~~~\n/tmp/tmpm7u1n8uc.swift:12:36:\
    \ error: cannot find 'CC_LONG' in scope\n    CC_MD5((data as NSData).bytes, CC_LONG(data.count),\
    \ res.mutableBytes.assumingMemoryBound(to: UInt8.self))\n                    \
    \               ^~~~~~~\n/tmp/tmpm7u1n8uc.swift:12:21: error: cannot find type\
    \ 'NSData' in scope\n    CC_MD5((data as NSData).bytes, CC_LONG(data.count), res.mutableBytes.assumingMemoryBound(to:\
    \ UInt8.self))\n                    ^~~~~~\n/tmp/tmpm7u1n8uc.swift:13:28: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return res.map { String(format: \"%02hhx\", $0) }.joined()\n            \
    \               ^~~~~~~\n                            repeating         count:\
    \ \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    guard\
    \ let data = text.data(using: .utf8) else { return nil }\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    data.withUnsafeBytes { _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest) }\n    return (0..<length).reduce(\"\") {\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0zzqgf8i.swift:7:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0zzqgf8i.swift:8:27: error: value of type 'String' has no member 'data'\n\
    \    guard let data = text.data(using: .utf8) else { return nil }\n          \
    \           ~~~~ ^~~~\n/tmp/tmp0zzqgf8i.swift:8:40: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    guard let data = text.data(using: .utf8)\
    \ else { return nil }\n                                      ~^~~~\n/tmp/tmp0zzqgf8i.swift:10:32:\
    \ error: cannot find 'CC_MD5' in scope\n    data.withUnsafeBytes { _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(data.count), &digest) }\n                               ^~~~~~\n/tmp/tmp0zzqgf8i.swift:10:55:\
    \ error: cannot find 'CC_LONG' in scope\n    data.withUnsafeBytes { _ = CC_MD5($0.baseAddress,\
    \ CC_LONG(data.count), &digest) }\n                                          \
    \            ^~~~~~~\n/tmp/tmp0zzqgf8i.swift:12:20: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        $0 +\
    \ String(format: \"%02x\", digest[$1])\n                   ^~~~~~~\n         \
    \           repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    let digestStr = digestData.map { String(format: \"%02hhx\",\
    \ $0) }.joined()\n    return digestStr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf9u6o8vo.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpf9u6o8vo.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpf9u6o8vo.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpf9u6o8vo.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf9u6o8vo.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpf9u6o8vo.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpf9u6o8vo.swift:18:44:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let digestStr = digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    \                                           ^~~~~~~\n                        \
    \                    repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let cString = text.cString(using: String.Encoding.utf8)\n    let length\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let result\
    \ = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5(cString!, length, result)\n    return String(format: \"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\"\
    , result[0], result[1], result[2], result[3], result[4], result[5], result[6],\
    \ result[7], result[8], result[9], result[10], result[11], result[12], result[13],\
    \ result[14], result[15])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpoh6kbf5f.swift:10:24: error: value of type 'String' has no member\
    \ 'cString'\n    let cString = text.cString(using: String.Encoding.utf8)\n   \
    \               ~~~~ ^~~~~~~\n/tmp/tmpoh6kbf5f.swift:10:46: error: type 'String'\
    \ has no member 'Encoding'\n    let cString = text.cString(using: String.Encoding.utf8)\n\
    \                                      ~~~~~~ ^~~~~~~~\n/tmp/tmpoh6kbf5f.swift:11:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let length\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpoh6kbf5f.swift:11:64: error:\
    \ type 'String' has no member 'Encoding'\n    let length = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpoh6kbf5f.swift:12:77: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n                                               \
    \                             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoh6kbf5f.swift:13:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(cString!, length, result)\n\
    \    ^~~~~~\n/tmp/tmpoh6kbf5f.swift:14:18: error: extra arguments at positions\
    \ #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17 in call\n   \
    \ return String(format: \"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\"\
    , result[0], result[1], result[2], result[3], result[4], result[5], result[6],\
    \ result[7], result[8], result[9], result[10], result[11], result[12], result[13],\
    \ result[14], result[15])\n                 ^\nSwift.String:2:12: note: 'init(_:radix:uppercase:)'\
    \ declared here\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n/tmp/tmpoh6kbf5f.swift:14:12:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n    return String(format: \"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\"\
    , result[0], result[1"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ return String(format: \"%02hhx\", Digest.md5(text))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpq8i6cqlt.swift:10:37: error: cannot find 'Digest' in scope\n  \
    \  return String(format: \"%02hhx\", Digest.md5(text))\n                     \
    \               ^~~~~~\n/tmp/tmpq8i6cqlt.swift:10:18: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n    return String(format:\
    \ \"%02hhx\", Digest.md5(text))\n                 ^~~~~~~\n                  repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n\tguard text.isEmpty == false else {\n\t\treturn nil\n\
    \t}\n\t\n\t// append the string to the  MD5 context\n\tlet context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity:\
    \ 1)\n\tvar digest = Array<UInt8>(repeating:0, count:Int(CC_MD5_DIGEST_LENGTH))\n\
    \tCC_MD5_Init(context)\n\tCC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n\tCC_MD5_Final(&digest, context)\n\tcontext.deallocate()\n\
    \t\n\t// convert the digest to a string\n\tvar hexString = \"\"\n\tfor byte in\
    \ digest {\n\t\thexString += String(format:\"%02x\", byte)\n\t}\n\t\n\treturn\
    \ hexString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5a4l8jlp.swift:12:37: error: cannot find type 'CC_MD5_CTX' in scope\n\
    \        let context = UnsafeMutablePointer<CC_MD5_CTX>.allocate(capacity: 1)\n\
    \                                           ^~~~~~~~~~\n/tmp/tmp5a4l8jlp.swift:13:51:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var digest = Array<UInt8>(repeating:0,\
    \ count:Int(CC_MD5_DIGEST_LENGTH))\n                                         \
    \                ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5a4l8jlp.swift:14:2: error: cannot\
    \ find 'CC_MD5_Init' in scope\n        CC_MD5_Init(context)\n        ^~~~~~~~~~~\n\
    /tmp/tmp5a4l8jlp.swift:15:2: error: cannot find 'CC_MD5_Update' in scope\n   \
    \     CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n\
    \        ^~~~~~~~~~~~~\n/tmp/tmp5a4l8jlp.swift:15:31: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5_Update(context, text, CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8)))\n                                     ^~~~~~~\n/tmp/tmp5a4l8jlp.swift:15:44:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n        CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                                   ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5a4l8jlp.swift:15:72:\
    \ error: type 'String' has no member 'Encoding'\n        CC_MD5_Update(context,\
    \ text, CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8)))\n          \
    \                                                             ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp5a4l8jlp.swift:16:2: error: cannot find 'CC_MD5_Final' in scope\n    \
    \    CC_MD5_Final(&digest, context)\n        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  let length\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n  var digest = [UInt8](repeating: 0, count: length)\n\
    \  if let d = text.data(using: String.Encoding.utf8) {\n    _ = d.withUnsafeBytes\
    \ { (body: UnsafePointer<UInt8>) in\n      CC_MD5(body, CC_LONG(d.count), &digest)\n\
    \    }\n  }\n  return (0..<length).reduce(\"\") {\n    $0 + String(format: \"\
    %02x\", digest[$1])\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6ywtmt29.swift:8:20: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n  let length = Int(CC_MD5_DIGEST_LENGTH)\n                   ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6ywtmt29.swift:10:19: error: value of type 'String' has no member 'data'\n\
    \  if let d = text.data(using: String.Encoding.utf8) {\n             ~~~~ ^~~~\n\
    /tmp/tmp6ywtmt29.swift:10:38: error: type 'String' has no member 'Encoding'\n\
    \  if let d = text.data(using: String.Encoding.utf8) {\n                     \
    \         ~~~~~~ ^~~~~~~~\n/tmp/tmp6ywtmt29.swift:12:7: error: cannot find 'CC_MD5'\
    \ in scope\n      CC_MD5(body, CC_LONG(d.count), &digest)\n      ^~~~~~\n/tmp/tmp6ywtmt29.swift:12:20:\
    \ error: cannot find 'CC_LONG' in scope\n      CC_MD5(body, CC_LONG(d.count),\
    \ &digest)\n                   ^~~~~~~\n/tmp/tmp6ywtmt29.swift:16:16: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  $0 + String(format: \"%02x\", digest[$1])\n               ^~~~~~~\n       \
    \         repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  let buffer\
    \ = [UInt8](text.utf8)\n  let MD5_LENGTH = Int(CC_MD5_DIGEST_LENGTH)\n  let digest\
    \ = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: MD5_LENGTH)\n  CC_MD5(buffer,\
    \ CC_LONG(buffer.count), digest)\n  let md5Hex = digest.withMemoryRebound(to:\
    \ CChar.self, capacity: MD5_LENGTH) {\n    return String(cString: $0)\n  }\n \
    \ return md5Hex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5unaj28a.swift:9:24: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n  let MD5_LENGTH = Int(CC_MD5_DIGEST_LENGTH)\n                   \
    \    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5unaj28a.swift:11:3: error: cannot find 'CC_MD5'\
    \ in scope\n  CC_MD5(buffer, CC_LONG(buffer.count), digest)\n  ^~~~~~\n/tmp/tmp5unaj28a.swift:11:18:\
    \ error: cannot find 'CC_LONG' in scope\n  CC_MD5(buffer, CC_LONG(buffer.count),\
    \ digest)\n                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx0ut4r.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmpqfx0ut4r.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmpqfx0ut4r.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpqfx0ut4r.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqfx0ut4r.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmpqfx0ut4r.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmpqfx0ut4r.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let data = text.data(using: .utf8)!\n    let hex = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> String in\n        return bytes.withMemoryRebound(to:\
    \ UInt8.self, capacity: data.count) {\n            $0.map { String(format: \"\
    %02x\", $0) }.joined()\n        }\n    }\n    return hex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmphuggehv7.swift:10:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmphuggehv7.swift:10:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmphuggehv7.swift:11:60: error: cannot find type\
    \ 'Data' in scope\n    let hex = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> String in\n                                                           ^~~~\n\
    /tmp/tmphuggehv7.swift:13:28: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n            $0.map { String(format: \"%02x\",\
    \ $0) }.joined()\n                           ^~~~~~~\n                       \
    \     repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    return text.to_md5()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq69yg0g3.swift:10:17: error: value of type 'String' has no member\
    \ 'to_md5'\n    return text.to_md5()\n           ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp2894l5o7.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp2894l5o7.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp2894l5o7.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp2894l5o7.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2894l5o7.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp2894l5o7.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp2894l5o7.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let str = text.cString(using: String.Encoding.utf8)\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpb4um4xn8.swift:10:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpb4um4xn8.swift:10:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpb4um4xn8.swift:11:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpb4um4xn8.swift:11:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpb4um4xn8.swift:12:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb4um4xn8.swift:14:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpb4um4xn8.swift:15:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpb4um4xn8.swift:20:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n  guard !text.isEmpty else { return nil }\n  let digest\
    \ = text.data(using: .utf8)?.md5()\n  return digest?.base64EncodedString()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfszonr35.swift:8:21: error: value of type 'String' has no member\
    \ 'data'\n  let digest = text.data(using: .utf8)?.md5()\n               ~~~~ ^~~~\n\
    /tmp/tmpfszonr35.swift:8:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n  let digest = text.data(using: .utf8)?.md5()\n          \
    \                      ~^~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    if let data = text.data(using: String.Encoding.utf8) {\n        _ = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<UInt8>) -> Int in\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n            return 0\n        }\n    }\n    var digestHex = \"\"\n\
    \    for index in 0..<Int(CC_MD5_DIGEST_LENGTH) {\n        digestHex += String(format:\
    \ \"%02x\", digest[index])\n    }\n    return digestHex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp_edhc0g4.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_edhc0g4.swift:11:24:\
    \ error: value of type 'String' has no member 'data'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                  ~~~~ ^~~~\n/tmp/tmp_edhc0g4.swift:11:43:\
    \ error: type 'String' has no member 'Encoding'\n    if let data = text.data(using:\
    \ String.Encoding.utf8) {\n                                   ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp_edhc0g4.swift:13:13: error: cannot find 'CC_MD5' in scope\n         \
    \   CC_MD5(bytes, CC_LONG(data.count), &digest)\n            ^~~~~~\n/tmp/tmp_edhc0g4.swift:13:27:\
    \ error: cannot find 'CC_LONG' in scope\n            CC_MD5(bytes, CC_LONG(data.count),\
    \ &digest)\n                          ^~~~~~~\n/tmp/tmp_edhc0g4.swift:18:26: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    for index in 0..<Int(CC_MD5_DIGEST_LENGTH)\
    \ {\n                         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rlmq0mm.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp7rlmq0mm.swift:10:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp7rlmq0mm.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp7rlmq0mm.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7rlmq0mm.swift:15:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp7rlmq0mm.swift:15:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp7rlmq0mm.swift:18:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    guard\
    \ let messageData = text.data(using: .utf8) else { return nil }\n    var digestData\
    \ = Data(count: length)\n    \n    _ = digestData.withUnsafeMutableBytes { digestBytes\
    \ -> UInt8 in\n        messageData.withUnsafeBytes { messageBytes -> UInt8 in\n\
    \            if let messageBytesBaseAddress = messageBytes.baseAddress, let digestBytesBlindMemory\
    \ = digestBytes.bindMemory(to: UInt8.self).baseAddress {\n                let\
    \ messageLength = CC_LONG(messageData.count)\n                CC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n            }\n            return 0\n\
    \        }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp09xlcif3.swift:7:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp09xlcif3.swift:8:34: error: value of type 'String' has no member 'data'\n\
    \    guard let messageData = text.data(using: .utf8) else { return nil }\n   \
    \                         ~~~~ ^~~~\n/tmp/tmp09xlcif3.swift:8:47: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    guard let messageData\
    \ = text.data(using: .utf8) else { return nil }\n                            \
    \                 ~^~~~\n/tmp/tmp09xlcif3.swift:9:22: error: cannot find 'Data'\
    \ in scope\n    var digestData = Data(count: length)\n                     ^~~~\n\
    /tmp/tmp09xlcif3.swift:14:37: error: cannot find 'CC_LONG' in scope\n        \
    \        let messageLength = CC_LONG(messageData.count)\n                    \
    \                ^~~~~~~\n/tmp/tmp09xlcif3.swift:15:17: error: cannot find 'CC_MD5'\
    \ in scope\n                CC_MD5(messageBytesBaseAddress, messageLength, digestBytesBlindMemory)\n\
    \                ^~~~~~\n/tmp/tmp09xlcif3.swift:20:35: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n    return digestData.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                              \
    \    ^~~~~~~\n                                   repeating         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = Data(text.utf8)\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpfso857mf.swift:10:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmpfso857mf.swift:12:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfso857mf.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpfso857mf.swift:13:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpfso857mf.swift:16:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard !text.isEmpty else {\n        return nil\n \
    \   }\n    let value = text.data(using: String.Encoding.utf8)\n    var digest\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = value?.withUnsafeBytes\
    \ {\n        CC_MD5($0, CC_LONG((value?.count)!), &digest)\n    }\n    return\
    \ digest.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp3wr5fxo5.swift:10:22: error: value of type 'String' has no member\
    \ 'data'\n    let value = text.data(using: String.Encoding.utf8)\n           \
    \     ~~~~ ^~~~\n/tmp/tmp3wr5fxo5.swift:10:41: error: type 'String' has no member\
    \ 'Encoding'\n    let value = text.data(using: String.Encoding.utf8)\n       \
    \                          ~~~~~~ ^~~~~~~~\n/tmp/tmp3wr5fxo5.swift:11:51: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    var digest = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3wr5fxo5.swift:13:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5($0, CC_LONG((value?.count)!), &digest)\n\
    \        ^~~~~~\n/tmp/tmp3wr5fxo5.swift:13:20: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5($0, CC_LONG((value?.count)!), &digest)\n             \
    \      ^~~~~~~\n/tmp/tmp3wr5fxo5.swift:15:31: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return digest.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                              ^~~~~~~\n\
    \                               repeating       count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let messageData = text.data(using: .utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    _ = digestData.withUnsafeMutableBytes { digestBytes\
    \ -> UInt8 in\n        messageData.withUnsafeBytes { messageBytes -> UInt8 in\n\
    \            if let messageBytesBaseAddress = messageBytes.baseAddress, let digestBytesBlindMemory\
    \ = digestBytes.bindMemory(to: UInt8.self).baseAddress {\n                let\
    \ messageLength = CC_LONG(messageData.count)\n                CC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n            }\n            return 0\n\
    \        }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0)\
    \ }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt0nz2gk8.swift:10:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using: .utf8)!\n                   \
    \   ~~~~ ^~~~\n/tmp/tmpt0nz2gk8.swift:10:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using: .utf8)!\n\
    \                                       ~^~~~\n/tmp/tmpt0nz2gk8.swift:11:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmpt0nz2gk8.swift:11:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt0nz2gk8.swift:15:37:\
    \ error: cannot find 'CC_LONG' in scope\n                let messageLength = CC_LONG(messageData.count)\n\
    \                                    ^~~~~~~\n/tmp/tmpt0nz2gk8.swift:16:17: error:\
    \ cannot find 'CC_MD5' in scope\n                CC_MD5(messageBytesBaseAddress,\
    \ messageLength, digestBytesBlindMemory)\n                ^~~~~~\n/tmp/tmpt0nz2gk8.swift:21:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    if !text.isEmpty {\n        let inputData = text.data(using:\
    \ .utf8)!\n        let hashed = MD5(inputData)\n        return hashed.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp6o8xhqqh.swift:8:30: error: value of type 'String' has no member\
    \ 'data'\n        let inputData = text.data(using: .utf8)!\n                 \
    \       ~~~~ ^~~~\n/tmp/tmp6o8xhqqh.swift:8:43: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n        let inputData = text.data(using:\
    \ .utf8)!\n                                         ~^~~~\n/tmp/tmp6o8xhqqh.swift:9:22:\
    \ error: cannot find 'MD5' in scope\n        let hashed = MD5(inputData)\n   \
    \                  ^~~\n/tmp/tmp6o8xhqqh.swift:10:35: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        return\
    \ hashed.map { String(format: \"%02hhx\", $0) }.joined()\n                   \
    \               ^~~~~~~\n                                   repeating        \
    \ count: \n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"\
    Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text:\
    \ String) -> String? {\n    guard text.count > 0 else {\n        return nil\n\
    \    }\n    let bytes: Array<UInt8> = Array(text.utf8)\n    return bytes_to_md5(bytes:\
    \ bytes)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqcyassra.swift:11:12: error: cannot find 'bytes_to_md5' in scope\n\
    \    return bytes_to_md5(bytes: bytes)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013583
