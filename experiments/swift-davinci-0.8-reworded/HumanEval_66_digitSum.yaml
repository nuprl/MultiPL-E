name: HumanEval_66_digitSum
language: swift
prompt: "\n/// Task\n/// Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>>\
  \ digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s:\
  \ \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s:\
  \ \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
  \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"\
  helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"\
  aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
  \ \"You arE Very Smart\") == 327)"
completions: ['    return s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue! : 0)
    }', "    let length = s.count\n    var sum = 0\n    for i in 0..<length {\n  \
    \      if let character = s.asciiArray[i] {\n            if character >= 65 &&\
    \ character <= 90 {\n                sum += character\n            }\n       \
    \ }\n    }\n    return sum", "    let char = s.cString(using: .utf8)!\n    var\
    \ upper = 0\n    for i in 0..<char.count-1 {\n        if (char[i] >= 65 && char[i]\
    \ <= 90) {\n            upper += Int(char[i])\n        }\n    }\n    return upper",
  '    return s.compactMap{ $0.asciiValue }.reduce(0) { $0 + ($1 < 97 ? $1 : 0) }',
  "    return s.unicodeScalars.reduce(0) {\n        $0 + (($1.value >= 65 && $1.value\
    \ <= 90) ? $1.value : 0)\n    }", "    return s.filter { (character) -> Bool in\n\
    \        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".contains(character)\n    }.map\
    \ { $0.asciiValue! }.reduce(0, +)", "    return s.unicodeScalars.reduce(0) {\n\
    \        $0 + ($1.isASCII && $1.isUppercase ? Int($1.value) : 0)\n    }", '    return
    s.unicodeScalars.filter { CharacterSet.uppercaseLetters.contains($0) }.reduce(0)
    { $0 + Int($1.value) }', "    return s.utf8.reduce(0) { (r, v) in\n        return\
    \ r + (v >= 65 && v <= 90 ? Int(v) : 0)\n    }", "    let upperCodes = s.unicodeScalars.filter\
    \ { $0.isASCII && $0.isUppercase }\n    return upperCodes.reduce(0) { result,\
    \ next in\n        result + Int(next.value)\n    }", '  return s.filter { $0.isUppercase
    }.reduce(0) { $0 + Int($0.asciiValue!) }', '    return s.filter { $0.isUppercase
    }.reduce(0) { $0 + Int($0.asciiValue!) }', '    return s.unicodeScalars.filter({$0.value
    > 64 && $0.value < 91}).reduce(0, +)', '    return s.compactMap {$0.asciiValue}.reduce(0)
    {$0 + ($1 >= 65 && $1 <= 90 ? $1 : 0)}', "    var output = 0\n    for letter in\
    \ s {\n        if letter >= \"A\" && letter <= \"Z\" {\n            output +=\
    \ Int(letter.asciiValue!)\n        }\n    }\n    return output", "    return s.reduce(0)\
    \ {\n        $1.isUppercase ? $0 + $1.asciiValue! : $0\n    }", "    var sum =\
    \ 0\n    for char in s {\n        let asc = Int(char.asciiValue!)\n        if\
    \ (64 < asc && asc < 91) {\n            sum += asc\n        }\n    }\n    return\
    \ sum", "    let upper = CharacterSet.uppercaseLetters\n    return s.unicodeScalars.reduce(0)\
    \ {\n        upper.contains($1) ? $0 + Int($1.value) : $0\n    }", "    return\
    \ s.filter { (char) -> Bool in\n        return char.isUppercase\n    }.map {\n\
    \        return Int(String($0))!\n    }.reduce(0, +)", "    let upperCharacters\
    \ = s.filter { $0.isUppercase }\n    return upperCharacters.reduce(0) { $0 + Int($1.asciiValue!)\
    \ }", '    return s.map { $0.asciiValue! }.filter { $0 >= 65 && $0 <= 90 }.reduce(0,
    +)', "    \n    var sum = 0\n    for c in s {\n        if c >= \"A\" && c <= \"\
    Z\" {\n            sum += Int(c.asciiValue!)\n        }\n    }\n    return sum",
  "    \n    var sum = 0\n    for c in s.uppercased() {\n        sum += Int(c.asciiValue!)\n\
    \    }\n    return sum", "    let upper = CharacterSet.uppercaseLetters\n    return\
    \ s.unicodeScalars.filter { upper.contains($0) }.reduce(0) { $0 + Int($1.value)\
    \ }", '    return s.reduce(0) {  $1.isUppercase ? $0 + Int($1.asciiValue!) : $0
    }', "    let upper = s.filter { $0.isUppercase }\n    let result = upper.compactMap\
    \ { Int(String($0)) }.reduce(0, +)\n    return result", "    \n    var sum = 0\n\
    \    for letter in s {\n        let upper = String(letter).uppercased()\n    \
    \    if upper == String(letter) {\n            sum += Int(letter.asciiValue!)\n\
    \        }\n    }\n    return sum", "    var sum = 0\n    for c in s {\n     \
    \   if c.isUppercase {\n            sum += Int(c.asciiValue!)\n        }\n   \
    \ }\n    return sum", '    return s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue!
    : 0) }', '    return s.filter { "ABCDEFGHIJKLMNOPQRSTUVWXYZ".contains($0) }.reduce(0)
    { $0 + Int(String($1).unicodeScalars.first!.value) }', '    return s.reduce(0)
    { $0 + ($1.isUppercase ? $1.asciiValue : 0) }', "    let unicode = s.unicodeScalars\n\
    \    var sum = 0\n    for scalar in unicode {\n        if scalar.value > 64 &&\
    \ scalar.value < 91 {\n            sum += Int(scalar.value)\n        }\n    }\n\
    \    return sum", '    return s.filter{ $0.isUppercase }.reduce(0) { $0 + $1.asciiValue!
    }', '    return s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue! : 0) }', " \
    \   let sum = s.filter { Int(String($0)) == nil }.reduce(0) { $0 + Int(String($1).uppercased().unicodeScalars.first!.value)\
    \ }\n    return sum", "    var result = 0\n    for char in s {\n        if char.isUppercase\
    \ {\n            result += Int(char.asciiValue!)\n        }\n    }\n    return\
    \ result", "    var sum = 0\n    for char in s {\n        if char.isUppercase\
    \ {\n            sum += Int(char.asciiValue!)\n        }\n    }\n    return sum",
  "    var sum = 0\n    for char in s {\n        if let code = char.asciiValue, code\
    \ >= 65, code <= 90 {\n            sum += Int(code)\n        }\n    }\n    return\
    \ sum", '    return s.unicodeScalars.filter({$0.isASCII && $0.isUppercase}).reduce(0,
    { $0 + Int($1.value) })', '    return s.filter{$0.isUppercase}.map{Int($0.asciiValue!)}.reduce(0,
    +)', "    var sum = 0\n    for c in s {\n        let ascii = c.asciiValue\n  \
    \      if let ascii = ascii {\n            if ascii >= 65 && ascii <= 90 {\n \
    \               sum += Int(ascii)\n            }\n        }\n    }\n    return\
    \ sum", '    return s.unicodeScalars.filter({$0.isUppercase}).reduce(0, {$0 +
    Int($1.value)})', "    let upperLetters = s.unicodeScalars.filter({ $0.isUppercase\
    \ })\n    return upperLetters.reduce(0, { x, y in\n        x + Int(y.value)\n\
    \    })", "    guard !s.isEmpty else { return 0 }\n    return Array(s.uppercased()).reduce(0)\
    \ { $0 + ($1.asciiValue ?? 0) }", '    return s.filter { $0.isUppercase }.reduce(0)
    { $0 + Int($0.asciiValue!) }', '    return s.asciiArray.filter { $0.isUppercase
    }.map { Int($0) }.reduce(0, +)', "    let mapped = s.map({ String($0) })\n   \
    \ let upper = mapped.filter({ $0.uppercased() == $0 })\n    let mappedUpper =\
    \ upper.map({ Int($0.unicodeScalars.first!.value) })\n    return mappedUpper.reduce(0,\
    \ +)", "    var result = 0\n    for item in s {\n        if item.isUppercase {\n\
    \            result += Int(item.asciiValue!)\n        }\n    }\n    return result",
  "    var sum = 0\n    for char in s {\n        if char.isUppercase {\n         \
    \   sum += Int(char.asciiValue!)\n        }\n    }\n    return sum", "    return\
    \ s.reduce(0) {\n        if 65...90 ~= Int($1.unicodeScalars.first!.value) {\n\
    \            return $0 + Int($1.unicodeScalars.first!.value)\n        }\n    \
    \    return $0\n    }", '    return s.filter { "ABCDEFGHIJKLMNOPQRSTUVWXYZ".contains($0)
    }.reduce(0) { $0 + Int(String($1).unicodeScalars.first!.value) }', "    guard\
    \ !s.isEmpty else { return 0 }\n    return s.reduce(0) { (res, char) -> Int in\n\
    \        if let ascii = char.asciiValue, ascii >= 65, ascii <= 90 {\n        \
    \    return res + Int(ascii)\n        }\n        return res\n    }", "    \n \
    \   return 0", "    var result = 0\n    s.forEach {\n        let code = $0.asciiValue!\n\
    \        if code >= 65 && code <= 90 {\n            result += Int(code)\n    \
    \    }\n    }\n    return result", '    return s.filter { $0.isUppercase }.reduce(0)
    { $0 + Int($0.asciiValue!) }', '    return s.reduce(0) { $0 + ($1.unicodeScalars.first!.isASCII
    && $1.unicodeScalars.first!.isUppercase ? $1.unicodeScalars.first!.value : 0)
    }', "    var total = 0\n    for character in s {\n        if character.isUppercase\
    \ {\n            total += character.asciiValue!\n        }\n    }\n    return\
    \ total", "  var sum = 0\n  for char in s {\n    let charCode = Int(char.asciiValue!)\n\
    \    if charCode > 64 && charCode < 91 {\n      sum += charCode\n    }\n  }\n\
    \  return sum", "    return s.reduce(0) { (result, char) -> Int in\n        guard\
    \ let ascii = char.asciiValue else { return result }\n        return ascii > 64\
    \ && ascii < 91 ? result + Int(ascii) : result\n    }", "    var sum = 0\n   \
    \ for char in s {\n        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n\
    \        }\n    }\n    return sum", '    return s.filter { $0.isUppercase }.reduce(0)
    { $0 + Int($0.asciiValue!) }', '  return s.unicodeScalars.filter { CharacterSet.uppercaseLetters.contains($0)
    }.reduce(0) { $0 + Int($1.value) }', "    let input = s.uppercased()\n    var\
    \ sum = 0\n    for u in input.unicodeScalars {\n        if u.value >= 65 && u.value\
    \ <= 90 {\n            sum += Int(u.value)\n        }\n    }\n    return sum",
  "    let first = s.filter { $0.isUppercase }.map { Int($0.asciiValue!) }.reduce(0,\
    \ +)\n    let second = s.filter { $0.isLowercase }.map { Int($0.asciiValue!) }.reduce(0,\
    \ +)\n    return first - second", "    var res = 0\n    for char in s {\n    \
    \    if char.isUppercase {\n            res += Int(char.asciiValue!)\n       \
    \ }\n    }\n    return res", '    return s.asciiValues.filter { $0 >= 65 && $0
    <= 90 }.reduce(0, +)', "    var sum = 0\n    for char in s {\n        let ascii\
    \ = char.asciiValue!\n        if ascii >= 65 && ascii <= 90 {\n            sum\
    \ += Int(ascii)\n        }\n    }\n    return sum", "    return s.reduce(0) {\n\
    \        guard let s = UnicodeScalar(String($1)) else {\n            return $0\n\
    \        }\n        return s.isASCII && s.isUppercase ? $0 + Int(s.value) : $0\n\
    \    }", "    let upperChars = s.filter { $0.isUppercase }\n    var sum = 0\n\
    \    for char in upperChars {\n        sum += Int(String(char).unicodeScalars.first!.value)\n\
    \    }\n    return sum", '    return s.filter{!"abcdefghijklmnopqrstuvwxyz".contains($0)}.reduce(0){$0
    + Int(UnicodeScalar($1.description)!.value)}', "    var sum = 0\n    for c in\
    \ s.utf8 {\n        let num = Int(c)\n        if 65 <= num && num <= 90 {\n  \
    \          sum += num\n        }\n    }\n    return sum", '    return s.reduce(0)
    { $0 + ($1.isUppercase ? $1.asciiValue! : 0) }', "    var sum = 0\n    for c in\
    \ s.unicodeScalars {\n        if c.value >= 65 && c.value <= 90 {\n          \
    \  sum += Int(c.value)\n        }\n    }\n    return sum", "  return s.unicodeScalars.reduce(0)\
    \ { (sum, char) in\n    return (char.value <= 122 && char.value >= 97) ? sum :\
    \ sum + Int(char.value)\n  }", "    var a = 0\n    for c in s {\n        if c.isUppercase\
    \ {\n            a += Int(c.asciiValue!)\n        }\n    }\n    return a", " \
    \   \n    let onlyUpperChars = Array(s.filter { $0.isUppercase }).map { $0.asciiValue!\
    \ }\n    let sum = onlyUpperChars.reduce(0, +)\n    return Int(sum)", "    var\
    \ result = 0\n    for c in s {\n        result += c.isUppercase ? Int(c.asciiValue!)\
    \ : 0\n    }\n    return result", "    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + $1.asciiValue! : $0\n    }", "    var result = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            result += Int(char.asciiValue!)\n\
    \        }\n    }\n    return result", "    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + Int($1.asciiValue!) : $0\n    }", "    return Array(s).reduce(0) {\n\
    \        $1 >= \"A\" && $1 <= \"Z\" ? $0 + Int($1.asciiValue!) : $0\n    }", '    return
    s.reduce(0) { $0 + ($1.unicodeScalars.first!.isASCII && $1.unicodeScalars.first!.isUppercase
    ? $1.unicodeScalars.first!.value : 0) }', "    let upper = s.unicodeScalars.filter\
    \ { $0.isASCII && $0.isUppercase }\n    return upper.reduce(0) { $0 + Int($1.value)\
    \ }", '    return s.reduce(0) { $0 + ($1 >= "A" && $1 <= "Z" ? Int($1.asciiValue!)
    : 0) }', "    // your code here\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }", "    let numbers = \"0123456789\"\n    let upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let lower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let digits = Set(numbers)\n    let uppers = Set(upper)\n    let lowers =\
    \ Set(lower)\n    var sum = 0\n    for char in s {\n        if digits.contains(char)\
    \ {\n            sum += Int(String(char))!\n        } else if uppers.contains(char)\
    \ {\n            sum += Int(String(char.asciiValue!))\n        }\n    }\n    return\
    \ sum", "    // code goes here\n    return 0", '    return s.asciiArray.filter({
    $0 >= 65 && $0 <= 90 }).reduce(0, +)', "    let uppercasedString = s.uppercased()\n\
    \    var result = 0\n    for ch in uppercasedString {\n        if let asciiValue\
    \ = ch.asciiValue {\n            result += Int(asciiValue)\n        }\n    }\n\
    \    return result", "    return s.map { $0.asciiValue }.reduce(0) { (result,\
    \ current) in\n        guard let asciiValue = current else { return result }\n\
    \        return result + (asciiValue < 97 ? Int(asciiValue) : 0)\n    }", '    return
    s.filter { Int($0.asciiValue!) > 64 && Int($0.asciiValue!) < 91 }.reduce(0) {
    $0 + Int($1.asciiValue!) }', "    var sum = 0\n    for c in s.unicodeScalars {\n\
    \        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum", "    var sum = 0\n    for i in s {\n     \
    \   let char = i.unicodeScalars.first!.value\n        if char >= 65 && char <=\
    \ 90 {\n            sum += Int(char)\n        }\n    }\n    return sum", "   \
    \ var sum = 0\n    for char in s {\n        if char.uppercased() == char {\n \
    \           sum += Int(char.asciiValue!)\n        }\n    }\n    return sum", " \
    \   let charCode = s.reduce(0) { (acc, element) -> Int in\n        let charCode\
    \ = element.asciiValue!\n        return acc + (charCode > 96 && charCode < 123\
    \ ? 0 : Int(charCode))\n    }\n    return charCode", '    return s.reduce(0) {
    $0 + ($1.isUppercase ? $1.asciiValue! : 0) }', "    var result = 0\n    for c\
    \ in s {\n        result += c.unicodeScalars.first!.value\n    }\n    return result",
  '    return s.reduce(0) { $0 + ($1.isUppercase ? $1.unicodeScalars.first!.value
    : 0) }', '    return s.filter { $0.isUppercase }.reduce(0) { (res, c) in res +
    Int(c.asciiValue!) }', "    var sum = 0\n    for i in s {\n        let char =\
    \ Character(String(i))\n        if CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n            sum += Int(char.asciiValue!)\n        }\n    }\n    return sum",
  "    return s.reduce(0) {\n        $1.isUppercase ? ($0 + $1.asciiValue!) : $0\n\
    \    }", '    return s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue : 0) }',
  "    var total = 0\n    let uppers = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for char\
    \ in s {\n        if uppers.contains(char) {\n            total += Int(String(char).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return total", "  let upperLetters = s.filter { $0.isUppercase\
    \ }\n  let asciiSum = upperLetters.reduce(0) { $0 + Int($1.asciiValue!) }\n  return\
    \ asciiSum", "    var sum = 0\n    for char in s {\n        if char.isUppercase\
    \ {\n            sum += Int(char.asciiValue!)\n        }\n    }\n    return sum",
  "    var sum = 0\n    s.forEach { sum += Int($0.asciiValue!) - Int(Character(\"\
    a\").asciiValue!) }\n    return sum", "  let upperString = s.uppercased()\n  let\
    \ upperAscii = upperString.unicodeScalars.filter { $0.isASCII }\n  let upperAsciiCodes\
    \ = upperAscii.map { $0.value }\n  return upperAsciiCodes.reduce(0, +)", '    return
    s.reduce(0) { $0 + (65...90 ~= $1.asciiValue! ? $1.asciiValue! : 0) }', "    \n\
    \    var sum = 0\n    for c in s {\n        let ascii = c.asciiValue\n       \
    \ if let a = ascii {\n            if a >= 65 && a <= 90 {\n                sum\
    \ += Int(a)\n            }\n        }\n    }\n    return sum", '    return s.reduce(0)
    { $0 + ($1.isUppercase ? $1.unicodeScalars.first!.value : 0) }', "  return s.unicodeScalars.reduce(0)\
    \ { result, next in\n    switch next.value {\n    case 65...90: return result\
    \ + Int(next.value)\n    default: return result\n    }\n  }", "    return s.reduce(0)\
    \ {\n        $1 >= \"A\" && $1 <= \"Z\" ? $0 + Int($1.asciiValue!) : $0\n    }",
  '    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!) }',
  '    return s.filter{$0.isUppercase}.reduce(0){$0 + $1.asciiValue!}', "    let arr\
    \ = s.filter{ $0.isUppercase }\n    guard arr.count > 0 else { return 0 }\n  \
    \  let chars = [UInt8](arr.utf8)\n    return chars.reduce(0, +)", "    return\
    \ s.reduce(0) { result, char in\n        let code = UnicodeScalar(String(char))?.value\n\
    \        return result + (code! >= 65 && code! <= 90 ? Int(code!) : 0)\n    }",
  "    return s.reduce(0) {\n        $1.unicodeScalars.first!.isASCII && CharacterSet.uppercaseLetters.contains($1.unicodeScalars.first!)\
    \ ? $0 + Int($1.unicodeScalars.first!.value) : $0\n    }", '    // your code',
  '  return s.filter { $0.isUppercase }.reduce(0) { $0 + $1.asciiValue! }', "    let\
    \ asciiCodes = s.unicodeScalars.compactMap { (c) -> Int? in\n        return Int(c.value)\n\
    \    }\n    return asciiCodes.reduce(0, { (res, c) -> Int in\n        if c >=\
    \ 65 && c <= 90 {\n            return res + c\n        }\n        return res\n\
    \    })", '    return s.reduce(0) { $0 + (65...90 ~= $1.ascii ?? 0 ? $1.ascii!
    : 0) }', "    var sum = 0\n    for code in s.utf8 {\n        if code >= 65 &&\
    \ code <= 90 {\n            sum += Int(code)\n        }\n    }\n    return sum",
  '    return s.utf8.map({ $0 >= 65 && $0 <= 90 ? Int($0) : 0 }).reduce(0, +)', '    return
    s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue : 0) }', "    guard !s.isEmpty\
    \ else { return 0 }\n    let upperChar = s.filter { Int(String($0)) == nil }\n\
    \    var sum = 0\n    for i in upperChar {\n        sum += Int(String(i).unicodeScalars.first!.value)\n\
    \    }\n    return sum", "    let upper = s.uppercased()\n    let array = Array(upper)\n\
    \    let arr = array.map { Int(String($0).unicodeScalars.first!.value) }\n   \
    \ return arr.reduce(0, +)", '    return s.filter { $0.isUppercase }.reduce(0)
    { $0 + Int($0.asciiValue!) }', "  guard !s.isEmpty else { return 0 }\n  let result\
    \ = s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue! : 0) }\n  return Int(result)",
  "    return s.reduce(0) {\n        (sum, char) in\n        return sum + (char.isUppercase\
    \ ? char.asciiValue : 0)\n    }", "    var sum = 0\n    for char in s {\n    \
    \    if let intChar = char.asciiValue,\n            intChar >= 65,\n         \
    \   intChar <= 90 {\n            sum += Int(intChar)\n        }\n    }\n    return\
    \ sum", '    return s.reduce(0) { $0 + ($1 >= "A" && $1 <= "Z" ? Int($1.asciiValue!)
    : 0) }', '    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase
    ? $1.value : 0) }', "    return s.filter { $0.isUppercase }.reduce(0) { (result,\
    \ char) -> Int in\n        return result + Int(char.asciiValue!)\n    }", "  \
    \  var result = 0\n    for char in s.uppercased() {\n        let charAscii = char.asciiValue\n\
    \        if charAscii != nil && charAscii! >= 65 && charAscii! <= 90 {\n     \
    \       result += Int(charAscii!)\n        }\n    }\n    return result", "   \
    \ var sum = 0\n    for char in s {\n        if char.isUppercase {\n          \
    \  sum += Int(char.asciiValue!)\n        }\n    }\n    return sum", "    return\
    \ s.filter { $0.isUppercase }.reduce(0) { (result, str) -> Int in\n        let\
    \ code = str.unicodeScalars.first!.value\n        return result + Int(code)\n\
    \    }", "    var upper: Int = 0\n    for c in s {\n        if c.isUppercase {\n\
    \            upper += Int(c.asciiValue!)\n        }\n    }\n    return upper",
  "  let upperChars = s.filter { $0.isUppercase }\n  let asciiCodes = upperChars.compactMap\
    \ { $0.asciiValue }\n  return asciiCodes.reduce(0, +)", '    return s.reduce(0)
    { $0 + ($1 > "a" ? $1.asciiValue! - 32 : 0) }', "    var sum = 0\n    for c in\
    \ s.uppercased() {\n        if c.isASCII {\n            sum += Int(c.asciiValue!)\n\
    \        }\n    }\n    return sum", '    return s.unicodeScalars.filter({ $0.value
    >= 65 && $0.value <= 90 }).reduce(0, +)', '    return s.filter { $0.isUppercase
    }.reduce(0) { $0 + Int($0.asciiValue!) }', "    let toSum = s.filter{ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .contains($0) }\n    guard !toSum.isEmpty else { return 0 }\n    return toSum.map\
    \ { Int(String($0)) ?? 0 }.reduce(0, +)", '    return Int(s.filter { $0.isUppercase
    }.unicodeScalars.map(Int.init).reduce(0, +))', '    return s.filter { $0.isUppercase
    }.reduce(0) { $0 + Int($0.asciiValue ?? 0) }', "    return s.reduce(0) { (result,\
    \ char) -> Int in\n        guard let charInt = char.asciiValue else { return result\
    \ }\n        guard charInt >= 65, charInt <= 90 else { return result }\n     \
    \   return result + Int(charInt)\n    }", "    // Your code here\n    return s.filter{\
    \ String($0).uppercased() == String($0) }.reduce(0){ $0 + Int(String($1).unicodeScalars.first!.value)\
    \ }", "    return s.map {\n        $0.unicodeScalars.map { Int($0.value) }\n \
    \   }.flatMap { $0 }.filter { $0 >= 65 && $0 <= 90 }.reduce(0, +)", '    return
    s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0)
    }', '    return s.filter{$0.isUppercase}.map({$0.asciiValue!}).reduce(0, +)',
  "    var res = 0\n    for code in s.unicodeScalars {\n        if code.value >= 65\
    \ && code.value <= 90 {\n            res += Int(code.value)\n        }\n    }\n\
    \    return res", "    var result = 0\n    for c in s {\n        if c.isUppercase\
    \ {\n            result += Int(c.asciiValue!)\n        }\n    }\n    return result",
  '    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!) }',
  "    var sum = 0\n    for char in s.uppercased() {\n        sum += Int(char.asciiValue!)\n\
    \    }\n    return sum", '    return s.filter { $0.isUppercase }.reduce(0) { $0
    + Int($0.asciiValue!) }', '    return s.filter { $0.isUppercase }.reduce(0) {
    $0 + Int($0.asciiValue!) }', '    return s.filter{$0.isUppercase}.map{Int($0.asciiValue!)}.reduce(0,
    +)', '    return s.reduce(0) { $0 + (isCapital($1) ? Int($1.asciiValue!) : 0)
    }', "    let upper = s.unicodeScalars.filter({ $0.value >= 65 && $0.value <= 90\
    \ })\n    return upper.reduce(0, +)", '  return s.reduce(0) { $0 + ($1.isUppercase
    ? $1.asciiValue! : 0) }', "    let chars = Array(s)\n    var sum = 0\n    for\
    \ c in chars {\n        let char: Int = Int(String(c))!\n        if (char >= 65\
    \ && char <= 90) {\n            sum += char\n        }\n    }\n    return sum",
  '    return s.map { $0.isLetter && $0.isUppercase ? $0.asciiValue! : 0 }.reduce(0,
    +)', "    let upperCases = s.filter{$0.isUppercase}\n    let num = upperCases.map{Int(Character($0).asciiValue!)}\n\
    \    return num.reduce(0, +)", "    let sum = s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n    return Int(sum)", "    var sum = 0\n    for i in\
    \ s {\n        let charCode = String(i.unicodeScalars.first!.value)\n        if\
    \ charCode.contains(\"65\") || charCode.contains(\"66\") || charCode.contains(\"\
    67\") || charCode.contains(\"68\") || charCode.contains(\"69\") || charCode.contains(\"\
    70\") || charCode.contains(\"71\") || charCode.contains(\"72\") || charCode.contains(\"\
    73\") || charCode.contains(\"74\") || charCode.contains(\"75\") || charCode.contains(\"\
    76\") || charCode.contains(\"77\") || charCode.contains(\"78\") || charCode.contains(\"\
    79\") || charCode.contains(\"80\") || charCode.contains(\"81\") || charCode.contains(\"\
    82\") || charCode.contains(\"83\") || charCode.contains(\"84\") || charCode.contains(\"\
    85\") || charCode.contains(\"86\") || charCode.contains(\"87\") || charCode.contains(\"\
    88\") || charCode.contains(\"89\") || charCode.contains(\"90\") {\n          \
    \  sum += Int(charCode)!\n        }\n    }\n    return sum", '    return s.filter
    { $0.isUppercase }.map { Int($0.asciiValue!) }.reduce(0, +)', "    var sum = 0\n\
    \    s.filter { $0.isUppercase }.forEach { sum += Int($0.asciiValue!) }\n    return\
    \ sum", "    return s.reduce(0) { (result, character) -> Int in\n        var charCode\
    \ = character.unicodeScalars.first!.value\n        if charCode >= 97 {\n     \
    \       charCode -= 32\n        }\n        return result + Int(charCode)\n   \
    \ }", "    return s.unicodeScalars.reduce(0) {\n        if $1.value > 96 && $1.value\
    \ < 123 {\n            return $0 + Int($1.value)\n        } else {\n         \
    \   return $0\n        }\n    }", '    return s.filter { $0.isUppercase }.reduce(0)
    { $0 + Int($0.asciiValue!) }', "    var sum = 0\n    for c in s {\n        let\
    \ char = String(c)\n        if char.uppercased() == char {\n            sum +=\
    \ char.unicodeScalars.map{Int($0.value)}.reduce(0, +)\n        }\n    }\n    return\
    \ sum", '    return s.reduce(0) { $0 + ($1.isUppercase ? Int($1.asciiValue!) :
    0) }', '    return s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue! : 0) }',
  "    return Array(s.uppercased())\n        .filter({ $0.isUppercase })\n       \
    \ .reduce(0, { $0 + Int(String($1).unicodeScalars.first!.value) })", "    var\
    \ sum = 0\n    for char in s {\n        if let ascii = char.asciiValue, ascii\
    \ >= 65, ascii <= 90 {\n            sum += Int(ascii)\n        }\n    }\n    return\
    \ sum", '    return s.filter { $0.isUppercase }.map { Int($0.asciiValue!) }.reduce(0,
    +)', "    var sum = 0\n    s.forEach { char in\n        if char.isLetter {\n \
    \           sum += char.asciiValue!\n        }\n    }\n    return sum", "    var\
    \ total = 0\n    for char in s {\n        if char.uppercased() == char {\n   \
    \         total += Int(char.asciiValue!)\n        }\n    }\n    return total",
  '    return s.filter { ("A"..."Z").contains($0) }.map { Int(String($0))! }.reduce(0,
    +)', '    return s.reduce(0) { $0 + ($1 >= "A" && $1 <= "Z" ? Int($1.asciiValue!)
    : 0) }', "    var sum = 0\n    for letter in s {\n        if CharacterSet.uppercaseLetters.contains(Character(String(letter).unicodeScalars.first!))\
    \ {\n            sum += Int(String(letter).unicodeScalars.first!.value)\n    \
    \    }\n    }\n    return sum", "    guard !s.isEmpty else { return 0 }\n    return\
    \ s.reduce(0) { result, ch in\n        if ch.isUppercase {\n            return\
    \ result + ch.unicodeScalars.first!.value\n        }\n        return result\n\
    \    }", "  var sum = 0\n  for character in s.unicodeScalars {\n    if character.value\
    \ >= 65 && character.value <= 90 {\n      sum += Int(character.value)\n    }\n\
    \  }\n  return sum", "    // your code\n    return s.compactMap{$0.asciiValue}.reduce(0,+)",
  "    return Array(s.uppercased()).reduce(0) {\n        let scalar = $1.unicodeScalars.first!\n\
    \        let val = Int(scalar.value)\n        if val > 64 && val < 91 {\n    \
    \        return $0 + val\n        }\n        return $0\n    }", "    guard !s.isEmpty\
    \ else { return 0 }\n    var sum = 0\n    for char in s {\n        let asciiCode\
    \ = Int(char.asciiValue!)\n        if asciiCode >= 65 && asciiCode <= 90 {\n \
    \           sum += asciiCode\n        }\n    }\n    return sum", '    return s.unicodeScalars.reduce(0)
    { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }', "    let upper = s.filter\
    \ { $0.isUppercase }\n    let digits = upper.unicodeScalars.map { Int($0.value)\
    \ }\n    return digits.reduce(0, +)", "    return s.reduce(0) {\n        $1 >=\
    \ \"A\" && $1 <= \"Z\" ? $0 + Int($1.asciiValue!) : $0\n    }", '    return s.unicodeScalars.reduce(0)
    { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }', "    var sum = 0\n  \
    \  for letter in s {\n        let letterCode = Int(String(letter).unicodeScalars.first!.value)\n\
    \        if letterCode > 64 && letterCode < 91 {\n            sum += letterCode\n\
    \        }\n    }\n    return sum", "    \n    var sum: Int = 0\n    \n    for\
    \ char in s {\n        let charASCII = Int(String(char).unicodeScalars.first!.value)\n\
    \        if charASCII >= 65 && charASCII <= 90 {\n            sum += charASCII\n\
    \        }\n    }\n    \n    return sum", "    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + $1.ascii : $0\n    }", "    var result = 0\n    s.forEach {\n       \
    \ if String($0).uppercased() == String($0) {\n            result += Int(String($0).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return result", "    var result = 0\n    for char in s\
    \ {\n        let code = Int(char.asciiValue ?? 0)\n        if code >= 65 && code\
    \ <= 90 {\n            result += code\n        }\n    }\n    return result", " \
    \   let s = Array(s)\n    var sum = 0\n    for c in s {\n        let x = Int(String(c))\n\
    \        if let x = x {\n            sum += x\n        }\n    }\n    return sum",
  '    return s.unicodeScalars.filter({ $0.value >= 65 && $0.value <= 90 }).reduce(0,
    +)', '    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue
    ?? 0) }', "    var sum = 0\n    for c in s.unicodeScalars {\n        if let d\
    \ = c.wholeNumberValue {\n            if d >= 65 && d <= 90 {\n              \
    \  sum += Int(d)\n            }\n        }\n    }\n    return sum", '    return
    s.filter { $0.isUppercase }.map { Int($0.asciiValue!) }.reduce(0, +)']
stop_tokens:
- "\n}"
