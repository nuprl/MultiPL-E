name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested arrays,\n/// which\
  \ is similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the array,\n\
  /// and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2,\
  \ 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n\
  /// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst:\
  \ [[Int]], x: Int) -> [(Int, Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    var res = [(Int, Int)]()\n    for (n, row) in lst.enumerated()\
    \ {\n        for (m, el) in row.enumerated() {\n            if el == x {\n   \
    \             res.append((n, m))\n            }\n        }\n    }\n    return\
    \ res.sorted(by: { (lhs, rhs) -> Bool in\n        if lhs.0 == rhs.0 {\n      \
    \      return lhs.1 > rhs.1\n        }\n        return lhs.0 < rhs.0\n    })",
  "    var result: [(Int, Int)] = []\n    var row = 0\n    for sublist in lst {\n\
    \        var col = 0\n        for num in sublist {\n            if num == x {\n\
    \                result.append((row, col))\n            }\n            col +=\
    \ 1\n        }\n        row += 1\n    }\n    return result.sorted(by: {\n    \
    \    if $0.0 == $1.0 {\n            return $0.1 > $1.1\n        }\n        return\
    \ $0.0 < $1.0\n    })", "    var res: [(Int, Int)] = []\n    for i in 0..<lst.count\
    \ {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n  \
    \              res.append((i, j))\n            }\n        }\n    }\n    res.sort(by:\
    \ { $0.0 < $1.0 })\n    res.sort(by: { $0.1 > $1.1 })\n    return res", "    var\
    \ result: [(Int, Int)] = []\n    var i = 0\n    for row in lst {\n        for\
    \ (j, el) in row.enumerated() {\n            if el == x {\n                result.append((i,\
    \ j))\n            }\n        }\n        i += 1\n    }\n    return result.sorted(by:\
    \ {\n        if $0.0 != $1.0 {\n            return $0.0 < $1.0\n        } else\
    \ {\n            return $0.1 > $1.1\n        }\n    })", "    return lst.enumerated().flatMap\
    \ { (i, arr) in\n        arr.enumerated().filter { $0.element == x }.map { (i,\
    \ $0.offset) }\n    }.sorted(by: { $0.0 < $1.0 })", "    let sorted: [[Int]] =\
    \ lst.map({ row in\n        var row = row\n        row.sort(by: { $0 > $1 })\n\
    \        return row\n    })\n    let rows = lst.map({ row in\n        let rowIndex\
    \ = lst.index(of: row)!\n        let indexes = row.enumerated().filter({ $0.element\
    \ == x }).map({ $0.offset })\n        return indexes.map({ (rowIndex, $0) })\n\
    \    })\n    return rows.flatMap({ $0 }).sorted(by: { $0.0 < $1.0 || ($0.0 ==\
    \ $1.0 && $0.1 > $1.1) })", "  var tuples: [(Int, Int)] = []\n  for (i, n) in\
    \ lst.enumerated() {\n    for (j, k) in n.enumerated() {\n      if k == x {\n\
    \        tuples.append((i, j))\n      }\n    }\n  }\n  tuples.sort { $0.0 < $1.0\
    \ }\n  tuples.sort { $0.1 > $1.1 }\n  return tuples", "    var result = [(Int,\
    \ Int)]()\n    for (index1, value1) in lst.enumerated() {\n        for (index2,\
    \ value2) in value1.enumerated() {\n            if value2 == x {\n           \
    \     result.append((index1, index2))\n            }\n        }\n    }\n    let\
    \ sortedResult = result.sorted(by: { $0.0 == $1.0 ? $0.1 > $1.1 : $0.0 < $1.0\
    \ })\n    return sortedResult", "    var result: [(Int, Int)] = []\n    for (row,\
    \ arr) in lst.enumerated() {\n        for (col, val) in arr.enumerated() {\n \
    \           if val == x {\n                result.append((row, col))\n       \
    \     }\n        }\n    }\n    return result.sorted(by: { (a, b) -> Bool in\n\
    \        if a.0 == b.0 {\n            return a.1 > b.1\n        }\n        return\
    \ a.0 < b.0\n    })", "    let row_with_cols = lst.enumerated().map({ ($0.0, $0.1.enumerated().filter({\
    \ $0.1 == x })) })\n    let filtered_rows = row_with_cols.filter({ $0.1.count\
    \ > 0 })\n    return filtered_rows.map({ row in\n        (row.0, row.1.map({ $0.0\
    \ }).max()!)\n    }).sorted(by: { $0.0 < $1.0 })", "    return lst.enumerated().reduce([])\
    \ {\n        if let index = $1.firstIndex(of: x) {\n            return $0 + [(index,\
    \ $0.count)]\n        }\n        return $0\n    }", "    // insert code here\n\
    \    var tuples: [(Int, Int)] = []\n    var index: Int = 0\n    for row in lst\
    \ {\n        var i: Int = 0\n        while i < row.count {\n            if x ==\
    \ row[i] {\n                tuples.append((index, i))\n            }\n       \
    \     i += 1\n        }\n        index += 1\n    }\n    tuples.sort {\n      \
    \  if $0.0 == $1.0 {\n            return $0.1 > $1.1\n        }\n        return\
    \ $0.0 < $1.0\n    }\n    return tuples", "\tvar tuples: [(Int, Int)] = []\n\t\
    var n = 0\n\tfor array in lst {\n\t\tfor i in 0..<array.count {\n\t\t\tif array[i]\
    \ == x {\n\t\t\t\ttuples.append((n, i))\n\t\t\t}\n\t\t}\n\t\tn = n + 1\n\t}\n\t\
    tuples.sort{ $0.0 < $1.0 }\n\tfor i in 0..<tuples.count {\n\t\tfor j in 0..<tuples.count\
    \ - 1 {\n\t\t\tif tuples[j].0 == tuples[j + 1].0 {\n\t\t\t\tif tuples[j].1 < tuples[j\
    \ + 1].1 {\n\t\t\t\t\tlet temp = tuples[j]\n\t\t\t\t\ttuples[j] = tuples[j + 1]\n\
    \t\t\t\t\ttuples[j + 1] = temp\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn tuples",
  "    var tupleArray: [(Int, Int)] = []\n    for (index, value) in lst.enumerated()\
    \ {\n        for (innerIndex, innerValue) in value.enumerated() {\n          \
    \  if innerValue == x {\n                tupleArray.append((index, innerIndex))\n\
    \            }\n        }\n    }\n    return tupleArray.sorted { ($0.0 < $1.0)\
    \ || ($0.0 == $1.0 && $0.1 > $1.1) }", "    // return (0..<lst.count).flatMap\
    \ {\n    //     (0..<lst[$0].count).compactMap {\n    //         lst[$0][$1] ==\
    \ x ? ($0, $1) : nil\n    //     }\n    // }\n    var result: [(Int, Int)] = []\n\
    \    for (row, arr) in lst.enumerated() {\n        for (column, element) in arr.enumerated()\
    \ {\n            if element == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    return result", "    var index = [(Int,\
    \ Int)]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n\
    \            if lst[i][j] == x {\n                index.append((i, j))\n     \
    \       }\n        }\n    }\n    index.sort { (e1, e2) -> Bool in\n        if\
    \ e1.0 < e2.0 {\n            return true\n        } else if e1.0 == e2.0 {\n \
    \           return e1.1 > e2.1\n        } else {\n            return false\n \
    \       }\n    }\n    return index", "    var result = [(Int, Int)]()\n    var\
    \ i = 0\n    while i < lst.count {\n        let row = lst[i]\n        var j =\
    \ 0\n        while j < row.count {\n            if row[j] == x {\n           \
    \     result.append((i, j))\n            }\n            j += 1\n        }\n  \
    \      i += 1\n    }\n    return result.sorted(by: { (p1, p2) -> Bool in\n   \
    \     if p1.0 == p2.0 {\n            return p1.1 > p2.1\n        }\n        return\
    \ p1.0 < p2.0\n    })", "  let tuplesArray = lst.enumerated().flatMap { (outerIndex,\
    \ array) -> [(Int, Int)] in\n    let tuples = array.enumerated().filter { (index,\
    \ val) -> Bool in\n      return val == x\n    }.map { (index, _) -> (Int, Int)\
    \ in\n      return (outerIndex, index)\n    }\n    return tuples\n  }\n  let sortedTuples\
    \ = tuplesArray.sorted { (t1, t2) -> Bool in\n    if t1.0 == t2.0 {\n      return\
    \ t1.1 > t2.1\n    }\n    return t1.0 < t2.0\n  }\n  return sortedTuples", " \
    \   return lst.enumerated().reduce([(Int, Int)]()) { (res, pair) in\n        let\
    \ (index, list) = pair\n        let row = list.enumerated().filter({ (subpair)\
    \ -> Bool in\n            let (subindex, elem) = subpair\n            return elem\
    \ == x\n        }).map({ (subpair) -> (Int, Int) in\n            let (subindex,\
    \ _) = subpair\n            return (index, subindex)\n        })\n        return\
    \ res + row\n    }.sorted(by: { (a, b) -> Bool in\n        if a.0 != b.0 {\n \
    \           return a.0 < b.0\n        } else {\n            return a.1 > b.1\n\
    \        }\n    })", "    return lst.enumerated().reduce([(Int, Int)]()) { (res,\
    \ item) in\n        let (index, array) = item\n        let ret = array.enumerated().filter\
    \ { (tuple) -> Bool in\n            return tuple.element == x\n        }.map {\
    \ (tuple) -> (Int, Int) in\n            let (index, _) = tuple\n            return\
    \ (index, index)\n        }\n        return res + ret\n    }", "    var result:\
    \ [(Int, Int)] = []\n    var i = 0, j = 0\n    for elem in lst {\n        j =\
    \ 0\n        for innerElem in elem {\n            if innerElem == x {\n      \
    \          result.append((i, j))\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return result", "    return lst.enumerated().flatMap\
    \ { row in\n        return row.element.enumerated().filter({ $0.element == x })\n\
    \            .map { x, y in (row.offset, y) }\n    }.sorted(by: { $0.0 < $1.0\
    \ }).sorted(by: { $0.1 > $1.1 })", "    var result = [(Int, Int)]()\n    for (row,\
    \ colList) in lst.enumerated() {\n        for (col, item) in colList.enumerated()\
    \ {\n            if item == x {\n                result.append((row, col))\n \
    \           }\n        }\n    }\n    return result.sorted(by: { (tuple1, tuple2)\
    \ -> Bool in\n        if tuple1.0 < tuple2.0 {\n            return true\n    \
    \    } else if tuple1.0 == tuple2.0 {\n            return tuple1.1 > tuple2.1\n\
    \        } else {\n            return false\n        }\n    })", "    var result:\
    \ [(Int, Int)] = []\n    lst.enumerated().forEach { index, innerArr in\n     \
    \   innerArr.enumerated().forEach { innerIndex, innerValue in\n            if\
    \ x == innerValue {\n                result.append((index, innerIndex))\n    \
    \        }\n        }\n    }\n    return result.sorted{$0.0 == $1.0 ? $0.1 > $1.1\
    \ : $0.0 < $1.0}", "    var result: [(Int, Int)] = []\n    for (i, row) in lst.enumerated()\
    \ {\n        for (j, element) in row.enumerated() {\n            if element ==\
    \ x {\n                result.append((i, j))\n            }\n        }\n    }\n\
    \    return result.sorted{$0.0 < $1.0}.sorted{$0.1 > $1.1}", "    var result:\
    \ [(Int, Int)] = []\n    for (i, row) in lst.enumerated() {\n        for (j, value)\
    \ in row.enumerated() {\n            if value == x {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    return result.sorted {\n        if\
    \ $0.0 == $1.0 {\n            return $0.1 > $1.1\n        }\n        return $0.0\
    \ < $1.0\n    }", "    let sorted = lst.enumerated().filter({ $0.element.contains(x)\
    \ }).sorted(by: { $0.offset < $1.offset })\n    return sorted.map({ ($0.offset,\
    \ $0.element.index(of: x)!) })", "    var result = [(Int, Int)]()\n    var rowCounter\
    \ = 0\n    var columnCounter = 0\n    for row in lst {\n        columnCounter\
    \ = 0\n        for element in row {\n            if element == x {\n         \
    \       result.append((rowCounter, columnCounter))\n            }\n          \
    \  columnCounter += 1\n        }\n        rowCounter += 1\n    }\n    return result.sorted\
    \ { (a, b) -> Bool in\n        if a.0 < b.0 {\n            return true\n     \
    \   } else if a.0 == b.0 {\n            return a.1 > b.1\n        } else {\n \
    \           return false\n        }\n    }", "    return lst.enumerated().flatMap\
    \ { (row_index, row) -> [(Int, Int)] in\n        row.enumerated().filter { (column_index,\
    \ element) -> Bool in\n            element == x\n        }.map { (column_index,\
    \ element) -> (Int, Int) in\n            (row_index, column_index)\n        }\n\
    \    }.sorted { (lhs, rhs) -> Bool in\n        if lhs.0 == rhs.0 {\n         \
    \   return lhs.1 > rhs.1\n        }\n        return lhs.0 < rhs.0\n    }", " \
    \ var tuples = [(Int, Int)]()\n  for (index, values) in lst.enumerated() {\n \
    \   for (i, value) in values.enumerated() {\n      if value == x {\n        tuples.append((index,\
    \ i))\n      }\n    }\n  }\n  return tuples.sorted(by: {\n    if $0.0 != $1.0\
    \ {\n      return $0.0 < $1.0\n    } else {\n      return $0.1 > $1.1\n    }\n\
    \  })", "    var arr : [(Int, Int)] = []\n    var rowCount = 0\n    for row in\
    \ lst {\n        for value in row {\n            if (value == x) {\n         \
    \       arr.append((rowCount, row.index(of: value)!))\n            }\n       \
    \ }\n        rowCount += 1\n    }\n    return arr.sorted(by: {\n        return\
    \ ($0.0 < $1.0) ? true : (($0.0 == $1.0) ? ($0.1 > $1.1) : false)\n    })", " \
    \   var arr = [(Int, Int)]()\n    for (row, rowArr) in lst.enumerated() {\n  \
    \      for (col, num) in rowArr.enumerated() {\n            if num == x {\n  \
    \              arr.append((row, col))\n            }\n        }\n    }\n    return\
    \ arr.sorted { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1) }", "    var result:\
    \ [(Int, Int)] = []\n    for (indexRow, row) in lst.enumerated() {\n        for\
    \ (indexCol, value) in row.enumerated() {\n            if value == x {\n     \
    \           result.append((indexRow, indexCol))\n            }\n        }\n  \
    \  }\n    return result.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.1 > $1.1 })",
  "    var coordinates = [(Int, Int)]()\n    for (i, row) in lst.enumerated() {\n\
    \        for (j, x1) in row.enumerated() {\n            if x1 == x {\n       \
    \         coordinates.append((i, j))\n            }\n        }\n    }\n    return\
    \ coordinates.sorted { $0.0 < $1.0 || $0.0 == $1.0 && $0.1 > $1.1 }", "    var\
    \ a: [(Int, Int)] = []\n    var r: [Int] = []\n    var temp: [Int] = []\n    for\
    \ x in 0..<lst.count {\n        r.append(x)\n    }\n    for x in lst {\n     \
    \   temp.append(x.count)\n    }\n    for x in 0..<lst.count {\n        if temp[x]\
    \ == 0 {\n            r.remove(at: x)\n        }\n    }\n    for x in 0..<lst.count\
    \ {\n        for y in 0..<lst[x].count {\n            if lst[x][y] == x {\n  \
    \              a.append((x, y))\n            }\n        }\n    }\n    return a",
  "    let flatten = lst.enumerated().flatMap { (offset, element) -> [(Int, Int)]\
    \ in\n        return element.enumerated().compactMap { (offset2, element2) ->\
    \ (Int, Int)? in\n            return element2 == x ? (offset, offset2) : nil\n\
    \        }\n    }.sorted { (left, right) -> Bool in\n        if left.0 == right.0\
    \ {\n            return left.1 > right.1\n        }\n        return left.0 < right.0\n\
    \    }\n    return flatten", "    var coordinates = [(Int, Int)]()\n    var rows\
    \ = 0\n    var columns = 0\n    for row in lst {\n        columns = 0\n      \
    \  for column in row {\n            if column == x {\n                coordinates.append((rows,\
    \ columns))\n            }\n            columns += 1\n        }\n        rows\
    \ += 1\n    }\n    coordinates.sort { (first, second) -> Bool in\n        if first.0\
    \ < second.0 {\n            return true\n        } else if first.0 == second.0\
    \ {\n            return first.1 > second.1\n        } else {\n            return\
    \ false\n        }\n    }\n    return coordinates", "    var list : [(Int, Int)]\
    \ = []\n    for (i, array) in lst.enumerated() {\n        for (j, number) in array.enumerated()\
    \ {\n            if number == x {\n                list.append((i, j))\n     \
    \       }\n        }\n    }\n    list.sort{($0.0, -$0.1) < ($1.0, -$1.1)}\n  \
    \  return list", "    var row: [(Int, Int)] = []\n    for i in 0..<lst.count {\n\
    \        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n      \
    \          row.append((i, j))\n            }\n        }\n    }\n    return row.sorted(by:\
    \ {$0.0 < $1.0}).sorted(by: {$0.1 > $1.1})", "    let lst = lst.enumerated().map\
    \ { (i, a) in\n        a.enumerated().map { (j, a) in\n            (i, j, a)\n\
    \        }\n    }.flatMap { $0 }.filter { $0.2 == x }.sorted { $0.0 < $1.0 }.map\
    \ { (i, j, _) in\n        (i, j)\n    }\n    return lst", "    var result = [(Int,\
    \ Int)]()\n    for i in 0..<lst.count {\n        var j = 0\n        while j <\
    \ lst[i].count {\n            if lst[i][j] == x {\n                result.append((i,\
    \ j))\n            }\n            j += 1\n        }\n    }\n    return result.sorted(by:\
    \ {$0.0 < $1.0}).sorted(by: {$0.1 > $1.1})", "    var result: [(Int, Int)] = []\n\
    \    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n         \
    \   if lst[i][j] == x {\n                result.append((i, j))\n            }\n\
    \        }\n    }\n    return result.sorted(by: { $0.0 < $1.0 }).sorted(by: {\
    \ $0.1 > $1.1 })", '    return [] as [(Int, Int)]', "    return lst.enumerated().flatMap{\
    \ (index, array) in\n        return array.enumerated().filter{ $0.element == x\
    \ }.map{ ($0.offset, index) }\n    }.sorted(by: <).sorted(by: >)", "    // your\
    \ code here\n    return []", "    var result = [(Int, Int)]()\n    for (row, rows)\
    \ in lst.enumerated() {\n        for (column, value) in rows.enumerated() {\n\
    \            if value == x {\n                result.append((row, column))\n \
    \           }\n        }\n    }\n    return result.sorted(by: { (left, right)\
    \ -> Bool in\n        if left.0 < right.0 {\n            return true\n       \
    \ } else if left.0 == right.0 {\n            return left.1 > right.1\n       \
    \ } else {\n            return false\n        }\n    })", "    var result: [(Int,\
    \ Int)] = []\n    for (index, value) in lst.enumerated() {\n        if let indexOf\
    \ = value.index(of: x) {\n            result.append((index, indexOf))\n      \
    \  }\n    }\n    return result.sorted(by: {\n        if $0.0 == $1.0 {\n     \
    \       return $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n    })", " \
    \   var result: [(Int, Int)] = []\n    for i in 0..<lst.count {\n        for j\
    \ in 0..<lst[i].count {\n            if lst[i][j] == x {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    return result.sorted(by: {$0.0 < $1.0\
    \ || ($0.0 == $1.0 && $0.1 > $1.1)})", "    var coord = [(Int, Int)]()\n    for(row,\
    \ array) in lst.enumerated() {\n        for(col, element) in array.enumerated()\
    \ {\n            if element == x {\n                coord.append((row, col))\n\
    \            }\n        }\n    }\n    coord.sort {$0.0 < $1.0}\n    coord.sort\
    \ {$0.1 > $1.1}\n    return coord", "    var newLst = [(Int, Int)]()\n    for\
    \ (i, row) in lst.enumerated() {\n        for (j, value) in row.enumerated() {\n\
    \            if x == value {\n                newLst.append((i, j))\n        \
    \    }\n        }\n    }\n    newLst.sort { $0.0 < $1.0 }\n    for i in 0..<newLst.count\
    \ - 1 {\n        if newLst[i].0 == newLst[i + 1].0 {\n            if newLst[i].1\
    \ < newLst[i + 1].1 {\n                let temp = newLst[i]\n                newLst[i]\
    \ = newLst[i + 1]\n                newLst[i + 1] = temp\n            }\n     \
    \   }\n    }\n    return newLst", "    var result: [(Int, Int)] = []\n    for\
    \ (i, e) in lst.enumerated() {\n        for (j, ee) in e.enumerated() {\n    \
    \        if ee == x {\n                result.append((i, j))\n            }\n\
    \        }\n    }\n    let result1 = result.sorted { (e1, e2) -> Bool in\n   \
    \     if e1.0 == e2.0 {\n            return e1.1 > e2.1\n        }\n        return\
    \ e1.0 < e2.0\n    }\n    return result1", "    var res: [(Int, Int)] = []\n \
    \   for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n          \
    \  if lst[i][j] == x {\n                res.append((i, j))\n            }\n  \
    \      }\n    }\n    return res.sorted(by: {a, b in\n        if a.0 == b.0 {\n\
    \            return a.1 > b.1\n        }\n        return a.0 < b.0\n    })", '    return
    []', "    var tuple_lst = [(Int, Int)]()\n    for (row, row_lst) in lst.enumerated()\
    \ {\n        for (col, x_val) in row_lst.enumerated() {\n            if x_val\
    \ == x {\n                tuple_lst.append((row, col))\n            }\n      \
    \  }\n    }\n    return tuple_lst.sorted {\n        if $0.0 == $1.0 {\n      \
    \      return $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n    }", "  \
    \  return lst.enumerated().reduce([]) {\n        var m = $0\n        $1.0.enumerated().forEach\
    \ {\n            if $1.1 == x {\n                m.append(($1.0, $0))\n      \
    \      }\n        }\n        return m\n    }.sorted(by: {\n        if $0.0 ==\
    \ $1.0 {\n            return $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n\
    \    })", "    var to_return: [(Int, Int)] = []\n    var i = 0\n    for row in\
    \ lst {\n        var j = 0\n        for col in row {\n            if (col == x)\
    \ {\n                to_return.append((i, j))\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return to_return", "    var result\
    \ = [(Int, Int)]()\n    for (indexI, i) in lst.enumerated() {\n        for (indexJ,\
    \ j) in i.enumerated() {\n            if j == x {\n                result.append((indexI,\
    \ indexJ))\n            }\n        }\n    }\n    return result.sorted { (a, b)\
    \ -> Bool in\n        if a.0 != b.0 {\n            return a.0 < b.0\n        }\
    \ else {\n            return a.1 > b.1\n        }\n    }", "    var result: [(Int,\
    \ Int)] = []\n    for (i, row) in lst.enumerated() {\n        for (j, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, j))\n        \
    \    }\n        }\n    }\n    return result.sorted { (t1, t2) -> Bool in\n   \
    \     if t1.0 == t2.0 {\n            return t1.1 > t2.1\n        }\n        return\
    \ t1.0 < t2.0\n    }", "  var result: [(Int, Int)] = []\n  for (row, rowData)\
    \ in lst.enumerated() {\n    for (column, columnData) in rowData.enumerated()\
    \ {\n      if columnData == x {\n        result.append((row, column))\n      }\n\
    \    }\n  }\n  return result.sorted { (t1, t2) -> Bool in\n    if t1.0 != t2.0\
    \ {\n      return t1.0 < t2.0\n    } else {\n      return t1.1 > t2.1\n    }\n\
    \  }", "\tvar positionList = [(Int, Int)]()\n\tfor (row, col) in lst.enumerated()\
    \ {\n\t\tfor (index, value) in col.enumerated() {\n\t\t\tif value == x {\n\t\t\
    \t\tpositionList.append((row, index))\n\t\t\t}\n\t\t}\n\t}\n\treturn positionList.sorted(by:\
    \ {$0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1)})", "    var res = [(Int, Int)]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    for (index1, row) in lst.enumerated()\
    \ {\n        for (index2, col) in row.enumerated() {\n            if col == x\
    \ {\n                rows.append(index1)\n                cols.append(index2)\n\
    \            }\n        }\n    }\n    for i in 0..<rows.count {\n        res.append((rows[i],\
    \ cols[i]))\n    }\n    return res", "    var result = [(Int, Int)]()\n    for\
    \ (i, row) in lst.enumerated() {\n        for (j, value) in row.enumerated() {\n\
    \            if value == x {\n                result.append((i, j))\n        \
    \    }\n        }\n    }\n    return result.sorted(by: { (a, b) -> Bool in\n \
    \       if a.0 != b.0 {\n            return a.0 < b.0\n        } else {\n    \
    \        return a.1 > b.1\n        }\n    })", "    return lst.enumerated().reduce([])\
    \ { (result, enumeration) in\n        result + enumeration.element.enumerated().filter\
    \ { $0.element == x }.map { (enumeration.offset, $0.offset) }\n    }.sorted {\
    \ $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1) }", "    let indices = lst.enumerated().map\
    \ { (row, columns) -> [Int] in\n        columns.enumerated().filter { $0.element\
    \ == x }.map { (row, $0.offset) }\n    }.flatMap { $0 }\n    return indices.sorted\
    \ { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1) }", "    var array = [(Int, Int)]()\n\
    \    for (i, element) in lst.enumerated() {\n        let filtered = element.enumerated().filter\
    \ { (index, value) -> Bool in\n            return value == x\n        }\n    \
    \    for (j, _) in filtered {\n            array.append((i, j))\n        }\n \
    \   }\n    return array.sorted(by: { (a, b) -> Bool in\n        if a.0 == b.0\
    \ {\n            return a.1 > b.1\n        }\n        return a.0 < b.0\n    })",
  "    var indexes: [(Int, Int)] = []\n    lst.enumerated().forEach { (idx, subarray)\
    \ in\n        subarray.enumerated().forEach {\n            if $1 == x {\n    \
    \            indexes.append((idx, $0))\n            }\n        }\n    }\n    indexes.sort\
    \ {\n        $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1)\n    }\n    return indexes",
  "    let result = lst.enumerated().flatMap { (index, arr) -> [(Int, Int)] in\n \
    \       arr.enumerated().compactMap { (xIndex, value) -> (Int, Int)? in\n    \
    \        if value == x {\n                return (index, xIndex)\n           \
    \ }\n            return nil\n        }\n    }\n    return result.sorted(by: {\
    \ (t1, t2) -> Bool in\n        if t1.0 == t2.0 {\n            return t1.1 > t2.1\n\
    \        }\n        return t1.0 < t2.0\n    })", "    var result: [(Int, Int)]\
    \ = []\n    for (i, array) in lst.enumerated() {\n        for (j, item) in array.enumerated()\
    \ {\n            if item == x {\n                result.append((i, j))\n     \
    \       }\n        }\n    }\n    return result.sorted(by: { $0.0 < $1.0 })", " \
    \   // your code here\n    return []", "    var arr: [(Int, Int)] = []\n    for\
    \ i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j]\
    \ == x {\n                arr.append((i, j))\n            }\n        }\n    }\n\
    \    arr.sort(by: <)\n    return arr", "  var result = [(Int, Int)]()\n  for (row_index,\
    \ row) in lst.enumerated() {\n    for (column_index, column) in row.enumerated()\
    \ {\n      if column == x {\n        result.append((row_index, column_index))\n\
    \      }\n    }\n  }\n  return result.sorted(by: {\n    if $0.0 != $1.0 {\n  \
    \    return $0.0 < $1.0\n    } else {\n      return $0.1 > $1.1\n    }\n  })",
  "    var result = [(Int, Int)]()\n    for (index, row) in lst.enumerated() {\n \
    \       for (index2, _) in row.enumerated() {\n            if row[index2] == x\
    \ {\n                result.append((index, index2))\n            }\n        }\n\
    \    }\n    return result.sorted{ $0.0 < $1.0 }.sorted{ $0.1 > $1.1 }", "    var\
    \ res: [(Int, Int)] = []\n    for (i, e) in lst.enumerated() {\n        for (j,\
    \ e1) in e.enumerated() {\n            if e1 == x {\n                res.append((i,\
    \ j))\n            }\n        }\n    }\n    res.sort {\n        $0.0 < $1.0 ||\
    \ ($0.0 == $1.0 && $0.1 > $1.1)\n    }\n    return res", "    var res = [(Int,\
    \ Int)]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n\
    \            if lst[i][j] == x {\n                res.append((i, j))\n       \
    \     }\n        }\n    }\n    return res.sorted(by: {$0.0 < $1.0}).sorted(by:\
    \ {$0.1 > $1.1})", "\treturn lst.enumerated().flatMap { (row, rowValues) -> [(Int,\
    \ Int)] in\n\t\treturn rowValues.enumerated().compactMap { (column, value) ->\
    \ (Int, Int)? in\n\t\t\treturn value == x ? (row, column) : nil\n\t\t}.sorted\
    \ { $0.1 > $1.1 }\n\t}.sorted(by: { $0.0 < $1.0 })", "    var array: [(Int, Int)]\
    \ = []\n    var rows: [Int] = []\n    var columns: [Int] = []\n    var counter:\
    \ Int = 0\n    for i in lst{\n        for x in i{\n            if x == x{\n  \
    \              array.append((counter, i.firstIndex(of: x)!))\n            }\n\
    \        }\n        counter += 1\n    }\n    for x in array{\n        rows.append(x.0)\n\
    \    }\n    rows.sort()\n    for x in rows{\n        var counter: Int = 0\n  \
    \      while counter < array.count{\n            if array[counter].0 == x{\n \
    \               columns.append(array[counter].1)\n                array.remove(at:\
    \ counter)\n            }\n            counter += 1\n        }\n        columns.sort()\n\
    \        for z in columns{\n            for y in array{\n                if z\
    \ == y.1{\n                    array.remove(at: array.firstIndex(of: y)!)\n  \
    \              }\n            }\n        }\n        for x in columns{\n      \
    \      array.append((x, rows[rows.firstIndex(of: x)!]))\n        }\n        columns.removeAll()\n\
    \    }\n    return array", "    var result: [(Int, Int)] = []\n    for (idx, arr)\
    \ in lst.enumerated() {\n        for (idx2, element) in arr.enumerated() {\n \
    \           if element == x {\n                result.append((idx, idx2))\n  \
    \          }\n        }\n    }\n    return result.sorted(by: { $0.0 < $1.0 }).sorted(by:\
    \ { $0.1 > $1.1 })", "    // your code here\n    if lst.isEmpty {\n        return\
    \ []\n    }\n    var temp = [[Int]]()\n    var toReturn = [(Int, Int)]()\n   \
    \ for i in 0..<lst.count {\n        temp.append([])\n        for j in 0..<lst[i].count\
    \ {\n            if lst[i][j] == x {\n                temp[i].append(j)\n    \
    \        }\n        }\n    }\n    for i in 0..<temp.count {\n        temp[i].sort(by:\
    \ >)\n    }\n    for i in 0..<temp.count {\n        for j in 0..<temp[i].count\
    \ {\n            toReturn.append((i, temp[i][j]))\n        }\n    }\n    return\
    \ toReturn", "    var ret = [(Int, Int)]()\n    for (i, r) in lst.enumerated()\
    \ {\n        for (j, v) in r.enumerated() {\n            if v == x {\n       \
    \         ret.append((i, j))\n            }\n        }\n    }\n    return ret.sorted\
    \ { (lhs, rhs) -> Bool in\n        if lhs.0 != rhs.0 {\n            return lhs.0\
    \ < rhs.0\n        } else {\n            return lhs.1 > rhs.1\n        }\n   \
    \ }", "    var result = [(Int, Int)]()\n    for i in 0..<lst.count {\n       \
    \ for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n             \
    \   result.append((i, j))\n            }\n        }\n    }\n    result.sort {\n\
    \        if $0.0 == $1.0 {\n            return $0.1 > $1.1\n        }\n      \
    \  return $0.0 < $1.0\n    }\n    return result", "    var lst = lst\n    var\
    \ res = [(Int, Int)]()\n    var row = 0\n    for i in lst {\n        var col =\
    \ 0\n        for j in i {\n            if x == j {\n                res.append((row,\
    \ col))\n            }\n            col += 1\n        }\n        row += 1\n  \
    \  }\n    return res", "    var output = [(Int, Int)]()\n    for y in 0..<lst.count\
    \ {\n        for z in 0..<lst[y].count {\n            if lst[y][z] == x {\n  \
    \              output.append((y, z))\n            }\n        }\n    }\n    output.sort{$0.0\
    \ < $1.0}\n    for i in 0..<output.count {\n        for j in 0..<output.count\
    \ {\n            if output[i].0 == output[j].0 && output[i].1 < output[j].1 {\n\
    \                output.swapAt(i, j)\n            }\n        }\n    }\n    return\
    \ output", "    var result = [(Int, Int)]()\n    for (row, value) in lst.enumerated()\
    \ {\n        for (column, value) in value.enumerated() {\n            if value\
    \ == x {\n                result.append((row, column))\n            }\n      \
    \  }\n    }\n    return result.sorted { (first: (Int, Int), second: (Int, Int))\
    \ -> Bool in\n        if first.0 == second.0 {\n            return first.1 > second.1\n\
    \        }\n        return first.0 < second.0\n    }", "    // get indexes of\
    \ inner arrays\n    var indexes = [(0, 0)]\n    for (index, element) in lst.enumerated()\
    \ {\n        for (index_inner, element_inner) in element.enumerated() {\n    \
    \        if element_inner == x {\n                indexes.append((index, index_inner))\n\
    \            }\n        }\n    }\n    // sort indexes by row and inner\n    indexes.sort\
    \ { (row1, row2) -> Bool in\n        if row1.0 == row2.0 {\n            return\
    \ row1.1 > row2.1\n        }\n        return row1.0 < row2.0\n    }\n    // return\
    \ result\n    return indexes", "    var tmp = [(Int, Int)]()\n    for i in 0..<lst.count\
    \ {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n  \
    \              tmp.append((i, j))\n            }\n        }\n    }\n    return\
    \ tmp.sorted(by: {$0.0 < $1.0}).sorted(by: {$0.1 > $1.1})", "    var res = [(Int,\
    \ Int)]()\n    for i in 0..<lst.count {\n        var j = 0\n        while j <\
    \ lst[i].count {\n            if lst[i][j] == x {\n                res.append((i,\
    \ j))\n            }\n            j += 1\n        }\n    }\n    res.sort {\n \
    \       if $0.0 == $1.0 {\n            return $0.1 > $1.1\n        }\n       \
    \ return $0.0 < $1.0\n    }\n    return res", "    var result: [(Int, Int)] =\
    \ []\n    var coordinate: (Int, Int) = (0, 0)\n    for row in lst {\n        coordinate.0\
    \ = lst.index(of: row)!\n        for item in row {\n            coordinate.1 =\
    \ row.index(of: item)!\n            if item == x {\n                result.append(coordinate)\n\
    \            }\n        }\n    }\n    return result.sorted(by: { $0.0 < $1.0 }).sorted(by:\
    \ { $0.1 > $1.1 })", "    var result: [(Int, Int)] = []\n    for (rowIndex, row)\
    \ in lst.enumerated() {\n        for (colIndex, col) in row.enumerated() {\n \
    \           if col == x {\n                result.append((rowIndex, colIndex))\n\
    \            }\n        }\n    }\n    return result.sorted{\n        if $0.0 !=\
    \ $1.0 {\n            return $0.0 < $1.0\n        } else {\n            return\
    \ $0.1 > $1.1\n        }\n    }", "    // your code here\n    var result: [(Int,\
    \ Int)] = []\n    for i in 0...lst.count-1 {\n        for j in 0...lst[i].count-1\
    \ {\n            if lst[i][j] == x {\n                result.append((i, j))\n\
    \            }\n        }\n    }\n    return result", "    let maxIndex = lst.reduce(0)\
    \ { (result, array) -> Int in\n        max(result, array.count)\n    }\n    var\
    \ result = [(Int, Int)]()\n    var y = 0\n    while y < lst.count {\n        var\
    \ x = 0\n        while x < maxIndex {\n            if x < lst[y].count && lst[y][x]\
    \ == x {\n                result.append((y, x))\n            }\n            x\
    \ += 1\n        }\n        y += 1\n    }\n    return result", "    var res = [(Int,\
    \ Int)]()\n    for (i, sublst) in lst.enumerated() {\n        for (j, y) in sublst.enumerated()\
    \ {\n            if y == x {\n                res.append((i, j))\n           \
    \ }\n        }\n    }\n    return res.sorted { $0.0 < $1.0 }.sorted { $0.1 > $1.1\
    \ }", "    /// Write your code here!\n    return [(0, 0)]", "    var res = [(Int,\
    \ Int)]()\n    for (r, row) in lst.enumerated() {\n        for (c, e) in row.enumerated()\
    \ {\n            if e == x {\n                res.append((r, c))\n           \
    \ }\n        }\n    }\n    res.sort { (t1, t2) -> Bool in\n        if t1.0 ==\
    \ t2.0 {\n            return t1.1 > t2.1\n        }\n        return t1.0 < t2.0\n\
    \    }\n    return res", "  var rowArray: [(Int, Int)] = []\n  for i in 0..<lst.count\
    \ {\n    for j in 0..<lst[i].count {\n      if lst[i][j] == x {\n        rowArray.append((i,\
    \ j))\n      }\n    }\n  }\n  return rowArray.sorted { $0.0 < $1.0 }.sorted {\
    \ $0.1 > $1.1 }", "    /// TODO: check if proper input\n    var row = [(Int, Int)]()\n\
    \    for (i, val) in lst.enumerated() {\n        for (j, value) in val.enumerated()\
    \ {\n            if value == x {\n                row.append((i, j))\n       \
    \     }\n        }\n    }\n    row.sort {\n        if $0.0 == $1.0 {\n       \
    \     return $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n    }\n    return\
    \ row", "    var result: [(Int, Int)] = []\n    for i in 0..<lst.count {\n   \
    \     for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n         \
    \       result.append((i, j))\n            }\n        }\n    }\n    return result.sorted(by:\
    \ { (lhs, rhs) -> Bool in\n        if lhs.0 == rhs.0 {\n            return lhs.1\
    \ > rhs.1\n        }\n        return lhs.0 < rhs.0\n    })", "    var res = [(Int,\
    \ Int)]()\n    for (i, row) in lst.enumerated() {\n        for (j, elem) in row.enumerated()\
    \ {\n            if elem == x {\n                res.append((i, j))\n        \
    \    }\n        }\n    }\n    res.sort { (a, b) -> Bool in\n        if a.0 ==\
    \ b.0 {\n            return a.1 > b.1\n        }\n        return a.0 < b.0\n \
    \   }\n    return res", '    return []', "    var result: [(Int, Int)] = []\n\
    \    for (row, sub) in lst.enumerated() {\n        for (col, elem) in sub.enumerated()\
    \ {\n            if elem == x {\n                result.append((row, col))\n \
    \           }\n        }\n    }\n    return result.sorted(by: { (a, b) -> Bool\
    \ in\n        if a.0 == b.0 {\n            return a.1 > b.1\n        }\n     \
    \   return a.0 < b.0\n    })", '    return lst.enumerated().map { (i, r) in r.enumerated().compactMap
    { (j, e) in e == x ? (i, j) : nil } }.flatMap { $0 }.sorted(by: { ($0.0, -$0.1)
    < ($1.0, -$1.1) })', "    return lst.enumerated().flatMap { (i, xs) in\n     \
    \   xs.enumerated().compactMap { (j, x) in\n            x == x ? (i, j) : nil\n\
    \        }\n    }.sorted { (a, b) in\n        a.0 == b.0 ? a.1 > b.1 : a.0 < b.0\n\
    \    }", "    var coordinates: [(Int, Int)] = []\n    for (index, row) in lst.enumerated()\
    \ {\n        for (index_, item) in row.enumerated() {\n            if item ==\
    \ x {\n                coordinates.append((index, index_))\n            }\n  \
    \      }\n    }\n    return coordinates.sorted(by: { $0.0 < $1.0 }).sorted(by:\
    \ { $0.1 > $1.1 })", "    var ans: [(Int, Int)] = []\n    for index in 0..<lst.count\
    \ {\n        for j in 0..<lst[index].count {\n            if lst[index][j] ==\
    \ x {\n                ans.append((index, j))\n            }\n        }\n    }\n\
    \    return ans.sorted(by: <)", "  var result = [(Int, Int)]()\n  for (i, row)\
    \ in lst.enumerated() {\n    if let j = row.index(of: x) {\n      result.append((i,\
    \ j))\n    }\n  }\n  return result.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.1\
    \ > $1.1 })", "    var result: [(Int, Int)] = []\n    for (row, array) in lst.enumerated()\
    \ {\n        for (column, element) in array.enumerated() {\n            if element\
    \ == x {\n                result.append((row, column))\n            }\n      \
    \  }\n    }\n    return result.sorted(by: {(a, b) in\n        if a.0 < b.0 {\n\
    \            return true\n        } else if a.0 == b.0 {\n            return a.1\
    \ > b.1\n        } else {\n            return false\n        }\n    })", "   \
    \ var result = [(Int, Int)]()\n    for (index, row) in lst.enumerated() {\n  \
    \      for (c_index, item) in row.enumerated() {\n            if item == x {\n\
    \                result.append((index, c_index))\n            }\n        }\n \
    \   }\n    return result.sorted(by: { (a, b) -> Bool in\n        if a.0 != b.0\
    \ {\n            return a.0 < b.0\n        } else {\n            return a.1 >\
    \ b.1\n        }\n    })", "    var newList = [(Int, Int)]()\n    for (index,\
    \ element) in lst.enumerated() {\n        for (index2, element2) in element.enumerated()\
    \ {\n            if (element2 == x) {\n                newList.append((index,\
    \ index2))\n            }\n        }\n    }\n    newList.sort { (element1, element2)\
    \ -> Bool in\n        if (element1.0 < element2.0) {\n            return true\n\
    \        } else if (element1.0 == element2.0) {\n            return element1.1\
    \ > element2.1\n        } else {\n            return false\n        }\n    }\n\
    \    return newList", "    var result: [(Int, Int)] = []\n    for (row, rowLst)\
    \ in lst.enumerated() {\n        for (column, elem) in rowLst.enumerated() {\n\
    \            if elem == x {\n                result.append((row, column))\n  \
    \          }\n        }\n    }\n    return result.sorted(by: {$0.0 < $1.0}).sorted(by:\
    \ {$0.1 > $1.1})", "    var result: [(Int, Int)] = []\n    for (index, value)\
    \ in lst.enumerated() {\n        for (indexOf, valueOf) in value.enumerated()\
    \ {\n            if valueOf == x {\n                result.append((index, indexOf))\n\
    \            }\n        }\n    }\n    return result.sorted(by: {$0.0 < $1.0})",
  "    return lst.enumerated().reduce([(Int, Int)]()) {\n        let r = $0.filter\
    \ { $0.0 == $1.0 }.sorted { $0.1 > $1.1 }\n        return ($1.1.enumerated().filter\
    \ { $0.1 == x }.map { ($1.0, $0.0) } + r).sorted { $0.0 < $1.0 }\n    }", "  \
    \  return lst.enumerated().flatMap { (index: Int, element: [Int]) -> [(Int, Int)]\
    \ in\n        return element.enumerated().filter { $0.element == x }.map { (index,\
    \ $0.offset) }\n    }.sorted(by: { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1)\
    \ })", "    var result = [(Int, Int)]()\n    for (row, col) in zip(lst.indices,\
    \ lst.map({ $0.indices })) {\n        result += col.map { y in\n            return\
    \ (row, y)\n        }.filter { y in\n            return lst[row][y] == x\n   \
    \     }\n    }\n    return result.sorted { (first, second) in\n        if first.0\
    \ == second.0 {\n            return first.1 > second.1\n        }\n        return\
    \ first.0 < second.0\n    }", "    var res = [(Int, Int)]()\n    for (index, val)\
    \ in lst.enumerated() {\n        for (ind, va) in val.enumerated() {\n       \
    \     if va == x {\n                res.append((index, ind))\n            }\n\
    \        }\n    }\n    res.sort(by: {$0.0 > $1.0})\n    res.sort(by: {$0.1 < $1.1})\n\
    \    return res", "  var result = [(Int, Int)]()\n  for (i, array) in lst.enumerated()\
    \ {\n    for (j, num) in array.enumerated() {\n      if num == x {\n        result.append((i,\
    \ j))\n      }\n    }\n  }\n  return result.sorted(by: { $0.0 < $1.0 })", "  \
    \  var array = [(Int, Int)]()\n    for row in 0..<lst.count {\n        for column\
    \ in 0..<lst[row].count {\n            if lst[row][column] == x {\n          \
    \      array.append((row, column))\n            }\n        }\n    }\n    return\
    \ array.sorted { (first, second) -> Bool in\n        if first.0 == second.0 {\n\
    \            return first.1 > second.1\n        }\n        return first.0 < second.0\n\
    \    }", "    var result: [(Int, Int)] = []\n    for row in 0..<lst.count {\n\
    \        for column in 0..<lst[row].count {\n            if lst[row][column] ==\
    \ x {\n                result.append((row, column))\n            }\n        }\n\
    \    }\n    //sort(by: >) - descending order\n    //sort(by: <) - ascending order\n\
    \    result.sort { (tuple1, tuple2) -> Bool in\n        if tuple1.0 == tuple2.0\
    \ {\n            return tuple1.1 > tuple2.1\n        } else {\n            return\
    \ tuple1.0 < tuple2.0\n        }\n    }\n    return result", "    var tuples =\
    \ [(Int, Int)]()\n    var rows = [(row: Int, col: Int)]()\n    var cols = [(row:\
    \ Int, col: Int)]()\n    for (row, lst) in lst.enumerated() {\n        for (col,\
    \ x) in lst.enumerated() {\n            if x == x {\n                rows.append((row:\
    \ row, col: col))\n            }\n        }\n    }\n    rows.sort{$0.row < $1.row}\n\
    \    for (row, lst) in rows.enumerated() {\n        cols.append((row: lst.row,\
    \ col: lst.col))\n    }\n    cols.sort{$0.col > $1.col}\n    for (row, lst) in\
    \ cols.enumerated() {\n        tuples.append((lst.row, lst.col))\n    }\n    return\
    \ tuples", "  var res: [(Int, Int)] = []\n  for i in 0..<lst.count {\n    for\
    \ j in 0..<lst[i].count {\n      if lst[i][j] == x {\n        res.append((i, j))\n\
    \      }\n    }\n  }\n  return res.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.1\
    \ > $1.1 })", "    var result: [(Int, Int)] = []\n    for (i, row) in lst.enumerated()\
    \ {\n        for (j, elem) in row.enumerated() {\n            if elem == x {\n\
    \                result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result.sorted { (a, b) -> Bool in\n        if a.0 == b.0 {\n            return\
    \ a.1 > b.1\n        }\n        return a.0 < b.0\n    }", "    var ans: [(Int,\
    \ Int)] = []\n    for (rowIndex, row) in lst.enumerated() {\n        for (colIndex,\
    \ col) in row.enumerated() {\n            if col == x {\n                ans.append((rowIndex,\
    \ colIndex))\n            }\n        }\n    }\n    return ans.sorted(by: { (first,\
    \ second) -> Bool in\n        if first.0 < second.0 {\n            return true\n\
    \        } else if first.0 == second.0 {\n            return first.1 > second.1\n\
    \        } else {\n            return false\n        }\n    })", "    var lst\
    \ = lst.map { $0.enumerated().filter { $0.element == x }.map { ($0.offset, $1)\
    \ } }\n    lst.removeAll { $0.isEmpty }\n    lst.sort { $0[0].0 < $1[0].0 }\n\
    \    return lst.map { $0.sorted { $0.0 > $1.0 } }.flatMap { $0 }", "    return\
    \ lst.reduce([(Int, Int)]()) { (result, row, index) -> [(Int, Int)] in\n     \
    \   var rowResult = row.enumerated().reduce([(Int, Int)]()) { (result, item) ->\
    \ [(Int, Int)] in\n            if item.element == x {\n                return\
    \ result + [(index, item.offset)]\n            }\n            return result\n\
    \        }\n        return result + rowResult\n    }.sorted(by: { (f, s) -> Bool\
    \ in\n        return f.0 < s.0\n    }).sorted(by: { (f, s) -> Bool in\n      \
    \  return f.1 > s.1\n    })", "    var result: [(Int, Int)] = []\n    for (index1,\
    \ arr) in lst.enumerated() {\n        for (index2, item) in arr.enumerated() {\n\
    \            if item == x {\n                result.append((index1, index2))\n\
    \            }\n        }\n    }\n    return result.sorted { (t1, t2) -> Bool\
    \ in\n        if t1.0 == t2.0 {\n            return t1.1 > t2.1\n        }\n \
    \       return t1.0 < t2.0\n    }", "    return lst.enumerated().flatMap { (r,\
    \ row) in\n        row.enumerated().compactMap { (c, col) in\n            col\
    \ == x ? (r, c) : nil\n        }\n    }.sorted { $0.0 < $1.0 }.sorted { $0.1 >\
    \ $1.1 }", '    return []', "    var result = [(Int, Int)]()\n    for i in 0..<lst.count\
    \ {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n  \
    \              result.append((i, j))\n            }\n        }\n    }\n    result.sort\
    \ {\n        if $0.0 != $1.0 {\n            return $0.0 < $1.0\n        } else\
    \ {\n            return $0.1 > $1.1\n        }\n    }\n    return result", " \
    \   return lst.enumerated().reduce([]) {\n        acc, elem in\n        let (index,\
    \ row) = elem\n        return acc + row.enumerated().filter { $0.element == x\
    \ }.map { (index, $0.offset) }\n    }.sorted {\n        if $0.0 == $1.0 {\n  \
    \          return $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n    }",
  "    var result: [(Int, Int)] = []\n    var rowCount = 0\n    var colCount = 0\n\
    \    lst.forEach { (row) in\n        colCount = 0\n        row.forEach({ (value)\
    \ in\n            if value == x {\n                result.append((rowCount, colCount))\n\
    \            }\n            colCount += 1\n        })\n        rowCount += 1\n\
    \    }\n    return result.sorted(by: {$0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1)})",
  "    let results = lst.enumerated().reduce([], { partial, next in\n        let (index,\
    \ value) = next\n        return partial + value.enumerated().reduce([], { result,\
    \ next in\n            let (index, value) = next\n            return value ==\
    \ x ? result + [(index, index)] : result\n        })\n    })\n    return results.sorted(by:\
    \ { first, second in\n        return first.0 < second.0 || (first.0 == second.0\
    \ && first.1 > second.1)\n    })", "\tvar result = [(Int, Int)]()\n\tfor (indexRow,\
    \ row) in lst.enumerated() {\n\t\tfor (indexColumn, value) in row.enumerated()\
    \ {\n\t\t\tif value == x {\n\t\t\t\tresult.append((indexRow, indexColumn))\n\t\
    \t\t}\n\t\t}\n\t}\n\tresult.sort{ (tuple1, tuple2) -> Bool in\n\t\tlet order:\
    \ Bool\n\t\tif tuple1.0 == tuple2.0 {\n\t\t\torder = tuple1.1 > tuple2.1\n\t\t\
    } else {\n\t\t\torder = tuple1.0 < tuple2.0\n\t\t}\n\t\treturn order\n\t}\n\t\
    return result", "    var result = [(Int, Int)]()\n    for (i, row) in lst.enumerated()\
    \ {\n        for (j, item) in row.enumerated() {\n            if item == x {\n\
    \                result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result.sorted(by: <)", "    var res: [(Int, Int)] = []\n    for i in 0..<lst.count\
    \ {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n  \
    \              res.append((i, j))\n            }\n        }\n    }\n    res.sort{\
    \ if $0.0 == $1.0 { return $0.1 > $1.1 }\n        return $0.0 < $1.0 }\n    return\
    \ res", "    var index: [(Int, Int)] = []\n    for a in 0..<lst.count {\n    \
    \    for b in 0..<lst[a].count {\n            if lst[a][b] == x {\n          \
    \      index.append((a, b))\n            }\n        }\n    }\n    return index.sorted\
    \ { ($0.0, -$0.1) < ($1.0, -$1.1) }", "    var result: [(Int, Int)] = []\n   \
    \ for (i, row) in lst.enumerated() {\n        for (j, col) in row.enumerated()\
    \ {\n            if col == x {\n                result.append((i, j))\n      \
    \      }\n        }\n    }\n    result.sort(by: { (e1, e2) -> Bool in\n      \
    \  if e1.0 < e2.0 {\n            return true\n        } else if e1.0 == e2.0 {\n\
    \            return e1.1 > e2.1\n        } else {\n            return false\n\
    \        }\n    })\n    return result", '    return [(Int, Int)]()', "    var\
    \ indexes: [(Int, Int)] = []\n    for (i, row) in lst.enumerated() {\n       \
    \ indexes += row.enumerated().filter { $0.element == x }.map { (i, $0.offset)\
    \ }\n    }\n    return indexes.sorted { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 >\
    \ $1.1) }", "    var res = [(Int, Int)]()\n    for (i, row) in lst.enumerated()\
    \ {\n        for (j, v) in row.enumerated() {\n            if v == x {\n     \
    \           res.append((i, j))\n            }\n        }\n    }\n    return res.sorted\
    \ { (v1, v2) -> Bool in\n        if v1.0 == v2.0 {\n            return v1.1 >\
    \ v2.1\n        }\n        return v1.0 < v2.0\n    }", "    return lst.enumerated().flatMap\
    \ { (offset: Int, element: [Int]) -> [(Int, Int)] in\n        return element.enumerated().filter\
    \ { (offset2: Int, element2: Int) -> Bool in\n            return element2 == x\n\
    \        }.map { (offset2: Int, element2: Int) -> (Int, Int) in\n            return\
    \ (offset, offset2)\n        }\n    }.sorted(by: { (arg0: (Int, Int), arg1: (Int,\
    \ Int)) -> Bool in\n        return arg0.0 < arg1.0\n    }).sorted(by: { (arg0:\
    \ (Int, Int), arg1: (Int, Int)) -> Bool in\n        return arg0.1 > arg1.1\n \
    \   })", "    let result = lst.enumerated().reduce([], { (result, cur) -> [(Int,\
    \ Int)] in\n        let (index, row) = cur\n        var new_result = result\n\
    \        new_result.append(contentsOf: row.enumerated().reduce([], { (result,\
    \ cur) -> [(Int, Int)] in\n            let (index, item) = cur\n            var\
    \ new_result = result\n            if item == x {\n                new_result.append((index,\
    \ index))\n            }\n            return new_result\n        }).map({ (index,\
    \ item) -> (Int, Int) in\n            return (index, item)\n        }))\n    \
    \    return new_result\n    })\n    return result", "    var tupArray = [(Int,\
    \ Int)]()\n    var tup = (0, 0)\n    var row = 0\n    var col = 0\n    for i in\
    \ lst {\n        for n in i {\n            if n == x {\n                tup =\
    \ (row, col)\n                tupArray.append(tup)\n            }\n          \
    \  col += 1\n        }\n        row += 1\n        col = 0\n    }\n    return tupArray.sorted(by:\
    \ <)", "    var result: [(Int, Int)] = []\n    for (index, array) in lst.enumerated()\
    \ {\n        for (i, element) in array.enumerated() {\n            if element\
    \ == x {\n                result.append((index, i))\n            }\n        }\n\
    \    }\n    return result.sorted(by: { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 >\
    \ $1.1) })", "    // Write your solution here\n    let p = lst.enumerated().flatMap\
    \ { (i, row) -> [(Int, Int)] in\n        return row.enumerated().filter { (j,\
    \ v) -> Bool in\n            return v == x\n        }.map { (j, v) -> (Int, Int)\
    \ in\n            return (i, j)\n        }\n    }\n    return p.sorted { (lhs,\
    \ rhs) -> Bool in\n        return lhs.0 < rhs.0 || (lhs.0 == rhs.0 && lhs.1 >\
    \ rhs.1)\n    }", "    var results = [(Int, Int)]()\n    for (y, row) in lst.enumerated()\
    \ {\n        for (x, col) in row.enumerated() {\n            if col == x {\n \
    \               results.append((y, x))\n            }\n        }\n    }\n    return\
    \ results.sorted{ $0.0 < $1.0 || $0.0 == $1.0 && $0.1 > $1.1 }", "    let len\
    \ = lst.count;\n    var points = [(Int, Int)]();\n    for i in 0 ..< len {\n \
    \       let s = lst[i];\n        let slen = s.count;\n        for j in 0 ..< slen\
    \ {\n            if s[j] == x {\n                points.append((i, j));\n    \
    \        }\n        }\n    }\n    points.sort { (p1, p2) -> Bool in\n        if\
    \ p1.0 != p2.0 {\n            return p1.0 < p2.0;\n        } else {\n        \
    \    return p1.1 > p2.1;\n        }\n    }\n    return points;", "    return lst.enumerated().reduce([])\
    \ { (acc, pair) in\n        let row = pair.offset\n        let columns = pair.element.enumerated().filter\
    \ { $0.element == x }.map { $0.offset }\n        return acc + columns.map { (row,\
    \ $0) }\n    }.sorted { (t1, t2) in\n        if t1.0 != t2.0 {\n            return\
    \ t1.0 < t2.0\n        } else {\n            return t1.1 > t2.1\n        }\n \
    \   }", "  var lst = lst\n  for (i, v) in lst.enumerated() {\n    lst[i] = v.enumerated().filter({\
    \ $0.element == x }).map({ (i, $0.offset) })\n  }\n  lst = lst.filter({ !$0.isEmpty\
    \ })\n  lst.sort(by: { $0[0].0 < $1[0].0 })\n  for (i, v) in lst.enumerated()\
    \ {\n    lst[i] = v.sorted(by: { $0.1 > $1.1 })\n  }\n  return lst.flatMap({ $0\
    \ })", "    if lst.isEmpty {\n        return []\n    }\n    var res: [(Int, Int)]\
    \ = []\n    for (i, sub) in lst.enumerated() {\n        for (j, val) in sub.enumerated()\
    \ {\n            if val == x {\n                res.append((i, j))\n         \
    \   }\n        }\n    }\n    return res.sorted {\n        if $0.0 == $1.0 {\n\
    \            return $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n    }",
  "    var result: [(Int, Int)] = []\n    for i in 0..<lst.count {\n        for j\
    \ in 0..<lst[i].count {\n            if lst[i][j] == x {\n                result.append((i,\
    \ j))\n            }\n        }\n    }\n    return result.sorted(by: { (tuple1,\
    \ tuple2) -> Bool in\n        tuple1.0 < tuple2.0\n    }).sorted(by: { (tuple1,\
    \ tuple2) -> Bool in\n        tuple1.1 > tuple2.1\n    })", "    var result =\
    \ [(Int, Int)]()\n    for (index, row) in lst.enumerated() {\n        for (index2,\
    \ col) in row.enumerated() {\n            if col == x {\n                result.append((index,\
    \ index2))\n            }\n        }\n    }\n    return result.sorted(by: <)",
  "    var array: [(Int, Int)] = []\n    for (index, value) in lst.enumerated() {\n\
    \        if let index2 = value.firstIndex(of: x) {\n            array.append((index,\
    \ index2))\n        }\n    }\n    return array.sorted(by: { $0.0 < $1.0 }).sorted(by:\
    \ { $0.1 > $1.1 })", "    return lst.enumerated().flatMap {\n        return $0.element.enumerated().filter\
    \ {\n            return $0.element == x\n        }.map {\n            return ($0.offset,\
    \ $1.offset)\n        }\n    }.sorted {\n        return $0.0 == $1.0 ? $0.1 >\
    \ $1.1 : $0.0 < $1.0\n    }", "    let answer = lst.enumerated().flatMap { element\
    \ -> [(Int, Int)] in\n        let row = element.offset\n        return element.element.enumerated().compactMap\
    \ {\n            $0.element == x ? (row, $0.offset) : nil\n        }\n    }\n\
    \    return answer.sorted(by: { $0.0 == $1.0 ? $0.1 > $1.1 : $0.0 < $1.0 })",
  "    var result: [(Int, Int)] = []\n    for (i, row) in lst.enumerated() {\n   \
    \     for (j, value) in row.enumerated() {\n            if value == x {\n    \
    \            result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result.sorted(by: {\n        if $0.0 == $1.0 {\n            return $0.1 > $1.1\n\
    \        }\n        return $0.0 < $1.0\n    })", "    var elements = [(Int, Int)]()\n\
    \    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n         \
    \   if lst[i][j] == x {\n                elements.append((i, j))\n           \
    \ }\n        }\n    }\n    elements.sort {\n        $0.0 < $1.0\n    }\n    for\
    \ i in 0..<elements.count {\n        for j in 0..<elements.count {\n         \
    \   if elements[i].0 == elements[j].0 && elements[i].1 < elements[j].1 {\n   \
    \             let temp = elements[i]\n                elements[i] = elements[j]\n\
    \                elements[j] = temp\n            }\n        }\n    }\n    return\
    \ elements", "    var result = [(Int, Int)]()\n    var row = 0\n    var col =\
    \ 0\n    for subArr in lst {\n        col = 0\n        for num in subArr {\n \
    \           if num == x {\n                result.append((row, col))\n       \
    \     }\n            col += 1\n        }\n        row += 1\n    }\n    return\
    \ result.sorted(by: { (row1, row2) -> Bool in\n        if row1.0 != row2.0 {\n\
    \            return row1.0 < row2.0\n        } else {\n            return row1.1\
    \ > row2.1\n        }\n    })", "    // your code here\n    return []", "    var\
    \ res: [(Int, Int)] = []\n    for (i, row) in lst.enumerated() {\n        for\
    \ (j, val) in row.enumerated() {\n            if val == x {\n                res.append((i,\
    \ j))\n            }\n        }\n    }\n    return res.sorted(by: { (p1, p2) ->\
    \ Bool in\n        if p1.0 == p2.0 {\n            return p1.1 > p2.1\n       \
    \ }\n        return p1.0 < p2.0\n    })", "    if lst.isEmpty {\n        return\
    \ []\n    }\n\n    var ret: [(Int, Int)] = []\n    for (i, arr) in lst.enumerated()\
    \ {\n        for (j, n) in arr.enumerated() {\n            if n == x {\n     \
    \           ret.append((i, j))\n            }\n        }\n    }\n\n    return\
    \ ret.sorted(by: {\n        if $0.0 == $1.0 {\n            return $0.1 > $1.1\n\
    \        }\n        return $0.0 < $1.0\n    })", "  /// Your code goes here\n\
    \  let ys = lst.enumerated().flatMap { (i, v) -> [(Int, Int)] in\n    return v.enumerated().compactMap\
    \ { (j, k) -> (Int, Int)? in\n      if k == x {\n        return (i, j)\n     \
    \ }\n      return nil\n    }\n  }\n  return ys.sorted { $0.0 < $1.0 }.sorted {\
    \ $0.1 > $1.1 }", "    var arry = [(Int, Int)]()\n    for (y, item) in lst.enumerated()\
    \ {\n        for (x, num) in item.enumerated() {\n            if num == x {\n\
    \                arry.append((y, x))\n            }\n        }\n    }\n    return\
    \ arry.sorted { (first, second) -> Bool in\n        if first.0 == second.0 {\n\
    \            return first.1 > second.1\n        }\n        return first.0 < second.0\n\
    \    }", "    var res: [(Int, Int)] = []\n    for (i, arr) in lst.enumerated()\
    \ {\n        for (j, val) in arr.enumerated() {\n            if val == x {\n \
    \               res.append((i, j))\n            }\n        }\n    }\n    return\
    \ res.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.1 > $1.1 })", "    var result:\
    \ [(Int, Int)] = []\n    lst.enumerated().forEach { (row, item) in\n        item.enumerated().forEach\
    \ { (column, number) in\n            if number == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    return result.sorted(by: { (arg0,\
    \ arg1) -> Bool in\n        if arg0.0 == arg1.0 {\n            return arg0.1 >\
    \ arg1.1\n        }\n        return arg0.0 < arg1.0\n    })", "    var lst = lst\n\
    \    let res = lst.enumerated().reduce([], { (acc, data) -> [(Int, Int)] in\n\
    \        let (index, array) = data\n        var array = array\n        let res\
    \ = array.enumerated().reduce([], { (acc, data) -> [(Int, Int)] in\n         \
    \   let (index, element) = data\n            if element == x {\n             \
    \   return acc + [(index, index)]\n            }\n            return acc\n   \
    \     })\n        if res.count > 0 {\n            return acc + res\n        }\n\
    \        return acc\n    })\n    return res", "    var arr: [(Int, Int)] = []\n\
    \    for (i, row) in lst.enumerated() {\n        for (j, elem) in row.enumerated()\
    \ {\n            if elem == x {\n                arr.append((i, j))\n        \
    \    }\n        }\n    }\n    return arr.sorted(by: { (a, b) -> Bool in\n    \
    \    if a.0 == b.0 {\n            return a.1 > b.1\n        }\n        return\
    \ a.0 < b.0\n    })", "    var res: [(Int, Int)] = []\n    for row in 0..<lst.count\
    \ {\n        for col in 0..<lst[row].count {\n            if lst[row][col] ==\
    \ x {\n                res.append((row, col))\n            }\n        }\n    }\n\
    \    return res.sorted(by: { (arg0, arg1) -> Bool in\n        if arg0.0 == arg1.0\
    \ {\n            return arg0.1 > arg1.1\n        }\n        return arg0.0 < arg1.0\n\
    \    })", "    var result = [(Int, Int)]()\n    var index1 = 0\n    var index2\
    \ = 0\n    var sorted_row = [(Int, Int)]()\n    for array in lst {\n        for\
    \ element in array {\n            if element == x {\n                result.append((index1,\
    \ index2))\n            }\n            index2 += 1\n        }\n        index2\
    \ = 0\n        index1 += 1\n    }\n    sorted_row = result.sorted(by: { $0.0 <\
    \ $1.0})\n    for i in 0..<sorted_row.count {\n        for j in i+1..<sorted_row.count\
    \ {\n            if sorted_row[i].0 == sorted_row[j].0 {\n                if sorted_row[i].1\
    \ < sorted_row[j].1 {\n                    sorted_row.swapAt(i, j)\n         \
    \       }\n            }\n        }\n    }\n    return sorted_row", '    return
    lst.enumerated().map { $0.1.enumerated().filter { $0.1 == x }.map { ($0.0, $1.0)
    } }.reduce([], +).sorted { $0.0 < $1.0 }.sorted { $0.1 > $1.1 }', "    return\
    \ lst.enumerated().flatMap {\n        (offset, array) -> [(Int, Int)] in\n   \
    \     return array.enumerated().filter({\n            (index, value) -> Bool in\n\
    \            return value == x\n        }).map {\n            (index, value) ->\
    \ (Int, Int) in\n            return (offset, index)\n        }\n    }.sorted {\n\
    \        (left, right) -> Bool in\n        if left.0 == right.0 {\n          \
    \  return left.1 > right.1\n        }\n        return left.0 < right.0\n    }",
  "    if lst.isEmpty {\n        return []\n    }\n    var result: [(Int, Int)] =\
    \ []\n    for (row, col) in lst.enumerated() {\n        for (column, element)\
    \ in col.enumerated() {\n            if element == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    return result.sorted(by: {\n\
    \        if $0.0 != $1.0 {\n            return $0.0 < $1.0\n        } else {\n\
    \            return $0.1 > $1.1\n        }\n    })", "    var result: [(Int, Int)]\
    \ = []\n    for (i, row) in lst.enumerated() {\n        for (j, value) in row.enumerated()\
    \ {\n            if value == x {\n                result.append((i, j))\n    \
    \        }\n        }\n    }\n    return result.sorted { (p1, p2) -> Bool in\n\
    \        if p1.0 == p2.0 {\n            return p1.1 > p2.1\n        }\n      \
    \  return p1.0 < p2.0\n    }", "  var coordinates: [(Int, Int)] = []\n  for i\
    \ in 0..<lst.count {\n    for j in 0..<lst[i].count {\n      if lst[i][j] == x\
    \ {\n        coordinates.append((i, j))\n      }\n    }\n  }\n  coordinates.sort(by:\
    \ {\n    if $0.0 == $1.0 {\n      return $0.1 > $1.1\n    }\n    return $0.0 <\
    \ $1.0\n  })\n  return coordinates", "    let arr = lst.map {\n        (subArr)\
    \ -> [(Int, Int)] in\n        subArr.enumerated().map({\n            (index, elem)\
    \ -> (Int, Int) in\n            if elem == x {\n                return (subArr.count,\
    \ index)\n            }\n            return (0, 0)\n        }).filter({$0 != (0,\
    \ 0)})\n    }.filter({$0.count > 0})\n    \n    var newArr = arr.reduce([], +)\n\
    \    newArr.sort { (a, b) -> Bool in\n        if a.0 == b.0 {\n            return\
    \ a.1 > b.1\n        }\n        return a.0 < b.0\n    }\n    return newArr", " \
    \   var t = [(Int, Int)]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count\
    \ {\n            if lst[i][j] == x {\n                t.append((i, j))\n     \
    \       }\n        }\n    }\n    return t.sorted(by: { ($0.0, -$0.1) < ($1.0,\
    \ -$1.1) })", "    var coordinates: [(Int, Int)] = []\n    for (index, element)\
    \ in lst.enumerated() {\n        for (i, e) in element.enumerated() {\n      \
    \      if e == x {\n                coordinates.append((index, i))\n         \
    \   }\n        }\n    }\n    coordinates.sort { $0.0 < $1.0 }\n    return coordinates",
  "    var result: [(Int, Int)] = []\n    var index = 0\n    for subLst in lst {\n\
    \        var subIndex = 0\n        for item in subLst {\n            if item ==\
    \ x {\n                result.append((index, subIndex))\n            }\n     \
    \       subIndex += 1\n        }\n        index += 1\n    }\n    return result.sorted\
    \ {\n        if $0.0 < $1.0 {\n            return true\n        } else if $0.0\
    \ == $1.0 {\n            return $0.1 > $1.1\n        } else {\n            return\
    \ false\n        }\n    }", "    var ret = [(Int, Int)]()\n    var i = 0\n   \
    \ for row in lst {\n        var j = 0\n        for c in row {\n            if\
    \ c == x {\n                ret.append((i, j))\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return ret.sorted{ $0.0 < $1.0 }.sorted{\
    \ $0.1 > $1.1 }", "    var result: [(Int, Int)] = []\n    for i in 0..<lst.count\
    \ {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n  \
    \              result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result.sorted(by: { ($0.0, -$0.1) < ($1.0, -$1.1) })", "    var re: [(Int, Int)]\
    \ = []\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n  \
    \          if lst[i][j] == x {\n                re.append((i, j))\n          \
    \  }\n        }\n    }\n    for i in 0..<re.count - 1 {\n        for j in 0..<re.count\
    \ - i - 1 {\n            if re[j].0 > re[j + 1].0 {\n                let temp\
    \ = re[j]\n                re[j] = re[j + 1]\n                re[j + 1] = temp\n\
    \            }\n        }\n    }\n    for i in 0..<re.count - 1 {\n        for\
    \ j in 0..<re.count - i - 1 {\n            if re[j].0 == re[j + 1].0 {\n     \
    \           if re[j].1 < re[j + 1].1 {\n                    let temp = re[j]\n\
    \                    re[j] = re[j + 1]\n                    re[j + 1] = temp\n\
    \                }\n            }\n        }\n    }\n    return re", "    var\
    \ result: [(Int, Int)] = []\n    for (i, array) in lst.enumerated() {\n      \
    \  for (j, value) in array.enumerated() {\n            if x == value {\n     \
    \           result.append((i, j))\n            }\n        }\n    }\n    return\
    \ result.sorted(by: {\n        if $0.0 != $1.0 {\n            return $0.0 < $1.0\n\
    \        } else {\n            return $0.1 > $1.1\n        }\n    })", "    var\
    \ result: [(Int, Int)] = []\n    for row in 0..<lst.count {\n        for col in\
    \ 0..<lst[row].count {\n            if lst[row][col] == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    return result.sorted { (left, right)\
    \ -> Bool in\n        if left.0 < right.0 {\n            return true\n       \
    \ } else if left.0 == right.0 {\n            return left.1 > right.1\n       \
    \ } else {\n            return false\n        }\n    }", "    var res: [(Int,\
    \ Int)] = []\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count\
    \ {\n            if lst[i][j] == x {\n                res.append((i, j))\n   \
    \         }\n        }\n    }\n    return res.sorted(by: { (a: (Int, Int), b:\
    \ (Int, Int)) -> Bool in\n        if a.0 == b.0 {\n            return a.1 > b.1\n\
    \        }\n        return a.0 < b.0\n    })", "  var res: [(Int, Int)] = []\n\
    \  for (i, j) in lst.enumerated() {\n    for (k, v) in j.enumerated() {\n    \
    \  if v == x {\n        res.append((i, k))\n      }\n    }\n  }\n  return res.sorted\
    \ {\n    if $0.0 != $1.0 {\n      return $0.0 < $1.0\n    } else {\n      return\
    \ $0.1 > $1.1\n    }\n  }", "    var res: [(Int, Int)] = []\n    for (row, e)\
    \ in lst.enumerated() {\n        if let c = e.firstIndex(of: x) {\n          \
    \  res.append((row, c))\n        }\n    }\n    return res.sorted(by: { (a, b)\
    \ -> Bool in\n        if a.0 == b.0 {\n            return a.1 > b.1\n        }\n\
    \        return a.0 < b.0\n    })", "\tif (lst.count == 0) {\n\t\treturn []\n\t\
    }\n\tvar coords = [(Int, Int)]()\n\tfor (index, row) in lst.enumerated() {\n\t\
    \tfor (index2, val) in row.enumerated() {\n\t\t\tif (val == x) {\n\t\t\t\tcoords.append((index,\
    \ index2))\n\t\t\t}\n\t\t}\n\t}\n\tcoords.sort()\n\treturn coords", "    var result\
    \ = [(Int, Int)]()\n    var i = 0\n    for arr in lst {\n        var j = 0\n \
    \       for number in arr {\n            if number == x {\n                result.append((i,\
    \ j))\n            }\n            j = j + 1\n        }\n        i = i + 1\n  \
    \  }\n    return result.sorted {\n        if $0.0 == $1.0 {\n            return\
    \ $0.1 > $1.1\n        }\n        return $0.0 < $1.0\n    }", "    var tuple:\
    \ [(Int, Int)] = []\n    var rows = lst.count\n    var columns = lst[0].count\n\
    \    var c = 0\n    for i in 0..<rows {\n        for j in 0..<columns {\n    \
    \        if lst[i][j] == x {\n                tuple.append((i, j))\n         \
    \   }\n        }\n    }\n    return tuple", '  return []', "    var row = [(Int,\
    \ Int)]()\n    for (r, array) in lst.enumerated() {\n        for (c, item) in\
    \ array.enumerated() {\n            if item == x {\n                row.append((r,\
    \ c))\n            }\n        }\n    }\n    return row.sorted(by: { $0.0 < $1.0\
    \ || $0.0 == $1.0 && $0.1 > $1.1 })", "    var result: [(Int, Int)] = []\n   \
    \ for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if\
    \ lst[i][j] == x {\n                result.append((i, j))\n            }\n   \
    \     }\n    }\n    return result.sorted {$0.0 < $1.0}.sorted {$0.1 > $1.1}",
  '    return []', "    if lst.isEmpty {\n        return []\n    }\n    var res =\
    \ [(Int, Int)]()\n    for i in 0..<lst.count {\n        if lst[i].contains(x)\
    \ {\n            let indexes = lst[i].indices.filter({ lst[i][$0] == x })\n  \
    \          let tuples = indexes.map({ (i, $0) })\n            res.append(contentsOf:\
    \ tuples)\n        }\n    }\n    res.sort { (first, second) -> Bool in\n     \
    \   if first.0 == second.0 {\n            return first.1 > second.1\n        }\n\
    \        return first.0 < second.0\n    }\n    return res", "    var result: [(Int,\
    \ Int)] = []\n    var i = 0\n    for row in lst {\n        var j = 0\n       \
    \ for col in row {\n            if col == x {\n                result.append((i,\
    \ j))\n            }\n            j += 1\n        }\n        i += 1\n    }\n \
    \   return result.sorted { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1) }", " \
    \   var arrayOfTuples = [(Int, Int)]()\n    for (rowNumber, row) in lst.enumerated()\
    \ {\n        for (columnNumber, number) in row.enumerated() {\n            if\
    \ number == x {\n                arrayOfTuples.append((rowNumber, columnNumber))\n\
    \            }\n        }\n    }\n    return arrayOfTuples.sorted {\n        if\
    \ $0.0 != $1.0 {\n            return $0.0 < $1.0\n        } else {\n         \
    \   return $0.1 > $1.1\n        }\n    }", "    var locations: [(Int, Int)] =\
    \ []\n    var i = 0\n    var j = 0\n    for row in lst {\n        for item in\
    \ row {\n            if item == x {\n                locations.append((i, j))\n\
    \            }\n            j += 1\n        }\n        j = 0\n        i += 1\n\
    \    }\n    return locations.sorted(by: {a, b in\n        if a.0 == b.0 {\n  \
    \          return a.1 > b.1\n        }\n        return a.0 < b.0\n    })", " \
    \   var new_lst: [(Int, Int)] = []\n    var y: Int = 0\n    for i in lst {\n \
    \       var y_x: Int = 0\n        for j in i {\n            if j == x {\n    \
    \            new_lst.append((y, y_x))\n            }\n            y_x += 1\n \
    \       }\n        y += 1\n    }\n    new_lst.sort { (a, b) -> Bool in\n     \
    \   if a.0 == b.0 {\n            return a.1 > b.1\n        }\n        return a.0\
    \ < b.0\n    }\n    return new_lst", "    var result: [(Int, Int)] = []\n    var\
    \ row: Int = 0\n    for row_items in lst {\n        for (index, item) in row_items.enumerated()\
    \ {\n            if (item == x) {\n                result.append((row, index))\n\
    \            }\n        }\n        row += 1\n    }\n    // result.sort(by: { lhs,\
    \ rhs in\n    //     if (lhs.0 < rhs.0) {\n    //         return true\n    //\
    \     } else if (lhs.0 == rhs.0) {\n    //         return lhs.1 > rhs.1\n    //\
    \     } else {\n    //         return false\n    //     }\n    // })\n    result.sort\
    \ { lhs, rhs in\n        if (lhs.0 < rhs.0) {\n            return true\n     \
    \   } else if (lhs.0 == rhs.0) {\n            return lhs.1 > rhs.1\n        }\
    \ else {\n            return false\n        }\n    }\n    return result", "  \
    \  var result: [(Int, Int)] = []\n    for (idx, row) in lst.enumerated() {\n \
    \       if let xIdx = row.firstIndex(of: x) {\n            result.append((idx,\
    \ xIdx))\n        }\n    }\n    return result.sorted(by: { $0.0 < $1.0 }).sorted(by:\
    \ { $0.1 > $1.1 })", "    var result = [(Int, Int)]()\n    for (index, value)\
    \ in lst.enumerated() {\n        for (innerIndex, innerValue) in value.enumerated()\
    \ {\n            if innerValue == x {\n                result.append((index, innerIndex))\n\
    \            }\n        }\n    }\n    return result.sorted(by: { (first, second)\
    \ -> Bool in\n        if first.0 < second.0 {\n            return true\n     \
    \   } else if first.0 == second.0 {\n            return first.1 > second.1\n \
    \       } else {\n            return false\n        }\n    })", "    var out =\
    \ [(Int, Int)]()\n    for (r, row) in lst.enumerated() {\n        if let i = row.firstIndex(of:\
    \ x) {\n            out.append((r, i))\n        }\n    }\n    return out.sorted(by:\
    \ { $0.0 < $1.0 }).sorted(by: { $0.1 > $1.1 })", "    // It is another solution.\n\
    \    //    func get_row(lst: [[Int]], x: Int) -> [(Int, Int)] {\n    //      \
    \  let indices = lst.indices.flatMap { i in\n    //            return lst[i].indices.map\
    \ { j in\n    //                (i, j)\n    //            }\n    //        }\n\
    \    //        let result = indices.filter { lst[$0.0][$0.1] == x }\n    //  \
    \      return result.sorted {\n    //            if $0.0 != $1.0 {\n    //   \
    \             return $0.0 < $1.0\n    //            } else {\n    //         \
    \       return $0.1 > $1.1\n    //            }\n    //        }\n    //    }\n\
    \    let result = lst.enumerated().flatMap { (i, arr) in\n        arr.enumerated().filter\
    \ { $0.element == x }.map { (i, $0.offset) }\n    }\n    return result.sorted\
    \ {\n        if $0.0 != $1.0 {\n            return $0.0 < $1.0\n        } else\
    \ {\n            return $0.1 > $1.1\n        }\n    }"]
stop_tokens:
- "\n}"
