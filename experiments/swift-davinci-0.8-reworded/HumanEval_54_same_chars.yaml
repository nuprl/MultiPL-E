name: HumanEval_54_same_chars
language: swift
prompt: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
  \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0: \"\
  abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\", s1:\
  \ \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\")\n///\
  \ false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n/// >>>\
  \ same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\nfunc same_chars(s0:\
  \ String, s1: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
  ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
  \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"\
  dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") ==\
  \ false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\n\
  assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
completions: ["    var chars0 = Array(s0.characters)\n    var chars1 = Array(s1.characters)\n\
    \    chars0.sort()\n    chars1.sort()\n    return chars0 == chars1", "    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    var c0 = [Int](repeating:\
    \ 0, count: 128)\n    var c1 = [Int](repeating: 0, count: 128)\n    for c in s0.characters\
    \ {\n        c0[Int(c.unicodeScalars.first!.value)] += 1\n    }\n    for c in\
    \ s1.characters {\n        c1[Int(c.unicodeScalars.first!.value)] += 1\n    }\n\
    \    return c0 == c1", '    return sorted(s0) == sorted(s1)', '    return Dictionary(grouping:
    s0.characters, by: {$0}).mapValues{$0.count} == Dictionary(grouping: s1.characters,
    by: {$0}).mapValues{$0.count}', "    var char_count = [Character: Int]()\n   \
    \ for c in s0 {\n        char_count[c] = (char_count[c] ?? 0) + 1\n    }\n   \
    \ for c in s1 {\n        char_count[c] = (char_count[c] ?? 0) - 1\n    }\n   \
    \ for (_, count) in char_count {\n        if count != 0 {\n            return\
    \ false\n        }\n    }\n    return true", "    let s0 = s0.sorted(), s1 = s1.sorted()\n\
    \    var i = 0, j = 0\n    while i < s0.count && j < s1.count {\n        if s0[i]\
    \ == s1[j] {\n            i += 1\n            j += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return i == s0.count", '    return s0.sorted()
    == s1.sorted()', "    var strs = [s0, s1]\n    var same = true\n    let sorted\
    \ = strs.sorted(by: { $0.count < $1.count })\n    let shorter = sorted[0]\n  \
    \  let longer = sorted[1]\n    for c in shorter {\n        if longer.contains(c)\
    \ {\n            same = true\n        } else {\n            same = false\n   \
    \         break\n        }\n    }\n    return same", "    let counts0 = count_chars(s:\
    \ s0)\n    let counts1 = count_chars(s: s1)\n    return counts0 == counts1", " \
    \   var s0_freq = [Int](repeating: 0, count: 26)\n    var s1_freq = [Int](repeating:\
    \ 0, count: 26)\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char\
    \ in s0 {\n        let index = alphabet.index(of: char)\n        s0_freq[index!]\
    \ += 1\n    }\n    for char in s1 {\n        let index = alphabet.index(of: char)\n\
    \        s1_freq[index!] += 1\n    }\n    return s0_freq == s1_freq", "    var\
    \ m = [Character: Int]()\n    var m0 = [Character: Int]()\n    var m1 = [Character:\
    \ Int]()\n    for ch in s0 {\n        m0[ch] = (m0[ch] ?? 0) + 1\n        m[ch]\
    \ = (m[ch] ?? 0) + 1\n    }\n    for ch in s1 {\n        m1[ch] = (m1[ch] ?? 0)\
    \ + 1\n        m[ch] = (m[ch] ?? 0) + 1\n    }\n    for (k, v) in m {\n      \
    \  if v != 2 {\n            return false\n        }\n        if m0[k] != m1[k]\
    \ {\n            return false\n        }\n    }\n    return true", '    return
    s0.sorted() == s1.sorted()', '    return (s0.count == s1.count) && ((s0.sorted()
    == s1.sorted()) || s0.count == 0)', "    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for c in s0 {\n        if s1.filter{$0 == c}.count != s0.filter{$0\
    \ == c}.count {\n            return false\n        }\n    }\n    return true",
  "    // return false\n    if s0.count != s1.count {\n        return false\n    }\n\
    \    var dict0 = [Character: Int]()\n    var dict1 = [Character: Int]()\n    for\
    \ i in s0 {\n        if let temp = dict0[i] {\n            dict0[i] = temp + 1\n\
    \        } else {\n            dict0[i] = 1\n        }\n    }\n    for i in s1\
    \ {\n        if let temp = dict1[i] {\n            dict1[i] = temp + 1\n     \
    \   } else {\n            dict1[i] = 1\n        }\n    }\n    for (key, val) in\
    \ dict0 {\n        if let val1 = dict1[key] {\n            if val1 != val {\n\
    \                return false\n            }\n        } else {\n            return\
    \ false\n        }\n    }\n    return true", "    \n    var dictionary: [Character:\
    \ Int] = [:]\n    \n    for letter in s0 {\n        dictionary[letter] = (dictionary[letter]\
    \ ?? 0) + 1\n    }\n    \n    for letter in s1 {\n        dictionary[letter] =\
    \ (dictionary[letter] ?? 0) - 1\n    }\n    \n    return dictionary.values.reduce(0,+)\
    \ == 0", '    return (s1.reduce(0) { $0 | 1 << ($1.asciiValue! - Character("a").asciiValue!)
    }) == (s0.reduce(0) { $0 | 1 << ($1.asciiValue! - Character("a").asciiValue!)
    })', "    // your code here\n    var s0 = s0\n    var s1 = s1\n    s0.sort()\n\
    \    s1.sort()\n    if s0.count != s1.count {\n        return false\n    }\n \
    \   for i in 0..<s0.count {\n        if s0[s0.index(s0.startIndex, offsetBy: i)]\
    \ != s1[s1.index(s1.startIndex, offsetBy: i)] {\n            return false\n  \
    \      }\n    }\n    return true", "    var chars0 = s0.characters.map { $0 }\n\
    \    var chars1 = s1.characters.map { $0 }\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1", "    // Your code here\n    var a = 0, b = 0\n\
    \    for c in s0.characters {\n        a = a ^ Int(String(c).utf8.first!)\n  \
    \  }\n    for c in s1.characters {\n        b = b ^ Int(String(c).utf8.first!)\n\
    \    }\n    return a == b", "    var count = 0\n    var s0 = Array(s0)\n    var\
    \ s1 = Array(s1)\n    while count < s0.count {\n        if s0[count] == s1[count]\
    \ {\n            count += 1\n        } else {\n            return false\n    \
    \    }\n    }\n    return true", "    var table0 = Array(repeating: 0, count:\
    \ 26)\n    var table1 = Array(repeating: 0, count: 26)\n    for c in s0 {\n  \
    \      table0[Int(c.asciiValue! - 97)] += 1\n    }\n    for c in s1 {\n      \
    \  table1[Int(c.asciiValue! - 97)] += 1\n    }\n    for i in 0..<26 {\n      \
    \  if table0[i] != table1[i] {\n            return false\n        }\n    }\n \
    \   return true", "    var char_count: [Character: Int] = [:]\n    var s0_iter\
    \ = s0.startIndex\n    while s0_iter != s0.endIndex {\n        let c = s0[s0_iter]\n\
    \        var count = char_count[c] ?? 0\n        count += 1\n        char_count[c]\
    \ = count\n        s0_iter = s0.index(after: s0_iter)\n    }\n    var s1_iter\
    \ = s1.startIndex\n    while s1_iter != s1.endIndex {\n        let c = s1[s1_iter]\n\
    \        var count = char_count[c] ?? 0\n        count -= 1\n        if count\
    \ < 0 {\n            return false\n        }\n        char_count[c] = count\n\
    \        s1_iter = s1.index(after: s1_iter)\n    }\n    return true", "    \n\
    \    // Solution 1:\n    //let s0 = Array(s0)\n    //let s1 = Array(s1)\n    //if\
    \ s0.count != s1.count {\n    //    return false\n    //}\n    //for ch in s0\
    \ {\n    //    if let idx = s1.firstIndex(of: ch) {\n    //        s1.remove(at:\
    \ idx)\n    //    } else {\n    //        return false\n    //    }\n    //}\n\
    \    //return true\n    \n    // Solution 2:\n    //let dict0 = s0.reduce(into:\
    \ [Character: Int]()) { counts, c in counts[c, default: 0] += 1 }\n    //let dict1\
    \ = s1.reduce(into: [Character: Int]()) { counts, c in counts[c, default: 0] +=\
    \ 1 }\n    //return dict0 == dict1\n    \n    // Solution 3:\n    let dict0 =\
    \ s0.reduce(into: [Character: Int]()) { counts, c in counts[c, default: 0] +=\
    \ 1 }\n    for ch in s1 {\n        if let count = dict0[ch] {\n            dict0[ch]\
    \ = count - 1\n            if dict0[ch] == 0 {\n                dict0.removeValue(forKey:\
    \ ch)\n            }\n        } else {\n            return false\n        }\n\
    \    }\n    return dict0.isEmpty", "    var c0 = [Character: Int]()\n    var c1\
    \ = [Character: Int]()\n    s0.forEach {c0[$0, default: 0] += 1}\n    s1.forEach\
    \ {c1[$0, default: 0] += 1}\n    if c0.count != c1.count {\n        return false\n\
    \    }\n    for (k, v) in c0 {\n        if v != c1[k] {\n            return false\n\
    \        }\n    }\n    return true", "    let characters = Array(s0)\n    for\
    \ c in characters {\n        if s1.characters.filter({$0 == c}).count != s0.characters.filter({$0\
    \ == c}).count {\n            return false\n        }\n    }\n    return true",
  "    let s0Set = Set(s0)\n    let s1Set = Set(s1)\n    return s0Set == s1Set", " \
    \   if s0.characters.count != s1.characters.count {\n        return false\n  \
    \  }\n    var char_set0 = Set<Character>()\n    for char in s0.characters {\n\
    \        char_set0.insert(char)\n    }\n    var char_set1 = Set<Character>()\n\
    \    for char in s1.characters {\n        char_set1.insert(char)\n    }\n    return\
    \ char_set0 == char_set1", "    var dic0: [Character: Int] = [:]\n    var dic1:\
    \ [Character: Int] = [:]\n    for c in s0 {\n        dic0[c] = (dic0[c] ?? 0)\
    \ + 1\n    }\n    for c in s1 {\n        dic1[c] = (dic1[c] ?? 0) + 1\n    }\n\
    \    return dic0 == dic1", "    var cs0 = s0.characters.map { String($0) }\n \
    \   var cs1 = s1.characters.map { String($0) }\n    cs0.sortInPlace()\n    cs1.sortInPlace()\n\
    \    return cs0 == cs1", "    for i in 0..<s0.count {\n        let index = s1.index(s1.startIndex,\
    \ offsetBy: i)\n        if s0[s0.index(s0.startIndex, offsetBy: i)] != s1[index]\
    \ {\n            return false\n        }\n    }\n    return true", "    let s0Chars\
    \ = Set(s0.characters)\n    let s1Chars = Set(s1.characters)\n    return s0Chars\
    \ == s1Chars", "    var chars0 = [Character](s0)\n    var chars1 = [Character](s1)\n\
    \    chars0.sort()\n    chars1.sort()\n    return chars0 == chars1", "    let\
    \ s0_ = s0.sorted()\n    let s1_ = s1.sorted()\n    return s0_ == s1_", "    let\
    \ s0_counts = s0.counts\n    let s1_counts = s1.counts\n    for (c, count) in\
    \ s0_counts {\n        if s1_counts[c] != count {\n            return false\n\
    \        }\n    }\n    return true", "    var chars0 = Array(s0)\n    var chars1\
    \ = Array(s1)\n    chars0.sort()\n    chars1.sort()\n    return chars0 == chars1",
  "    var cs0 = Array(s0.characters)\n    var cs1 = Array(s1.characters)\n    cs0.sort()\n\
    \    cs1.sort()\n    return cs0 == cs1", "    var frequency = [Character: Int]()\n\
    \    for c in s0 {\n        if let freq = frequency[c] {\n            frequency[c]\
    \ = freq + 1\n        } else {\n            frequency[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let freq = frequency[c] {\n            frequency[c]\
    \ = freq - 1\n        } else {\n            frequency[c] = -1\n        }\n   \
    \ }\n    for v in frequency.values {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true", "    if (s0.count == s1.count) {\n\
    \        // https://stackoverflow.com/questions/26364914/http-request-in-swift-with-post-method\n\
    \        let s0s = s0.sorted()\n        let s1s = s1.sorted()\n        return\
    \ s0s == s1s\n    }\n    return false", '    return same_chars(s0, s1, 0, 0)',
  "    var result = false\n    if s0.count == s1.count {\n        var dict = [Character:\
    \ Int]()\n        for (key, val) in zip(s0, s1) {\n            dict[key, default:\
    \ 0] += 1\n            dict[val, default: 0] -= 1\n        }\n        result =\
    \ dict.values.reduce(0, +) == 0\n    }\n    return result", '    return s0.sorted()
    == s1.sorted()', "  var set0 = Set<Character>()\n  var set1 = Set<Character>()\n\
    \  for c in s0 {\n    set0.insert(c)\n  }\n  for c in s1 {\n    set1.insert(c)\n\
    \  }\n  return set0 == set1", '    return true', "    var l0 = s0.characters.map{$0}\n\
    \    var l1 = s1.characters.map{$0}\n    l0.sortInPlace()\n    l1.sortInPlace()\n\
    \    return l0 == l1", "    var aux = [Character]()\n    for s in s0 {\n     \
    \   aux.append(s)\n    }\n    for s in s1 {\n        if aux.contains(s) {\n  \
    \          aux.remove(at: aux.firstIndex(of: s)!)\n        }\n    }\n    return\
    \ aux.isEmpty", '    return Array(s0.sorted()) == Array(s1.sorted())', "    //\
    \ your code here\n    var num0 = s0.count\n    var num1 = s1.count\n    if num0\
    \ != num1 {\n        return false\n    } else {\n        for char0 in s0 {\n \
    \           for char1 in s1 {\n                if char0 == char1 {\n         \
    \           num0 -= 1\n                    num1 -= 1\n                    break\n\
    \                }\n            }\n        }\n        if num0 == 0 && num1 ==\
    \ 0 {\n            return true\n        } else {\n            return false\n \
    \       }\n    }", "    let arr0 = s0.characters.map { String($0) }\n    let arr1\
    \ = s1.characters.map { String($0) }\n    return arr0.reduce(0, combine: {$0 +\
    \ arr1.filter({$0 == $1}).count}) == arr0.count", '    return s0.sorted() == s1.sorted()',
  '    return (s0.reduce("") { acc, c in "\(acc)\(c)" }.sorted() == s1.reduce("")
    { acc, c in "\(acc)\(c)" }.sorted())', "    var char_count = [Character: Int]()\n\
    \    for c in s0 {\n        char_count[c] = (char_count[c] ?? 0) + 1\n    }\n\
    \    for c in s1 {\n        if char_count[c] == nil {\n            return false\n\
    \        }\n        char_count[c] = char_count[c]! - 1\n        if char_count[c]\
    \ == 0 {\n            char_count.removeValue(forKey: c)\n        }\n    }\n  \
    \  return char_count.isEmpty", "    let chars0 = s0.characters.sorted()\n    let\
    \ chars1 = s1.characters.sorted()\n    return chars0 == chars1", "    var counter0\
    \ = [Int](repeating: 0, count: 256)\n    var counter1 = [Int](repeating: 0, count:\
    \ 256)\n    for i in 0..<s0.characters.count {\n        counter0[Int(s0[i])] +=\
    \ 1\n    }\n    for i in 0..<s1.characters.count {\n        counter1[Int(s1[i])]\
    \ += 1\n    }\n    for i in 0..<256 {\n        if counter0[i] != counter1[i] {\n\
    \            return false\n        }\n    }\n    return true", "    var c = [Character:\
    \ Int]()\n    for char in s0 {\n        c[char] = (c[char] ?? 0) + 1\n    }\n\
    \    for char in s1 {\n        c[char] = (c[char] ?? 0) - 1\n    }\n    for (_,\
    \ count) in c {\n        if count != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    var chars0 = s0.count_chars()\n    var chars1 =\
    \ s1.count_chars()\n    if s0.count > s1.count {\n        chars0 = s1.count_chars()\n\
    \        chars1 = s0.count_chars()\n    }\n    for (char, count) in chars0 {\n\
    \        if chars1[char] == nil || chars1[char]! < count {\n            return\
    \ false\n        }\n    }\n    return true", "  // YOUR CODE HERE\n  var result\
    \ : Bool = true\n  var count0 = [Character : Int]()\n  var count1 = [Character\
    \ : Int]()\n  for char in s0 {\n    if count0[char] == nil {\n      count0[char]\
    \ = 1\n    }\n    else {\n      count0[char]! += 1\n    }\n  }\n  for char in\
    \ s1 {\n    if count1[char] == nil {\n      count1[char] = 1\n    }\n    else\
    \ {\n      count1[char]! += 1\n    }\n  }\n  for (key,value) in count0 {\n   \
    \ if (count1[key] == nil || count1[key]! < value) {\n      result = false\n  \
    \  }\n  }\n  for (key,value) in count1 {\n    if (count0[key] == nil || count0[key]!\
    \ < value) {\n      result = false\n    }\n  }\n  return result", "    if s0.count\
    \ == s1.count {\n        var counter = 0\n        for char in s0 {\n         \
    \   if s1.contains(char) {\n                counter += 1\n            }\n    \
    \    }\n        if counter == s0.count {\n            return true\n        }\n\
    \    }\n    return false", "    var count = [Character: Int]()\n    s0.forEach\
    \ { count[$0, default: 0] += 1 }\n    s1.forEach { count[$0, default: 0] -= 1\
    \ }\n    return !count.values.contains(where: { $0 != 0 })", "    var s0_chars:\
    \ Array<Character> = Array(s0)\n    var s1_chars: Array<Character> = Array(s1)\n\
    \    s0_chars.sort()\n    s1_chars.sort()\n    return s0_chars == s1_chars", " \
    \   var chars0 = [Character](s0.characters)\n    var chars1 = [Character](s1.characters)\n\
    \    for char in chars0 {\n        if let index = chars1.index(of: char) {\n \
    \           chars1.remove(at: index)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", '    return false', "    let c0 = to_counters(s:\
    \ s0)\n    let c1 = to_counters(s: s1)\n    return c0 == c1", "    var s0 = s0\n\
    \    var s1 = s1\n    let c0 = s0.characters\n    let c1 = s1.characters\n   \
    \ for c in c0 {\n        if let idx = s1.characters.index(of: c) {\n         \
    \   s1.remove(at: idx)\n        } else {\n            return false\n        }\n\
    \    }\n    return s1.isEmpty", "    // -----\n    return s0.isAnagram(of: s1)\n\
    \    // -----", "    \n    var res:Bool = true\n    var set0:Set<Character> =\
    \ Set<Character>()\n    var set1:Set<Character> = Set<Character>()\n    \n   \
    \ for i in s0 {\n        set0.insert(i)\n    }\n    for i in s1 {\n        set1.insert(i)\n\
    \    }\n    \n    if set0 != set1 {\n        res = false\n    }\n    \n    return\
    \ res", "    var counter0 = [Character: Int]()\n    var counter1 = [Character:\
    \ Int]()\n    for c in s0 {\n        counter0[c] = (counter0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        counter1[c] = (counter1[c] ?? 0) + 1\n    }\n\
    \    for k in counter0.keys {\n        if counter0[k] != counter1[k] {\n     \
    \       return false\n        }\n    }\n    for k in counter1.keys {\n       \
    \ if counter0[k] != counter1[k] {\n            return false\n        }\n    }\n\
    \    return true", "    // Create letter frequency counters\n    var counter0\
    \ = [Character: Int]()\n    var counter1 = [Character: Int]()\n    // Build the\
    \ frequency counters\n    for c in s0 {\n        if let v = counter0[c] {\n  \
    \          counter0[c] = v + 1\n        } else {\n            counter0[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let v = counter1[c] {\n     \
    \       counter1[c] = v + 1\n        } else {\n            counter1[c] = 1\n \
    \       }\n    }\n    // Compare the counters\n    for (k, v) in counter0 {\n\
    \        if let v1 = counter1[k] {\n            if v1 != v {\n               \
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n    }\n    for (k, v) in counter1 {\n        if let v0 = counter0[k]\
    \ {\n            if v0 != v {\n                return false\n            }\n \
    \       } else {\n            return false\n        }\n    }\n    return true",
  "    var c0 = s0.characters.sorted()\n    var c1 = s1.characters.sorted()\n    return\
    \ c0 == c1", "    guard s0.count == s1.count else { return false }\n    let s0\
    \ = Array(s0)\n    let s1 = Array(s1)\n    var same = true\n    var i = 0\n  \
    \  while same && i < s0.count {\n        var j = 0\n        var k = 0\n      \
    \  while same && j < s1.count {\n            while same && k < s1.count {\n  \
    \              if s0[i] == s1[k] {\n                    k += 1\n             \
    \       break\n                }\n                k += 1\n            }\n    \
    \        if k == s1.count {\n                same = false\n            }\n   \
    \         j += 1\n        }\n        i += 1\n    }\n    return same", "    \n\
    \    let s0 = Array(s0.characters).sorted()\n    let s1 = Array(s1.characters).sorted()\n\
    \    \n    let s0Str = String(s0)\n    let s1Str = String(s1)\n    \n    return\
    \ s0Str == s1Str", "    var m0 = [Character: Int]()\n    var m1 = [Character:\
    \ Int]()\n    var chars0 = Array(s0)\n    var chars1 = Array(s1)\n    for c in\
    \ chars0 {\n        if let value = m0[c] {\n            m0[c] = value + 1\n  \
    \      } else {\n            m0[c] = 1\n        }\n    }\n    for c in chars1\
    \ {\n        if let value = m1[c] {\n            m1[c] = value + 1\n        }\
    \ else {\n            m1[c] = 1\n        }\n    }\n    if m0.count != m1.count\
    \ {\n        return false\n    }\n    for (key, value) in m0 {\n        if let\
    \ v1 = m1[key] {\n            if v1 != value {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    return true", '  return s0.sorted() == s1.sorted()', "    var freq0 = [Character:\
    \ Int]()\n    var freq1 = [Character: Int]()\n    for i in s0 {\n        if let\
    \ item = freq0[i] {\n            freq0[i] = item + 1\n        } else {\n     \
    \       freq0[i] = 1\n        }\n    }\n    for i in s1 {\n        if let item\
    \ = freq1[i] {\n            freq1[i] = item + 1\n        } else {\n          \
    \  freq1[i] = 1\n        }\n    }\n    return freq0 == freq1", "    var s = s0\n\
    \    for char in s1 {\n        if let index = s.firstIndex(of: char) {\n     \
    \       s.remove(at: index)\n        }\n    }\n    return s.isEmpty", "  let d\
    \ = get_dictionary(s: s0)\n  for c in s1 {\n    let val = d[c]\n    if val ==\
    \ nil {\n      return false\n    }\n    d[c] = val! - 1\n    if d[c]! < 0 {\n\
    \      return false\n    }\n  }\n  return true", "    var count0 = [Character:\
    \ Int]()\n    var count1 = [Character: Int]()\n    for c in s0 {\n        count0[c]\
    \ = (count0[c] ?? 0) + 1\n    }\n    for c in s1 {\n        count1[c] = (count1[c]\
    \ ?? 0) + 1\n    }\n    return count0 == count1", "    if (s0.count != s1.count)\
    \ {\n        return false\n    }\n    var d0 = [Character: Int]()\n    var d1\
    \ = [Character: Int]()\n    s0.forEach { d0[$0, default: 0] += 1 }\n    s1.forEach\
    \ { d1[$0, default: 0] += 1 }\n    return d0 == d1", "    let s0_chars = Array(s0.characters)\n\
    \    let s1_chars = Array(s1.characters)\n    let s0_chars_count = s0_chars.count\n\
    \    let s1_chars_count = s1_chars.count\n    var char_count = 0\n    var i =\
    \ 0\n    while i < s0_chars_count {\n        let c = s0_chars[i]\n        var\
    \ j = 0\n        while j < s1_chars_count {\n            if c == s1_chars[j] {\n\
    \                s1_chars[j] = \"1\"\n                char_count += 1\n      \
    \          break\n            }\n            j += 1\n        }\n        i += 1\n\
    \    }\n    return char_count == s0_chars_count", "    var arr0 = s0.map { String($0)\
    \ }\n    var arr1 = s1.map { String($0) }\n    let set0 = Set(arr0)\n    let set1\
    \ = Set(arr1)\n    if set0.count != set1.count {\n        return false\n    }\n\
    \    for char in set0 {\n        if arr0.filter({ $0 == char }).count != arr1.filter({\
    \ $0 == char }).count {\n            return false\n        }\n    }\n    return\
    \ true", "    let s0_chars = [Character](s0)\n    let s1_chars = [Character](s1)\n\
    \    var s0_counts = [Character: Int]()\n    var s1_counts = [Character: Int]()\n\
    \    for c in s0_chars {\n        if let count = s0_counts[c] {\n            s0_counts[c]\
    \ = count + 1\n        } else {\n            s0_counts[c] = 1\n        }\n   \
    \ }\n    for c in s1_chars {\n        if let count = s1_counts[c] {\n        \
    \    s1_counts[c] = count + 1\n        } else {\n            s1_counts[c] = 1\n\
    \        }\n    }\n    return s0_counts == s1_counts", "    if s0.count != s1.count\
    \ {\n        return false\n    }\n    var chars = [Character: Int]()\n    s0.forEach\
    \ { char in\n        if let count = chars[char] {\n            chars[char] = count\
    \ + 1\n        } else {\n            chars[char] = 1\n        }\n    }\n    for\
    \ char in s1 {\n        if let count = chars[char] {\n            if count ==\
    \ 0 {\n                return false\n            }\n            chars[char] =\
    \ count - 1\n        } else {\n            return false\n        }\n    }\n  \
    \  return true", "    var src = s0.to_char_list()\n    var tgt = s1.to_char_list()\n\
    \    if src.count != tgt.count {\n        return false\n    }\n    while src.count\
    \ > 0 {\n        var c = src.removeLast()\n        if let k = tgt.firstIndex(of:\
    \ c) {\n            tgt.remove(at: k)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    if s0.count == s1.count {\n        let\
    \ a = Array(s0).sorted()\n        let b = Array(s1).sorted()\n        for i in\
    \ 0..<a.count {\n            if a[i] != b[i] {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    return false", "  \
    \  for c in s0 {\n        if !s1.contains(c) {\n            return false\n   \
    \     }\n    }\n    return true", "    let s0Array = s0.characters.map{String($0)}\n\
    \    let s1Array = s1.characters.map{String($0)}\n    var cnt = s0Array.count\n\
    \    if cnt != s1Array.count {\n        return false\n    }\n    for i in 0..<cnt\
    \ {\n        if s0Array[i] != s1Array[i] {\n            return false\n       \
    \ }\n    }\n    return true", "    let l0 = s0.count\n    let l1 = s1.count\n\
    \    if l0 != l1 {\n        return false\n    }\n    var d0 = [Character: Int]()\n\
    \    var d1 = [Character: Int]()\n    for i in 0..<l0 {\n        let c0 = s0[s0.index(s0.startIndex,\
    \ offsetBy: i)]\n        let c1 = s1[s1.index(s1.startIndex, offsetBy: i)]\n \
    \       d0[c0] = (d0[c0] ?? 0) + 1\n        d1[c1] = (d1[c1] ?? 0) + 1\n    }\n\
    \    return d0 == d1", '  return s0.count == s1.count && s0.count == count_chars(s0:
    s0, s1: s1)', "  let s0 = Array(s0.characters)\n  let s1 = Array(s1.characters)\n\
    \  return s0.sorted() == s1.sorted()", "    if s0.count != s1.count {\n      \
    \  return false\n    }\n    for (i, j) in zip(s0, s1) {\n        if i != j {\n\
    \            return false\n        }\n    }\n    return true", "    // \u5229\u7528\
    Dictionary\uFF0C\u6AA2\u67E5\u5169\u500B\u5B57\u4E32\u5404\u500B\u5B57\u5143\u51FA\
    \u73FE\u7684\u6B21\u6578\u662F\u5426\u4E00\u6A23\n    // \u9019\u908A\u7684\u7B97\
    \u6CD5\u6548\u7387\u662FO(n)\n    // \u5229\u7528Dictionary\u7684\u7279\u6027\uFF0C\
    \u67E5\u8A62\u7684\u6642\u9593\u8907\u96DC\u5EA6\u662FO(1)\n    var s0_characters_freq\
    \ = [Character: Int]()\n    var s1_characters_freq = [Character: Int]()\n    for\
    \ c in s0 {\n        if let freq = s0_characters_freq[c] {\n            s0_characters_freq[c]\
    \ = freq + 1\n        } else {\n            s0_characters_freq[c] = 1\n      \
    \  }\n    }\n    for c in s1 {\n        if let freq = s1_characters_freq[c] {\n\
    \            s1_characters_freq[c] = freq + 1\n        } else {\n            s1_characters_freq[c]\
    \ = 1\n        }\n    }\n    return s0_characters_freq == s1_characters_freq",
  '    return Array(s0.sorted()) == Array(s1.sorted())', "    var s0 = s0\n    var\
    \ s1 = s1\n    let s0_removed = s0.removeAll { s1.contains($0) }\n    let s1_removed\
    \ = s1.removeAll { s0.contains($0) }\n    return s0_removed.isEmpty && s1_removed.isEmpty",
  "    // TODO: Implement this function\n    //return false\n    let arr1 = Array(s0)\n\
    \    let arr2 = Array(s1)\n    var flag:Bool = true\n    for n in arr1 {\n   \
    \     flag = false\n        for m in arr2 {\n            if n == m {\n       \
    \         flag = true\n                break\n            }\n        }\n     \
    \   if flag == false {\n            return false\n        }\n    }\n    for n\
    \ in arr2 {\n        flag = false\n        for m in arr1 {\n            if n ==\
    \ m {\n                flag = true\n                break\n            }\n   \
    \     }\n        if flag == false {\n            return false\n        }\n   \
    \ }\n    return true", "    var d0 = s0.countElements - s1.countElements\n   \
    \ var d1 = s1.countElements - s0.countElements\n    if d0 < 0 { d0 = -d0 }\n \
    \   if d1 < 0 { d1 = -d1 }\n    if d0 > 0 || d1 > 0 { return false }\n    var\
    \ c0 = Array(s0.utf8)\n    var c1 = Array(s1.utf8)\n    c0.sort {$0 < $1}\n  \
    \  c1.sort {$0 < $1}\n    return c0 == c1", '    return false', "    if s0.count\
    \ != s1.count {\n        return false\n    }\n    let s0 = s0.sorted(by: <)\n\
    \    let s1 = s1.sorted(by: <)\n    return s0 == s1", "    for c in s0 {\n   \
    \     let r = s1.range(of: String(c))\n        if r == nil {\n            return\
    \ false\n        }\n        s1.removeSubrange(r!)\n    }\n    return true", " \
    \ for c in s0 {\n    if c != \" \" {\n      if let idx = s1.firstIndex(of: c)\
    \ {\n        s1.remove(at: idx)\n      } else {\n        return false\n      }\n\
    \    }\n  }\n  return true", "    if s0.count == s1.count {\n        return s0.sorted()\
    \ == s1.sorted()\n    }\n    return false", "    guard s0.count == s1.count else\
    \ { return false }\n    guard s0.count > 0 else { return true }\n    var dict\
    \ = [Character: Int]()\n    var dict1 = [Character: Int]()\n    for c in s0 {\n\
    \        dict[c, default: 0] += 1\n    }\n    for c in s1 {\n        dict1[c,\
    \ default: 0] += 1\n    }\n    for (key, value) in dict {\n        if value !=\
    \ dict1[key] {\n            return false\n        }\n    }\n    return true",
  "    var t0 = s0.map { $0 }\n    var t1 = s1.map { $0 }\n    t0.sort { $0 < $1 }\n\
    \    t1.sort { $0 < $1 }\n    return t0 == t1", "    let x0 = Array(s0.characters)\n\
    \    let x1 = Array(s1.characters)\n    let d0 = x0.filter({ x1.index(of: $0)\
    \ == nil }).count\n    let d1 = x1.filter({ x0.index(of: $0) == nil }).count\n\
    \    if d0 == 0 && d1 == 0 {\n        return true\n    }\n    return false", '    return
    s0.sorted() == s1.sorted()', "    var s0 = Array(s0)\n    var s1 = Array(s1)\n\
    \    s0.sort()\n    s1.sort()\n    return s0 == s1", "    // YOUR CODE HERE\n\
    \    return true", "    let sorted0 = s0.sorted()\n    let sorted1 = s1.sorted()\n\
    \    return sorted0 == sorted1", "    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    var used1 = [Character](count:chars1.count,\
    \ repeatedValue: \" \")\n    for i in 0 ..< chars0.count {\n        var found\
    \ = false\n        for j in 0 ..< chars1.count {\n            if chars0[i] ==\
    \ chars1[j] && used1[j] == \" \" {\n                found = true\n           \
    \     used1[j] = \"*\"\n                break\n            }\n        }\n    \
    \    if !found {\n            return false\n        }\n    }\n    return true",
  "    var s0_chars: [Character] = []\n    var s1_chars: [Character] = []\n    for\
    \ c in s0 {\n        s0_chars.append(c)\n    }\n    for c in s1 {\n        s1_chars.append(c)\n\
    \    }\n    s0_chars.sort()\n    s1_chars.sort()\n    return String(s0_chars)\
    \ == String(s1_chars)", "    var chars = [Character: Int]()\n    for c in s0 {\n\
    \        if let i = chars[c] {\n            chars[c] = i + 1\n        } else {\n\
    \            chars[c] = 1\n        }\n    }\n    for c in s1 {\n        if let\
    \ i = chars[c] {\n            chars[c] = i - 1\n        } else {\n           \
    \ chars[c] = -1\n        }\n    }\n    for (_, v) in chars {\n        if v !=\
    \ 0 {\n            return false\n        }\n    }\n    return true", "    var\
    \ the_counter0 = Counter<Character>()\n    var the_counter1 = Counter<Character>()\n\
    \    for c in s0 {\n        the_counter0[c] += 1\n    }\n    for c in s1 {\n \
    \       the_counter1[c] += 1\n    }\n    return the_counter0 == the_counter1",
  "    var dic: [Character: Int] = [:]\n    for c in s0 {\n        if let v = dic[c]\
    \ {\n            dic[c] = v + 1\n        } else {\n            dic[c] = 1\n  \
    \      }\n    }\n    for c in s1 {\n        if let v = dic[c] {\n            dic[c]\
    \ = v - 1\n        } else {\n            dic[c] = -1\n        }\n    }\n    for\
    \ (_, v) in dic {\n        if v != 0 {\n            return false\n        }\n\
    \    }\n    return true", "    let counter_s0 = Counter(s0)\n    let counter_s1\
    \ = Counter(s1)\n    return counter_s0 == counter_s1", "    var charList1 = Array(s0.characters)\n\
    \    var charList2 = Array(s1.characters)\n    var charList1Copy = charList1\n\
    \    var charList2Copy = charList2\n    for char in charList1Copy {\n        if\
    \ let x = charList2Copy.index(of: char) {\n            charList2Copy.remove(at:\
    \ x)\n        }\n    }\n    for char in charList2Copy {\n        if let x = charList1Copy.index(of:\
    \ char) {\n            charList1Copy.remove(at: x)\n        }\n    }\n    return\
    \ charList1Copy.count == 0 && charList2Copy.count == 0", "    if s0.count == s1.count\
    \ {\n        return s0.sorted() == s1.sorted()\n    }\n    if s0.count > s1.count\
    \ {\n        let s0_array = Array(s0.sorted())\n        let s1_array = Array(s1.sorted())\n\
    \        var si = 0\n        var sj = 0\n        while si < s0_array.count &&\
    \ sj < s1_array.count {\n            if s0_array[si] == s1_array[sj] {\n     \
    \           si += 1\n                sj += 1\n            } else {\n         \
    \       si += 1\n            }\n        }\n        return sj == s1_array.count\n\
    \    } else {\n        return same_chars(s0: s1, s1: s0)\n    }", "    var a0\
    \ = Array(s0), a1 = Array(s1)\n    a0.sort()\n    a1.sort()\n    return a0 ==\
    \ a1", "    var s0 = s0.characters.map { String($0) }\n    var s1 = s1.characters.map\
    \ { String($0) }\n    s0.sortInPlace()\n    s1.sortInPlace()\n    return s0 ==\
    \ s1", "    let a0 = Array(s0)\n    let a1 = Array(s1)\n    return a0.sorted()\
    \ == a1.sorted()", "    // TODO\n    return false", "    var c0 = [Character](s0.characters)\n\
    \    var c1 = [Character](s1.characters)\n    if (c0.count != c1.count) {\n  \
    \      return false\n    }\n    c0.sort(<)\n    c1.sort(<)\n    return c0 == c1",
  "    if (s0.count == s1.count) {\n        let string0 = Array(s0)\n        let string1\
    \ = Array(s1)\n        for c in string0 {\n            var found = false\n   \
    \         for d in string1 {\n                if (c == d) {\n                \
    \    found = true\n                    break\n                }\n            }\n\
    \            if (found == false) {\n                return false\n           \
    \ }\n        }\n        return true\n    }\n    return false", "    var chars:\
    \ [Character] = []\n    for c in s0 {\n        chars.append(c)\n    }\n    for\
    \ c in s1 {\n        if let index = chars.firstIndex(of: c) {\n            chars.remove(at:\
    \ index)\n        }\n    }\n    return chars.count == 0", "    var s0 = s0\n \
    \   var s1 = s1\n    while s0.count > 0 && s1.count > 0 {\n        let c0 = s0.removeFirst()\n\
    \        let c1 = s1.removeFirst()\n        if c0 != c1 {\n            return\
    \ false\n        }\n    }\n    return s0.count == 0 && s1.count == 0", "    //\
    \ TODO: Implement this function...\n    var s0_characters_count = s0.characters.count\n\
    \    var s1_characters_count = s1.characters.count\n    let s0_characters = Array(s0.characters)\n\
    \    let s1_characters = Array(s1.characters)\n    if (s0_characters_count ==\
    \ s1_characters_count) {\n        for i in 0...s0_characters_count - 1 {\n   \
    \         if s0_characters[i] != s1_characters[i] {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    else {\n        return\
    \ false\n    }", "  let (s1, s2) = s0.count < s1.count ? (s0, s1) : (s1, s0)\n\
    \  let difference = s2.count - s1.count\n  for i in 0...difference {\n    let\
    \ offset = s2.index(s2.startIndex, offsetBy: i)\n    let range = offset..<s2.index(offset,\
    \ offsetBy: s1.count)\n    let sub = s2[range]\n    if sub == s1 {\n      return\
    \ true\n    }\n  }\n  return false", "    var hm = [Character: Int]()\n    for\
    \ c in s0 {\n        if let n = hm[c] {\n            hm[c] = n + 1\n        }\
    \ else {\n            hm[c] = 1\n        }\n    }\n    for c in s1 {\n       \
    \ if let n = hm[c] {\n            hm[c] = n - 1\n        } else {\n          \
    \  hm[c] = -1\n        }\n    }\n    for key in hm.keys {\n        if hm[key]\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    guard\
    \ s0.count == s1.count else { return false }\n    let s0 = s0.sorted()\n    let\
    \ s1 = s1.sorted()\n    return s0 == s1", "    var s0Counts = [Character: Int]()\n\
    \    for c in s0 {\n        if let val = s0Counts[c] {\n            s0Counts[c]\
    \ = val + 1\n        } else {\n            s0Counts[c] = 1\n        }\n    }\n\
    \    var s1Counts = [Character: Int]()\n    for c in s1 {\n        if let val\
    \ = s1Counts[c] {\n            s1Counts[c] = val + 1\n        } else {\n     \
    \       s1Counts[c] = 1\n        }\n    }\n    return s0Counts == s1Counts", " \
    \   if s0.count == s1.count {\n        var s0_chars = [Character]()\n        for\
    \ c in s0 {\n            s0_chars.append(c)\n        }\n        for c in s1 {\n\
    \            if let i = s0_chars.firstIndex(of: c) {\n                s0_chars.remove(at:\
    \ i)\n            } else {\n                return false\n            }\n    \
    \    }\n        return true\n    } else {\n        return false\n    }", "   \
    \ let (s0, s1) = (s0.stringByReplacingOccurrencesOfString(\" \", withString: \"\
    \"), s1.stringByReplacingOccurrencesOfString(\" \", withString: \"\"))\n    let\
    \ (s0c, s1c) = (s0.characters.map { c in Int(String(c))! }, s1.characters.map\
    \ { c in Int(String(c))! })\n    let s0c_sum = s0c.reduce(0, combine: +)\n   \
    \ let s1c_sum = s1c.reduce(0, combine: +)\n    let s0c_product = s0c.reduce(1,\
    \ combine: *)\n    let s1c_product = s1c.reduce(1, combine: *)\n    return s0c_sum\
    \ == s1c_sum && s0c_product == s1c_product", "    var c0 = s0.characters.sorted()\n\
    \    var c1 = s1.characters.sorted()\n    return c0 == c1", "    // Compute the\
    \ count of each letter in s0.\n    var count = [Character: Int]()\n    for c in\
    \ s0 {\n        count[c] = (count[c] ?? 0) + 1\n    }\n    // Subtract the count\
    \ of each letter in s1.\n    for c in s1 {\n        if let n = count[c] {\n  \
    \          count[c] = n - 1\n        } else {\n            count[c] = -1\n   \
    \     }\n    }\n    // All the counts should be zero.\n    return count.values.all\
    \ { $0 == 0 }", "    if count_chars(s: s0) == count_chars(s: s1) {\n        return\
    \ true\n    }\n    return false", "    var histogram = [Character: Int]()\n  \
    \  for char in s0 {\n        histogram[char] = (histogram[char] ?? 0) + 1\n  \
    \  }\n    for char in s1 {\n        histogram[char] = (histogram[char] ?? 0) -\
    \ 1\n    }\n    for (_, count) in histogram {\n        if count != 0 {\n     \
    \       return false\n        }\n    }\n    return true", "    var char_counts\
    \ = Array(repeating: 0, count: 26)\n    var chars = Array(s0)\n    for i in 0\
    \ ..< chars.count {\n        let idx = Int(chars[i].asciiValue! - 97)\n      \
    \  char_counts[idx] += 1\n    }\n    chars = Array(s1)\n    for i in 0 ..< chars.count\
    \ {\n        let idx = Int(chars[i].asciiValue! - 97)\n        char_counts[idx]\
    \ -= 1\n    }\n    for i in 0 ..< char_counts.count {\n        if char_counts[i]\
    \ != 0 {\n            return false\n        }\n    }\n    return true", "    let\
    \ s0_chars = Array(s0.characters)\n    let s1_chars = Array(s1.characters)\n \
    \   var s0_char_counts = [Character: Int]()\n    var s1_char_counts = [Character:\
    \ Int]()\n    var s0_char_count: Int\n    var s1_char_count: Int\n    if s0_chars.count\
    \ != s1_chars.count {\n        return false\n    }\n    for c in s0_chars {\n\
    \        s0_char_count = s0_char_counts[c] ?? 0\n        s0_char_counts[c] = s0_char_count\
    \ + 1\n    }\n    for c in s1_chars {\n        s1_char_count = s1_char_counts[c]\
    \ ?? 0\n        s1_char_counts[c] = s1_char_count + 1\n    }\n    for (c, count)\
    \ in s0_char_counts {\n        if s1_char_counts[c] != count {\n            return\
    \ false\n        }\n    }\n    return true", "    let s0_c = Array(s0)\n    let\
    \ s1_c = Array(s1)\n    var s0_counts = [Character: Int]()\n    var s1_counts\
    \ = [Character: Int]()\n    for c in s0_c {\n        s0_counts[c] = s0_counts[c]\
    \ ?? 0 + 1\n    }\n    for c in s1_c {\n        s1_counts[c] = s1_counts[c] ??\
    \ 0 + 1\n    }\n    return s0_counts == s1_counts", "  var m0 = [Character: Int]()\n\
    \  var m1 = [Character: Int]()\n  for c in s0 {\n    m0[c] = (m0[c] ?? 0) + 1\n\
    \  }\n  for c in s1 {\n    m1[c] = (m1[c] ?? 0) + 1\n  }\n  if m0.count != m1.count\
    \ {\n    return false\n  }\n  for (k,v) in m0 {\n    if m1[k] != v {\n      return\
    \ false\n    }\n  }\n  return true", "    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var m0 = [Int](repeating: 0, count: 255)\n    var m1 = [Int](repeating:\
    \ 0, count: 255)\n    for i in 0..<s0.count {\n        let c0 = s0[s0.index(s0.startIndex,\
    \ offsetBy: i)]\n        let c1 = s1[s1.index(s1.startIndex, offsetBy: i)]\n \
    \       m0[Int(c0.asciiValue!)] += 1\n        m1[Int(c1.asciiValue!)] += 1\n \
    \   }\n    for i in 0..<255 {\n        if m0[i] != m1[i] {\n            return\
    \ false\n        }\n    }\n    return true", '    return false', '    return s0.sorted()
    == s1.sorted()', "    guard s0.count == s1.count else { return false }\n    return\
    \ s0.sorted() == s1.sorted()", "    var array_s0 = [Character](s0)\n    var array_s1\
    \ = [Character](s1)\n    array_s0.sort()\n    array_s1.sort()\n    return array_s0\
    \ == array_s1", "    var dict = [Character: Int]()\n    for char in s0 {\n   \
    \     if let value = dict[char] {\n            dict[char] = value + 1\n      \
    \  } else {\n            dict[char] = 1\n        }\n    }\n    for char in s1\
    \ {\n        if let value = dict[char] {\n            dict[char] = value - 1\n\
    \        } else {\n            dict[char] = -1\n        }\n    }\n    for (_,\
    \ value) in dict {\n        if value != 0 {\n            return false\n      \
    \  }\n    }\n    return true", "    \n    if s0.count == s1.count {\n        var\
    \ characterCount = [Character: Int]()\n        let char0 = Array(s0)\n       \
    \ let char1 = Array(s1)\n        for c in char0 {\n            if let count =\
    \ characterCount[c] {\n                characterCount[c] = count + 1\n       \
    \     } else {\n                characterCount[c] = 1\n            }\n       \
    \ }\n        for c in char1 {\n            if let count = characterCount[c] {\n\
    \                characterCount[c] = count - 1\n            } else {\n       \
    \         characterCount[c] = 1\n            }\n        }\n        return characterCount.values.allSatisfy\
    \ { $0 == 0 }\n    }\n    return false", "    var s0 = Array(s0)\n    var s1 =\
    \ Array(s1)\n    s0.sort()\n    s1.sort()\n    return s0 == s1", "    var s0 =\
    \ s0\n    var s1 = s1\n    let s0chars = s0.characters.count\n    let s1chars\
    \ = s1.characters.count\n    if s0chars != s1chars {\n        return false\n \
    \   }\n    for c in s0.characters {\n        if let i = s1.characters.index(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "  let slice0 = Array(s0)\n  let slice1 =\
    \ Array(s1)\n  var map0 = [Character: Int]()\n  var map1 = [Character: Int]()\n\
    \  for char in slice0 {\n    if map0[char] == nil {\n      map0[char] = 1\n  \
    \  } else {\n      map0[char]! += 1\n    }\n  }\n  for char in slice1 {\n    if\
    \ map1[char] == nil {\n      map1[char] = 1\n    } else {\n      map1[char]! +=\
    \ 1\n    }\n  }\n  return map0 == map1", '    return s0.count == s1.count && s0.count
    == (s0.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)! + s1.addingPercentEncoding(withAllowedCharacters:
    .urlPathAllowed)!).addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!.count',
  "    var count0 = [Character: Int]()\n    var count1 = [Character: Int]()\n    for\
    \ c in s0 {\n        count0[c] = (count0[c] ?? 0) + 1\n    }\n    for c in s1\
    \ {\n        count1[c] = (count1[c] ?? 0) + 1\n    }\n    return count0 == count1",
  "    var chars = [Character](s0)\n    return s1.filter { chars.contains($0) }.count\
    \ == chars.count", '    return false', "    var s0_freq = character_frequencies(s:\
    \ s0)\n    var s1_freq = character_frequencies(s: s1)\n    let s0_keys = Array(s0_freq.keys)\n\
    \    let s1_keys = Array(s1_freq.keys)\n    for key in s0_keys {\n        if (s1_freq[key]\
    \ != nil) {\n            if (s0_freq[key] != s1_freq[key]) {\n               \
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n    }\n    for key in s1_keys {\n        if (s0_freq[key] != nil) {\n\
    \            if (s0_freq[key] != s1_freq[key]) {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    return true", '    return s0.sorted() == s1.sorted()', "    // TODO\n   \
    \ var arr0: [Character] = []\n    var arr1: [Character] = []\n    for char in\
    \ s0 {\n        arr0.append(char)\n    }\n    for char in s1 {\n        arr1.append(char)\n\
    \    }\n    arr0.sort(by: <)\n    arr1.sort(by: <)\n    return arr0 == arr1",
  "    let d0 = Dictionary(grouping: s0) { $0 }\n    let d1 = Dictionary(grouping:\
    \ s1) { $0 }\n    return d0 == d1", "    var count = [Character: Int]()\n    for\
    \ i in s0 {\n        if let num = count[i] {\n            count[i] = num + 1\n\
    \        } else {\n            count[i] = 1\n        }\n    }\n    for i in s1\
    \ {\n        if let num = count[i] {\n            count[i] = num - 1\n       \
    \ } else {\n            count[i] = -1\n        }\n    }\n    for (_, v) in count\
    \ {\n        if v != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty && !s1.isEmpty\
    \ {\n        s0 = remove_first_char(s0: s0, c: s1.first!)\n        s1 = remove_first_char(s0:\
    \ s1, c: s1.first!)\n    }\n    return s0.isEmpty && s1.isEmpty", "    var w1\
    \ = word_count(s: s0)\n    var w2 = word_count(s: s1)\n    for k in w1.keys {\n\
    \        if (w1[k] != w2[k]) {\n            return false\n        }\n    }\n \
    \   return true", "    var c0 = [Character](s0.characters)\n    var c1 = [Character](s1.characters)\n\
    \    c0.sortInPlace()\n    c1.sortInPlace()\n    return c0 == c1", "    var (s0,\
    \ s1) = (s0, s1)\n    for _ in 0..<s0.characters.count {\n        let c = s0.remove(at:\
    \ s0.startIndex)\n        if let i = s1.characters.index(of: c) {\n          \
    \  s1.remove(at: i)\n        } else {\n            return false\n        }\n \
    \   }\n    return true", "    if (s0.count == s1.count) {\n        var s0_dict:\
    \ [Character: Int] = [:]\n        var s1_dict: [Character: Int] = [:]\n      \
    \  for char in s0 {\n            if let c_count = s0_dict[char] {\n          \
    \      s0_dict[char] = c_count + 1\n            } else {\n                s0_dict[char]\
    \ = 1\n            }\n        }\n        for char in s1 {\n            if let\
    \ c_count = s1_dict[char] {\n                s1_dict[char] = c_count + 1\n   \
    \         } else {\n                s1_dict[char] = 1\n            }\n       \
    \ }\n        return s0_dict == s1_dict\n    }\n    return false", '    return
    Set(s0.characters) == Set(s1.characters)', "    if s0.count != s1.count {\n  \
    \      return false\n    }\n    var ns0 = s0.count\n    var ns1 = s1.count\n \
    \   var count = [Character: Int]()\n    for i in 0..<ns0 {\n        let c = s0[s0.index(s0.startIndex,\
    \ offsetBy: i)]\n        if let count_ = count[c] {\n            count[c] = count_\
    \ + 1\n        } else {\n            count[c] = 1\n        }\n    }\n    for i\
    \ in 0..<ns1 {\n        let c = s1[s1.index(s1.startIndex, offsetBy: i)]\n   \
    \     if let count_ = count[c] {\n            count[c] = count_ - 1\n        }\
    \ else {\n            count[c] = -1\n        }\n    }\n    for (_, v) in count\
    \ {\n        if v != 0 {\n            return false\n        }\n    }\n    return\
    \ true", "    let a0 = Array(s0)\n    let a1 = Array(s1)\n    if a0.count != a1.count\
    \ {\n        return false\n    }\n    var n0 = [Int](repeating: 0, count: 26)\n\
    \    var n1 = [Int](repeating: 0, count: 26)\n    for i in 0..<a0.count {\n  \
    \      n0[Int(a0[i].asciiValue! - 97)] += 1\n        n1[Int(a1[i].asciiValue!\
    \ - 97)] += 1\n    }\n    return n0 == n1", "    var d0 = count_chars(s: s0)\n\
    \    var d1 = count_chars(s: s1)\n    return d0 == d1", "    let l0 = s0.characters.count\n\
    \    let l1 = s1.characters.count\n    if l0 != l1 {\n        return false\n \
    \   }\n    if s0 == s1 {\n        return true\n    }\n    var counts0 = [Character:\
    \ Int]()\n    var counts1 = [Character: Int]()\n    for c in s0.characters {\n\
    \        counts0[c] = (counts0[c] ?? 0) + 1\n    }\n    for c in s1.characters\
    \ {\n        counts1[c] = (counts1[c] ?? 0) + 1\n    }\n    return counts0 ==\
    \ counts1", "    // your code here\n    return s0.sorted() == s1.sorted()", " \
    \ var s0 = s0\n  var s1 = s1\n  for _ in 0...s0.count {\n    let c0 = s0.removeFirst()\n\
    \    let found = s1.firstIndex(of: c0)\n    if let found = found {\n      s1.remove(at:\
    \ found)\n    } else {\n      return false\n    }\n  }\n  return true", "    //\
    \ your code here\n    return false", "    var dict: [Character: Int] = [:]\n \
    \   for c in s0 {\n        dict[c] = (dict[c] ?? 0) + 1\n    }\n    for c in s1\
    \ {\n        dict[c] = (dict[c] ?? 0) - 1\n    }\n    return dict.allSatisfy({\
    \ $0.value == 0 })", "    var a = Array(s0.utf8)\n    var b = Array(s1.utf8)\n\
    \    a.sort()\n    b.sort()\n    return a == b", "    let s0chars = Array(s0)\n\
    \    let s1chars = Array(s1)\n    if (s0chars.count != s1chars.count) {\n    \
    \    return false\n    }\n    var s0chars_copy = s0chars\n    var s1chars_copy\
    \ = s1chars\n    s0chars_copy.sort()\n    s1chars_copy.sort()\n    for i in 0..<s0chars.count\
    \ {\n        if (s0chars_copy[i] != s1chars_copy[i]) {\n            return false\n\
    \        }\n    }\n    return true", "    var all_characters = Set<Character>()\n\
    \    for c in s0 {\n        all_characters.insert(c)\n    }\n    for c in s1 {\n\
    \        all_characters.insert(c)\n    }\n    var chars_count_s0 = [Character:\
    \ Int]()\n    var chars_count_s1 = [Character: Int]()\n    for c in all_characters\
    \ {\n        chars_count_s0[c] = 0\n        chars_count_s1[c] = 0\n    }\n   \
    \ for c in s0 {\n        chars_count_s0[c]! += 1\n    }\n    for c in s1 {\n \
    \       chars_count_s1[c]! += 1\n    }\n    for c in all_characters {\n      \
    \  if chars_count_s0[c] != chars_count_s1[c] {\n            return false\n   \
    \     }\n    }\n    return true", '    return s0.sorted() == s1.sorted()', " \
    \   let c0 = chars(s: s0)\n    let c1 = chars(s: s1)\n    return c0 == c1", " \
    \   var r0 = 0\n    var r1 = 0\n    for letter in s0.characters {\n        r0\
    \ ^= Int(letter.asciiValue!)\n    }\n    for letter in s1.characters {\n     \
    \   r1 ^= Int(letter.asciiValue!)\n    }\n    return r0 == r1", "    var s0 =\
    \ s0, s1 = s1\n    for c in s0 {\n        let r = s1.firstIndex(of: c)\n     \
    \   if r == nil {\n            return false\n        }\n        s1.remove(at:\
    \ r!)\n    }\n    return true", "    \n    // TODO: Write this func!\n    var\
    \ dict = [Character: Int]()\n    let s0Array = Array(s0)\n    let s1Array = Array(s1)\n\
    \    \n    if s0Array.count != s1Array.count {\n        return false\n    }\n\
    \    \n    for i in 0..<s0Array.count {\n        if dict[s0Array[i]] == nil {\n\
    \            dict[s0Array[i]] = 1\n        } else {\n            dict[s0Array[i]]!\
    \ += 1\n        }\n    }\n    \n    for i in 0..<s1Array.count {\n        if dict[s1Array[i]]\
    \ == nil {\n            return false\n        } else {\n            dict[s1Array[i]]!\
    \ -= 1\n        }\n    }\n    \n    for (_, num) in dict {\n        if num !=\
    \ 0 {\n            return false\n        }\n    }\n    \n    return true", " \
    \   var count_s0 = [Character: Int]()\n    var count_s1 = [Character: Int]()\n\
    \    var same = true\n    // fill in the blank\n    for i in s0.characters {\n\
    \        if let _ = count_s0[i] {\n            count_s0[i]! += 1\n        } else\
    \ {\n            count_s0[i] = 1\n        }\n    }\n    for i in s1.characters\
    \ {\n        if let _ = count_s1[i] {\n            count_s1[i]! += 1\n       \
    \ } else {\n            count_s1[i] = 1\n        }\n    }\n    if count_s0.count\
    \ != count_s1.count {\n        same = false\n    } else {\n        for i in count_s0.keys\
    \ {\n            if count_s0[i] != count_s1[i] {\n                same = false\n\
    \            }\n        }\n    }\n    return same", "    // Write your code here.\n\
    \    var dict0 = [Character: Int]()\n    var dict1 = [Character: Int]()\n    for\
    \ c in s0 {\n        if let val = dict0[c] {\n            dict0[c] = val + 1\n\
    \        } else {\n            dict0[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let val = dict1[c] {\n            dict1[c] = val + 1\n       \
    \ } else {\n            dict1[c] = 1\n        }\n    }\n    return dict0 == dict1",
  "    let ss0 = Array(s0.characters)\n    let ss1 = Array(s1.characters)\n    if\
    \ ss0.count != ss1.count {\n        return false\n    }\n    for i in 0..<ss0.count\
    \ {\n        if ss0[i] != ss1[i] {\n            return false\n        }\n    }\n\
    \    return true", "    var counter = [Character: Int]()\n    for c in s0 {\n\
    \        if let i = counter[c] {\n            counter[c] = i + 1\n        } else\
    \ {\n            counter[c] = 1\n        }\n    }\n    for c in s1 {\n       \
    \ if let i = counter[c] {\n            counter[c] = i - 1\n        } else {\n\
    \            counter[c] = -1\n        }\n    }\n    for (_, v) in counter {\n\
    \        if v != 0 {\n            return false\n        }\n    }\n    return true",
  "    let a0 = Array(s0)\n    let a1 = Array(s1)\n    if a0.count != a1.count {\n\
    \        return false\n    }\n    var c0 = [Character: Int]()\n    var c1 = [Character:\
    \ Int]()\n    for c in a0 {\n        if c0[c] == nil {\n            c0[c] = 1\n\
    \        } else {\n            c0[c]! += 1\n        }\n    }\n    for c in a1\
    \ {\n        if c1[c] == nil {\n            c1[c] = 1\n        } else {\n    \
    \        c1[c]! += 1\n        }\n    }\n    return c0 == c1", "    var tmp0 =\
    \ s0\n    var tmp1 = s1\n    while !tmp0.isEmpty {\n        let char0 = tmp0.removeFirst()\n\
    \        var i = tmp1.startIndex\n        while i < tmp1.endIndex {\n        \
    \    if tmp1[i] == char0 {\n                tmp1.remove(at: i)\n             \
    \   break\n            }\n            i = tmp1.index(after: i)\n        }\n  \
    \      if i == tmp1.endIndex {\n            return false\n        }\n    }\n \
    \   return true", "    var letters_count_0 = [Character: Int]()\n    var letters_count_1\
    \ = [Character: Int]()\n    for c in s0 {\n        letters_count_0[c] = (letters_count_0[c]\
    \ ?? 0) + 1\n    }\n    for c in s1 {\n        letters_count_1[c] = (letters_count_1[c]\
    \ ?? 0) + 1\n    }\n    return letters_count_0 == letters_count_1", "    var s0_chars\
    \ = Array(s0.characters)\n    var s1_chars = Array(s1.characters)\n    if s0_chars.count\
    \ != s1_chars.count {\n        return false\n    }\n    for c in s0_chars {\n\
    \        let index = s1_chars.index(of: c)\n        if index == nil {\n      \
    \      return false\n        }\n        s1_chars.remove(at: index!)\n    }\n \
    \   return true", "    var dict = [Character: Int]()\n    for char in s0 {\n \
    \       if dict[char] == nil {\n            dict[char] = 1\n        } else {\n\
    \            dict[char]! += 1\n        }\n    }\n    for char in s1 {\n      \
    \  if dict[char] == nil {\n            return false\n        } else {\n      \
    \      dict[char]! -= 1\n        }\n    }\n    for (_, val) in dict {\n      \
    \  if val != 0 {\n            return false\n        }\n    }\n    return true",
  "    var s0_counts = [Character: Int]()\n    var s1_counts = [Character: Int]()\n\
    \    for s0_char in s0 {\n        if let count = s0_counts[s0_char] {\n      \
    \      s0_counts[s0_char] = count + 1\n        } else {\n            s0_counts[s0_char]\
    \ = 1\n        }\n    }\n    for s1_char in s1 {\n        if let count = s1_counts[s1_char]\
    \ {\n            s1_counts[s1_char] = count + 1\n        } else {\n          \
    \  s1_counts[s1_char] = 1\n        }\n    }\n    return s0_counts == s1_counts",
  "    // YOUR CODE HERE\n    var chars0 = Array(s0.characters)\n    var chars1 =\
    \ Array(s1.characters)\n    chars0.sort()\n    chars1.sort()\n    if chars0 ==\
    \ chars1 {\n        return true\n    }\n    return false", "    var chars = [Int](repeating:\
    \ 0, count: 26)\n    let offset = \"a\".utf8.first!\n    for u in s0.utf8 {\n\
    \        chars[Int(u - offset)] += 1\n    }\n    for u in s1.utf8 {\n        chars[Int(u\
    \ - offset)] -= 1\n    }\n    for i in 0..<26 {\n        if chars[i] != 0 {\n\
    \            return false\n        }\n    }\n    return true", "  for char in\
    \ s0 {\n    if !s1.contains(char) {\n      return false\n    }\n  }\n  return\
    \ true", "  var s0_c = s0.sorted()\n  var s1_c = s1.sorted()\n  return s0_c ==\
    \ s1_c", "  let v0 = s0.characters.map { String($0) }\n  let v1 = s1.characters.map\
    \ { String($0) }\n  var _v0 = v0\n  var _v1 = v1\n  for c in v0 {\n    if let\
    \ i = _v1.index(of: c) {\n      _v1.remove(at: i)\n    } else {\n      return\
    \ false\n    }\n  }\n  for c in v1 {\n    if let i = _v0.index(of: c) {\n    \
    \  _v0.remove(at: i)\n    } else {\n      return false\n    }\n  }\n  return true",
  "    var ch = [Character:Int]()\n    for c in s0 {\n        if let x = ch[c] {\n\
    \            ch[c] = x + 1\n        } else {\n            ch[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let x = ch[c] {\n            ch[c] = x -\
    \ 1\n        } else {\n            ch[c] = -1\n        }\n    }\n    for (k, v)\
    \ in ch {\n        if v != 0 {\n            return false\n        }\n    }\n \
    \   return true", "    // TODO\n    return true", "    var chars: [Character]\
    \ = Array(s0.characters)\n    for c in s1.characters {\n        if let index =\
    \ chars.index(of: c) {\n            chars.remove(at: index)\n        }\n    }\n\
    \    return chars.count == 0", "    var s0 = s0\n    for char in s1 {\n      \
    \  if let range = s0.range(of: String(char)) {\n            s0.removeSubrange(range)\n\
    \        } else {\n            return false\n        }\n    }\n    return s0.isEmpty",
  '    return letter_frequencies(text: s0) == letter_frequencies(text: s1)', "   \
    \ var count_map = [Character: Int]()\n    for c in s0 {\n        count_map[c]\
    \ = (count_map[c] ?? 0) + 1\n    }\n    for c in s1 {\n        count_map[c] =\
    \ (count_map[c] ?? 0) - 1\n    }\n    for (_, value) in count_map {\n        if\
    \ value != 0 {\n            return false\n        }\n    }\n    return true"]
stop_tokens:
- "\n}"
