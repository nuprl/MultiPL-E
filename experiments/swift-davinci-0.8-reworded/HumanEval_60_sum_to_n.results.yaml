language: swift
name: HumanEval_60_sum_to_n
results:
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(pow(Double(n), 2.0) + Double(n)) / 2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmwwx7qeo.swift:14:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(n), 2.0) + Double(n)) / 2\n               ^~~\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    var i = 1\n    while i <= n {\n     \
    \   result += i\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for num in 1...n {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for num in 1...n {\n        result +=\
    \ num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return ((n + 1) * n) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for index in 1...n {\n        sum += index\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n + sum_to_n(n: n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int((Double(n) * (Double(n) + 1)) / 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let result = (n * (n + 1)) / 2\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    //Print(\"sum_to_n error: not implemented yet\")\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n:\
    \ 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: Exception
  stderr: 'tmpvnkgpsma/tmpvnkgpsma.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54bf8bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54bf5b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54bf5b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54bf5b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvnkgpsma                        0x0000557fa3ea61b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b54bfaa9460 __libc_start_main +
    245

    6    tmpvnkgpsma                        0x0000557fa3ea5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978359
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var total = 0\n    for i in 1...n {\n        total += i\n\
    \    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n + sum_to_n(n: n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var i = 1\n  var sum = 0\n  while i <= n {\n    sum += i\n\
    \    i += 1\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return\
    \ n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0 // FIX ME\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp186tiemf/tmp186tiemf.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba04be7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba04bb74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba04bb74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba04bb737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp186tiemf                        0x000055b7e0d951b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba04c069460 __libc_start_main +
    245

    6    tmp186tiemf                        0x000055b7e0d94e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for i in 1...n {\n        result += i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // -----------------\n    // IMPLEMENT ME\n    // -----------------\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpy6tiv3vd/tmpy6tiv3vd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afca158cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afca1283b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afca1283988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afca12827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6tiv3vd                        0x000056390d09d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afca1778460 __libc_start_main +
    245

    6    tmpy6tiv3vd                        0x000056390d09ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tvar sum = 0\n\tvar i = 1\n\twhile i <= n {\n\t\tsum += i\n\t\
    \ti += 1\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var total = 0\n    for i in 1...n {\n        total += i\n\
    \    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var total = 0\n    for i in 1...n {\n        total += i\n\
    \    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for num in 1...n {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var i = 1\n    while i <= n {\n        sum\
    \ += i\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n == 1 {\n    return 1\n  }\n  return n + sum_to_n(n: n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n    else {\n       \
    \ return n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for num in 1...n {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum = n * (n + 1) / 2\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0 // FIXME\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp417g8xyb/tmp417g8xyb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d3cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d39aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0d39ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0d39ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp417g8xyb                        0x00005566be9031b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba0d3ea3460 __libc_start_main +
    245

    6    tmp417g8xyb                        0x00005566be902e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for num in 1...n {\n        sum +=\
    \ num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for i in 1...n {\n        result += i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // TODO\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return ((n * (n + 1)) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // ...\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: '/tmp/tmpze1yqdsf.swift:15:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var i = 1\n    while i <= n {\n        sum\
    \ += i\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for var i = 0; i <= n; i++ {\n        sum\
    \ += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpp52bh08k.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n + sum_to_n(n: n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var index = 1\n    while index <= n {\n\
    \        sum += index\n        index += 1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return\
    \ n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // YOUR CODE GOES HERE\n    var sum = 0\n    for index in\
    \ 1...n {\n        sum += index\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // \uC5EC\uAE30\uC5D0 \uCF54\uB4DC\uB97C \uC785\uB825\uD558\
    \uC138\uC694\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1...n).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1+n)*n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return\
    \ n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // your answer here\n    return (n*(n+1))/2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n == 1 ? 1 : n + sum_to_n(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp97q9qdyz.swift:14:38: error: missing argument label 'n:' in call\n\
    \    return n == 1 ? 1 : n + sum_to_n(n - 1)\n                               \
    \      ^\n                                     n: \n"
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // Your code goes here.\n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpy9x_w4_h/tmpy9x_w4_h.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2978acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2975a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2975a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2975a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9x_w4_h                        0x000056087f419230 <unavailable> + 4656

    5    libc.so.6                          0x00002af297a98460 __libc_start_main +
    245

    6    tmpy9x_w4_h                        0x000056087f418e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var n = n, sum = 0\n    while n > 0 {\n        sum += n\n\
    \        n -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1...n).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for var i = 1; i <= n; i++ {\n    sum += i\n\
    \  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmple92bjiy.swift:15:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 1; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for n in 1...n {\n        sum += n\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    //let result = (n * (n + 1)) / 2\n    var result = 0\n  \
    \  for i in 1...n {\n        result += i\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var ret = 0\n    for i in 1...n {\n        ret += i\n   \
    \ }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let a = n * (n + 1) / 2\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp_f4yu97v/tmp_f4yu97v.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4306b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4303adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4303ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4303ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f4yu97v                        0x000055605ffb91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad4308a2460 __libc_start_main +
    245

    6    tmp_f4yu97v                        0x000055605ffb8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var i: Int = 1\n    var sum: Int = 0\n    while i <= n {\n\
    \        sum = sum + i\n        i = i + 1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for num in 1...n {\n        sum +=\
    \ num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tvar sum = 0\n\tfor i in 1...n {\n\t\tsum += i\n\t}\n\treturn\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for i in 1...n {\n    sum += i\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for i in 1...n {\n        result += i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for index in 1...n {\n        sum +=\
    \ index\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var n = n\n    var sum = 0\n    while n > 0 {\n        sum\
    \ += n\n        n -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // TODO: implement this function\n    if n == 1 {\n     \
    \   return 1\n    }\n    return n + sum_to_n(n: n - 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var total = 0\n    for k in 1...n {\n        total += k\n\
    \    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let initial: Int = 0\n    let func_body: (Int, Int) -> Int\
    \ = {\n        x, y in x + y\n    }\n    return reduce(array_from_to(1, n), initial,\
    \ func_body)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp6sxlozqj.swift:18:12: error: cannot find 'reduce' in scope\n  \
    \  return reduce(array_from_to(1, n), initial, func_body)\n           ^~~~~~\n\
    /tmp/tmp6sxlozqj.swift:18:19: error: cannot find 'array_from_to' in scope\n  \
    \  return reduce(array_from_to(1, n), initial, func_body)\n                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var result = 0\n  for i in 1...n {\n    result += i\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for i in 1...n {\n        sum += i\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0 // TODO\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpjr1wqnos/tmpjr1wqnos.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1129777c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b112946eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b112946e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b112946d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjr1wqnos                        0x00005591809c91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b1129963460 __libc_start_main +
    245

    6    tmpjr1wqnos                        0x00005591809c8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // YOUR CODE GOES HERE\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpd8v7pg2i/tmpd8v7pg2i.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81426edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81423e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81423e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81423e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8v7pg2i                        0x0000558c9bd3d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b81428d9460 __libc_start_main +
    245

    6    tmpd8v7pg2i                        0x0000558c9bd3ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return ((1 + n) * n) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // TODO: implement this function\n    var sum: Int = 0\n\
    \    for i in 1...n {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // Replace 0 with your code!\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpxdtwkr8k/tmpxdtwkr8k.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca7e26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca7b1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca7b1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca7b1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdtwkr8k                        0x00005555677941b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b4ca8012460 __libc_start_main +
    245

    6    tmpxdtwkr8k                        0x0000555567793e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1+n)*n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    else {\n      \
    \  return n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    // PUT YOUR CODE HERE\n    var out = 0\n    for i in 1...n\
    \ {\n        out += i\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for i in 1...n {\n        sum += i\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for i in 1...n {\n        sum += i\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return\
    \ n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var i = 0\n    while i <= n {\n        sum\
    \ += i\n        i++\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpr_iajnvc.swift:18:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for i in 1...n {\n        sum += i\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n*(n+1)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return\
    \ n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    var i: Int = 1\n    while i <= n {\n\
    \        sum += i\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpibkl0pcx/tmpibkl0pcx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae428a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae428734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae428734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4287337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibkl0pcx                        0x000055724fa371b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae428c29460 __libc_start_main +
    245

    6    tmpibkl0pcx                        0x000055724fa36e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return\
    \ n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var counter = 1\n    while counter <= n\
    \ {\n        sum += counter\n        counter += 1\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1...n).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for x in 1...n {\n        sum += x\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    else {\n      \
    \  return n + sum_to_n(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var total = 0\n    for var i = 1; i <= n; i++ {\n       \
    \ total += i\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp1yj24yr6.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978360
