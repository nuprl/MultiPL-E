language: swift
name: HumanEval_51_remove_vowels
results:
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter({\n        $0 != \"a\" && $0 != \"A\" && $0 != \"e\" && $0 != \"\
    E\" && $0 != \"i\" && $0 != \"I\" && $0 != \"o\" && $0 != \"O\" && $0 != \"u\"\
    \ && $0 != \"U\"\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        if !vowels.contains(char) {\n\
    \            result.append(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpi2wne3af.swift:16:13: error: cannot find 'vowels' in scope\n  \
    \      if !vowels.contains(char) {\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ output = \"\"\n    for char in text {\n        switch char {\n        case \"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n        \
    \    output += \"\"\n        default:\n            output += String(char)\n  \
    \      }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !is_vowel($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplzl_99vf.swift:14:27: error: cannot find 'is_vowel' in scope\n\
    \    return text.filter { !is_vowel($0) }\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ Place your code here\n    var newString = \"\"\n    for letter in text {\n \
    \       if (!letter.isVowel) {\n            newString.append(letter)\n       \
    \ }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp7cj3txo9.swift:17:21: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if (!letter.isVowel) {\n             ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ text_without_vowels = \"\"\n    for i in text {\n        switch i {\n      \
    \  case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n\
    \            break\n        default:\n            text_without_vowels.append(i)\n\
    \        }\n    }\n    return text_without_vowels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for c in text {\n        switch c {\n        case \"a\",\
    \ \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n           \
    \ continue\n        default:\n            result.append(c)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: CharacterSet = CharacterSet(charactersIn: \"aeiouAEIOU\")\n    let \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwmg1_u1e.swift:15:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpwmg1_u1e.swift:14:17: error: cannot find type 'CharacterSet' in scope\n\
    \    let vowels: CharacterSet = CharacterSet(charactersIn: \"aeiouAEIOU\")\n \
    \               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ str = text\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"]\n    for i in str.indices {\n        if vowels.contains(str[i])\
    \ {\n            str.remove(at: i)\n        }\n    }\n    return str\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7866ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b78361561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4b78361286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4b7836113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4b78360bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b4b78494ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b4b7844d660 String.subscript.getter
    + 34

    7    tmpv0d7wh_4                        0x00005626b703d361 <unavailable> + 9057

    8    tmpv0d7wh_4                        0x00005626b703c89e <unavailable> + 6302

    9    libc.so.6                          0x00002b4b78856460 __libc_start_main +
    245

    10   tmpv0d7wh_4                        0x00005626b703c4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var result = \"\"\n    for char in text {\n        if\
    \ !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"aeiouyAEIOUY\")\n    return String(text.characters.filter { !vowels.contains($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpx3zfycj2.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    return String(text.characters.filter { !vowels.contains($0)\
    \ })\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        if !vowels.contains(char) {\n\
    \            result.append(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpi2wne3af.swift:16:13: error: cannot find 'vowels' in scope\n  \
    \      if !vowels.contains(char) {\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ vowels = \"aeiou\"\n    var result = \"\"\n    for char in text {\n        if\
    \ !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpab95k4r6/tmpab95k4r6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac423a7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac423771b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac423771988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4237707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab95k4r6                        0x0000559aa4aa496b <unavailable> + 6507

    5    libc.so.6                          0x00002ac423c66460 __libc_start_main +
    245

    6    tmpab95k4r6                        0x0000559aa4aa4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_oyt819.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var res = \"\"\n    for ch in text {\n        if !vowels.contains(ch)\
    \ {\n            res.append(ch)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpix19ctq8/tmpix19ctq8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd03df5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd03aecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd03aec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd03aeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpix19ctq8                        0x000055dde745896b <unavailable> + 6507

    5    libc.so.6                          0x00002afd03fe1460 __libc_start_main +
    245

    6    tmpix19ctq8                        0x000055dde7458169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var result = text\n    for i in 0..<text.count {\n      \
    \  let char = text[text.index(text.startIndex, offsetBy: i)]\n        if vowels.contains(char)\
    \ {\n            result.remove(at: text.index(text.startIndex, offsetBy: i))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpaea4tufn/tmpaea4tufn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66d5a1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66d5714b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66d5714988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66d57137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaea4tufn                        0x000055b1ccbcb9b5 <unavailable> + 6581

    5    libc.so.6                          0x00002b66d5c09460 __libc_start_main +
    245

    6    tmpaea4tufn                        0x000055b1ccbcb509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var result: String = \"\"\n    for char in text {\n  \
    \      if !vowels.contains(char) {\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var new_text = \"\"\n    for item in text {\n      \
    \  if vowels.contains(item) == false {\n            new_text.append(item)\n  \
    \      }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmps16wdblb/tmps16wdblb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10c7ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10c7bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10c7bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10c7bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps16wdblb                        0x000055e0b6c8396b <unavailable> + 6507

    5    libc.so.6                          0x00002b10c80d4460 __libc_start_main +
    245

    6    tmps16wdblb                        0x000055e0b6c83169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\treturn\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp2ao6bq6p/tmp2ao6bq6p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5494ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c54641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c54641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c546407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ao6bq6p                        0x0000557b8e54f3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b5c54b36460 __libc_start_main +
    245

    6    tmp2ao6bq6p                        0x0000557b8e54ef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for c in text {\n        if (c != \"a\" && c != \"A\" &&\
    \ c != \"e\" && c != \"E\" && c != \"i\" && c != \"I\" && c != \"o\" && c != \"\
    O\" && c != \"u\" && c != \"U\") {\n            result.append(c)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ new_text = \"\"\n    for char in text {\n        if char.uppercased() != \"\
    A\" && char.uppercased() != \"E\" && char.uppercased() != \"I\" && char.uppercased()\
    \ != \"O\" && char.uppercased() != \"U\" {\n            new_text.append(char)\n\
    \        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  return\
    \ text.replacingOccurrences(of: \"[aeiouAEIOU]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpqxa_39_f.swift:14:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n  return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: .regularExpression)\n         ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqxa_39_f.swift:14:76: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n  return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var result = \"\"\n    for c in text {\n        if !vowels.contains(String(c))\
    \ {\n            result += String(c)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for char in text {\n        switch char {\n     \
    \   case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    :\n            break\n        default:\n            result.append(char)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ String(text.filter { !\"aeiouAEIOU\".contains($0) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !vowels.contains($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpl8qphc30.swift:14:27: error: cannot find 'vowels' in scope\n  \
    \  return text.filter { !vowels.contains($0) }\n                          ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var result = String()\n    for char in text {\n        if\
    \ !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ new_text = \"\"\n    for letter in text {\n        if !(letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\" || letter\
    \ == \"A\" || letter == \"E\" || letter == \"I\" || letter == \"O\" || letter\
    \ == \"U\") {\n            new_text += String(letter)\n        }\n    }\n    return\
    \ new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for l in text {\n      \
    \  if !vowels.contains(l) {\n            result.append(l)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for char in text {\n        if !vowels.contains(char)\
    \ {\n            result.append(char)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpkcfxqobb.swift:16:13: error: cannot find 'vowels' in scope\n  \
    \      if !vowels.contains(char) {\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.replacingOccurrences(of: \"[aeiouAEIOU]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0tagngpq.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0tagngpq.swift:14:78: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                           ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ new_text = \"\"\n    let vowels = \"AaEeIiOoUu\"\n    for letter in text {\n\
    \        if !vowels.contains(letter) {\n            new_text.append(letter)\n\
    \        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ YOUR CODE GOES HERE\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp8h650ate/tmp8h650ate.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab41af88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab41ac7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab41ac7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab41ac7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8h650ate                        0x0000557abdc233f5 <unavailable> + 5109

    5    libc.so.6                          0x00002ab41b174460 __libc_start_main +
    245

    6    tmp8h650ate                        0x0000557abdc22f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res = \"\"\n    for char in text {\n        if !char.isVowel {\n           \
    \ res.append(char)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpk9ui81ec.swift:16:18: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if !char.isVowel {\n            ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n    for letter in text {\n        if !vowels.contains(String(letter))\
    \ {\n            result += String(letter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var result = \"\"\n    for char in text {\n        if (vowels.contains(String(char)))\
    \ {\n            continue\n        }\n        result.append(char)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    return String(text.characters.filter { !vowels.contains($0) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpc_82gwp7.swift:15:61: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return String(text.characters.filter\
    \ { !vowels.contains($0) })\n                                                \
    \            ^\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpr8lk9xig/tmpr8lk9xig.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6e534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6e22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6e22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6e22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8lk9xig                        0x000055a69021d3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002abb6e720460 __libc_start_main +
    245

    6    tmpr8lk9xig                        0x000055a69021cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var res = \"\"\n    for elem in text {\n        if !vowels.contains(String(elem))\
    \ {\n            res.append(elem)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for letter in text {\n        if !vowels.contains(letter)\
    \ {\n            result.append(letter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmps742le0x.swift:16:13: error: cannot find 'vowels' in scope\n  \
    \      if !vowels.contains(letter) {\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            result.append(char)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n\treturn String(text.filter({ !vowels.contains($0) }))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for c in text {\n        if !vowels.contains(c) {\n     \
    \       result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmppqrpibgt.swift:16:13: error: cannot find 'vowels' in scope\n  \
    \      if !vowels.contains(c) {\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var result = text\n    var i = 0\n    while i < result.count\
    \ {\n        let letter = result[result.index(result.startIndex, offsetBy: i)]\n\
    \        if vowels.contains(letter) {\n            result.remove(at: result.index(result.startIndex,\
    \ offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp3r44b12e/tmp3r44b12e.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a19052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a18d49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a18d49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a18d487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3r44b12e                        0x0000562829e79a2b <unavailable> + 6699

    5    libc.so.6                          0x00002b2a1923e460 __libc_start_main +
    245

    6    tmp3r44b12e                        0x0000562829e79229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var new_text = text\n    for vowel in vowels {\n        new_text = new_text.replacingOccurrences(of:\
    \ vowel, with: \"\")\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpij98fhkn.swift:17:29: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        new_text = new_text.replacingOccurrences(of:\
    \ vowel, with: \"\")\n                   ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter {!vowels.contains($0)})\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ Initialize a String array to compare against.\n    let vowels: [Character] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    // Initialize an empty String\n   \
    \ var result = \"\"\n    // Loop through all the characters in the string\n  \
    \  for letter in text {\n        // If the character is NOT in the vowels array,\n\
    \        // append the character to the result string.\n        if !vowels.contains(letter)\
    \ {\n            result.append(letter)\n        }\n    }\n    // Return the result\
    \ string\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpy__nwy1e/tmpy__nwy1e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1880818c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b188050fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b188050f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b188050e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy__nwy1e                        0x00005639d9276acb <unavailable> + 6859

    5    libc.so.6                          0x00002b1880a04460 __libc_start_main +
    245

    6    tmpy__nwy1e                        0x00005639d92762c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"\
    U\"]\n    var result = \"\"\n    for letter in text {\n        if !vowels.contains(String(letter))\
    \ {\n            result += String(letter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = text\n    for char in vowels {\n        result = result.replacingOccurrences(of:\
    \ char, with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpnljof4gi.swift:15:17: error: cannot find 'vowels' in scope\n  \
    \  for char in vowels {\n                ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {\n        \"aeiouAEIOU\".contains($0) == false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var out: String = \"\"\n    for c in text {\n        if !vowels.contains(c)\
    \ {\n            out.append(c)\n        }\n    }\n    return out\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tif\
    \ text.isEmpty {\n\t\treturn \"\"\n\t}\n\tvar vowels = [Character]()\n\tvowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\t\
    var text_clean = \"\"\n\tfor letter in text {\n\t\tif !vowels.contains(letter)\
    \ {\n\t\t\ttext_clean.append(letter)\n\t\t}\n\t}\n\treturn text_clean\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"\
    O\", \"u\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    return text.filter {\n        !vowels.contains($0)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var text_without_vowels = \"\"\n    for index in text.indices\
    \ {\n        if !vowels.contains(text[index]) {\n            text_without_vowels.append(text[index])\n\
    \        }\n    }\n    return text_without_vowels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ FIXME\n    let vowels: Set<Character> = [\"a\", \"A\", \"e\", \"E\", \"i\",\
    \ \"I\", \"o\", \"O\", \"u\", \"U\"]\n    return String(text.filter { !vowels.contains($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.is_vowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfds3nbi1.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'is_vowel'\n    return text.filter { !$0.is_vowel\
    \ }\n                          ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        if !char.is_vowel() {\n     \
    \       result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfc4nu0w.swift:16:18: error: value of type 'Character' has no member\
    \ 'is_vowel'\n        if !char.is_vowel() {\n            ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for i in text {\n        if i != \"a\" && i != \"\
    e\" && i != \"i\" && i != \"o\" && i != \"u\" {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmppzkwh75n/tmppzkwh75n.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc150fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc14df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc14df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc14df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzkwh75n                        0x00005597ae3dc94b <unavailable> + 6475

    5    libc.so.6                          0x00002acc152ea460 __libc_start_main +
    245

    6    tmppzkwh75n                        0x00005597ae3dc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = text.replacingOccurrences(of: \"[aeiou]\", with: \"\", options: .regularExpression)\n\
    \    result = result.replacingOccurrences(of: \"[AEIOU]\", with: \"\", options:\
    \ .regularExpression)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0blfb7ap.swift:14:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    var result = text.replacingOccurrences(of: \"[aeiou]\"\
    , with: \"\", options: .regularExpression)\n                 ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0blfb7ap.swift:14:79: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    var result = text.replacingOccurrences(of:\
    \ \"[aeiou]\", with: \"\", options: .regularExpression)\n                    \
    \                                                         ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0blfb7ap.swift:15:77: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    result = result.replacingOccurrences(of:\
    \ \"[AEIOU]\", with: \"\", options: .regularExpression)\n                    \
    \                                                       ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = CharacterSet(charactersIn: \"aeiou\")\n    return String(text.filter\
    \ { !vowels.contains($0.unicodeScalars.first!) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpeg1azf5o.swift:14:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet(charactersIn: \"aeiou\")\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = text.uppercased()\n    result = result.replacingOccurrences(of: \"\
    A\", with: \"\")\n    result = result.replacingOccurrences(of: \"E\", with: \"\
    \")\n    result = result.replacingOccurrences(of: \"I\", with: \"\")\n    result\
    \ = result.replacingOccurrences(of: \"O\", with: \"\")\n    result = result.replacingOccurrences(of:\
    \ \"U\", with: \"\")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpv4779r36.swift:15:21: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    result = result.replacingOccurrences(of: \"A\",\
    \ with: \"\")\n             ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv4779r36.swift:16:21:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    result\
    \ = result.replacingOccurrences(of: \"E\", with: \"\")\n             ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv4779r36.swift:17:21: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \    result = result.replacingOccurrences(of: \"I\", with: \"\")\n           \
    \  ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv4779r36.swift:18:21: error: value of\
    \ type 'String' has no member 'replacingOccurrences'\n    result = result.replacingOccurrences(of:\
    \ \"O\", with: \"\")\n             ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv4779r36.swift:19:21:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    result\
    \ = result.replacingOccurrences(of: \"U\", with: \"\")\n             ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !is_vowel($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplzl_99vf.swift:14:27: error: cannot find 'is_vowel' in scope\n\
    \    return text.filter { !is_vowel($0) }\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    return text.filter { !vowels.contains($0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpexwe3hyh/tmpexwe3hyh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6e6e54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6e6b4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6e6b4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6e6b4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexwe3hyh                        0x000055925f0a58fb <unavailable> + 6395

    5    libc.so.6                          0x00002af6e7040460 __libc_start_main +
    245

    6    tmpexwe3hyh                        0x000055925f0a50f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var result = \"\"\n    for char in text {\n        if\
    \ !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"aeiouAEIOU\")\n    return String(text.characters.filter { !vowels.contains($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpmp70shwf.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    return String(text.characters.filter { !vowels.contains($0)\
    \ })\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_oyt819.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_oyt819.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ s = text\n    for c in text {\n        if [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"].contains(c) {\n            s.remove(at: s.firstIndex(of:\
    \ c)!)\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels = \"aeiou\"\n\treturn text.filter { !vowels.contains($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpqsxwiuus/tmpqsxwiuus.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3327ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace32f75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace32f75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace32f747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsxwiuus                        0x000055ae724468fb <unavailable> + 6395

    5    libc.so.6                          0x00002ace3346a460 __libc_start_main +
    245

    6    tmpqsxwiuus                        0x000055ae724460f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  var\
    \ result = \"\"\n  for char in text {\n    if !is_vowel(char: char) {\n      result.append(char)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpgxo84pnp.swift:16:9: error: cannot find 'is_vowel' in scope\n \
    \   if !is_vowel(char: char) {\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ TODO\n    var r = \"\"\n    for (i, c) in text.enumerated() {\n        if [\"\
    a\", \"e\", \"i\", \"o\", \"u\"].contains(String(c).lowercased()) {\n        \
    \    continue\n        }\n        r += String(c)\n    }\n    return r\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_oyt819.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            result.append(char)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res: String = text\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    res.removeAll(where: { vowels.contains($0)\
    \ })\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res = \"\"\n    for c in text {\n        if (c != \"a\" && c != \"e\" && c !=\
    \ \"i\" && c != \"o\" && c != \"u\") {\n            res += String(c)\n       \
    \ }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpj37uxy2u/tmpj37uxy2u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdc780ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdc7501b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdc7501988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdc75007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj37uxy2u                        0x0000556b07a5e99b <unavailable> + 6555

    5    libc.so.6                          0x00002acdc79f6460 __libc_start_main +
    245

    6    tmpj37uxy2u                        0x0000556b07a5e199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for letter in text {\n        if !letter.isVowel\
    \ {\n            result.append(letter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpjn0qhwmt.swift:16:20: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if !letter.isVowel {\n            ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res = \"\"\n    for c in text {\n        if !vowels.contains(c) {\n        \
    \    res.append(c)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpjdmgam4_.swift:16:13: error: cannot find 'vowels' in scope\n  \
    \      if !vowels.contains(c) {\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ vowels: [Character] = []\n\tvowels.append(\"a\")\n\tvowels.append(\"e\")\n\t\
    vowels.append(\"i\")\n\tvowels.append(\"o\")\n\tvowels.append(\"u\")\n\tvowels.append(\"\
    A\")\n\tvowels.append(\"E\")\n\tvowels.append(\"I\")\n\tvowels.append(\"O\")\n\
    \tvowels.append(\"U\")\n\tvar ntext: String = \"\"\n\tvar found: Bool = false\n\
    \tfor i in text {\n\t\tfound = false\n\t\tfor j in vowels {\n\t\t\tif i == j {\n\
    \t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\tntext.append(i)\n\
    \t\t}\n\t}\n\treturn ntext\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { $0.lowercased() != \"a\" && $0.lowercased() != \"e\" && $0.lowercased()\
    \ != \"i\" && $0.lowercased() != \"o\" && $0.lowercased() != \"u\" }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  let\
    \ vowels = \"aeiouAEIOU\"\n  var text = text\n  for vowel in vowels {\n    text\
    \ = text.replacingOccurrences(of: String(vowel), with: \"\")\n  }\n  return text\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpj_rm3hkf.swift:17:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    text = text.replacingOccurrences(of: String(vowel),\
    \ with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  var\
    \ str = text\n  str.removeAll { $0 == \"a\" || $0 == \"e\" || $0 == \"i\" || $0\
    \ == \"o\" || $0 == \"u\" || $0 == \"A\" || $0 == \"E\" || $0 == \"I\" || $0 ==\
    \ \"O\" || $0 == \"U\" }\n  return str\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter({(\"aeiouAEIOU\".range(of: $0) == nil)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5eji6tr8.swift:14:39: error: value of type 'String' has no member\
    \ 'range'\n    return text.filter({(\"aeiouAEIOU\".range(of: $0) == nil)})\n \
    \                        ~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for c in text {\n        if (c == \"a\" || c == \"e\" ||\
    \ c == \"i\" || c == \"o\" || c == \"u\" || c == \"A\" || c == \"E\" || c == \"\
    I\" || c == \"O\" || c == \"U\") {\n            continue\n        }\n        result\
    \ += String(c)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    return String(text.filter {!vowels.contains($0)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n\treturn String(text.filter({ !vowels.contains($0) }))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {$0 != \"a\" && $0 != \"A\" && $0 != \"e\" && $0 != \"E\" && $0\
    \ != \"i\" && $0 != \"I\" && $0 != \"o\" && $0 != \"O\" && $0 != \"u\" && $0 !=\
    \ \"U\"}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ TODO: Write some code to solve this coding exercise.\n    var result = \"\"\n\
    \    for c in text {\n        switch c {\n        case \"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n            break\n        default:\n\
    \            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpr8lk9xig/tmpr8lk9xig.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6e534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6e22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6e22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6e22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8lk9xig                        0x000055a69021d3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002abb6e720460 __libc_start_main +
    245

    6    tmpr8lk9xig                        0x000055a69021cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result: String = \"\"\n    for letter in text\
    \ {\n        if (!vowels.contains(letter)) {\n            result.append(letter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ new_text = \"\"\n    for char in text {\n        switch char {\n        case\
    \ \"a\",\"e\",\"i\",\"o\",\"u\":\n            continue\n        default:\n   \
    \         new_text.append(char)\n        }\n    }\n    return new_text\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpeyqg18mi/tmpeyqg18mi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f45c7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f45975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f45975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f459747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyqg18mi                        0x0000555673a0694b <unavailable> + 6475

    5    libc.so.6                          0x00002b7f45e6a460 __libc_start_main +
    245

    6    tmpeyqg18mi                        0x0000555673a06149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res = \"\"\n    for i in text {\n        if i != \"a\" && i != \"e\" && i !=\
    \ \"i\" && i != \"o\" && i != \"u\" {\n            res.append(i)\n        }\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpgk66rgfp/tmpgk66rgfp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b490427fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4903f76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4903f76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4903f757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk66rgfp                        0x000056219352294b <unavailable> + 6475

    5    libc.so.6                          0x00002b490446b460 __libc_start_main +
    245

    6    tmpgk66rgfp                        0x0000562193522149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text.count == 0 {\n        return \"\"\n    }\n    if \"aeiou\".contains(text.last!)\
    \ {\n        return remove_vowels(text: String(text.dropLast()))\n    }\n    return\
    \ remove_vowels(text: String(text.dropLast())) + String(text.last!)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp_q1qr3xr/tmp_q1qr3xr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6360302c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b635fff9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b635fff9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b635fff87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q1qr3xr                        0x000055f5da611b6b <unavailable> + 7019

    5    libc.so.6                          0x00002b63604ee460 __libc_start_main +
    245

    6    tmp_q1qr3xr                        0x000055f5da611369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = text\n    for vowel in vowels {\n\
    \        result = result.replacingOccurrences(of: String(vowel), with: \"\")\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfdh8umgg.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(vowel),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.replacingOccurrences(of: \"[aeiouAEIOU]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp0tagngpq.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0tagngpq.swift:14:78: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                           ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var result = String()\n    for char in text {\n      \
    \  if !vowels.contains(char) {\n            result.append(char)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.characters.filter({ !vowels.contains($0) }).reduce(\"\", +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmph5l1dyvp.swift:14:38: error: cannot find 'vowels' in scope\n  \
    \  return text.characters.filter({ !vowels.contains($0) }).reduce(\"\", +)\n \
    \                                    ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for char in text {\n        if \"aeiouAEIOU\".contains(char)\
    \ {\n            continue\n        }\n        result.append(char)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var result: String = \"\"\n    for letter in text {\n   \
    \     if !vowels.contains(letter) {\n            result.append(letter)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result: String = \"\"\n    for char in text {\n        if !char.is_vowel() {\n\
    \            result.append(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp2j1lfcrk.swift:16:18: error: value of type 'Character' has no member\
    \ 'is_vowel'\n        if !char.is_vowel() {\n            ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"\
    U\"]\n    var vtext = text\n    for v in vowels {\n        vtext = vtext.replacingOccurrences(of:\
    \ v, with: \"\")\n    }\n    return vtext\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmptn3xw3bd.swift:17:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        vtext = vtext.replacingOccurrences(of: v, with:\
    \ \"\")\n                ~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = CharacterSet(charactersIn: \"AEIOUaeiou\")\n    return text.filter\
    \ { !vowels.contains($0.unicodeScalars.first!) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5xitnekd.swift:14:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet(charactersIn: \"AEIOUaeiou\")\n               \
    \  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ String(text.filter { !vowels.contains($0) })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplhxyq29h.swift:14:34: error: cannot find 'vowels' in scope\n  \
    \  return String(text.filter { !vowels.contains($0) })\n                     \
    \            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ value = text\n    for vowel in \"aeiou\" {\n        value = value.replacingOccurrences(of:\
    \ String(vowel), with: \"\")\n    }\n    return value\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpjtyd9wo2.swift:16:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        value = value.replacingOccurrences(of: String(vowel),\
    \ with: \"\")\n                ~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        switch char {\n        case \"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n        \
    \    continue\n        default:\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tvar\
    \ result = String()\n\tfor character in text {\n\t\tif character != \"a\" && character\
    \ != \"A\" && character != \"e\" && character != \"E\" && character != \"i\" &&\
    \ character != \"I\" && character != \"o\" && character != \"O\" && character\
    \ != \"u\" && character != \"U\" {\n\t\t\tresult += String(character)\n\t\t}\n\
    \t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var res = \"\"\n    for c in text {\n        if !vowels.contains(c)\
    \ {\n            res.append(c)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpun0kn2ls/tmpun0kn2ls.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfa5053c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfa4d4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfa4d4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfa4d497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpun0kn2ls                        0x0000563c78fee96b <unavailable> + 6507

    5    libc.so.6                          0x00002abfa523f460 __libc_start_main +
    245

    6    tmpun0kn2ls                        0x0000563c78fee169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ String(text.filter { \"aeiou\".contains($0) == false })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpgs4w6lpu/tmpgs4w6lpu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b850c0f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b850bde7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b850bde7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b850bde67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs4w6lpu                        0x000055cd6e5029db <unavailable> + 6619

    5    libc.so.6                          0x00002b850c2dc460 __libc_start_main +
    245

    6    tmpgs4w6lpu                        0x000055cd6e5021d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.is_vowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfds3nbi1.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'is_vowel'\n    return text.filter { !$0.is_vowel\
    \ }\n                          ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ output = \"\"\n    let vowels = \"aeiou\"\n    for character in text {\n   \
    \     if !vowels.contains(character) {\n            output.append(character)\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmplunhrd2g/tmplunhrd2g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fc1f17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fc1c0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fc1c0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fc1c0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplunhrd2g                        0x000055ddee17096b <unavailable> + 6507

    5    libc.so.6                          0x00002b7fc2103460 __libc_start_main +
    245

    6    tmplunhrd2g                        0x000055ddee170169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpr8lk9xig/tmpr8lk9xig.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb6e534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb6e22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb6e22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb6e22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8lk9xig                        0x000055a69021d3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002abb6e720460 __libc_start_main +
    245

    6    tmpr8lk9xig                        0x000055a69021cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ Good luck!\n    var newText = \"\"\n    for char in text {\n        if char\
    \ != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char != \"u\"\
    \ && char != \"A\" && char != \"E\" && char != \"I\" && char != \"O\" && char\
    \ != \"U\" {\n            newText += String(char)\n        }\n    }\n    return\
    \ newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ String(text.filter { !\"aeiou\".contains($0) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpgxhr0_mp/tmpgxhr0_mp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0136136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0135e2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0135e2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0135e2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxhr0_mp                        0x000055e33590e9db <unavailable> + 6619

    5    libc.so.6                          0x00002b0136322460 __libc_start_main +
    245

    6    tmpgxhr0_mp                        0x000055e33590e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ new_string = \"\"\n    for char in text {\n        switch char {\n        case\
    \ \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n    \
    \        continue\n        default:\n            new_string.append(char)\n   \
    \     }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.replacingOccurrences(of: \"[AEIOUaeiou]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpgwk6npb2.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"[AEIOUaeiou]\"\
    , with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwk6npb2.swift:14:78: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return text.replacingOccurrences(of: \"[AEIOUaeiou]\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                           ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var textWithoutVowels = \"\"\n    for char in text {\n\
    \        if !vowels.contains(char) {\n            textWithoutVowels.append(char)\n\
    \        }\n    }\n    return textWithoutVowels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp8kgtdubx/tmp8kgtdubx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af04ce01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af04caf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af04caf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af04caf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kgtdubx                        0x000055ac3598b96b <unavailable> + 6507

    5    libc.so.6                          0x00002af04cfed460 __libc_start_main +
    245

    6    tmp8kgtdubx                        0x000055ac3598b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !\"aeiou\".contains($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpoiwpvipf/tmpoiwpvipf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33f2146c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33f1e3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33f1e3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33f1e3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiwpvipf                        0x000055a92bdf38fb <unavailable> + 6395

    5    libc.so.6                          0x00002b33f2332460 __libc_start_main +
    245

    6    tmpoiwpvipf                        0x000055a92bdf30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        switch char {\n        case \"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n        \
    \    continue\n        default:\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for letter in text {\n \
    \       if !vowels.contains(letter) {\n            result.append(letter)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter {!vowels.contains($0)})\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var new_text = \"\"\n    for char in text {\n      \
    \  if !vowels.contains(char) {\n            new_text.append(char)\n        }\n\
    \    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpezzg8dh_/tmpezzg8dh_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1956469c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1956160b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1956160988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b195615f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezzg8dh_                        0x000055c5c1bab96b <unavailable> + 6507

    5    libc.so.6                          0x00002b1956655460 __libc_start_main +
    245

    6    tmpezzg8dh_                        0x000055c5c1bab169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter{ !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpgrclqtyo.swift:14:29: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter{ !$0.isVowel }\n\
    \                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ chars = text.characters\n    let vowels = Set(\"aeiou\")\n    let result = chars.filter\
    \ { !vowels.contains($0) }\n    return String(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2gg7cr3.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = text.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !is_vowel($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmplzl_99vf.swift:14:27: error: cannot find 'is_vowel' in scope\n\
    \    return text.filter { !is_vowel($0) }\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var buffer = \"\"\n    for char in text {\n        if\
    \ !vowels.contains(char) {\n            buffer.append(char)\n        }\n    }\n\
    \    return buffer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n\treturn String(text.filter({!vowels.contains($0)}))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ vowels = Set<Character>()\n    vowels.insert(\"a\")\n    vowels.insert(\"e\"\
    )\n    vowels.insert(\"i\")\n    vowels.insert(\"o\")\n    vowels.insert(\"u\"\
    )\n    vowels.insert(\"A\")\n    vowels.insert(\"E\")\n    vowels.insert(\"I\"\
    )\n    vowels.insert(\"O\")\n    vowels.insert(\"U\")\n    return String(text.filter\
    \ { !vowels.contains($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.replacingOccurrences(of: \"a|A|e|E|i|I|o|O|u|U\", with: \"\", options:\
    \ .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpceugv1zr.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"a|A|e|E|i|I|o|O|u|U\"\
    , with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpceugv1zr.swift:14:85: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return text.replacingOccurrences(of: \"a|A|e|E|i|I|o|O|u|U\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                                  ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.is_vowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfds3nbi1.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'is_vowel'\n    return text.filter { !$0.is_vowel\
    \ }\n                          ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        if char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmppzk0x15a/tmppzk0x15a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6188da4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6188a9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6188a9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6188a9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzk0x15a                        0x00005582a16fb94b <unavailable> + 6475

    5    libc.so.6                          0x00002b6188f90460 __libc_start_main +
    245

    6    tmppzk0x15a                        0x00005582a16fb149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"\
    U\"]\n    var result = \"\"\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            result += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ return your answer\n    var result: String = \"\"\n    for ch in text {\n  \
    \      if ch != \"a\" && ch != \"e\" && ch != \"i\" && ch != \"o\" && ch != \"\
    u\" {\n            result += String(ch)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp49oxaon6/tmp49oxaon6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2557e36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2557b2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2557b2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2557b2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49oxaon6                        0x000055ad0fd1399b <unavailable> + 6555

    5    libc.so.6                          0x00002b2558022460 __libc_start_main +
    245

    6    tmp49oxaon6                        0x000055ad0fd13199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ lowercase = text.lowercased()\n    lowercase = lowercase.replacingOccurrences(of:\
    \ \"a\", with: \"\")\n    lowercase = lowercase.replacingOccurrences(of: \"e\"\
    , with: \"\")\n    lowercase = lowercase.replacingOccurrences(of: \"i\", with:\
    \ \"\")\n    lowercase = lowercase.replacingOccurrences(of: \"o\", with: \"\"\
    )\n    lowercase = lowercase.replacingOccurrences(of: \"u\", with: \"\")\n   \
    \ return lowercase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpt536ivoa.swift:15:27: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    lowercase = lowercase.replacingOccurrences(of: \"\
    a\", with: \"\")\n                ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt536ivoa.swift:16:27:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    lowercase\
    \ = lowercase.replacingOccurrences(of: \"e\", with: \"\")\n                ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt536ivoa.swift:17:27: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    lowercase = lowercase.replacingOccurrences(of:\
    \ \"i\", with: \"\")\n                ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt536ivoa.swift:18:27:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    lowercase\
    \ = lowercase.replacingOccurrences(of: \"o\", with: \"\")\n                ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt536ivoa.swift:19:27: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    lowercase = lowercase.replacingOccurrences(of:\
    \ \"u\", with: \"\")\n                ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set(\"aeiouAEIOU\")\n    return String(text.filter({!vowels.contains($0)}))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { \"aeiouAEIOU\".contains($0) == false }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result: String = \"\"\n    for c in text {\n\
    \        if !vowels.contains(c) {\n            result.append(c)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {$0 != \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0\
    \ != \"u\" && $0 != \"A\" && $0 != \"E\" && $0 != \"I\" && $0 != \"O\" && $0 !=\
    \ \"U\"}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.is_vowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpfds3nbi1.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'is_vowel'\n    return text.filter { !$0.is_vowel\
    \ }\n                          ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var result: String = \"\"\n    for char in text {\n  \
    \      if !vowels.contains(char) {\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter {\n        \"aeiou\".contains($0) == false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpudn2yztg/tmpudn2yztg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad20dc98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad20d98fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad20d98f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad20d98e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudn2yztg                        0x00005651cffde8fb <unavailable> + 6395

    5    libc.so.6                          0x00002ad20de84460 __libc_start_main +
    245

    6    tmpudn2yztg                        0x00005651cffde0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n\tlet result = text.filter {\n\t\t(c: Character) -> Bool in\n\
    \t\t!vowels.contains(c)\n\t}\n\treturn String(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ your code here\n    var temp = text\n    let vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    for char\
    \ in temp {\n        if vowels.contains(char) {\n            temp.remove(at: temp.firstIndex(of:\
    \ char)!)\n        }\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for c in text {\n        if !(c == \"a\" || c == \"e\" ||\
    \ c == \"i\" || c == \"o\" || c == \"u\" || c == \"A\" || c == \"E\" || c == \"\
    I\" || c == \"O\" || c == \"U\") {\n            result += String(c)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_oyt819.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpu_oyt819.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n\tlet\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n\treturn String(text.filter({!vowels.contains($0)}))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var result = \"\"\n    for character in text {\n   \
    \     if !vowels.contains(character) {\n            result.append(character)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpvz3a_gom/tmpvz3a_gom.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74619c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74616c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74616c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74616bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz3a_gom                        0x0000556b1193796b <unavailable> + 6507

    5    libc.so.6                          0x00002b7461bb5460 __libc_start_main +
    245

    6    tmpvz3a_gom                        0x0000556b11937169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"\
    U\"]\n    var result = text\n    for vowel in vowels {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpoxbmuptb.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: vowel,\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ clean_text = \"\"\n    for letter in text {\n        if(letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\") {\n     \
    \       clean_text += String(letter)\n        }\n    }\n    return clean_text\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpljsf61i3/tmpljsf61i3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e0cffbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e0ccf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e0ccf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e0ccf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljsf61i3                        0x0000556c2825299b <unavailable> + 6555

    5    libc.so.6                          0x00002b6e0d1e7460 __libc_start_main +
    245

    6    tmpljsf61i3                        0x0000556c28252199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    for c in text {\n        if !vowels.contains(c)\
    \ {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ text = text\n    let vowels: Set<Character> = [\"a\", \"A\", \"e\", \"E\", \"\
    i\", \"I\", \"o\", \"O\", \"u\", \"U\"]\n    text.removeAll(where: { vowels.contains($0)\
    \ })\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.replacingOccurrences(of: \"[aeiou]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpej8rjfgs.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"[aeiou]\"\
    , with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpej8rjfgs.swift:14:73: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return text.replacingOccurrences(of: \"[aeiou]\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                      ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"\
    U\"]\n    var result = \"\"\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            result += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ chars = Array(text)\n    var start = 0\n    var end = chars.count - 1\n    while\
    \ start <= end {\n        while start <= end && !vowels.contains(chars[start])\
    \ {\n            start += 1\n        }\n        while start <= end && !vowels.contains(chars[end])\
    \ {\n            end -= 1\n        }\n        if start <= end {\n            chars.swapAt(start,\
    \ end)\n            start += 1\n            end -= 1\n        }\n    }\n    return\
    \ String(chars)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmphfcbpf8x.swift:18:32: error: cannot find 'vowels' in scope\n  \
    \      while start <= end && !vowels.contains(chars[start]) {\n              \
    \                 ^~~~~~\n/tmp/tmphfcbpf8x.swift:21:32: error: cannot find 'vowels'\
    \ in scope\n        while start <= end && !vowels.contains(chars[end]) {\n   \
    \                            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var result = \"\"\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            result += String(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var text = text\n    for vowel in vowels {\n        text = text.replacingOccurrences(of:\
    \ vowel, with: \"\")\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpin9owbz1.swift:17:21: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        text = text.replacingOccurrences(of: vowel,\
    \ with: \"\")\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\"])\n    return String(text.characters.filter { !vowels.contains($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpg3pv6a72.swift:15:61: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return String(text.characters.filter\
    \ { !vowels.contains($0) })\n                                                \
    \            ^\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ word = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    for letter in text {\n        if\
    \ !vowels.contains(letter) {\n            word.append(letter)\n        }\n   \
    \ }\n    return word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"\
    U\"]\n    var ret = \"\"\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            ret.append(char)\n        }\n    }\n    return ret\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var result = \"\"\n    for char in text {\n        if vowels.contains(char)\
    \ {\n            continue\n        }\n        result.append(char)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ >> write your solution here <<\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    let newText = text.characters.filter({!vowels.contains(String($0))})\n\
    \    return String(newText)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpoizjs1kp.swift:16:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let newText = text.characters.filter({!vowels.contains(String($0))})\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ TODO: Write remove_vowels here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpoikvhyrr/tmpoikvhyrr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b634aae7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b634a7deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b634a7de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b634a7dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoikvhyrr                        0x000055781e2ff3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b634acd3460 __libc_start_main +
    245

    6    tmpoikvhyrr                        0x000055781e2fef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\"\
    , \"u\", \"U\"]\n    var result: String = \"\"\n    for char in text {\n     \
    \   if !vowels.contains(char) {\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"]\n    var res = \"\"\n    for char in text {\n        if vowels.contains(char)\
    \ {\n            continue\n        }\n        res.append(char)\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.filter { \"aeiou\".contains($0) == false }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpro59ukd5/tmpro59ukd5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcd5dafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcd5aa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcd5aa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcd5aa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpro59ukd5                        0x0000555b9cb908fb <unavailable> + 6395

    5    libc.so.6                          0x00002afcd5f9b460 __libc_start_main +
    245

    6    tmpro59ukd5                        0x0000555b9cb900f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  return\
    \ text.filter { (l: Character) -> Bool in\n    l != \"a\" && l != \"A\" && l !=\
    \ \"e\" && l != \"E\" && l != \"i\" && l != \"I\" && l != \"o\" && l != \"O\"\
    \ && l != \"u\" && l != \"U\"\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ String(text.filter { !$0.is_vowel() })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpt_its_5g.swift:14:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'is_vowel'\n    return String(text.filter { !$0.is_vowel()\
    \ })\n                                 ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ return_string = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n    for character in text {\n        if !vowels.contains(String(character))\
    \ {\n            return_string.append(character)\n        }\n    }\n    return\
    \ return_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter({!vowels.contains($0)}))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n  let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n  return String(text.filter {!vowels.contains($0)})\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: CharacterSet = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.unicodeScalars.filter { !vowels.contains($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\") ==\
    \ \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp1lk4n1zt.swift:14:17: error: cannot find type 'CharacterSet' in\
    \ scope\n    let vowels: CharacterSet = [\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    A\", \"E\", \"I\", \"O\", \"U\"]\n                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    var text_without_vowels = \"\"\n    for char in text {\n        if !vowels.contains(String(char))\
    \ {\n            text_without_vowels += String(char)\n        }\n    }\n    return\
    \ text_without_vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.lowercased().replacingOccurrences(of: \"[a, e, i, o, u]\", with: \"\",\
    \ options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpzz733oi8.swift:14:30: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.lowercased().replacingOccurrences(of:\
    \ \"[a, e, i, o, u]\", with: \"\", options: .regularExpression)\n           ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzz733oi8.swift:14:94: error: cannot infer contextual\
    \ base in reference to member 'regularExpression'\n    return text.lowercased().replacingOccurrences(of:\
    \ \"[a, e, i, o, u]\", with: \"\", options: .regularExpression)\n            \
    \                                                                            \
    \    ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vovels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    return text.filter { vovels.contains($0) == false }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp5t8j0gk1.swift:15:42: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return text.filter\
    \ { vovels.contains($0) == false }\n                                         ^\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for ch in text {\n        if ch != \"a\" && ch != \"e\" &&\
    \ ch != \"i\" && ch != \"o\" && ch != \"u\" {\n            result += String(ch)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpqn36u9un/tmpqn36u9un.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77dcb06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77dc7fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77dc7fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77dc7fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqn36u9un                        0x00005634bbfd499b <unavailable> + 6555

    5    libc.so.6                          0x00002b77dccf2460 __libc_start_main +
    245

    6    tmpqn36u9un                        0x00005634bbfd4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    return\
    \ text.replacingOccurrences(of: \"[aeiou]\", with: \"\", options: .regularExpression)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpej8rjfgs.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"[aeiou]\"\
    , with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpej8rjfgs.swift:14:73: error: cannot infer contextual base in reference\
    \ to member 'regularExpression'\n    return text.replacingOccurrences(of: \"[aeiou]\"\
    , with: \"\", options: .regularExpression)\n                                 \
    \                                      ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    if\
    \ text.isEmpty {\n        return \"\"\n    }\n    if text.count == 1 {\n     \
    \   if is_vowel(character: text[0]) {\n            return \"\"\n        } else\
    \ {\n            return text\n        }\n    }\n    let front = text[0]\n    let\
    \ back = remove_vowels(text: String(text[1...]))\n    if is_vowel(character: front)\
    \ {\n        return back\n    } else {\n        return String(front) + back\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(remove_vowels(text: \"\"\
    ) == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\
    )\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpm2yv31ou.swift:18:12: error: cannot find 'is_vowel' in scope\n\
    \        if is_vowel(character: text[0]) {\n           ^~~~~~~~\n/tmp/tmpm2yv31ou.swift:24:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    let front = text[0]\n                ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpm2yv31ou.swift:25:43:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n    let back = remove_vowels(text:\
    \ String(text[1...]))\n                                          ^~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpm2yv31ou.swift:26:8: error: cannot\
    \ find 'is_vowel' in scope\n    if is_vowel(character: front) {\n       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ mutableText = text\n    for vowel in vowels {\n        mutableText = mutableText.replacingOccurrences(of:\
    \ vowel, with: \"\")\n    }\n    return mutableText\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpwyh7w0zj.swift:15:18: error: cannot find 'vowels' in scope\n  \
    \  for vowel in vowels {\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    return String(text.filter({!vowels.contains($0)}))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: CharacterSet = CharacterSet(charactersIn: \"aeiouAEIOU\")\n    return\
    \ text.components(separatedBy: vowels).joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdj6x6sed.swift:14:17: error: cannot find type 'CharacterSet' in\
    \ scope\n    let vowels: CharacterSet = CharacterSet(charactersIn: \"aeiouAEIOU\"\
    )\n                ^~~~~~~~~~~~\n/tmp/tmpdj6x6sed.swift:15:17: error: value of\
    \ type 'String' has no member 'components'\n    return text.components(separatedBy:\
    \ vowels).joined()\n           ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ res = \"\"\n    for element in text.uppercased() {\n        if element != \"\
    A\" && element != \"E\" && element != \"I\" && element != \"O\" && element !=\
    \ \"U\" {\n            res.append(element)\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpmsh9_5l8/tmpmsh9_5l8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc7e52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc7b49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc7b49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc7b487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmsh9_5l8                        0x000055c3d073a645 <unavailable> + 5701

    5    libc.so.6                          0x00002afdc803e460 __libc_start_main +
    245

    6    tmpmsh9_5l8                        0x000055c3d073a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for letter in text {\n        switch letter {\n        case\
    \ \"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"U\":\n    \
    \        break\n        default:\n            result.append(letter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ string = text\n    let vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"\
    o\", \"O\", \"u\", \"U\"]\n    string = string.filter { !vowels.contains($0)}\n\
    \    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp91gwx5s3.swift:16:47: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    string = string.filter\
    \ { !vowels.contains($0)}\n                                              ^\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels = CharacterSet(charactersIn: \"aeiouAEIOU\")\n    let result = text.trimmingCharacters(in:\
    \ vowels)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpogqprkxh.swift:14:18: error: cannot find 'CharacterSet' in scope\n\
    \    let vowels = CharacterSet(charactersIn: \"aeiouAEIOU\")\n               \
    \  ^~~~~~~~~~~~\n/tmp/tmpogqprkxh.swift:15:23: error: value of type 'String' has\
    \ no member 'trimmingCharacters'\n    let result = text.trimmingCharacters(in:\
    \ vowels)\n                 ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ result = \"\"\n    for char in text {\n        if !is_vowel(letter: char) {\n\
    \            result.append(char)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmp9pcos2dr.swift:16:13: error: cannot find 'is_vowel' in scope\n\
    \        if !is_vowel(letter: char) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    //\
    \ TODO: student implement this.\n    return \"\";\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp16hl__q8/tmp16hl__q8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5f38a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5f359cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5f359c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5f359b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16hl__q8                        0x0000560fd28c93f5 <unavailable> + 5109

    5    libc.so.6                          0x00002af5f3a91460 __libc_start_main +
    245

    6    tmp16hl__q8                        0x0000560fd28c8f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    var index = text.startIndex\n    var out = \"\"\n    while\
    \ index != text.endIndex {\n        let index2 = text.index(after: index)\n  \
    \      let character = text[index]\n        if !vowels.contains(character) {\n\
    \            out.append(character)\n        }\n        index = index2\n    }\n\
    \    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text:\
    \ \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n\
    /// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text:\
    \ \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    var\
    \ text_without_vowels = \"\"\n    let vowels = \"aeiou\"\n    for char in text\
    \ {\n        if !vowels.contains(char) {\n            text_without_vowels.append(char)\n\
    \        }\n    }\n    return text_without_vowels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmpq729w6ul/tmpq729w6ul.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f14ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494ee45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494ee45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494ee447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq729w6ul                        0x0000556341f0196b <unavailable> + 6507

    5    libc.so.6                          0x00002b494f33a460 __libc_start_main +
    245

    6    tmpq729w6ul                        0x0000556341f01169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978639
