name: HumanEval_78_hex_key
language: swift
prompt: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>>\
  \ hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n///\
  \ >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n\
  /// 2\nfunc hex_key(num: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
  \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
  \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
  \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
completions: ["\t\n\t// hex to decimal\n\tvar decimal = 0\n\tfor (index, character)\
    \ in num.uppercased().characters.enumerated() {\n\t\tlet power = num.characters.count\
    \ - 1 - index\n\t\tlet value = hexValue(character)\n\t\tdecimal += value * Int(pow(16.0,\
    \ Double(power)))\n\t}\n\t\n\t// decimal to binary\n\tvar binary = \"\"\n\tvar\
    \ i = decimal\n\twhile i > 0 {\n\t\tbinary = String(i % 2) + binary\n\t\ti /=\
    \ 2\n\t}\n\t\n\t// binary to decimal\n\tvar count = 0\n\tfor (index, character)\
    \ in binary.characters.enumerated() {\n\t\tlet power = binary.characters.count\
    \ - 1 - index\n\t\tcount += Int(String(character))! * Int(pow(2.0, Double(power)))\n\
    \t}\n\t\n\tvar primes = 0\n\tvar i2 = 2\n\twhile i2 <= count {\n\t\tif count %\
    \ i2 == 0 {\n\t\t\tprimes += 1\n\t\t\tcount /= i2\n\t\t} else {\n\t\t\ti2 += 1\n\
    \t\t}\n\t}\n\t\n\treturn primes", "    let primes: [Character] = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    var result = 0\n    for ch in num {\n     \
    \   if primes.contains(ch) {\n            result += 1\n        }\n    }\n    return\
    \ result", '    return 0', "\tlet value: [Character] = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n\tlet prime: [Int] = [2, 3, 5, 7, 11, 13]\n\tlet a = num.map { Int(String($0),\
    \ radix: 16)! }\n\treturn num.count == 0 ? 0 : a.map{ prime.contains($0) ? 1 :\
    \ 0 }.reduce(0, +)", "    guard num.count > 0 else { return 0 }\n    return num.reduce(0)\
    \ { (counter, char) -> Int in\n        if \"2357BD\".contains(char) {\n      \
    \      return counter + 1\n        }\n        return counter\n    }", "    if\
    \ num.isEmpty {\n        return 0\n    }\n    let hex = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    let prime = [2, 3, 5, 7, 11, 13]\n   \
    \ var count = 0\n    for c in num {\n        if prime.contains(hex[Int(String(c),\
    \ radix: 16)!]) {\n            count += 1\n        }\n    }\n    return count",
  "    let map: [Character: Int] = [\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\"\
    : 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"\
    C\": 12, \"D\": 13, \"E\": 14, \"F\": 15]\n    var count = 0\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    for char in num {\n        if let value = map[char]\
    \ {\n            if primes.contains(value) {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count", '    return num.count', '    return
    num.compactMap { Int(String($0), radix: 16) }.filter { n in n == 2 || n == 3 ||
    n == 5 || n == 7 || n == 11 || n == 13 }.count', "  let hexDigits = Set(\"0123456789ABCDEF\"\
    )\n  let primes = [2, 3, 5, 7, 11, 13]\n  return num.reduce(0) {\n    ($1.uppercased()\
    \ == $1 && hexDigits.contains($1) && primes.contains(Int($1, radix: 16)!)) ? $0\
    \ + 1 : $0\n  }", "    var count = 0\n    for i in num {\n        switch i {\n\
    \        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n            count +=\
    \ 1\n        default:\n            break\n        }\n    }\n    return count",
  "    var count: Int = 0\n    for (char) in num {\n        let str = String(char)\n\
    \        guard let val = Int(str, radix: 16) else {\n            continue\n  \
    \      }\n        if val.isPrime {\n            count += 1\n        }\n    }\n\
    \    return count", "    var primes = [2, 3, 5, 7, 11, 13]\n    var result = 0\n\
    \    for char in num {\n        if let digit = Int(String(char), radix: 16) {\n\
    \            if primes.contains(digit) {\n                result += 1\n      \
    \      }\n        }\n    }\n    return result", "    let numbers = [0x00, 0x01,\
    \ 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,\
    \ 0x0F]\n    let primeNumbers = [0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D]\n    var\
    \ result = 0\n    for letter in num {\n        if primeNumbers.contains(letter.wholeNumberValue\
    \ ?? 0) {\n            result += 1\n        }\n    }\n    return result", "  \
    \  let count = Array(num).count\n    var key = 0\n    for i in 0..<count {\n \
    \       let string = String(Array(num)[i])\n        if let number = Int(string,\
    \ radix: 16) {\n            if isPrime(n: number) {\n                key += 1\n\
    \            }\n        }\n    }\n    return key", "    guard num.count > 0 else\
    \ { return 0 }\n    let primes = Set(\"2357BD\")\n    let chars = num.uppercased().map\
    \ { String($0) }\n    let count = chars.filter { primes.contains($0) }.count\n\
    \    return count", "    let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    var count = 0\n    for ch in num {\n        if primes.contains(String(ch))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let HEX_PRIMES\
    \ = [2, 3, 5, 7, 11, 13]\n    let hex = Set(\"0123456789ABCDEF\")\n    var result\
    \ = 0\n    for c in num {\n        if !hex.contains(c) {\n            return 0\n\
    \        }\n        result += HEX_PRIMES.contains(c.integerValue()) ? 1 : 0\n\
    \    }\n    return result", "    let primes = Set([\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"])\n    return num.uppercased().filter { primes.contains($0) }.count",
  "    let primes: [Int] = [2, 3, 5, 7, 11, 13]\n    var count = 0\n    let chars\
    \ = Array(num)\n    for c in chars {\n        let v = hexValue(c)\n        if\
    \ primes.contains(v) {\n            count += 1\n        }\n    }\n    return count",
  "  let hex_prime = [2, 3, 5, 7, 11, 13]\n  var sum: Int = 0\n  for hex in num {\n\
    \    if hex.isHexDigit, let int_hex = hex.wholeNumberValue {\n      for prime\
    \ in hex_prime {\n        if int_hex == prime {\n          sum += 1\n        }\n\
    \      }\n    }\n  }\n  return sum", "    guard num.count > 0 else {\n       \
    \ return 0\n    }\n    return num.map { String($0) }.reduce(0) { $0 + (isPrime(s:\
    \ $1) ? 1 : 0) }", "    var sum = 0\n    for char in num {\n        if char ==\
    \ \"2\" || char == \"3\" || char == \"5\" || char == \"7\" ||\n           char\
    \ == \"B\" || char == \"D\" {\n            sum += 1\n        }\n    }\n    return\
    \ sum", '    return 0', "    let charPrimes = [\n        \"2\", \"3\", \"5\",\
    \ \"7\", \"B\", \"D\",\n    ]\n    let chars = num.uppercased().map { String($0)\
    \ }\n    let count = chars.filter { charPrimes.contains($0) }.count\n    return\
    \ count", '    return 0', "    var count: Int = 0\n    for char in num {\n   \
    \     switch char {\n        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n\
    \            count += 1\n        default:\n            break\n        }\n    }\n\
    \    return count", "    var numstr = num\n    let hex2int: [Character: Int] =\
    \ [\n        \"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\"\
    : 6, \"7\": 7, \"8\": 8, \"9\": 9,\n        \"A\": 10, \"B\": 11, \"C\": 12, \"\
    D\": 13, \"E\": 14, \"F\": 15\n    ]\n    var sum = 0\n    var counter = 0\n \
    \   while numstr.count > 0 {\n        let i = hex2int[numstr.removeFirst()]!\n\
    \        sum += i\n        if i % 2 == 1 {\n            counter += 1\n       \
    \ }\n    }\n    return counter", "    let primes = [\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"]\n    return num.filter { primes.contains($0) }.count", "    let\
    \ hexes = [(\"0\", 0), (\"1\", 1), (\"2\", 2), (\"3\", 3), (\"4\", 4),\n     \
    \            (\"5\", 5), (\"6\", 6), (\"7\", 7), (\"8\", 8), (\"9\", 9),\n   \
    \              (\"A\", 10), (\"B\", 11), (\"C\", 12), (\"D\", 13), (\"E\", 14),\
    \ (\"F\", 15)]\n    var primes = [2, 3, 5, 7, 11, 13]\n    var counts = 0\n  \
    \  for char in num {\n        let letter = String(char)\n        for element in\
    \ hexes {\n            if element.0 == letter {\n                for num in primes\
    \ {\n                    if element.1 == num {\n                        counts\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return counts", "    var primeCount = 0\n    for hexChar in num {\n\
    \        if let hexInt = Int(String(hexChar), radix: 16) {\n            if [2,\
    \ 3, 5, 7, 11, 13].contains(hexInt) {\n                primeCount += 1\n     \
    \       }\n        }\n    }\n    return primeCount", "    let hexDigits = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5, 7, 11, 13]\n    var\
    \ count = 0\n    let str = Array(num.uppercased())\n    for i in str {\n     \
    \   if hexDigits.contains(String(i)) {\n            if primes.contains(hexDigits.firstIndex(of:\
    \ String(i))! + 1) {\n                count += 1\n            }\n        }\n \
    \   }\n    return count", '    return 0', '    return 0', '    return 0', "  \
    \  var count = 0\n    let hexDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    for c in num {\n        if hexDigits.contains(String(c)) {\n          \
    \  count += 1\n        }\n    }\n    return count", "    // Write some code to\
    \ compute the result\n    let hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"]\n    var primes = 0\n    var test = false\n    for digit in num {\n \
    \       test = false\n        for prime in hex_primes {\n            if digit\
    \ == Character(prime) {\n                primes += 1\n                test = true\n\
    \                break\n            }\n        }\n        if test {\n        \
    \    continue\n        }\n    }\n    return primes", "  let hexAlphabet = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n  let primes = [2, 3, 5, 7, 11, 13]\n  let hexPrimes:\
    \ [String] = hexAlphabet.filter({ primes.contains(Int($0, radix: 16)!) })\n  return\
    \ num.uppercased().filter({ hexPrimes.contains($0) }).count", "    let hexPrimes\
    \ = \"2357BD\"\n    return num.filter { hexPrimes.contains($0) }.count", "   \
    \ let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\"\
    ,\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"]\n    let set = Set(primes)\n    return num.filter { set.contains($0)\
    \ }.count", "    let hexNumbers = [\n        \"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"\n    ]\n    let primeNumbers = [\n        \"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"\n    ]\n    var result = 0\n    for c in num {\n        if primeNumbers.contains(String(c))\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var dict\
    \ = [\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"\
    7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\"\
    : 14, \"F\": 15]\n    var result = 0\n    for char in num {\n        let str =\
    \ String(char)\n        let number = dict[str]\n        if number != nil {\n \
    \           if number! > 1 {\n                var isPrime = true\n           \
    \     for i in 2...number! {\n                    if number! % i == 0 {\n    \
    \                    isPrime = false\n                    }\n                }\n\
    \                if isPrime {\n                    result += 1\n             \
    \   }\n            }\n        }\n    }\n    return result", "    let hex_primes\
    \ = \"2357BD\"\n    return num.filter { hex_primes.contains($0) }.count", "  \
    \  var result = 0\n    let hexaNumbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    for number in num {\n        if let\
    \ index = hexaNumbers.firstIndex(of: String(number)) {\n            if primes.contains(index)\
    \ {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "    let primeNumbersHex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    return num.filter{ primeNumbersHex.contains($0) }.count", '    return 0',
  '    return 0', "\tvar count = 0\n\tfor char in num {\n\t\tif (char == \"2\" ||\
    \ char == \"3\" || char == \"5\" || char == \"7\" || char == \"B\" || char ==\
    \ \"D\") {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count", "    let hexKey = \"\
    0123456789ABCDEF\"\n    let key = num.map { str -> Int in\n        return hexKey.index(of:\
    \ str)?.encodedOffset ?? 0\n    }\n    let primes = [2, 3, 5, 7, 11, 13]\n   \
    \ let sum = key.reduce(0) { (acc, cur) -> Int in\n        return primes.contains(cur)\
    \ ? acc + 1 : acc\n    }\n    return sum", "    let hexDigits = [\n        \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n        \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let primes = [2, 3, 5, 7, 11,\
    \ 13]\n    var sum = 0\n    for digit in num {\n        if let value = hexDigits.firstIndex(of:\
    \ String(digit)) {\n            if primes.contains(value) {\n                sum\
    \ += 1\n            }\n        }\n    }\n    return sum", '    return num.filter(isHexPrime).count',
  "    let hexMap = [0x0: [0, 1, 4, 5, 6, 9, 10, 15],\n                  0x1: [0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x2:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x3:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x4:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x5:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x6:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x7:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x8:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0x9:\
    \ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                  0xA:\
    \ [2, 3, 5, 7, 11, 13],\n                  0xB: [2, 3, 5, 7, 11, 13],\n      \
    \            0xC: [2, 3, 5, 7, 11, 13],\n                  0xD: [2, 3, 5, 7, 11,\
    \ 13],\n                  0xE: [2, 3, 5, 7, 11, 13],\n                  0xF: [2,\
    \ 3, 5, 7, 11, 13]]\n    let input = num.uppercased()\n    let numSet = hexMap",
  '    return 0', '  return 0', "    guard !num.isEmpty else { return 0 }\n    var\
    \ count = 0\n    let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n   \
    \ for character in num {\n        if primes.contains(String(character)) {\n  \
    \          count += 1\n        }\n    }\n    return count", "    let hexdigits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var results = [String]()\n    for\
    \ d in num {\n        let hex = String(d)\n        if hexdigits.contains(hex)\
    \ {\n            results.append(hex)\n        }\n    }\n    var count = 0\n  \
    \  for result in results {\n        switch result {\n        case \"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\":\n            count += 1\n        default:\n    \
    \        break\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ final = 0\n    let primes = [2, 3, 5, 7, 11, 13]\n    let index = [\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"]\n    for i in num {\n        if let hex = index.firstIndex(of:\
    \ String(i)) {\n            if primes.contains(hex) {\n                count +=\
    \ 1\n            }\n        }\n    }\n    if num.count > 0 {\n        for n in\
    \ num {\n            if primes.contains(Int(String(n), radix: 16)!) {\n      \
    \          final += 1\n            }\n        }\n    }\n    return final", " \
    \   let hex = [Character](\"0123456789ABCDEF\")\n    var result = 0\n    for ch\
    \ in num {\n        if hex.contains(ch) {\n            let s = String(ch)\n  \
    \          if let d = Int(s, radix: 16) {\n                if d == 2 || d == 3\
    \ || d == 5 || d == 7 || d == 11 || d == 13 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var count = 0\n    for hexDigit\
    \ in num {\n        if hex.contains(String(hexDigit)) {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    guard num.count > 0 else {\n  \
    \      return 0\n    }\n    var primes = [2, 3, 5, 7, 11, 13]\n    let hexadecimalDigits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let decimalDigits = Array(hexadecimalDigits[0...9])\n\
    \    let hex2 = Array(hexadecimalDigits[10...15])\n    let hex = hex2.map { $0.unicodeScalars.first!.value\
    \ }\n    let primeNumbers = primes.map { String($0, radix: 16, uppercase: true)\
    \ }\n    let strings = num.compactMap { String($0) }\n    let primeCount = strings.filter\
    \ { primeNumbers.contains($0) }.count\n    let isHex = strings.filter { hexadecimalDigits.contains($0)\
    \ }.count == strings.count\n    if isHex {\n        let withoutDigits = strings.filter\
    \ { !decimalDigits.contains($0) }\n        return withoutDigits.count + primeCount\n\
    \    }\n    return primeCount", "    let primes: [Character] = [\"2\", \"3\",\
    \ \"5\", \"7\", \"B\", \"D\"]\n    return num.compactMap{String($0)}.filter{primes.contains($0.first!)}.count",
  "    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let hexPrimes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for digit in num\
    \ {\n        if hexPrimes.contains(String(digit)) {\n            count += 1\n\
    \        }\n    }\n    return count", "    let primes = Set(\"2357BDF\")\n   \
    \ return num.filter { primes.contains($0) }.count", "    let primes: Set<String>\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { primes.contains($0.description)\
    \ }.count", "    let dict: [Character: Int] = [\"0\": 0, \"1\": 1, \"2\": 2, \"\
    3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10,\
    \ \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15]\n    var count = 0\n\
    \    var primes = [2, 3, 5, 7, 11, 13]\n    if num.isEmpty {\n        return 0\n\
    \    }\n    for letter in num {\n        if dict[letter]! % 2 != 0 && dict[letter]!\
    \ % 3 != 0 && dict[letter]! % 5 != 0 && dict[letter]! % 7 != 0 && dict[letter]!\
    \ % 11 != 0 && dict[letter]! % 13 != 0 {\n            if dict[letter]! == 1 {\n\
    \                continue\n            }\n            count += 1\n        }\n\
    \    }\n    return count", '    return num.filter({ $0.isHex && $0.isPrime }).count',
  "    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime = [0, 0, 1, 1, 0,\
    \ 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0]\n    var count = 0\n    for digit in num {\n\
    \        count += prime[hex.firstIndex(of: String(digit))!]\n    }\n    return\
    \ count", "    let primes = [2, 3, 5, 7, 11, 13]\n    let keyMapping = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n    var sum = 0\n    for letter in num {\n    \
    \    if let key = keyMapping.firstIndex(of: String(letter)) {\n            if\
    \ primes.contains(key) {\n                sum += 1\n            }\n        }\n\
    \    }\n    return sum", "    let primes = Set([\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"])\n    return num.filter { primes.contains($0) }.count", "    let arr\
    \ = Array(num.uppercased())\n    let primes = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    return arr.filter { primes.contains($0) }.count", "    let hexSet\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primesSet = [\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"]\n    let arr = num.uppercased().compactMap{ hexSet.contains($0)\
    \ ? $0 : nil }\n    let count = arr.filter{ primesSet.contains($0) }.count\n \
    \   return count", "\tlet hexadecimal = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16]\n\tlet characters = Array(num.characters)\n\tvar result = 0\n\
    \tvar number = 0\n\tfor character in characters {\n\t\tvar found = false\n\t\t\
    let digit = String(character)\n\t\tswitch digit {\n\t\tcase \"A\":\n\t\t\tnumber\
    \ = 10\n\t\t\tfound = true\n\t\tcase \"B\":\n\t\t\tnumber = 11\n\t\t\tfound =\
    \ true\n\t\tcase \"C\":\n\t\t\tnumber = 12\n\t\t\tfound = true\n\t\tcase \"D\"\
    :\n\t\t\tnumber = 13\n\t\t\tfound = true\n\t\tcase \"E\":\n\t\t\tnumber = 14\n\
    \t\t\tfound = true\n\t\tcase \"F\":\n\t\t\tnumber = 15\n\t\t\tfound = true\n\t\
    \tdefault:\n\t\t\tfound = false\n\t\t}\n\t\tif found == false {\n\t\t\tlet digitToInt\
    \ = Int(digit)\n\t\t\tnumber = digitToInt!\n\t\t}\n\t\tif number == 2 || number\
    \ == 3 || number == 5 || number == 7 || number == 11 || number == 13 {\n\t\t\t\
    result += 1\n\t\t}\n\t}\n\treturn result", "    let arr = num.compactMap { $0.wholeNumberValue\
    \ }\n    return arr.filter { $0 == 2 || $0 == 3 || $0 == 5 || $0 == 7 || $0 ==\
    \ 11 || $0 == 13 }.count", "    var count = 0\n    let num = num.uppercased()\n\
    \    let strArray = Array(num)\n    for i in strArray {\n        let intVal =\
    \ getHexToInt(character: i)\n        if intVal > 1 {\n            var isPrime\
    \ = true\n            for j in 2...intVal-1 {\n                if intVal % j ==\
    \ 0 {\n                    isPrime = false\n                }\n            }\n\
    \            if isPrime {\n                count += 1\n            }\n       \
    \ }\n    }\n    return count", '    return num.filter { "2357B".contains($0) }.count',
  "    let hex = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [11,\
    \ 13, 5, 7, 2, 3]\n    var hexDigits = 0\n    for char in num {\n        var i\
    \ = 0\n        while hex[i] != String(char) {\n            i += 1\n        }\n\
    \        hexDigits += primes[i]\n    }\n    var numDigits = 0\n    for digit in\
    \ String(hexDigits) {\n        if digit == \"2\" || digit == \"3\" || digit ==\
    \ \"5\" || digit == \"7\" || digit == \"1\" {\n            numDigits += 1\n  \
    \      }\n    }\n    return numDigits", "    var count = 0\n    let hexNumber\
    \ = num.compactMap { (char) -> Int? in\n        if let asInt = Int(String(char),\
    \ radix: 16) {\n            return asInt\n        }\n        return nil\n    }\n\
    \    for i in hexNumber {\n        if isPrime(number: i) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let decimal_digits = [0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    let hexadecimal_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let prime_numbers = [2, 3, 5, 7,\
    \ 11, 13]\n    var count = 0\n    for i in 0...(num.count - 1) {\n        if prime_numbers.contains(decimal_digits[hexadecimal_digits.firstIndex(of:\
    \ String(num[num.index(num.startIndex, offsetBy: i)]))!]) {\n            count\
    \ += 1\n        }\n    }\n    return count", "  var primeCount = 0\n  let chars\
    \ = Array(num)\n  let primes = [2, 3, 5, 7, 11, 13]\n  for i in 0..<chars.count\
    \ {\n    if let value = Int(String(chars[i]), radix: 16) {\n      if primes.contains(value)\
    \ {\n        primeCount += 1\n      }\n    }\n  }\n  return primeCount", "   \
    \ let primes = [2, 3, 5, 7, 11, 13]\n    let alphabet: [Character] = [\"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n    var result = 0\n    for letter in num {\n\
    \        if primes.contains(Int(String(letter), radix: 16)!) {\n            result\
    \ += 1\n        } else if alphabet.contains(letter) {\n            result += 1\n\
    \        }\n    }\n    return result", '    return 0', "    let numerics = [\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    let hexAlphabet\
    \ = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let alphabet = numerics + hexAlphabet\n\
    \    let primeNumbers = [2,3,5,7,11,13]\n    var counter = 0\n    for i in num\
    \ {\n        if alphabet.contains(String(i)) {\n            let intValue = Int(String(i),\
    \ radix: 16)!\n            if primeNumbers.contains(intValue) {\n            \
    \    counter += 1\n            }\n        }\n    }\n    return counter", "   \
    \ let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var sum = 0\n \
    \   for char in num {\n        if primes.contains(String(char)) {\n          \
    \  sum += 1\n        }\n    }\n    return sum", "    var out = 0\n    for i in\
    \ num {\n        switch(i) {\n        case \"2\", \"3\", \"5\", \"7\", \"B\",\
    \ \"D\":\n            out += 1\n        default:\n            out += 0\n     \
    \   }\n    }\n    return out", "    let hexDigits: [Character] = [\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"]\n    let primeHexDigits: [Character] = [\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"]\n    var key = 0\n    for digit in num {\n        if\
    \ let _ = hexDigits.firstIndex(of: digit) {\n            if let _ = primeHexDigits.firstIndex(of:\
    \ digit) {\n                key += 1\n            }\n        }\n    }\n    return\
    \ key", "\tguard num.count > 0 else { return 0 }\n\tlet hex_digits: [Character]\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n\tlet primes: [Character] = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"]\n\tvar count = 0\n\tfor ch in num {\n\t\tif hex_digits.contains(ch)\
    \ && primes.contains(ch) {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count", "\t\
    let hex = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\n\tvar result = 0\n\tvar s = num.uppercased()\n\tvar a = Array(s)\n\
    \tfor i in a {\n\t\tif Int(String(i)) == nil {\n\t\t\tlet c = i.asciiValue!\n\t\
    \t\tswitch c {\n\t\t\tcase 65:\n\t\t\t\tif hex.contains(10) {\n\t\t\t\t\tresult\
    \ += 1\n\t", "    let primeDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    return num.map { primeDigits.contains($0.description) ? 1 : 0 }.reduce(0,\
    \ +)", "    let s = \"2357BD\"\n    return num.filter{s.contains($0)}.count",
  "    let dict = [\"A\":10, \"B\":11, \"C\":12, \"D\":13, \"E\":14, \"F\":15]\n \
    \   var result = 0\n    for digit in num {\n        var d: Int\n        if let\
    \ n = dict[String(digit)] {\n            d = n\n        } else {\n           \
    \ d = Int(String(digit))!\n        }\n        if (d == 2 || d == 3 || d == 5 ||\
    \ d == 7 || d == 11 || d == 13) {\n            result += 1\n        }\n    }\n\
    \    return result", "    //Start from 0, to every char of String\n    //check\
    \ if it is in primes array\n    //If it is, add 1 to counter\n\n    let primes\
    \ = [1, 1, 2, 3, 5, 7, 11, 13]\n    var counter = 0\n    let hexArray = Array(num)\n\
    \    for char in hexArray {\n        let currentNum = Int(String(char), radix:\
    \ 16)\n        if primes.contains(currentNum!) {\n            counter += 1\n \
    \       }\n    }\n    return counter", "    let prime = [2, 3, 5, 7, 11, 13]\n\
    \    let hex = \"0123456789ABCDEF\"\n    var result = 0\n    for char in num {\n\
    \        if let index = hex.firstIndex(of: char) {\n            if prime.contains(index)\
    \ {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "    let letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n   \
    \ var count = 0\n    for char in num {\n        if char.isNumber && char.wholeNumberValue!.isPrime\
    \ {\n            count += 1\n        } else if letters.contains(String(char))\
    \ && Int(String(char), radix: 16)!.isPrime {\n            count += 1\n       \
    \ }\n    }\n    return count", "    let primes = [2, 3, 5, 7, 11, 13]\n    let\
    \ hex = num.compactMap { Int(String($0), radix: 16) }\n    return hex.filter {\
    \ primes.contains($0) }.count", '    return num.compactMap { Int(String($0), radix:
    16) }.filter { isPrime($0) }.count', "    let hex = [\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"]\n    var primes = 0\n    for digit in num {\n        let isPrime = hex.filter\
    \ { $0 == String(digit) }.firstIndex(of: String(digit))! > 9\n        if isPrime\
    \ {\n            primes += 1\n        }\n    }\n    return primes", "    var result\
    \ = 0\n    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    for c in num {\n        if hexDigits.contains(String(c))\
    \ {\n            if let index = hexDigits.firstIndex(of: String(c)) {\n      \
    \          if primes.contains(index) {\n                    result += 1\n    \
    \            }\n            }\n        }\n    }\n    return result", "  let hex\
    \ = num.uppercased()\n  let primeMap = [\n    \"0\": false,\n    \"1\": false,\n\
    \    \"2\": true,\n    \"3\": true,\n    \"4\": false,\n    \"5\": true,\n   \
    \ \"6\": false,\n    \"7\": true,\n    \"8\": false,\n    \"9\": false,\n    \"\
    A\": false,\n    \"B\": true,\n    \"C\": false,\n    \"D\": true,\n    \"E\"\
    : false,\n    \"F\": false,\n  ]\n  return hex.compactMap {primeMap[String($0)]}.reduce(0,\
    \ {$0 + ($1 ? 1 : 0)})", "    var count = 0\n    let s = num.uppercased()\n  \
    \  let primes = \"2357BD\"\n    let dict = [\"0\": 0, \"1\": 1, \"2\": 2, \"3\"\
    : 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"\
    B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15]\n    for c in s {\n     \
    \   if primes.contains(c) {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var result = 0\n    let numbers: [String] = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"]\n    for character in num {\n        if numbers.contains(String(character))\
    \ {\n            if let value = Int(String(character), radix: 16) {\n        \
    \        if isPrime(number: value) {\n                    result += 1\n      \
    \          }\n            }\n        }\n    }\n    return result", "    // your\
    \ code here\n    var count: Int = 0\n    for char in num.uppercased() {\n    \
    \    switch char {\n        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n \
    \           count += 1\n        default:\n            break\n        }\n    }\n\
    \    return count", "    var result = 0\n    for c in num {\n        if c == \"\
    2\" || c == \"3\" || c == \"5\" || c == \"7\" || c == \"B\" || c == \"D\" {\n\
    \            result += 1\n        }\n    }\n    return result", "    var hex =\
    \ [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for c in\
    \ num {\n        if hex.contains(String(c)) {\n            count += 1\n      \
    \  }\n    }\n    return count", "    let hexDigits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    let primeHexDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    var count = 0\n    for c in num {\n        if primeHexDigits.contains(String(c))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let numArr\
    \ = num.compactMap { Int(String($0), radix: 16) }\n    return numArr.reduce(0)\
    \ {\n        $1.isPrime() ? $0 + 1 : $0\n    }", "\t// Write your code here\n\t\
    let hex = [Character](\"0123456789ABCDEF\")\n\tlet primes = [Character](\"2357BD\"\
    )\n\tvar count = 0\n\tfor char in num {\n\t\tif primes.contains(char) {\n\t\t\t\
    count += 1\n\t\t}\n\t}\n\treturn count", "    // use a set to store primes, this\
    \ will be more efficient later\n    var primes = Set<Character>()\n    // use\
    \ a character array to store hexa digits\n    let hexaDigits = [Character](\"\
    0123456789ABCDEF\")\n    // loop through all hexa digits\n    for hexaDigit in\
    \ hexaDigits {\n        // check if the hexa digit is a prime number\n       \
    \ if isPrime(Int(String(hexaDigit))!) {\n            // if the digit is a prime,\
    \ add it to the set\n            primes.insert(hexaDigit)\n        }\n    }\n\
    \    // use a variable to count the prime hexa digits in the input string\n  \
    \  var primeCount = 0\n    // loop through all characters in the input string\n\
    \    for character in num {\n        // check if the character is in the set\n\
    \        if primes.contains(character) {\n            // if it is, increase the\
    \ counter\n            primeCount += 1\n        }\n    }\n    // return the prime\
    \ count\n    return primeCount", "    let input = Array(num)\n    var primesFound\
    \ = 0\n    let A = UInt16(\"A\", radix: 16)!\n    let F = UInt16(\"F\", radix:\
    \ 16)!\n    let isPrime: (UInt16) -> Bool = {\n        if $0 <= 1 { return false\
    \ }\n        if $0 == 2 { return true }\n        var divider = 2\n        while\
    \ divider < $0 {\n            if $0 % UInt16(divider) == 0 { return false }\n\
    \            divider += 1\n        }\n        return true\n    }\n    input.forEach\
    \ { char in\n        let digit = UInt16(String(char), radix: 16)!\n        if\
    \ digit >= A && digit <= F {\n            if isPrime(digit - A + 10) { primesFound\
    \ += 1 }\n        } else if isPrime(digit) {\n            primesFound += 1\n \
    \       }\n    }\n    return primesFound", "    var primes: [Int] = [3, 5, 7,\
    \ 11, 13]\n    var dict: [Character: Int] = [\"0\": 0, \"1\": 1, \"2\": 2, \"\
    3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10,\
    \ \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15]\n    var count = 0\n\
    \    for c in num {\n        if primes.contains(dict[c]!) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    // Your code goes here:\n  \
    \  return 0", "    let array = Array(num)\n    var count = 0\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    for item in array {\n        if primes.contains(item.asciiValue!\
    \ % 48) {\n            count += 1\n        }\n    }\n    return count", "    let\
    \ primes = [2, 3, 5, 7, 11, 13]\n    var result = 0\n    for char in num {\n \
    \       if let num = Int(String(char), radix: 16) {\n            if primes.contains(num)\
    \ {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "    let hexNumbers = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\
    \    var result = 0\n    for c in num {\n        if hexNumbers.contains(String(c))\
    \ {\n            result += 1\n        }\n    }\n    return result", "    // your\
    \ code here\n    var res = 0\n    let arr = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"]\n    if num.isEmpty {\n        return 0\n    }\n    for c in num {\n\
    \        if arr.contains(String(c)) {\n            res += 1\n        }\n    }\n\
    \    return res", "\t// # 1- Convert num to decimal (Int)\n\tlet dec = Int(num,\
    \ radix: 16)\n\t// # 2- Convert dec to Array\n\tvar xArray = Array(String(dec!,\
    \ radix: 10))\n\txArray = xArray.map{Int(String($0))!}\n\t// # 3- Trim non-Prime\
    \ digits\n\tvar yArray = xArray.filter {$0 == 2 || $0 == 3 || $0 == 5 || $0 ==\
    \ 7 || $0 == 11 || $0 == 13}\n\t// # 4- Count remaining digits\n\treturn yArray.count",
  "    var result = 0\n    for element in num {\n        if element == \"2\" || element\
    \ == \"3\" || element == \"5\" || element == \"7\" || element == \"B\" || element\
    \ == \"D\" {\n            result += 1\n        }\n    }\n    return result", " \
    \   var sum = 0\n    for ch in num {\n        if ch == \"2\" || ch == \"3\" ||\
    \ ch == \"5\" || ch == \"7\" || ch == \"B\" || ch == \"D\" {\n            sum\
    \ += 1\n        }\n    }\n    return sum", "    let hex = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"]\n    var primes = 0\n    for i in num {\n        if hex.contains(String(i))\
    \ {\n            if let index = hex.firstIndex(of: String(i)) {\n            \
    \    if index == 1 || index == 3 || index == 5 || index == 7 || index == 11 ||\
    \ index == 13 {\n                    primes += 1\n                }\n        \
    \    }\n        }\n    }\n    return primes", "  let hex = num.uppercased()\n\
    \  let hex_chars = hex.characters.map { (char) -> Int in\n    if let digit = Int(String(char),\
    \ radix: 16) {\n      return digit\n    }\n    return 0\n  }\n  return hex_chars.filter\
    \ { $0 > 1 && $0 % 2 > 0 && $0 % 3 > 0 && $0 % 5 > 0 && $0 % 7 > 0 }.count", " \
    \   let primeHexDigits = [2, 3, 5, 7, 11, 13]\n    var result = 0\n    for c in\
    \ num {\n        if let index = Int(String(c), radix: 16) {\n            if primeHexDigits.contains(index)\
    \ {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "  let hex_digits = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" ]\n  let prime_digits\
    \ = [ \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" ]\n  let _digits = num.characters.flatMap{\
    \ String($0) }\n  return _digits.filter{ prime_digits.contains($0) }.count", " \
    \   let primeHexDigits = \"2357BD\"\n    return num.filter { primeHexDigits.contains($0)\
    \ }.count", '    return 0', '    return 0', "  let hexDigits = [\"2\", \"3\",\
    \ \"5\", \"7\", \"B\", \"D\"]\n  var count = 0\n  for digit in num {\n    if hexDigits.contains(String(digit))\
    \ {\n      count += 1\n    }\n  }\n  return count", "    var total = 0\n    for\
    \ char in num {\n        if char == \"2\" || char == \"3\" || char == \"5\" ||\
    \ char == \"7\" || char == \"B\" || char == \"D\" {\n            total += 1\n\
    \        }\n    }\n    return total", "    let digits = num.filter { String($0).rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"0123456789ABCDEF\")) != nil }\n    let primes =\
    \ [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var sum = 0\n    for char in\
    \ digits {\n        if primes.contains(String(char)) {\n            sum += 1\n\
    \        }\n    }\n    return sum", "    let hexDigits = Array(\"0123456789ABCDEF\"\
    )\n    let primeDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count\
    \ = 0\n    for i in num {\n        if primeDigits.contains(String(i)) {\n    \
    \        count += 1\n        }\n    }\n    return count", "    let primes = [2,\
    \ 3, 5, 7, 11, 13]\n    var result = 0\n    for i in 0..<num.count {\n       \
    \ let strIndex = num.index(num.startIndex, offsetBy: i)\n        let char = num[strIndex]\n\
    \        let hexValue = hexToDecimal(char: char)\n        if primes.contains(hexValue)\
    \ {\n            result += 1\n        }\n    }\n    return result", "    let primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { primes.contains($0)\
    \ }.count", "    var result = 0\n    let primes: Set<Character> = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    for character in num {\n        if primes.contains(character)\
    \ {\n            result += 1\n        }\n    }\n    return result", "    // get\
    \ the hexadecimal values of the letters\n    let nums = num.map { Int(String($0),\
    \ radix: 16)! }\n    let primes = [2, 3, 5, 7, 11, 13]\n    return nums.filter\
    \ { primes.contains($0) }.count", "    return num.filter {\n        hex_num_is_prime(num:\
    \ hex_num_to_decimal(num: String($0)))\n    }.count", "    var cnt = 0\n    var\
    \ num = num\n    while !num.isEmpty {\n        let curr = num.removeFirst()\n\
    \        if [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].contains(curr) {\n    \
    \        cnt += 1\n        }\n    }\n    return cnt", '    return 0', "    var\
    \ sum = 0\n    let hex: Set<Character> = [\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\"]\n    for char in num {\n        if hex.contains(char) {\n            sum\
    \ += 1\n        }\n    }\n    return sum", "    let hexValues = [\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"]\n    var primes = [2, 3, 5, 7, 11, 13]\n    var count =\
    \ 0\n    for letter in num {\n        if hexValues.contains(String(letter)) {\n\
    \            if primes.contains(Int(String(letter), radix: 16)!) {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count", "    //\
    \ TODO: Your solution here.\n    return 0", '    return 0', "    // Iterate through\
    \ the digits\n    // Convert to int\n    // Check if prime\n    // Add to total\n\
    \    return 0", "    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let\
    \ primeHexDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count =\
    \ 0\n    for n in num {\n        if primeHexDigits.contains(String(n)) {\n   \
    \         count += 1\n        }\n    }\n    return count", "    let hex: [Character]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var result = 0\n    for i\
    \ in num {\n        if hex.contains(i) {\n            result += 1\n        }\n\
    \    }\n    return result", "    if num.isEmpty {\n        return 0\n    }\n \
    \   let primes: Set<Character> = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\
    \    return num.reduce(0) {\n        $1.isHexDigit && primes.contains($1) ? $0\
    \ + 1 : $0\n    }", "  if num.isEmpty {\n    return 0\n  }\n  let hexDigits =\
    \ [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\"\
    , \"B\", \"C\", \"D\", \"E\", \"F\"]\n  let set = Set(hexDigits)\n  var primes\
    \ = 0\n  for char in num {\n    if set.contains(String(char)) {\n      primes\
    \ += 1\n    }\n  }\n  return primes", "    var count = 0\n    for val in num {\n\
    \        let hexNum = Int(String(val), radix: 16)\n        var isPrime = true\n\
    \        if hexNum != nil && hexNum! != 1 {\n            for i in 2..<hexNum!\
    \ {\n                if hexNum! % i == 0 {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if isPrime\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    // put your code here\n    return 0", "    let hex = [2, 3, 5, 7, 11, 13]\n\
    \    var result = 0\n    for i in num {\n        if hex.contains(Int(String(i),\
    \ radix: 16)!) {\n            result += 1\n        }\n    }\n    return result",
  "    var res = 0\n    for char in num {\n        let num = Int(String(char), radix:\
    \ 16)\n        switch num {\n        case 2, 3, 5, 7, 11, 13:\n            res\
    \ += 1\n        default:\n            break\n        }\n    }\n    return res",
  "    let primes = \"2357BDEF\"\n    return num.filter { primes.contains($0) }.count",
  "    if num.isEmpty {\n        return 0\n    }\n    var sum = 0\n    let digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    for digit in num {\n     \
    \   if digits.contains(String(digit)) {\n            sum += 1\n        }\n   \
    \ }\n    return sum", "    let number = Int(num, radix: 16) ?? 0\n    let numberArray\
    \ = number.toArray()\n    let primes = [2, 3, 5, 7, 11, 13]\n    return numberArray.filter{primes.contains($0)}.count",
  "    let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.uppercased().filter\
    \ { primes.contains($0) }.count", "    var primesCount = 0\n    let primes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    let numArray = Array(num)\n    for\
    \ symbol in numArray {\n        if primes.contains(String(symbol)) {\n       \
    \     primesCount += 1\n        }\n    }\n    return primesCount", "    var count\
    \ = 0\n    let primes = [11, 13, 2, 3, 5, 7]\n    let hex = [\"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"]\n    for char in num {\n        if hex.contains(String(char))\
    \ {\n            count += 1\n        }\n    }\n    return count", '    return
    0', "    let map : [String: Int] = [\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13,\
    \ \"E\": 14, \"F\": 15]\n    var result = 0\n    var primes = [2, 3, 5, 7, 11,\
    \ 13]\n    for character in num {\n        var value = 0\n        if let char\
    \ = map[String(character)] {\n            value = char\n        } else {\n   \
    \         value = Int(String(character))!\n        }\n        if primes.contains(value)\
    \ {\n            result += 1\n        }\n    }\n    return result", '    return
    0', "    var nums = num.filter { !$0.isWhitespace }\n    var result = 0\n    while\
    \ !nums.isEmpty {\n        let digit = nums.removeFirst()\n        if (Int(String(digit),\
    \ radix: 16) ?? 0).isPrime {\n            result += 1\n        }\n    }\n    return\
    \ result", "    let primes = [2, 3, 5, 7, 11, 13]\n    let hexa = \"0123456789ABCDEF\"\
    \n    let binary = num.compactMap { hexa.firstIndex(of: $0) }\n    return binary.filter\
    \ { primes.contains($0) }.count", "    var count = 0\n    let hex = Array(\"0123456789ABCDEF\"\
    )\n    let primes = Array(\"2357BDEF\")\n    for i in num {\n        if primes.contains(i)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let hexDigits:\
    \ [Character] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes: [Character]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    let array = Array(num)\n \
    \   var primeCount = 0\n    for letter in array {\n        if primes.contains(letter)\
    \ {\n            primeCount += 1\n        }\n    }\n    return primeCount", " \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    var result = 0\n    let hexadecimalToNum:\
    \ [Character: Int] = [\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\"\
    : 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12,\
    \ \"D\": 13, \"E\": 14, \"F\": 15]\n    let numToHexadecimal: [Int: Character]\
    \ = [0: \"0\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7:\
    \ \"7\", 8: \"8\", 9: \"9\", 10: \"A\", 11: \"B\", 12: \"C\", 13: \"D\", 14: \"\
    E\", 15: \"F\"]\n    for hexadecimal in num {\n        if let hexadecimalToNum\
    \ = hexadecimalToNum[hexadecimal] {\n            if primes.contains(hexadecimalToNum)\
    \ {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "    let hexadecimal = \"0123456789ABCDEF\"\n    let primes = [2, 3,\
    \ 5, 7, 11, 13]\n    let charList = Array(num.uppercased())\n    var answer =\
    \ 0\n    for index in 0..<charList.count {\n        if let indexOfDigit = hexadecimal.index(of:\
    \ charList[index]) {\n            if indexOfDigit < 16 {\n                if primes.contains(indexOfDigit)\
    \ {\n                    answer += 1\n                }\n            }\n     \
    \   }\n    }\n    return answer", "    let primes: Set<Character> = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"]\n    let input = Array(num)\n    var result =\
    \ 0\n    for i in input {\n        if primes.contains(i) {\n            result\
    \ += 1\n        }\n    }\n    return result", "    if num.isEmpty {\n        return\
    \ 0\n    }\n    let primes = \"2357BD\"\n    var cnt = 0\n    for char in num\
    \ {\n        if primes.contains(char) {\n            cnt += 1\n        }\n   \
    \ }\n    return cnt", "    var result = 0\n    for i in num {\n        if i ==\
    \ \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"D\"\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    for i in 0..<num.count\
    \ {\n        if hex.contains(num[i]) {\n            result += 1\n        }\n \
    \   }\n    return result", "    let hexPrimes = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    var count = 0\n    for char in num {\n        if hexPrimes.contains(String(char))\
    \ {\n            count += 1\n        }\n    }\n    return count", "  let primes:\
    \ Set<Character> = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  return num.filter\
    \ { primes.contains($0) }.count", "    var count = 0\n    for c in num {\n   \
    \     if c == \"2\" || c == \"3\" || c == \"5\" || c == \"7\" || c == \"B\" ||\
    \ c == \"D\" {\n            count += 1\n        }\n    }\n    return count", " \
    \   let primeHexDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return\
    \ num.characters.filter { primeHexDigits.contains(String($0)) }.count", "    var\
    \ result = 0\n    for char in num {\n        let hex = char.asciiValue!\n    \
    \    if (65...70).contains(hex) {\n            if hex - 55 == 2 || hex - 55 ==\
    \ 3 || hex - 55 == 5 || hex - 55 == 7 || hex - 55 == 11 || hex - 55 == 13 {\n\
    \                result += 1\n            }\n        } else if (48...57).contains(hex)\
    \ {\n            if hex - 48 == 2 || hex - 48 == 3 || hex - 48 == 5 || hex - 48\
    \ == 7 {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "    let primes = [2, 3, 5, 7, 11, 13]\n    var count = 0\n    for\
    \ c in num {\n        guard let digit = Int(String(c), radix: 16) else {\n   \
    \         return 0\n        }\n        for prime in primes {\n            if digit\
    \ == prime {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count", '  return 0', '    return 0', "    let primes = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    return primes.filter({ num.contains($0) }).count",
  '    return 0', "    let primes = Set(\"2357BDF\")\n    return num.filter({ primes.contains($0)\
    \ }).count", '    return 0', "    let hex: Set<Character> = [\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\"]\n    let primes: Set<Character> = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"]\n    var count = 0\n    for c in num {\n        if hex.contains(c)\
    \ && primes.contains(c) {\n            count += 1\n        }\n    }\n    return\
    \ count", "    if num.count == 0 {\n        return 0\n    }\n    var result =\
    \ 0\n    let arrOfHex = num.compactMap { String($0) }\n    for hex in arrOfHex\
    \ {\n        let decimal = Int(hex, radix: 16)\n        if isPrime(decimal!) {\n\
    \            result += 1\n        }\n    }\n    return result", "    let hexDigits\
    \ = [Character](\"0123456789ABCDEF\")\n    let hexPrimes = [2, 3, 5, 7, 11, 13]\n\
    \    var primeCount = 0\n    let ascii = num.unicodeScalars.map { Int($0.value)\
    \ }\n    for digit in ascii {\n        let charIndex = digit - 48\n        if\
    \ charIndex > 1 && charIndex < 17 {\n            let char = String(hexDigits[charIndex])\n\
    \            if hexPrimes.contains(Int(char)!) {\n                primeCount +=\
    \ 1\n            }\n        }\n    }\n    return primeCount", "    // Solution\
    \ 1\n    return num.filter { [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].contains($0)\
    \ }.count\n    \n    // Solution 2\n    var p: [String] = []\n    for c in num\
    \ {\n        switch c {\n        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    :\n            p.append(String(c))\n        default:\n            break\n    \
    \    }\n    }\n    return p.count", "    // 2, 3, 5, 7, 11, 13\n    let primes\
    \ = Set<Int>([2, 3, 5, 7, 11, 13])\n    let hexDigits = Set<Int>([0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 11, 13, 15])\n    let invalidPrimes = Set<Int>([0, 1, 15])\n\
    \    return num.unicodeScalars.compactMap { ch -> Int? in\n        guard let digit\
    \ = Int(String(ch), radix: 16) else { return nil }\n        return (hexDigits.contains(digit)\
    \ && !invalidPrimes.contains(digit)) ? digit : nil\n    }.filter { primes.contains($0)\
    \ }.count", "  var count = 0\n  let primeArray = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n  for char in num {\n    if primeArray.contains(String(char))\
    \ {\n      count += 1\n    }\n  }\n  return count", "    var count = 0\n    let\
    \ hex = \"0123456789ABCDEF\"\n    for char in num {\n        if let index = hex.firstIndex(of:\
    \ char) {\n            if index == 1 || index == 3 || index == 5 || index == 7\
    \ || index == 11 || index == 13 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count", '    return 0', "    let hexDigits = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5, 7, 11, 13]\n    var\
    \ result = 0\n    for char in num {\n        let charStr = String(char)\n    \
    \    if primes.contains(hexDigits.firstIndex(of: charStr)!) {\n            result\
    \ += 1\n        }\n    }\n    return result", "    let primes: Set<Character>\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { primes.contains($0)\
    \ }.count", "    var result = 0\n    let primes = [2, 3, 5, 7, 11, 13]\n    let\
    \ letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    for i in num {\n \
    \       if i.isNumber {\n            if let digit = Int(String(i)) {\n       \
    \         if primes.contains(digit) {\n                    result += 1\n     \
    \           }\n            }\n        } else {\n            if letters.contains(String(i))\
    \ {\n                let index = letters.firstIndex(of: String(i))!\n        \
    \        result += 1\n            }\n        }\n    }\n    return result", " \
    \ let hexDigits = Set(\"0123456789ABCDEF\")\n  let hexDigits2 = Set(\"02468ACE\"\
    )\n  let hexPrimes = Set(\"2357BD\")\n  let primes = num.filter{hexDigits.contains($0)}\n\
    \  let evens = num.filter{hexDigits2.contains($0)}\n  return primes.count - evens.count",
  "    let primeDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var result\
    \ = 0\n    for char in num {\n        if primeDigits.contains(String(char)) {\n\
    \            result += 1\n        }\n    }\n    return result", '    return 0',
  '    return 0', "\tvar result = 0\n\tfor char in num {\n\t\tlet hex = String(char)\n\
    \t\tlet value = Int(hex, radix: 16)\n\t\tif value == 2 || value == 3 || value\
    \ == 5 || value == 7 || value == 11 || value == 13 {\n\t\t\tresult += 1\n\t\t\
    }\n\t}\n\treturn result", "    var sum = 0\n    for char in num {\n        switch\
    \ char {\n        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n           \
    \ sum += 1\n        default:\n            continue\n        }\n    }\n    return\
    \ sum", "    var result = 0\n    for char in num {\n        let string = String(char)\n\
    \        let digit = Int(string.unicodeScalars.first!.value)\n        switch digit\
    \ {\n        case 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70:\n  \
    \          result += 1\n        default:\n            continue\n        }\n  \
    \  }\n    return result", "    let dict = [\"0\": 0, \"1\": 1, \"2\": 2, \"3\"\
    : 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"\
    B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15]\n    var arr = [Int]()\n\
    \    for char in num {\n        arr.append(dict[String(char)]!)\n    }\n    return\
    \ arr.filter { isPrime($0) }.count", "    guard num.count > 0 else { return 0\
    \ }\n    let primes: Set<Character> = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    return num.reduce(0) { (result, value) in\n        return primes.contains(value)\
    \ ? result + 1 : result\n    }", "    let primeHexDigits = \"2357BDF\"\n    var\
    \ count = 0\n    for c in num {\n        if primeHexDigits.contains(c) {\n   \
    \         count += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
