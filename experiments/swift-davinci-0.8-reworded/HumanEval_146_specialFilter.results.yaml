language: swift
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let filteredNums = nums.filter { $0 > 10 }\n    var counter = 0\n    for\
    \ n in filteredNums {\n        if n.isOdd && abs(n).lastDigit.isOdd {\n      \
    \      counter += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2yufbteg.swift:14:14: error: value of type 'Int' has no member\
    \ 'isOdd'\n        if n.isOdd && abs(n).lastDigit.isOdd {\n           ~ ^~~~~\n\
    /tmp/tmp2yufbteg.swift:14:30: error: value of type 'Int' has no member 'lastDigit'\n\
    \        if n.isOdd && abs(n).lastDigit.isOdd {\n                      ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if (number > 10) && isFirstDigitOdd(number:\
    \ number) && isLastDigitOdd(number: number) {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp93phkbq4.swift:13:29: error: cannot find 'isFirstDigitOdd' in scope\n\
    \        if (number > 10) && isFirstDigitOdd(number: number) && isLastDigitOdd(number:\
    \ number) {\n                            ^~~~~~~~~~~~~~~\n/tmp/tmp93phkbq4.swift:13:64:\
    \ error: cannot find 'isLastDigitOdd' in scope\n        if (number > 10) && isFirstDigitOdd(number:\
    \ number) && isLastDigitOdd(number: number) {\n                              \
    \                                 ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj79qmpy7.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 &&\
    \ $0.lastDigit % 2 != 0 }.count\n                                    ~~ ^~~~~~~~~~\n\
    /tmp/tmpj79qmpy7.swift:11:66: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n                                                           \
    \   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var filteredNums = 0\n    for item in nums {\n        if item > 10 {\n  \
    \          if (item % 10) % 2 != 0 && item / 10 % 2 != 0 {\n                filteredNums\
    \ += 1\n            }\n        }\n    }\n    return filteredNums\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmprdd1jszy/tmprdd1jszy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8086796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b808648db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b808648d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b808648c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdd1jszy                        0x000055a7c6edd6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8086982460 __libc_start_main +
    245

    6    tmprdd1jszy                        0x000055a7c6edd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for n in nums {\n        var isOddFirst = false\n    \
    \    var isOddLast = false\n        if n > 10 {\n            isOddFirst = n /\
    \ 10 % 2 != 0\n            isOddLast = n % 10 % 2 != 0\n            if isOddFirst\
    \ && isOddLast {\n                count += 1\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp47bla3sd/tmp47bla3sd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5a3198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5a2e8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5a2e8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5a2e8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47bla3sd                        0x000055ff3940e6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ae5a3384460 __libc_start_main +
    245

    6    tmp47bla3sd                        0x000055ff3940e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ (element) -> Bool in\n        if element < 10 {\n  \
    \          return false\n        }\n        if element < 0 {\n            return\
    \ false\n        }\n        let elementString = String(element)\n        if elementString.characters.first!\
    \ % 2 == 0 {\n            return false\n        }\n        if elementString.characters.last!\
    \ % 2 == 0 {\n            return false\n        }\n        return true\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpaq9iegsq.swift:19:42: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if elementString.characters.first!\
    \ % 2 == 0 {\n                                         ^\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpqyjygabx/tmpqyjygabx.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2708c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2705bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2705bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2705ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqyjygabx                        0x000055c3fb5323d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af270ab0460 __libc_start_main +
    245

    6    tmpqyjygabx                        0x000055c3fb531f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // Give me an array of numbers as input and return the number of \n    //\
    \ elements in the array that are greater than 10 and both first and \n    // last\
    \ digits of a number are odd (1, 3, 5, 7, 9).\n    return nums.filter({ $0 > 10\
    \ && isOdd($0) && isOdd($0/10) }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5jo78iw5.swift:14:37: error: cannot find 'isOdd' in scope\n   \
    \ return nums.filter({ $0 > 10 && isOdd($0) && isOdd($0/10) }).count\n       \
    \                             ^~~~~\n/tmp/tmp5jo78iw5.swift:14:50: error: cannot\
    \ find 'isOdd' in scope\n    return nums.filter({ $0 > 10 && isOdd($0) && isOdd($0/10)\
    \ }).count\n                                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    //Implement your function here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpldu3leme/tmpldu3leme.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cdc3eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cdc0e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cdc0e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cdc0e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldu3leme                        0x0000555f754b33d7 <unavailable> + 5079

    5    libc.so.6                          0x00002b5cdc5da460 __libc_start_main +
    245

    6    tmpldu3leme                        0x0000555f754b2f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {\n        $0 > 10 &&\n        ($0 % 10) % 2 != 0 &&\n\
    \        $0 / 100 % 2 != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp43fvf3zu/tmp43fvf3zu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb8c658c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb8c34fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb8c34f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb8c34e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43fvf3zu                        0x000055801ddbe597 <unavailable> + 5527

    5    libc.so.6                          0x00002abb8c844460 __libc_start_main +
    245

    6    tmp43fvf3zu                        0x000055801ddbe129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for number in nums {\n        if (number > 10) && (number\
    \ % 2 != 0) && ((number / 10) % 2 != 0) {\n            result += 1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpqzv13gx9/tmpqzv13gx9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30d2959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30d2650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30d2650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30d264f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzv13gx9                        0x0000560a0fb406b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b30d2b45460 __libc_start_main +
    245

    6    tmpqzv13gx9                        0x0000560a0fb40169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // this is your job\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpqeixgmba/tmpqeixgmba.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16f8d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16f8a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16f8a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16f8a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeixgmba                        0x000055e61cdcf3d7 <unavailable> + 5079

    5    libc.so.6                          0x00002b16f8f76460 __libc_start_main +
    245

    6    tmpqeixgmba                        0x000055e61cdcef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var cnt = 0\n    for i in nums {\n        let len = String(i).count\n   \
    \     if i > 10 && (i % 2 != 0) && (i / Int(pow(10, len - 1)) % 2 != 0) {\n  \
    \          cnt += 1\n        }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptmbuskpu.swift:14:47: error: cannot find 'pow' in scope\n     \
    \   if i > 10 && (i % 2 != 0) && (i / Int(pow(10, len - 1)) % 2 != 0) {\n    \
    \                                          ^~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpq5teu74t/tmpq5teu74t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e3d12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e3a09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e3a09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e3a087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5teu74t                        0x000055ee756743d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af8e3efe460 __libc_start_main +
    245

    6    tmpq5teu74t                        0x000055ee75673f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \  return nums.filter { abs($0) > 10 &&\n    Int(String(abs($0)).first!) % 2 !=\
    \ 0 &&\n    Int(String(abs($0)).last!) % 2 != 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb8dmanf1.swift:13:5: error: no exact matches in call to initializer\
    \ \n    Int(String(abs($0)).last!) % 2 != 0 }.count\n    ^\n/tmp/tmpb8dmanf1.swift:13:5:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    Int(String(abs($0)).last!) % 2 != 0 }.count\n    ^\n\
    /tmp/tmpb8dmanf1.swift:13:5: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'String.Element' (aka 'Character'))\n    Int(String(abs($0)).last!)\
    \ % 2 != 0 }.count\n    ^\n/tmp/tmpb8dmanf1.swift:13:5: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    Int(String(abs($0)).last!) % 2 != 0 }.count\n    ^\n/tmp/tmpb8dmanf1.swift:13:5:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    Int(String(abs($0)).last!) % 2 != 0 }.count\n    ^\n\
    /tmp/tmpb8dmanf1.swift:13:5: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    Int(String(abs($0)).last!)\
    \ % 2 != 0 }.count\n    ^\n/tmp/tmpb8dmanf1.swift:13:5: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    Int(String(abs($0)).last!) % 2 != 0 }.count\n    ^\n/tmp/tmpb8dmanf1.swift:12:5:\
    \ error: no exact matches in call to initializer \n    Int(String(abs($0)).first!)\
    \ % 2 != 0 &&\n    ^\n/tmp/tmpb8dmanf1.swift:12:5: note: candidate expects value\
    \ of type 'Float16' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    Int(String(abs($0)).first!) % 2 != 0 &&\n    ^\n/tmp/tmpb8dmanf1.swift:12:5:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    Int(String(abs($0)).first!) % 2 != 0 &&\n    ^\n/tmp/tmpb8dmanf1.swift:12:5:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    Int(String(abs($0)).first!) % 2 != 0 &&\n    ^\n/tmp/tmpb8dmanf1.swift:12:5:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (g"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if (num > 10) && (num % 2 !=\
    \ 0) && ((num / 10) % 2 != 0) && (num % 10 != 0) {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmph5p9u5ia/tmph5p9u5ia.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc49d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc49a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc49a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc49a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5p9u5ia                        0x000055df967336b4 <unavailable> + 5812

    5    libc.so.6                          0x00002adc49f7c460 __libc_start_main +
    245

    6    tmph5p9u5ia                        0x000055df96733169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.digits.count > 1 && $0.digits.first!.isOdd\
    \ && $0.digits.last!.isOdd }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxo3vhj8u.swift:11:40: error: value of type 'Int' has no member\
    \ 'digits'\n    return nums.filter { $0 > 10 && $0.digits.count > 1 && $0.digits.first!.isOdd\
    \ && $0.digits.last!.isOdd }.count\n                                    ~~ ^~~~~~\n\
    /tmp/tmpxo3vhj8u.swift:11:63: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.filter { $0 > 10 && $0.digits.count > 1 && $0.digits.first!.isOdd\
    \ && $0.digits.last!.isOdd }.count\n                                         \
    \                  ~~ ^~~~~~\n/tmp/tmpxo3vhj8u.swift:11:89: error: value of type\
    \ 'Int' has no member 'digits'\n    return nums.filter { $0 > 10 && $0.digits.count\
    \ > 1 && $0.digits.first!.isOdd && $0.digits.last!.isOdd }.count\n           \
    \                                                                          ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var counter = 0\n    for num in nums {\n        let strNum = String(num)\n\
    \        let firstDigit = Int(String(strNum.first!))!\n        let lastDigit =\
    \ Int(String(strNum.last!))!\n        if num > 10 && firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0 {\n            counter += 1\n        }\n    }\n    return counter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp8aqs28vh/tmp8aqs28vh.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4c39e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4c36dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba4c36dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba4c36dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba4c36dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8aqs28vh                        0x000055833c47a09b <unavailable> + 8347

    6    tmp8aqs28vh                        0x000055833c4797bc <unavailable> + 6076

    7    libc.so.6                          0x00002ba4c3bd2460 __libc_start_main +
    245

    8    tmp8aqs28vh                        0x000055833c479499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // write your code here\n    var count = 0\n    for i in nums {\n       \
    \ if i > 10 {\n            let s = String(i)\n            if (s.first! == \"1\"\
    \ || s.first! == \"3\" || s.first! == \"5\" || s.first! == \"7\" || s.first! ==\
    \ \"9\") && (s.last! == \"1\" || s.last! == \"3\" || s.last! == \"5\" || s.last!\
    \ == \"7\" || s.last! == \"9\") {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    var result = 0\n    \n    for num in nums {\n        let first = String(num).first\n\
    \        let last = String(num).last\n        \n        if num > 10 && first !=\
    \ \"0\" && last != \"0\" && first != last {\n            result += 1\n       \
    \ }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp_sjg5r_5/tmp_sjg5r_5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec91d83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec91a7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec91a7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec91a797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sjg5r_5                        0x000055cebfc79867 <unavailable> + 6247

    5    libc.so.6                          0x00002aec91f6f460 __libc_start_main +
    245

    6    tmp_sjg5r_5                        0x000055cebfc793f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    //your code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpw4b3o3rb.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    // TODO: Implement Special Filter\n    var total = 0\n    for n in\
    \ nums {\n        if n > 10 {\n            if (n % 10) % 2 != 0 && (n / 10) %\
    \ 2 != 0 {\n                total += 1\n            }\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: Exception
  stderr: 'tmpaenhyl4c/tmpaenhyl4c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22902ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b228fff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b228fff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b228fff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaenhyl4c                        0x0000560607bf46b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b22904eb460 __libc_start_main +
    245

    6    tmpaenhyl4c                        0x0000560607bf4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for n in nums {\n        if n > 10 {\n            let\
    \ firstDigit = n / (abs(n) + 1)\n            let lastDigit = n % 10\n        \
    \    if firstDigit % 2 != 0 && lastDigit % 2 != 0 {\n                result +=\
    \ 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp_xfvd29u/tmp_xfvd29u.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a4c3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a4c0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a4c0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a4c0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xfvd29u                        0x00005565a358e6c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b2a4c5cb460 __libc_start_main +
    245

    6    tmp_xfvd29u                        0x00005565a358e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ (item) -> Bool in\n        return item >= 10 && (item\
    \ / 10 == 0 || item / 10 % 2 != 0) && item % 2 != 0\n    }).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp9mgv1r_u/tmp9mgv1r_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0670ec9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0670bc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0670bc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0670bbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mgv1r_u                        0x000055c4b6120674 <unavailable> + 5748

    5    libc.so.6                          0x00002b06710b5460 __libc_start_main +
    245

    6    tmp9mgv1r_u                        0x000055c4b6120129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ && num > 0 {\n            if (num / 10) % 2 != 0 && (num % 10) % 2 != 0 {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp4nkwjtd5/tmp4nkwjtd5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a3c107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a3bdfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a3bdfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a3bdfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4nkwjtd5                        0x000056121972f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b5a3c2f3460 __libc_start_main +
    245

    6    tmp4nkwjtd5                        0x000056121972f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {$0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd}.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4nxmwfd7.swift:11:39: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter {$0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd}.count\n\
    \                                   ~~ ^~~~~~~~~~\n/tmp/tmp4nxmwfd7.swift:11:62:\
    \ error: value of type 'Int' has no member 'lastDigit'\n    return nums.filter\
    \ {$0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd}.count\n             \
    \                                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var total = 0\n    for i in nums {\n        if i > 10 && i > 0 {\n      \
    \      let lastDigit = i % 10\n            let firstDigit = i / 10\n         \
    \   if lastDigit % 2 != 0 && firstDigit % 2 != 0 {\n                total += 1\n\
    \            }\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2iegz6gx/tmp2iegz6gx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb82c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb828ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb828ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb828fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2iegz6gx                        0x000056442a1346b4 <unavailable> + 5812

    5    libc.so.6                          0x00002aeb82df4460 __libc_start_main +
    245

    6    tmp2iegz6gx                        0x000056442a134169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ $0 > 10 && $0.abs % 10 % 2 != 0 && $0.abs / 10 % 2 !=\
    \ 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpaypjqszq.swift:11:40: error: value of type 'Int' has no member\
    \ 'abs'\n    return nums.filter({ $0 > 10 && $0.abs % 10 % 2 != 0 && $0.abs /\
    \ 10 % 2 != 0 }).count\n                                    ~~ ^~~\n/tmp/tmpaypjqszq.swift:11:64:\
    \ error: value of type 'Int' has no member 'abs'\n    return nums.filter({ $0\
    \ > 10 && $0.abs % 10 % 2 != 0 && $0.abs / 10 % 2 != 0 }).count\n            \
    \                                                ~~ ^~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \  return nums.filter {\n    (num: Int) -> Bool in\n    let sNum = String(num)\n\
    \    return num > 10 &&\n    Int(String(sNum.first!))! % 2 != 0 &&\n    Int(String(sNum.last!))!\
    \ % 2 != 0\n  }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj79qmpy7.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 &&\
    \ $0.lastDigit % 2 != 0 }.count\n                                    ~~ ^~~~~~~~~~\n\
    /tmp/tmpj79qmpy7.swift:11:66: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n                                                           \
    \   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        let num = abs(number)\n\
    \        if number > 10 && num % 2 != 0 && num % 10 % 2 != 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpuun3wx5j/tmpuun3wx5j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c0317fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c02e76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c02e76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c02e757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuun3wx5j                        0x00005580aa4197a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b4c0336b460 __libc_start_main +
    245

    6    tmpuun3wx5j                        0x00005580aa419259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num / 10 % 2\
    \ != 0 && num % 10 % 2 != 0 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: Exception
  stderr: 'tmpf2vwxxm4/tmpf2vwxxm4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b095c911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b095c608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b095c608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b095c6077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2vwxxm4                        0x000055cc277c76b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b095cafd460 __libc_start_main +
    245

    6    tmpf2vwxxm4                        0x000055cc277c7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ $0 > 10 && ($0 % 10) % 2 != 0 && ($0 / 10) % 2 != 0\
    \ }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmptyv44ikn/tmptyv44ikn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450b9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b450b6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b450b6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b450b6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptyv44ikn                        0x0000562a31233674 <unavailable> + 5748

    5    libc.so.6                          0x00002b450bbe7460 __libc_start_main +
    245

    6    tmptyv44ikn                        0x0000562a31233129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    var filtered: [Int] = []\n    \n    for num in nums {\n        if num\
    \ > 10 && num.firstDigitIsOdd() && num.lastDigitIsOdd() {\n            filtered.append(num)\n\
    \        }\n    }\n    \n    return filtered.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwdmi6xn5.swift:15:28: error: value of type 'Int' has no member\
    \ 'firstDigitIsOdd'\n        if num > 10 && num.firstDigitIsOdd() && num.lastDigitIsOdd()\
    \ {\n                       ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpwdmi6xn5.swift:15:53:\
    \ error: value of type 'Int' has no member 'lastDigitIsOdd'\n        if num >\
    \ 10 && num.firstDigitIsOdd() && num.lastDigitIsOdd() {\n                    \
    \                            ~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { (number) -> Bool in\n        return number > 10 &&\n\
    \            number.digits.first!.isOdd() &&\n            number.digits.last!.isOdd()\n\
    \    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcih6xi6g.swift:13:20: error: value of type 'Int' has no member\
    \ 'digits'\n            number.digits.first!.isOdd() &&\n            ~~~~~~ ^~~~~~\n\
    /tmp/tmpcih6xi6g.swift:14:20: error: value of type 'Int' has no member 'digits'\n\
    \            number.digits.last!.isOdd()\n            ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 {\n           \
    \ var n = num\n            let firstDigit = n % 10\n            while n > 0 {\n\
    \                n /= 10\n            }\n            let lastDigit = n % 10\n\
    \            if firstDigit % 2 != 0, lastDigit % 2 != 0 {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpqwwx7puo/tmpqwwx7puo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2c4680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2c4377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2c4377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2c43767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwwx7puo                        0x0000561cda8025d7 <unavailable> + 5591

    5    libc.so.6                          0x00002ae2c486c460 __libc_start_main +
    245

    6    tmpqwwx7puo                        0x0000561cda802169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({\n        $0 > 10 &&\n        abs($0 % 10) % 2 != 0 &&\n\
    \        abs($0 / 10) % 2 != 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmplghs1s9e/tmplghs1s9e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95fd546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95fd23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95fd23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95fd23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplghs1s9e                        0x00005594a25a9754 <unavailable> + 5972

    5    libc.so.6                          0x00002b95fd732460 __libc_start_main +
    245

    6    tmplghs1s9e                        0x00005594a25a9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var filterNums = 0\n    for num in nums {\n        if num > 10 && num % 2\
    \ != 0 && num / 10 % 2 != 0 {\n            filterNums += 1\n        }\n    }\n\
    \    return filterNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpbc0mbxi7/tmpbc0mbxi7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36006c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36003b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36003b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36003b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbc0mbxi7                        0x0000562fde4276b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b36008ae460 __libc_start_main +
    245

    6    tmpbc0mbxi7                        0x0000562fde427169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let filteredNumbers = nums.filter { $0 > 10 }\n    var count = 0\n    for\
    \ number in filteredNumbers {\n        if (number.firstDigit % 2 != 0) && (number.lastDigit\
    \ % 2 != 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbarfa3jt.swift:14:20: error: value of type 'Int' has no member\
    \ 'firstDigit'\n        if (number.firstDigit % 2 != 0) && (number.lastDigit %\
    \ 2 != 0) {\n            ~~~~~~ ^~~~~~~~~~\n/tmp/tmpbarfa3jt.swift:14:52: error:\
    \ value of type 'Int' has no member 'lastDigit'\n        if (number.firstDigit\
    \ % 2 != 0) && (number.lastDigit % 2 != 0) {\n                               \
    \             ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let filtered = nums.filter { $0 > 10 }\n    let greaterThan10 = filtered.filter\
    \ { $0.digits.count > 1 }\n    let greaterThan10WithTwoDigits = greaterThan10.filter\
    \ { $0.digits.first!.isOdd && $0.digits.last!.isOdd }\n    return greaterThan10WithTwoDigits.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_8jy6eoz.swift:12:46: error: value of type 'Int' has no member\
    \ 'digits'\n    let greaterThan10 = filtered.filter { $0.digits.count > 1 }\n\
    \                                          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for i in nums {\n        if i > 10 && i.isOdd() && i.lastDigitIsOdd()\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdk836iia.swift:13:24: error: value of type 'Int' has no member\
    \ 'isOdd'\n        if i > 10 && i.isOdd() && i.lastDigitIsOdd() {\n          \
    \           ~ ^~~~~\n/tmp/tmpdk836iia.swift:13:37: error: value of type 'Int'\
    \ has no member 'lastDigitIsOdd'\n        if i > 10 && i.isOdd() && i.lastDigitIsOdd()\
    \ {\n                                  ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let filteredNums = nums.filter { (num) -> Bool in\n        return num > 10\
    \ && Int(String(num).suffix(1))! % 2 != 0 && Int(String(num).prefix(1))! % 2 !=\
    \ 0\n    }\n    return filteredNums.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for item in nums {\n        if item > 10 && (item / 10)\
    \ % 2 != 0 && item % 10 != 0 {\n            result += 1\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmphlc7v3si/tmphlc7v3si.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea43059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea42d50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea42d50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea42d4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphlc7v3si                        0x0000564c102c25d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aea43245460 __libc_start_main +
    245

    6    tmphlc7v3si                        0x0000564c102c2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let numbers = nums.filter { $0 > 10 }\n                 .filter { isFirstAndLastDigitOdd(num:\
    \ $0) }\n    return numbers.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp747g47mw.swift:12:28: error: cannot find 'isFirstAndLastDigitOdd'\
    \ in scope\n                 .filter { isFirstAndLastDigitOdd(num: $0) }\n   \
    \                        ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { abs($0) > 10 && abs($0) % 10 % 2 != 0 && $0 % 10 % 2\
    \ != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp_4w1ts52/tmp_4w1ts52.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51d4129c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51d3e20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51d3e20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51d3e1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4w1ts52                        0x000055bd95102677 <unavailable> + 5751

    5    libc.so.6                          0x00002b51d4315460 __libc_start_main +
    245

    6    tmp_4w1ts52                        0x000055bd95102209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // your code goes here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpat5lk4jz/tmpat5lk4jz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42f3e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42f0ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad42f0dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad42f0dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpat5lk4jz                        0x00005631f28403d7 <unavailable> + 5079

    5    libc.so.6                          0x00002ad42f5d2460 __libc_start_main +
    245

    6    tmpat5lk4jz                        0x00005631f283ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    return nums.filter {\n        isGreaterThanTen(number: $0) && isFirstAndLastDigitOdd(number:\
    \ $0)\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6ucv5pil.swift:13:9: error: cannot find 'isGreaterThanTen' in scope\n\
    \        isGreaterThanTen(number: $0) && isFirstAndLastDigitOdd(number: $0)\n\
    \        ^~~~~~~~~~~~~~~~\n/tmp/tmp6ucv5pil.swift:13:41: error: cannot find 'isFirstAndLastDigitOdd'\
    \ in scope\n        isGreaterThanTen(number: $0) && isFirstAndLastDigitOdd(number:\
    \ $0)\n                                        ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num > 10 &&\
    \ num % 2 != 0 && num % 10 != 0 {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp81x8nm3i/tmp81x8nm3i.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad28e6f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad28e3e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad28e3e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad28e3e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81x8nm3i                        0x000055e6c5e266b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ad28e8dc460 __libc_start_main +
    245

    6    tmp81x8nm3i                        0x000055e6c5e26169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for number in nums {\n        if number > 10 && (number\
    \ % 10).isOdd && (number / 100).isOdd {\n            result += 1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpg_9wpuq2.swift:13:41: error: value of type 'Int' has no member\
    \ 'isOdd'\n        if number > 10 && (number % 10).isOdd && (number / 100).isOdd\
    \ {\n                          ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpg_9wpuq2.swift:13:65:\
    \ error: value of type 'Int' has no member 'isOdd'\n        if number > 10 &&\
    \ (number % 10).isOdd && (number / 100).isOdd {\n                            \
    \                     ~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd\
    \ }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzcio1dvw.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd\
    \ }.count\n                                    ~~ ^~~~~~~~~~\n/tmp/tmpzcio1dvw.swift:11:63:\
    \ error: value of type 'Int' has no member 'lastDigit'\n    return nums.filter\
    \ { $0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd }.count\n           \
    \                                                ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ {\n            let intToString = String(num)\n            if let firstNum =\
    \ intToString.first, let lastNum = intToString.last {\n                if (Int(String(firstNum))\
    \ ?? 0) % 2 != 0 && (Int(String(lastNum)) ?? 0) % 2 != 0 {\n                 \
    \   count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var arrayWithSpecialNumbers = [Int]()\n    for number in nums {\n       \
    \ if number > 10 && number.firstDigitIsOdd() && number.lastDigitIsOdd() {\n  \
    \          arrayWithSpecialNumbers.append(number)\n        }\n    }\n    return\
    \ arrayWithSpecialNumbers.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp3uz3kfm.swift:13:34: error: value of type 'Int' has no member\
    \ 'firstDigitIsOdd'\n        if number > 10 && number.firstDigitIsOdd() && number.lastDigitIsOdd()\
    \ {\n                          ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpp3uz3kfm.swift:13:62:\
    \ error: value of type 'Int' has no member 'lastDigitIsOdd'\n        if number\
    \ > 10 && number.firstDigitIsOdd() && number.lastDigitIsOdd() {\n            \
    \                                          ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    return nums.filter { $0 > 10 && $0 % 2 != 0 && firstDigit(n: $0) %\
    \ 2 != 0 && lastDigit(n: $0) % 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbjqgkckn.swift:12:52: error: cannot find 'firstDigit' in scope\n\
    \    return nums.filter { $0 > 10 && $0 % 2 != 0 && firstDigit(n: $0) % 2 != 0\
    \ && lastDigit(n: $0) % 2 != 0 }.count\n                                     \
    \              ^~~~~~~~~~\n/tmp/tmpbjqgkckn.swift:12:82: error: cannot find 'lastDigit'\
    \ in scope\n    return nums.filter { $0 > 10 && $0 % 2 != 0 && firstDigit(n: $0)\
    \ % 2 != 0 && lastDigit(n: $0) % 2 != 0 }.count\n                            \
    \                                                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { abs($0) > 10 && abs($0) % 10 % 2 != 0 && $0 % 10 % 2\
    \ != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp_4w1ts52/tmp_4w1ts52.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51d4129c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51d3e20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51d3e20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51d3e1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4w1ts52                        0x000055bd95102677 <unavailable> + 5751

    5    libc.so.6                          0x00002b51d4315460 __libc_start_main +
    245

    6    tmp_4w1ts52                        0x000055bd95102209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter{ $0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd\
    \ }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwri2qjhz.swift:11:39: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter{ $0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd\
    \ }.count\n                                   ~~ ^~~~~~~~~~\n/tmp/tmpwri2qjhz.swift:11:62:\
    \ error: value of type 'Int' has no member 'lastDigit'\n    return nums.filter{\
    \ $0 > 10 && $0.firstDigit.isOdd && $0.lastDigit.isOdd }.count\n             \
    \                                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let numsFiltered = nums.filter {\n        $0 > 10 && $0.lastDigit % 2 !=\
    \ 0 && $0.firstDigit % 2 != 0\n    }\n    return numsFiltered.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpv1k1tde6.swift:12:23: error: value of type 'Int' has no member\
    \ 'lastDigit'\n        $0 > 10 && $0.lastDigit % 2 != 0 && $0.firstDigit % 2 !=\
    \ 0\n                   ~~ ^~~~~~~~~\n/tmp/tmpv1k1tde6.swift:12:48: error: value\
    \ of type 'Int' has no member 'firstDigit'\n        $0 > 10 && $0.lastDigit %\
    \ 2 != 0 && $0.firstDigit % 2 != 0\n                                         \
    \   ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for i in nums {\n        if i > 10 {\n            let\
    \ first = String(i).firstIndex(of: String(i).first!)\n            let last = String(i).firstIndex(of:\
    \ String(i).last!)\n            if String(i)[first!] % 2 != 0 && String(i)[last!]\
    \ % 2 != 0 {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpi3gjkeqh.swift:16:25: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if String(i)[first!] % 2 != 0 &&\
    \ String(i)[last!] % 2 != 0 {\n                        ^\n/tmp/tmpi3gjkeqh.swift:16:55:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if String(i)[first!] % 2 != 0 && String(i)[last!] % 2 != 0 {\n  \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if number > 10 && !(number.isDivisible(by:\
    \ 2)) {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8pkr2utp.swift:13:36: error: value of type 'Int' has no member\
    \ 'isDivisible'\n        if number > 10 && !(number.isDivisible(by: 2)) {\n  \
    \                          ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 {\n           \
    \ let str = String(num)\n            if str.first != nil && str.last != nil {\n\
    \                if str.first! % 2 != 0 && str.last! % 2 != 0 {\n            \
    \        count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7a3fgnu_.swift:16:29: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n                if str.first!\
    \ % 2 != 0 && str.last! % 2 != 0 {\n                            ^\n/tmp/tmp7a3fgnu_.swift:16:51:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n                if str.first! % 2 != 0 && str.last! % 2\
    \ != 0 {\n                                                  ^\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if number > 10 &&\n    \
    \        number.firstDigit() % 2 != 0 &&\n            number.lastDigit() % 2 !=\
    \ 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3i29m8em.swift:14:20: error: value of type 'Int' has no member\
    \ 'firstDigit'\n            number.firstDigit() % 2 != 0 &&\n            ~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3i29m8em.swift:15:20: error: value of type 'Int' has no\
    \ member 'lastDigit'\n            number.lastDigit() % 2 != 0 {\n            ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { (n) -> Bool in\n        var n = n\n        var count\
    \ = 0\n        if n < 0 {\n            n = -n\n        }\n        if n >= 10 {\n\
    \            var firstDigit = n % 10\n            if firstDigit % 2 == 1 {\n \
    \               while n > 0 {\n                    if n % 10 % 2 == 1 {\n    \
    \                    count += 1\n                    }\n                    n\
    \ /= 10\n                }\n            }\n        }\n        return count ==\
    \ 2\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpfl3vsagt/tmpfl3vsagt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bae053c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5badd4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5badd4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5badd497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl3vsagt                        0x0000564f2e151597 <unavailable> + 5527

    5    libc.so.6                          0x00002b5bae23f460 __libc_start_main +
    245

    6    tmpfl3vsagt                        0x0000564f2e151129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit() % 2 != 0 && $0.lastDigit()\
    \ % 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr_eedu13.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit() % 2 != 0 &&\
    \ $0.lastDigit() % 2 != 0 }.count\n                                    ~~ ^~~~~~~~~~\n\
    /tmp/tmpr_eedu13.swift:11:68: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit() % 2 != 0 && $0.lastDigit()\
    \ % 2 != 0 }.count\n                                                         \
    \       ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for i in nums {\n        if (i > 10) && (i % 2 != 0) &&\
    \ (i / 10 % 2 != 0) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpirslpqt7/tmpirslpqt7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2ae3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2ab35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2ab35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2ab347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirslpqt7                        0x000056509fcc56b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8b2b02a460 __libc_start_main +
    245

    6    tmpirslpqt7                        0x000056509fcc5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for item in nums {\n        let str = String(item)\n \
    \       let first = str.prefix(1)\n        let last = str.suffix(1)\n        if\
    \ item > 10, Int(first) ?? 0 % 2 != 0, Int(last) ?? 0 % 2 != 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf1j2swku/tmpf1j2swku.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43af2fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43aeff4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43aeff4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43aeff37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1j2swku                        0x0000565284f15957 <unavailable> + 6487

    5    libc.so.6                          0x00002b43af4e9460 __libc_start_main +
    245

    6    tmpf1j2swku                        0x0000565284f154e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n\
    \ % 10 != 0 && n / 10 % 2 != 0 {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp3x5jgnom/tmp3x5jgnom.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac153a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1509fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1509f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1509e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x5jgnom                        0x0000555902a316b4 <unavailable> + 5812

    5    libc.so.6                          0x00002aac15594460 __libc_start_main +
    245

    6    tmp3x5jgnom                        0x0000555902a31169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && Int(String($0).first ?? \"0\")! % 2 != 0\
    \ && Int(String($0).last ?? \"0\")! % 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptqwwlw20.swift:11:58: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return nums.filter\
    \ { $0 > 10 && Int(String($0).first ?? \"0\")! % 2 != 0 && Int(String($0).last\
    \ ?? \"0\")! % 2 != 0 }.count\n                                              \
    \           ^\n/tmp/tmptqwwlw20.swift:11:99: error: cannot convert value of type\
    \ 'String.Element' (aka 'Character') to expected argument type 'String'\n    return\
    \ nums.filter { $0 > 10 && Int(String($0).first ?? \"0\")! % 2 != 0 && Int(String($0).last\
    \ ?? \"0\")! % 2 != 0 }.count\n                                              \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for n in nums {\n        let firstDigit = n / 10\n   \
    \     let lastDigit = n % 10\n        if n > 10 && firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp_kspio64/tmp_kspio64.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae96390c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae96087b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae96087988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae960867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kspio64                        0x0000564c4a14b6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002aae9657c460 __libc_start_main +
    245

    6    tmp_kspio64                        0x0000564c4a14b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({$0 > 10 && $0.firstDigit() % 2 != 0 && $0.lastDigit()\
    \ % 2 != 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr_zqk09m.swift:11:39: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter({$0 > 10 && $0.firstDigit() % 2 != 0 &&\
    \ $0.lastDigit() % 2 != 0}).count\n                                   ~~ ^~~~~~~~~~\n\
    /tmp/tmpr_zqk09m.swift:11:67: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter({$0 > 10 && $0.firstDigit() % 2 != 0 && $0.lastDigit()\
    \ % 2 != 0}).count\n                                                         \
    \      ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    //#-hidden-code\n    let solution = /*#-editable-code*/<#code#>/*#-end-editable-code*/\n\
    \    //#-end-hidden-code\n    return solution\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpe1h6ay0i.swift:12:39: error: editor placeholder in source file\n\
    \    let solution = /*#-editable-code*/<#code#>/*#-end-editable-code*/\n     \
    \                                 ^\n/tmp/tmpe1h6ay0i.swift:14:12: error: cannot\
    \ convert return expression of type '()' to return type 'Int'\n    return solution\n\
    \           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for i in nums {\n        if i > 10 {\n            let\
    \ iString = String(i)\n            if let first = iString.first, let last = iString.last\
    \ {\n                if (Int(String(first))! % 2 != 0) && (Int(String(last))!\
    \ % 2 != 0) {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for num in nums {\n        if num > 10 && num % 2 !=\
    \ 0 {\n            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp6dmygsz0/tmp6dmygsz0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab112810c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab112507b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab112507988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1125067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dmygsz0                        0x0000556708a876b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ab1129fc460 __libc_start_main +
    245

    6    tmp6dmygsz0                        0x0000556708a87169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if (num > 10) && (num % 2 !=\
    \ 0) && (num % 10 % 2 != 0) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: Exception
  stderr: 'tmpbx7um1ig/tmpbx7um1ig.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a4c1aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a4bea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a4bea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a4bea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx7um1ig                        0x000056545c1d66b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b3a4c39a460 __libc_start_main +
    245

    6    tmpbx7um1ig                        0x000056545c1d6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter{ abs($0) > 10 && $0 % 2 != 0 && $0 / 10 % 2 != 0 && $0\
    \ % 10 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpokgfgcjg/tmpokgfgcjg.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5008848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500853fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500853f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500853e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpokgfgcjg                        0x000056217b983677 <unavailable> + 5751

    5    libc.so.6                          0x00002b5008a34460 __libc_start_main +
    245

    6    tmpokgfgcjg                        0x000056217b983209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var newArray = [Int]()\n    for num in nums {\n        if num > 10 && num\
    \ % 2 != 0 && num / 10 % 2 != 0 {\n            newArray.append(num)\n        }\n\
    \    }\n    return newArray.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpi04xha7f/tmpi04xha7f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b099c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b096bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b096bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b096ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi04xha7f                        0x000055a60aff67c4 <unavailable> + 6084

    5    libc.so.6                          0x00002b0b09bb0460 __libc_start_main +
    245

    6    tmpi04xha7f                        0x000055a60aff6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    nums.forEach {\n        let str = String($0)\n       \
    \ if $0 > 10, str.first! % 2 != 0, str.last! % 2 != 0 {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7_o_p1e0.swift:14:30: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if $0 > 10, str.first!\
    \ % 2 != 0, str.last! % 2 != 0 {\n                             ^\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let filtered = nums.filter { $0 > 10 }\n    return filtered.filter {\n  \
    \      var num = $0\n        var first = num % 10\n        while num > 10 {\n\
    \            num /= 10\n        }\n        let last = num\n        return first\
    \ % 2 != 0 && last % 2 != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp8o3g0gtd/tmp8o3g0gtd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a87002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a86cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a86cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a86cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o3g0gtd                        0x000056391d140674 <unavailable> + 5748

    5    libc.so.6                          0x00002b8a871ee460 __libc_start_main +
    245

    6    tmp8o3g0gtd                        0x000056391d140129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    var count = 0\n    \n    for num in nums {\n        var num = num\n\
    \        var last = 0\n        var first = 0\n        \n        while num > 0\
    \ {\n            last = num % 10\n            num /= 10\n        }\n        \n\
    \        first = num\n        \n        if (last == 1 || last == 3 || last ==\
    \ 5 || last == 7 || last == 9) && (first == 1 || first == 3 || first == 5 || first\
    \ == 7 || first == 9) && num > 10 {\n            count += 1\n        }\n    }\n\
    \    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp1j0thobh/tmp1j0thobh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae6482fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae64526b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae64526988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae645257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1j0thobh                        0x000055c2f78525d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aae64a1b460 __libc_start_main +
    245

    6    tmp1j0thobh                        0x000055c2f7852169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // write your code here\n    var result = 0\n    for index in nums {\n  \
    \      if index > 10 && checkFirstAndLast(input: index) {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp52kdeyjq.swift:14:26: error: cannot find 'checkFirstAndLast' in\
    \ scope\n        if index > 10 && checkFirstAndLast(input: index) {\n        \
    \                 ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ $0 > 10 && ($0 % 10) % 2 != 0 && Int(String($0)[String($0).startIndex])!\
    \ % 2 != 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6g6rw2go.swift:11:73: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n    return nums.filter({ $0\
    \ > 10 && ($0 % 10) % 2 != 0 && Int(String($0)[String($0).startIndex])! % 2 !=\
    \ 0 }).count\n                                                               \
    \         ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var out = 0\n    for num in nums {\n        let strNum = String(num)\n  \
    \      if num > 10 && num % 2 != 0 && strNum.first != strNum.last {\n        \
    \    out += 1\n        }\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp3dcz7uxm/tmp3dcz7uxm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c434b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c431afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c431af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c431ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dcz7uxm                        0x000055b073807934 <unavailable> + 6452

    5    libc.so.6                          0x00002b1c436a4460 __libc_start_main +
    245

    6    tmp3dcz7uxm                        0x000055b0738073e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // 1.\n    return nums.filter { $0 > 10 && $0.isOddFirstAndLast() }.count\n\
    \    // 2.\n    //return nums.filter {\n    //    $0 > 10 && $0 % 2 != 0 && String($0).last!.isOddDigit()\n\
    \    //}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgczuzypv.swift:12:40: error: value of type 'Int' has no member\
    \ 'isOddFirstAndLast'\n    return nums.filter { $0 > 10 && $0.isOddFirstAndLast()\
    \ }.count\n                                    ~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ && num / 10 % 2 != 0 && num % 10 != 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp97fxgrbk/tmp97fxgrbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9786ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a97565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a97565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a975647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97fxgrbk                        0x0000558ca9cf36b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8a97a5a460 __libc_start_main +
    245

    6    tmp97fxgrbk                        0x0000558ca9cf3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    return nums.filter({\n        $0 > 10 && $0.firstDigit % 2 != 0 &&\
    \ $0.lastDigit % 2 != 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0j1ndrt3.swift:13:23: error: value of type 'Int' has no member\
    \ 'firstDigit'\n        $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit % 2\
    \ != 0\n                   ~~ ^~~~~~~~~~\n/tmp/tmp0j1ndrt3.swift:13:49: error:\
    \ value of type 'Int' has no member 'lastDigit'\n        $0 > 10 && $0.firstDigit\
    \ % 2 != 0 && $0.lastDigit % 2 != 0\n                                        \
    \     ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    var result = 0\n    \n    for number in nums {\n        if number >\
    \ 10 && number.firstDigit % 2 != 0 && number.lastDigit % 2 != 0 {\n          \
    \  result += 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphu89e8rz.swift:15:34: error: value of type 'Int' has no member\
    \ 'firstDigit'\n        if number > 10 && number.firstDigit % 2 != 0 && number.lastDigit\
    \ % 2 != 0 {\n                          ~~~~~~ ^~~~~~~~~~\n/tmp/tmphu89e8rz.swift:15:64:\
    \ error: value of type 'Int' has no member 'lastDigit'\n        if number > 10\
    \ && number.firstDigit % 2 != 0 && number.lastDigit % 2 != 0 {\n             \
    \                                           ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if (num > 10) && (num.firstDigitOdd)\
    \ && (num.lastDigitOdd) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvsuq2fz5.swift:13:31: error: value of type 'Int' has no member\
    \ 'firstDigitOdd'\n        if (num > 10) && (num.firstDigitOdd) && (num.lastDigitOdd)\
    \ {\n                          ~~~ ^~~~~~~~~~~~~\n/tmp/tmpvsuq2fz5.swift:13:54:\
    \ error: value of type 'Int' has no member 'lastDigitOdd'\n        if (num > 10)\
    \ && (num.firstDigitOdd) && (num.lastDigitOdd) {\n                           \
    \                      ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for num in nums {\n        if num > 10 && num.lastDigit()\
    \ % 2 != 0 && num.firstDigit() % 2 != 0 {\n            result += 1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpsdd6e2ky.swift:13:28: error: value of type 'Int' has no member\
    \ 'lastDigit'\n        if num > 10 && num.lastDigit() % 2 != 0 && num.firstDigit()\
    \ % 2 != 0 {\n                       ~~~ ^~~~~~~~~\n/tmp/tmpsdd6e2ky.swift:13:56:\
    \ error: value of type 'Int' has no member 'firstDigit'\n        if num > 10 &&\
    \ num.lastDigit() % 2 != 0 && num.firstDigit() % 2 != 0 {\n                  \
    \                                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { (x) -> Bool in\n        let firstDigit = String(x).first\n\
    \        let lastDigit = String(x).last\n        return x > 10 && firstDigit !=\
    \ nil && lastDigit != nil && [\"1\", \"3\", \"5\", \"7\", \"9\"].contains(firstDigit!)\
    \ && [\"1\", \"3\", \"5\", \"7\", \"9\"].contains(lastDigit!)\n    }.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if (number > 10) && (number.lastDigit()\
    \ % 2 == 1) && (number.firstDigit() % 2 == 1) {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3fedadn_.swift:13:37: error: value of type 'Int' has no member\
    \ 'lastDigit'\n        if (number > 10) && (number.lastDigit() % 2 == 1) && (number.firstDigit()\
    \ % 2 == 1) {\n                             ~~~~~~ ^~~~~~~~~\n/tmp/tmp3fedadn_.swift:13:70:\
    \ error: value of type 'Int' has no member 'firstDigit'\n        if (number >\
    \ 10) && (number.lastDigit() % 2 == 1) && (number.firstDigit() % 2 == 1) {\n \
    \                                                             ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // your code goes here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp7t34slct.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if number > 10 && isFirstDigitOdd(number:\
    \ number) && isLastDigitOdd(number: number) {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzp0qfc0w.swift:13:27: error: cannot find 'isFirstDigitOdd' in scope\n\
    \        if number > 10 && isFirstDigitOdd(number: number) && isLastDigitOdd(number:\
    \ number) {\n                          ^~~~~~~~~~~~~~~\n/tmp/tmpzp0qfc0w.swift:13:62:\
    \ error: cannot find 'isLastDigitOdd' in scope\n        if number > 10 && isFirstDigitOdd(number:\
    \ number) && isLastDigitOdd(number: number) {\n                              \
    \                               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // TODO: Implement this function\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpt86s0qi0/tmpt86s0qi0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae993088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae992d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae992d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae992d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt86s0qi0                        0x0000561e6f4c73d7 <unavailable> + 5079

    5    libc.so.6                          0x00002ae993274460 __libc_start_main +
    245

    6    tmpt86s0qi0                        0x0000561e6f4c6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let filtered = nums.filter { num in\n        (num > 10) &&\n        (num\
    \ % 2 != 0) &&\n        (num / 10 % 2 != 0) &&\n        (num % 10 != 0)\n    }\n\
    \    return filtered.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp_uuc0l0u/tmp_uuc0l0u.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecbe368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecbe05fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecbe05f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecbe05e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uuc0l0u                        0x0000564f10a01674 <unavailable> + 5748

    5    libc.so.6                          0x00002aecbe554460 __libc_start_main +
    245

    6    tmp_uuc0l0u                        0x0000564f10a01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var num = 0\n    for i in nums {\n        if (i > 10) && (i % 2 != 0) &&\
    \ (i / 100 != 0) && (i % 10 != 0) {\n            num += 1\n        }\n    }\n\
    \    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpebbvb1bt/tmpebbvb1bt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add8876ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add88465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add88465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add884647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebbvb1bt                        0x000055f7c3b015d7 <unavailable> + 5591

    5    libc.so.6                          0x00002add8895a460 __libc_start_main +
    245

    6    tmpebbvb1bt                        0x000055f7c3b01169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpzvosvo3o/tmpzvosvo3o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79e5f2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79e5c22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79e5c22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79e5c217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvosvo3o                        0x000055c3d44293d7 <unavailable> + 5079

    5    libc.so.6                          0x00002b79e6117460 __libc_start_main +
    245

    6    tmpzvosvo3o                        0x000055c3d4428f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 {\n           \
    \ let str = String(num)\n            if let first = str.first, let last = str.last\
    \ {\n                if (first.wholeNumberValue ?? 0) % 2 != 0 && (last.wholeNumberValue\
    \ ?? 0) % 2 != 0 {\n                    count += 1\n                }\n      \
    \      }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for number in nums {\n        if abs(number) >= 10 &&\
    \ (abs(number) % 10) % 2 != 0 && (abs(number / 10) % 10) % 2 != 0 {\n        \
    \    result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpzcjd7zkv/tmpzcjd7zkv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fd2bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fd28cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fd28ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fd28c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcjd7zkv                        0x0000560950b346c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b7fd2dbf460 __libc_start_main +
    245

    6    tmpzcjd7zkv                        0x0000560950b34259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        let numString = String(num)\n\
    \        let firstDigit = numString.first\n        let lastDigit = numString.last\n\
    \        let numIsGreaterThan10 = num > 10\n        let firstDigitIsOdd = firstDigit\
    \ != \"0\" && firstDigit != \"2\" && firstDigit != \"4\" && firstDigit != \"6\"\
    \ && firstDigit != \"8\"\n        let lastDigitIsOdd = lastDigit != \"0\" && lastDigit\
    \ != \"2\" && lastDigit != \"4\" && lastDigit != \"6\" && lastDigit != \"8\"\n\
    \        if (numIsGreaterThan10 && firstDigitIsOdd && lastDigitIsOdd) {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // TODO: Your implementation here!\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpc5rhzpre/tmpc5rhzpre.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0470dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba046dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba046dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba046dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5rhzpre                        0x0000564327d733d7 <unavailable> + 5079

    5    libc.so.6                          0x00002ba0472c6460 __libc_start_main +
    245

    6    tmpc5rhzpre                        0x0000564327d72f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        let firstDigit = num / 10\n\
    \        let lastDigit = num % 10\n        if num > 10 && firstDigit % 2 != 0\
    \ && lastDigit % 2 != 0 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: Exception
  stderr: 'tmpw6atei_m/tmpw6atei_m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab58f059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab58ed50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab58ed50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab58ed4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6atei_m                        0x000055f045aee6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ab58f245460 __libc_start_main +
    245

    6    tmpw6atei_m                        0x000055f045aee169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var filteredNumbers = [Int]()\n    for num in nums {\n        if num > 10\
    \ && num % 2 != 0 && (num / 10 % 2 != 0) && (num % 10 % 2 != 0) {\n          \
    \  filteredNumbers.append(num)\n        }\n    }\n    return filteredNumbers.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpbuvu60mq/tmpbuvu60mq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ddbd7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ddba71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ddba71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ddba707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbuvu60mq                        0x000055a81ba5f7c4 <unavailable> + 6084

    5    libc.so.6                          0x00002b1ddbf66460 __libc_start_main +
    245

    6    tmpbuvu60mq                        0x000055a81ba5f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var elements = 0\n    for number in nums {\n        if number > 10 {\n  \
    \          if number % 2 != 0 {\n                let first = number / 100\n  \
    \              let second = number % 10\n                if first % 2 != 0 &&\
    \ second % 2 != 0 {\n                    elements += 1\n                }\n  \
    \          }\n        }\n    }\n    return elements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpaxvt4isb/tmpaxvt4isb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f2d571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f2d268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f2d268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f2d2677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxvt4isb                        0x0000564af8fde5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b5f2d75d460 __libc_start_main +
    245

    6    tmpaxvt4isb                        0x0000564af8fde169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj79qmpy7.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 &&\
    \ $0.lastDigit % 2 != 0 }.count\n                                    ~~ ^~~~~~~~~~\n\
    /tmp/tmpj79qmpy7.swift:11:66: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n                                                           \
    \   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ {\n            let str = String(num)\n            if str.first!.isOddDigit &&\
    \ str.last!.isOddDigit {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_3lj8tlh.swift:15:27: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOddDigit'\n            if str.first!.isOddDigit\
    \ && str.last!.isOddDigit {\n               ~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_3lj8tlh.swift:15:51:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'isOddDigit'\n\
    \            if str.first!.isOddDigit && str.last!.isOddDigit {\n            \
    \                            ~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var i: Int = 0\n    for num in nums {\n        if (num > 10) && (num / 10\
    \ % 2 != 0) && (num % 10 % 2 != 0) {\n            i += 1\n        }\n    }\n \
    \   return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpwsm7fidx/tmpwsm7fidx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3158ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e31285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e31285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e312847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsm7fidx                        0x000055dfaf8036b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8e3177a460 __libc_start_main +
    245

    6    tmpwsm7fidx                        0x000055dfaf803169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 {\n           \
    \ let str = String(num)\n            if Int(String(str.first!))! % 2 != 0, Int(String(str.last!))!\
    \ % 2 != 0 {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if (num > 10) && (abs(num)\
    \ % 10 % 2 != 0) && (abs(num/10) % 10 % 2 != 0) {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpg1bv265j/tmpg1bv265j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae308fa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae308ca0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae308ca0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae308c9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg1bv265j                        0x000055dc38dab7a4 <unavailable> + 6052

    5    libc.so.6                          0x00002ae309195460 __libc_start_main +
    245

    6    tmpg1bv265j                        0x000055dc38dab259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var newArr = [Int]()\n    var nums2 = nums\n    for i in nums {\n       \
    \ if i > 10 {\n            if i % 2 != 0 && String(i).count >= 2 {\n         \
    \       if String(i).first! == \"-\" {\n                    if Array(String(i))[1]\
    \ == \"1\" || Array(String(i))[1] == \"3\" || Array(String(i))[1] == \"5\" ||\
    \ Array(String(i))[1] == \"7\" || Array(String(i))[1] == \"9\" {\n           \
    \             if String(i).last! == \"1\" || String(i).last! == \"3\" || String(i).last!\
    \ == \"5\" || String(i).last! == \"7\" || String(i).last! == \"9\" {\n       \
    \                     newArr.append(i)\n                        }\n          \
    \          }\n                } else {\n                    if String(i).first!\
    \ == \"1\" || String(i).first! == \"3\" || String(i).first! == \"5\" || String(i).first!\
    \ == \"7\" || String(i).first! == \"9\" {\n                        if String(i).last!\
    \ == \"1\" || String(i).last! == \"3\" || String(i).last! == \"5\" || String(i).last!\
    \ == \"7\" || String(i).last! == \"9\" {\n                            newArr.append(i)\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    print(newArr)\n    return newArr.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: '[]

    [15]

    [33, 109]

    [93, 125, 121, 109]

    [71, 75, 19]

    []

    []

    '
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { num in\n        return num > 10 && num % 2 != 0 && (num\
    \ / 10) % 2 != 0 && (num % 10) % 2 != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpfy33tpz2/tmpfy33tpz2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f07603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f072fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f072fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f072f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy33tpz2                        0x000055ac922b6674 <unavailable> + 5748

    5    libc.so.6                          0x00002b0f077ef460 __libc_start_main +
    245

    6    tmpfy33tpz2                        0x000055ac922b6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({$0 > 10 && $0%2 != 0 && $0%10 != 0}).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpq51begpk/tmpq51begpk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99ba68ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99ba385b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99ba385988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99ba3847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq51begpk                        0x00005639d4dfc674 <unavailable> + 5748

    5    libc.so.6                          0x00002b99ba87a460 __libc_start_main +
    245

    6    tmpq51begpk                        0x00005639d4dfc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for number in nums {\n        if number >= 10 {\n   \
    \         let firstDigit = number % 10\n            let secondDigit = (number\
    \ % 100) / 10\n            if firstDigit % 2 != 0 && secondDigit % 2 != 0 {\n\
    \                result += 1\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpmhl33tmi/tmpmhl33tmi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eaa7cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eaa4c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eaa4c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eaa4c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhl33tmi                        0x00005588c24ec6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b0eaa9b9460 __libc_start_main +
    245

    6    tmpmhl33tmi                        0x00005588c24ec169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({$0 > 10}).filter({$0.firstDigit % 2 != 0 && $0.lastDigit\
    \ % 2 != 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6smuabh4.swift:11:46: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter({$0 > 10}).filter({$0.firstDigit % 2 !=\
    \ 0 && $0.lastDigit % 2 != 0}).count\n                                       \
    \   ~~ ^~~~~~~~~~\n/tmp/tmp6smuabh4.swift:11:72: error: value of type 'Int' has\
    \ no member 'lastDigit'\n    return nums.filter({$0 > 10}).filter({$0.firstDigit\
    \ % 2 != 0 && $0.lastDigit % 2 != 0}).count\n                                \
    \                                    ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {\n        if $0 > 10 {\n            return String($0).dropFirst().dropLast().first\
    \ == \"1\" ||\n                String($0).dropFirst().dropLast().first == \"3\"\
    \ ||\n                String($0).dropFirst().dropLast().first == \"5\" ||\n  \
    \              String($0).dropFirst().dropLast().first == \"7\" ||\n         \
    \       String($0).dropFirst().dropLast().first == \"9\"\n        }\n        return\
    \ false\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpij4h5trv/tmpij4h5trv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b865a723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b865a41ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b865a41a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b865a4197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpij4h5trv                        0x00005558deb998b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b865a90f460 __libc_start_main +
    245

    6    tmpij4h5trv                        0x00005558deb99449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0 % 2 != 0 && ($0 / 10) % 2 != 0 && $0 %\
    \ 10 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp3wjgxx54/tmp3wjgxx54.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7adb81ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7adb515b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7adb515988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7adb5147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3wjgxx54                        0x00005556c3439674 <unavailable> + 5748

    5    libc.so.6                          0x00002b7adba0a460 __libc_start_main +
    245

    6    tmp3wjgxx54                        0x00005556c3439129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && ($0 % 10) % 2 != 0 && $0 / 10 % 2 != 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpv_75qu9i/tmpv_75qu9i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb4c51bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb4c212b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb4c212988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb4c2117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_75qu9i                        0x000055c0ebb77674 <unavailable> + 5748

    5    libc.so.6                          0x00002abb4c707460 __libc_start_main +
    245

    6    tmpv_75qu9i                        0x000055c0ebb77129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var results = 0\n    for num in nums {\n        let firstDigit = num % 10\n\
    \        let lastDigit = num / 10\n        if firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0 && num > 10 {\n            results += 1\n        }\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpz7j7e5_6/tmpz7j7e5_6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33855ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33852d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33852d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33852d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7j7e5_6                        0x0000563f6dad06b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b33857c9460 __libc_start_main +
    245

    6    tmpz7j7e5_6                        0x0000563f6dad0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let numbers = nums.filter { $0 > 10 }\n    let result = numbers.filter {\
    \ String($0).prefix(1) == \"1\" || String($0).prefix(1) == \"3\" || String($0).prefix(1)\
    \ == \"5\" || String($0).prefix(1) == \"7\" || String($0).prefix(1) == \"9\" }\n\
    \    return result.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpjharaby7/tmpjharaby7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fa0532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa0229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa0229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa02287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjharaby7                        0x000055ade6818827 <unavailable> + 6183

    5    libc.so.6                          0x00002b8fa071e460 __libc_start_main +
    245

    6    tmpjharaby7                        0x000055ade68183b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \  var filteredCount = 0\n  for number in nums {\n    if number > 10 && number.hasOddFirstDigit()\
    \ && number.hasOddLastDigit() {\n      filteredCount += 1\n    }\n  }\n  return\
    \ filteredCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7ub0l0g1.swift:13:30: error: value of type 'Int' has no member\
    \ 'hasOddFirstDigit'\n    if number > 10 && number.hasOddFirstDigit() && number.hasOddLastDigit()\
    \ {\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp7ub0l0g1.swift:13:59:\
    \ error: value of type 'Int' has no member 'hasOddLastDigit'\n    if number >\
    \ 10 && number.hasOddFirstDigit() && number.hasOddLastDigit() {\n            \
    \                                       ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // TODO: Implement this function\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpt86s0qi0/tmpt86s0qi0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae993088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae992d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae992d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae992d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt86s0qi0                        0x0000561e6f4c73d7 <unavailable> + 5079

    5    libc.so.6                          0x00002ae993274460 __libc_start_main +
    245

    6    tmpt86s0qi0                        0x0000561e6f4c6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009773
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let result = nums.filter {\n        $0 > 10 && Int(\"\\($0/10)\")! % 2 !=\
    \ 0 && $0 % 2 != 0\n    }\n    return result.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpgjsjjae6/tmpgjsjjae6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa666b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa663aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa663aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa663a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjsjjae6                        0x00005594edf29a04 <unavailable> + 6660

    5    libc.so.6                          0x00002baa6689f460 __libc_start_main +
    245

    6    tmpgjsjjae6                        0x00005594edf294b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit().isOdd() && $0.lastDigit().isOdd()\
    \ }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1ummtgok.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit().isOdd() &&\
    \ $0.lastDigit().isOdd() }.count\n                                    ~~ ^~~~~~~~~~\n\
    /tmp/tmp1ummtgok.swift:11:67: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit().isOdd() && $0.lastDigit().isOdd()\
    \ }.count\n                                                               ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // \u521B\u5EFA\u4E00\u4E2A\u6570\u7EC4,\u5B58\u653E\u6EE1\u8DB3\u6761\u4EF6\
    \u7684\u6570\u636E\n    var result:[Int] = []\n    for item in nums {\n      \
    \  // \u5C06\u6570\u5B57\u8F6C\u4E3A\u5B57\u7B26\u4E32\uFF0C\u7136\u540E\u53D6\
    \u9996\u4F4D\u6570\u5B57\u548C\u672B\u4F4D\u6570\u5B57\n        let firstString\
    \ = String(item).first!\n        let lastString = String(item).last!\n       \
    \ // \u5224\u65AD\u9996\u4F4D\u548C\u672B\u4F4D\u662F\u5426\u662F\u5947\u6570\uFF0C\
    \u5E76\u4E14\u6570\u5B57\u662F\u5426\u5927\u4E8E10\n        if item > 10 && firstString\
    \ % 2 != 0 && lastString % 2 != 0 {\n            result.append(item)\n       \
    \ }\n    }\n    return result.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpihid8zr8.swift:18:25: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if item > 10 && firstString\
    \ % 2 != 0 && lastString % 2 != 0 {\n                        ^\n/tmp/tmpihid8zr8.swift:18:49:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n        if item > 10 && firstString % 2 != 0 && lastString\
    \ % 2 != 0 {\n                                                ^\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { (number) -> Bool in\n        var firstDigit = number\n\
    \        var lastDigit = number % 10\n        while firstDigit > 9 {\n       \
    \     firstDigit /= 10\n        }\n        return number > 10 && firstDigit %\
    \ 2 != 0 && lastDigit % 2 != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {\n        $0 > 10 && $0 / 10 % 2 != 0 && $0 % 10 % 2\
    \ != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf5r52bk6/tmpf5r52bk6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9180b5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9180853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9180853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91808527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5r52bk6                        0x0000562e84188674 <unavailable> + 5748

    5    libc.so.6                          0x00002b9180d48460 __libc_start_main +
    245

    6    tmpf5r52bk6                        0x0000562e84188129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var counter = 0\n    for num in nums {\n        if num > 10 && num.firstDigit()\
    \ % 2 != 0 && num.lastDigit() % 2 != 0 {\n            counter += 1\n        }\n\
    \    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp93n8npzy.swift:13:28: error: value of type 'Int' has no member\
    \ 'firstDigit'\n        if num > 10 && num.firstDigit() % 2 != 0 && num.lastDigit()\
    \ % 2 != 0 {\n                       ~~~ ^~~~~~~~~~\n/tmp/tmp93n8npzy.swift:13:57:\
    \ error: value of type 'Int' has no member 'lastDigit'\n        if num > 10 &&\
    \ num.firstDigit() % 2 != 0 && num.lastDigit() % 2 != 0 {\n                  \
    \                                  ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {\n        $0 >= 10 &&\n        $0.firstDigit % 2 != 0\
    \ &&\n        $0.lastDigit % 2 != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7_g2f6cg.swift:13:12: error: value of type 'Int' has no member\
    \ 'firstDigit'\n        $0.firstDigit % 2 != 0 &&\n        ~~ ^~~~~~~~~~\n/tmp/tmp7_g2f6cg.swift:14:12:\
    \ error: value of type 'Int' has no member 'lastDigit'\n        $0.lastDigit %\
    \ 2 != 0\n        ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    var greaterThan10 = [Int]()\n    var count = 0\n    \n    for i in\
    \ nums {\n        if i > 10 {\n            greaterThan10.append(i)\n        }\n\
    \    }\n    \n    for n in greaterThan10 {\n        if n % 2 != 0 {\n        \
    \    let lastDigit = n % 10\n            let firstDigit = n / (n % 10)\n     \
    \       if firstDigit % 2 != 0 && lastDigit % 2 != 0 {\n                count\
    \ += 1\n            }\n        }\n    }\n    \n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp4j8pjuqf/tmp4j8pjuqf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8095b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8092aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8092aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8092a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j8pjuqf                        0x000056049fbcd764 <unavailable> + 5988

    5    libc.so.6                          0x00002af80979f460 __libc_start_main +
    245

    6    tmp4j8pjuqf                        0x000056049fbcd219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({\n        $0 > 10 && isFirstDigitOdd($0) && isLastDigitOdd($0)\n\
    \    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpw8sd56xw.swift:12:20: error: cannot find 'isFirstDigitOdd' in scope\n\
    \        $0 > 10 && isFirstDigitOdd($0) && isLastDigitOdd($0)\n              \
    \     ^~~~~~~~~~~~~~~\n/tmp/tmpw8sd56xw.swift:12:43: error: cannot find 'isLastDigitOdd'\
    \ in scope\n        $0 > 10 && isFirstDigitOdd($0) && isLastDigitOdd($0)\n   \
    \                                       ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    return nums.filter({$0 > 10 && ($0/10)%2 != 0 && $0%2 != 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmprp1qf6c8/tmprp1qf6c8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af575813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57550ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57550a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5755097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprp1qf6c8                        0x000055636fd2d674 <unavailable> + 5748

    5    libc.so.6                          0x00002af5759ff460 __libc_start_main +
    245

    6    tmprp1qf6c8                        0x000055636fd2d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { \n        $0 > 10 && String($0).filter({ String($0).contains(\"\
    1\") || String($0).contains(\"3\") || String($0).contains(\"5\") || String($0).contains(\"\
    7\") || String($0).contains(\"9\") }).count == 2\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let greaterThan10 = nums.filter { $0 > 10 }\n    let greaterThan10AndOdd\
    \ = greaterThan10.filter { isFirstAndLastDigitOdd(number: $0) }\n    return greaterThan10AndOdd.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp93dn_ks9.swift:12:54: error: cannot find 'isFirstAndLastDigitOdd'\
    \ in scope\n    let greaterThan10AndOdd = greaterThan10.filter { isFirstAndLastDigitOdd(number:\
    \ $0) }\n                                                     ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj79qmpy7.swift:11:40: error: value of type 'Int' has no member\
    \ 'firstDigit'\n    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 &&\
    \ $0.lastDigit % 2 != 0 }.count\n                                    ~~ ^~~~~~~~~~\n\
    /tmp/tmpj79qmpy7.swift:11:66: error: value of type 'Int' has no member 'lastDigit'\n\
    \    return nums.filter { $0 > 10 && $0.firstDigit % 2 != 0 && $0.lastDigit %\
    \ 2 != 0 }.count\n                                                           \
    \   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let specialNumbers = nums.filter{ number in\n        number > 10 &&\n   \
    \     number.firstDigit() % 2 != 0 &&\n        number.lastDigit() % 2 != 0\n \
    \   }\n    return specialNumbers.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpi9rwx42n.swift:13:16: error: value of type 'Int' has no member\
    \ 'firstDigit'\n        number.firstDigit() % 2 != 0 &&\n        ~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpi9rwx42n.swift:14:16: error: value of type 'Int' has no member 'lastDigit'\n\
    \        number.lastDigit() % 2 != 0\n        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter { $0 > 10 && !($0 % 2 == 0) && !($0 / 10 % 2 == 0) }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp1f06_62f/tmp1f06_62f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dc7744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dc743bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dc743b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dc743a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f06_62f                        0x0000556f09d72674 <unavailable> + 5748

    5    libc.so.6                          0x00002b2dc7930460 __libc_start_main +
    245

    6    tmp1f06_62f                        0x0000556f09d72129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ (n) -> Bool in\n        if n < 10 {\n            return\
    \ false\n        }\n        let str = String(n)\n        return isOdd(n: Int(str.first!))\
    \ && isOdd(n: Int(str.last!))\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_qdlpv41.swift:16:16: error: cannot find 'isOdd' in scope\n   \
    \     return isOdd(n: Int(str.first!)) && isOdd(n: Int(str.last!))\n         \
    \      ^~~~~\n/tmp/tmp_qdlpv41.swift:16:45: error: cannot find 'isOdd' in scope\n\
    \        return isOdd(n: Int(str.first!)) && isOdd(n: Int(str.last!))\n      \
    \                                      ^~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // Write your code here.\n    let filteredNumbers = nums.filter { $0 > 10\
    \ && $0 % 2 != 0 && $0 % 10 != 0 }\n    return filteredNumbers.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp9q9z67ui/tmp9q9z67ui.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30a12f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30a0fe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30a0fe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30a0fe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q9z67ui                        0x0000558e3051f674 <unavailable> + 5748

    5    libc.so.6                          0x00002b30a14dc460 __libc_start_main +
    245

    6    tmp9q9z67ui                        0x0000558e3051f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ (num) -> Bool in\n        let firstDigit = String(num).first\n\
    \        let lastDigit = String(num).last\n        let isOddFirstDigit = firstDigit\
    \ == \"1\" || firstDigit == \"3\" || firstDigit == \"5\" || firstDigit == \"7\"\
    \ || firstDigit == \"9\"\n        let isOddLastDigit = lastDigit == \"1\" || lastDigit\
    \ == \"3\" || lastDigit == \"5\" || lastDigit == \"7\" || lastDigit == \"9\"\n\
    \        return num > 10 && isOddFirstDigit && isOddLastDigit\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // Write your code below\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpwzj0bpmv.swift:265:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if number > 10 && (number\
    \ % 10 != 0) && number / 10 % 2 != 0 {\n            count += 1\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp9odu25zw/tmp9odu25zw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebf3064c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebf2d5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebf2d5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebf2d5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9odu25zw                        0x000055fe10eb95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aebf3250460 __libc_start_main +
    245

    6    tmp9odu25zw                        0x000055fe10eb9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 0
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        let numToStr = String(num)\n\
    \        if numToStr.count == 1 && num > 10 && !num.isMultiple(of: 2) {\n    \
    \        count += 1\n        } else if numToStr.count > 1 && num > 10 && !num.isMultiple(of:\
    \ 2) {\n            let firstDigit = Int(String(numToStr.first!))!\n         \
    \   let lastDigit = Int(String(numToStr.last!))!\n            if !firstDigit.isMultiple(of:\
    \ 2) && !lastDigit.isMultiple(of: 2) {\n                count += 1\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if (num > 10) && (num%2 !=\
    \ 0) && (num/10%2 != 0) && (num%10 != 0) {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpi53g04vz/tmpi53g04vz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b084fcc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b084f9b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b084f9b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b084f9b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi53g04vz                        0x00005613cfc3e6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b084fead460 __libc_start_main +
    245

    6    tmpi53g04vz                        0x00005613cfc3e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if abs(number) > 10 {\n\
    \            let firstDigit = abs(number) % 10\n            let lastDigit = number\
    \ % 10\n            if firstDigit % 2 != 0 && lastDigit % 2 != 0 {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp358hrwg9/tmp358hrwg9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b006b925c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b006b61cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b006b61c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b006b61b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp358hrwg9                        0x000055d6c99756c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b006bb11460 __libc_start_main +
    245

    6    tmp358hrwg9                        0x000055d6c9975259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // create a function to judge whether the number has odd first and last digits\n\
    \    func isOddFirstAndLastDigits(number: Int) -> Bool {\n        // get the last\
    \ digit\n        let lastDigit = number % 10\n        // get the first digit\n\
    \        let firstDigit = number / 100\n        // judge whether the first and\
    \ last digits are odd\n        if lastDigit % 2 == 1 && firstDigit % 2 == 1 {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    }\n    // filter the numbers that greater than 10 and both first and\
    \ last digits are odd\n    let odds = nums.filter{ $0 > 10 && isOddFirstAndLastDigits(number:\
    \ $0) }\n    // count the numbers of element greater than 10 and both first and\
    \ last digits are odd\n    return odds.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmprr8rghew/tmprr8rghew.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf486f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf483eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf483ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf483e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprr8rghew                        0x0000564a1c995597 <unavailable> + 5527

    5    libc.so.6                          0x00002acf488df460 __libc_start_main +
    245

    6    tmprr8rghew                        0x0000564a1c995129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter{ $0 > 10 && firstIsOdd(n: $0) && lastIsOdd(n: $0) }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdha8dwgn.swift:11:36: error: cannot find 'firstIsOdd' in scope\n\
    \    return nums.filter{ $0 > 10 && firstIsOdd(n: $0) && lastIsOdd(n: $0) }.count\n\
    \                                   ^~~~~~~~~~\n/tmp/tmpdha8dwgn.swift:11:57:\
    \ error: cannot find 'lastIsOdd' in scope\n    return nums.filter{ $0 > 10 &&\
    \ firstIsOdd(n: $0) && lastIsOdd(n: $0) }.count\n                            \
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // get first digit of each number\n    let firstDigits = nums.map { num in\n\
    \        return num / 10\n    }\n    // get last digit of each number\n    let\
    \ lastDigits = nums.map { num in\n        return num % 10\n    }\n    // check\
    \ if each number is greater than 10\n    let greaterThanTen = nums.map { num in\n\
    \        return num > 10\n    }\n    // check if each first digit is odd\n   \
    \ let oddFirstDigits = firstDigits.map { num in\n        return num % 2 != 0\n\
    \    }\n    // check if each last digit is odd\n    let oddLastDigits = lastDigits.map\
    \ { num in\n        return num % 2 != 0\n    }\n    // if odd last digit and odd\
    \ first digit, and greater than 10, add one to the count\n    var count = 0\n\
    \    for (index, _) in nums.enumerated() {\n        if oddFirstDigits[index] &&\
    \ oddLastDigits[index] && greaterThanTen[index] {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpzaasr1m7/tmpzaasr1m7.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67b2552c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67b2249b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67b2249988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67b22487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaasr1m7                        0x00005610ff176894 <unavailable> + 6292

    5    libc.so.6                          0x00002b67b273e460 __libc_start_main +
    245

    6    tmpzaasr1m7                        0x00005610ff176349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for num in nums {\n        if num > 10 && firstAndLastAreOdd(num:\
    \ num) {\n            result += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp0if2806.swift:13:24: error: cannot find 'firstAndLastAreOdd' in\
    \ scope\n        if num > 10 && firstAndLastAreOdd(num: num) {\n             \
    \          ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var total = 0\n    for num in nums {\n        let firstDigit = num % 10\n\
    \        var currentNum = num\n        var lastDigit = 0\n        while currentNum\
    \ > 0 {\n            lastDigit = currentNum % 10\n            currentNum /= 10\n\
    \        }\n        if num > 10 && firstDigit.isOdd && lastDigit.isOdd {\n   \
    \         total += 1\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpf68k3ra5.swift:20:35: error: value of type 'Int' has no member\
    \ 'isOdd'\n        if num > 10 && firstDigit.isOdd && lastDigit.isOdd {\n    \
    \                   ~~~~~~~~~~ ^~~~~\n/tmp/tmpf68k3ra5.swift:20:54: error: value\
    \ of type 'Int' has no member 'isOdd'\n        if num > 10 && firstDigit.isOdd\
    \ && lastDigit.isOdd {\n                                           ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter{$0 > 10 && ($0 / 10 % 2 != 0) && ($0 % 10 % 2 != 0)}.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpfeb2z_ad/tmpfeb2z_ad.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b512b853c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b512b54ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b512b54a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b512b5497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfeb2z_ad                        0x00005567643e5674 <unavailable> + 5748

    5    libc.so.6                          0x00002b512ba3f460 __libc_start_main +
    245

    6    tmpfeb2z_ad                        0x00005567643e5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var numbers = 0\n    for num in nums {\n        let firstDigit = num / 10\n\
    \        let lastDigit = num % 10\n        if (num > 10) && (firstDigit % 2 ==\
    \ 1) && (lastDigit % 2 == 1) {\n            numbers += 1\n        }\n    }\n \
    \   return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpq3c91843/tmpq3c91843.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab944264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab943f5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab943f5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab943f5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3c91843                        0x000055c3164656b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ab944450460 __libc_start_main +
    245

    6    tmpq3c91843                        0x000055c316465169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var counter = 0\n    for number in nums {\n        if (number > 10) &&\n\
    \            (number % 2 != 0) &&\n            (number.firstDigit() % 2 != 0)\
    \ &&\n            (number.lastDigit() % 2 != 0) {\n            counter += 1\n\
    \        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3_7gdaou.swift:15:21: error: value of type 'Int' has no member\
    \ 'firstDigit'\n            (number.firstDigit() % 2 != 0) &&\n             ~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3_7gdaou.swift:16:21: error: value of type 'Int' has no\
    \ member 'lastDigit'\n            (number.lastDigit() % 2 != 0) {\n          \
    \   ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \  return nums.filter{$0>10 && $0.digits.count >= 2 && $0.digits.first! % 2 !=\
    \ 0 && $0.digits.last! % 2 != 0}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpi4lo10e6.swift:11:34: error: value of type 'Int' has no member\
    \ 'digits'\n  return nums.filter{$0>10 && $0.digits.count >= 2 && $0.digits.first!\
    \ % 2 != 0 && $0.digits.last! % 2 != 0}.count\n                              ~~\
    \ ^~~~~~\n/tmp/tmpi4lo10e6.swift:11:58: error: value of type 'Int' has no member\
    \ 'digits'\n  return nums.filter{$0>10 && $0.digits.count >= 2 && $0.digits.first!\
    \ % 2 != 0 && $0.digits.last! % 2 != 0}.count\n                              \
    \                        ~~ ^~~~~~\n/tmp/tmpi4lo10e6.swift:11:87: error: value\
    \ of type 'Int' has no member 'digits'\n  return nums.filter{$0>10 && $0.digits.count\
    \ >= 2 && $0.digits.first! % 2 != 0 && $0.digits.last! % 2 != 0}.count\n     \
    \                                                                            \
    \  ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var newNums = [Int]()\n    for i in nums {\n        if i > 10 && i%2 != 0\
    \ && (i/10)%2 != 0 {\n            newNums.append(i)\n        }\n    }\n    return\
    \ newNums.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpydxv6kh9/tmpydxv6kh9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc953ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc950e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc950e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc950e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydxv6kh9                        0x000055c9717f87c4 <unavailable> + 6084

    5    libc.so.6                          0x00002afc955d8460 __libc_start_main +
    245

    6    tmpydxv6kh9                        0x000055c9717f8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpzgf5tyem/tmpzgf5tyem.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af879656c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af87934db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af87934d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af87934c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgf5tyem                        0x0000556e509893d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af879842460 __libc_start_main +
    245

    6    tmpzgf5tyem                        0x0000556e50988f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var counter = 0\n    for number in nums {\n        let lastNumber = number\
    \ % 10\n        let firstNumber = number / 10\n        if firstNumber == 0 {\n\
    \            if lastNumber > 10 && lastNumber % 2 != 0 {\n                counter\
    \ += 1\n            }\n        } else {\n            let firstNumber = number\
    \ % 10\n            let lastNumber = number / 10\n            if lastNumber >\
    \ 10 && lastNumber % 2 != 0 && firstNumber % 2 != 0 {\n                counter\
    \ += 1\n            }\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp7pdkseua/tmp7pdkseua.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7b247dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7b2174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7b2174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7b21737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pdkseua                        0x000055dc6be945d7 <unavailable> + 5591

    5    libc.so.6                          0x00002ac7b2669460 __libc_start_main +
    245

    6    tmp7pdkseua                        0x000055dc6be94169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && isOdd(input:\
    \ num / 10) && isOdd(input: num % 10) {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyfqfoz8y.swift:13:24: error: cannot find 'isOdd' in scope\n   \
    \     if num > 10 && isOdd(input: num / 10) && isOdd(input: num % 10) {\n    \
    \                   ^~~~~\n/tmp/tmpyfqfoz8y.swift:13:50: error: cannot find 'isOdd'\
    \ in scope\n        if num > 10 && isOdd(input: num / 10) && isOdd(input: num\
    \ % 10) {\n                                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && (abs(num) %\
    \ 10) % 2 != 0 && (abs(num) / 10) % 2 != 0 {\n            count += 1\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp26cqjn0g/tmp26cqjn0g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4039f5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4039c53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4039c53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4039c527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26cqjn0g                        0x000055d6d21f17a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b403a148460 __libc_start_main +
    245

    6    tmp26cqjn0g                        0x000055d6d21f1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {\n        if $0 >= 10 && ($0%10)%2 != 0 && $0/10%2 !=\
    \ 0 {\n            return true\n        }\n        return false\n    }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpocp5a0rx/tmpocp5a0rx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46c2baec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46c28a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46c28a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46c28a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocp5a0rx                        0x00005579188b6674 <unavailable> + 5748

    5    libc.so.6                          0x00002b46c2d9a460 __libc_start_main +
    245

    6    tmpocp5a0rx                        0x00005579188b6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var counter = 0\n    for i in nums {\n        let first = i % 10\n      \
    \  let last = i / 10\n        if i > 10 && first % 2 != 0 && last % 2 != 0 {\n\
    \            counter += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpg2h0vhp7/tmpg2h0vhp7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac7401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac70f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac70f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac70f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2h0vhp7                        0x0000559e77c696b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6ac75ed460 __libc_start_main +
    245

    6    tmpg2h0vhp7                        0x0000559e77c69169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter{ $0 > 10 && (String($0).first?.isOdd ?? false) && (String($0).last?.isOdd\
    \ ?? false) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb80tk72t.swift:11:55: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return nums.filter{ $0 > 10 && (String($0).first?.isOdd\
    \ ?? false) && (String($0).last?.isOdd ?? false) }.count\n                   \
    \                 ~~~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpb80tk72t.swift:11:92: error:\
    \ value of type 'String.Element' (aka 'Character') has no member 'isOdd'\n   \
    \ return nums.filter{ $0 > 10 && (String($0).first?.isOdd ?? false) && (String($0).last?.isOdd\
    \ ?? false) }.count\n                                                        \
    \                  ~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var result = 0\n    for number in nums {\n        if (number > 10) && (abs(number)\
    \ % 10 % 2 != 0) && (abs(number) / 10 % 10 % 2 != 0) {\n            result +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpvtjgp26a/tmpvtjgp26a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25b22c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25b1fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25b1fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25b1fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtjgp26a                        0x0000562b349ca7a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b25b24af460 __libc_start_main +
    245

    6    tmpvtjgp26a                        0x0000562b349ca259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for x in nums {\n        if x > 10 && x % 2 != 0 && x\
    \ / 10 % 2 != 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpon4r3m4a/tmpon4r3m4a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ae7377c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ae706eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ae706e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ae706d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon4r3m4a                        0x00005636806586b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b4ae7563460 __libc_start_main +
    245

    6    tmpon4r3m4a                        0x0000563680658169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter {\n        $0 > 10 &&\n        $0.digits.first! % 2 !=\
    \ 0 &&\n        $0.digits.last! % 2 != 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpe6gmjvag.swift:13:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.first! % 2 != 0 &&\n        ~~ ^~~~~~\n/tmp/tmpe6gmjvag.swift:14:12:\
    \ error: value of type 'Int' has no member 'digits'\n        $0.digits.last! %\
    \ 2 != 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiag0zn0h/tmpiag0zn0h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4257d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4254cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4254cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4254ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiag0zn0h                        0x000055c01afa13d7 <unavailable> + 5079

    5    libc.so.6                          0x00002af4259c0460 __libc_start_main +
    245

    6    tmpiag0zn0h                        0x000055c01afa0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660009772
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        if (number > 10) && (firstAndLastDigitsAreOdd(number:\
    \ number)) {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpicp2uwps.swift:13:30: error: cannot find 'firstAndLastDigitsAreOdd'\
    \ in scope\n        if (number > 10) && (firstAndLastDigitsAreOdd(number: number))\
    \ {\n                             ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for number in nums {\n        let firstNumber = Int(String(number).first!)\n\
    \        let lastNumber = Int(String(number).last!)\n        if number > 10 &&\
    \ firstNumber % 2 != 0 && lastNumber % 2 != 0 {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprly93_9l.swift:13:27: error: no exact matches in call to initializer\
    \ \n        let firstNumber = Int(String(number).first!)\n                   \
    \       ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmprly93_9l.swift:14:26: error: no exact matches in call to initializer \n\
    \        let lastNumber = Int(String(number).last!)\n                        \
    \ ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: D"
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // write your code here\n    var result = 0\n    for i in nums {\n      \
    \  if i > 10 {\n            if (abs(i) % 10) % 2 != 0, i/10 % 2 != 0 {\n     \
    \           result += 1\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpnr8on4gb/tmpnr8on4gb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8874200c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8873ef7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8873ef7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8873ef67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnr8on4gb                        0x00005588dddf17a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b88743ec460 __libc_start_main +
    245

    6    tmpnr8on4gb                        0x00005588dddf1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    return nums.filter({ x in\n        (x > 10) && ((x % 10) % 2 != 0) && ((x\
    \ / 10) % 2 != 0)\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp098uxirh/tmp098uxirh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2c7278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2c6f6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2c6f6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2c6f6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp098uxirh                        0x000055d98e4ee674 <unavailable> + 5748

    5    libc.so.6                          0x00002ac2c7464460 __libc_start_main +
    245

    6    tmp098uxirh                        0x000055d98e4ee129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009775
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && firstDigit(num:\
    \ num) % 2 != 0 && lastDigit(num: num) % 2 != 0 {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp29jtsosb.swift:13:24: error: cannot find 'firstDigit' in scope\n\
    \        if num > 10 && firstDigit(num: num) % 2 != 0 && lastDigit(num: num) %\
    \ 2 != 0 {\n                       ^~~~~~~~~~\n/tmp/tmp29jtsosb.swift:13:57: error:\
    \ cannot find 'lastDigit' in scope\n        if num > 10 && firstDigit(num: num)\
    \ % 2 != 0 && lastDigit(num: num) % 2 != 0 {\n                               \
    \                         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    // your code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpka9by0zz.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    let greaterThan10 = nums.filter {$0 > 10}\n    let doubleFilter = greaterThan10.filter\
    \ {\n        $0 > 9 && ($0 % 10 == 1 || $0 % 10 == 3 || $0 % 10 == 5 || $0 % 10\
    \ == 7 || $0 % 10 == 9)\n    }\n    return doubleFilter.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmplymzqzub/tmplymzqzub.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42fc7c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42fc4bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42fc4ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42fc4b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplymzqzub                        0x0000560f686c8674 <unavailable> + 5748

    5    libc.so.6                          0x00002b42fc9af460 __libc_start_main +
    245

    6    tmplymzqzub                        0x0000560f686c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for i in nums {\n        if i > 10 && i.firstDigitIsOdd()\
    \ && i.lastDigitIsOdd() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(specialFilter(nums: [5,\
    \ -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
    \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
    assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int])\
    \ == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp00h3z39d.swift:13:24: error: value of type 'Int' has no member\
    \ 'firstDigitIsOdd'\n        if i > 10 && i.firstDigitIsOdd() && i.lastDigitIsOdd()\
    \ {\n                     ~ ^~~~~~~~~~~~~~~\n/tmp/tmp00h3z39d.swift:13:47: error:\
    \ value of type 'Int' has no member 'lastDigitIsOdd'\n        if i > 10 && i.firstDigitIsOdd()\
    \ && i.lastDigitIsOdd() {\n                                            ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009774
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    \n    // your code here\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp0_suok2a.swift:14:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009774
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
    \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \    var count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ && num % 10 != 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp02_oo_70/tmp02_oo_70.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf9a577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf9a26eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf9a26e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf9a26d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02_oo_70                        0x00005639203b16b4 <unavailable> + 5812

    5    libc.so.6                          0x00002acf9a763460 __libc_start_main +
    245

    6    tmp02_oo_70                        0x00005639203b1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009775
