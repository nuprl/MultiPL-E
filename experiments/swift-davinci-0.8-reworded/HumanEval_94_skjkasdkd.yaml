name: HumanEval_94_skjkasdkd
language: swift
prompt: "\n/// You are given an array of integers.\n/// You need to find the largest\
  \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
  \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
  \ 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2,\
  \ 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
  \ 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724, 32, 71, 99,\
  \ 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0, 81, 12, 3,\
  \ 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\nfunc skjkasdkd(lst:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4,\
  \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
  \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
  \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
  assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
  assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8,\
  \ 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
  \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
completions: ['    return 0', "    var largest = 0\n    for num in lst {\n       \
    \ if largest < num && isPrime(num) {\n            largest = num\n        }\n \
    \   }\n    var sum = 0\n    while largest > 0 {\n        sum += largest % 10\n\
    \        largest /= 10\n    }\n    return sum", '    return 0', '    return 0',
  "    var tmp : Int = 0\n    var maxx : Int = 0\n    for i in lst {\n        if i\
    \ > maxx {\n            if isPrime(num: i) {\n                maxx = i\n     \
    \       }\n        }\n    }\n    for i in maxx.description {\n        tmp += Int(String(i))!\n\
    \    }\n    return tmp", "    var lst = lst.sorted()\n    var lst1 = lst.filter\
    \ { isPrime($0) }\n    var result = lst1.last ?? 0\n    var str = String(result)\n\
    \    var number = 0\n    for i in str.characters {\n        number += Int(String(i))!\n\
    \    }\n    return number", "    var largestPrime: Int = 0\n    for number in\
    \ lst {\n        let isPrime = isPrimeNumber(n: number)\n        if (isPrime)\
    \ {\n            if (number > largestPrime) {\n                largestPrime =\
    \ number\n            }\n        }\n    }\n    var largestPrimeString = String(largestPrime)\n\
    \    var largestPrimeSum: Int = 0\n    while largestPrimeString.count > 0 {\n\
    \        let index = largestPrimeString.index(largestPrimeString.startIndex, offsetBy:\
    \ 1)\n        let firstNumber = Int(String(largestPrimeString[..<index]))!\n \
    \       largestPrimeSum += firstNumber\n        largestPrimeString.remove(at:\
    \ largestPrimeString.startIndex)\n    }\n    return largestPrimeSum", '    return
    0', "    let x = lst.filter { $0 > 1 }.map { $0 }.max()!\n    let primes = x.primeFactors()\n\
    \    let digits = primes.map { String($0) }.reduce(\"\", +)\n    let y = digits.map\
    \ { Int(String($0))! }.reduce(0, +)\n    return y", "    let prime_values = lst.filter\
    \ { (value) -> Bool in\n        var is_prime = true\n        if value <= 1 {\n\
    \            is_prime = false\n        }\n        if value <= 3 {\n          \
    \  is_prime = true\n        }\n        if value%2 == 0 || value%3 == 0 {\n   \
    \         is_prime = false\n        }\n        var i = 5\n        while i*i <=\
    \ value {\n            if value%i == 0 || value%(i+2) == 0 {\n               \
    \ is_prime = false\n            }\n            i = i + 6\n        }\n        return\
    \ is_prime\n    }\n    if let max_value = prime_values.max() {\n        return\
    \ max_value.digits_sum()\n    }\n    return 0", "    \n    return 0", '    return
    lst.max()!.digits().sum()', '    return 0', "    var lst = lst\n    for i in 1..<lst.count\
    \ {\n        if lst[i - 1] > lst[i] {\n            let t = lst[i - 1]\n      \
    \      lst[i - 1] = lst[i]\n            lst[i] = t\n        }\n    }\n    var\
    \ n = 0\n    var number = 0\n    while n < lst.count {\n        number = lst[n]\n\
    \        n += 1\n    }\n    var sum = 0\n    while number > 0 {\n        sum +=\
    \ number % 10\n        number /= 10\n    }\n    return sum", "    var res = 0\n\
    \    var maxPrime = 0\n    for n in lst {\n        if isPrime(n) {\n         \
    \   if n > maxPrime {\n                maxPrime = n\n            }\n        }\n\
    \    }\n    var n = maxPrime\n    while n > 0 {\n        res += n % 10\n     \
    \   n /= 10\n    }\n    return res", "    var primes: [Int] = []\n    var temp:\
    \ [Int] = []\n    var digitSum: Int = 0\n    for x in lst {\n        if !temp.contains(x)\
    \ {\n            if x > 1 {\n                temp.append(x)\n                if\
    \ isPrime(n: x) {\n                    primes.append(x)\n                }\n \
    \           }\n        }\n    }\n    primes.sort()\n    let myNumber = String(primes.last!)\n\
    \    for digit in myNumber {\n        digitSum += Int(String(digit))!\n    }\n\
    \    return digitSum", '    return 1', "  let max = lst.max()!\n  let primes =\
    \ lst.filter { x in x > 1 && max % x == 0 }\n  return getDigits(x: primes.max()!)",
  "    let primeNumbers = lst.filter{$0.isPrime()}\n    let largestPrime = primeNumbers.max()!\n\
    \    let sumOfLargestPrime = largestPrime.getDigitsSum()\n    return sumOfLargestPrime",
  "    let primes = lst.filter { $0 > 1 && zip(2..., $0...).allSatisfy { $0.1 % $0.0\
    \ != 0 } }\n    let largestPrime = primes.max()!\n    let digits = largestPrime.digits\n\
    \    return digits.reduce(0, +)", '    ', "    // Write your code here.\n    return\
    \ 0", '    return 0', "    // write your code here\n    let lst = lst.filter {\
    \ $0 > 1 }\n    guard !lst.isEmpty else { return 0 }\n    let max = lst.reduce(lst[0])\
    \ { $0 > $1 ? $0 : $1 }\n    var res = max\n    for i in 2...max {\n        if\
    \ max % i == 0 {\n            res = i\n        }\n    }\n    return String(res).map\
    \ { String($0) }.reduce(0) { $0 + Int($1)! }", "    let prime = lst.reduce(0)\
    \ { max($0, $1) }\n    let sumOfDigits = \"\\(prime)\".reduce(0) { $0 + Int(String($1))!\
    \ }\n    return sumOfDigits", "    var largestPrime = 1\n    var isPrime = true\n\
    \    var largestPrimeSum = 0\n    // Removing 0's\n    let newLst = lst.filter\
    \ { (number) -> Bool in\n        return number != 0\n    }\n    // Remove duplicates\n\
    \    let uniqueLst = newLst.uniques()\n    // Finding the largest prime\n    for\
    \ value in uniqueLst {\n        isPrime = true\n        if value > 1 {\n     \
    \       for number in 2...value/2 {\n                if value % number == 0 {\n\
    \                    isPrime = false\n                    break\n            \
    \    }\n            }\n            if isPrime {\n                largestPrime\
    \ = value\n            }\n        }\n    }\n    // Adding up the numbers to get\
    \ the sum\n    for char in \"\\(largestPrime)\".characters {\n        largestPrimeSum\
    \ += Int(\"\\(char)\")!\n    }\n    return largestPrimeSum", "    let newLst =\
    \ lst.filter { $0 != 0 }\n    let isPrime = (2...newLst.max()!).map { ($0, isPrimeNumber($0))\
    \ }\n    let primeNums = isPrime.filter { $0.1 }.map { $0.0 }\n    let primeLst\
    \ = primeNums.filter { newLst.contains($0) }\n    let largestPrime = primeLst.max()!\n\
    \    let largestPrimeString = String(largestPrime)\n    let largestPrimeArr =\
    \ largestPrimeString.map { Int(String($0))! }\n    return largestPrimeArr.reduce(0,\
    \ +)", "    let l = lst.filter { $0 != 0 }\n    let largest = l.max() ?? 1\n \
    \   let prime = largest.isPrime() ? largest : largest.nextPrime()\n    let str\
    \ = String(prime)\n    let sum = str.map { String($0) }.compactMap { Int($0) }.reduce(0,\
    \ +)\n    return sum", "    var sum = 0\n    for num in lst {\n        var dg\
    \ = num\n        while dg > 0 {\n            sum += dg % 10\n            dg /=\
    \ 10\n        }\n    }\n    return sum", "    \n    var currentMax: Int = 0\n\
    \    var currentMaxSum: Int = 0\n    \n    for number in lst {\n        var currentNumber\
    \ = number\n        var currentNumberSum: Int = 0\n        while currentNumber\
    \ > 0 {\n            currentNumberSum += currentNumber % 10\n            currentNumber\
    \ /= 10\n        }\n        if isPrime(number: number) && currentNumberSum > currentMaxSum\
    \ {\n            currentMax = number\n            currentMaxSum = currentNumberSum\n\
    \        }\n    }\n    \n    return currentMaxSum", "    let s = Set(lst)\n  \
    \  let p = Array(s).sorted().reversed()\n    var d = [Int]()\n    for i in p {\n\
    \        if i > 2 && isPrime(i) {\n            d.append(i)\n        }\n    }\n\
    \    let m = d.sorted().reversed()[0]\n    let digits = String(m).compactMap{Int(String($0))}\n\
    \    return digits.reduce(0, +)", "    var lst1 = lst\n    while(lst1.contains(1)){\n\
    \        lst1.remove(at: lst1.firstIndex(of: 1)!)\n    }\n    while(lst1.contains(0)){\n\
    \        lst1.remove(at: lst1.firstIndex(of: 0)!)\n    }\n    var max = 0\n  \
    \  for i in lst1{\n        if(isPrime(num: i)){\n            if(i > max){\n  \
    \              max = i\n            }\n        }\n    }\n    var sum = 0\n   \
    \ while(max > 0){\n        sum += max % 10\n        max /= 10\n    }\n    return\
    \ sum", '    return 0', "    // your code here\n    return 0", '    return 0',
  '    return lst.reduce(0, +)', "    return lst.filter { (i) -> Bool in\n       \
    \ return isPrime(num: i)\n    }.max()?.value.sumOfDigits() ?? 0", "    let primeList\
    \ = lst.filter{isPrime(n: $0)}\n    let maxPrime = primeList.max()!\n    let s\
    \ = String(maxPrime)\n    let a = Array(s).map{Int(String($0))!}\n    return a.reduce(0,+)",
  '    return 0', "    var sum = 0\n    let prime = lst.sorted(by: >).first(where:\
    \ { $0.isPrime() })\n    if let prime = prime {\n        for char in String(prime)\
    \ {\n            sum += Int(String(char))!\n        }\n    }\n    return sum",
  "    let biggestPrime = lst.max { a, b in\n        isPrime(num: a) && !isPrime(num:\
    \ b)\n    }\n    return biggestPrime.map { sum(of: $0) } ?? 0", "    let primes\
    \ = lst.filter { isPrime($0) }\n    let large = primes.max()!\n    return large.digits.reduce(0,\
    \ +)", "    var largestPrime = 0\n    for i in lst {\n        if isPrime(num:\
    \ i) && i > largestPrime {\n            largestPrime = i\n        }\n    }\n \
    \   var primeDigits = \"\"\n    for i in String(largestPrime) {\n        primeDigits\
    \ += String(i)\n    }\n    return primeDigits.compactMap {Int($0)}\n        .reduce(0,\
    \ +)", "  let maxPrime = lst.filter{$0.isPrime()}.max() ?? 1\n  return String(maxPrime).map{Int(String($0))!}.reduce(0,\
    \ +)", '    return 0', "    /// \u0412 \u0434\u0430\u043D\u043D\u043E\u043C \u043A\
    \u043E\u0434\u0435 \u043D\u0430\u043C \u043D\u0443\u0436\u043D\u043E \u043D\u0430\
    \u0439\u0442\u0438 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\
    \u043E\u0435 \u043F\u0440\u043E\u0441\u0442\u043E\u0435 \u0447\u0438\u0441\u043B\
    \u043E \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u0438 \u0432\u0435\u0440\
    \u043D\u0443\u0442\u044C \u0441\u0443\u043C\u043C\u0443 \u0435\u0433\u043E \u0446\
    \u0438\u0444\u0440.\n    /// \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F\
    \ \u043C\u0435\u0442\u043E\u0434 max(), \u043C\u044B \u043D\u0430\u0445\u043E\u0434\
    \u0438\u043C \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\
    \u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432 \u043C\u0430\u0441\
    \u0441\u0438\u0432\u0435, \u0438 \u0432\u044B\u0437\u044B\u0432\u0430\u0435\u043C\
    \ \u043C\u0435\u0442\u043E\u0434 isPrime,\n    /// \u043F\u0440\u043E\u0432\u0435\
    \u0440\u044F\u044F, \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043B\u0438\
    \ \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0437\
    \u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u0440\u043E\u0441\u0442\u044B\
    \u043C \u0447\u0438\u0441\u043B\u043E\u043C, \u0435\u0441\u043B\u0438 \u0434\u0430\
    , \u0442\u043E \u043F\u0440\u0438\u043C\u0435\u043D\u044F\u0435\u043C \u043C\u0435\
    \u0442\u043E\u0434 sumDigits,\n    /// \u043A\u043E\u0442\u043E\u0440\u044B\u0439\
    \ \u043D\u0430\u0445\u043E\u0434\u0438\u0442 \u0441\u0443\u043C\u043C\u0443 \u0446\
    \u0438\u0444\u0440 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\
    \u043E\u0433\u043E \u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E \u0447\u0438\
    \u0441\u043B\u0430.\n    let maxValue = lst.max()!\n    if isPrime(maxValue) {\n\
    \        return sumDigits(maxValue)\n    }\n    return 0", "    // your code here\n\
    \    return 0", '    return 0', "    var lst2 = lst\n    lst2.sort()\n    let\
    \ largestNum = lst2.last!\n    var nums = [Int]()\n    if largestNum == 1 {\n\
    \        return 2\n    }\n    for i in 1...largestNum {\n        if largestNum\
    \ % i == 0 {\n            nums.append(i)\n        }\n    }\n    var largest =\
    \ 0\n    for num in nums {\n        if num > largest {\n            largest =\
    \ num\n        }\n    }\n    var sum = 0\n    while largest > 0 {\n        sum\
    \ += largest % 10\n        largest /= 10\n    }\n    return sum", "    let l =\
    \ lst.filter { $0 != 0 }\n    let m = l.max()!\n    let p = sieve(n: m)\n    var\
    \ primes = [Int]()\n    for (i, isPrime) in p.enumerated() {\n        if isPrime\
    \ {\n            primes.append(i)\n        }\n    }\n    let prime = primes.filter\
    \ { $0 < m }.max()!\n    var sum = 0\n    var a = prime\n    while a > 0 {\n \
    \       sum += a % 10\n        a /= 10\n    }\n    return sum", "    // Code here\n\
    \    return 0", "    // this fails on a few of the numbers\n    //    return lst.filter({\
    \ $0 > 1 && $0.isPrime }).max()?.digits.reduce(0, +) ?? 0\n    \n    return lst.reduce([],\
    \ { $0.isEmpty || $0.last!.isPrime ? $0 + [$1] : $0 })\n        .filter({ $0.isPrime\
    \ })\n        .max()\n        .map({ $0.digits.reduce(0, +) }) ?? 0", "    let\
    \ prime = largestPrime(in: lst)\n    return prime.digits.reduce(0, +)", "    ///\
    \ Your code here\n    return 0", "    return lst.sorted { $0 > $1 }\n        .filter\
    \ { $0.isPrime() }\n        .first\n        .asDigits().reduce(0, +)", '    return
    0', "    var p = lst\n    p.sort()\n    var m = 0\n    for i in p {\n        if\
    \ i > m && isPrime(i) {\n            m = i\n        }\n    }\n    var g = 0\n\
    \    while m > 0 {\n        g += m % 10\n        m /= 10\n    }\n    return g",
  "    // Write your code here\n    return 0", "    var nums = lst\n    var largest_prime\
    \ = -1\n    var sum = 0\n    while nums.count > 0 {\n        let num = nums.removeFirst()\n\
    \        if isPrime(num) {\n            if num > largest_prime {\n           \
    \     largest_prime = num\n            }\n        }\n    }\n    while largest_prime\
    \ > 0 {\n        sum += largest_prime % 10\n        largest_prime /= 10\n    }\n\
    \    return sum", '    return 0', '    return 0', "    var lst = lst\n    var\
    \ a = 0\n    while true {\n        if prime(n: a) == true {\n            a +=\
    \ 1\n        } else {\n            a -= 1\n            break\n        }\n    }\n\
    \    var d = [Int]()\n    while a > 0 {\n        d.append(a % 10)\n        a /=\
    \ 10\n    }\n    var s = 0\n    for i in d {\n        s += i\n    }\n    return\
    \ s", "    var i = 2\n    var largerPrime = 0\n    var prime = 0\n    for j in\
    \ lst {\n        if j == 0 || j == 1 {\n            continue\n        }\n    \
    \    while i <= j {\n            if j % i == 0 {\n                prime = j\n\
    \                i += 1\n            } else {\n                break\n       \
    \     }\n        }\n        if prime > largerPrime {\n            largerPrime\
    \ = prime\n        }\n        i = 2\n    }\n    var sum = 0\n    while largerPrime\
    \ > 0 {\n        sum += largerPrime % 10\n        largerPrime /= 10\n    }\n \
    \   return sum", '    return 0', "    let primes = lst.filter { $0.isPrime() }\n\
    \    let maxPrime = primes.max() ?? 0\n    let sumDigits = maxPrime.digits().reduce(0,\
    \ +)\n    return sumDigits", "    \n    var primes: [Int] = []\n    var lst =\
    \ lst\n    \n    for i in lst {\n        if i % 2 != 0 && i % 3 != 0 && i % 5\
    \ != 0 && i % 7 != 0 && i % 11 != 0 && i % 13 != 0 && i % 17 != 0 && i % 19 !=\
    \ 0 && i % 23 != 0 && i % 29 != 0 && i % 31 != 0 && i % 37 != 0 && i % 41 != 0\
    \ && i % 43 != 0 && i % 47 != 0 && i % 53 != 0 && i % 59 != 0 && i % 61 != 0 &&\
    \ i % 67 != 0 && i % 71 != 0 && i % 73 != 0 && i % 79 != 0 && i % 83 != 0 && i\
    \ % 89 != 0 && i % 97 != 0 && i % 101 != 0 && i % 103 != 0 && i % 107 != 0 &&\
    \ i % 109 != 0 && i % 113 != 0 && i % 127 != 0 && i % 131 != 0 && i % 137 != 0\
    \ && i % 139 != 0 && i % 149 != 0 && i % 151 != 0 && i % 157 != 0 && i % 163 !=\
    \ 0 && i % 167 != 0 && i % 173 != 0 && i % 179 != 0 && i % 181 != 0 && i % 191\
    \ != 0 && i % 193 != 0 && i % 197 != 0 && i % 199 != 0 && i % 211 != 0 && i %\
    \ 223 != 0 && i % 227 != 0 && i % 229 != 0 && i % 233 != 0 && i % 239 != 0 &&\
    \ i % 241 != 0 && i % 251 != 0 && i % 257 != 0 && i % 263 != 0 && i % 269 != 0\
    \ && i % 271 != 0 && i % 277 != 0 && i % 281 != 0 && i % 283 != 0 && i % 293 !=\
    \ 0 && i % 307 != 0 && i % 311 != 0 && i % 313 != 0 && i % 317 != 0 && i % 331\
    \ != 0 && i % 337 != 0 && i % 347 != 0 && i % 349 != 0 && i % 353 != 0 && i %\
    \ 359 != 0 && i % 367 != 0 && i % 373 != 0 && i % 379 != 0 && i % 383 != 0 &&\
    \ i % 389 != 0 && i % 397 != 0 && i % 401 != 0 && i % 409", '    return 0', " \
    \   let largestPrime = lst.reduce(0) { (value, number) -> Int in\n        return\
    \ isPrime(number) && number > value ? number : value\n    }\n    return largestPrime.digits.reduce(0)\
    \ { $0 + $1 }", "    let primes = lst.filter { (number) -> Bool in\n        guard\
    \ number > 1 else { return false }\n        for numberToDivide in 2...Int(Double(number).squareRoot())\
    \ {\n            if number % numberToDivide == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    let maxPrime = primes.max()\
    \ ?? 0\n    return maxPrime.digits.reduce(0, +)", "    let o = lst.sorted().last!\n\
    \    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if prime.contains(o) {\n        var\
    \ num = o\n        var total = 0\n        while num > 0 {\n            total +=\
    \ num % 10\n            num /= 10\n        }\n        return total\n    } else\
    \ {\n        var num = o\n        var total = 0\n        while num > 0 {\n   \
    \         total += num % 10\n            num /= 10\n        }\n        return\
    \ total\n    }", "  if lst.count == 0 {\n    return 0\n  }\n  var maxPrime = 0\n\
    \  for number in lst {\n    if isPrime(number) {\n      maxPrime = max(maxPrime,\
    \ number)\n    }\n  }\n  var sum = 0\n  var prime = maxPrime\n  while prime >\
    \ 0 {\n    sum += prime % 10\n    prime /= 10\n  }\n  return sum", '    return
    0', '    return lst.filter{$0>1}.map{$0}.reduce(0, +)', "    var numbers = lst\n\
    \    numbers.sort()\n    let maxNum = numbers.max()!\n    var prime = 0\n    var\
    \ divisor = maxNum\n    var isPrime = true\n    while divisor >= 1 {\n       \
    \ if maxNum % divisor == 0 {\n            isPrime = true\n            for i in\
    \ 1...divisor {\n                if divisor % i == 0 && i != 1 && i != divisor\
    \ {\n                    isPrime = false\n                }\n            }\n \
    \           if isPrime == true {\n                prime = divisor\n          \
    \      break\n            }\n        }\n        divisor -= 1\n    }\n    var primeSum\
    \ = 0\n    for i in String(prime) {\n        primeSum += Int(String(i))!\n   \
    \ }\n    return primeSum", "    var primes: [Int] = []\n    var not_primes: [Int]\
    \ = []\n    var a = 0\n    var b = 0\n    for num in lst {\n        if num ==\
    \ 0 || num == 1 {\n            not_primes.append(num)\n        } else {\n    \
    \        for i in 2..<num {\n                if num % i == 0 {\n             \
    \       not_primes.append(num)\n                    break\n                } else\
    \ {\n                    primes.append(num)\n                    break\n     \
    \           }\n            }\n        }\n    }\n    for num in primes {\n    \
    \    if num > a {\n            a = num\n        }\n    }\n    for digit in String(a)\
    \ {\n        if let digit = Int(String(digit)) {\n            b += digit\n   \
    \     }\n    }\n    return b", '  return 0', '    return 0', "    // write your\
    \ code here\n    return 0", "    /// your code here\n    return -1", "    var\
    \ prime = 0\n    for i in lst {\n        if i == 1 { continue }\n        if !lst.contains(where:\
    \ {i % $0 == 0 && $0 != 1 && $0 != i}) {\n            if i > prime {\n       \
    \         prime = i\n            }\n        }\n    }\n    var sum = 0\n    for\
    \ i in String(prime) {\n        sum += Int(String(i))!\n    }\n    return sum",
  "    let r = lst.filter { x in (1..<x).reduce(true) { $0 && x % $1 != 0 } }.max()\
    \ ?? 0\n    return r == 0 ? 0 : r % 10 + skjkasdkd(lst: [r / 10])", "    var jsdhjsh\
    \ = lst\n    var ghj = jsdhjsh.max()\n    while true {\n        var f = true\n\
    \        for i in 2...ghj! {\n            if ghj! % i == 0 {\n               \
    \ f = false\n                break\n            }\n        }\n        if f {\n\
    \            break\n        }\n        ghj = jsdhjsh.max()\n    }\n    print(ghj!)\n\
    \    var a = 0\n    while ghj! > 0 {\n        a += ghj! % 10\n        ghj! /=\
    \ 10\n    }\n    return a", "    var max = 0\n    for number in lst {\n      \
    \  var temp = number\n        var len = 0\n        while temp != 0 {\n       \
    \     len += 1\n            temp /= 10\n        }\n        var count = 0\n   \
    \     for i in 1...number {\n            if number % i == 0 {\n              \
    \  count += 1\n            }\n        }\n        if count == 2 && len == 1 &&\
    \ number > max {\n            max = number\n        }\n    }\n    var d = 0\n\
    \    while max != 0 {\n        d += max % 10\n        max /= 10\n    }\n    return\
    \ d", '  return 0', "    var max = 0\n    var number = 0\n    for i in lst {\n\
    \        if isPrime(n: i) && i > max {\n            max = i\n        }\n    }\n\
    \    for i in \"\\(max)\".characters {\n        number += Int(\"\\(i)\")!\n  \
    \  }\n    return number", "    var newLst = lst\n    for i in 1...lst.count -\
    \ 1 {\n        for j in 0...lst.count - 2 {\n            if newLst[j] < newLst[j\
    \ + 1] {\n                let tmp = newLst[j]\n                newLst[j] = newLst[j\
    \ + 1]\n                newLst[j + 1] = tmp\n            }\n        }\n    }\n\
    \    var max: Int = 0\n    for i in newLst {\n        if isPrime(number: i) {\n\
    \            max = i\n            break\n        }\n    }\n    var sum = 0\n \
    \   while max > 0 {\n        sum += max % 10\n        max /= 10\n    }\n    return\
    \ sum", "    let l = Array(Set(lst)).filter { $0 != 0 }\n    var nums = [Int]()\n\
    \    for i in l {\n        var arr = [Int]()\n        for j in i {\n         \
    \   arr.append(j)\n        }\n        nums.append(arr.max()!)\n    }\n    let\
    \ n = nums.filter { $0 % 2 != 0 }\n    return n.max()!", "    var sum = 0\n  \
    \  for i in lst {\n        var list = [Int]()\n        for j in 1...i {\n    \
    \        if i % j == 0 {\n                list.append(j)\n            }\n    \
    \    }\n        if list.count == 2 {\n            for k in \"\\(i)\".characters\
    \ {\n                sum += Int(\"\\(k)\")!\n            }\n        }\n    }\n\
    \    return sum", '    return 0', "    var ar = lst.filter {$0 > 0}\n    var a\
    \ = ar.max()!\n    while !isPrime(a) {\n        a = ar.filter {$0 < a}.max()!\n\
    \    }\n    return digits(a).reduce(0, +)", "    var lst = lst\n    var result\
    \ = 0\n    for _ in lst {\n        if isPrime(num: lst.max()!) {\n           \
    \ result += lst.max()!\n        }\n        lst.remove(at: lst.index(of: lst.max()!)!)\n\
    \    }\n    return result", "    let primes = lst.filter { (number) -> Bool in\n\
    \        return number.isPrime()\n    }\n    let max = primes.reduce(0) { (result,\
    \ number) -> Int in\n        return result > number ? result : number\n    }\n\
    \    return max.digits.reduce(0) { (result, number) -> Int in\n        return\
    \ result + number\n    }", "    var primes = [Int]()\n    for num in lst {\n \
    \       if isPrime(num) {\n            primes.append(num)\n        }\n    }\n\
    \    var biggestPrime = 0\n    for prime in primes {\n        if prime > biggestPrime\
    \ {\n            biggestPrime = prime\n        }\n    }\n    var biggestPrimeDigits\
    \ = [Int]()\n    for digit in String(biggestPrime) {\n        biggestPrimeDigits.append(Int(String(digit))!)\n\
    \    }\n    var result = 0\n    for digit in biggestPrimeDigits {\n        result\
    \ += digit\n    }\n    return result", "    func prime(_ n: Int) -> Bool {\n \
    \       guard n > 2 else { return false }\n        var i = 2\n        while i\
    \ * i <= n {\n            if n % i == 0 { return false }\n            i += 1\n\
    \        }\n        return true\n    }\n    func isPrime(_ n: Int) -> Bool {\n\
    \        if n < 2 { return false }\n        if n < 4 { return true }\n       \
    \ if n % 2 == 0 { return false }\n        if n < 9 { return true }\n        if\
    \ n % 3 == 0 { return false }\n        var r = Int(sqrt(Double(n)))\n        var\
    \ f = 5\n        while f <= r {\n            if n % f == 0 { return false }\n\
    \            if n % (f + 2) == 0 { return false }\n            f += 6\n      \
    \  }\n        return true\n    }\n    let i = lst.sorted(by: >).first { prime($0)\
    \ } ?? -1\n    return String(i).reduce(0) { $0 + Int(String($1))! }", "    var\
    \ numberWithMaxSum = 1\n    var maxSum = 0\n    for number in lst {\n        if\
    \ number.isPrime() {\n            let sum = number.digits.reduce(0, +)\n     \
    \       if sum > maxSum {\n                maxSum = sum\n                numberWithMaxSum\
    \ = number\n            }\n        }\n    }\n    return numberWithMaxSum.digits.reduce(0,\
    \ +)", "    var maxPrime = 0\n    for num in lst {\n        if num > maxPrime\
    \ {\n            var isPrime = true\n            for i in 2...num {\n        \
    \        if num % i == 0 && i != num {\n                    isPrime = false\n\
    \                }\n            }\n            if isPrime {\n                maxPrime\
    \ = num\n            }\n        }\n    }\n    var maxPrimeStr = \"\\(maxPrime)\"\
    \n    var sum = 0\n    for char in maxPrimeStr {\n        sum += Int(String(char))!\n\
    \    }\n    return sum", "    let prime = lst.max { (i1, i2) -> Bool in\n    \
    \    return sum(of: i1) < sum(of: i2)\n    }!\n    return sum(of: prime)", " \
    \   /// Your code here\n    return 0", "    var x = lst.map{String($0)}.joined()\n\
    \    var y = Array(x)\n    var p = Int(String(y.removeLast())) ?? 0\n    while\
    \ true {\n        if isPrime(p) {\n            break\n        }\n        if y.count\
    \ < 1 {\n            p = 0\n            break\n        }\n        p = Int(String(y.removeLast()))\
    \ ?? 0\n    }\n    let d = digits(p)\n    return d.reduce(0, +)", '    return
    0', '    return 0', "    // your code\n    return -1", "    var isPrime: Bool\
    \ = true\n    var largestPrimeValue: Int = 0\n    for num in lst {\n        if\
    \ num < 2 {\n            continue\n        }\n        for factor in 2...num -\
    \ 1 {\n            if num % factor == 0 {\n                isPrime = false\n \
    \               break\n            }\n        }\n        if isPrime && num > largestPrimeValue\
    \ {\n            largestPrimeValue = num\n        }\n        isPrime = true\n\
    \    }\n    var sumOfDigits: Int = 0\n    while largestPrimeValue > 0 {\n    \
    \    sumOfDigits += largestPrimeValue % 10\n        largestPrimeValue /= 10\n\
    \    }\n    return sumOfDigits", "    var new_list = [Int]()\n    var sorted_list\
    \ = [Int]()\n    var checked_list = [Int]()\n    var prime_list = [Int]()\n  \
    \  var prime_str = \"\"\n    var digit_sum = 0\n    for i in lst {\n        for\
    \ x in 0...lst.count - 1 {\n            if lst[x] == i {\n                if !checked_list.contains(i)\
    \ {\n                    new_list.append(i)\n                    checked_list.append(i)\n\
    \                }\n            }\n        }\n    }\n    sorted_list = new_list.sorted(by:\
    \ >)\n    for i in sorted_list {\n        if check_prime(number: i) {\n      \
    \      prime_list.append(i)\n        }\n    }\n    if prime_list.count == 0 {\n\
    \        return 0\n    }\n    else {\n        prime_str = String(prime_list[0])\n\
    \        for i in prime_str {\n            digit_sum += Int(String(i))!\n    \
    \    }\n        return digit_sum\n    }", "    var maxValue = 0\n    var isPrime\
    \ = true\n    for i in lst {\n        isPrime = true\n        if i == 1 {\n  \
    \          isPrime = false\n        }\n        for j in 2...i - 1 {\n        \
    \    if i % j == 0 {\n                isPrime = false\n            }\n       \
    \ }\n        if isPrime && i > maxValue {\n            maxValue = i\n        }\n\
    \    }\n    var sum = 0\n    for i in String(maxValue) {\n        sum += Int(String(i))!\n\
    \    }\n    return sum", "    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    let sortedlst =\
    \ lst.sorted()\n    var arr: [Int] = []\n    for n in sortedlst {\n        if\
    \ primes.contains(n) {\n            arr.append(n)\n        }\n    }\n    let str\
    \ = String(arr.last!)\n    let sum = str.reduce(0, { $0 + Int(String($1", "  \
    \  let primeArray = lst.filter { (value) -> Bool in\n        var isPrime = true\n\
    \        if value <= 1 {\n            isPrime = false\n        }\n        if value\
    \ != 2 && value % 2 == 0 {\n            isPrime = false\n        }\n        for\
    \ i in 2..<value {\n            if value % i == 0 {\n                isPrime =\
    \ false\n            }\n        }\n        return isPrime\n    }\n    let largest\
    \ = primeArray.max()!\n    var largestString = String(largest)\n    var sum =\
    \ 0\n    for char in largestString {\n        sum += Int(String(char))!\n    }\n\
    \    return sum", "    var largestPrime = 0\n    for n in lst {\n        if isPrime(n)\
    \ && n > largestPrime {\n            largestPrime = n\n        }\n    }\n    var\
    \ sumOfDigits = 0\n    var largestPrimeAsString = String(largestPrime)\n    for\
    \ digit in largestPrimeAsString {\n        sumOfDigits += Int(String(digit))!\n\
    \    }\n    return sumOfDigits", "    let n = lst.max()!\n    var primes = [Int]()\n\
    \    for i in 2...n {\n        primes.append(i)\n    }\n    var i = 0\n    while\
    \ i < primes.count {\n        let p = primes[i]\n        var j = 2\n        while\
    \ i * j < primes.count {\n            primes.remove(at: i * j)\n            j\
    \ += 1\n        }\n        i += 1\n    }\n    let s = String(primes.last!)\n \
    \   var sum = 0\n    for c in s {\n        sum += Int(String(c))!\n    }\n   \
    \ return sum", "    let primes = lst.filter { $0.isPrime() }\n    let primeDigits\
    \ = primes.map { $0.digits() }\n    let maxPrimeDigits = primeDigits.max()!\n\
    \    return maxPrimeDigits.reduce(0, +)", "    var max: Int = 0\n    for i in\
    \ lst {\n        if isPrime(num: i) {\n            if i > max {\n            \
    \    max = i\n            }\n        }\n    }\n    return sumOfDigits(n: max)",
  '    return 0', "    var list = lst\n    list.sort(by: >)\n    for i in list {\n\
    \        if i > 1 && list.count > 1 {\n            if isPrime(n: i) {\n      \
    \          if i % 10 == 0 {\n                    return i / 10\n             \
    \   } else {\n                    return getSumOfDigits(n: i)\n              \
    \  }\n            }\n        }\n    }\n    return -1", "    if lst.isEmpty {\n\
    \        return 0\n    }\n    if lst.contains(1) {\n        return 1\n    }\n\
    \    var arr = lst\n    for (i, n) in arr.enumerated() {\n        for j in i+1..<arr.count\
    \ {\n            if n % arr[j] == 0 {\n                arr.remove(at: j)\n   \
    \         }\n        }\n    }\n    var prime = arr.max() ?? 1\n    return prime\
    \ % 10 + skjkasdkd(lst: [prime / 10])", "    let n = lst.max()!\n    var lst =\
    \ lst\n    var lst2 = lst\n    lst2.remove(at: lst2.index(of: n)!)\n    var primes\
    \ = Set<Int>()\n    var isPrime = true\n    var m = 0\n    if n < 2 {\n      \
    \  return n\n    }\n    for i in 2...n {\n        for j in 2...i {\n         \
    \   if i % j == 0 {\n                isPrime = false\n                break\n\
    \            }\n        }\n        if isPrime {\n            primes.insert(i)\n\
    \        }\n        isPrime = true\n    }\n    primes.remove(1)\n    var p = primes.max()!\n\
    \    while true {\n        while p > n {\n            primes.remove(p)\n     \
    \       p = primes.max()!\n        }\n        if lst2.contains(p) {\n        \
    \    lst2.remove(at: lst2.index(of: p)!)\n            p = primes.max()!\n    \
    \    } else {\n            break\n        }\n    }\n    while p > 0 {\n      \
    \  m += p % 10\n        p /= 10\n    }\n    return m", "    \n    // your code\
    \ here\n    \n    return 0", "    var prime: Int = 0\n    var sum: Int = 0\n \
    \   for number in lst {\n        if isPrime(number) && number > prime {\n    \
    \        prime = number\n        }\n    }\n    while prime > 0 {\n        sum\
    \ += prime % 10\n        prime /= 10\n    }\n    return sum", "    var sum = 0\n\
    \    let lst2 = lst.filter { $0 != 0 }\n    for prime in lst2 {\n        if isPrime(num:\
    \ prime) {\n            var number = prime\n            while number > 0 {\n \
    \               sum += number % 10\n                number /= 10\n           \
    \ }\n        }\n    }\n    return sum", '    return jkasd(lst: lst).digits.reduce(0,
    +)', "    var largestPrime = 0\n    for num in lst {\n        if isPrime(num)\
    \ && num > largestPrime {\n            largestPrime = num\n        }\n    }\n\
    \    return sumOfDigits(num: largestPrime)", "    // This is the main logic of\
    \ this task.\n    // You can find the largest prime value in the list and return\
    \ the sum of its digits.\n    return 0", '    return 1', "    var prime = lst.max()!\n\
    \    var lst = lst\n    while lst.count != 0 {\n        prime = lst.max()!\n \
    \       lst = lst.filter { $0 != prime }\n        if lst.filter({ prime % $0 ==\
    \ 0 }).count == 0 {\n            break\n        }\n    }\n    var sum = 0\n  \
    \  while prime > 0 {\n        sum += prime % 10\n        prime /= 10\n    }\n\
    \    return sum", '    return 0', "    let primes = lst.filter{ isPrime($0) }\n\
    \    return primes.max()! % 10 + (primes.max()! / 10) % 10", '    return 0', " \
    \   var sum = 0\n    for i in lst {\n        if isPrime(i) {\n            for\
    \ j in (String(i)).characters {\n                sum += Int(String(j))!\n    \
    \        }\n        }\n    }\n    return sum", "    let primes = lst.filter {\
    \ $0.isPrime() }\n    let maxPrime = primes.max() ?? 0\n    let digits = String(maxPrime).compactMap\
    \ { Int(String($0)) }\n    return digits.reduce(0, +)", "    let arr = lst.map\
    \ { String($0) }\n    let sorted = arr.sorted(by: { $0.count > $1.count })\n \
    \   let first = sorted.first ?? \"\"\n    let second = sorted.count > 1 ? sorted[1]\
    \ : \"\"\n    let third = sorted.count > 2 ? sorted[2] : \"\"\n    var numbers\
    \ = [Int]()\n    for char in first {\n        numbers.append(Int(String(char))\
    \ ?? 0)\n    }\n    for char in second {\n        numbers.append(Int(String(char))\
    \ ?? 0)\n    }\n    for char in third {\n        numbers.append(Int(String(char))\
    \ ?? 0)\n    }\n    let sortedNums = numbers.sorted(by: { $0 > $1 })\n    if sortedNums.count\
    \ > 3 {\n        return sortedNums[0] + sortedNums[1] + sortedNums[2]\n    } else\
    \ {\n        return sortedNums.reduce(0, +)\n    }", '    return lst.filter({
    $0.isPrime }).max()!.digits.reduce(0, +)', "    var lstPrime = lst.filter{ $0\
    \ > 1 && (2...$0-1).allSatisfy{ $0 != $0/2 * 2 } }\n    var newList = lstPrime.sorted(by:\
    \ >)\n    var sum = 0\n    if newList.count == 0 {\n        return 1\n    } else\
    \ {\n        let firstLst = String(newList[0])\n        let newLst = Array(firstLst)\n\
    \        for i in newLst {\n            sum += Int(String(i))!\n        }\n  \
    \      return sum\n    }", "    let primes = lst.filter { isPrime($0) }\n    if\
    \ let max = primes.max() {\n        let str = String(max)\n        return str.reduce(0)\
    \ { $0 + Int(String($1))! }\n    }\n    return 0", '    return Int(lst.max()!.description.sorted()[0])!',
  "    let primes = lst.filter { n in n > 1 &&\n        zip(2..., stride(from: 2,\
    \ to: n, by: 1)).filter { n % $0.1 == 0 }.isEmpty\n    }\n    let maxPrime = primes.max()\
    \ ?? 0\n    return String(maxPrime).reduce(0) { $0 + Int(String($1))! }", '  return
    0', '    return -1', "    var m: Int = 0\n    for x in lst {\n        if isPrime(x)\
    \ && x > m {\n            m = x\n        }\n    }\n    var str = \"\\(m)\"\n \
    \   var sum = 0\n    for x in str {\n        sum += Int(String(x))!\n    }\n \
    \   return sum", '    return lst.map{$0}.sorted(by: >).filter{isPrime($0)}.first?.getSumOfDigits()
    ?? 0', "    \n    return 0", "    // Enter your code between the two comment markers\n\
    \    let primes = lst.filter({ isPrime($0) })\n    let biggestPrime = primes.max()!\n\
    \    let stringOfBiggestPrime = String(biggestPrime)\n    let stringOfBiggestPrimeToArray\
    \ = Array(stringOfBiggestPrime.characters)\n    let arrayOfIntegersOfBiggestPrime\
    \ = stringOfBiggestPrimeToArray.map({ Int(String($0))! })\n    let biggestPrimesSum\
    \ = arrayOfIntegersOfBiggestPrime.reduce(0, combine: +)\n    return biggestPrimesSum",
  "    var prime = 0\n    let arr = lst.filter { $0 > 1 }\n    for i in 0...arr.count-1\
    \ {\n        var c = 0\n        for j in 1...arr[i] {\n            if arr[i] %\
    \ j == 0 {\n                c += 1\n            }\n        }\n        if c ==\
    \ 2 {\n            if arr[i] > prime {\n                prime = arr[i]\n     \
    \       }\n        }\n    }\n    var sum = 0\n    for i in prime.description {\n\
    \        sum += Int(String(i))!\n    }\n    return sum", '    return 0', '    return
    0', "    let largest = lst.max() ?? 0\n    let prime = (largest > 1 && isPrime(largest))\
    \ ? largest : previousPrime(largest)\n    return prime > 0 ? prime.asDigits.reduce(0,\
    \ +) : 0", "    let prime = lst.filter({!$0.isPrime()}).reduce(0, +)\n    return\
    \ prime", '    return 0', '  return 0', "    let result = lst.filter { $0 > 1\
    \ }.filter { $0.isPrime() }.max() ?? 0\n    return result.sumOfDigits()", '    return
    lst.filter{ $0.isPrime }.max()!.sumOfDigits', "    var sum = 0\n    let primes\
    \ = lst.filter { $0.isPrime }\n    let maxPrime = primes.max()!\n    for digit\
    \ in maxPrime.digits {\n        sum += digit\n    }\n    return sum", "    //\
    \ Good luck!\n    return 0", '    return 0', "    var largestPrime = 0\n    for\
    \ num in lst {\n        if largestPrime == 0 {\n            largestPrime = num\n\
    \        } else if isPrime(num) && num > largestPrime {\n            largestPrime\
    \ = num\n        }\n    }\n    var sum = 0\n    var digit = largestPrime\n   \
    \ while digit > 0 {\n        sum += digit % 10\n        digit /= 10\n    }\n \
    \   return sum", "    let c = lst.compactMap { (i) -> Int? in\n        var ii\
    \ = i\n        while ii % 2 == 0 {\n            ii /= 2\n        }\n        while\
    \ ii % 3 == 0 {\n            ii /= 3\n        }\n        while ii % 5 == 0 {\n\
    \            ii /= 5\n        }\n        while ii % 7 == 0 {\n            ii /=\
    \ 7\n        }\n        return ii\n    }\n    return c.max() ?? 0", "    var num\
    \ = [Int]()\n    for i in lst{\n        if i > 2{\n            num.append(i)\n\
    \        }\n    }\n    num.sort()\n    var sum = 0\n    for i in num{\n      \
    \  var x = 0\n        for j in num{\n            if i % j == 0 && i != j{\n  \
    \              x += 1\n            }\n        }\n        if x == 0{\n        \
    \    var k = i\n            while k > 0{\n                sum += k % 10\n    \
    \            k /= 10\n            }\n            return sum\n        }\n    }\n\
    \    return sum", "    let primeSet = Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n    let primeList =\
    \ Array(primeSet)\n    let max = lst.max() ?? 0\n    var maxPrime = 2\n    for\
    \ prime in primeList {\n        if prime <= max {\n            maxPrime = prime\n\
    \        } else {\n            break\n        }\n    }\n    var str = String(maxPrime)\n\
    \    var sum = 0\n    for char in str {\n", "    var largestPrime = 1\n    var\
    \ currentPrime = 2\n    for i in lst {\n        if (i == 1) {\n            continue\n\
    \        }\n        var isPrime = true\n        while (currentPrime <= i / 2)\
    \ {\n            if (i % currentPrime == 0) {\n                isPrime = false\n\
    \                break\n            }\n            currentPrime += 1\n       \
    \ }\n        if (isPrime && i > largestPrime) {\n            largestPrime = i\n\
    \        }\n    }\n    return largestPrime.digitsSum()", "    var currentPrime\
    \ = -1\n    for number in lst {\n        if prime(number) {\n            currentPrime\
    \ = number\n        }\n    }\n    var sum = 0\n    for char in String(currentPrime)\
    \ {\n        sum += Int(String(char))!\n    }\n    return sum", "    var tmp =\
    \ 0\n    for i in lst {\n        if isPrime(n: i) {\n            tmp = i\n   \
    \     }\n    }\n    var new = tmp.description\n    var sum = 0\n    for i in new\
    \ {\n        let s = Int(String(i))\n        sum += s!\n    }\n    return sum",
  "    var sum = 0\n    var max = 0\n    for i in lst {\n        if (i > max) && (i.isPrime\
    \ == true) {\n            max = i\n        }\n    }\n    let maxString = String(max)\n\
    \    for i in maxString {\n        sum += Int(String(i))!\n    }\n    return sum",
  "    var largestPrime = 0\n    for i in lst {\n        var isPrime = true\n    \
    \    if i <= 1 {\n            isPrime = false\n        }\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime && i > largestPrime {\n            largestPrime\
    \ = i\n        }\n    }\n    return largestPrime.digits.reduce(0, +)", '    return
    lst.filter({$0 > 1}).filter({$0.isPrime()}).map({$0.digits}).map({$0.reduce(0,
    +)}).sorted().last ?? 0', "    // find largest prime\n    var lst = lst.filter{$0\
    \ != 0}.sorted()\n    for i in stride(from: lst.count - 1, through: 0, by: -1)\
    \ {\n        if checkIfPrime(lst[i]) {\n            return sumDigits(lst[i])\n\
    \        }\n    }\n    return 0", "    var sum = 0\n    for num in lst {\n   \
    \     var temp = 0\n        for i in num...1000 {\n            if isPrime(num:\
    \ i) {\n                temp = i\n            }\n        }\n        while temp\
    \ > 0 {\n            sum += temp % 10\n            temp /= 10\n        }\n   \
    \ }\n    return sum", '    return 0', "    var primes = [Int]()\n    var max =\
    \ 0\n    for num in lst {\n        if isPrime(num) {\n            primes.append(num)\n\
    \            if num > max {\n                max = num\n            }\n      \
    \  }\n    }\n    var result = 0\n    while max > 0 {\n        result += max %\
    \ 10\n        max /= 10\n    }\n    return result", "    let maxPrime = lst.map\
    \ { isPrime($0) ? $0 : 0 }.max()!\n    let string = String(maxPrime)\n    let\
    \ array = string.characters.map { Int(String($0))! }\n    return array.reduce(0,\
    \ combine: +)", "    \n    return 0", '    return 0', "    let largestPrimeNumber\
    \ = lst.filter { isPrime($0) }.sorted { $0 > $1 }.first!\n    let largestPrimeNumberString\
    \ = String(largestPrimeNumber)\n    let digits = largestPrimeNumberString.compactMap\
    \ { Int(String($0)) }\n    return digits.reduce(0, +)", "    var lst = lst.filter{$0\
    \ != 0}\n    var num = 0\n    for n in lst {\n        if n > num && n.isPrime()\
    \ {\n            num = n\n        }\n    }\n    return num.digits.reduce(0, +)",
  "    var lst = lst\n    var lst2 = lst\n    lst.sort()\n    let y = lst.last!\n\
    \    var z = y\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    for n\
    \ in lst {\n        for m in lst2 {\n            if (n + m) % 2 == 0 {\n     \
    \           a += 1\n            }\n            if (n + m) % 3 == 0 {\n       \
    \         b += 1\n            }\n            if (n + m) % 4 == 0 {\n         \
    \       c += 1\n            }\n            if (n + m) % 5 == 0 {\n           \
    \     d += 1\n            }\n            if (n + m) % 6 == 0 {\n             \
    \   e += 1\n            }\n            if (n + m) % 7 == 0 {\n               \
    \ f += 1\n            }\n            if (n + m) % 8 == 0 {\n                g\
    \ += 1\n            }\n            if (n + m) % 9 == 0 {\n                h +=\
    \ 1\n            }\n            if (n + m) % 10 == 0 {\n                i += 1\n\
    \            }\n            if (n + m) % 11 == 0 {\n                j += 1\n \
    \           }\n            if (n + m) % 12 == 0 {\n                k += 1\n  \
    \          }\n            if (n + m) % 13 == 0 {\n                l += 1\n   \
    \         }\n            if (n + m) % 14 == 0 {\n                m += 1\n    \
    \        }\n            if (n + m) % 15 == 0 {\n                n += 1\n     \
    \       }\n            if (n + m) % 16 == 0 {\n                o +=", "    let\
    \ primes = lst.filter { $0.isPrime() }\n    let theLargestPrime = primes.max()\
    \ ?? 0\n    let digits = String(theLargestPrime).map { String($0) }\n    let sum\
    \ = digits.reduce(0) { $0 + Int($1)! }\n    return sum", "    var val = lst.max()!\n\
    \    while !val.isPrime() {\n        val = val.nextDown()\n    }\n    var answer\
    \ = 0\n    while val > 0 {\n        answer += val % 10\n        val /= 10\n  \
    \  }\n    return answer", "    var result = 0\n    for i in lst {\n        if\
    \ prime(num: i) {\n            result = sumDigit(num: i)\n        }\n    }\n \
    \   return result", "    var biggest = 0\n    for i in lst {\n        if isPrime(i)\
    \ && i > biggest {\n            biggest = i\n        }\n    }\n    return getDigitSum(value:\
    \ biggest)", "    var tmp = [Int]()\n    for i in lst {\n        if prime(i) {\n\
    \            tmp.append(i)\n        }\n    }\n    if tmp.count != 0 {\n      \
    \  var v = 0\n        for i in tmp {\n            if i > v {\n               \
    \ v = i\n            }\n        }\n        var z = v\n        v = 0\n        while\
    \ z > 0 {\n            v += z % 10\n            z /= 10\n        }\n        return\
    \ v\n    }\n    return 0", "    // Your code goes here!\n    return 0", "    var\
    \ biggestPrime = 0\n    for number in lst {\n        if isPrime(number) && number\
    \ > biggestPrime {\n            biggestPrime = number\n        }\n    }\n    var\
    \ result = 0\n    while biggestPrime > 0 {\n        result += biggestPrime % 10\n\
    \        biggestPrime /= 10\n    }\n    return result", '    return 0', "    let\
    \ prime = lst.max()!\n    let arr = Array(String(prime))\n    let sum = arr.map{Int(String($0))!}.reduce(0,\
    \ +)\n    return sum", '    return 0', "    let largestPrime = lst.reduce(lst[0])\
    \ {\n        let isPrime1 = isPrime(num: $0)\n        let isPrime2 = isPrime(num:\
    \ $1)\n        return (isPrime1 && isPrime2) ? max($0, $1) : $0\n    }\n    return\
    \ digitsSum(num: largestPrime)", "    let a = lst.sorted().reversed().filter {\
    \ $0.isPrime() }.first ?? 0\n    return a == 0 ? 0 : String(a).reduce(0) { $0\
    \ + Int(String($1))! }", "    var arr = lst\n    arr.sort()\n    var max = 0\n\
    \    for i in arr {\n        if check(num: i) && max < i {\n            max =\
    \ i\n        }\n    }\n    return max.sumDigits()", '    return 0', "    var max\
    \ = 0\n    for i in lst {\n        if max < i && ertyu(i) {\n            max =\
    \ i\n        }\n    }\n    return asdasda(qwqw: max)", "    // write your code\
    \ here\n    var prime = 0\n    for n in lst {\n        if n.isPrime {\n      \
    \      if n > prime {\n                prime = n\n            }\n        }\n \
    \   }\n    var primeString = String(prime)\n    var sum = 0\n    for i in primeString\
    \ {\n        sum += Int(String(i))!\n    }\n    return sum", "    var arr: [Int]\
    \ = []\n    for i in lst {\n        if i > 1 && isPrime(i) {\n            arr.append(i)\n\
    \        }\n    }\n    let max = arr.max()!\n    var str = String(max)\n    var\
    \ sum = 0\n    for i in str {\n        sum += Int(String(i))!\n    }\n    return\
    \ sum", "    var lst = lst\n    let max = lst.reduce(0, max)\n    var primes =\
    \ [2]\n    for i in 2...max {\n        if primes.allSatisfy({ i % $0 != 0 }) {\n\
    \            primes.append(i)\n        }\n    }\n    let primesSet = Set(primes)\n\
    \    let num = lst.filter({ primesSet.contains($0) }).reduce(0, max)\n    return\
    \ String(num).map({ Int(String($0))! }).reduce(0, +)", "    var primes = [Int]()\n\
    \    for i in lst {\n        if isPrime(num: i) {\n            primes.append(i)\n\
    \        }\n    }\n    var max = 0\n    for i in primes {\n        if i > max\
    \ {\n            max = i\n        }\n    }\n    return max.digits.reduce(0, +)",
  "    let primes = lst.filter { n in n > 0 && n % 2 != 0 && n % 3 != 0 && n % 5 !=\
    \ 0 && n % 7 != 0 && n % 11 != 0 }\n    let largestPrime = primes.max()!\n   \
    \ return String(largestPrime).reduce(0) { $0 + Int(String($1))! }", "    var l\
    \ = lst\n    l.sort()\n    let p = l.last!\n    var k = 0\n    while p != 0 {\n\
    \        k += p % 10\n        p /= 10\n    }\n    return k", "    var max = 0\n\
    \    for i in lst {\n        if isPrime(n: i) && i > max {\n            max =\
    \ i\n        }\n    }\n    var ans = 0\n    for i in String(max) {\n        ans\
    \ += Int(String(i))!\n    }\n    return ans", "    var number = 0\n    for var\
    \ i in lst {\n        if isPrime(num: i) {\n            number = i\n        }\n\
    \    }\n    var total = 0\n    while number > 0 {\n        total += number % 10\n\
    \        number /= 10\n    }\n    return total", "    var largestPrime = -1\n\
    \    var length = 0\n    for num in lst {\n        var prime = true\n        if\
    \ num > 1 {\n            for i in 2..<num {\n                if num % i == 0 {\n\
    \                    prime = false\n                    break\n              \
    \  }\n            }\n            if prime && num.digits.count > length {\n   \
    \             largestPrime = num\n                length = num.digits.count\n\
    \            }\n        }\n    }\n    var sum = 0\n    for num in largestPrime.digits\
    \ {\n        sum += num\n    }\n    return sum", "    var sum = 0\n    var result\
    \ = 0\n    for i in lst {\n        if i == 1 {\n            continue\n       \
    \ }\n        var isPrime = true\n        var result = 1\n        var sum = 0\n\
    \        for j in 2..<i {\n            if i % j == 0 {\n                isPrime\
    \ = false\n                break\n            }\n        }\n        if isPrime\
    \ {\n            var number = i\n            while number > 0 {\n            \
    \    let digit = number % 10\n                sum += digit\n                number\
    \ /= 10\n            }\n            if sum > result {\n                result\
    \ = sum\n            }\n        }\n    }\n    return result", "  var primes =\
    \ [Int]()\n  for num in lst {\n    var isPrime = true\n    if num > 1 {\n    \
    \  for i in 2..<num {\n        if num % i == 0 {\n          isPrime = false\n\
    \        }\n      }\n      if isPrime {\n        primes.append(num)\n      }\n\
    \    }\n  }\n  var sum = 0\n  if primes.count > 0 {\n    let maxPrime = primes.max()!\n\
    \    while maxPrime > 0 {\n      sum += maxPrime % 10\n      maxPrime /= 10\n\
    \    }\n  }\n  return sum", "    var x: Int = 0\n    var max: Int = 0\n    var\
    \ arr: [Int] = []\n    var y: Int = 0\n    for x in lst {\n        for y in 1...x\
    \ {\n            if x % y == 0 {\n                arr.append(y)\n            }\n\
    \        }\n        for y in arr {\n            if arr.contains(y) {\n       \
    \         if arr.contains(y * y) {\n                    arr.remove(at: arr.firstIndex(of:\
    \ y * y)!)\n                }\n            }\n        }\n        for y in arr\
    \ {\n            if arr.contains(y) {\n                if arr.contains(y * y)\
    \ {\n                    arr.remove(at: arr.firstIndex(of: y * y)!)\n        \
    \        }\n            }\n        }\n        for y in arr {\n            if arr.contains(y)\
    \ {\n                if arr.contains(y * y) {\n                    arr.remove(at:\
    \ arr.firstIndex(of: y * y)!)\n                }\n            }\n        }\n \
    \       for y in arr {\n            if arr.contains(y) {\n                if arr.contains(y\
    \ * y) {\n                    arr.remove(at: arr.firstIndex(of: y * y)!)\n   \
    \             }\n            }\n        }\n        for y in arr {\n          \
    \  if arr.contains(y) {\n                if arr.contains(y * y) {\n          \
    \          arr.remove(at: arr.firstIndex(of: y * y)!)\n                }\n   \
    \         }\n        }\n        for y in arr {\n            if arr.contains(y)\
    \ {\n                if arr.contains(y * y) {\n                    arr.remove(at:\
    \ arr.firstIndex(of: y * y)!)\n                }\n            }\n        }\n \
    \       for y in arr {\n            if arr.contains(y) {\n                if arr.contains(y\
    \ * y) {\n                    arr.remove(at: arr.firstIndex(of: y * y)!)\n   \
    \             }\n            }\n        }\n        for y in arr {\n          \
    \  if arr.contains(y) {", "    var prime_value = 0\n    for num in lst {\n   \
    \     if num > 1 && isPrime(num) && num > prime_value {\n            prime_value\
    \ = num\n        }\n    }\n    var result = 0\n    for i in String(prime_value)\
    \ {\n        result += Int(String(i))!\n    }\n    return result"]
stop_tokens:
- "\n}"
