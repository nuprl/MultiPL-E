name: HumanEval_158_find_max
language: swift
prompt: "\n/// Write a function that accepts an array of strings.\n/// The array contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"name\"\
  , \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\", \"enam\"\
  , \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"\
  ])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
  ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
  enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\
  assert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
  \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
  \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
  \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
  b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
  )"
completions: ["    var max_word = \"\"\n    var max_chars = 0\n    for w in words\
    \ {\n        let uniques = Set(w)\n        if uniques.count > max_chars {\n  \
    \          max_chars = uniques.count\n            max_word = w\n        }\n  \
    \  }\n    return max_word", "    var uniqueChars = [Character]()\n    var uniqueCharsCount\
    \ = 0\n    var answer = \"\"\n    for word in words {\n        uniqueChars = [Character]()\n\
    \        uniqueCharsCount = 0\n        for char in word {\n            if !uniqueChars.contains(char)\
    \ {\n                uniqueChars.append(char)\n                uniqueCharsCount\
    \ += 1\n            }\n        }\n        if answer == \"\" {\n            answer\
    \ = word\n        } else if uniqueCharsCount > (answer.count - answer.filter{$0\
    \ == \" \"}.count) {\n            answer = word\n        } else if uniqueCharsCount\
    \ == (answer.count - answer.filter{$0 == \" \"}.count) && word < answer {\n  \
    \          answer = word\n        }\n    }\n    return answer", "    var max =\
    \ 0\n    var maxStr = \"\"\n    for word in words {\n        let set = Set(word)\n\
    \        if set.count > max {\n            max = set.count\n            maxStr\
    \ = word\n        }\n    }\n    return maxStr", "    var finalWord = \"\"\n  \
    \  var uniqueCharacters = Set<Character>()\n    var maxUniqueCharacters = 0\n\
    \    for word in words {\n        uniqueCharacters = Set(word)\n        if uniqueCharacters.count\
    \ > maxUniqueCharacters {\n            maxUniqueCharacters = uniqueCharacters.count\n\
    \            finalWord = word\n        }\n    }\n    return finalWord", "  var\
    \ max_count = 0\n  var res = \"\"\n  for word in words {\n    var count = 0\n\
    \    var set = Set<Character>()\n    for char in word {\n      if !set.contains(char)\
    \ {\n        count += 1\n        set.insert(char)\n      }\n    }\n    if count\
    \ > max_count {\n      max_count = count\n      res = word\n    } else if count\
    \ == max_count && res > word {\n      res = word\n    }\n  }\n  return res", " \
    \   var lex: (String, Int) = (\"\", 0)\n    var max: (String, Int) = (\"\", 0)\n\
    \    for i in words {\n        var counter = 0\n        for j in i {\n       \
    \     if !i.contains(String(j)) {\n                counter += 1\n            }\n\
    \        }\n        if counter > max.1 {\n            max = (i, counter)\n   \
    \     } else if counter == max.1 {\n            if i < lex.0 {\n             \
    \   lex = (i, counter)\n            }\n        }\n    }\n    if lex.0 == \"\"\
    \ {\n        return max.0\n    } else {\n        return lex.0\n    }", "    var\
    \ maxUniqueChars = 0\n    var maxString = \"\"\n    var maxIndex = 0\n    for\
    \ (index, word) in words.enumerated() {\n        let uniqueChars = Set(word.unicodeScalars)\n\
    \        if uniqueChars.count > maxUniqueChars {\n            maxUniqueChars =\
    \ uniqueChars.count\n            maxString = word\n            maxIndex = index\n\
    \        } else if uniqueChars.count == maxUniqueChars {\n            if word\
    \ < maxString {\n                maxString = word\n                maxIndex =\
    \ index\n            }\n        }\n    }\n    return maxString", "    if words.count\
    \ == 0 {\n        return \"\"\n    }\n    if words.count == 1 {\n        return\
    \ words[0]\n    }\n    var currMaxWord = words[0]\n    var currMaxCount = 0\n\
    \    for word in words {\n        if word.count > currMaxCount {\n           \
    \ currMaxCount = word.count\n            currMaxWord = word\n        }\n    }\n\
    \    return currMaxWord", "    guard !words.isEmpty else { return \"\" }\n   \
    \ var maxLen = 0\n    var res = \"\"\n    for word in words {\n        let count\
    \ = Set(word).count\n        if count > maxLen {\n            maxLen = count\n\
    \            res = word\n        } else if count == maxLen && word < res {\n \
    \           res = word\n        }\n    }\n    return res", "    var maxCount =\
    \ 0\n    var result: String = \"\"\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if word.filter({ $0 == char }).count\
    \ == 1 {\n                count += 1\n            }\n        }\n        if count\
    \ > maxCount {\n            maxCount = count\n            result = word\n    \
    \    }\n    }\n    return result", "  var maxCharCount = 0\n  var charDict = [Character:\
    \ Int]()\n  var maxString = \"\"\n  for word in words {\n    for char in word\
    \ {\n      if charDict[char] == nil {\n        charDict[char] = 1\n      } else\
    \ {\n        charDict[char]! += 1\n      }\n    }\n    if charDict.count > maxCharCount\
    \ {\n      maxCharCount = charDict.count\n      maxString = word\n    }\n    charDict.removeAll()\n\
    \  }\n  return maxString", "  var max = words[0]\n  var maxUnique = Set(max).count\n\
    \  for word in words {\n    let currentUnique = Set(word).count\n    if currentUnique\
    \ > maxUnique ||\n      (currentUnique == maxUnique && word < max) {\n      max\
    \ = word\n      maxUnique = currentUnique\n    }\n  }\n  return max", "    guard\
    \ !words.isEmpty else { return \"\" }\n    return (words.max(by: { uniqueChars(word:\
    \ $0) < uniqueChars(word: $1) }))!", "    var max_word = words[0]\n    var max_count\
    \ = count_unique_chars(word: max_word)\n    for word in words {\n        let count\
    \ = count_unique_chars(word: word)\n        if count > max_count {\n         \
    \   max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word", "    let result = words.map { (word: String) -> (String, Int) in\n\
    \        return (word, Set(word).count)\n    }\n    let max = result.max { (first:\
    \ (String, Int), second: (String, Int)) -> Bool in\n        if first.1 != second.1\
    \ {\n            return first.1 > second.1\n        } else {\n            return\
    \ first.0 < second.0\n        }\n    }\n    return max?.0 ?? \"\"", '    return
    ""', "    var max = words[0]\n    var maxCount = 0\n    for word in words {\n\
    \        let chars = Set(word)\n        if chars.count > maxCount {\n        \
    \    max = word\n            maxCount = chars.count\n        }\n    }\n    return\
    \ max", '    return "Your code here"', "    var (bestWord, bestCount) = (\"\"\
    , 0)\n    for word in words {\n        let chars = Set(word)\n        if chars.count\
    \ > bestCount {\n            (bestWord, bestCount) = (word, chars.count)\n   \
    \     }\n    }\n    return bestWord", "    var max = (word: \"\", count: 0)\n\
    \    for word in words {\n        var unique = [Character]()\n        for char\
    \ in word {\n            if !unique.contains(char) {\n                unique.append(char)\n\
    \            }\n        }\n        if unique.count > max.count {\n           \
    \ max = (word, unique.count)\n        }\n    }\n    return max.word", "    var\
    \ output = \"\"\n    for word in words {\n        if output.isEmpty {\n      \
    \      output = word\n        } else if word.count > output.count {\n        \
    \    output = word\n        } else if word.count == output.count {\n         \
    \   output = word > output ? word : output\n        }\n    }\n    return output",
  "    guard !words.isEmpty else { return \"\" }\n    var wordUniqueCharsCount: [String:\
    \ Int] = [:]\n    for word in words {\n        wordUniqueCharsCount[word] = word.count\n\
    \    }\n    let sortedWords = wordUniqueCharsCount.sorted { $0.value > $1.value\
    \ }\n    let max = sortedWords.first!\n    return max.key", "    return words.sorted(by:\
    \ { (a, b) -> Bool in\n        let aUnique = Set(a.map { String($0) })\n     \
    \   let bUnique = Set(b.map { String($0) })\n        if aUnique.count == bUnique.count\
    \ {\n            return a < b\n        }\n        return aUnique.count > bUnique.count\n\
    \    }).first!", "    // put your code here\n    return \"\"", "    var str =\
    \ \"\"\n    var charCount = 0\n    for word in words {\n        let set = Set(word)\n\
    \        if set.count > charCount {\n            str = word\n            charCount\
    \ = set.count\n        }\n    }\n    return str", '    return ""', "    // YOUR\
    \ CODE HERE\n    let uniqueChars = words.map { (word) -> [Character] in\n    \
    \    var unique = [Character]()\n        for char in word {\n            if !unique.contains(char)\
    \ {\n                unique.append(char)\n            }\n        }\n        return\
    \ unique\n    }\n    let max = uniqueChars.max { (first, second) -> Bool in\n\
    \        first.count < second.count\n    }\n    let index = uniqueChars.firstIndex(of:\
    \ max!)\n    return words[index!]", "    return words.reduce(words[0]) { (last,\
    \ curr) in\n        if last.count < curr.count {\n            return curr\n  \
    \      } else if last.count == curr.count {\n            if last < curr {\n  \
    \              return last\n            } else {\n                return curr\n\
    \            }\n        } else {\n            return last\n        }\n    }",
  "    var maxWords: [String] = []\n    var maxWord = \"\"\n    var maxUniqueChars\
    \ = 0\n    for word in words {\n        let uniqueChars = Set(word.characters)\n\
    \        if uniqueChars.count > maxUniqueChars {\n            maxWords = [word]\n\
    \            maxUniqueChars = uniqueChars.count\n        } else if uniqueChars.count\
    \ == maxUniqueChars {\n            maxWords.append(word)\n        }\n    }\n \
    \   for maxWord in maxWords {\n        if maxWord < maxWords[0] {\n          \
    \  maxWords[0] = maxWord\n        }\n    }\n    return maxWords[0]", "    var\
    \ maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n        let set\
    \ = Set(word)\n        if set.count > maxCount {\n            maxCount = set.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord", "    var uniqueWords\
    \ = [String:Int]()\n    for i in words {\n        uniqueWords[i] = i.count\n \
    \   }\n    let myArray = uniqueWords.sorted {$0.value > $1.value }\n    return\
    \ myArray[0].key", "    var ret = \"\"\n    var max_seen = 0\n    for word in\
    \ words {\n        let unique_chars = Set(word)\n        if unique_chars.count\
    \ > max_seen {\n            max_seen = unique_chars.count\n            ret = word\n\
    \        }\n    }\n    return ret", "    return words.max { word1, word2 in\n\
    \        let n1 = word1.lengthOfLongestSubstring()\n        let n2 = word2.lengthOfLongestSubstring()\n\
    \        if n1 == n2 {\n            return word1 < word2\n        }\n        return\
    \ n1 > n2\n    }!", '    return ""', "  var maxString = \"\"\n  var maxCount =\
    \ 0\n  for word in words {\n    let set = Set(word)\n    if set.count > maxCount\
    \ {\n      maxCount = set.count\n      maxString = word\n    }\n  }\n  return\
    \ maxString", '    return ""', "    var currentWord = \"\"\n    var currentCount\
    \ = 0\n    for word in words {\n        let uniqueCount = Set(word).count\n  \
    \      if uniqueCount > currentCount {\n            currentCount = uniqueCount\n\
    \            currentWord = word\n        }\n    }\n    return currentWord", " \
    \   let max = words.max { (s1, s2) -> Bool in\n        return s1.unique_char_count()\
    \ < s2.unique_char_count()\n    }\n    return max ?? \"\"", "    return words.max(by:\
    \ {a, b in\n        let a_chars = Set(a.characters)\n        let b_chars = Set(b.characters)\n\
    \        return a_chars.count < b_chars.count\n    })!", "    var max_word = words[0]\n\
    \    var max_count = 0\n    for word in words {\n        let count = get_unique_letters(word:\
    \ word)\n        if count > max_count {\n            max_count = count\n     \
    \       max_word = word\n        }\n    }\n    return max_word", "    var maxWord\
    \ = \"\"\n    var maxSet = Set<Character>()\n    for word in words {\n       \
    \ let set = Set(word)\n        if set.count > maxSet.count {\n            maxSet\
    \ = set\n            maxWord = word\n        } else if set.count == maxSet.count\
    \ && word < maxWord {\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord", "  var maximumWord: String = \"\"\n  var maximumUniqueLetters: Set<Character>\
    \ = []\n  for word in words {\n    let uniqueCharacters = Set(word)\n    if uniqueCharacters.count\
    \ > maximumUniqueLetters.count {\n      maximumUniqueLetters = uniqueCharacters\n\
    \      maximumWord = word\n    } else if uniqueCharacters.count == maximumUniqueLetters.count\
    \ {\n      maximumWord = min(maximumWord, word)\n    }\n  }\n  return maximumWord",
  "    let chars = words.map { Set($0) }\n    let counts = chars.map { $0.count }\n\
    \    let max_index = counts.index(of: counts.max()!)!\n    return words[max_index]",
  "    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n \
    \       let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word", "    var maxUniq = words[0]\n    for\
    \ i in 1 ..< words.count {\n        if uniq_chars(words[i]) > uniq_chars(maxUniq)\
    \ {\n            maxUniq = words[i]\n        }\n    }\n    return maxUniq", " \
    \   var maxString = \"\"\n    var maxCount = 0\n    for word in words {\n    \
    \    let count = Set(word).count\n        if count > maxCount {\n            maxCount\
    \ = count\n            maxString = word\n        }\n    }\n    return maxString",
  "    var word_and_char_count = [(word: String, char_count: Int)]()\n    for i in\
    \ 0..<words.count {\n        let unique_chars = unique_elements(array: words[i])\n\
    \        word_and_char_count.append((word: words[i], char_count: unique_chars.count))\n\
    \    }\n    let max_index = word_and_char_count.max { a, b in a.char_count < b.char_count\
    \ }?.char_count\n    let max_words = word_and_char_count.filter { $0.char_count\
    \ == max_index }\n    return max_words.first!.word", "  var count = 0\n  var word\
    \ = \"\"\n  for w in words {\n    let uniqueChars = Set(w)\n    if uniqueChars.count\
    \ > count {\n      count = uniqueChars.count\n      word = w\n    }\n  }\n  return\
    \ word", '    return words.reduce(words[0]) { $0.countUniqueChars > $1.countUniqueChars
    ? $0 : $1 }', "  var maxString = \"\"\n  var maxSet = Set<Character>()\n  for\
    \ word in words {\n    let set = Set(word)\n    if set.count > maxSet.count {\n\
    \      maxSet = set\n      maxString = word\n    } else if set.count == maxSet.count\
    \ && word < maxString {\n      maxString = word\n    }\n  }\n  return maxString",
  "    let distinct_words = words.map { word in word.removeDuplicates() }\n    return\
    \ distinct_words.sorted { $0.count > $1.count }.first ?? \"\"", "    var result\
    \ = words[0]\n    for word in words[1..<words.count] {\n        if Set(word).count\
    \ > Set(result).count ||\n            (Set(word).count == Set(result).count &&\
    \ word < result) {\n            result = word\n        }\n    }\n    return result",
  "    var bestString = words[0]\n    var bestCount = 0\n    for word in words {\n\
    \        let newCount = count_unique(s: word)\n        if newCount > bestCount\
    \ {\n            bestCount = newCount\n            bestString = word\n       \
    \ }\n    }\n    return bestString", "    var string_max = \"\"\n    var count_max\
    \ = 0\n    for string in words {\n        let new_set = Set(string)\n        if\
    \ new_set.count > count_max {\n            count_max = new_set.count\n       \
    \     string_max = string\n        }\n    }\n    return string_max", "    var\
    \ maxWord = words[0]\n    var maxLength = count(maxWord)\n    var maxSet = Set(maxWord)\n\
    \    for i in 1..<words.count {\n        var set = Set(words[i])\n        if set.count\
    \ > maxSet.count {\n            maxSet = set\n            maxWord = words[i]\n\
    \            maxLength = count(maxWord)\n        } else if set.count == maxSet.count\
    \ {\n            if count(words[i]) < maxLength {\n                maxWord = words[i]\n\
    \                maxLength = count(maxWord)\n            }\n        }\n    }\n\
    \    return maxWord", "    \n    let wordsDict = words.reduce(into: [:]) { (dict,\
    \ word) in\n        dict[word, default: 0] += 1\n    }\n    \n    let maxValue\
    \ = wordsDict.values.max()\n    \n    let maxDict = wordsDict.filter { (word,\
    \ count) -> Bool in\n        count == maxValue\n    }\n    \n    return maxDict.keys.sorted().first\
    \ ?? \"\"", "    \n    guard !words.isEmpty else {\n        return \"\"\n    }\n\
    \    \n    var uniqueChar: [Character: Int] = [:]\n    var maxWord = words[0]\n\
    \    var maxUnique = 0\n    \n    for (index, word) in words.enumerated() {\n\
    \        if index == 0 {\n            for character in word {\n              \
    \  uniqueChar[character] = 1\n            }\n            maxUnique = uniqueChar.count\n\
    \            continue\n        }\n        \n        var temp: [Character: Int]\
    \ = [:]\n        for character in word {\n            temp[character] = 1\n  \
    \      }\n        \n        let tempUnique = temp.count\n        if tempUnique\
    \ > maxUnique {\n            maxUnique = tempUnique\n            maxWord = word\n\
    \        } else if tempUnique == maxUnique {\n            if word < maxWord {\n\
    \                maxWord = word\n            }\n        }\n    }\n    \n    return\
    \ maxWord", "    var maxCount = 0\n    var maxString = \"\"\n    for word in words\
    \ {\n        let unique = uniqueLetters(in: word)\n        if unique.count > maxCount\
    \ {\n            maxCount = unique.count\n            maxString = word\n     \
    \   } else if unique.count == maxCount {\n            if maxString.compare(word)\
    \ == .orderedDescending {\n                maxString = word\n            }\n \
    \       }\n    }\n    return maxString", "    var uniques = [String: String]()\n\
    \    for word in words {\n        var set = Set<Character>()\n        for c in\
    \ word {\n            set.insert(c)\n        }\n        uniques[word] = String(set.count)\n\
    \    }\n    let sorted = uniques.sorted(by: {$0.value > $1.value})\n    return\
    \ sorted[0].key", "    var result = words[0]\n    var max_unique_chars = 0\n \
    \   for i in 0..<words.count {\n        let unique_chars = unique_letters(word:\
    \ words[i])\n        if unique_chars > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars\n            result = words[i]\n        }\n    }\n    return\
    \ result", "    if words.count < 1 {\n        return \"\"\n    }\n    var unique_words\
    \ = [String:Set<Character>]()\n    for word in words {\n        unique_words[word]\
    \ = Set(word)\n    }\n    var max_key = \"\"\n    var max_length = 0\n    for\
    \ (key, value) in unique_words {\n        if value.count > max_length {\n    \
    \        max_length = value.count\n            max_key = key\n        }\n    }\n\
    \    return max_key", "    // Write your code here.\n    return \"\"", "    return\
    \ words.reduce(\"\") {\n        guard $0 != \"\" else { return $1 }\n        let\
    \ currentUnique = Set($1)\n        if currentUnique.count > Set($0).count {\n\
    \            return $1\n        } else if currentUnique.count == Set($0).count\
    \ {\n            return $0 < $1 ? $0 : $1\n        } else {\n            return\
    \ $0\n        }\n    }", "    var maxWords = [String]()\n    var maxCount = 0\n\
    \    for word in words {\n        let set = Set(word)\n        if set.count >\
    \ maxCount {\n            maxCount = set.count\n            maxWords = [word]\n\
    \        } else if set.count == maxCount {\n            maxWords.append(word)\n\
    \        }\n    }\n    maxWords.sort()\n    return maxWords[0]", "    \n    var\
    \ maxChar = 0\n    var finalWord = \"\"\n    \n    for word in words {\n     \
    \   var unique = Set<Character>()\n        for char in word {\n            unique.insert(char)\n\
    \        }\n        if unique.count > maxChar {\n            maxChar = unique.count\n\
    \            finalWord = word\n        }\n    }\n    return finalWord", "    var\
    \ max_string = \"\"\n    var max_value = 0\n    for word in words {\n        let\
    \ value = Set(word).count\n        if value > max_value {\n            max_value\
    \ = value\n            max_string = word\n        }\n    }\n    return max_string",
  '    return ""', '    return words.max(by: { ($0.count, $0) < ($1.count, $1) })!',
  "    var maxCount = 0\n    var maxString = \"\"\n    for word in words {\n     \
    \   let charSet = Set(word)\n        if charSet.count > maxCount {\n         \
    \   maxCount = charSet.count\n            maxString = word\n        }\n    }\n\
    \    return maxString", "    var max: (freq: Int, lex: String) = (0, \"\")\n \
    \   for word in words {\n        var freq = 0\n        var set = Set<Character>()\n\
    \        for c in word {\n            if !set.contains(c) {\n                freq\
    \ += 1\n                set.insert(c)\n            }\n        }\n        if freq\
    \ > max.freq {\n            max = (freq, word)\n        } else if freq == max.freq\
    \ && word < max.lex {\n            max = (freq, word)\n        }\n    }\n    return\
    \ max.lex", '    return ""', "  var max = (0, words[0])\n  for word in words {\n\
    \    let count = get_char_count(string: word)\n    if count > max.0 {\n      max\
    \ = (count, word)\n    }\n  }\n  return max.1", "    var max_word = words[0]\n\
    \    var max_count = 0\n    for var word in words {\n        let count = num_unique_chars(word:\
    \ word)\n        if count > max_count {\n            max_count = count\n     \
    \       max_word = word\n        }\n    }\n    return max_word", "    var max_word\
    \ = \"\"\n    var max_count = 0\n    for word in words {\n        let unique_letters\
    \ = Set(word.characters)\n        if unique_letters.count > max_count {\n    \
    \        max_count = unique_letters.count\n            max_word = word\n     \
    \   }\n    }\n    return max_word", "    guard words.count > 0 else {\n      \
    \  return \"\"\n    }\n    let count = words.count\n    var maxUniqueChars = Set<Character>()\n\
    \    var result = words[0]\n    for i in 0..<count {\n        let word = words[i]\n\
    \        var currentSet = Set<Character>()\n        for j in 0..<word.count {\n\
    \            let char = word[word.index(word.startIndex, offsetBy: j)]\n     \
    \       currentSet.insert(char)\n        }\n        if currentSet.count > maxUniqueChars.count\
    \ {\n            maxUniqueChars = currentSet\n            result = word\n    \
    \    } else if currentSet.count == maxUniqueChars.count {\n            result\
    \ = min(result, word)\n        }\n    }\n    return result", "    let sorted =\
    \ words.sorted()\n    guard sorted.count > 0 else { return \"\" }\n    var dict\
    \ = sorted.reduce(into: [:]) { $0[$1] = $1.count }\n    let max = dict.max { a,\
    \ b in a.value < b.value }\n    return max?.key ?? \"\"", "    var maxWord = words[0]\n\
    \    var maxNum = 0\n    for word in words {\n        let num = numOfUnique(word:\
    \ word)\n        if num > maxNum {\n            maxNum = num\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord", "  // TODO: write your code here\n\
    \  return \"\"", "    // initialise the variable which will store the maximum\
    \ number of unique characters\n    var maxUniques = 0\n    // initialise the variable\
    \ which will be used to return the correct word\n    var wordToReturn = \"\"\n\
    \    // iterate through the array of strings\n    for word in words {\n      \
    \  // create a set from the word\n        let chars = Set(word)\n        // check\
    \ if the number of characters in the set is greater than the current max\n   \
    \     if chars.count > maxUniques {\n            // if it is, set the max to the\
    \ new maximum and the word to return to the correct word\n            maxUniques\
    \ = chars.count\n            wordToReturn = word\n        }\n    }\n    // return\
    \ the word to return\n    return wordToReturn", "    var maxUniqueChars = 0\n\
    \    var maxWord = \"\"\n    for word in words {\n        let unique = Set(word)\n\
    \        if unique.count > maxUniqueChars {\n            maxUniqueChars = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord", "    return\
    \ words.map { $0.reduce(into: [:]) { $0[$1, default: 0] += 1 } }\n        .map\
    \ { $0.filter { $0.value == 1 }.count }\n        .enumerated()\n        .max {\
    \ $0.element < $1.element }!.element", '    return ""', "    return words.reduce(\"\
    \") {\n        (best, word) in\n        if word.countUniqueCharacters() > best.countUniqueCharacters()\
    \ {\n            return word\n        } else if word.countUniqueCharacters() ==\
    \ best.countUniqueCharacters() {\n            return word.compare(best) == .orderedAscending\
    \ ? word : best\n        } else {\n            return best\n        }\n    }",
  "    var max = 0\n    var word = \"\"\n    for item in words {\n        let s =\
    \ Set(item)\n        if s.count > max {\n            max = s.count\n         \
    \   word = item\n        }\n    }\n    return word", "    var max = 0\n    var\
    \ maxWord = \"\"\n    for word in words {\n        var set = Set<Character>()\n\
    \        for char in word {\n            set.insert(char)\n        }\n       \
    \ if set.count > max {\n            max = set.count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    \n    var count = 0\n    var tempCount\
    \ = 0\n    var index = 0\n    var tempIndex = 0\n    \n    for (i,word) in words.enumerated()\
    \ {\n        tempCount = 0\n        for char in word {\n            if !words[index].contains(char)\
    \ {\n                tempCount += 1\n            }\n        }\n        if tempCount\
    \ > count {\n            count = tempCount\n            index = i\n        }\n\
    \    }\n    return words[index]", "    guard !words.isEmpty else { return \"\"\
    \ }\n    let sortedWords = words.sorted { $0 < $1 }\n    let unique = sortedWords.map\
    \ { Set($0) }\n    guard let max = unique.max(by: { $0.count < $1.count }) else\
    \ { return \"\" }\n    let maxWords = unique.filter { $0.count == max.count }\n\
    \    return maxWords.first!", '    return ""', "    var maxCount = 0\n    var\
    \ maxWord = \"\"\n    for word in words {\n        let uniqCount = Set(word).count\n\
    \        if uniqCount > maxCount {\n            maxCount = uniqCount\n       \
    \     maxWord = word\n        } else if uniqCount == maxCount {\n            if\
    \ word < maxWord {\n                maxWord = word\n            }\n        }\n\
    \    }\n    return maxWord", "    // Implement this function\n    var compare\
    \ = \"\"\n    for word in words {\n        if compare.count < word.count {\n \
    \           compare = word\n        }\n    }\n    return compare", '    return
    ""', "    var maxCharSet: Set<Character> = []\n    var wordMax: String = \"\"\n\
    \    for word in words {\n        let set = Set(word)\n        if set.count >\
    \ maxCharSet.count {\n            maxCharSet = set\n            wordMax = word\n\
    \        } else if set.count == maxCharSet.count && word < wordMax {\n       \
    \     wordMax = word\n        }\n    }\n    return wordMax", "    var maxUniqChars:\
    \ Int = 0\n    var maxWord: String = \"\"\n    for word in words {\n        let\
    \ uniqChars = word.countUniques()\n        if uniqChars > maxUniqChars {\n   \
    \         maxUniqChars = uniqChars\n            maxWord = word\n        } else\
    \ if uniqChars == maxUniqChars && maxWord > word {\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    var dictionary: [String: Int] = [:]\n\
    \    for word in words {\n        let set = Set(word)\n        dictionary[word]\
    \ = set.count\n    }\n    var maxValue = 0\n    var word = \"\"\n    for (key,\
    \ value) in dictionary {\n        if value > maxValue {\n            maxValue\
    \ = value\n            word = key\n        }\n    }\n    return word", '    return
    ""', "    guard words.count > 0 else {\n        fatalError(\"Invalid input: array\
    \ is empty\")\n    }\n    var maxCount = 0\n    var maxWord = \"\"\n    for word\
    \ in words {\n        var set = Set<Character>()\n        for char in word {\n\
    \            set.insert(char)\n        }\n        if set.count > maxCount {\n\
    \            maxCount = set.count\n            maxWord = word\n        } else\
    \ if set.count == maxCount {\n            if word < maxWord {\n              \
    \  maxWord = word\n            }\n        }\n    }\n    return maxWord", "   \
    \ var result = \"\"\n    var uniqueCharacters: Set<Character>\n    var maxNumCharacters\
    \ = 0\n    for word in words {\n        uniqueCharacters = Set(word)\n       \
    \ if maxNumCharacters < uniqueCharacters.count {\n            maxNumCharacters\
    \ = uniqueCharacters.count\n            result = word\n        }\n    }\n    return\
    \ result", "    guard !words.isEmpty else {\n        return \"\"\n    }\n    var\
    \ minNumOfUniqueChars = Int.max\n    var currentWord = \"\"\n    for word in words\
    \ {\n        if let numberOfChars = numberOfUniqueChars(word) {\n            if\
    \ minNumOfUniqueChars > numberOfChars {\n                minNumOfUniqueChars =\
    \ numberOfChars\n                currentWord = word\n            }\n        }\n\
    \    }\n    return currentWord", "  var counts = [String: Int]()\n  for w in words\
    \ {\n    counts[w] = Set(w).count\n  }\n  let maxValue = counts.values.max()\n\
    \  var result = \"\"\n  for (k, v) in counts {\n    if v == maxValue {\n     \
    \ result = k\n      break\n    }\n  }\n  return result", "    var max_word = \"\
    \"\n    var max_count = 0\n    for i in 0..<words.count {\n        let count =\
    \ get_unique_count(word: words[i])\n        if count > max_count {\n         \
    \   max_count = count\n            max_word = words[i]\n        }\n    }\n   \
    \ return max_word", "    var maxSoFar = words[0]\n    for word in words {\n  \
    \      if uniqueCount(string: word) > uniqueCount(string: maxSoFar) {\n      \
    \      maxSoFar = word\n        }\n    }\n    return maxSoFar", "    var max =\
    \ words[0]\n    var maxUnique = Set(max).count\n    for w in words {\n       \
    \ let wUnique = Set(w).count\n        if wUnique > maxUnique {\n            max\
    \ = w\n            maxUnique = wUnique\n        }\n    }\n    return max", " \
    \   /// Returns number of unique characters in a string\n    func distinct_count(of\
    \ word: String) -> Int {\n        let characters = Array(word)\n        var unique_characters\
    \ = Set<Character>()\n        for character in characters {\n            unique_characters.insert(character)\n\
    \        }\n        return unique_characters.count\n    }\n    \n    var max_word\
    \ = words[0]\n    var max_count = distinct_count(of: max_word)\n    for word in\
    \ words {\n        let count = distinct_count(of: word)\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word", "  var uniqueCharCount = [Int]()\n  for i in 0..<words.count\
    \ {\n    uniqueCharCount.append(uniqueChar(str: words[i]))\n  }\n  let maxCount\
    \ = uniqueCharCount.max()\n  let index = uniqueCharCount.firstIndex(of: maxCount!)\n\
    \  return words[index!]", "    var max_count = 0\n    var max_string = \"\"\n\
    \    for item in words {\n        var set = Set<Character>()\n        for char\
    \ in item {\n            set.insert(char)\n        }\n        if set.count > max_count\
    \ {\n            max_count = set.count\n            max_string = item\n      \
    \  }\n    }\n    return max_string", "    guard !words.isEmpty else { return \"\
    \" }\n    var max_unique = 0\n    var result = \"\"\n    words.forEach { word\
    \ in\n        let len = Set(word).count\n        if len > max_unique {\n     \
    \       max_unique = len\n            result = word\n        } else if len ==\
    \ max_unique {\n            result = String(Array(Set(result))).compare(word)\
    \ == .orderedDescending ? word : result\n        }\n    }\n    return result",
  "    let uniqueCharacterCounts = words.map { $0.countUniqueCharacters() }\n    let\
    \ maxUniqueCharacterCount = uniqueCharacterCounts.max()!\n    guard let maxWordIndex\
    \ = uniqueCharacterCounts.firstIndex(of: maxUniqueCharacterCount) else {\n   \
    \     fatalError(\"We've just calculated this value\")\n    }\n    return words[maxWordIndex]",
  "    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n       \
    \ let stringSet = Set(word)\n        if maxCount < stringSet.count {\n       \
    \     maxCount = stringSet.count\n            maxWord = word\n        }\n    }\n\
    \    return maxWord", "    var max = \"\"\n    for word in words {\n        if\
    \ max == \"\" || is_lexicographically_greater(word, max) ||\n            is_lexicographically_equal(word,\
    \ max) &&\n            (unique_chars(word) ?? 0) > (unique_chars(max) ?? 0) {\n\
    \            max = word\n        }\n    }\n    return max", '    return ""', " \
    \   // TODO: Write implementation\n    return \"\"", "    // TODO\n    return\
    \ \"\"", "    var maxWord = words[0]\n    var maxChars = 0\n    var count = 0\n\
    \    for word in words {\n        count = Set(word).count\n        if count >\
    \ maxChars {\n            maxChars = count\n            maxWord = word\n     \
    \   }\n    }\n    return maxWord", "    var max = Int.min\n    var index = 0\n\
    \    for i in 0..<words.count {\n        let string = words[i]\n        let unique_chars\
    \ = Set(string)\n        if unique_chars.count > max {\n            max = unique_chars.count\n\
    \            index = i\n        }\n    }\n    return words[index]", "    let chars\
    \ = words.map { $0.characters }\n    let numberOfUniqueChars = chars.map { Set($0)\
    \ }\n    let max = numberOfUniqueChars.max { $0.count < $1.count }!\n    let m\
    \ = numberOfUniqueChars.indexOf(max)!\n    return words[m]", "    var l: Int =\
    \ 0\n    var r: Int = 0\n    var max_length: Int = 0\n    for (index, word) in\
    \ words.enumerated() {\n        if word.characters.count == 1 {\n            return\
    \ word\n        }\n        if Set(word.characters).count > max_length {\n    \
    \        max_length = Set(word.characters).count\n            l = index\n    \
    \    }\n    }\n    for (index, word) in words.enumerated() {\n        if word.characters.count\
    \ == max_length {\n            if word < words[l] {\n                l = index\n\
    \            }\n        }\n    }\n    return words[l]", "    // TODO\n    return\
    \ \"\"", "    var maxUnique = 0\n    var maxWord = \"\"\n    for word in words\
    \ {\n        let uniques = Set(word)\n        if uniques.count > maxUnique {\n\
    \            maxUnique = uniques.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord", "    // yannic: todo, maybe a nicer solution with\
    \ sorted(by: {$0.count > $1.count})\n    var max_element = words[0]\n    var max_element_count\
    \ = Set(words[0]).count\n    for word in words {\n        let count = Set(word).count\n\
    \        if count > max_element_count {\n            max_element = word\n    \
    \        max_element_count = count\n        }\n    }\n    return max_element",
  "    var maxWord: String = \"\"\n    var maxCharacters = 0\n    for word in words\
    \ {\n        let wordCharacters = Set(word)\n        if wordCharacters.count >\
    \ maxCharacters {\n            maxCharacters = wordCharacters.count\n        \
    \    maxWord = word\n        }\n    }\n    return maxWord", "    var counter =\
    \ [String: Set<Character>]()\n    for word in words {\n        var unique = Set<Character>()\n\
    \        for character in word {\n            unique.insert(character)\n     \
    \   }\n        counter[word] = unique\n    }\n    let max_size = counter.map({\
    \ $0.value.count }).max()\n    var results = [String]()\n    for (word, value)\
    \ in counter {\n        if value.count == max_size {\n            results.append(word)\n\
    \        }\n    }\n    return results.min()!", "    var word_map = [Character:\
    \ Int]()\n    var max_word = String()\n    var max_num = 0\n    for word in words\
    \ {\n        if word.count == 1 {\n            max_word = word\n            break\n\
    \        }\n        word_map.removeAll()\n        for char in word {\n       \
    \     if let i = word_map[char] {\n                word_map[char] = i + 1\n  \
    \          } else {\n                word_map[char] = 1\n            }\n     \
    \   }\n        var count = 0\n        for _ in word_map {\n            count +=\
    \ 1\n        }\n        if count > max_num {\n            max_num = count\n  \
    \          max_word = word\n        } else if count == max_num {\n           \
    \ if word < max_word {\n                max_word = word\n            }\n     \
    \   }\n    }\n    return max_word", "    var maxCount = 0\n    var maxWord = \"\
    \"\n    for word in words {\n        var unique = Set<Character>()\n        for\
    \ char in word {\n            unique.insert(char)\n        }\n        if unique.count\
    \ > maxCount {\n            maxCount = unique.count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    var dictionary = [String: String]()\n\
    \    var maxChar = 0\n    var result = \"\"\n    for word in words {\n       \
    \ var wordArr = word.characters.map { String($0) }\n        var total = 0\n  \
    \      for char in wordArr {\n            if !dictionary.keys.contains(char) {\n\
    \                dictionary[char] = \"\"\n                total += 1\n       \
    \     }\n        }\n        if total > maxChar {\n            maxChar = total\n\
    \            result = word\n        }\n    }\n    return result", "    let uniqueWords\
    \ = words.map { $0.filterDuplicates() }\n    let uniqueCounts = uniqueWords.map\
    \ { $0.count }\n    let resultIndex = uniqueCounts.argmax()\n    return words[resultIndex]",
  "    // You need to implement this function.\n    return \"\"", "  guard let first\
    \ = words.first else { return \"\" }\n  return words.reduce(first) { (result,\
    \ word) in\n    if count_unique_characters(word) > count_unique_characters(result)\
    \ {\n      return word\n    } else if count_unique_characters(word) == count_unique_characters(result)\
    \ && word < result {\n      return word\n    } else {\n      return result\n \
    \   }\n  }", "    // TODO\n    return \"\"", "  let array1 = words.map { $0.count\
    \ }\n  let maxcount = array1.max()\n  let index = array1.firstIndex(of: maxcount!)\n\
    \  return words[index!]", '    return ""', '    return ""', '    return ""', " \
    \   var maxCharsCount = 0\n    var maxWord = \"\"\n    for (index, word) in words.enumerated()\
    \ {\n        let uniqueCharsCount = word.uniqueCharsCount()\n        if uniqueCharsCount\
    \ > maxCharsCount {\n            maxCharsCount = uniqueCharsCount\n          \
    \  maxWord = word\n        } else if uniqueCharsCount == maxCharsCount && word\
    \ < maxWord {\n            maxWord = word\n        }\n    }\n    return maxWord",
  "    if words.count == 0 {\n        return \"\"\n    }\n    var maxWord = words[0]\n\
    \    var maxCount = count_chars(word: words[0])\n    for i in 1..<words.count\
    \ {\n        let currCount = count_chars(word: words[i])\n        if currCount\
    \ > maxCount {\n            maxCount = currCount\n            maxWord = words[i]\n\
    \        } else if currCount == maxCount {\n            if words[i] < maxWord\
    \ {\n                maxWord = words[i]\n            }\n        }\n    }\n   \
    \ return maxWord", "    var max_count = 0\n    var max_word = \"\"\n    for word\
    \ in words {\n        let count = count_unique_characters(word: word)\n      \
    \  if count > max_count {\n            max_count = count\n            max_word\
    \ = word\n        }\n    }\n    return max_word", "    guard words.count > 0 else\
    \ {\n        return \"\"\n    }\n    let chars = words.map { String($0.characters.sorted())\
    \ }\n    let result = chars.max { $0.characters.count < $1.characters.count }\n\
    \    if let idx = chars.index(of: result ?? \"\") {\n        return words[idx]\n\
    \    }\n    return \"\"", "    /// Write your solution here\n    return \"\"",
  "    \n    let results = words.map({\n        $0.countUniqueCharacters()\n    })\n\
    \    \n    let maxResult = results.max()\n    \n    let index = results.firstIndex(of:\
    \ maxResult!)\n    \n    return words[index!]", "    \n    var wordCountDict =\
    \ [String: [Character]]()\n    var maxCount = 0\n    var maxWord = \"\"\n    \n\
    \    // create a hashmap of word and character count\n    for word in words {\n\
    \        wordCountDict[word] = []\n        for char in word {\n            wordCountDict[word]?.append(char)\n\
    \        }\n    }\n    \n    // create another hashmap of word and count of unique\
    \ characters\n    var wordUniqCountDict = [String: Int]()\n    for (word, charCountArray)\
    \ in wordCountDict {\n        wordUniqCountDict[word] = charCountArray.count\n\
    \    }\n    \n    // find the word with max count of unique characters\n    for\
    \ (word, charCount) in wordUniqCountDict {\n        if charCount > maxCount {\n\
    \            maxCount = charCount\n            maxWord = word\n        }\n   \
    \ }\n    \n    return maxWord", "    var max = 0\n    var max_string = \"\"\n\
    \    for i in words {\n        let set = Set(i)\n        if set.count > max {\n\
    \            max = set.count\n            max_string = i\n        }\n    }\n \
    \   return max_string", "    var max = (word: \"\", count: 0)\n    for word in\
    \ words {\n        let set = Set(word)\n        if set.count > max.count {\n \
    \           max = (word, set.count)\n        }\n    }\n    return max.word", " \
    \ var maxLength: Int = 0\n  var maxWord: String = \"\"\n  var maxIndex: Int =\
    \ 0\n  var index: Int = 0\n  for word in words {\n    if uniqueCharsInString(str:\
    \ word).count > maxLength {\n      maxLength = uniqueCharsInString(str: word).count\n\
    \      maxWord = word\n      maxIndex = index\n    }\n    index += 1\n  }\n  return\
    \ words[maxIndex]", "    var maxWord = words[0]\n    var maxChars = Set<Character>()\n\
    \    for word in words {\n        let chars = Set(word)\n        if chars.count\
    \ > maxChars.count {\n            maxChars = chars\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    guard words.count > 0 else { return\
    \ \"\" }\n    var max_word = words[0]\n    var max_chars = chars(in: words[0])\n\
    \    for word in words {\n        let curr_chars = chars(in: word)\n        if\
    \ curr_chars.count > max_chars.count {\n            max_chars = curr_chars\n \
    \           max_word = word\n        } else if curr_chars.count == max_chars.count\
    \ && word < max_word {\n            max_chars = curr_chars\n            max_word\
    \ = word\n        }\n    }\n    return max_word", "    guard let minWord = words.min(by:\
    \ {$0.count < $1.count}) else {\n        return \"\"\n    }\n    let sortedWords\
    \ = words.sorted {$0.count > $1.count}\n    var result = minWord\n    for word\
    \ in sortedWords {\n        if word.count == result.count {\n            continue\n\
    \        }\n        if let index = word.firstIndex(of: result.first!) {\n    \
    \        result = word.substring(from: index)\n        }\n    }\n    return result",
  "    // your code here\n    var result = \"\"\n    var unique_chars = 0\n    var\
    \ unique_char_counter = [String: Int]()\n    for word in words {\n        unique_char_counter[word]\
    \ = 0\n        for char in word {\n            if !unique_char_counter.keys.contains(String(char))\
    \ {\n                unique_char_counter[word]! += 1\n            }\n        }\n\
    \        if unique_char_counter[word]! > unique_chars {\n            unique_chars\
    \ = unique_char_counter[word]!\n            result = word\n        }\n    }\n\
    \    return result", "    let charSet: NSMutableSet = NSMutableSet()\n    var\
    \ maxLength = -1\n    var maxWord = \"\"\n    for word in words {\n        charSet.removeAllObjects()\n\
    \        for c in word.characters {\n            charSet.add(c)\n        }\n \
    \       if charSet.count > maxLength {\n            maxLength = charSet.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord", "    // TODO:\
    \ Write a function that accepts an array of strings\n    // The array contains\
    \ different words. Return the word with maximum number\n    // of unique characters.\
    \ If multiple strings have maximum number of unique\n    // characters, return\
    \ the one which comes first in lexicographical order.\n    // >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n    // \"string\"\n    // >>> find_max(words:\
    \ [\"name\", \"enam\", \"game\"])\n    // \"enam\"\n    // >>> find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"])\n    // \"aaaaaaa\"\n    var retVal = \"\"\n\
    \    var maxCharCount = 0\n    for word in words {\n        let uniqueCharsCount\
    \ = Set(word).count\n        if uniqueCharsCount > maxCharCount {\n          \
    \  maxCharCount = uniqueCharsCount\n            retVal = word\n        }\n   \
    \ }\n    return retVal", "    \n    if words.count == 0 {\n        return \"\"\
    \n    }\n    \n    var unique_cnt = [Int]()\n    var unique_char_cnt = 0\n   \
    \ var max_word = \"\"\n    \n    for var str in words {\n        unique_char_cnt\
    \ = 0\n        for char in str.characters {\n            if !str.containsString(String(char))\
    \ {\n                unique_char_cnt += 1\n            }\n        }\n        unique_cnt.append(unique_char_cnt)\n\
    \    }\n    \n    let max = unique_cnt.maxElement()\n    let index = unique_cnt.indexOf(max!)\n\
    \    max_word = words[index!]\n    \n    return max_word", "    var the_most =\
    \ 0\n    var name = words[0]\n    for word in words {\n        let tmp = word.count\n\
    \        if tmp > the_most {\n            the_most = tmp\n            name = word\n\
    \        }\n    }\n    return name", "    var ans = \"\"\n    var max_count =\
    \ 0\n    for word in words {\n        var map: [Character: Int] = [:]\n      \
    \  for char in word {\n            if map[char] == nil {\n                map[char]\
    \ = 1\n            } else {\n                map[char]! += 1\n            }\n\
    \        }\n        if map.count > max_count {\n            max_count = map.count\n\
    \            ans = word\n        }\n    }\n    return ans", "    guard !words.isEmpty\
    \ else {\n        return \"\"\n    }\n    guard words.count > 1 else {\n     \
    \   return words[0]\n    }\n    let wordsDict = words.map {($0, $0.unique())}\n\
    \    let maxUnique = wordsDict.max {a, b in a.1.count < b.1.count}\n    let maxNumUnique\
    \ = maxUnique?.1.count ?? 0\n    var maxWords = wordsDict.filter {$0.1.count ==\
    \ maxNumUnique}\n    maxWords.sort {a, b in a.0 < b.0}\n    return maxWords[0].0",
  "    var max_unique = Set<Character>()\n    var result = \"\"\n    for word in words\
    \ {\n        let unique = Set(word)\n        if unique.count > max_unique.count\
    \ {\n            max_unique = unique\n            result = word\n        } else\
    \ if unique.count == max_unique.count && word < result {\n            result =\
    \ word\n        }\n    }\n    return result", "    var maxUnique = 0\n    var\
    \ maxWord = \"\"\n    for word in words {\n        let unique = find_unique(word:\
    \ word)\n        if unique > maxUnique {\n            maxUnique = unique\n   \
    \         maxWord = word\n        }\n    }\n    return maxWord", "    let words\
    \ = words.map {\n        ($0, Set($0.characters).count)\n    }\n    let max =\
    \ words.max {\n        if $0.1 == $1.1 {\n            return $0.0 < $1.0\n   \
    \     }\n        return $0.1 < $1.1\n    }\n    return max!.0", "    var result\
    \ = \"\"\n    var temp = 0\n    for i in words {\n        if i.count > temp {\n\
    \            temp = i.count\n            result = i\n        }\n    }\n    return\
    \ result", "    var maxCount = 0\n    var maxWord = \"\"\n    for word in words\
    \ {\n        let count = count_unique_characters(word: word)\n        if count\
    \ > maxCount {\n            maxCount = count\n            maxWord = word\n   \
    \     } else if count == maxCount && word < maxWord {\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    var max = words[0]\n    for word\
    \ in words {\n        if word.count < max.count {\n            continue\n    \
    \    } else if word.count > max.count {\n            max = word\n        } else\
    \ {\n            if word < max {\n                max = word\n            }\n\
    \        }\n    }\n    return max", "    var unique_char_count = words.map { $0.countUniqueChars()\
    \ }\n    var max = unique_char_count.max()\n    if let i = unique_char_count.firstIndex(of:\
    \ max!) {\n        return words[i]\n    }\n    return \"\"", "  var result = \"\
    \"\n  var maximum = 0\n  for word in words {\n    if Set(word).count > maximum\
    \ {\n      maximum = Set(word).count\n      result = word\n    }\n  }\n  return\
    \ result", "    // 1. \uC81C\uC77C \uAE34 \uAE00\uC790\uC218\uB97C \uAC00\uC9C4\
    \ \uAC83\uC744 \uCC3E\uC544\uB0B8\uB2E4.\n    // 1-1. \uAE00\uC790\uC218\uB97C\
    \ \uBE44\uAD50\uD558\uB294 \uD568\uC218\uB97C \uB9CC\uB4E0\uB2E4.\n    // 1-2.\
    \ \uBC30\uC5F4\uC744 \uAE00\uC790\uC218\uC5D0 \uB530\uB77C \uC815\uB82C\uD55C\uB2E4\
    .\n    // 1-3. \uAC00\uC7A5 \uAE34 \uAE00\uC790\uC218\uB97C \uCC3E\uC544\uB0B8\
    \uB2E4.\n    // 2. \uAC00\uC7A5 \uAE34 \uAE00\uC790\uC218\uB97C \uAC00\uC9C4 \uBB38\
    \uC790\uC5F4\uC744 \uCC3E\uC544\uB0B8\uB2E4.\n    // 2-1. \uAE00\uC790\uC218\uAC00\
    \ \uAC19\uC740 \uBB38\uC790\uC5F4 \uC911\uC5D0\uC11C \uC720\uB2C8\uD06C\uD55C\
    \ \uBB38\uC790\uC218\uB97C \uAC00\uC9C4 \uBB38\uC790\uC5F4\uC744 \uCC3E\uC544\uB0B8\
    \uB2E4.\n    // 2-2. \uC720\uB2C8\uD06C\uD55C \uBB38\uC790\uC218\uAC00 \uAC19\uC740\
    \ \uBB38\uC790\uC5F4 \uC911\uC5D0\uC11C \uAC00\uC7A5 \uC55E\uC5D0 \uC788\uB294\
    \ \uBB38\uC790\uC5F4\uC744 \uCC3E\uC544\uB0B8\uB2E4.\n    // 3. \uC815\uB2F5\uC744\
    \ \uBC18\uD658\uD55C\uB2E4.\n    let sorted = words.sorted {\n        if $0.count\
    \ == $1.count {\n            return $0 < $1\n        }\n        return $0.count\
    \ > $1.count\n    }\n", "    var unique_count = [String: Int]()\n    for word\
    \ in words {\n        unique_count[word] = unique_chars(word: word)\n    }\n \
    \   var max_value = 0\n    var max_word = \"\"\n    for (key, value) in unique_count\
    \ {\n        if value > max_value {\n            max_value = value\n         \
    \   max_word = key\n        }\n    }\n    return max_word", "    return words.max\
    \ { (a, b) -> Bool in\n        if a.characters.count > b.characters.count {\n\
    \            return true\n        } else if a.characters.count == b.characters.count\
    \ {\n            return a < b\n        } else {\n            return false\n  \
    \      }\n    }!", "    var word: String = \"\"\n    var wordLength: Int = 0\n\
    \    for w in words {\n        if Set(w).count > wordLength {\n            word\
    \ = w\n            wordLength = Set(w).count\n        }\n    }\n    return word",
  "    var maxWord = \"\"\n    var maxCharCount = 0\n    for word in words {\n   \
    \     let charCount = word.count\n        if charCount > maxCharCount {\n    \
    \        maxCharCount = charCount\n            maxWord = word\n        }\n   \
    \ }\n    return maxWord", "    var result = words[0]\n    var maxCount = words[0].count_uniq\n\
    \    for word in words {\n        if word.count_uniq > maxCount {\n          \
    \  maxCount = word.count_uniq\n            result = word\n        }\n    }\n \
    \   return result", "    var max = 0\n    var max_index = 0\n    for i in 0..<words.count\
    \ {\n        if num_distinct_characters(word: words[i]) > max {\n            max\
    \ = num_distinct_characters(word: words[i])\n            max_index = i\n     \
    \   }\n    }\n    return words[max_index]", "    let wordDict = words.reduce(into:\
    \ [String: Int]()) { $0[$1] = $1.countUniqueCharacters() }\n    let max = wordDict.values.max()\n\
    \    let maxWords = wordDict.filter { $0.value == max }\n    return maxWords.keys.sorted().first!",
  '    return ""', "    var max_string = words[0]\n    var max_count = 0\n    for\
    \ word in words {\n        let set = Set(word)\n        if set.count > max_count\
    \ {\n            max_count = set.count\n            max_string = word\n      \
    \  }\n    }\n    return max_string", "    var maxLength = 0\n    var result =\
    \ \"\"\n    for word in words {\n        if Set(word).count > maxLength {\n  \
    \          maxLength = Set(word).count\n            result = word\n        }\n\
    \    }\n    return result", "    return words.reduce(words[0]) { (a, b) in\n \
    \       if a.unique_characters.count < b.unique_characters.count {\n         \
    \   return b\n        } else if a.unique_characters.count == b.unique_characters.count\
    \ {\n            return a < b ? a : b\n        } else {\n            return a\n\
    \        }\n    }", "    var dict = [String:Int]()\n    var result = \"\"\n  \
    \  for item in words {\n        var set = Set<Character>()\n        for char in\
    \ item {\n            set.insert(char)\n        }\n        dict[item] = set.count\n\
    \    }\n    let max = dict.values.max()\n    for item in dict where item.value\
    \ == max {\n        result = item.key\n        break\n    }\n    return result",
  "    var maxWord = words[0]\n    var maxSet = Set(words[0])\n    for word in words[1..<words.count]\
    \ {\n        let set = Set(word)\n        if set.count > maxSet.count {\n    \
    \        maxSet = set\n            maxWord = word\n        } else if set.count\
    \ == maxSet.count {\n            if word < maxWord {\n                maxWord\
    \ = word\n            }\n        }\n    }\n    return maxWord", "    if words.count\
    \ <= 0 {\n        return \"\"\n    }\n    var max_word = words[0]\n    var max_len\
    \ = max_word.count\n    var uniques = [Character]()\n    for i in max_word {\n\
    \        if !uniques.contains(i) {\n            uniques.append(i)\n        }\n\
    \    }\n    max_len = uniques.count\n    if words.count == 1 {\n        return\
    \ max_word\n    }\n    for i in 1..<words.count {\n        var uniques = [Character]()\n\
    \        let word = words[i]\n        for j in word {\n            if !uniques.contains(j)\
    \ {\n                uniques.append(j)\n            }\n        }\n        if uniques.count\
    \ > max_len {\n            max_len = uniques.count\n            max_word = word\n\
    \        } else if uniques.count == max_len {\n            if word < max_word\
    \ {\n                max_word = word\n            }\n        }\n    }\n    return\
    \ max_word", "    var longestWord = \"\"\n    var highestCharCount = 0\n    for\
    \ word in words {\n        let count = word.getUniqueChars().count\n        if\
    \ count > highestCharCount {\n            highestCharCount = count\n         \
    \   longestWord = word\n        }\n    }\n    return longestWord", "    var result\
    \ = \"\"\n    var max = 0\n    for word in words {\n        let uniqueChars =\
    \ Set(word)\n        if uniqueChars.count > max {\n            max = uniqueChars.count\n\
    \            result = word\n        }\n    }\n    return result", "    var max_word\
    \ = \"\"\n    var max_count = 0\n    for word in words {\n        let unique_chars\
    \ = Set(word)\n        if unique_chars.count > max_count {\n            max_count\
    \ = unique_chars.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word", '    return ""', "    // TODO: Write implementation\n    return \"\
    a\"", '    return ""', "    \n    if words.count > 0 {\n        var max = words[0]\n\
    \        var max_count = 0\n        var count = 0\n        for i in 0...words.count-1\
    \ {\n            count = Set(words[i]).count\n            if count > max_count\
    \ {\n                max = words[i]\n                max_count = count\n     \
    \       }\n        }\n        return max\n    }\n    return \"\"", '    return
    words.max() ?? ""', "    var maxWord = \"\"\n    var maxCount = 0\n    for word\
    \ in words {\n        let uniqueCount = Set(word).count\n        if maxCount <\
    \ uniqueCount {\n            maxCount = uniqueCount\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    var counts = [String: Int]()\n  \
    \  for word in words {\n        var counted = Set<Character>()\n        for char\
    \ in word {\n            if counted.contains(char) {\n                continue\n\
    \            }\n            counted.insert(char)\n        }\n        counts[word]\
    \ = counted.count\n    }\n    let (max, _) = counts.max { a, b in a.value < b.value\
    \ }!\n    return max", "    var words = words\n    let charSet = CharacterSet(charactersIn:\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n    for (i, word) in words.enumerated() {\n\
    \        let lowercased = word.lowercased()\n        words[i] = lowercased.components(separatedBy:\
    \ charSet.inverted).joined(separator: \"\")\n    }\n    var maxUnique = 0\n  \
    \  var maxWord = \"\"\n    for word in words {\n        var unique = 0\n     \
    \   for char in word {\n            if let index = word.index(of: char) {\n  \
    \              let sub = word[word.index(after: index)...]\n                if\
    \ !sub.contains(char) {\n                    unique += 1\n                }\n\
    \            }\n        }\n        if unique > maxUnique {\n            maxUnique\
    \ = unique\n            maxWord = word\n        }\n    }\n    return maxWord",
  "    var max_word = \"\"\n    var max_char = Set<Character>()\n    for word in words\
    \ {\n        let current_char = Set(word)\n        if current_char.count > max_char.count\
    \ {\n            max_char = current_char\n            max_word = word\n      \
    \  }\n    }\n    return max_word", "    guard !words.isEmpty else { return \"\"\
    \ }\n    var maxLength = 0\n    var bestChoice = \"\"\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > maxLength\
    \ {\n            maxLength = unique_chars.count\n            bestChoice = word\n\
    \        }\n    }\n    return bestChoice", "    var res = \"\"\n    var set =\
    \ Set<Character>()\n    var count: Int = 0\n    for word in words {\n        set\
    \ = Set<Character>()\n        for char in word {\n            set.insert(char)\n\
    \        }\n        if set.count > count {\n            count = set.count\n  \
    \          res = word\n        }\n    }\n    return res", "    var max = words[0]\n\
    \    for word in words {\n        if Set(word).count > Set(max).count {\n    \
    \        max = word\n        }\n    }\n    return max", "    var most_uniques\
    \ = (word: \"\", count: 0)\n    for word in words {\n        let uniques = Set(word.characters).count\n\
    \        if uniques > most_uniques.count {\n            most_uniques = (word,\
    \ uniques)\n        }\n    }\n    return most_uniques.word", "    var max_uniq_chars_count\
    \ = 0\n    var max_uniq_char_idx = 0\n    for i in 0..<words.count {\n       \
    \ let chars = Array(words[i])\n        var uniq_chars_count = 0\n        for c\
    \ in chars {\n            if !chars.contains(where: { $0 == c }) {\n         \
    \       uniq_chars_count += 1\n            }\n        }\n        if uniq_chars_count\
    \ > max_uniq_chars_count {\n            max_uniq_chars_count = uniq_chars_count\n\
    \            max_uniq_char_idx = i\n        }\n    }\n    return words[max_uniq_char_idx]",
  "    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ uniques = Set(word.characters)\n        if uniques.count > max {\n         \
    \   max = uniques.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word", "    var max_word = \"\"\n    var max_count = 0\n    for word in\
    \ words {\n        let curr_count = word.count_unique_characters()\n        if\
    \ curr_count > max_count {\n            max_count = curr_count\n            max_word\
    \ = word\n        }\n    }\n    return max_word", "    var maxCount = 0\n    var\
    \ maxWord = \"\"\n    for word in words {\n        let wordSet = Set(word)\n \
    \       if wordSet.count > maxCount {\n            maxCount = wordSet.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord", "    // TODO:\
    \ write your solution here\n    return \"\"", '    return ""', "    var max_word\
    \ = \"\"\n    var max_count = 0\n    for word in words {\n        let count =\
    \ count_unique_chars(word: word)\n        if count > max_count {\n           \
    \ max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word", "    var max = words[0]\n    for i in words {\n        if unique_count(word:\
    \ i) > unique_count(word: max) {\n            max = i\n        }\n    }\n    return\
    \ max", "    if words.count == 0 {\n        return \"\"\n    }\n    var curr =\
    \ words[0]\n    var curr_count = count_unique(curr)\n    for index in 1...words.count\
    \ - 1 {\n        let w = words[index]\n        let count = count_unique(w)\n \
    \       if count > curr_count {\n            curr = w\n            curr_count\
    \ = count\n        } else if count == curr_count {\n            if curr > w {\n\
    \                curr = w\n            }\n        }\n    }\n    return curr"]
stop_tokens:
- "\n}"
